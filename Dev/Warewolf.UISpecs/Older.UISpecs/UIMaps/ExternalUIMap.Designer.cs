// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Dev2.CodedUI.Tests.UIMaps.ExternalUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public partial class ExternalUIMap
    {
        
        /// <summary>
        /// NotepadTextContains - Use 'NotepadTextContainsExpectedValues' to pass parameters into this method.
        /// </summary>
        private bool uiMapNotepadTextContains(string text)
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIUntitledNotepadWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '<?xml version="1.0" encoding="utf-16"?><ClipboardData Metadata="{x:Null}" Version="1.0" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:dsca="clr-namespace:Dev2.Studio.Core.Activities;assembly=Dev2.Studio.Core.Activities" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:p="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:uaba="clr-namespace:Unlimited.Applications.BusinessDesignStudio.Activities;assembly=Unlimited.Applications.BusinessDesignStudio.Activities" xmlns:uf="clr-namespace:Unlimited.Framework;assembly=Unlimited.Framework" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"><ClipboardData.Data><scg:List x:TypeArguments="x:Object" Capacity="1"><p:Flowchart DisplayName="Base64ToString" VirtualizedContainerService.HintSize="734,1088" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces"><p:Flowchart.Variables><p:Variable x:TypeArguments="scg:List(x:String)" Name="InstructionList" /><p:Variable x:TypeArguments="x:String" Name="LastResult" /><p:Variable x:TypeArguments="x:Boolean" Name="HasError" /><p:Variable x:TypeArguments="x:String" Name="ExplicitDataList" /><p:Variable x:TypeArguments="x:Boolean" Name="IsValid" /><p:Variable x:TypeArguments="uf:UnlimitedObject" Name="d" /><p:Variable x:TypeArguments="uaba:Util" Name="t" /></p:Flowchart.Variables><WorkflowViewStateService.ViewState><scg:Dictionary x:TypeArguments="x:String, x:Object"><x:Boolean x:Key="IsExpanded">False</x:Boolean><av:Point x:Key="ShapeLocation">270,2.5</av:Point><av:Size x:Key="ShapeSize">60,75</av:Size><x:Double x:Key="Width">720.5</x:Double><x:Double x:Key="Height">1051.5</x:Double><av:PointCollection x:Key="ConnectorLocation">300,77.5 300,107.5 330,107.5 330,168.5</av:PointCollection></scg:Dictionary></WorkflowViewStateService.ViewState><p:Flowchart.StartNode><x:Reference>__ReferenceID0</x:Reference></p:Flowchart.StartNode><p:FlowStep x:Name="__ReferenceID0"><WorkflowViewStateService.ViewState><scg:Dictionary x:TypeArguments="x:String, x:Object"><av:Point x:Key="ShapeLocation">41.5,168.5</av:Point><av:Size x:Key="ShapeSize">577,738</av:Size></scg:Dictionary></WorkflowViewStateService.ViewState><uaba:DsfAssignActivity Compiler="{x:Null}" CurrentResult="{x:Null}" DataObject="{x:Null}" ExplicitDataList="{x:Null}" InputMapping="{x:Null}" InputTransformation="{x:Null}" OnResumeKeepList="{x:Null}" OutputMapping="{x:Null}" ParentServiceName="{x:Null}" ParentWorkflowInstanceId="{x:Null}" ResultTransformation="{x:Null}" ScenarioID="{x:Null}" ScopingObject="{x:Null}" ServiceHost="{x:Null}" SimulationOutput="{x:Null}" Add="True" AmbientDataList="[AmbientDataList]" CreateBookmark="False" DatabindRecursive="False" DisplayName="Assign" FieldName="StringFromBase64" FieldValue="{}{{&#xA;&#x9;    var keyStr = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789=&quot;;&#xA;&#x9;     var input = &quot;[[StringToDecode]]&quot;;&#xA;&#x9;     var output = &quot;&quot;;&#xA;&#x9;     var chr1, chr2, chr3 = &quot;&quot;;&#xA;&#x9;     var enc1, enc2, enc3, enc4 = &quot;&quot;;&#xA;&#x9;     var i = 0;&#xA;&#x9; &#xA;&#x9;     input = input.replace(/[^A-Za-z0-9\+\/\=]/g, &quot;&quot;);&#xA;&#x9; &#xA;&#x9;     do {&#xA;&#x9;        enc1 = keyStr.indexOf(input.charAt(i++));&#xA;&#x9;        enc2 = keyStr.indexOf(input.charAt(i++));&#xA;&#x9;        enc3 = keyStr.indexOf(input.charAt(i++));&#xA;&#x9;        enc4 = keyStr.indexOf(input.charAt(i++));&#xA;&#x9; &#xA;&#x9;        chr1 = (enc1 &lt;&lt; 2) | (enc2 &gt;&gt; 4);&#xA;&#x9;        chr2 = ((enc2 &amp; 15) &lt;&lt; 4) | (enc3 &gt;&gt; 2);&#xA;&#x9;        chr3 = ((enc3 &amp; 3) &lt;&lt; 6) | enc4;&#xA;&#x9; &#xA;&#x9;        output = output + String.fromCharCode(chr1);&#xA;&#x9; &#xA;&#x9;        if (enc3 != 64) {&#xA;&#x9;           output = output + String.fromCharCode(chr2);&#xA;&#x9;        }&#xA;&#x9;        if (enc4 != 64) {&#xA;&#x9;           output = output + String.fromCharCode(chr3);&#xA;&#x9;        }&#xA;&#x9; &#xA;&#x9;        chr1 = chr2 = chr3 = &quot;&quot;;&#xA;&#x9;        enc1 = enc2 = enc3 = enc4 = &quot;&quot;;&#xA;&#x9; &#xA;&#x9;     } while (i &lt; input.length);&#xA;&#x9; &#xA;&#x9;     output=output;&#xA;}}" HasError="[HasError]" VirtualizedContainerService.HintSize="577,738" InstructionList="[InstructionList]" IsSimulationEnabled="False" IsUIStep="False" IsValid="[IsValid]" IsWorkflow="False" OnResumeClearAmbientDataList="False" OnResumeClearTags="FormView,InstanceId,Bookmark,ParentWorkflowInstanceId,ParentServiceName,WebPage" SimulationMode="OnDemand" UniqueID="c6bd7c48-9610-4312-a859-d606aea4e462" UpdateAllOccurrences="False" /></p:FlowStep></p:Flowchart></scg:List></ClipboardData.Data></ClipboardData>'
            if (uIItemEdit.Text.Contains(text))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        private UITestControl GetIE()
        {
            UITestControl ie = new UITestControl();
            ie.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            ie.SearchProperties[UITestControl.PropertyNames.ControlType] = "Window";
            ie.TechnologyName = "MSAA";
            ie.Find();
            return ie;
        }

        private WinWindow GetOutlookAfterFeedbackWindow()
        {
            WinWindow theWindow = new WinWindow();
            theWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Some Real Live Feedback : Feedback - Message (Plain Text) ";
            theWindow.Find();
            return theWindow;
        }
        
        #region Properties
        public virtual NotepadTextContainsExpectedValues NotepadTextContainsExpectedValues
        {
            get
            {
                if ((this.mNotepadTextContainsExpectedValues == null))
                {
                    this.mNotepadTextContainsExpectedValues = new NotepadTextContainsExpectedValues();
                }
                return this.mNotepadTextContainsExpectedValues;
            }
        }
        
        public UIUntitledNotepadWindow UIUntitledNotepadWindow
        {
            get
            {
                if ((this.mUIUntitledNotepadWindow == null))
                {
                    this.mUIUntitledNotepadWindow = new UIUntitledNotepadWindow();
                }
                return this.mUIUntitledNotepadWindow;
            }
        }
        #endregion
        
        #region Fields
        private NotepadTextContainsExpectedValues mNotepadTextContainsExpectedValues;
        
        private UIUntitledNotepadWindow mUIUntitledNotepadWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NotepadTextContains'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class NotepadTextContainsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '<?xml version="1.0" encoding="utf-16"?><ClipboardData Metadata="{x:Null}" Version="1.0" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:dsca="clr-namespace:Dev2.Studio.Core.Activities;assembly=Dev2.Studio.Core.Activities" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:p="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:uaba="clr-namespace:Unlimited.Applications.BusinessDesignStudio.Activities;assembly=Unlimited.Applications.BusinessDesignStudio.Activities" xmlns:uf="clr-namespace:Unlimited.Framework;assembly=Unlimited.Framework" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"><ClipboardData.Data><scg:List x:TypeArguments="x:Object" Capacity="1"><p:Flowchart DisplayName="Base64ToString" VirtualizedContainerService.HintSize="734,1088" mva:VisualBasic.Settings="Assembly references and imported namespaces serialized as XML namespaces"><p:Flowchart.Variables><p:Variable x:TypeArguments="scg:List(x:String)" Name="InstructionList" /><p:Variable x:TypeArguments="x:String" Name="LastResult" /><p:Variable x:TypeArguments="x:Boolean" Name="HasError" /><p:Variable x:TypeArguments="x:String" Name="ExplicitDataList" /><p:Variable x:TypeArguments="x:Boolean" Name="IsValid" /><p:Variable x:TypeArguments="uf:UnlimitedObject" Name="d" /><p:Variable x:TypeArguments="uaba:Util" Name="t" /></p:Flowchart.Variables><WorkflowViewStateService.ViewState><scg:Dictionary x:TypeArguments="x:String, x:Object"><x:Boolean x:Key="IsExpanded">False</x:Boolean><av:Point x:Key="ShapeLocation">270,2.5</av:Point><av:Size x:Key="ShapeSize">60,75</av:Size><x:Double x:Key="Width">720.5</x:Double><x:Double x:Key="Height">1051.5</x:Double><av:PointCollection x:Key="ConnectorLocation">300,77.5 300,107.5 330,107.5 330,168.5</av:PointCollection></scg:Dictionary></WorkflowViewStateService.ViewState><p:Flowchart.StartNode><x:Reference>__ReferenceID0</x:Reference></p:Flowchart.StartNode><p:FlowStep x:Name="__ReferenceID0"><WorkflowViewStateService.ViewState><scg:Dictionary x:TypeArguments="x:String, x:Object"><av:Point x:Key="ShapeLocation">41.5,168.5</av:Point><av:Size x:Key="ShapeSize">577,738</av:Size></scg:Dictionary></WorkflowViewStateService.ViewState><uaba:DsfAssignActivity Compiler="{x:Null}" CurrentResult="{x:Null}" DataObject="{x:Null}" ExplicitDataList="{x:Null}" InputMapping="{x:Null}" InputTransformation="{x:Null}" OnResumeKeepList="{x:Null}" OutputMapping="{x:Null}" ParentServiceName="{x:Null}" ParentWorkflowInstanceId="{x:Null}" ResultTransformation="{x:Null}" ScenarioID="{x:Null}" ScopingObject="{x:Null}" ServiceHost="{x:Null}" SimulationOutput="{x:Null}" Add="True" AmbientDataList="[AmbientDataList]" CreateBookmark="False" DatabindRecursive="False" DisplayName="Assign" FieldName="StringFromBase64" FieldValue="{}{{&#xA;&#x9;    var keyStr = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789=&quot;;&#xA;&#x9;     var input = &quot;[[StringToDecode]]&quot;;&#xA;&#x9;     var output = &quot;&quot;;&#xA;&#x9;     var chr1, chr2, chr3 = &quot;&quot;;&#xA;&#x9;     var enc1, enc2, enc3, enc4 = &quot;&quot;;&#xA;&#x9;     var i = 0;&#xA;&#x9; &#xA;&#x9;     input = input.replace(/[^A-Za-z0-9\+\/\=]/g, &quot;&quot;);&#xA;&#x9; &#xA;&#x9;     do {&#xA;&#x9;        enc1 = keyStr.indexOf(input.charAt(i++));&#xA;&#x9;        enc2 = keyStr.indexOf(input.charAt(i++));&#xA;&#x9;        enc3 = keyStr.indexOf(input.charAt(i++));&#xA;&#x9;        enc4 = keyStr.indexOf(input.charAt(i++));&#xA;&#x9; &#xA;&#x9;        chr1 = (enc1 &lt;&lt; 2) | (enc2 &gt;&gt; 4);&#xA;&#x9;        chr2 = ((enc2 &amp; 15) &lt;&lt; 4) | (enc3 &gt;&gt; 2);&#xA;&#x9;        chr3 = ((enc3 &amp; 3) &lt;&lt; 6) | enc4;&#xA;&#x9; &#xA;&#x9;        output = output + String.fromCharCode(chr1);&#xA;&#x9; &#xA;&#x9;        if (enc3 != 64) {&#xA;&#x9;           output = output + String.fromCharCode(chr2);&#xA;&#x9;        }&#xA;&#x9;        if (enc4 != 64) {&#xA;&#x9;           output = output + String.fromCharCode(chr3);&#xA;&#x9;        }&#xA;&#x9; &#xA;&#x9;        chr1 = chr2 = chr3 = &quot;&quot;;&#xA;&#x9;        enc1 = enc2 = enc3 = enc4 = &quot;&quot;;&#xA;&#x9; &#xA;&#x9;     } while (i &lt; input.length);&#xA;&#x9; &#xA;&#x9;     output=output;&#xA;}}" HasError="[HasError]" VirtualizedContainerService.HintSize="577,738" InstructionList="[InstructionList]" IsSimulationEnabled="False" IsUIStep="False" IsValid="[IsValid]" IsWorkflow="False" OnResumeClearAmbientDataList="False" OnResumeClearTags="FormView,InstanceId,Bookmark,ParentWorkflowInstanceId,ParentServiceName,WebPage" SimulationMode="OnDemand" UniqueID="c6bd7c48-9610-4312-a859-d606aea4e462" UpdateAllOccurrences="False" /></p:FlowStep></p:Flowchart></scg:List></ClipboardData.Data></ClipboardData>'
        /// </summary>
        public string UIItemEditText = "<?xml version=\"1.0\" encoding=\"utf-16\"?><ClipboardData Metadata=\"{x:Null}\" Version" +
            "=\"1.0\" xmlns=\"http://schemas.microsoft.com/netfx/2009/xaml/activities/presentati" +
            "on\" xmlns:av=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:d" +
            "sca=\"clr-namespace:Dev2.Studio.Core.Activities;assembly=Dev2.Studio.Core.Activit" +
            "ies\" xmlns:mva=\"clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.A" +
            "ctivities\" xmlns:p=\"http://schemas.microsoft.com/netfx/2009/xaml/activities\" xml" +
            "ns:s=\"clr-namespace:System;assembly=mscorlib\" xmlns:scg=\"clr-namespace:System.Co" +
            "llections.Generic;assembly=mscorlib\" xmlns:uaba=\"clr-namespace:Unlimited.Applica" +
            "tions.BusinessDesignStudio.Activities;assembly=Unlimited.Applications.BusinessDe" +
            "signStudio.Activities\" xmlns:uf=\"clr-namespace:Unlimited.Framework;assembly=Unli" +
            "mited.Framework\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"><Clipboa" +
            "rdData.Data><scg:List x:TypeArguments=\"x:Object\" Capacity=\"1\"><p:Flowchart Displ" +
            "ayName=\"Base64ToString\" VirtualizedContainerService.HintSize=\"734,1088\" mva:Visu" +
            "alBasic.Settings=\"Assembly references and imported namespaces serialized as XML " +
            "namespaces\"><p:Flowchart.Variables><p:Variable x:TypeArguments=\"scg:List(x:Strin" +
            "g)\" Name=\"InstructionList\" /><p:Variable x:TypeArguments=\"x:String\" Name=\"LastRe" +
            "sult\" /><p:Variable x:TypeArguments=\"x:Boolean\" Name=\"HasError\" /><p:Variable x:" +
            "TypeArguments=\"x:String\" Name=\"ExplicitDataList\" /><p:Variable x:TypeArguments=\"" +
            "x:Boolean\" Name=\"IsValid\" /><p:Variable x:TypeArguments=\"uf:UnlimitedObject\" Nam" +
            "e=\"d\" /><p:Variable x:TypeArguments=\"uaba:Util\" Name=\"t\" /></p:Flowchart.Variabl" +
            "es><WorkflowViewStateService.ViewState><scg:Dictionary x:TypeArguments=\"x:String" +
            ", x:Object\"><x:Boolean x:Key=\"IsExpanded\">False</x:Boolean><av:Point x:Key=\"Shap" +
            "eLocation\">270,2.5</av:Point><av:Size x:Key=\"ShapeSize\">60,75</av:Size><x:Double" +
            " x:Key=\"Width\">720.5</x:Double><x:Double x:Key=\"Height\">1051.5</x:Double><av:Poi" +
            "ntCollection x:Key=\"ConnectorLocation\">300,77.5 300,107.5 330,107.5 330,168.5</a" +
            "v:PointCollection></scg:Dictionary></WorkflowViewStateService.ViewState><p:Flowc" +
            "hart.StartNode><x:Reference>__ReferenceID0</x:Reference></p:Flowchart.StartNode>" +
            "<p:FlowStep x:Name=\"__ReferenceID0\"><WorkflowViewStateService.ViewState><scg:Dic" +
            "tionary x:TypeArguments=\"x:String, x:Object\"><av:Point x:Key=\"ShapeLocation\">41." +
            "5,168.5</av:Point><av:Size x:Key=\"ShapeSize\">577,738</av:Size></scg:Dictionary><" +
            "/WorkflowViewStateService.ViewState><uaba:DsfAssignActivity Compiler=\"{x:Null}\" " +
            "CurrentResult=\"{x:Null}\" DataObject=\"{x:Null}\" ExplicitDataList=\"{x:Null}\" Input" +
            "Mapping=\"{x:Null}\" InputTransformation=\"{x:Null}\" OnResumeKeepList=\"{x:Null}\" Ou" +
            "tputMapping=\"{x:Null}\" ParentServiceName=\"{x:Null}\" ParentWorkflowInstanceId=\"{x" +
            ":Null}\" ResultTransformation=\"{x:Null}\" ScenarioID=\"{x:Null}\" ScopingObject=\"{x:" +
            "Null}\" ServiceHost=\"{x:Null}\" SimulationOutput=\"{x:Null}\" Add=\"True\" AmbientData" +
            "List=\"[AmbientDataList]\" CreateBookmark=\"False\" DatabindRecursive=\"False\" Displa" +
            "yName=\"Assign\" FieldName=\"StringFromBase64\" FieldValue=\"{}{{&#xA;&#x9;    var ke" +
            "yStr = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789=&quo" +
            "t;;&#xA;&#x9;     var input = &quot;[[StringToDecode]]&quot;;&#xA;&#x9;     var " +
            "output = &quot;&quot;;&#xA;&#x9;     var chr1, chr2, chr3 = &quot;&quot;;&#xA;&#" +
            "x9;     var enc1, enc2, enc3, enc4 = &quot;&quot;;&#xA;&#x9;     var i = 0;&#xA;" +
            "&#x9; &#xA;&#x9;     input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, &quot;&quot;);" +
            "&#xA;&#x9; &#xA;&#x9;     do {&#xA;&#x9;        enc1 = keyStr.indexOf(input.char" +
            "At(i++));&#xA;&#x9;        enc2 = keyStr.indexOf(input.charAt(i++));&#xA;&#x9;  " +
            "      enc3 = keyStr.indexOf(input.charAt(i++));&#xA;&#x9;        enc4 = keyStr.i" +
            "ndexOf(input.charAt(i++));&#xA;&#x9; &#xA;&#x9;        chr1 = (enc1 &lt;&lt; 2) " +
            "| (enc2 &gt;&gt; 4);&#xA;&#x9;        chr2 = ((enc2 &amp; 15) &lt;&lt; 4) | (enc" +
            "3 &gt;&gt; 2);&#xA;&#x9;        chr3 = ((enc3 &amp; 3) &lt;&lt; 6) | enc4;&#xA;&" +
            "#x9; &#xA;&#x9;        output = output + String.fromCharCode(chr1);&#xA;&#x9; &#" +
            "xA;&#x9;        if (enc3 != 64) {&#xA;&#x9;           output = output + String.f" +
            "romCharCode(chr2);&#xA;&#x9;        }&#xA;&#x9;        if (enc4 != 64) {&#xA;&#x" +
            "9;           output = output + String.fromCharCode(chr3);&#xA;&#x9;        }&#xA" +
            ";&#x9; &#xA;&#x9;        chr1 = chr2 = chr3 = &quot;&quot;;&#xA;&#x9;        enc" +
            "1 = enc2 = enc3 = enc4 = &quot;&quot;;&#xA;&#x9; &#xA;&#x9;     } while (i &lt; " +
            "input.length);&#xA;&#x9; &#xA;&#x9;     output=output;&#xA;}}\" HasError=\"[HasErr" +
            "or]\" VirtualizedContainerService.HintSize=\"577,738\" InstructionList=\"[Instructio" +
            "nList]\" IsSimulationEnabled=\"False\" IsUIStep=\"False\" IsValid=\"[IsValid]\" IsWorkf" +
            "low=\"False\" OnResumeClearAmbientDataList=\"False\" OnResumeClearTags=\"FormView,Ins" +
            "tanceId,Bookmark,ParentWorkflowInstanceId,ParentServiceName,WebPage\" SimulationM" +
            "ode=\"OnDemand\" UniqueID=\"c6bd7c48-9610-4312-a859-d606aea4e462\" UpdateAllOccurren" +
            "ces=\"False\" /></p:FlowStep></p:Flowchart></scg:List></ClipboardData.Data></Clipb" +
            "oardData>";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIUntitledNotepadWindow : WinWindow
    {
        
        public UIUntitledNotepadWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Untitled - Notepad";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Notepad";
            this.WindowTitles.Add("Untitled - Notepad");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "15";
            this.WindowTitles.Add("Untitled - Notepad");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Untitled - Notepad");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
}
