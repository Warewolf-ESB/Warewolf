<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:igDp="http://infragistics.com/DataPresenter"
                    xmlns:controls="http://infragistics.com/Windows"
                    xmlns:themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Luna"
                    xmlns:igThemes="http://infragistics.com/Themes"
                    xmlns:interop="clr-namespace:System.Windows.Interop;assembly=PresentationFramework"
                    xmlns:editors="http://infragistics.com/Editors"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:luna="clr-namespace:Warewolf.Studio.Themes.Luna"
                    mc:Ignorable="d">

    <ResourceDictionary.MergedDictionaries>
        <luna:SharedResourceDictionary Source="../Common/Color.xaml" />
        <luna:SharedResourceDictionary Source="../Common/Brushes.xaml" />
        <luna:SharedResourceDictionary Source="../Common/Styles.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- ____________________________Converters______________________________________ -->
    <igDp:TextAlignmentToHorizontalAlignmentConverter x:Key="TextAlignmentToHorizontalAlignmentConverter"/>

    <controls:NotBoolToVisibilityConverter x:Key="NotBoolToVisConverter" />
    <controls:StringFormatConverter x:Key="StringFormatConverter" />
    <controls:NullToFalseConverter x:Key="NullToFalseConverter" />

    <Pen x:Key="CustomPenBrush" Thickness="1">
        <Pen.Brush>
            <DrawingBrush TileMode="Tile" Stretch="None" Viewport="0,0,3,3" ViewportUnits="Absolute">
                <DrawingBrush.Drawing>
                    <GeometryDrawing>
                        <GeometryDrawing.Pen>
                            <Pen Brush="Transparent" />
                        </GeometryDrawing.Pen>
                        <GeometryDrawing.Geometry>
                            <LineGeometry StartPoint="0,0" EndPoint="3,3" />
                        </GeometryDrawing.Geometry>
                    </GeometryDrawing>
                </DrawingBrush.Drawing>
            </DrawingBrush>
        </Pen.Brush>
    </Pen>

    <!-- ____________________________Storyboards_____________________________________ -->
    <Storyboard x:Key="ExpandLabel">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleX)" BeginTime="0:0:0">
            <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>
    <Storyboard x:Key="CollapseLabel">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleX)" BeginTime="0:0:00">
            <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <!-- _________________________ LabelContent Style______________________________________ -->
    <Style x:Key="LabelContentStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="Padding" Value="10,3,10,3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <ContentPresenter Margin="{TemplateBinding Padding}"
                                          Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ BlackForegroundStyle ______________________________________ -->
    <Style x:Key="{ComponentResourceKey {x:Type igDp:XamDataGrid}, GrayForegroundStyle}">
        <Setter Property="TextBlock.Foreground" Value="#FF333333" />
    </Style>

    <Style x:Key="{ComponentResourceKey {x:Type igDp:XamDataGrid}, BlackForegroundStyle}">
        <Setter Property="TextBlock.Foreground" Value="Black" />
    </Style>

    <!-- _________________________ Converters ______________________________________ -->
    <BooleanToVisibilityConverter x:Key="BoolToVisConverter"/>
    <Style x:Key="{ComponentResourceKey {x:Type igDp:XamDataGrid}, RecordSeparatorStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=SummaryCommandButtonsBackgroundHover}}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Height" Value="6"/>
        <Setter Property="BorderThickness" Value="0,1,0,1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=SummaryCommandButtonsBorder}}"/>
    </Style>

    <!-- _________________________ XamDataGrid __________________________________________ -->
    <Style TargetType="{x:Type igDp:XamDataGrid}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.BaseBackgroundKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:XamDataGrid}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="PART_ContentSiteGrid"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ XamTreeGrid __________________________________________ -->
    <Style TargetType="{x:Type igDp:XamTreeGrid}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.BaseBackgroundKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:XamTreeGrid}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="PART_ContentSiteGrid"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ CellPresenter __________________________________________ -->
    <Style TargetType="{x:Type igDp:CellPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:CellPresenter}">
                    <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="True">
                        <igDp:CellPresenterLayoutElement SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ DataErrorContentTemplate __________________________________________ -->
    <DataTemplate x:Key="{x:Static igDp:DataPresenterBase.DataErrorContentTemplateKey}" >
        <Border x:Name="Bd">
            <DockPanel x:Name="panel">
                <controls:AutomationControl x:Name="errorIcon" DockPanel.Dock="Left" Visibility="Collapsed" Margin="2,0"
                                                Style="{DynamicResource {x:Static igDp:DataPresenterBase.DataErrorIconStyleKey}}" />
                <ContentPresenter ContentTemplate="{Binding Path=Content.Host.ContentTemplate, RelativeSource={x:Static RelativeSource.Self}}"
                                      DataContext="{Binding Path=Content.Host.DataContext, RelativeSource={x:Static RelativeSource.Self}}" />
            </DockPanel>
        </Border>
        <DataTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Host.HasDataError}" Value="true" />
                    <Condition Binding="{Binding Path=Host.IsDataErrorDisplayModeIcon}" Value="true" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="errorIcon" Property="Visibility" Value="Visible" />
                <Setter TargetName="errorIcon" Property="ToolTip" Value="{Binding Path=Host.DataError}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Host.HasDataError}" Value="true" />
                    <Condition Binding="{Binding Path=Host.IsDataErrorDisplayModeHighlight}" Value="true" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.DataErrorHighlightBackgroundBrushKey}}" />
                <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.DataErrorHighlightBorderBrushKey}}" />
                <Setter TargetName="Bd" Property="BorderThickness" Value="1"/>
                <Setter TargetName="Bd" Property="CornerRadius" Value="1"/>
                <Setter TargetName="panel" Property="ToolTip" Value="{Binding Path=Host.DataError}" />
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- _________________________ DataErrorIconStyle __________________________________________ -->
    <Style x:Key="{x:Static igDp:DataPresenterBase.DataErrorIconStyleKey}" TargetType="{x:Type Control}" >
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.DataErrorIconForegroundBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <Border Background="{TemplateBinding Background}">
                        <Path Width="8" Height="8" Fill="{TemplateBinding Foreground}"
                                  Data="M 8,4.457 C8,4.457 5,4.457 5,4.457 5,4.457 7.5,6.987 7.5,6.987 7.5,6.987 5.5,8 5.5,8 5.5,8 4,5.469 4,5.469 4,5.469 2.5,8 2.5,8 2.5,8 0.5,6.987 0.5,6.987 0.5,6.987 3,4.457 3,4.457 3,4.457 0,4.457 0,4.457 0,4.457 0.5,1.927 0.5,1.927 0.5,1.927 3,2.433 3,2.433 3,2.433 2.759,0 2.759,0 2.759,0 5.273,0 5.273,0 5.273,0 5,2.433 5,2.433 5,2.433 7.5,1.927 7.5,1.927 7.5,1.927 8,4.457 8,4.457 z" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ CellValuePresenter __________________________________________ -->
    <Style TargetType="{x:Type igDp:CellValuePresenter}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BackgroundHover" Value="Transparent"/>
        <Setter Property="BorderHoverBrush" Value="Transparent"/>
        <Setter Property="BackgroundActive" Value="Transparent"/>
        <Setter Property="BorderActiveBrush" Value="Transparent"/>
        <Setter Property="BackgroundSelected" Value="Transparent"/>
        <Setter Property="BorderSelectedBrush" Value="#FF666666"/>
        <Setter Property="BackgroundFieldSelected" Value="Transparent"/>
        <Setter Property="BorderFieldSelectedBrush" Value="#FF666666"/>
        <Setter Property="BackgroundPrimary" Value="#7FE9E9E9"/>
        <Setter Property="BorderPrimaryBrush" Value="#FFE9E9E9"/>
        <Setter Property="ForegroundStyle">
            <Setter.Value>
                <Style/>
            </Setter.Value>
        </Setter>
        <Setter Property="ForegroundActiveStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
        <Setter Property="ForegroundAlternateStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
        <Setter Property="ForegroundPrimaryStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
        <Setter Property="ForegroundSelectedStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
        <Setter Property="ForegroundFieldSelectedStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
        <Setter Property="ForegroundHoverStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="2,0,0,0"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:CellValuePresenter}">
                    <controls:CardPanel>
                        <Border x:Name="MainBorder"
                                    CornerRadius="{TemplateBinding CornerRadius}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    Background="{TemplateBinding Background}"/>
                        <Rectangle x:Name="Active"
                                       Fill="{TemplateBinding BackgroundActive}"
                                       HorizontalAlignment="Stretch"
                                       VerticalAlignment="Stretch"
                                       Width="Auto"
                                       Height="Auto"
                                       SnapsToDevicePixels="True"
                                       Opacity="1"
                                       Visibility="Collapsed"
                                       StrokeThickness="1"
                                       Stroke="{TemplateBinding BorderActiveBrush}"/>
                        <ContentPresenter x:Name="PART_EditorSite"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Margin="{TemplateBinding Padding}"
                                              Style="{TemplateBinding ForegroundStyle}" />
                    </controls:CardPanel>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsAlternate, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=Record.RecordType, RelativeSource={RelativeSource Self}}" Value="DataRecord"/>
                                <Condition Binding="{Binding Path=Record.IsAddRecord, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundAlternateStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiDataTrigger>
                        <!-- HighlightAsPrimary -->
                        <Trigger Property="HighlightAsPrimary" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundPrimary, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderPrimaryBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundPrimaryStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <!-- IsFieldSelected -->
                        <Trigger Property="IsFieldSelected" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundFieldSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderFieldSelectedBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundFieldSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <!-- IsSelected -->
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderSelectedBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <!-- IsActive -->
                        <Trigger Property="IsActive" Value="true">
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="Visibility" TargetName="Active" Value="Visible"/>
                        </Trigger>
                        <!-- IsMouseOver -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsFieldSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{Binding Path=BackgroundHover, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderHoverBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiTrigger>
                        <DataTrigger Binding="{Binding Path=Field.IsFixedStateChanging, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="Background" Value="#AA8DBAEB"/>
                            <Setter Property="BorderBrush" Value="#AA8DBAEB"/>
                        </DataTrigger>
                        <Trigger Property="IsDataErrorTemplateActive" Value="true">
                            <Setter TargetName="PART_EditorSite" Property="ContentTemplate" Value="{DynamicResource {x:Static igDp:DataPresenterBase.DataErrorContentTemplateKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsRecordSelected" Value="True">
                <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
            </Trigger>
            <Trigger Property="IsMouseOverRecord" Value="True">
                <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <SolidColorBrush x:Key="ExpanderButtonPressedBackgroundBrush" Color="{StaticResource Color_024}" />
    <Style x:Key="ExpanderStyle" TargetType="{x:Type controls:ExpansionIndicator}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ExpansionIndicator}">
                    <Grid>
                        <Border x:Name="expansionsBtn" BorderThickness="1" Width="13" Height="13" Cursor="Hand" Background="Transparent" BorderBrush="Transparent">
                            <Path x:Name="ArrowPath" Width="5" Height="8" Stretch="Fill" StrokeThickness="0" Fill="{StaticResource WareWolfButtonBrush}" 
                                  Data="M 166,184 C166,184 166,194 166,194 166,194 171,189 171,189 171,189 166,184 166,184 z"
                                      Visibility="Visible" RenderOptions.EdgeMode="Aliased" VerticalAlignment="Center" HorizontalAlignment="Center" UseLayoutRounding="True" Margin="1,0,0,0">
                                <Path.RenderTransform>
                                    <RotateTransform CenterX="2" CenterY="4" Angle="0" />
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="ArrowPath"  Value="{StaticResource ExpanderButtonPressedBackgroundBrush}" />
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Duration="0:0:0.2" To="{StaticResource Color_024}" Storyboard.TargetName="ArrowPath" Storyboard.TargetProperty="Fill.Color" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Duration="0:0:0.15" To="{StaticResource WarewolfButtonGrey}" Storyboard.TargetName="ArrowPath" Storyboard.TargetProperty="Fill.Color" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ArrowPath" Property="Margin" Value="0,0,0,0" />
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" To="90" Storyboard.TargetProperty="RenderTransform.Angle" Storyboard.TargetName="ArrowPath" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.15" To="0" Storyboard.TargetProperty="RenderTransform.Angle" Storyboard.TargetName="ArrowPath" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ TreeCellValuePresenter __________________________________________ -->
    <Style TargetType="{x:Type igDp:TreeCellValuePresenter}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BackgroundHover" Value="Transparent"/>
        <Setter Property="BorderHoverBrush" Value="Transparent"/>
        <Setter Property="BackgroundActive" Value="Transparent"/>
        <Setter Property="BorderActiveBrush" Value="#00151C55"/>
        <Setter Property="BackgroundSelected" Value="Transparent"/>
        <Setter Property="BorderSelectedBrush" Value="#FF666666"/>
        <Setter Property="BackgroundFieldSelected" Value="Transparent"/>
        <Setter Property="BorderFieldSelectedBrush" Value="#FF666666"/>
        <Setter Property="BackgroundPrimary" Value="#7FE9E9E9"/>
        <Setter Property="BorderPrimaryBrush" Value="#FFE9E9E9"/>
        <Setter Property="ForegroundStyle">
            <Setter.Value>
                <Style/>
            </Setter.Value>
        </Setter>
        <Setter Property="ForegroundActiveStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
        <Setter Property="ForegroundAlternateStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
        <Setter Property="ForegroundPrimaryStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
        <Setter Property="ForegroundSelectedStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
        <Setter Property="ForegroundFieldSelectedStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
        <Setter Property="ForegroundHoverStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="2,0,0,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:TreeCellValuePresenter}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{Binding Path=Indent, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="MainBorder"
                                    Grid.ColumnSpan="3"
                                    CornerRadius="{TemplateBinding CornerRadius}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    Background="{TemplateBinding Background}"/>
                        <Rectangle x:Name="Active"
                                       Fill="{TemplateBinding BackgroundActive}"
                                       HorizontalAlignment="Stretch"
                                       VerticalAlignment="Stretch"
                                       Grid.Column="0"
                                       Grid.ColumnSpan="3" 
                                       Height="Auto"
                                       Opacity="1"
                                       SnapsToDevicePixels="True"
                                       Visibility="Collapsed"
                                       StrokeThickness="1"
                                       Stroke="{TemplateBinding BorderActiveBrush}"/>
                        <controls:ExpansionIndicator x:Name="PART_Expander"
                                                         Panel.ZIndex="1"
                                                         Grid.Column="1"
                                                     Margin="0,7,0,0"
                                                         Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}"
                                                         Command="{x:Static igDp:DataPresenterCommands.ToggleRecordIsExpanded}"
                                                         CommandParameter="{TemplateBinding Record}"
                                                         VerticalAlignment="Top"
                                                         ToggleMode="Manual"
                                                         Style="{StaticResource ExpanderStyle}"
                                                         IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <ContentPresenter x:Name="PART_EditorSite"
                                              Grid.Column="2"
                                              IsEnabled="{TemplateBinding IsContentEnabled}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Margin="{TemplateBinding Padding}"
                                              Style="{TemplateBinding ForegroundStyle}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsAlternate, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=Record.RecordType, RelativeSource={RelativeSource Self}}" Value="DataRecord"/>
                                <Condition Binding="{Binding Path=Record.IsAddRecord, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundAlternateStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiDataTrigger>
                        <!-- HighlightAsPrimary -->
                        <Trigger Property="HighlightAsPrimary" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundPrimary, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderPrimaryBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundPrimaryStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <!-- IsFieldSelected -->
                        <Trigger Property="IsFieldSelected" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundFieldSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderFieldSelectedBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundFieldSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <!-- IsSelected -->
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderSelectedBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <!-- IsActive -->
                        <Trigger Property="IsActive" Value="true">
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="Visibility" TargetName="Active" Value="Visible"/>
                        </Trigger>
                        <!-- IsMouseOver -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsFieldSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{Binding Path=BackgroundHover, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderHoverBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiTrigger>
                        <DataTrigger Binding="{Binding Path=Field.IsFixedStateChanging, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="Background" Value="#AA8DBAEB"/>
                            <Setter Property="BorderBrush" Value="#AA8DBAEB"/>
                        </DataTrigger>
                        <Trigger Property="IsDataErrorTemplateActive" Value="true">
                            <Setter TargetName="PART_EditorSite" Property="ContentTemplate" Value="{DynamicResource {x:Static igDp:DataPresenterBase.DataErrorContentTemplateKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsRecordSelected" Value="True">
                <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
            </Trigger>
            <Trigger Property="IsMouseOverRecord" Value="True">
                <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- _________________________ DataRecordPresenter __________________________________________ -->
    <Style TargetType="{x:Type igDp:DataRecordPresenter}">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="HeaderAreaBackground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelBackground}}"/>
        <Setter Property="NestedContentBackground" Value="Transparent"/>
        <Setter Property="Background" Value="#00FFFFFF"/>
        <Setter Property="BorderBrush" Value="#FFCCCCCC"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:DataRecordPresenter}">
                    <controls:CardPanel x:Name="baseGrid" RenderTransform="{TemplateBinding FixedNearElementTransform}" Background="{TemplateBinding Background}">
                        <Border Visibility="Collapsed"
                                    Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=AddRowBackground}}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    HorizontalAlignment="Stretch"
                                    x:Name="addRowFooter"
                                    VerticalAlignment="Stretch"
                                    Width="Auto"
                                    Height="Auto"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        <Grid Margin="0" RenderTransform="{TemplateBinding ScrollableElementTransform}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <!-- Expansion Checkbox -->
                            <Border x:Name="OrientationHorizontalSep" BorderThickness="0,0,1,0" Grid.ColumnSpan="6" Background="#FFFAFAFA" BorderBrush="#FFE7E7E7"  Visibility="Collapsed"/>
                            <controls:ExpansionIndicator x:Name="ExpansionIndicator"
                                                             Panel.ZIndex="1"
                                                             RenderTransform="{TemplateBinding FixedNearElementTransform}"
                                                             Grid.Row="3"
                                                             Grid.Column="1"
                                                             Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}"
                                                             Command="{x:Static igDp:DataPresenterCommands.ToggleRecordIsExpanded}"
                                                             CommandParameter="{TemplateBinding Record}"
                                                             ToggleMode="Manual"
                                                             IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <!-- Header Background -->
                            <controls:CardPanel x:Name="SpacerFill" RenderTransform="{TemplateBinding FixedNearElementTransform}" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="5" Visibility="Visible">
                                <Rectangle x:Name="fill" Margin="0,0,0,0" Fill="Transparent"/>
                                <Rectangle x:Name="lightLine" Fill="Transparent" VerticalAlignment="Top" Margin="0,1,0,0" Width="Auto" Height="1"/>
                                <Rectangle x:Name="darkLine" Fill="Transparent" VerticalAlignment="Top" Margin="0,0,0,0" Width="Auto" Height="1"/>
                            </controls:CardPanel>
                            <ContentPresenter x:Name="PART_HeaderContentSite"
                                                  Grid.Row="1"
                                                  Grid.Column="3"
                                                  Content="{TemplateBinding HeaderContent}"
                                                  Visibility="Visible"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  d:IsHidden="True"/>
                            <Border x:Name="RecordSeparator"
                                        Grid.Row="2"
                                        Grid.Column="1"
                                        Visibility="Collapsed"
                                        RenderTransform="{TemplateBinding FixedNearElementTransform}"
                                        Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=RecordSeparatorStyle}}"
                                        Grid.ColumnSpan="5"/>
                            <!-- Record Content -->
                            <ContentPresenter x:Name="PART_RecordContentSite"
                                                  Grid.Row="3"
                                                  Grid.Column="3"
                                                  Content="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}"
                                                  ContentTemplate="{TemplateBinding RecordContentAreaTemplate}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <!-- Nested Content -->
                            <Border x:Name="PART_NestedContentSite"
                                        Grid.Row="5"
                                        Grid.Column="3"
                                        Visibility="Visible"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Top"
                                        RenderTransform="{TemplateBinding FixedNearElementTransform}"
                                        Background="{TemplateBinding NestedContentBackground}">
                                <ContentControl RenderTransform="{TemplateBinding ScrollableElementTransform}" Content="{TemplateBinding NestedContent}" Margin="2,0,0,0" x:Name="contentControl"/>
                                <!--Margin="10,10,0,0" />-->
                            </Border>
                        </Grid>
                    </controls:CardPanel>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.AutoFitToWidth, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.ColumnSpan" Value="3"/>
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.ColumnSpan" Value="3"/>
                            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                        </MultiDataTrigger>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="3"/>
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Column" Value="1"/>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="3"/>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="5"/>
                            <Setter TargetName="PART_RecordContentSite" Property="VerticalAlignment" Value="Top"/>
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="1"/>
                            <Setter TargetName="ExpansionIndicator" Property="Margin" Value="0,2"/>
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="3"/>
                            <Setter TargetName="SpacerFill" Property="Grid.ColumnSpan" Value="1"/>
                            <Setter TargetName="SpacerFill" Property="Grid.RowSpan" Value="6"/>
                            <Setter TargetName="RecordSeparator" Property="Width" Value="10"/>
                            <Setter TargetName="RecordSeparator" Property="Height" Value="Auto"/>
                            <Setter TargetName="RecordSeparator" Property="BorderThickness" Value="1,0"/>
                            <Setter TargetName="OrientationHorizontalSep" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ShouldDisplayRecordContent" Value="False">
                            <Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShouldDisplayRecordContent" Value="False"/>
                                <Condition Property="IsHeaderRecord" Value="False"/>
                                <Condition Property="ExpansionIndicatorVisibility" Value="Visible"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Horizontal"/>
                                <Condition Property="ShouldDisplayRecordContent" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="5"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Vertical"/>
                                <Condition Property="ShouldDisplayRecordContent" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="5"/>
                        </MultiTrigger>
                        <Trigger Property="IsHeaderRecord" Value="True">
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="1"/>
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="1"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHeaderRecord" Value="True"/>
                                <Condition Property="ExpansionIndicatorVisibility" Value="Visible"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden"/>
                        </MultiTrigger>
                        <Trigger Property="HasHeaderContent" Value="False">
                            <Setter Property="Visibility" TargetName="SpacerFill" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="PART_HeaderContentSite" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasNestedContent" Value="true">
                            <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="baseGrid" Property="Background" Value="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="HasNestedContent" Value="False">
                            <Setter Property="Visibility" TargetName="PART_NestedContentSite" Value="Collapsed"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSpecialRecord}" Value="true" />
                                <Condition Binding="{Binding Path=IsFixedOnTop, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="addRowFooter" Value="Visible"/>
                            <Setter Property="Background" TargetName="addRowFooter" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=FixedRecord}}"/>
                            <Setter Property="BorderThickness" TargetName="addRowFooter" Value="0,0,0,1"/>
                            <Setter Property="Margin" Value="0,0,0,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSpecialRecord}" Value="true" />
                                <Condition Binding="{Binding Path=IsFixedOnBottom, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="addRowFooter" Value="Visible"/>
                            <Setter Property="BorderThickness" TargetName="addRowFooter" Value="0,1,0,0"/>
                            <Setter Property="Background" TargetName="addRowFooter" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=FixedRecord}}"/>
                            <Setter Property="Margin" Value="0,1,0,0"/>
                        </MultiDataTrigger>
                        <Trigger Property="HasSeparatorBefore" Value="true">
                            <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <!-- For HasSeparatorAfter, we have to set grid.row and grid.col based on the orientation-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasSeparatorAfter" Value="true"/>
                                <Condition Property="Orientation" Value="Vertical"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="4"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasSeparatorAfter" Value="true"/>
                                <Condition Property="Orientation" Value="Horizontal"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="RecordSeparator" Property="Grid.Column" Value="4"/>
                            <Setter TargetName="RecordSeparator" Property="Grid.ColumnSpan" Value="1"/>
                            <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="1"/>
                            <Setter TargetName="RecordSeparator" Property="Grid.RowSpan" Value="6"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasSeparatorBefore" Value="true"/>
                                <Condition Property="Orientation" Value="Horizontal"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RecordSeparator" Property="Grid.Column" Value="2"/>
                            <Setter TargetName="RecordSeparator" Property="Grid.ColumnSpan" Value="1"/>
                            <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="1"/>
                            <Setter TargetName="RecordSeparator" Property="Grid.RowSpan" Value="6"/>
                        </MultiTrigger>
                        <Trigger Property="IsOpacityReduced" Value="True">
                            <Setter TargetName="PART_RecordContentSite" Property="Opacity" Value="0.35"/>
                        </Trigger>
                        <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Horizontal"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Horizontal"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="0"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="TemplateCardView">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:DataRecordPresenter}">
                    <controls:CardPanel x:Name="baseGrid" Background="{TemplateBinding Background}">
                        <!-- Record Content -->
                        <Rectangle Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=CardBackground}}"/>
                        <ContentPresenter x:Name="PART_RecordContentSite"
                                              Content="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}"
                                              ContentTemplate="{TemplateBinding RecordContentAreaTemplate}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </controls:CardPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsInCard" Value="True">
                            <Setter Property="VerticalContentAlignment" Value="Top"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ DataRecordCellArea __________________________________________ -->
    <Style TargetType="{x:Type igDp:DataRecordCellArea}">
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Color="#00FFFFFF" Offset="0"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="#00000000"/>
        <Setter Property="BackgroundHover" Value="Transparent"/>
        <Setter Property="BorderHoverBrush" Value="Transparent"/>
        <Setter Property="BackgroundActive" Value="Transparent"/>
        <Setter Property="BorderActiveBrush" Value="#00000000"/>
        <Setter Property="BackgroundAlternate">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0" Color="#00EEEEEE"/>
                    <GradientStop Offset="1" Color="#BF545454"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderAlternateBrush" Value="#00000000"/>
        <Setter Property="BackgroundSelected">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0" Color="#7FD3F5FF"/>
                    <GradientStop Offset="1" Color="#7FB9D8FF"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderSelectedBrush" Value="#00000000"/>
        <Setter Property="CornerRadius" Value="4"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="#FF333333"/>
        <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GrayForegroundStyle}}"/>
        <Setter Property="ForegroundActiveStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GrayForegroundStyle}}"/>
        <Setter Property="ForegroundAlternateStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GrayForegroundStyle}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:DataRecordCellArea}">
                    <ControlTemplate.Resources>
                        
                        <Storyboard x:Key="TimelineIsActive">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Active" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        
                        <Storyboard x:Key="TimelineIsActiveOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Active" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="TimelineIsSelected">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Selected" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="TimelineIsSelectedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Selected" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="TimelineHover">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="TimelineHoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <controls:CardPanel>
                        <!-- Background -->
                        <Border x:Name="Background"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{TemplateBinding CornerRadius}"/>
                        <!-- Background Alternate -->
                        <Border x:Name="Alternate"
                                    Visibility="Collapsed"
                                    Background="{TemplateBinding BackgroundAlternate}"
                                    BorderBrush="{TemplateBinding BorderAlternateBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{TemplateBinding CornerRadius}"
                                    Opacity="1"/>
                        <!-- Background Selected -->
                        <Border x:Name="Selected"
                                    Visibility="Visible"
                                    Background="{TemplateBinding BackgroundSelected}"
                                    BorderBrush="{TemplateBinding BorderSelectedBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{TemplateBinding CornerRadius}"
                                    Opacity="0"/>
                        <!-- Background Hover -->
                        <Border x:Name="Hover"
                                    Visibility="Visible"
                                    Background="{TemplateBinding BackgroundHover}"
                                    CornerRadius="{TemplateBinding CornerRadius}"
                                    BorderBrush="{TemplateBinding BorderHoverBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Opacity="0"/>
                        <!-- Background Active -->
                        <Border x:Name="Active"
                                    Visibility="Collapsed"
                                    Background="{TemplateBinding BackgroundActive}"
                                    BorderBrush="{TemplateBinding BorderActiveBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{TemplateBinding CornerRadius}"/>
                        <ContentPresenter x:Name="CellContent" Style="{TemplateBinding ForegroundStyle}" />
                    </controls:CardPanel>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsAlternate" Value="True"/>
                                <Condition Property="IsFilterRecord" Value="False"/>
                                <Condition Property="IsAddRecord" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Alternate" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundAlternateStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsActive" Value="True"/>
                                <Condition Property="IsFilterRecord" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="Visibility" TargetName="Active" Value="Visible"/>
                        </MultiTrigger>
                        <EventTrigger RoutedEvent="igDp:DataRecordCellArea.HoverBegin">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource TimelineHover}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDp:DataRecordCellArea.HoverEnd">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource TimelineHoverOff}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDp:DataRecordCellArea.Selected">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource TimelineIsSelected}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDp:DataRecordCellArea.Deselected">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource TimelineIsSelectedOff}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <Trigger Property="IsFilterRecord" Value="True">
                            <Setter Property="Visibility" TargetName="Hover" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="Selected" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ ExpandableFieldRecordPresenter ______________________________________ -->
    <Style TargetType="{x:Type igDp:ExpandableFieldRecordPresenter}">
        <Setter Property="Foreground" Value="#FFFFFFFF"/>
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="Padding" Value="0,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:ExpandableFieldRecordPresenter}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="SbDisplayNested">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpVisual" Storyboard.TargetProperty="Opacity" FillBehavior="Stop">
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
                                <SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:0.75"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PART_NestedContentSite" Storyboard.TargetProperty="Opacity" FillBehavior="HoldEnd">
                                <DiscreteDoubleKeyFrame Value="1" KeyTime="00:00:00" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <!-- Row for nested content -->
                        <!-- Expansion Checkbox -->
                        <controls:ExpansionIndicator x:Name="ExpansionIndicator"
                                                         RenderTransform="{TemplateBinding FixedNearElementTransform}"
                                                         Panel.ZIndex="1"
                                                         Visibility="{TemplateBinding ExpansionIndicatorVisibility}"
                                                         Command="{x:Static igDp:DataPresenterCommands.ToggleRecordIsExpanded}"
                                                         CommandParameter="{TemplateBinding Record}"
                                                         ToggleMode="Manual"
                                                         IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <!-- Expandable Field Title -->
                        <Grid x:Name="PART_RecordContentSite" Margin="0" Grid.Row="0" Grid.Column="1"
                                  RenderTransform="{TemplateBinding FixedNearElementTransform}" Visibility="{TemplateBinding HeaderVisibility}">
                            <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RenderTransformOrigin="0.5,0.5" CornerRadius="2,2,2,2" SnapsToDevicePixels="True"
                                        Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelBackground}}"
                                        x:Name="borderBackground">
                                <Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
                                    <Rectangle Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelOuterBorder}}"
                                                   StrokeThickness="1" RadiusX="1.55015910897703" RadiusY="1.55015910897703" Fill="Transparent"/>
                                    <Rectangle Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelInnerBorder}}"
                                                   StrokeThickness="1" Margin="1" RadiusX="0.550159108977027" RadiusY="0.550159108977027" Fill="Transparent"/>
                                </Grid>
                            </Border>
                            <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" CornerRadius="2,2,2,2"
                                        Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelHighlight}}"
                                        x:Name="borderBackgroundHighlight">
                                <Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
                                    <Rectangle Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelOuterBorder}}"
                                                   StrokeThickness="1" RadiusX="1.55015910897703" RadiusY="1.55015910897703" Fill="Transparent"/>
                                    <Rectangle Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelInnerBorder}}"
                                                   StrokeThickness="1" Margin="1" RadiusX="0.550159108977027" RadiusY="0.550159108977027" Fill="Transparent"/>
                                </Grid>
                            </Border>
                            <ContentPresenter Content="{Binding Path=(igDp:RecordPresenter.Record).Description, RelativeSource={RelativeSource TemplatedParent}}"
                                                  TextBlock.Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelForeground}}"
                                                  Margin="10,3,10,3"/>
                        </Grid>
                        <!-- Nested Content -->
                        <Grid x:Name="PART_NestedContentSite" RenderTransform="{TemplateBinding FixedNearElementTransform}" Grid.Row="1" Grid.Column="1" Visibility="Collapsed">
                            <Border BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=NestedContentBackgroundBorder}}"
                                        BorderThickness="1" CornerRadius="0,0,3,3" Background="{TemplateBinding NestedContentBackground}">
                                <ContentControl x:Name="ncpVisual"
                                                    RenderTransform="{TemplateBinding ScrollableElementTransform}"
                                                    Opacity="1"
                                                    Content="{Binding Path=NestedContent, RelativeSource={RelativeSource TemplatedParent}}"
                                                    TextBlock.Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelForeground}}"
                                                    Margin="{TemplateBinding Padding}"/>
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasNestedContent" Value="True">
                            <Setter TargetName="PART_NestedContentSite" Property="Opacity" Value="0" />
                            <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent">
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="1" />
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.Row" Value="1" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached">
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="1" />
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.Row" Value="1" />
                        </DataTrigger>
                        <EventTrigger  RoutedEvent="igDp:RecordPresenter.ShowNestedContent">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource SbDisplayNested}" x:Name="NestedOn"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="TemplateCardView">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:ExpandableFieldRecordPresenter}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="SbDisplayNested">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpVisual" Storyboard.TargetProperty="Opacity" FillBehavior="Stop">
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
                                <SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:0.75"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PART_NestedContentSite" Storyboard.TargetProperty="Opacity" FillBehavior="HoldEnd">
                                <DiscreteDoubleKeyFrame Value="1" KeyTime="00:00:00" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <!-- Row for nested content -->
                        <!-- Expandable Field Title -->
                        <Grid x:Name="PART_RecordContentSite" Margin="0" Grid.Row="0" Grid.Column="0" Visibility="{TemplateBinding HeaderVisibility}">
                            <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RenderTransformOrigin="0.5,0.5" CornerRadius="2,2,2,2" SnapsToDevicePixels="True"
                                        Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelBackground}}"
                                        x:Name="borderBackground">
                                <Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
                                    <Rectangle Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelOuterBorder}}"
                                                   StrokeThickness="1" RadiusX="1.55015910897703" RadiusY="1.55015910897703" Fill="Transparent"/>
                                    <Rectangle Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelInnerBorder}}"
                                                   StrokeThickness="1" Margin="1" RadiusX="0.550159108977027" RadiusY="0.550159108977027" Fill="Transparent"/>
                                </Grid>
                            </Border>
                            <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" CornerRadius="2,2,2,2"
                                        Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelHighlight}}"
                                        x:Name="borderBackgroundHighlight">
                                <Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
                                    <Rectangle Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelOuterBorder}}"
                                                   StrokeThickness="1" RadiusX="1.55015910897703" RadiusY="1.55015910897703" Fill="Transparent"/>
                                    <Rectangle Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelInnerBorder}}"
                                                   StrokeThickness="1" Margin="1" RadiusX="0.550159108977027" RadiusY="0.550159108977027" Fill="Transparent"/>
                                </Grid>
                            </Border>
                            <ContentPresenter Content="{Binding Path=(igDp:RecordPresenter.Record).Description, RelativeSource={RelativeSource TemplatedParent}}" TextBlock.Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelForeground}}" Margin="10,3,10,3"/>
                        </Grid>
                        <!-- Nested Content -->
                        <Grid x:Name="PART_NestedContentSite" Grid.Row="1" Grid.Column="0" Visibility="Collapsed">
                            <Border BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=NestedContentBackgroundBorder}}"
                                        BorderThickness="1" CornerRadius="0,0,3,3" Background="{TemplateBinding NestedContentBackground}">
                                <ContentControl x:Name="ncpVisual" Opacity="1" Content="{Binding Path=NestedContent, RelativeSource={RelativeSource TemplatedParent}}"
                                                    TextBlock.Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelForeground}}"
                                                    Margin="{TemplateBinding Padding}"/>
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasNestedContent" Value="True">
                            <Setter TargetName="PART_NestedContentSite" Property="Opacity" Value="0" />
                            <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <EventTrigger  RoutedEvent="igDp:RecordPresenter.ShowNestedContent">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource SbDisplayNested}" x:Name="NestedOn"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ ExpandedCellPresenter __________________________________________ -->
    <Style TargetType="{x:Type igDp:ExpandedCellPresenter}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:ExpandedCellPresenter}">
                    <Border x:Name="MainBorder" Margin="2,2,2,2" Background="{TemplateBinding Background}">
                        <ContentPresenter x:Name="ContentSite" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ ExpanderBar __________________________________________ -->
    <Style TargetType="{x:Type controls:ExpanderBar}" BasedOn="{x:Static igThemes:PrimitivesGeneric.ExpanderBar}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.ExpanderBarBackgroundKey}}"/>
        <Setter Property="BackgroundHover" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.ExpanderBarBackgroundHoverKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.GroupByNavBorderBrushKey}}"/>
        <Setter Property="BorderHoverBrush" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.SummaryCommandButtonsBorderKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="MinHeight" Value="10"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Focusable" Value="False"/>
    </Style>

    <!-- _________________________ GroupByArea __________________________________________ -->
    <Style TargetType="{x:Type igDp:GroupByArea}">
        <Setter Property="Prompt1" Value="{Binding Path=Value, Source={x:Static igDp:ResourcesDataPresenter.GroupByAreaPrompt1}}"/>
        <Setter Property="Prompt2" Value="{Binding Path=Value, Source={x:Static igDp:ResourcesDataPresenter.GroupByAreaPrompt2}}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Foreground" Value="#151C55"/>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                    <GradientStop Color="sc#1, 0.848967135, 0.848967135, 0.848967135" Offset="0"/>
                    <GradientStop Color="sc#1, 0.694037557, 0.694037557, 0.694037557" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:GroupByArea}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="TurnOnInsertionPoint">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PART_InsertionPoint" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="TurnOffInsertionPoint">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
								Storyboard.TargetName="PART_InsertionPoint"
								Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="ShowPrompts">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="prompt1" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="prompt2" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.8"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HidePrompts">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="prompt1" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.2"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="prompt2" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <!-- ExpanderBarArea -->
                        <controls:ExpanderBar x:Name="ExpanderBarButton" Grid.Row="0" Height="10" />
                        <!-- Collapsible Area -->
                        <controls:ExpanderDecorator Grid.Row="1" HorizontalAlignment="Stretch" Orientation="Vertical"
                                                        IsExpanded="{Binding Path=IsExpanded, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}">
                            <Grid x:Name="outerGrid" SnapsToDevicePixels="True">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <!-- Background Area -->
                                <Grid Grid.Row="0" Grid.RowSpan="2">
                                    <Rectangle Stroke="#00000000" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0,0,0,0" Width="Auto" 
                                                   Height="Auto" x:Name="Rectangle" RenderTransformOrigin="0.5,0.5" Fill="{TemplateBinding Background}" />
                                    <Border HorizontalAlignment="Stretch" Margin="3,3,3,0" Width="Auto" x:Name="Border" RenderTransformOrigin="0.5,0.5" CornerRadius="4,4,0,0"
                                                Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GroupByAreaBackgroundHighlight}}" />
                                </Grid>
                                <!-- Grouping Prompts -->
                                <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="6,12,0,0">
                                    <ContentControl x:Name="prompt1" FontSize="24" Content="{TemplateBinding Prompt1}" ContentTemplate="{TemplateBinding Prompt1Template}" Opacity=".5" />
                                    <ContentControl x:Name="prompt2" Opacity=".8" Margin="5,11.2,0,0" Content="{TemplateBinding Prompt2}" ContentTemplate="{TemplateBinding Prompt2Template}"/>
                                </StackPanel>
                                <!-- GroupedFieldLabelsArea-->
                                <Grid Grid.Row="0" x:Name="PART_GroupedFieldLabelsArea" Margin="0,12,0,0" VerticalAlignment="Top">
                                    <!-- GroupedFields List -->
                                    <igDp:GroupByAreaFieldListBox x:Name="GroupedFieldList" ItemsSource="{TemplateBinding GroupedFieldLabels}" Height="{Binding Path=ActualHeight, ElementName=AvailableFieldList}" AutomationProperties.Name="GroupedFieldsList"/>
                                </Grid>
                                <StackPanel Orientation="Vertical" Grid.Row="1">
                                    <!-- AvailableFieldLabels Area -->
                                    <Grid x:Name="PART_AvailableFieldLabelsArea" Margin="0,4,0,3" Visibility="Visible">
                                        <!-- AvailableField List -->
                                        <igDp:GroupByAreaFieldListBox x:Name="AvailableFieldList" ItemsSource="{TemplateBinding AvailableFieldLabels}" AutomationProperties.Name="AvailableFieldsList"/>
                                    </Grid>
                                    <!-- Bottom Divider Bar -->
                                    <controls:ExpanderBar x:Name="ExpanderBarButtonBottom" Height="5"/>
                                </StackPanel>
                                <!-- Insertion Point -->
                                <Polygon Grid.Row="0" x:Name="PART_InsertionPoint" Opacity="0" Fill="#FF151C55" Points="0,0 10,0 5,5" StrokeEndLineCap="Round" StrokeStartLineCap="Round"
                                             StrokeLineJoin="Round" HorizontalAlignment="Left" Margin="0,12,0,0" VerticalAlignment="Top"/>
                            </Grid>
                        </controls:ExpanderDecorator>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="igDp:GroupByArea.ShowInsertionPoint">
                            <BeginStoryboard x:Name="TurnOnInsertionPoint_BeginStoryboard" Storyboard="{StaticResource TurnOnInsertionPoint}"/>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDp:GroupByArea.HideInsertionPoint">
                            <BeginStoryboard x:Name="TurnOffInsertionPoint_BeginStoryboard" Storyboard="{StaticResource TurnOffInsertionPoint}"/>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDp:GroupByArea.ShowPrompts">
                            <BeginStoryboard x:Name="ShowPrompts_BeginStoryboard" Storyboard="{StaticResource ShowPrompts}"/>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDp:GroupByArea.HidePrompts">
                            <BeginStoryboard x:Name="HidePrompts_BeginStoryboard" Storyboard="{StaticResource HidePrompts}"/>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="BtnGroupByNavRight" TargetType="{x:Type RepeatButton}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Width="25" Height="16" x:Name="grid">
                        <Path Margin="8,1.75,8,1.75"
                                  HorizontalAlignment="Stretch"
                                  VerticalAlignment="Stretch"
                                  Height="Auto"
                                  Width="Auto"
                                  Stretch="Fill"
                                  Opacity="1"
                                  Data="M277.50946,64.418884 C277.50946,65.154053 278.08981,65.75 278.80579,65.75 279.07928,65.75 279.3334,65.663391 279.54254,65.514893 279.54254,65.514893 285.72241,60.621033 285.72241,60.621033 285.92444,60.530396 286.0993,60.388519 286.23199,60.211304 286.23199,60.211304 286.4325,59.825409 286.4325,59.825409 286.4762,59.692078 286.5,59.549255 286.5,59.400787 286.5,58.885895 286.21527,58.439667 285.79868,58.218262 285.79868,58.218262 279.85849,53.689484
                                  279.85849,53.689484 279.73444,53.548218 279.58109,53.434479 279.40857,53.358124 279.40857,53.358124 279.18066,53.282745 279.18066,53.282745 279.08871,53.261566 278.99353,53.25 278.89532,53.25 278.45334,53.25 278.06287,53.477631 277.82886,53.824402 277.82886,53.824402 277.68216,54.111115 277.68216,54.111115 277.64917,54.200836 277.62518,54.294922 277.61172,54.392853 277.61172,54.392853 277.50119,54.837311 277.50119,54.837311 277.50119,54.837311
                                  277.5,63.858368 277.5,63.858368 277.5,63.858368 277.50946,64.248932 277.50946,64.418884 z"
                                  Stroke="{TemplateBinding BorderBrush}"
                                  StrokeThickness="1"
                                  Fill="{TemplateBinding Background}"
                                  x:Name="path"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GroupByNavBackgroundHover}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="MaxWidth" Value="25"/>
        <Setter Property="MaxHeight" Value="16"/>
        <Setter Property="MinHeight" Value="16"/>
        <Setter Property="MinWidth" Value="25"/>
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GroupByNavBackground}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GroupByNavBorderBrush}}"/>
    </Style>
    <Style x:Key="BtnGroupByNavLeft" TargetType="{x:Type RepeatButton}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Width="25" Height="16" x:Name="grid">
                        <Path Width="9"
                                  Stretch="Fill"
                                  Opacity="1"
                                  Data="M16.49054,64.418884 C16.49054,65.154053 15.910187,65.75 15.194214,65.75 14.920715,65.75 14.666595,65.663391 14.457458,65.514893 14.457458,65.514893 8.2734375,60.722826 8.2734375,60.722826 8.0714111,60.632189 7.9006958,60.388519 7.7680049,60.211304 7.7680049,60.211304 7.5675049,59.825409 7.5675049,59.825409 7.5238042,59.692078 7.5,59.549255 7.5,59.400787 7.5,58.885895 7.784729,58.439667 8.2013245,58.218262 8.2013245,58.218262 14.14151,53.689484
                                  14.14151,53.689484 14.265564,53.548218 14.418915,53.434479 14.591431,53.358124 14.591431,53.358124 14.819336,53.282745 14.819336,53.282745 14.911285,53.261566 15.00647,53.25 15.104675,53.25 15.546661,53.25 15.937134,53.477631 16.171143,53.824402 16.171143,53.824402 16.317841,54.111115 16.317841,54.111115 16.35083,54.200836 16.374817,54.294922 16.388275,54.392853 16.388275,54.392853 16.49881,54.837311 16.49881,54.837311 16.49881,54.837311
                                  16.5,63.858368 16.5,63.858368 16.5,63.858368 16.49054,64.248932 16.49054,64.418884 z"
                                  Stroke="{TemplateBinding BorderBrush}"
                                  StrokeThickness="1"
                                  Height="12.5"
                                  HorizontalAlignment="Center"
                                  Margin="0,0,0,0"
                                  VerticalAlignment="Center"
                                  Fill="{TemplateBinding Background}"
                                  x:Name="path"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GroupByNavBackgroundHover}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="MinHeight" Value="16"/>
        <Setter Property="MinWidth" Value="25"/>
        <Setter Property="MaxHeight" Value="16"/>
        <Setter Property="MaxWidth" Value="25"/>
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GroupByNavBackground}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GroupByNavBorderBrush}}"/>
    </Style>

    <!-- _________________________ Custom ScrollViewer __________________________________________ -->
    <Style x:Key="CustomScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="34"/>
                            <ColumnDefinition Width="0.841*"/>
                            <ColumnDefinition MinWidth="36" Width="30"/>
                        </Grid.ColumnDefinitions>
                        <ScrollContentPresenter Grid.Column="1" CanContentScroll="False" Content="{TemplateBinding Content}" />
                        <RepeatButton Grid.Column="0" 
                                          Content="L"
                                          CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                          Style="{StaticResource BtnGroupByNavLeft}"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Width="Auto"
                                          Height="Auto"
                                          Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                          x:Name="repeatButton"/>
                        <RepeatButton Content="R"
                                          CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                          Style="{StaticResource BtnGroupByNavRight}"
                                          HorizontalAlignment="Center"
                                          Margin="0,0,0,0"
                                          VerticalAlignment="Center"
                                          Width="Auto"
                                          Height="Auto"
                                          Grid.Column="2"
                                          Grid.Row="0"
                                          Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                          x:Name="repeatButton1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ComputedHorizontalScrollBarVisibility" Value="Visible">
                            <Setter TargetName="repeatButton" Property="Command" Value="ScrollBar.LineLeftCommand" />
                            <Setter TargetName="repeatButton1" Property="Command" Value="ScrollBar.LineRightCommand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ GroupByAreaFieldListBox __________________________________________ -->
    <Style TargetType="{x:Type igDp:GroupByAreaFieldListBox}">
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Margin" Value="0,0,0,3"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:GroupByAreaFieldListBox}">
                    <ScrollViewer Style="{StaticResource CustomScrollViewer}" CanContentScroll="true" FocusVisualStyle="{x:Null}">
                        <VirtualizingStackPanel IsItemsHost="True" Orientation="Horizontal"/>
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="HasItems" Value="False">
                <Setter Property="Height" Value="20"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- _________________________ GroupByAreaFieldLabel __________________________________________ -->
    <Style TargetType="{x:Type igDp:GroupByAreaFieldLabel}">
        <Setter Property="MinHeight" Value="10"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="#FF151C55"/>
        <Setter Property="BorderBrush" Value="#FF4A565D"/>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0.000000" Color="#FFFCFDFD"/>
                    <GradientStop Offset="0.5" Color="#FFDCDFE0"/>
                    <GradientStop Offset="0.5" Color="#FFB8C2CB"/>
                    <GradientStop Offset="1.000000" Color="#FFDAEBEB"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="6,3,6,3.5"/>
        <Setter Property="Margin" Value="0,0,1,0"/>
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1" ScaleY="1"/>
            </Setter.Value>
        </Setter>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1" ScaleY="1"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:GroupByAreaFieldLabel}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="SbHighlightOn">
                            <DoubleAnimation Storyboard.TargetName="labelHighlight" Storyboard.TargetProperty="Opacity" BeginTime="00:00:00" Duration="00:00:00.15" To="1" FillBehavior="HoldEnd"/>
                        </Storyboard>
                        <Storyboard x:Key="SbHighlightOff">
                            <DoubleAnimation Storyboard.TargetName="labelHighlight" Storyboard.TargetProperty="Opacity" BeginTime="00:00:00" Duration="00:00:01.25" To="0" FillBehavior="HoldEnd"/>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="outerGrid" SnapsToDevicePixels="True" RenderTransformOrigin="0.5,0.5">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RenderTransform>
                            <ScaleTransform ScaleX="1" ScaleY="1"/>
                        </Grid.RenderTransform>
                        <Rectangle Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1" RadiusX="3" RadiusY="3" Fill="{TemplateBinding Background}"/>
                        <Rectangle x:Name="labelHighlight" StrokeThickness="1" RadiusX="3" RadiusY="3" Opacity="0"
                                       Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GroupByLabelHighlightBorder}}"
                                       Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GroupByLabelHighlight}}" />
                        <ContentPresenter Margin="{TemplateBinding Padding}" Content="{Binding Path=(igDp:GroupByAreaFieldLabel.Field).Label, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource SbHighlightOn}" x:Name="HighlightOn"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource SbHighlightOff}" x:Name="HighlightOff"/>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <EventTrigger RoutedEvent="igDp:GroupByAreaFieldLabel.RemovedFromAvailableList">
                            <BeginStoryboard x:Name="CollapseLabel_BeginStoryboard" Storyboard="{StaticResource CollapseLabel}"/>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDp:GroupByAreaFieldLabel.AddedToAvailableList">
                            <BeginStoryboard x:Name="AddLabelToList_BeginStoryboard" Storyboard="{StaticResource ExpandLabel}"/>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDp:GroupByAreaFieldLabel.AddedToGroupedList">
                            <BeginStoryboard x:Name="AddLabelToGroup_BeginStoryboard" Storyboard="{StaticResource ExpandLabel}"/>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ GroupByRecordPresenter ______________________________________ -->
    <Style TargetType="{x:Type igDp:GroupByRecordPresenter}">
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelForeground}}"/>
        <Setter Property="Background" Value="#00FFFFFF"/>
        <Setter Property="Margin" Value="0,0,0,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:GroupByRecordPresenter}">
                    <ControlTemplate.Resources>
                        
                        <Storyboard x:Key="SbDisplayNested">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpVisual" Storyboard.TargetProperty="Opacity" FillBehavior="HoldEnd">
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
                                <SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:0.75"/>
                            </DoubleAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpVisual" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" KeyTime="00:00:00"/>
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" KeyTime="00:00:0.75"/>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpMask" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" KeyTime="00:00:00"/>
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" KeyTime="00:00:0.75"/>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                        
                        <Storyboard x:Key="SbHideNested">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="NestedContentPresenter" Storyboard.TargetProperty="Opacity" FillBehavior="HoldEnd">
                                <SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:00.15"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="row0" Height="Auto"/>
                            <RowDefinition x:Name="row1" Height="Auto"/>
                            <RowDefinition x:Name="row2" Height="*"/>
                        </Grid.RowDefinitions>
                        <!-- Row for nested content -->
                        <!-- Expansion Checkbox -->
                        <controls:ExpansionIndicator x:Name="ExpansionIndicator"
                                                         RenderTransform="{TemplateBinding FixedNearElementTransform}"
                                                         Panel.ZIndex="1"
                                                         Grid.Row="1"
                                                         Visibility="{TemplateBinding ExpansionIndicatorVisibility}"
                                                         Command="{x:Static igDp:DataPresenterCommands.ToggleRecordIsExpanded}"
                                                         CommandParameter="{TemplateBinding Record}"
                                                         ToggleMode="Manual"
                                                         IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Rectangle x:Name="HeaderContentBackground"
                                       Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelBackground}}"
                                       Grid.Row="0"
                                       Grid.Column="0"
                                       Grid.ColumnSpan="2"
                                       HorizontalAlignment="Stretch"
                                       VerticalAlignment="Stretch" />
                        <ContentPresenter x:Name="PART_HeaderContentSite"
                                              Grid.Row="0"
                                              Grid.Column="1"
                                              Content="{TemplateBinding HeaderContent}"
                                              Visibility="{Binding Path=HasHeaderContent, Converter={StaticResource BoolToVisConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              d:IsHidden="True"/>
                        <!-- Record content site -->
                        <Grid x:Name="PART_RecordContentSite" RenderTransform="{TemplateBinding FixedNearElementTransform}" Margin="0" Grid.Row="1" Grid.Column="1" Visibility="Collapsed">
                            <!-- Background Bar -->
                            <Border HorizontalAlignment="Stretch"
                                        VerticalAlignment="Stretch"
                                        Width="Auto"
                                        Height="Auto"
                                        RenderTransformOrigin="0.5,0.5"
                                        CornerRadius="2,2,2,2"
                                        SnapsToDevicePixels="True"
                                        Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelBackground}}">
                                <Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
                                    <Rectangle Stroke="#44000000" StrokeThickness="1" RadiusX="1.55015910897703" RadiusY="1.55015910897703" Fill="Transparent"/>
                                    <Rectangle Margin="1" Stroke="#44FFFFFF" StrokeThickness="1" RadiusX="0.550159108977027" RadiusY="0.550159108977027" Fill="Transparent"/>
                                </Grid>
                            </Border>
                            <Border x:Name="highlight" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" CornerRadius="2,2,2,2"
                                        Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelHighlight}}">
                                <Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
                                    <Rectangle Stroke="#44000000" StrokeThickness="1" RadiusX="1.55015910897703" RadiusY="1.55015910897703" Fill="Transparent"/>
                                    <Rectangle Margin="1" Stroke="#44FFFFFF" StrokeThickness="1" RadiusX="0.550159108977027" RadiusY="0.550159108977027" Fill="Transparent"/>
                                </Grid>
                            </Border>
                            <StackPanel Orientation="Vertical">
                                <ContentControl Style="{StaticResource LabelContentStyle}"
                                                    Content="{Binding Path=Description, RelativeSource={RelativeSource TemplatedParent}}"
                                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                                <igDp:GroupBySummariesPresenter RenderTransform="{TemplateBinding ScrollableElementTransform}"
                                                                    HorizontalAlignment="Left"
                                                                    x:Name="GroupBySummariesPresenter"
                                                                    Visibility="Collapsed"
                                                                    GroupByRecord="{TemplateBinding Record}"/>
                            </StackPanel>
                        </Grid>
                        <!-- Nested Content -->
                        <Grid x:Name="PART_NestedContentSite" Grid.Row="2" Grid.Column="1" Visibility="Collapsed">
                            <Border CornerRadius="0,0,3,3" BorderBrush="#44102975" BorderThickness="1" RenderTransform="{TemplateBinding FixedNearElementTransform}" >
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Color="#FFFFFFFF" Offset="0.25"/>
                                        <GradientStop Color="#FFEEEEEE" Offset="1.2"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <ContentControl RenderTransform="{TemplateBinding ScrollableElementTransform}" x:Name="NestedContentPresenter" Margin="0,0,0,5"
                                                    Content="{Binding Path=NestedContent, RelativeSource={RelativeSource TemplatedParent}}" />
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.AutoFitToWidth, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.ColumnSpan" Value="2"/>
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.ColumnSpan" Value="2"/>
                            <Setter TargetName="GroupBySummariesPresenter" Property="HorizontalAlignment" Value="Stretch"/>
                            <Setter TargetName="PART_HeaderContentSite" Property="HorizontalAlignment" Value="Stretch"/>
                        </MultiDataTrigger>
                        <Trigger Property="ShouldDisplayGroupByRecordContent" Value="true">
                            <Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ShouldDisplayGroupByRecordContent" Value="false">
                            <Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="ShouldDisplaySummaryCells" Value="true">
                            <Setter TargetName="GroupBySummariesPresenter" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Vertical"/>
                                <Condition Property="ShouldDisplayGroupByRecordContent" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="2"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Horizontal"/>
                                <Condition Property="ShouldDisplayGroupByRecordContent" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="HasNestedContent" Value="true">
                            <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0" />
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="1" />
                            <Setter TargetName="HeaderContentBackground" Property="Grid.Row" Value="1" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="2" />
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.Row" Value="2" />
                            <Setter TargetName="row0" Property="Height" Value="*" />
                            <Setter TargetName="row2" Property="Height" Value="Auto" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0" />
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="1" />
                            <Setter TargetName="HeaderContentBackground" Property="Grid.Row" Value="1" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="2" />
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.Row" Value="2" />
                            <Setter TargetName="row0" Property="Height" Value="*" />
                            <Setter TargetName="row2" Property="Height" Value="Auto" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="TemplateCardView">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:GroupByRecordPresenter}">
                    <ControlTemplate.Resources>
                        
                        <Storyboard x:Key="SbDisplayNested">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpVisual" Storyboard.TargetProperty="Opacity" FillBehavior="HoldEnd">
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
                                <SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:0.75"/>
                            </DoubleAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpVisual" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" KeyTime="00:00:00"/>
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" KeyTime="00:00:0.75"/>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpMask" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" KeyTime="00:00:00"/>
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" KeyTime="00:00:0.75"/>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                        
                        <Storyboard x:Key="SbHideNested">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="NestedContentPresenter" Storyboard.TargetProperty="Opacity" FillBehavior="HoldEnd">
                                <SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:00.15"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" MinWidth="20"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <!-- Row for nested content -->
                        <!-- Record content site -->
                        <Grid x:Name="PART_RecordContentSite" Margin="0" Grid.Row="1" Grid.Column="0" Visibility="Collapsed" d:LayoutOverrides="GridBox">
                            <!-- Background Bar -->
                            <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RenderTransformOrigin="0.5,0.5" CornerRadius="2,2,2,2"
                                        SnapsToDevicePixels="True" Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelBackground}}">
                                <Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
                                    <Rectangle Stroke="#44000000" StrokeThickness="1" RadiusX="1.55015910897703" RadiusY="1.55015910897703" Fill="Transparent"/>
                                    <Rectangle Margin="1" Stroke="#44FFFFFF" StrokeThickness="1" RadiusX="0.550159108977027" RadiusY="0.550159108977027" Fill="Transparent"/>
                                </Grid>
                            </Border>
                            <Border x:Name="highlight" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" CornerRadius="2,2,2,2"
                                        Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelHighlight}}">
                                <Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
                                    <Rectangle Stroke="#44000000" StrokeThickness="1" RadiusX="1.55015910897703" RadiusY="1.55015910897703" Fill="Transparent"/>
                                    <Rectangle Margin="1" Stroke="#44FFFFFF" StrokeThickness="1" RadiusX="0.550159108977027" RadiusY="0.550159108977027" Fill="Transparent"/>
                                </Grid>
                            </Border>
                            <!-- Label Text -->
                            <StackPanel Orientation="Vertical">
                                <ContentControl Style="{StaticResource LabelContentStyle}"
                                                    Content="{Binding Path=Description, RelativeSource={RelativeSource TemplatedParent}}"
                                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                                <igDp:GroupBySummariesPresenter HorizontalAlignment="Left" x:Name="GroupBySummariesPresenter" Visibility="Collapsed" GroupByRecord="{TemplateBinding Record}"/>
                            </StackPanel>
                        </Grid>
                        <!-- Nested Content -->
                        <Grid x:Name="PART_NestedContentSite" Grid.Row="1" Grid.Column="0" Visibility="Collapsed">
                            <Border CornerRadius="0,0,3,3" BorderBrush="#44102975" BorderThickness="1">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Color="#FFFFFFFF" Offset="0.25"/>
                                        <GradientStop Color="#FFEEEEEE" Offset="1.2"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <ContentControl x:Name="NestedContentPresenter" Content="{Binding Path=NestedContent, RelativeSource={RelativeSource TemplatedParent}}" Margin="0,0,0,5"/>
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ShouldDisplayGroupByRecordContent" Value="true">
                            <Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ShouldDisplaySummaryCells" Value="true">
                            <Setter TargetName="GroupBySummariesPresenter" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="HasNestedContent" Value="true">
                            <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ HeaderPresenter__________________________________________ -->
    <Style TargetType="{x:Type igDp:HeaderPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:HeaderPresenter}">
                    <ContentPresenter Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ HeaderLabelArea__________________________________________ -->
    <Style TargetType="{x:Type igDp:HeaderLabelArea}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:HeaderLabelArea}">
                    <Grid>
                        <ContentPresenter Content="{TemplateBinding Content}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ HeaderPrefixArea__________________________________________ -->
    <Style TargetType="{x:Type igDp:HeaderPrefixArea}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Visibility" Value="Visible"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:HeaderPrefixArea}">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
                        <Button x:Name="fieldChooserButton" CommandParameter="{TemplateBinding FieldLayout}" Visibility="Collapsed"
                                    Style="{DynamicResource {x:Static igDp:DataPresenterBase.FieldChooserButtonStyleKey}}" />
                        <ContentPresenter Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=FieldLayout.HeaderPrefixAreaDisplayModeResolved}" Value="FieldChooserButton">
                            <Setter TargetName="fieldChooserButton" Property="Visibility" Value="Visible" />
                            <Setter TargetName="fieldChooserButton" Property="Command" Value="{x:Static igDp:DataPresenterCommands.ShowFieldChooser}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ LabelPresenter __________________________________________ -->
    <Style TargetType="{x:Type igDp:LabelPresenter}">
        <Setter Property="Padding" Value="7,4"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="LabelHighlight" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelHighlight}}"/>
        <Setter Property="InnerBorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelInnerBorder}}"/>
        <Setter Property="OuterBorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelOuterBorder}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelForeground}}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=Field.LabelTextAlignmentResolved, Converter={StaticResource TextAlignmentToHorizontalAlignmentConverter}, RelativeSource={x:Static RelativeSource.Self}}"/>
        <Setter Property="ToolTip" Value="{Binding Path=Field.ToolTip, RelativeSource={x:Static RelativeSource.Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:LabelPresenter}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="SbHighlightOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="highlight">
                                <SplineDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
                                <SplineDoubleKeyFrame Value="1" KeyTime="00:00:00.1750000"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="fishHeadHighlight">
                                <SplineDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
                                <SplineDoubleKeyFrame Value="1" KeyTime="00:00:00.1750000"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SbHighlightOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="highlight">
                                <SplineDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="fishHeadHighlight">
                                <SplineDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeIn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SummaryButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SummaryButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        
                        <Storyboard x:Key="SigmaFadeInFilterButton">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FilterButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        
                        <Storyboard x:Key="SigmaFadeOutFilterButton">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FilterButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="labelCntr" Margin="0" Background="#00000000">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition x:Name="fishColumn" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <!-- Background Bar -->
                        <Border x:Name="background" Width="Auto" Height="Auto" RenderTransformOrigin="0.5,0.5" SnapsToDevicePixels="True" Background="{TemplateBinding Background}"
                                    CornerRadius="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelCornerRadius}}" />
                        <!-- Highlight -->
                        
                        <Border x:Name="highlight" Opacity="0" Width="Auto" Height="Auto" CornerRadius="0" Background="Transparent" SnapsToDevicePixels="True"/>
                        
                        <Border x:Name="lineOuter" BorderBrush="{TemplateBinding OuterBorderBrush}" BorderThickness="0,0,0,0" CornerRadius="1.55015910897703" Background="Transparent" 
                                    Margin="0,0,0,0" Width="Auto" Height="Auto" SnapsToDevicePixels="True"/>
                        
                        <Border x:Name="lineInner" BorderBrush="{TemplateBinding InnerBorderBrush}" BorderThickness="0" CornerRadius="0.550159108977027" Background="Transparent"
                                    Margin="1,1,1,1" Width="Auto" Height="Auto" SnapsToDevicePixels="True"/>
                        <Path x:Name="fishHeadOuterStroke" SnapsToDevicePixels="True" Visibility="Collapsed" Fill="{TemplateBinding OuterBorderBrush}" Grid.Column="1" 
                                  Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,20 0,20 z" />
                        <Path x:Name="fishHead" SnapsToDevicePixels="True" Visibility="Collapsed" Fill="{TemplateBinding Background}" Grid.Column="1" Margin="0,1,1,1" 
                                  Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,20 0,20 z" />
                        <Path x:Name="fishHeadHighlight" SnapsToDevicePixels="True" Visibility="Collapsed" Fill="{TemplateBinding LabelHighlight}" Opacity="0" Grid.Column="1" Margin="0,1,1,1" 
                                  Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,20 0,20 z"/>
                        <Path x:Name="fishHeadInnerStroke" SnapsToDevicePixels="True" Visibility="Collapsed"  Fill="{TemplateBinding InnerBorderBrush}" Grid.Column="1" Margin="-1,1,1,1"
                                  Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,1 0,1 0,1 7,8 7,8 8,9 8,11 7,12 7,12 0,19 0,19 0,19 0,20 0,20 z"/>
                        
                        <Grid Margin="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" x:Name="sortIndicatorAndLabel">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="LabelContent"
                                                  Focusable="False"
                                                  Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                                  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                  d:LayoutOverrides="Width, Height"
                                                  VerticalAlignment="Center"/>
                            <controls:SortIndicator x:Name="SortIndicator"
                                                        SortStatus="{TemplateBinding SortStatus}"
                                                        Visibility="Collapsed"
                                                        HorizontalAlignment="Right"
                                                        VerticalAlignment="Center"
                                                        Width="Auto"
                                                        Grid.Column="1"
                                                        Margin="5,0,0,0"/>
                            <igDp:SummaryButton x:Name="SummaryButton"
                                                    Field="{TemplateBinding Field}"
                                                    Visibility="{Binding Path=Field.AllowSummariesResolved, Converter={StaticResource BoolToVisConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                                                    HorizontalAlignment="Right"
                                                    VerticalAlignment="Center"
                                                    Width="Auto"
                                                    Grid.Column="2"
                                                    Margin="5,0,0,0"
                                                    Opacity="0.4"/>
                            <igDp:FilterButton x:Name="FilterButton"
                                                   Field="{TemplateBinding Field}"
                                                   Visibility="{TemplateBinding FilterButtonVisibility}"
                                                   HorizontalAlignment="Left"
                                                   VerticalAlignment="Center"
                                                   Width="Auto"
                                                   Grid.Column="3"
                                                   Opacity="0.4"
                                                   Margin="5,0,0,0"/>
                            <igDp:FixedFieldButton x:Name="FixedButton"
                                                       Field="{TemplateBinding Field}"
                                                       Visibility="{TemplateBinding FixedButtonVisibility}"
                                                       HorizontalAlignment="Left"
                                                       VerticalAlignment="Center"
                                                       Width="Auto"
                                                       Grid.Column="4"
                                                       Margin="2,0,2,0"
                                                       Opacity="0.4"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HighlightAsPrimary" Value="true">
                            <Setter TargetName="highlight" Property="Opacity" Value="1"/>
                            <Setter TargetName="fishHeadHighlight" Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="HorizontalAlignment" Value="Center">
                            <Setter Property="VerticalAlignment" TargetName="SortIndicator" Value="Top"/>
                            <Setter Property="HorizontalAlignment" TargetName="SortIndicator" Value="Center"/>
                            <Setter Property="Margin" TargetName="SortIndicator" Value="0,5,0,0"/>
                        </Trigger>
                        <!-- Only animate highlight -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource SbHighlightOn}" x:Name="sbHighlightOn_BeginStoryboard"/>
                                <BeginStoryboard Storyboard="{StaticResource SigmaFadeOut}" x:Name="SigmaFadeIn_BeginStoryboard"/>
                                <BeginStoryboard x:Name="SigmaFadeIn_BeginStoryboard1" Storyboard="{StaticResource SigmaFadeIn}"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource SbHighlightOff}" x:Name="sbHighlightOff_BeginStoryboard"/>
                                <BeginStoryboard Storyboard="{StaticResource SigmaFadeOut}" x:Name="SigmaFadeOut_BeginStoryboard"/>
                                <StopStoryboard BeginStoryboardName="SigmaFadeIn_BeginStoryboard1"/>
                                <StopStoryboard BeginStoryboardName="sbHighlightOn_BeginStoryboard"/>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="FilterButton" Property="HasActiveFilters" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="FilterButton" Property="Opacity" Value="1"/>
                        </MultiTrigger>
                        <Trigger SourceName="FilterButton" Property="HasActiveFilters" Value="True">
                            <Setter TargetName="FilterButton" Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="SortStatus" Value="Ascending">
                            <Setter TargetName="highlight" Property="Opacity" Value="1"/>
                            <Setter TargetName="fishHeadHighlight" Property="Opacity" Value="1"/>
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="SortStatus" Value="Descending">
                            <Setter TargetName="highlight" Property="Opacity" Value="1"/>
                            <Setter TargetName="fishHeadHighlight" Property="Opacity" Value="1"/>
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="SummaryButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="background" Property="CornerRadius" Value="2,0,0,2"/>
                            <Setter TargetName="highlight" Property="CornerRadius" Value="2,0,0,2"/>
                            <Setter TargetName="lineOuter" Property="CornerRadius" Value="2,0,0,2"/>
                            <Setter TargetName="lineInner" Property="CornerRadius" Value="2,0,0,2"/>
                            <Setter TargetName="background" Property="BorderThickness" Value="1,1,0,1"/>
                            <Setter TargetName="lineOuter" Property="BorderThickness" Value="1,1,0,1"/>
                            <Setter TargetName="lineInner" Property="BorderThickness" Value="1,1,0,1"/>
                            <Setter TargetName="lineInner" Property="Margin" Value="1,1,0,1"/>
                            <Setter TargetName="fishHeadOuterStroke" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="fishHead" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="fishHeadHighlight" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="fishHeadInnerStroke" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="fishColumn" Property="Width" Value="14"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(Field).(igDp:GroupByAreaMulti.HasOffsetY), RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="labelCntr" Property="Margin" Value="-24,4,2,4"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(Field).(igDp:GroupByAreaMulti.HasOffsetY), RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=(Field).(igDp:GroupByAreaMulti.IsFirstInList), RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Padding" Value="25,4,5,4"/>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding Path=(Field).(igDp:GroupByAreaMulti.IsFirstInList), RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="labelCntr" Property="Margin" Value="2,4,2,4"/>
                        </DataTrigger>
                        <Trigger Property="IsInFieldChooser" Value="true">
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="FilterButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="SummaryButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="labelCntr" Property="Margin" Value="0,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsDragIndicator" Value="True">
                            <Setter Property="Padding" Value="7,4"/>
                            <Setter TargetName="labelCntr" Property="Margin" Value="2,4"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="highlight" Property="Opacity" Value="0"/>
                            <Setter TargetName="fishHeadHighlight" Property="Opacity" Value="0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ RecordListControl __________________________________________ -->
    <Style TargetType="{x:Type igDp:RecordListControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:RecordListControl}">
                    <ScrollViewer RenderTransform="{TemplateBinding FixedNearElementTransform}"
                                      CanContentScroll="true"
                                      Focusable="false"
                                      HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"
                                      VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}">
                        <ItemsPresenter RenderTransform="{TemplateBinding ScrollableElementTransform}"/>
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ RecordSelector __________________________________________ -->
    <Style TargetType="{x:Type igDp:RecordSelector}">
        <Setter Property="Background" Value="#FF000000"/>
        <Setter Property="BorderBrush" Value="#FFCCCCCC"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="3,3,3,3"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:RecordSelector}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="MouseEnter">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="selectorArrow" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="MouseLeave">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="selectorArrow" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.05"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="RecordActiveTrue">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="selectorArrow_Active" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedRecordBtn" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="RecordActiveFalse">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="selectorArrow_Active" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedRecordBtn" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        
                        <Storyboard x:Key="HideSelector">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="selectors" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeIn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedRecordBtn" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedRecordBtn" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="MainBorder" Background="#00FFFFFF" Cursor="{TemplateBinding Cursor}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="errorBd" Width="2"  Grid.ColumnSpan="4" Visibility="Collapsed" HorizontalAlignment="Right" />
                        <!-- Selector Arrows -->
                        
                        <Grid x:Name="selectors" Height="16" Width="16" Opacity="1">
                            <Path x:Name="selectorArrow"
                                      RenderTransformOrigin="0.5,0.5"
                                      Fill="{TemplateBinding Background}"
                                      Stretch="Fill"
                                      Stroke="#00CCCCCC"
                                      StrokeThickness="1"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      Margin="{TemplateBinding Padding}"
                                      Width="7"
                                      Height="10"
                                      Cursor="{TemplateBinding Cursor}"
                                      Data="M60,40L60,20 70,30z"
                                      Visibility="Visible"
                                      Opacity="0.05"/>
                            <Path x:Name="selectorDataChanged"
                                      Margin="0,0,0,0"
                                      HorizontalAlignment="Left"
                                      VerticalAlignment="Top"
                                      Height="5.409"
                                      Width="3.444"
                                      Stretch="Fill"
                                      Opacity="1"
                                      Data="M 1,8.6568603515625 C1,8.6568603515625 1,1.3431400060653687 1,1.3431400060653687 1,1.3431400060653687 5.656859874725342,5 5.656859874725342,5 5.656859874725342,5 1,8.6568603515625 1,8.6568603515625 z"
                                      Fill="{TemplateBinding Background}"
                                      Visibility="Collapsed"/>
                            <Path x:Name="selectorAddRecord"
                                      Margin="0,0,0,0"
                                      HorizontalAlignment="Left"
                                      VerticalAlignment="Top"
                                      Height="7.497498035430908"
                                      Width="4.656859874725342"
                                      Stretch="Fill"
                                      Opacity="1"
                                      Data="M 0,7.497498035430908 C0,7.497498035430908 0,0 0,0 0,0 4.656859874725342,3.748749017715454 4.656859874725342,3.748749017715454 4.656859874725342,3.748749017715454 0,7.497498035430908 0,7.497498035430908 z"
                                      Fill="{TemplateBinding Background}"
                                      Visibility="Collapsed"
                                      RenderTransformOrigin="0.5,0.5"/>
                            <Path x:Name="selectorArrow_Active"
                                      RenderTransformOrigin="0.5,0.5"
                                      Fill="{TemplateBinding Background}"
                                      Stretch="Fill"
                                      Stroke="#00CCCCCC"
                                      StrokeThickness="1"
                                      HorizontalAlignment="Stretch"
                                      VerticalAlignment="Stretch"
                                      Margin="4.5,3,4.5,3"
                                      Width="7"
                                      Height="10"
                                      Cursor="{TemplateBinding Cursor}"
                                      Data="M60,40L60,20 70,30z"
                                      Visibility="Visible"
                                      Opacity="0"/>
                            <Button x:Name="ClearButton"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        Style="{DynamicResource {x:Static igDp:DataPresenterBase.FilterRecordClearButtonStyleKey}}"
                                        Visibility="{TemplateBinding FilterClearButtonVisibility}"/>
                        </Grid>
                        
                        <Grid x:Name="icons" Height="16" Width="16" d:LayoutOverrides="Width, Height" HorizontalAlignment="Center" Margin="0,0,0,0" VerticalAlignment="Center">
                            <Path x:Name="addRecordOuter"
                                      Margin="3,3,0,0"
                                      HorizontalAlignment="Left"
                                      VerticalAlignment="Top"
                                      Height="10"
                                      Width="10"
                                      Stretch="Fill"
                                      Opacity="1"
                                      Data="M 10,3 C10,3 6,3 6,3 6,3 6,6 6,6 6,6 3,6 3,6 3,6 3,10 3,10 3,10 6,10 6,10 6,10 6,13 6,13 6,13 10,13 10,13 10,13 10,10 10,10 10,10 13,10 13,10 13,10 13,6 13,6 13,6 10,6 10,6 10,6 10,3 10,3 z"
                                      Fill="#898989"
                                      Visibility="Collapsed"
                                      SnapsToDevicePixels="True"/>
                            <Path x:Name="addRecordInner"
                                      Margin="4,4,0,0"
                                      HorizontalAlignment="Left"
                                      VerticalAlignment="Top"
                                      Height="8"
                                      Width="8"
                                      Stretch="Fill"
                                      Opacity="1"
                                      Data="M 9,4 C9,4 7,4 7,4 7,4 7,7 7,7 7,7 4,7 4,7 4,7 4,9 4,9 4,9 7,9 7,9 7,9 7,12 7,12 7,12 9,12 9,12 9,12 9,9 9,9 9,9 12,9 12,9 12,9 12,7 12,7 12,7 9,7 9,7 9,7 9,4 9,4 z"
                                      Fill="#cccccc"
                                      Visibility="Collapsed"
                                      SnapsToDevicePixels="True"/>
                            <Path x:Name="dataChangedActive"
                                      Margin="4.510000228881836,4.190000057220459,0,0"
                                      HorizontalAlignment="Left"
                                      VerticalAlignment="Top"
                                      Height="10.559999942779541"
                                      Width="10.710000991821289"
                                      Stretch="Fill"
                                      Opacity="1"
                                      Data="M 11.762499809265137,4.190000057220459 C11.762499809265137,4.190000057220459 13.622968673706055,5.4495320320129395 13.622968673706055,5.4495320320129395 13.622968673706055,5.4495320320129395 10.8100004196167,8.90609359741211 10.8100004196167,8.90609359741211 10.8100004196167,8.90609359741211 15.220001220703125,8.364218711853027 15.220001220703125,8.364218711853027 15.220001220703125,8.364218711853027 15.220001220703125,10.575780868530273 15.220001220703125,10.575780868530273 15.220001220703125,10.575780868530273 10.8100004196167,10.07796859741211 10.8100004196167,10.07796859741211 10.8100004196167,10.07796859741211 13.622968673706055,13.51953125 13.622968673706055,13.51953125 13.622968673706055,13.51953125 11.762499809265137,14.75 11.762499809265137,14.75 11.762499809265137,14.75 9.842968940734863,10.575780868530273 9.842968940734863,10.575780868530273 9.842968940734863,10.575780868530273 7.952969074249268,14.75 7.952969074249268,14.75 7.952969074249268,14.75 6.09250020980835,13.51953125 6.09250020980835,13.51953125 6.09250020980835,13.51953125 8.920000076293945,10.07796859741211 8.920000076293945,10.07796859741211 8.920000076293945,10.07796859741211 4.510000228881836,10.575780868530273 4.510000228881836,10.575780868530273 4.510000228881836,10.575780868530273 4.510000228881836,8.364218711853027 4.510000228881836,8.364218711853027 4.510000228881836,8.364218711853027 8.920000076293945,8.90609359741211 8.920000076293945,8.90609359741211 8.920000076293945,8.90609359741211 6.09250020980835,5.4495320320129395 6.09250020980835,5.4495320320129395 6.09250020980835,5.4495320320129395 7.952969074249268,4.190000057220459 7.952969074249268,4.190000057220459 7.952969074249268,4.190000057220459 9.842968940734863,8.247031211853027 9.842968940734863,8.247031211853027 9.842968940734863,8.247031211853027 11.762499809265137,4.190000057220459 11.762499809265137,4.190000057220459 z"
                                      Visibility="Collapsed">
                                <Path.Fill>
                                    <RadialGradientBrush>
                                        <GradientStop Color="#00FFFFFF" Offset="0"/>
                                        <GradientStop Color="#FFB1B1B1" Offset="1"/>
                                    </RadialGradientBrush>
                                </Path.Fill>
                            </Path>
                            <Path x:Name="dataChanged"
                                      Margin="2.509999990463257,2.690000057220459,0,0"
                                      HorizontalAlignment="Left"
                                      VerticalAlignment="Top"
                                      Height="10.559999942779541"
                                      Width="10.710001230239868"
                                      Stretch="Fill"
                                      Opacity="1"
                                      Data="M 9.762499809265137,2.690000057220459 C9.762499809265137,2.690000057220459 11.622968673706055,3.9495320320129395 11.622968673706055,3.9495320320129395 11.622968673706055,3.9495320320129395 8.8100004196167,7.406094074249268 8.8100004196167,7.406094074249268 8.8100004196167,7.406094074249268 13.220001220703125,6.8642191886901855 13.220001220703125,6.8642191886901855 13.220001220703125,6.8642191886901855 13.220001220703125,9.075780868530273 13.220001220703125,9.075780868530273 13.220001220703125,9.075780868530273 8.8100004196167,8.57796859741211 8.8100004196167,8.57796859741211 8.8100004196167,8.57796859741211 11.622968673706055,12.01953125 11.622968673706055,12.01953125 11.622968673706055,12.01953125 9.762499809265137,13.25 9.762499809265137,13.25 9.762499809265137,13.25 7.842968940734863,9.075780868530273 7.842968940734863,9.075780868530273 7.842968940734863,9.075780868530273 5.952969074249268,13.25 5.952969074249268,13.25 5.952969074249268,13.25 4.09250020980835,12.01953125 4.09250020980835,12.01953125 4.09250020980835,12.01953125 6.920000076293945,8.57796859741211 6.920000076293945,8.57796859741211 6.920000076293945,8.57796859741211 2.509999990463257,9.075780868530273 2.509999990463257,9.075780868530273 2.509999990463257,9.075780868530273 2.509999990463257,6.8642191886901855 2.509999990463257,6.8642191886901855 2.509999990463257,6.8642191886901855 6.920000076293945,7.406094074249268 6.920000076293945,7.406094074249268 6.920000076293945,7.406094074249268 4.09250020980835,3.9495320320129395 4.09250020980835,3.9495320320129395 4.09250020980835,3.9495320320129395 5.952969074249268,2.690000057220459 5.952969074249268,2.690000057220459 5.952969074249268,2.690000057220459 7.842968940734863,6.747031211853027 7.842968940734863,6.747031211853027 7.842968940734863,6.747031211853027 9.762499809265137,2.690000057220459 9.762499809265137,2.690000057220459 z"
                                      Visibility="Collapsed">
                                <Path.Fill>
                                    <RadialGradientBrush>
                                        <GradientStop Color="#00FFFFFF" Offset="0"/>
                                        <GradientStop Color="#FFB1B1B1" Offset="1"/>
                                    </RadialGradientBrush>
                                </Path.Fill>
                            </Path>
                            <Path x:Name="addRecordActiveOuter"
                                      Margin="4,3.923218011856079,0,0"
                                      HorizontalAlignment="Left"
                                      VerticalAlignment="Top"
                                      Height="10.076781988143921"
                                      Width="10"
                                      Stretch="Fill"
                                      Opacity="1"
                                      Data="M 10.990951538085938,3.923218011856079 C10.990951538085938,3.923218011856079 7,3.923218011856079 7,3.923218011856079 7,3.923218011856079 7,7 7,7 7,7 4,7 4,7 4,7 4,11 4,11 4,11 7,11 7,11 7,11 7,14 7,14 7,14 10.990951538085938,14 10.990951538085938,14 10.990951538085938,14 10.989999771118164,11 10.989999771118164,11 10.989999771118164,11 14,11 14,11 14,11 14,7 14,7 14,7 10.989999771118164,7 10.989999771118164,7 10.989999771118164,7 10.990951538085938,3.923218011856079 10.990951538085938,3.923218011856079 z"
                                      Fill="#898989"
                                      Visibility="Collapsed"
                                      SnapsToDevicePixels="False"/>
                            <Path x:Name="addRecordActiveInner"
                                      Margin="5,5,0,0"
                                      HorizontalAlignment="Left"
                                      VerticalAlignment="Top"
                                      Height="8"
                                      Width="8"
                                      Stretch="Fill"
                                      Opacity="1"
                                      Data="M 10,5 C10,5 8,5 8,5 8,5 8,8 8,8 8,8 5,8 5,8 5,8 5,10 5,10 5,10 8,10 8,10 8,10 8,13 8,13 8,13 10,13 10,13 10,13 10,10 10,10 10,10 13,10 13,10 13,10 13,8 13,8 13,8 10,8 10,8 10,8 10,5 10,5 z"
                                      Fill="#cccccc"
                                      Visibility="Collapsed"
                                      SnapsToDevicePixels="False"/>
                        </Grid>
                        <igDp:RecordSelectorNumber x:Name="RecordNumber" Grid.Column="1" />
                        <igDp:FixedRecordButton x:Name="FixedRecordBtn" Grid.Column="2" Opacity="0.4"
                                                    IsFixedOnTopAllowed="{TemplateBinding IsFixedOnTopAllowed}"
                                                    IsFixedOnBottomAllowed="{TemplateBinding IsFixedOnBottomAllowed}"
                                                    Visibility="{TemplateBinding FixedButtonVisibility}" VerticalAlignment="Center" />
                        
                        <Rectangle x:Name="OrientationHorizontalSep" Width="1" Fill="#FFE7E7E7" HorizontalAlignment="Right" Visibility="Collapsed" Grid.ColumnSpan="4"/>
                        <controls:AutomationControl x:Name="errorIcon" Grid.Column="3" Visibility="Collapsed" Margin="2,0,4,0"
                                                        Style="{DynamicResource {x:Static igDp:DataPresenterBase.DataErrorIconStyleKey}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="UIElement.MouseEnter">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource MouseEnter}"/>
                                <BeginStoryboard Storyboard="{StaticResource SigmaFadeIn}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="UIElement.MouseLeave">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource MouseLeave}"/>
                                <BeginStoryboard Storyboard="{StaticResource SigmaFadeOut}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDp:RecordSelector.Activated">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource RecordActiveTrue}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDp:RecordSelector.Deactivated">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource RecordActiveFalse}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <Trigger Property="IsFilterRecord" Value="True">
                            <Setter Property="Visibility" TargetName="selectorArrow" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="selectorArrow_Active" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="FilterClearButtonVisibility" Value="Visible">
                            <Setter Property="Command" TargetName="ClearButton" Value="{x:Static igDp:DataPresenterCommands.ClearActiveRecordCellFilters}" />
                        </Trigger>
                        <Trigger Property="IsAddRecord" Value="True">
                            <Setter TargetName="addRecordOuter" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="addRecordInner" Property="Visibility" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="selectorAddRecord" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="selectorArrow" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="selectorArrow_Active" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsDataChanged" Value="True"/>
                                <Condition Property="IsFilterRecord" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="dataChanged" Property="Visibility" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="selectorDataChanged" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="selectorArrow" Value="Collapsed"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsAddRecord" Value="True"/>
                                <Condition Property="IsDataChanged" Value="True"/>
                                <Condition Property="IsFilterRecord" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="dataChanged" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="dataChangedActive" Value="Collapsed"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasDataError" Value="True" />
                                <Condition Property="IsDataErrorDisplayModeIcon" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="errorIcon" Property="Visibility" Value="Visible" />
                            <Setter TargetName="errorIcon" Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=DataError}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasDataError" Value="True" />
                                <Condition Property="IsDataErrorDisplayModeHighlight" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="errorBd" Property="Background" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.DataErrorHighlightBorderBrushKey}}" />
                            <Setter TargetName="errorBd" Property="CornerRadius" Value="1"/>
                            <Setter TargetName="errorBd" Property="Visibility" Value="Visible" />
                            <Setter TargetName="MainBorder" Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=DataError}" />
                        </MultiTrigger>
                        <!-- Location Triggers -->
                        <Trigger Property="Location" Value="AboveCellArea">
                            <Setter Property="Grid.Column" TargetName="selectors" Value="1"/>
                            <Setter Property="HorizontalAlignment" TargetName="selectors" Value="Center"/>
                            <Setter Property="Margin" TargetName="selectors" Value="0,0,15,0"/>
                            <Setter Property="Grid.Column" TargetName="icons" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="RecordNumber" Value="0"/>
                            <Setter Property="HorizontalAlignment" TargetName="icons" Value="Left"/>
                            <Setter Property="Grid.Column" TargetName="errorIcon" Value="1"/>
                            <Setter Property="HorizontalAlignment" TargetName="errorIcon" Value="Left"/>
                            <Setter Property="HorizontalAlignment" TargetName="FixedRecordBtn" Value="Center"/>
                            <Setter Property="Margin" TargetName="FixedRecordBtn" Value="15,0,0,0"/>
                            <Setter Property="Background" TargetName="MainBorder" Value="#FFF5F5F5"/>
                            <Setter Property="Visibility" TargetName="OrientationHorizontalSep" Value="Visible"/>
                            <Setter TargetName="errorBd" Property="Width" Value="Auto" />
                            <Setter TargetName="errorBd" Property="Height" Value="2" />
                            <Setter TargetName="errorBd" Property="HorizontalAlignment" Value="Stretch" />
                            <Setter TargetName="errorBd" Property="VerticalAlignment" Value="Bottom" />
                            <Setter TargetName="addRecordActiveOuter" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="addRecordActiveInner" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="addRecordOuter" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="addRecordInner" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="icons" Property="Grid.Column" Value="1" />
                            <Setter TargetName="icons" Property="HorizontalAlignment" Value="Center" />
                            <Setter Property="RenderTransform" TargetName="selectorArrow">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="90"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="RenderTransform" TargetName="selectorArrow_Active">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="90"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="RenderTransform" TargetName="selectorAddRecord">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="90"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="Location" Value="BelowCellArea">
                            <Setter Property="Grid.Column" TargetName="selectors" Value="1"/>
                            <Setter Property="HorizontalAlignment" TargetName="selectors" Value="Center"/>
                            <Setter Property="Margin" TargetName="selectors" Value="0,0,15,0"/>
                            <Setter Property="Grid.Column" TargetName="icons" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="RecordNumber" Value="0"/>
                            <Setter Property="HorizontalAlignment" TargetName="icons" Value="Left"/>
                            <Setter Property="Grid.Column" TargetName="errorIcon" Value="1"/>
                            <Setter Property="HorizontalAlignment" TargetName="errorIcon" Value="Left"/>
                            <Setter Property="HorizontalAlignment" TargetName="FixedRecordBtn" Value="Center"/>
                            <Setter Property="Margin" TargetName="FixedRecordBtn" Value="15,0,0,0"/>
                            <Setter Property="Background" TargetName="MainBorder" Value="#FFF5F5F5"/>
                            <Setter Property="Visibility" TargetName="OrientationHorizontalSep" Value="Visible"/>
                            <Setter TargetName="errorBd" Property="Width" Value="Auto" />
                            <Setter TargetName="errorBd" Property="Height" Value="2" />
                            <Setter TargetName="errorBd" Property="HorizontalAlignment" Value="Stretch" />
                            <Setter TargetName="errorBd" Property="VerticalAlignment" Value="Top" />
                            <Setter TargetName="addRecordActiveOuter" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="addRecordActiveInner" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="addRecordOuter" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="addRecordInner" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="icons" Property="Grid.Column" Value="1" />
                            <Setter TargetName="icons" Property="HorizontalAlignment" Value="Center" />
                            <Setter Property="RenderTransform" TargetName="selectorArrow">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="-90"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="RenderTransform" TargetName="selectorArrow_Active">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="-90"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="RenderTransform" TargetName="selectorAddRecord">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="-90"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="Location" Value="RightOfCellArea">
                            <Setter Property="RenderTransform" TargetName="selectorArrow">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="180"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="RenderTransform" TargetName="selectorArrow_Active">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="180"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="RenderTransform" TargetName="selectorAddRecord">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="180"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="FixedButtonVisibility" Value="Collapsed"/>
                                <Condition Property="Location" Value="AboveCellArea"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" TargetName="selectors" Value="0"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="FixedButtonVisibility" Value="Collapsed"/>
                                <Condition Property="Location" Value="BelowCellArea"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" TargetName="selectors" Value="0"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ RecordSelectorNumber __________________________________________ -->
    <Style TargetType="{x:Type igDp:RecordSelectorNumber}">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Margin" Value="1,1,1,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:RecordSelectorNumber}">
                    <Border x:Name="MainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" Margin="{TemplateBinding Padding}">
                        <TextBlock x:Name="Text" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Text="{TemplateBinding RecordNumber}">
                        </TextBlock>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _____________________ RecordScrollTipInfo DataTemplate________________________ -->
    <HierarchicalDataTemplate DataType="{x:Type igDp:RecordScrollTipInfo}" ItemsSource="{Binding Path=Children}">
        <HierarchicalDataTemplate.Resources>
            <DataTemplate DataType="{x:Type igDp:DataRecord}">
                <StackPanel Orientation="Horizontal">
                    <ContentPresenter TextBlock.FontWeight="Bold" VerticalAlignment="Center" Content="{Binding Path=FieldLayout.ScrollTipField.Label}"/>
                    <TextBlock VerticalAlignment="Center" Text=":" Margin="0,0,2,0" Visibility="{Binding Path=FieldLayout.ScrollTipField.HasLabel, Converter={StaticResource BoolToVisConverter}}"/>
                    <igDp:CellValuePresenter Padding="0" Margin="0" Field="{Binding Path=FieldLayout.ScrollTipField}"/>
                </StackPanel>
            </DataTemplate>
            <DataTemplate DataType="{x:Type igDp:GroupByRecord}">
                <TextBlock Text="{Binding Path=Description}" Margin="0,3"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type igDp:ExpandableFieldRecord}">
                <TextBlock Text="{Binding Path=Description}" Margin="0,3"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type igDp:SummaryRecord}">
                <TextBlock Text="{Binding Path=Description}" Margin="0,3"/>
            </DataTemplate>
        </HierarchicalDataTemplate.Resources>
        <ContentControl Content="{Binding Path=Record}"/>
    </HierarchicalDataTemplate>

    <!-- _________________________ RecordScrollTip __________________________________________ -->
    <Style TargetType="{x:Type igDp:RecordScrollTip}">
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:RecordScrollTip}">
                    <Grid SnapsToDevicePixels="True">
                        <Border x:Name="outerBorder"
                                    Opacity="1"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    CornerRadius="5.58,5.58,5.58,5.58"
                                    BorderBrush="#b7b7b7"
                                    BorderThickness="1">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0.01680672268907563,-0.2903225806451613" EndPoint="0.7068450030158547,1.3268999899587324">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="#FFffffff" Offset="0"/>
                                            <GradientStop Color="#FFdcdcdc" Offset="0.9944444298744202"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <Border x:Name="innerBorder"
                                    Opacity="1"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Margin="1,1,1,1"
                                    CornerRadius="5.3999999999999995,5.3999999999999995,5.3999999999999995,5.3999999999999995"
                                    BorderBrush="#ffffff"
                                    BorderThickness="1"/>
                        <ContentPresenter Margin="5,5,5,5"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Source={x:Static interop:BrowserInteropHelper.IsBrowserHosted}}" Value="True">
                            <Setter Property="CornerRadius" TargetName="outerBorder" Value="0"/>
                            <Setter Property="CornerRadius" TargetName="innerBorder" Value="0"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TreeView ItemsSource="{Binding}">
                        <TreeView.Style>
                            <Style TargetType="{x:Type TreeView}">
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="BorderThickness" Value="0"/>
                                <Setter Property="VerticalContentAlignment" Value="Top"/>
                                <Setter Property="Foreground" Value="#767676"/>
                            </Style>
                        </TreeView.Style>
                        <TreeView.ItemContainerStyle>
                            <Style TargetType="{x:Type TreeViewItem}">
                                <Setter Property="IsExpanded" Value="true"/>
                                <Setter Property="Focusable" Value="false"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <StackPanel Orientation="Vertical">
                                                <ContentPresenter ContentSource="Header"
                                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                      x:Name="PART_Header"
                                                                      ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                                                      Content="{TemplateBinding HeaderedContentControl.Header}" />
                                                <StackPanel Orientation="Horizontal" x:Name="ItemsHostPanel">
                                                    <FrameworkElement MinWidth="10" Height="0"/>
                                                    <ItemsPresenter x:Name="ItemsHost"/>
                                                </StackPanel>
                                            </StackPanel>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </TreeView.ItemContainerStyle>
                    </TreeView>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ SummaryRecordPresenter ______________________________________ -->
    <Style TargetType="{x:Type igDp:SummaryRecordPresenter}">
        <Setter Property="Foreground" Value="#FF000000"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="HeaderAreaBackground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelBackground}}"/>
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=SummaryRecordPresenterBackground}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=SummaryRecordPresenterBorder}}"/>
        <Setter Property="Margin" Value="0,0,0,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:SummaryRecordPresenter}">
                    <controls:CardPanel x:Name="baseGrid">
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="0,1,0,1"
                                    Background="{TemplateBinding Background}"
                                    RenderTransform="{TemplateBinding FixedNearElementTransform}"
                                    x:Name="Background"/>
                        <Grid Margin="0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <!-- Expansion Checkbox -->
                            <controls:ExpansionIndicator x:Name="ExpansionIndicator"
                                                             Grid.Row="2"
                                                             Grid.Column="0"
                                                             Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}"
                                                             Command="{x:Static igDp:DataPresenterCommands.ToggleRecordIsExpanded}"
                                                             CommandParameter="{TemplateBinding Record}"
                                                             ToggleMode="Manual"
                                                             IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <!-- Header Background -->
                            <controls:CardPanel x:Name="SpacerFill"
                                                    RenderTransform="{TemplateBinding FixedNearElementTransform}"
                                                    Grid.Row="0"
                                                    Grid.Column="0"
                                                    Grid.ColumnSpan="5"
                                                    Visibility="Visible">
                                <Rectangle x:Name="fill" Margin="0,0,0,0" Fill="{TemplateBinding HeaderAreaBackground}"/>
                                <Rectangle x:Name="lightLine" Fill="#3FFFFFFF" VerticalAlignment="Top" Margin="0,1,0,0" Width="Auto" Height="1"/>
                                <Rectangle x:Name="darkLine" Fill="#66000000" VerticalAlignment="Top" Margin="0,0,0,0" Width="Auto" Height="1"/>
                            </controls:CardPanel>
                            <!-- Header Content -->
                            <ContentPresenter x:Name="PART_HeaderContentSite"
                                                  Grid.Row="0"
                                                  Grid.Column="2"
                                                  Content="{TemplateBinding HeaderContent}"
                                                  Visibility="Visible"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  d:IsHidden="True"/>
                            <Border x:Name="RecordSeparator"
                                        Grid.Row="1"
                                        Grid.Column="0"
                                        Visibility="Collapsed"
                                        RenderTransform="{TemplateBinding FixedNearElementTransform}"
                                        Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=RecordSeparatorStyle}}"
                                        Grid.ColumnSpan="5"/>
                            <!-- Record Content -->
                            <ContentPresenter x:Name="PART_RecordContentSite"
                                                  Grid.Row="2"
                                                  Grid.Column="2"
                                                  Content="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}"
                                                  ContentTemplate="{TemplateBinding RecordContentAreaTemplate}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Margin="{TemplateBinding ContentAreaMargins}"/>
                        </Grid>
                    </controls:CardPanel>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.AutoFitToWidth, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.ColumnSpan" Value="3"/>
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.ColumnSpan" Value="3"/>
                            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                        </MultiDataTrigger>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="2"/>
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="PART_RecordContentSite" Property="VerticalAlignment" Value="Top"/>
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="2"/>
                            <Setter TargetName="SpacerFill" Property="Grid.ColumnSpan" Value="1"/>
                            <Setter TargetName="SpacerFill" Property="Grid.RowSpan" Value="5"/>
                            <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="2"/>
                            <Setter TargetName="RecordSeparator" Property="Grid.Column" Value="1"/>
                            <Setter TargetName="RecordSeparator" Property="Width" Value="10"/>
                            <Setter TargetName="RecordSeparator" Property="Height" Value="Auto"/>
                        </Trigger>
                        <Trigger Property="ShouldDisplayRecordContent" Value="False">
                            <Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Horizontal"/>
                                <Condition Property="ShouldDisplayRecordContent" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="3"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Vertical"/>
                                <Condition Property="ShouldDisplayRecordContent" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="3"/>
                        </MultiTrigger>
                        <Trigger Property="IsHeaderRecord" Value="True">
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="0"/>
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="0"/>
                        </Trigger>
                        <Trigger Property="HasHeaderContent" Value="False">
                            <Setter Property="Visibility" TargetName="SpacerFill" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="PART_HeaderContentSite" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsFixedOnBottom" Value="true">
                            <Setter Property="Margin" Value="0,2,0,0"/>
                            <Setter Property="BorderThickness" TargetName="Background" Value="0,1,0,0"/>
                        </Trigger>
                        <Trigger Property="HasSeparatorBefore" Value="true">
                            <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasSeparatorAfter" Value="true"/>
                                <Condition Property="Orientation" Value="Vertical"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="3"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasSeparatorAfter" Value="true"/>
                                <Condition Property="Orientation" Value="Horizontal"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="RecordSeparator" Property="Grid.Column" Value="3"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="TemplateCardView">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:SummaryRecordPresenter}">
                    <controls:CardPanel x:Name="baseGrid" Background="{TemplateBinding Background}">
                        <!-- Record Content -->
                        <Rectangle Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=CardBackground}}"/>
                        <ContentPresenter x:Name="PART_RecordContentSite"
                                              Content="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}"
                                              ContentTemplate="{TemplateBinding RecordContentAreaTemplate}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </controls:CardPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ SummaryRecordContentArea ______________________________________ -->
    <Style TargetType="{x:Type igDp:SummaryRecordContentArea}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:SummaryRecordContentArea}">
                    <Border BorderBrush="{x:Null}" BorderThickness="0,1,0,1" Background="{x:Null}">
                        <StackPanel>
                            <!--Position the summary record header-->
                            <igDp:SummaryRecordHeaderPresenter x:Name="SummaryRecordHeaderPresenter" SummaryRecord="{TemplateBinding SummaryRecord}" Visibility="{TemplateBinding SummaryRecordHeaderVisibility}"
                                                                   RenderTransform="{Binding Path=FixedNearElementTransform, RelativeSource={RelativeSource AncestorType={x:Type igDp:RecordPresenter}}}" />
                            <igDp:SummaryRecordCellArea x:Name="cellArea" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Border BorderBrush="{x:Null}">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <igDp:SummaryResultsPresenter Grid.Column="0" SummaryResults="{TemplateBinding SummaryResultsLeft}"/>
                                    <igDp:SummaryResultsPresenter Grid.Column="1" SummaryResults="{TemplateBinding SummaryResultsCenter}"/>
                                    <igDp:SummaryResultsPresenter Grid.Column="2" SummaryResults="{TemplateBinding SummaryResultsRight}"/>
                                </Grid>
                            </Border>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasSummariesInCellArea" Value="false">
                            <Setter TargetName="cellArea" Property="Height" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ SummaryRecordPrefixArea __________________________________________ -->
    <Style TargetType="{x:Type igDp:SummaryRecordPrefixArea}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:SummaryRecordPrefixArea}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ SummaryRecordCellArea __________________________________________ -->
    <Style TargetType="{x:Type igDp:SummaryRecordCellArea}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:SummaryRecordCellArea}">
                    <controls:CardPanel>
                        <Border BorderThickness="0,1,0,1">
                            <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
                        </Border>
                    </controls:CardPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="0,0,0,0"/>
    </Style>

    <!-- _________________________ SummaryRecordHeaderPresenter ______________________________________ -->
    <Style TargetType="{x:Type igDp:SummaryRecordHeaderPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:SummaryRecordHeaderPresenter}">
                    <Border Background="{x:Null}" BorderBrush="{x:Null}">
                        <TextBlock FontWeight="Bold" Foreground="{TemplateBinding Foreground}" Margin="{TemplateBinding Padding}"
                                       Text="{Binding Path=SummaryRecord.SummaryRecordHeaderResolved, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.SummaryCSCItemForegroundKey}}"/>
        <Setter Property="Padding" Value="3,3,3,3"/>
    </Style>

    <!-- _________________________ SummaryResultsPresenter ______________________________________ -->
    <Style TargetType="{x:Type igDp:SummaryResultsPresenter}">
        <Style.Resources>
            <DataTemplate DataType="{x:Type igDp:SummaryResult}">
                <igDp:SummaryResultPresenter SummaryResult="{Binding}"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type igDp:SummaryResultEntry}">
                <igDp:SummaryResultPresenter SummaryResult="{Binding Path=SummaryResult}"/>
            </DataTemplate>
        </Style.Resources>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:SummaryResultsPresenter}">
                    <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="true">
                        <ItemsControl ItemsSource="{TemplateBinding SummaryResultEntries}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding TreeLineOffset}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel CanHorizontallyScroll="false" CanVerticallyScroll="false"/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                        </ItemsControl>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ SummaryResultPresenter ______________________________________ -->
    <Style TargetType="{x:Type igDp:SummaryResultPresenter}">
        <Setter Property="Padding" Value="1,1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:SummaryResultPresenter}">
                    <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1"
                                Padding="{TemplateBinding Padding}"
                                ToolTip="{Binding Path=SummaryResult.ToolTipResolved, RelativeSource={RelativeSource TemplatedParent}}">
                        <TextBlock Text="{Binding Path=SummaryResult.DisplayTextAsync, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="0,0,0,2"/>
    </Style>

    <!-- _________________________ SummaryCellPresenter ______________________________________ -->
    <Style TargetType="{x:Type igDp:SummaryCellPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:SummaryCellPresenter}">
                    <igDp:SummaryCellPresenterLayoutElement/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ SummaryButton ______________________________________ -->
    <Style TargetType="{x:Type igDp:SummaryButton}">
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:SummaryButton}">
                    <Grid>
                        <Grid>
                            <Rectangle x:Name="rectangle2" Stroke="{x:Null}" StrokeThickness="1" RadiusX="2" RadiusY="2" Width="12" Height="14" Visibility="Visible" Opacity="0"
                                           Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=SummaryButtonBackgroundHover}}"/>
                            <Path x:Name="path" Margin="2,2,2,2" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Fill"
                                      Data="M 0,0 C0,0 5,0 5,0 5,0 5,1 5,1 5,1 2,1 2,1 2,1 4,3.5 4,3.5 4,3.5 2,6 2,6 2,6 5,6 5,6 5,6 5,7 5,7 5,7 0,7 0,7 0,7 0,6 0,6 0,6 2,3.5625 2,3.5625 2,3.5625 0,1 0,1 0,1 0,0 0,0 z"
                                      Fill="{TemplateBinding Foreground}" Width="5" Height="7" d:LayoutOverrides="Width, Height" Stroke="{x:Null}"/>
                        </Grid>
                        <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" VerticalOffset="4" HorizontalOffset="0" StaysOpen="False"
                                   IsOpen="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" SnapsToDevicePixels="True">
                            <Border CornerRadius="3,3,3,3"
                                        BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=SummaryButtonPopupBorder}}"
                                        x:Name="border"
                                        KeyboardNavigation.DirectionalNavigation="Contained"
                                        KeyboardNavigation.TabNavigation="Contained"
                                        FocusManager.IsFocusScope="True"
                                        BorderThickness="1,1,1,1"
                                        Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=SummaryButtonPopupBackground}}">
                                <Grid Width="Auto" Height="Auto">
                                    <Rectangle Stroke="{x:Null}" Margin="2,2,2,2" x:Name="InnerBackground" Visibility="Visible" RadiusX="3" RadiusY="3"
                                                   Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=SummaryButtonPopupInnerBackground}}"/>
                                    <StackPanel Margin="5,5,5,5">
                                        <igDp:SummaryCalculatorSelectionControl x:Name="CalculatorSelectionControl" Field="{TemplateBinding Field}"/>
                                        <Rectangle Fill="#CCFFFFFF" Stroke="{x:Null}" x:Name="rectangle" Margin="-3,0,-3,0" Height="1"/>
                                        <Rectangle Fill="#3FFFFFFF" Stroke="{x:Null}" Width="Auto" Height="1" x:Name="rectangle1" Margin="-3,0,-3,0"/>
                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,2,3,0">
                                            <Button x:Name="RowSummaryOkButton" Content="Ok" IsDefault="True" Height="12" Margin="0,0,5,0" Width="13"
                                                        Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=RowSummaryOkButton}}" />
                                            <Button x:Name="RowSummaryCancelButton" Content="Cancel" IsCancel="True" Height="12" Width="13"
                                                        Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=RowSummaryCancelButton}}" />
                                        </StackPanel>
                                    </StackPanel>
                                </Grid>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="rectangle2" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=LabelForeground}}"/>
    </Style>

    <!-- _________________________ SummaryCalculatorSelectionControl ______________________________________ -->
    <Style TargetType="{x:Type igDp:SummaryCalculatorSelectionControl}">
        <Style.Resources>
            <DataTemplate DataType="{x:Type igDp:SummaryCalculatorHolder}">
                <controls:CardPanel x:Name="mainPanel">
                    <Grid Margin="0,0,0,5">
                        <CheckBox x:Name="checkBox" Visibility="Visible" Grid.Column="0" IsChecked="{Binding Path=IsChecked, Mode=TwoWay}" FocusVisualStyle="{x:Null}"
                                      AutomationProperties.AutomationId="{Binding Path=Calculator.Name, Converter={StaticResource StringFormatConverter}, ConverterParameter=\{0\}_CheckBox}">
                            <StackPanel>
                                <Image Source="{Binding Path=Calculator.Image}" Margin="5,0,0,0"/>
                                <TextBlock Text="{Binding Path=Calculator.DisplayName}" Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=SummaryCSCItemForeground}}" Margin="5,0"/>
                            </StackPanel>
                        </CheckBox>
                    </Grid>
                    <Grid Margin="0,0,0,10">
                        <RadioButton x:Name="radioButton" Visibility="Collapsed" Grid.Column="0" IsChecked="{Binding Path=IsChecked, Mode=TwoWay}" FocusVisualStyle="{x:Null}"
                                         AutomationProperties.AutomationId="{Binding Path=Calculator.Name, Converter={StaticResource StringFormatConverter}, ConverterParameter=\{0\}_RadioButton}">
                            <StackPanel>
                                <Image Source="{Binding Path=Calculator.Image}" Margin="5,0,0,0"/>
                                <TextBlock Text="{Binding Path=Calculator.DisplayName}" Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=SummaryCSCItemForeground}}" Margin="5,0"/>
                            </StackPanel>
                        </RadioButton>
                    </Grid>
                    <Rectangle Visibility="{Binding Path=IsKeyboardFocusWithin, ElementName=mainPanel, Converter={StaticResource BoolToVisConverter}}" Margin="17,0,0,3" Stroke="#D0000000" StrokeThickness="1" StrokeDashArray="1 2"/>
                </controls:CardPanel>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Path=SelectionControl.AllowMultipleSummaries}" Value="False">
                        <Setter TargetName="checkBox" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="radioButton" Property="Visibility" Value="Visible"/>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
        </Style.Resources>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:SummaryCalculatorSelectionControl}">
                    <ItemsControl ItemsSource="{TemplateBinding SummaryCalculatorHolders}"
                                      KeyboardNavigation.DirectionalNavigation="Contained"
                                      Focusable="False"
                                      Margin="{TemplateBinding Padding}"
                                      Foreground="{TemplateBinding Foreground}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="1,1,1,1"/>
        <Setter Property="Padding" Value="3,3,3,5"/>
    </Style>

    <!-- _________________________ GroupBySummariesPresenter ______________________________________ -->
    <Style TargetType="{x:Type igDp:GroupBySummariesPresenter}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:GroupBySummariesPresenter}">
                    <Border Margin="{TemplateBinding ContentAreaMargins}" Background="{TemplateBinding Background}">
                        <igDp:SummaryRecordContentArea/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey {x:Type igDp:XamDataGrid}, RowSummaryOkButton}" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Path x:Name="path" Opacity="1" Stretch="Fill" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="0.5" Fill="{TemplateBinding Background}"
                                  Data="M 11.44970703125,-0.32843017578125 C11.44970703125,-0.32843017578125 5.0858154296875,6.0355224609375 5.0858154296875,6.0355224609375 5.0858154296875,6.0355224609375 2.55023193359375,3.5 2.55023193359375,3.5 2.55023193359375,3.5 0.13604736328125,5.914215087890625 0.13604736328125,5.914215087890625 0.13604736328125,5.914215087890625 5.0858154296875,10.86395263671875 5.0858154296875,10.86395263671875 5.0858154296875,10.86395263671875 13.86395263671875,2.085784912109375 13.86395263671875,2.085784912109375 13.86395263671875,2.085784912109375 11.44970703125,-0.32843017578125 11.44970703125,-0.32843017578125 z" />
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              RecognizesAccessKey="True"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=SummaryCommandButtonsBackgroundHover}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=SummaryCommandButtonsBorder}}"/>
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=SummaryCommandButtonsBackground}}"/>
    </Style>

    <Style x:Key="{ComponentResourceKey {x:Type igDp:XamDataGrid}, RowSummaryCancelButton}" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=SummaryCommandButtonsBackground}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=SummaryCommandButtonsBorder}}"/>
        <Setter Property="Foreground" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Path HorizontalAlignment="Stretch"
                                  VerticalAlignment="Stretch"
                                  Height="Auto"
                                  Width="Auto"
                                  Stretch="Fill"
                                  Opacity="1"
                                  Data="M 561.3890991210938,474.9895935058594 C561.3890991210938,474.9895935058594 557.5,478.8799743652344 557.5,478.8799743652344 557.5,478.8799743652344 553.6109008789062,474.9895935058594 553.6109008789062,474.9895935058594 553.6109008789062,474.9895935058594 551.4895629882812,477.11090087890625 551.4895629882812,477.11090087890625 551.4895629882812,477.11090087890625 555.3800048828125,481 555.3800048828125,481 555.3800048828125,481 551.4895629882812,484.88909912109375 551.4895629882812,484.88909912109375 551.4895629882812,484.88909912109375 553.6109008789062,487.0104064941406 553.6109008789062,487.0104064941406 553.6109008789062,487.0104064941406 557.5,483.1199951171875 557.5,483.1199951171875 557.5,483.1199951171875 561.3890991210938,487.0104064941406 561.3890991210938,487.0104064941406 561.3890991210938,487.0104064941406 563.5104370117188,484.88909912109375 563.5104370117188,484.88909912109375 563.5104370117188,484.88909912109375 559.6199951171875,481 559.6199951171875,481 559.6199951171875,481 563.5104370117188,477.11090087890625 563.5104370117188,477.11090087890625 563.5104370117188,477.11090087890625 561.3890991210938,474.9895935058594 561.3890991210938,474.9895935058594 z"
                                  Stroke="{TemplateBinding BorderBrush}"
                                  StrokeThickness="0.5"
                                  Fill="{TemplateBinding Background}"
                                  x:Name="path"/>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              RecognizesAccessKey="True"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=SummaryCommandButtonsBackgroundHover}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ FilterCellClearButtonStyleKey ______________________________________ -->
    <Style x:Key="{x:Static igDp:DataPresenterBase.FilterCellClearButtonStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <controls:AutoDisabledImage x:Name="FilterCellIcon"
                                                    Stretch="None"
                                                    controls:Utilities.SnapElementToDevicePixels="True"
                                                    VerticalAlignment="Center"
                                                    HorizontalAlignment="Center">
                        <Image.Source>
                            <BitmapImage DecodePixelWidth="14" DecodePixelHeight="14" UriSource="..\..\Images\FilterClearButton.png"/>
                        </Image.Source>
                    </controls:AutoDisabledImage>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="BaseFilterDropDownLoadingTemplate" >
        <DataTemplate.Resources>
            <Storyboard x:Key="LoadingAni" RepeatBehavior="Forever">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.7500000" Value="360"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </DataTemplate.Resources>
        <DataTemplate.Triggers>
            <Trigger Property="IsVisible" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource LoadingAni}"/>
                </Trigger.EnterActions>
            </Trigger>
        </DataTemplate.Triggers>
        <Grid HorizontalAlignment="Center">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Canvas Width="16" Height="16">
                <Path Stretch="Fill" VerticalAlignment="Top" Width="16" Height="16" Data="M8,11 C8.5522847,11 9,11.447715 9,12 L9,15 C9,15.552285 8.5522847,16 8,16 7.4477153,16 7,15.552285 7,15 L7,12 C7,11.447715 7.4477153,11 8,11 z M10.93934,9.9393406 C11.195262,9.9393406 11.451184,10.036971 11.646447,10.232233 L13.767767,12.353554 C14.158291,12.744078 14.158291,13.377243 13.767767,13.767767 13.377243,14.158291 12.744078,14.158291 12.353553,13.767767 L10.232233,11.646446 C9.8417087,11.255922 9.8417087,10.622757 10.232233,10.232233 10.427495,10.036971 10.683418,9.9393406 10.93934,9.9393406 z M5.0606601,9.9393406 C5.3165824,9.9393406 5.5725048,10.036971 5.767767,10.232233 6.1582912,10.622757 6.1582912,11.255922 5.767767,11.646446 L3.6464467,13.767767 C3.2559223,14.158291 2.6227574,14.158291 2.232233,13.767767 1.8417087,13.377243 1.8417087,12.744078 2.232233,12.353554 L4.3535533,10.232233 C4.5488155,10.036971 4.8047378,9.9393406 5.0606601,9.9393406 z M12,7 L15,7 C15.552285,7 16,7.4477153 16,8 16,8.5522852 15.552285,9 15,9 L12,9 C11.447715,9 11,8.5522852 11,8 11,7.4477153 11.447715,7 12,7 z M1,7 L4,7 C4.5522847,7 5,7.4477153 5,8 5,8.5522852 4.5522847,9 4,9 L1,9 C0.44771528,9 0,8.5522852 0,8 0,7.4477153 0.44771528,7 1,7 z M13.06066,1.9393396 C13.316583,1.9393399 13.572505,2.0369709 13.767767,2.232233 14.158291,2.6227574 14.158291,3.2559223 13.767767,3.6464467 L11.646447,5.767767 C11.255922,6.1582913 10.622757,6.1582913 10.232233,5.767767 9.8417087,5.3772426 9.8417087,4.7440777 10.232233,4.3535533 L12.353553,2.232233 C12.548816,2.0369709 12.804738,1.9393399 13.06066,1.9393396 z M2.9393396,1.9393396 C3.1952622,1.9393399 3.4511845,2.0369709 3.6464467,2.232233 L5.767767,4.3535533 C6.1582912,4.7440777 6.1582912,5.3772426 5.767767,5.767767 5.3772427,6.1582913 4.7440777,6.1582913 4.3535533,5.767767 L2.232233,3.6464467 C1.8417087,3.2559223 1.8417087,2.6227574 2.232233,2.232233 2.427495,2.0369709 2.6834173,1.9393399 2.9393396,1.9393396 z M8,0 C8.5522847,0 9,0.44771525 9,1 L9,4 C9,4.5522847 8.5522847,5 8,5 7.4477153,5 7,4.5522847 7,4 L7,1 C7,0.44771525 7.4477153,0 8,0 z" Fill="#FFDDDDDD"/>
                <Path x:Name="path" Stretch="Fill" VerticalAlignment="Top" Width="16" Height="16" Data="M8,11 C8.5522847,11 9,11.447715 9,12 L9,15 C9,15.552285 8.5522847,16 8,16 7.4477153,16 7,15.552285 7,15 L7,12 C7,11.447715 7.4477153,11 8,11 z M10.93934,9.9393406 C11.195262,9.9393406 11.451184,10.036971 11.646447,10.232233 L13.767767,12.353554 C14.158291,12.744078 14.158291,13.377243 13.767767,13.767767 13.377243,14.158291 12.744078,14.158291 12.353553,13.767767 L10.232233,11.646446 C9.8417087,11.255922 9.8417087,10.622757 10.232233,10.232233 10.427495,10.036971 10.683418,9.9393406 10.93934,9.9393406 z M5.0606601,9.9393406 C5.3165824,9.9393406 5.5725048,10.036971 5.767767,10.232233 6.1582912,10.622757 6.1582912,11.255922 5.767767,11.646446 L3.6464467,13.767767 C3.2559223,14.158291 2.6227574,14.158291 2.232233,13.767767 1.8417087,13.377243 1.8417087,12.744078 2.232233,12.353554 L4.3535533,10.232233 C4.5488155,10.036971 4.8047378,9.9393406 5.0606601,9.9393406 z M12,7 L15,7 C15.552285,7 16,7.4477153 16,8 16,8.5522852 15.552285,9 15,9 L12,9 C11.447715,9 11,8.5522852 11,8 11,7.4477153 11.447715,7 12,7 z M1,7 L4,7 C4.5522847,7 5,7.4477153 5,8 5,8.5522852 4.5522847,9 4,9 L1,9 C0.44771528,9 0,8.5522852 0,8 0,7.4477153 0.44771528,7 1,7 z M13.06066,1.9393396 C13.316583,1.9393399 13.572505,2.0369709 13.767767,2.232233 14.158291,2.6227574 14.158291,3.2559223 13.767767,3.6464467 L11.646447,5.767767 C11.255922,6.1582913 10.622757,6.1582913 10.232233,5.767767 9.8417087,5.3772426 9.8417087,4.7440777 10.232233,4.3535533 L12.353553,2.232233 C12.548816,2.0369709 12.804738,1.9393399 13.06066,1.9393396 z M2.9393396,1.9393396 C3.1952622,1.9393399 3.4511845,2.0369709 3.6464467,2.232233 L5.767767,4.3535533 C6.1582912,4.7440777 6.1582912,5.3772426 5.767767,5.767767 5.3772427,6.1582913 4.7440777,6.1582913 4.3535533,5.767767 L2.232233,3.6464467 C1.8417087,3.2559223 1.8417087,2.6227574 2.232233,2.232233 2.427495,2.0369709 2.6834173,1.9393399 2.9393396,1.9393396 z M8,0 C8.5522847,0 9,0.44771525 9,1 L9,4 C9,4.5522847 8.5522847,5 8,5 7.4477153,5 7,4.5522847 7,4 L7,1 C7,0.44771525 7.4477153,0 8,0 z" RenderTransformOrigin="0.5,0.5">
                    <Path.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform/>
                            <SkewTransform/>
                            <RotateTransform/>
                            <TranslateTransform/>
                        </TransformGroup>
                    </Path.RenderTransform>
                    <Path.Fill>
                        <LinearGradientBrush MappingMode="RelativeToBoundingBox" EndPoint="0.5,1" StartPoint="0.5,0">
                            <LinearGradientBrush.RelativeTransform>
                                <TransformGroup>
                                    <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="0.469" ScaleY="1.186"/>
                                    <SkewTransform CenterX="0.5" CenterY="0.5"/>
                                    <RotateTransform CenterX="0.5" CenterY="0.5" Angle="-5.738"/>
                                    <TranslateTransform X="-0.117" Y="-0.2"/>
                                </TransformGroup>
                            </LinearGradientBrush.RelativeTransform>
                            <GradientStop Color="#FF333333" Offset="0.031"/>
                            <GradientStop Offset="0.767"/>
                            <GradientStop Color="#FF494949" Offset="0.472"/>
                        </LinearGradientBrush>
                    </Path.Fill>
                </Path>
            </Canvas>
            <TextBlock Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" FontWeight="Bold" Grid.Column="1"
                           Text="{Binding Path=Value, Source={x:Static igDp:ResourcesDataPresenter.FilterDropDownLoadingIndicator}}" />
        </Grid>
        <!--</Border>-->
    </DataTemplate>

    
    <DataTemplate x:Key="{x:Static igDp:DataPresenterBase.FilterDropDownLoadingTemplateKey}" >
        <Border Padding="5" BorderThickness="0,1,0,0" BorderBrush="#FFCCCCCC">
            <ContentPresenter ContentTemplate="{StaticResource BaseFilterDropDownLoadingTemplate}" />
        </Border>
    </DataTemplate>

    <!-- _________________________ FilterRecordClearButtonStyleKey ______________________________________ -->
    <Style x:Key="{x:Static igDp:DataPresenterBase.FilterRecordClearButtonStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Image x:Name="FilterRecordIcon" Stretch="None" VerticalAlignment="Center" HorizontalAlignment="Center" controls:Utilities.SnapElementToDevicePixels="True">
                        <Image.Source>
                            <BitmapImage DecodePixelWidth="14" DecodePixelHeight="14" UriSource="..\..\Images\Filter.png"/>
                        </Image.Source>
                    </Image>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter TargetName="FilterRecordIcon" Property="Source" Value="..\..\Images\FilterClearButton.png"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ FilterCellValuePresenter ______________________________________ -->
    <Style TargetType="{x:Type igDp:FilterCellValuePresenter}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="#FFCCCCCC"/>
        <Setter Property="BackgroundHover" Value="Transparent"/>
        <Setter Property="BorderHoverBrush" Value="#FFCCCCCC"/>
        <Setter Property="BackgroundActive" Value="Transparent"/>
        <Setter Property="BorderActiveBrush" Value="#FFCCCCCC"/>
        <Setter Property="BackgroundSelected" Value="Transparent"/>
        <Setter Property="BorderSelectedBrush" Value="#FF666666"/>
        <Setter Property="BackgroundFieldSelected" Value="Transparent"/>
        <Setter Property="BorderFieldSelectedBrush" Value="#FF666666"/>
        <Setter Property="BackgroundPrimary" Value="#7FE9E9E9"/>
        <Setter Property="BorderPrimaryBrush" Value="#FFE9E9E9"/>
        <Setter Property="Foreground" Value="#FF000000"/>
        <Setter Property="ForegroundStyle">
            <Setter.Value>
                <Style/>
            </Setter.Value>
        </Setter>
        <Setter Property="ForegroundActiveStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=BlackForegroundStyle}}"/>
        <Setter Property="ForegroundAlternateStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GrayForegroundStyle}}"/>
        <Setter Property="ForegroundPrimaryStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=GrayForegroundStyle}}"/>
        <Setter Property="ForegroundSelectedStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=BlackForegroundStyle}}"/>
        <Setter Property="ForegroundFieldSelectedStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=BlackForegroundStyle}}"/>
        <Setter Property="ForegroundHoverStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="TextBlock.Foreground" Value="#FF151C55"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="Padding" Value="2,0,0,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:FilterCellValuePresenter}">
                    <controls:CardPanel>
                        <Border x:Name="MainBorder"
                                    CornerRadius="{TemplateBinding CornerRadius}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    Background="{TemplateBinding Background}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.ColumnDefinitions>
                                <!--<ColumnDefinition Width="Auto"/>-->
                                <ColumnDefinition/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <!--<controls:ComparisonOperatorSelector Grid.Column="0"
                                                                     IsDropDownOpen="{Binding Path=IsOperatorDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                                                     AllowableOperators="{Binding Path=Field.FilterOperatorDropDownItemsResolved, RelativeSource={RelativeSource TemplatedParent}}"
                                                                     SelectedOperator="{Binding Path=Operator, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                                                     Visibility="{Binding Path=Field.FilterOperatorVisibilityResolved, RelativeSource={RelativeSource TemplatedParent}}"
                                                                     Foreground="{TemplateBinding Foreground}"/>-->
                            <Button Style="{DynamicResource {x:Static igDp:DataPresenterBase.FilterCellClearButtonStyleKey}}"
                                        Grid.Column="1"
                                        Command="{x:Static igDp:DataPresenterCommands.ClearActiveCellFilters}"
                                        Visibility="{Binding Path=Field.FilterClearButtonVisibilityResolved, RelativeSource={RelativeSource TemplatedParent}}"
                                        Margin="2,0,4,0"/>
                            <ContentPresenter x:Name="PART_EditorSite"
                                                  Grid.Column="0"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Style="{TemplateBinding ForegroundStyle}"/>
                        </Grid>
                    </controls:CardPanel>
                    <ControlTemplate.Triggers>
                        <!-- HighlightAsPrimary -->
                        <Trigger Property="HighlightAsPrimary" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundPrimary, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderPrimaryBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundPrimaryStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <!-- IsFieldSelected -->
                        <Trigger Property="IsFieldSelected" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundFieldSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderFieldSelectedBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundFieldSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <!-- IsSelected -->
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderSelectedBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <!-- IsActive -->
                        <Trigger Property="IsActive" Value="true">
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="Background" Value="{Binding Path=BackgroundActive, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderActiveBrush, RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <!-- IsMouseOver -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsFieldSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{Binding Path=BackgroundHover, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderHoverBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Base Style for all FixedFieldSplitters -->
    <Style x:Key="FixedFieldSplitterBaseStyle" TargetType="{x:Type igDp:FixedFieldSplitter}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="MinWidth" Value="7" />
                <Setter Property="BorderThickness" Value="1,0,1,0"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.FixedFieldsSplitterVerticalFillBrush}}"/>
                <Setter Property="Cursor" Value="{Binding Path=VerticalCursor, RelativeSource={RelativeSource Self} }" />
            </Trigger>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="MinHeight" Value="7" />
                <Setter Property="BorderThickness" Value="0,1,0,1"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.FixedFieldsSplitterHorizontalFillBrush}}"/>
                <Setter Property="Cursor" Value="{Binding Path=HorizontalCursor, RelativeSource={RelativeSource Self} }" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.FixedFieldsSplitterHottrackStrokeBrush}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Shared Office and Aero Base Style -->
    <Style x:Key="OfficeAeroSharedFieldSplitterStyle" BasedOn="{StaticResource FixedFieldSplitterBaseStyle}" TargetType="{x:Type igDp:FixedFieldSplitter}">
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.FixedFieldsSplitterStrokeBrush}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:FixedFieldSplitter}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="SplitterHoverIn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="splitterHoverBd" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="innerStroke" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SplitterHoverOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="splitterHoverBd" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="innerStroke" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Background="Transparent">
                        <Border x:Name="splitterMainBd"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Padding="{TemplateBinding Padding}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        <Border x:Name="splitterHoverBd"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Opacity="0"
                                    Padding="{TemplateBinding Padding}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    Background="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.FixedFieldsSplitterVerticalHottrackFillBrush}}"/>
                        <Border x:Name="innerStroke"
                                    Margin="1,0,1,0"
                                    BorderBrush="#59FFFFFF"
                                    BorderThickness="1,0,1,0"
                                    Opacity="0"/>
                        <Grid x:Name="gripperLinesVertical" Visibility="Collapsed" HorizontalAlignment="Center" Margin="1,0,0,0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="0.15*"/>
                                <RowDefinition Height="0.7*"/>
                                <RowDefinition Height="0.15*"/>
                            </Grid.RowDefinitions>
                            <Border Width="2"
                                        Grid.Row="1"
                                        HorizontalAlignment="Center"
                                        Margin="0,0,2,0"
                                        VerticalAlignment="Stretch"
                                        Background="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.FixedFieldsSplitterGripperDarkLineBrush}}"
                                        BorderBrush="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.FixedFieldsSplitterGripperLightLineBrush}}"
                                        BorderThickness="0,0,1,0"/>
                            <Border Width="2"
                                        Grid.Row="1"
                                        HorizontalAlignment="Center"
                                        Margin="2,0,0,0"
                                        VerticalAlignment="Stretch"
                                        Background="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.FixedFieldsSplitterGripperDarkLineBrush}}"
                                        BorderBrush="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.FixedFieldsSplitterGripperLightLineBrush}}"
                                        BorderThickness="0,0,1,0"/>
                        </Grid>
                        <Grid x:Name="gripperLinesHorizontal" Visibility="Collapsed" VerticalAlignment="Center" Margin="0,1,0,0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="0.15*"/>
                                <ColumnDefinition Width="0.7*"/>
                                <ColumnDefinition Width="0.15*"/>
                            </Grid.ColumnDefinitions>
                            <Border Height="2"
                                        Grid.Column="1"
                                        HorizontalAlignment="Stretch"
                                        Margin="0,0,0,2"
                                        VerticalAlignment="Center"
                                        Background="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.FixedFieldsSplitterGripperDarkLineBrush}}"
                                        BorderBrush="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.FixedFieldsSplitterGripperLightLineBrush}}"
                                        BorderThickness="0,0,0,1"/>
                            <Border Height="2"
                                        Grid.Column="1"
                                        HorizontalAlignment="Stretch"
                                        Margin="0,2,0,0"
                                        VerticalAlignment="Center"
                                        Background="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.FixedFieldsSplitterGripperDarkLineBrush}}"
                                        BorderBrush="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.FixedFieldsSplitterGripperLightLineBrush}}"
                                        BorderThickness="0,0,0,1"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="splitterHoverBd"  Property="Background" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.FixedFieldsSplitterHorizontalHottrackFillBrush}}"/>
                            <Setter TargetName="innerStroke" Property="BorderThickness" Value="0,1,0,1"/>
                            <Setter TargetName="innerStroke" Property="Margin" Value="0,1,0,1"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Vertical"/>
                                <Condition Property="IsInHeader" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="gripperLinesVertical" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="splitterMainBd" Property="Visibility" Value="Collapsed"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Horizontal"/>
                                <Condition Property="IsInHeader" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="gripperLinesHorizontal" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="splitterMainBd" Property="Visibility" Value="Collapsed"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHighlighted" Value="True"/>
                                <Condition Property="IsInHeader" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="SplitterHover_BeginStoryboard"/>
                                <BeginStoryboard Storyboard="{StaticResource SplitterHoverOut}"/>
                            </MultiTrigger.ExitActions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard x:Name="SplitterHover_BeginStoryboard" Storyboard="{StaticResource SplitterHoverIn}"/>
                            </MultiTrigger.EnterActions>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Define Style for Generic-->
    <Style BasedOn="{StaticResource OfficeAeroSharedFieldSplitterStyle}" TargetType="{x:Type igDp:FixedFieldSplitter}" />

    <!-- Define Shared Luna Template -->
    
    <ControlTemplate x:Key="LunaFixedFieldSplitterTemplate" TargetType="{x:Type igDp:FixedFieldSplitter}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="SplitterHoverIn">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="splitterHoverBd" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SplitterHoverOut">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="splitterHoverBd" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <Grid Background="Transparent">
            <Border x:Name="splitterMainBd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                        Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Background="{TemplateBinding Background}"/>
            <Border x:Name="splitterHoverBd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Opacity="0"
                        Background="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.FixedFieldsSplitterVerticalHottrackFillBrush}}"/>
            <Grid x:Name="DotGrippers_Vertical" Visibility="Collapsed" Background="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.FFSplitterVerticalTileBrushKey}}"/>
            <Grid x:Name="DotGrippers_Horizontal" Visibility="Collapsed" Background="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.FFSplitterHorizontalTileBrushKey}}"/>
            <Border x:Name="footerMid" Height="3" Margin="0,0,0,0" VerticalAlignment="Bottom" SnapsToDevicePixels="True" Visibility="Collapsed"
                        Background="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.LabelPresenterFooterMid}}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Orientation" Value="Vertical"/>
                    <Condition Property="IsInHeader" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="DotGrippers_Vertical" Property="Visibility" Value="Visible"/>
                <Setter TargetName="footerMid" Property="Visibility" Value="Visible"/>
                <Setter TargetName="splitterMainBd" Property="Visibility" Value="Collapsed"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Orientation" Value="Horizontal"/>
                    <Condition Property="IsInHeader" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="DotGrippers_Horizontal" Property="Visibility" Value="Visible"/>
                <Setter TargetName="splitterMainBd" Property="Visibility" Value="Collapsed"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="IsInHeader" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="SplitterHover_BeginStoryboard"/>
                    <BeginStoryboard Storyboard="{StaticResource SplitterHoverOut}"/>
                </MultiTrigger.ExitActions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard x:Name="SplitterHover_BeginStoryboard" Storyboard="{StaticResource SplitterHoverIn}"/>
                </MultiTrigger.EnterActions>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- _________________________ FieldLayoutGroupByInfo ____________________________________ -->
    <DataTemplate DataType="{x:Type igDp:FieldLayoutGroupByInfo}" >
        <StackPanel Orientation="Horizontal" Margin="{Binding Path=(igDp:GroupByAreaMulti.Offset)}">
            <ContentControl Content="{Binding Path=FieldLayout}"
                                ContentTemplate="{Binding FieldLayoutDescriptionTemplate}"
                                igDp:GroupByAreaMulti.IsConnectorLineTarget="True"
                                Opacity=".7"
                                VerticalAlignment="Top"
                                Visibility="{Binding Path=FieldLayoutDescriptionVisibility}"
                                Margin="2"/>
            <ItemsControl ItemsSource="{Binding Path=GroupByFields}" Margin="1">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <igDp:GroupByAreaMultiPanel Orientation="Horizontal" ConnectorLinePen="{Binding Path=ConnectorLinePen, RelativeSource={RelativeSource AncestorType={x:Type igDp:GroupByAreaMulti}}}" />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
        </StackPanel>
    </DataTemplate>

    <!-- _________________________ GroupByAreaMulti __________________________________________ -->
    <Style TargetType="{x:Type igDp:GroupByAreaMulti}">
        <Style.Resources>
            <DataTemplate DataType="{x:Type igDp:Field}" >
                <igDp:LabelPresenter Field="{Binding}" VerticalAlignment="Top" Margin="{Binding Path=(igDp:GroupByAreaMulti.Offset)}" IsInGroupByArea="true" />
            </DataTemplate>
        </Style.Resources>
        <Setter Property="Prompt1" Value="{Binding Path=Value, Source={x:Static igDp:ResourcesDataPresenter.GroupByAreaPrompt1}}"/>
        <Setter Property="Prompt2" Value="{Binding Path=Value, Source={x:Static igDp:ResourcesDataPresenter.GroupByAreaPrompt2}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.GroupByAreaMultiBackgroundBrush}}"/>
        <Setter Property="BorderThickness" Value="1,0,1,1"/>
        <Setter Property="BorderBrush" Value="#FFA7A9B0"/>
        <Setter Property="Padding" Value="0,5"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.FieldLayoutForeground}}"/>
        <Setter Property="FieldLayoutDescriptionTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border>
                        <TextBlock Foreground="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.FieldLayoutForeground}}" Text="{Binding Description}" Margin="4,2,4,2" FontWeight="Bold" VerticalAlignment="Center" igDp:GroupByAreaMulti.IsConnectorLineTarget="False"/>
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ConnectorLinePen" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.ConnectorLinePen}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:GroupByAreaMulti}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="ShowPrompts">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="prompt1" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="prompt2" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0.8"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HidePrompts">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="prompt1" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="prompt2" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <controls:ExpanderBar x:Name="ExpanderBarButton" Grid.Row="0" Height="10"/>
                        <controls:ExpanderDecorator Grid.Row="1" HorizontalAlignment="Stretch" Orientation="Vertical"
                                                        IsExpanded="{Binding Path=IsExpanded, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition MaxHeight="13"/>
                                            <RowDefinition Height="*"/>
                                        </Grid.RowDefinitions>
                                        <Rectangle Fill="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.GroupByAreaMultiHighlightBrush}}"/>
                                        <Rectangle Fill="#59FFFFFF" Height="1" Grid.Row="1" VerticalAlignment="Bottom"/>
                                        <controls:CardPanel Grid.Row="0" Grid.RowSpan="2" Margin="{TemplateBinding Padding}">
                                            <StackPanel Orientation="Horizontal"
                                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                <ContentControl x:Name="prompt1"
                                                                    Content="{TemplateBinding Prompt1}"
                                                                    ContentTemplate="{TemplateBinding Prompt1Template}"
                                                                    Margin="1,1,4,1"
                                                                    FontSize="24"
                                                                    Opacity=".5"
                                                                    VerticalAlignment="Center" />
                                                <ContentControl x:Name="prompt2"
                                                                    Content="{TemplateBinding Prompt2}"
                                                                    ContentTemplate="{TemplateBinding Prompt2Template}"
                                                                    Opacity=".8"
                                                                    VerticalAlignment="Center"/>
                                            </StackPanel>
                                            <ItemsControl ItemsSource="{Binding Path=FieldLayoutGroupByInfos, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center">
                                                <ItemsControl.Template>
                                                    <ControlTemplate>
                                                        <ScrollViewer Style="{StaticResource CustomScrollViewer}" CanContentScroll="False">
                                                            <igDp:GroupByAreaMultiPanel IsItemsHost="True"
                                                                                            Orientation="{Binding Path=FieldLayoutOrientation, RelativeSource={RelativeSource AncestorType={x:Type igDp:GroupByAreaMulti}}}"
                                                                                            ConnectorLinePen="{Binding Path=ConnectorLinePen, RelativeSource={RelativeSource AncestorType={x:Type igDp:GroupByAreaMulti}}}"/>
                                                        </ScrollViewer>
                                                    </ControlTemplate>
                                                </ItemsControl.Template>
                                            </ItemsControl>
                                        </controls:CardPanel>
                                    </Grid>
                                </Border>
                            </Grid>
                        </controls:ExpanderDecorator>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="igDp:GroupByAreaMulti.ShowPrompts">
                            <BeginStoryboard x:Name="ShowPrompts_BeginStoryboard" Storyboard="{StaticResource ShowPrompts}"/>
                            <StopStoryboard BeginStoryboardName="HidePrompts_BeginStoryboard"/>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDp:GroupByAreaMulti.HidePrompts">
                            <BeginStoryboard x:Name="HidePrompts_BeginStoryboard" Storyboard="{StaticResource HidePrompts}"/>
                            <StopStoryboard BeginStoryboardName="ShowPrompts_BeginStoryboard"/>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="FieldLayoutOrientation" Value="Horizontal">
                <Setter Property="ConnectorLinePen" Value="{x:Null}"/>
                <Setter Property="FieldLayoutOffsetY" Value="0"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- _________________________ FieldChooser ______________________________________ -->
    <Style TargetType="{x:Type igDp:FieldChooser}">
        <Style.Resources>
            <!--Represents a field in the field chooser.-->
            <DataTemplate DataType="{x:Type igDp:FieldChooserEntry}">
                <DockPanel>
                    <editors:XamCheckEditor x:Name="checkBox" DockPanel.Dock="Left" IsThreeState="false" Value="{Binding Path=IsVisible, Mode=TwoWay}" />
                    <igDp:LabelPresenter x:Name="label" IsInFieldChooser="true" Field="{Binding Path=Field}" HorizontalContentAlignment="Left" VerticalContentAlignment="Center" 
                                             IsSelectedInFieldChooser="{Binding Path=IsSelected}" Margin="5,0,0,0" DockPanel.Dock="Left">
                        <igDp:LabelPresenter.InputBindings>
                            <MouseBinding MouseAction="LeftDoubleClick"
									Command="{x:Static igDp:FieldChooserCommands.ToggleVisibility}" />
                        </igDp:LabelPresenter.InputBindings>
                    </igDp:LabelPresenter>
                </DockPanel>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Path=DisplayHiddenFieldsOnly, RelativeSource={RelativeSource AncestorType={x:Type igDp:FieldChooser}}}" Value="true">
                        <Setter TargetName="checkBox" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
            <!--Template that represents field groups displayed in the combo editor's drop-down list as well as its edit area.-->
            <DataTemplate DataType="{x:Type igDp:FieldChooserGroup}">
                <StackPanel x:Name="panel" ToolTip="{Binding FieldLayout.ToolTip}">
                    <TextBlock x:Name="fieldLayoutDescription" Text="{Binding Path=FieldLayout.Description}" />
                    <StackPanel x:Name="filterPanel" Orientation="Horizontal" Visibility="Collapsed">
                        <!--This rectangle is for indenting the filter description.-->
                        <Rectangle Width="20" />
                        <TextBlock Text="{Binding Path=FieldFilter.Description}" />
                    </StackPanel>
                </StackPanel>

                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Path=HasFieldFilter}" Value="true">
                        <Setter TargetName="panel" Property="ToolTip" Value="{Binding FieldFilter.ToolTip}" />
                        <Setter TargetName="filterPanel" Property="Visibility" Value="Visible" />
                        <Setter TargetName="fieldLayoutDescription" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
        </Style.Resources>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDp:FieldChooser}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="true" >
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <DockPanel Visibility="{TemplateBinding FieldGroupSelectorVisibilityResolved}" >
                                <editors:XamCheckEditor x:Name="toggleAllCheckBox"
                                                            DockPanel.Dock="Left"
                                                            IsThreeState="false"
                                                            Value="{Binding Path=AllCurrentFieldsVisible, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=TwoWay}"
                                                            Visibility="{Binding Path=DisplayHiddenFieldsOnly, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource NotBoolToVisConverter}, Mode=OneWay}"
                                                            Margin="4,0,0,0" />

                                <!--Combo editor that has list of field layouts in its drop-down.-->
                                <editors:XamComboEditor x:Name="fieldGroupSelector"
                                                            DockPanel.Dock="Right"
                                                            ItemsSource="{TemplateBinding FieldGroups}"
                                                            ValueType="{x:Type igDp:FieldChooserGroup}"
                                                            DisplayValueSource="Value"
                                                            Value="{Binding Path=CurrentFieldGroup, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=TwoWay}"
                                                            HorizontalAlignment="Stretch" />
                            </DockPanel>

                            <controls:CardPanel Grid.Row="1">

                                <!--List box that displays the fields-->
                                <ListBox x:Name="PART_FieldsListBox"
                                             ItemsSource="{TemplateBinding CurrentFields}"
                                             SelectionMode="Single"
                                             SelectedItem="{Binding Path=SelectedField, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=TwoWay}"
                                             HorizontalContentAlignment="Stretch" >
                                    <!--Since the LabelPresenter elements are rendering the selected state, make the listbox item
                                        from rendering selected state itself. Also prevent it from drawing the dashed focus rect.-->
                                    <ListBox.ItemContainerStyle>
                                        <Style TargetType="{x:Type ListBoxItem}">
                                            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ListBox.ItemContainerStyle>
                                    <ListBox.InputBindings>
                                        <!--This is for toggling the visibility of the field in the data presenter (essentially the checkbox next to the field label).-->
                                        <KeyBinding Key="Space" Command="{x:Static igDp:FieldChooserCommands.ToggleVisibility}" />
                                    </ListBox.InputBindings>
                                </ListBox>
                                <Border x:Name="highlightBorder" BorderThickness="2" BorderBrush="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                            </controls:CardPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--NOTE: The following trigger can be used to highlight the field chooser when a field from it is being dragged.-->
                        <Trigger Property="IsDraggingItem" Value="true">
                            <Setter TargetName="highlightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.FieldChooserDragBorderBrushKey}}" />
                        </Trigger>
                        <!--NOTE: The following trigger can be used to highlight the field chooser when a field from the associated data presenter is being dragged.-->
                        <Trigger Property="IsDraggingItemFromDataPresenter" Value="true">
                            <Setter TargetName="highlightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.FieldChooserDragBorderBrushKey}}" />
                        </Trigger>
                        <!--NOTE: The following trigger can be used to highlight the field chooser when a field from the associated data presenter is being dragged over the field chooser.-->
                        <Trigger Property="IsDragItemOver" Value="true">
                            <Setter TargetName="highlightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.FieldChooserDragBorderBrushKey}}" />
                        </Trigger>
                        <!--SSP 10/21/09 TFS22726 - Added the following DataTrigger to hide the toggleAllCheckBox when there are no fields in the field chooser.-->
                        <DataTrigger Binding="{Binding Path=CurrentFields.Count, RelativeSource={RelativeSource Self}}" Value="0" >
                            <Setter TargetName="toggleAllCheckBox" Property="IsEnabled" Value="false" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ FieldChooserButtonStyleKey ______________________________________ -->
    <Style x:Key="{x:Static igDp:DataPresenterBase.FieldChooserButtonStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="#FFFFFFFF"/>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Offset="0" Color="#FF999999"/>
                            <GradientStop Offset="1" Color="#FF666666"/>
                        </GradientStopCollection>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="#FF000000"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="Transparent" Width="16" Height="16">
                        <Grid x:Name="FieldChooserIcon" Width="14" Height="14" VerticalAlignment="Center" HorizontalAlignment="Center" >
                            <Path Fill="{TemplateBinding Background}" Data="M 3,0 C3,0 3,4 3,4 3,4 0,4 0,4 0,4 0,14 0,14 0,14 7,14 7,14 7,14 7,10 7,10 7,10 14,10 14,10 14,10 14,0 14,0 14,0 3,0 3,0 z" SnapsToDevicePixels="True"/>
                            <Path Fill="{TemplateBinding BorderBrush}" Data="M 1,5 C1,5 6,5 6,5 6,5 6,7 6,7 6,7 1,7 1,7 1,7 1,5 1,5 zM 1,8 C1,8 6,8 6,8 6,8 6,10 6,10 6,10 1,10 1,10 1,10 1,8 1,8 zM 1,11 C1,11 6,11 6,11 6,11 6,13 6,13 6,13 1,13 1,13 1,13 1,11 1,11 zM 7,7 C7,7 13,7 13,7 13,7 13,9 13,9 13,9 7,9 7,9 7,9 7,7 7,7 zM 7,4 C7,4 13,4 13,4 13,4 13,6 13,6 13,6 7,6 7,6 7,6 7,4 7,4 zM 4,1 C4,1 13,1 13,1 13,1 13,3 13,3 13,3 4,3 4,3 4,3 4,1 4,1 zM 3,0 C3,0 3,4 3,4 3,4 0,4 0,4 0,4 0,14 0,14 0,14 7,14 7,14 7,14 7,10 7,10 7,10 14,10 14,10 14,10 14,0 14,0 14,0 3,0 3,0 z" SnapsToDevicePixels="True"/>
                            <Grid Margin="0,0,0,1">
                                <Border Width="6" Height="3" Margin="0,0,2,2" BorderBrush="{TemplateBinding Foreground}" BorderThickness="0,0,1,1" CornerRadius="0,0,2,0" SnapsToDevicePixels="True"/>
                                <Path Width="5" Height="3" Margin="3,1,0,0" VerticalAlignment="Top" Fill="{TemplateBinding Foreground}" Stretch="Fill" SnapsToDevicePixels="True"
                                          Data="M 0,2 C0,2 0,3 0,3 0,3 5,3 5,3 5,3 5,2 5,2 5,2 4,2 4,2 4,2 4,1 4,1 4,1 3,1 3,1 3,1 3,0 3,0 3,0 2,0 2,0 2,0 2,1 2,1 2,1 1,1 1,1 1,1 1,2 1,2 1,2 0,2 0,2 z" />
                            </Grid>
                        </Grid>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="igDp:RecordExportStatusControl">
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0,2,5,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igDp:RecordExportStatusControl">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="true">
                        <StackPanel SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Orientation="Horizontal"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" >
                            <TextBlock x:Name="message" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <ProgressBar x:Name="progress" IsIndeterminate="True" Margin="5,0,0,0"
                                             Style="{DynamicResource {x:Static igDp:RecordExportStatusControl.IndeterminateProgressBarStyleKey}}" />
                            <Button Margin="8,0,0,0" x:Name="cancel"
                                        Focusable="False"
                                        ToolTip="{Binding Path=Value, Source={x:Static igDp:ResourcesDataPresenter.CancelExportToolTip}}"
                                        Command="{x:Static igDp:DataPresenterCommands.CancelExport}"
                                        CommandTarget="{Binding DataPresenter, RelativeSource={RelativeSource TemplatedParent}}"
                                        Style="{DynamicResource {x:Static igDp:RecordExportStatusControl.CancelExportButtonStyleKey}}" />
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=ExportInfo.StatusMessage, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToFalseConverter}}" Value="True">
                            <Setter TargetName="message" Property="Text">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource StringFormatConverter}">
                                        <Binding Path="ExportInfo.StatusMessage" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="ExportInfo.FileName" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.StatusMessage, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToFalseConverter}}" Value="False" />
                                <Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToFalseConverter}}" Value="True" />
                                <Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Exporting" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="message" Property="Text">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource StringFormatConverter}">
                                        <Binding Path="Value" Source="{x:Static igDp:ResourcesDataPresenter.ExportStatusExportingMessage}" />
                                        <Binding Path="ExportInfo.FileNameWithoutPath" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="ExportedRecordCount" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.StatusMessage, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToFalseConverter}}" Value="False" />
                                <Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToFalseConverter}}" Value="False" />
                                <Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Exporting" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="message" Property="Text">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource StringFormatConverter}">
                                        <Binding Path="Value" Source="{x:Static igDp:ResourcesDataPresenter.ExportStatusExportingMessage}" />
                                        <Binding Path="ExportInfo.ExportType" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="ExportedRecordCount" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.StatusMessage, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToFalseConverter}}" Value="False" />
                                <Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToFalseConverter}}" Value="True" />
                                <Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Initializing" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="message" Property="Text">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource StringFormatConverter}">
                                        <Binding Path="Value" Source="{x:Static igDp:ResourcesDataPresenter.ExportStatusInitializingMessage}" />
                                        <Binding Path="ExportInfo.FileNameWithoutPath" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.StatusMessage, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToFalseConverter}}" Value="False" />
                                <Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToFalseConverter}}" Value="False" />
                                <Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Initializing" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="message" Property="Text">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource StringFormatConverter}">
                                        <Binding Path="Value" Source="{x:Static igDp:ResourcesDataPresenter.ExportStatusInitializingMessage}" />
                                        <Binding Path="ExportInfo.ExportType" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.StatusMessage, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToFalseConverter}}" Value="False" />
                                <Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToFalseConverter}}" Value="True" />
                                <Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Pending" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="message" Property="Text">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource StringFormatConverter}">
                                        <Binding Path="Value" Source="{x:Static igDp:ResourcesDataPresenter.ExportStatusPendingMessage}" />
                                        <Binding Path="ExportInfo.FileNameWithoutPath" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.StatusMessage, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToFalseConverter}}" Value="False" />
                                <Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToFalseConverter}}" Value="False" />
                                <Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Pending" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="message" Property="Text">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource StringFormatConverter}">
                                        <Binding Path="Value" Source="{x:Static igDp:ResourcesDataPresenter.ExportStatusPendingMessage}" />
                                        <Binding Path="ExportInfo.ExportType" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <Trigger Property="Status" Value="NotExporting">
                            <Setter TargetName="progress" Property="IsIndeterminate" Value="false" />
                            <Setter TargetName="progress" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="{x:Static igDp:RecordExportStatusControl.CancelExportButtonStyleKey}">
        <Setter Property="Height" Value="14" />
        <Setter Property="Width" Value="14" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock Text="X" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ProgressBar" x:Key="{x:Static igDp:RecordExportStatusControl.IndeterminateProgressBarStyleKey}" >
        <Setter Property="Height" Value="14" />
        <Setter Property="Width" Value="90" />
    </Style>

    <!-- _________________________ RecordFilterTreeItem [AS NA 11.2 Excel Style Filtering] _______________________________________ -->
    <DataTemplate x:Key="StringTemplate" DataType="{x:Type system:String}">
        <TextBlock Text="{Binding}" />
    </DataTemplate>

    <HierarchicalDataTemplate DataType="{x:Type igDp:RecordFilterTreeItem}" ItemsSource="{Binding Items}">
        <CheckBox Background="{Binding Path=Background, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" 
                      Foreground="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" 
                      Focusable="False" IsChecked="{Binding IsChecked, Mode=TwoWay}" Content="{Binding DisplayText}" 
                      ContentTemplate="{StaticResource StringTemplate}" />
    </HierarchicalDataTemplate>

    <Style x:Key="ClearSearchButtonStyle" TargetType="Button">
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.RecordFilterTreeSearchBorderBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.RecordFilterTreeClearSearchFillBrushKey}}" />
        <Setter Property="BorderThickness" Value="1,0,0,0" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <Grid Width="8" Height="7" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Path Width="8" Height="7" Fill="#99FFFFFF" Stretch="Fill"
                                      Data="M 3,1 C3,1 3,0 3,0 3,0 0,0 0,0 0,0 0,3 0,3 0,3 2,3 2,3 2,3 2,4 2,4 2,4 0,4 0,4 0,4 0,7 0,7 0,7 3,7 3,7 3,7 3,6 3,6 3,6 5,6 5,6 5,6 5,7 5,7 5,7 8,7 8,7 8,7 8,4 8,4 8,4 6,4 6,4 6,4 6,3 6,3 6,3 8,3 8,3 8,3 8,0 8,0 8,0 5,0 5,0 5,0 5,1 5,1 5,1 3,1 3,1 z" />
                            <Path x:Name="closeGlyph" Width="6" Height="5" Fill="#CC000000" Stretch="Fill"
                                      Data="M 0,0 C0,0 0,1 0,1 0,1 1,1 1,1 1,1 1,2 1,2 1,2 2,2 2,2 2,2 2,3 2,3 2,3 1,3 1,3 1,3 1,4 1,4 1,4 0,4 0,4 0,4 0,5 0,5 0,5 2,5 2,5 2,5 2,4 2,4 2,4 4,4 4,4 4,4 4,5 4,5 4,5 6,5 6,5 6,5 6,4 6,4 6,4 5,4 5,4 5,4 5,3 5,3 5,3 4,3 4,3 4,3 4,2 4,2 4,2 5,2 5,2 5,2 5,1 5,1 5,1 6,1 6,1 6,1 6,0 6,0 6,0 4,0 4,0 4,0 4,1 4,1 4,1 2,1 2,1 2,1 2,0 2,0 2,0 0,0 0,0 z" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.RecordFilterTreeClearSearchHotTrackFillBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FilterTreeScopesComboToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border x:Name="outerBorder" BorderThickness="1"
                                BorderBrush="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnNormalOuterBorderFillKey}}"
                                Background="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnNormalCenterFillKey}}">
                        <Border x:Name="innerBorder" BorderThickness="1" Padding="{TemplateBinding Padding}"
                                    BorderBrush="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnNormalInnerBorderFillKey}}">
                            <Path x:Name="glyph" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" Data="M0,0 L7,0 3.5,4z"
                                      Fill="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnGlyphNormalForegroundFillKey}}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderBrush" TargetName="outerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnPressedOuterBorderFillKey}}"/>
                            <Setter Property="Background" TargetName="outerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnPressedCenterFillKey}}"/>
                            <Setter Property="BorderBrush" TargetName="innerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnPressedInnerBorderFillKey}}"/>
                            <Setter Property="Fill" TargetName="glyph" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnGlyphHottrackForegroundFillKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="innerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnHottrackInnerBorderFillKey}}"/>
                            <Setter Property="Background" TargetName="outerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnHottrackCenterFillKey}}"/>
                            <Setter Property="BorderBrush" TargetName="outerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnHottrackOuterBorderFillKey}}"/>
                            <Setter Property="Fill" TargetName="glyph" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnGlyphHottrackForegroundFillKey}}"/>
                        </MultiTrigger>
                        <!-- when not dropped down but the combo has the keyboard focus the button should appear as it does when hottracked -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="innerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnHottrackInnerBorderFillKey}}"/>
                            <Setter Property="Background" TargetName="outerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnHottrackCenterFillKey}}"/>
                            <Setter Property="BorderBrush" TargetName="outerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnHottrackOuterBorderFillKey}}"/>
                            <Setter Property="Fill" TargetName="glyph" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnGlyphHottrackForegroundFillKey}}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FilterTreeScopesComboStyle" TargetType="ComboBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid Background="Transparent">
                        <ToggleButton x:Name="PART_DropDownButton" Grid.ColumnSpan="3" Style="{StaticResource FilterTreeScopesComboToggleButtonStyle}"
                                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" Focusable="False"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                            <themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                                <Border Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}">
                                    <ScrollViewer x:Name="ScrollViewer">
                                        <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </Border>
                            </themes:SystemDropShadowChrome>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
                            <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shdw" Property="Color" Value="#71000000" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ RecordFilterTreeControl [AS NA 11.2 Excel Style Filtering] _______________________________________ -->
    <Style TargetType="igDp:RecordFilterTreeControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igDp:RecordFilterTreeControl">
                    <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="True">
                        <controls:CardPanel>
                            <Grid x:Name="gridContent" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Border Grid.Row="0" BorderThickness="1" Margin="0,1,0,3"
                                            BorderBrush="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.RecordFilterTreeSearchBorderBrushKey}}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition />
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <TextBox x:Name="PART_SearchTextBox" Grid.Column="0" BorderThickness="0"
                                                     Text="{Binding Path=SearchText, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                        <TextBlock x:Name="txtSearchPrompt" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                                                       Grid.Column="0" Margin="2,0" Text="{TemplateBinding SearchTextPrompt}" Visibility="Collapsed" IsHitTestVisible="False" />
                                        <Grid Grid.Column="1">
                                            <Image x:Name="MagnifyingGlass" Margin="2,2,1,2" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center"
                                                       Source="..\..\Images\MagnifyingGlass.png" />
                                            <Button x:Name="btnClearSearchText" Content="X" Visibility="Hidden" Style="{StaticResource ClearSearchButtonStyle}"
                                                        Command="{Binding ClearSearchTextCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                                        </Grid>
                                        <ComboBox x:Name="PART_SearchScopeCombo" Grid.Column="2" IsEditable="False" Style="{StaticResource FilterTreeScopesComboStyle}"
                                                      SelectedValuePath="Value" Visibility="Collapsed"
                                                      SelectedValue="{Binding Path=SearchScope, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                      ItemsSource="{Binding Path=AvailableSearchScopes, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </Grid>
                                </Border>
                                <TreeView Grid.Row="1" x:Name="PART_Tree" ItemsSource="{Binding Nodes, RelativeSource={RelativeSource TemplatedParent}}"
                                              BorderThickness="1" BorderBrush="{DynamicResource {x:Static igDp:DataPresenterBrushKeys.MenuItemSeparatorBrushKey}}" />
                                <TextBlock x:Name="txtNoMatch" Grid.Row="1" Text="{Binding Path=Value, Source={x:Static igDp:ResourcesDataPresenter.RecordFilterTreeNoSearchMatches}}"
                                               Visibility="Collapsed" TextAlignment="Center" VerticalAlignment="Center" TextWrapping="Wrap" />
                                <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,15,0,3">
                                    <Button Content="{Binding Path=Value, Source={x:Static igDp:ResourcesDataPresenter.CustomFilterSelectionControlOkButtonLabel}}" MinWidth="73" Margin="0,0,11,0" Command="{Binding UpdateRecordFilterCommand, RelativeSource={RelativeSource TemplatedParent}}" MinHeight="0" Padding="2" Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=ButtonStyle}}"/>
                                    <Button Content="{Binding Path=Value, Source={x:Static igDp:ResourcesDataPresenter.CustomFilterSelectionControlCancelButtonLabel}}" MinWidth="73" Command="{Binding CancelChangesCommand, RelativeSource={RelativeSource TemplatedParent}}" MinHeight="0" Padding="2" Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDp:XamDataGrid}, ResourceId=ButtonStyle}}"/>
                                </StackPanel>
                            </Grid>
                            <ContentControl x:Name="LoadingIndicator" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </controls:CardPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsLoadingItems" Value="True">
                            <Setter TargetName="LoadingIndicator" Property="ContentTemplate" Value="{StaticResource BaseFilterDropDownLoadingTemplate}" />
                            <Setter TargetName="LoadingIndicator" Property="Visibility" Value="Visible" />
                            <Setter TargetName="gridContent" Property="Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger Property="HasSearchText" Value="True">
                            <Setter TargetName="btnClearSearchText" Property="Visibility" Value="Visible" />
                            <Setter TargetName="MagnifyingGlass" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="HasEmptySearchResults" Value="True">
                            <Setter TargetName="PART_Tree" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="txtNoMatch" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="HasMultipleSearchScopes" Value="True">
                            <Setter TargetName="PART_SearchScopeCombo" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_SearchTextBox" Property="IsFocused" Value="False" />
                                <Condition Property="HasSearchText" Value="False" />
                            </MultiTrigger.Conditions>
                            <!-- Show the watermark when there is no search text and the textbox isn't focused -->
                            <Setter TargetName="txtSearchPrompt" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>