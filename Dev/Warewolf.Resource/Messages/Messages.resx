<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Test_NothingToAssert" xml:space="preserve">
    <value>Invalid: Nothing to assert.</value>
  </data>
  <data name="Test_FailureMessage_Choose" xml:space="preserve">
    <value>Failed: Assert Choose. Expected '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsError" xml:space="preserve">
    <value>Failed: Assert Is Error. Expected '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsNotError" xml:space="preserve">
    <value>Failed: Assert Is Not Error. Expected '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsNull" xml:space="preserve">
    <value>Failed: Assert Is Null. Expected '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsNotNull" xml:space="preserve">
    <value>Failed: Assert Is Not Null. Expected '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsNumeric" xml:space="preserve">
    <value>Failed: Assert Is Numeric. Expected '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsNotNumeric" xml:space="preserve">
    <value>Failed: Assert Is Not Numeric. Expected '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsText" xml:space="preserve">
    <value>Failed: Assert Is Text. Expected '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsNotText" xml:space="preserve">
    <value>Failed: Assert Is Not Text. Expected '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsAlphanumeric" xml:space="preserve">
    <value>Failed: Assert Is Alphanumeric. Expected '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsNotAlphanumeric" xml:space="preserve">
    <value>Failed: Assert Is Not Alphanumeric. Expected '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsXML" xml:space="preserve">
    <value>Failed: Assert Is XML. Expected '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsNotXML" xml:space="preserve">
    <value>Failed: Assert Is Not XML. Expected '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsDate" xml:space="preserve">
    <value>Failed: Assert Is Date. Expected '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsNotDate" xml:space="preserve">
    <value>Failed: Assert Is Not Date. Expected '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsEmail" xml:space="preserve">
    <value>Failed: Assert Is Email. Expected '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsNotEmail" xml:space="preserve">
    <value>Failed: Assert Is Not Email. Expected '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsRegEx" xml:space="preserve">
    <value>Failed: Assert Is Reg Ex. Expected to match RegEx '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_NotRegEx" xml:space="preserve">
    <value>Failed: Assert Not Reg Ex. Expected Not to match RegEx '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_Equals" xml:space="preserve">
    <value>Failed: Assert Equal. Expected Equal To '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_Error" xml:space="preserve">
    <value>Failed: Expected Error containing '{0}' but got '{1}'</value>
  </data>
  <data name="Test_FailureMessage_IsNotEqual" xml:space="preserve">
    <value>Failed: Assert Is Not Equal. Expected Not Equal To '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsLessThan" xml:space="preserve">
    <value>Failed: Assert Is Less Than. Expected Less Than '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsLessThanOrEqual" xml:space="preserve">
    <value>Failed: Assert Is Less Than Or Equal. Expected Less Than or Equal to '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsGreaterThan" xml:space="preserve">
    <value>Failed: Assert Is Greater Than. Expected Greater Than '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsGreaterThanOrEqual" xml:space="preserve">
    <value>Failed: Assert Is Greater Than Or Equal. Expected Greater Than or Equal to '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsContains" xml:space="preserve">
    <value>Failed: Assert Is Contains. Expected Contains '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_NotContain" xml:space="preserve">
    <value>Failed: Assert Not Contain. Expected Not Contain '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsEndsWith" xml:space="preserve">
    <value>Failed: Assert Is Ends With. Expected End With '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_NotEndsWith" xml:space="preserve">
    <value>Failed: Assert Not Ends With. Expected Not End With '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsStartsWith" xml:space="preserve">
    <value>Failed: Assert Is Starts With. Expected Start With '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_NotStartsWith" xml:space="preserve">
    <value>Failed: Assert Not Starts With. Expected Not Start With '{0}' for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsBetween" xml:space="preserve">
    <value>Failed: Assert Is Between. Expected '{1}' to be Between '{0}' and '{3}' but got {2}</value>
  </data>
  <data name="Test_FailureMessage_NotBetween" xml:space="preserve">
    <value>Failed: Assert Is Between. Expected '{1}' Not to be Between '{0}' and '{3}' but got {2}</value>
  </data>
  <data name="Test_FailureMessage_IsBinary" xml:space="preserve">
    <value>Failed: Assert Is Binary. Expected Binary value for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsNotBinary" xml:space="preserve">
    <value>Failed: Assert Is Not Binary. Expected Not Binary value for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsHex" xml:space="preserve">
    <value>Failed: Assert Is Hex. Expected Hex value for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsNotHex" xml:space="preserve">
    <value>Failed: Assert Is Not Hex. Expected Not Hex value for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsBase64" xml:space="preserve">
    <value>Failed: Assert Is Base64. Expected Base64 value for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureMessage_IsNotBase64" xml:space="preserve">
    <value>Failed: Assert Is Not Base64. Expected Not Base64 value for '{1}' but got '{2}'</value>
  </data>
  <data name="Test_FailureResult" xml:space="preserve">
    <value>Failed</value>
  </data>
  <data name="Test_InvalidResult" xml:space="preserve">
    <value>Invalid</value>
  </data>
  <data name="Test_PassedResult" xml:space="preserve">
    <value>Passed</value>
  </data>
  <data name="Test_PendingResult" xml:space="preserve">
    <value>Pending</value>
  </data>
  <data name="Test_ResourceDeleteResult" xml:space="preserve">
    <value>ResourceDelete</value>
  </data>
  <data name="Test_ResourcpathUpdatedResult" xml:space="preserve">
    <value>ResourcpathUpdated</value>
  </data>
  <data name="Test_FailureMessage_NoErrorExpected" xml:space="preserve">
    <value>Failed: Expected no error but got '{0}'</value>
  </data>
  <data name="Test_NotAuthorizedMsg" xml:space="preserve">
    <value>Failed: The user running the test is not authorized to execute resource {0}.</value>
  </data>
</root>