// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.Studio.UISpecs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class StudioUISpecsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "StudioUISpecs.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "StudioUISpecs", "In order to find studio UI bugs\r\nAs a user\r\nI want to have a good UX", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "StudioUISpecs")))
            {
                Warewolf.Studio.UISpecs.StudioUISpecsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox multiassign onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxMultiassignOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox multiassign onto a new workflow", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 14
 testRunner.When("The \'Drag_Toolbox_MultiAssign_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
 testRunner.Then("The \'Assert_MultiAssign_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 20
 testRunner.When("The \'Open_Assign_Tool_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.Then("The \'Assert_Assign_Large_View_Exists_OnDesignSurface\' recorded action is performe" +
                    "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 26
 testRunner.When("The \'Open_Assign_Tool_Qvi_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.Then("The \'Assert_Assign_QVI_Large_View_Exists_OnDesignSurface\' recorded action is perf" +
                    "ormed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox decision onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxDecisionOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox decision onto a new workflow", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 37
 testRunner.When("The \'Drag_Toolbox_Decision_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
 testRunner.Then("The \'Assert_Decision_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox sequence onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxSequenceOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox sequence onto a new workflow", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line 41
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 48
 testRunner.When("The \'Drag_Toolbox_Sequence_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
 testRunner.Then("The \'Assert_Sequence_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox switch onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxSwitchOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox switch onto a new workflow", ((string[])(null)));
#line 51
this.ScenarioSetup(scenarioInfo);
#line 52
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 53
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 59
 testRunner.When("The \'Drag_Toolbox_Switch_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
 testRunner.Then("The \'Assert_Switch_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Base_Conversion onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxBase_ConversionOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Base_Conversion onto a new workflow", ((string[])(null)));
#line 62
this.ScenarioSetup(scenarioInfo);
#line 63
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 64
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 70
 testRunner.When("The \'Drag_Toolbox_Base_Conversion_Onto_DesignSurface\' recorded action is performe" +
                    "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 71
 testRunner.Then("The \'Assert_Base_Conversion_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 76
 testRunner.When("The \'Open_Base_Conversion_Tool_Qvi_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
 testRunner.Then("The \'Assert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurface\' recorded actio" +
                    "n is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox MySql Tool onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxMySqlToolOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox MySql Tool onto a new workflow", ((string[])(null)));
#line 80
this.ScenarioSetup(scenarioInfo);
#line 81
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 82
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 83
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 88
 testRunner.When("The \'Drag_Toolbox_MySql_Database_Onto_DesignSurface\' recorded action is performed" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 89
 testRunner.Then("The \'Assert_Mysql_Database_Large_View_Exists_OnDesignSurface\' recorded action is " +
                    "performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 94
 testRunner.When("The \'Open_MySql_Database_Tool_Small_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox MySql Tool onto a new workflow2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxMySqlToolOntoANewWorkflow2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox MySql Tool onto a new workflow2", ((string[])(null)));
#line 96
this.ScenarioSetup(scenarioInfo);
#line 97
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 98
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 104
 testRunner.When("The \'Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurface\' recorded action is performe" +
                    "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 105
 testRunner.Then("The \'Assert_SQL_Server_Database_Large_View_Exists_OnDesignSurface\' recorded actio" +
                    "n is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 110
 testRunner.When("The \'Open_Sql_Server_Tool_small_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Case_Conversion onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxCase_ConversionOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Case_Conversion onto a new workflow", ((string[])(null)));
#line 112
this.ScenarioSetup(scenarioInfo);
#line 113
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 114
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 115
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 120
 testRunner.When("The \'Drag_Toolbox_Case_Conversion_Onto_DesignSurface\' recorded action is performe" +
                    "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 121
 testRunner.Then("The \'Assert_Case_Conversion_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 126
 testRunner.When("The \'Open_Case_Conversion_Tool_Qvi_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 127
 testRunner.Then("The \'Assert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurface\' recorded actio" +
                    "n is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Data_Merge onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxData_MergeOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Data_Merge onto a new workflow", ((string[])(null)));
#line 129
this.ScenarioSetup(scenarioInfo);
#line 130
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 131
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 132
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 137
 testRunner.When("The \'Drag_Toolbox_Data_Merge_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 138
 testRunner.Then("The \'Assert_Data_Merge_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 143
 testRunner.When("The \'Open_Data_Merge_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 144
 testRunner.Then("The \'Assert_Data_Merge_Large_View_Exists_OnDesignSurface\' recorded action is perf" +
                    "ormed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 149
 testRunner.When("The \'Open_Data_Merge_Tool_Qvi_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 150
 testRunner.Then("The \'Assert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurface\' recorded action is " +
                    "performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Data_Split onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxData_SplitOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Data_Split onto a new workflow", ((string[])(null)));
#line 152
this.ScenarioSetup(scenarioInfo);
#line 153
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 154
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 155
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 160
 testRunner.When("The \'Drag_Toolbox_Data_Split_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 161
 testRunner.Then("The \'Assert_Data_Split_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 166
 testRunner.When("The \'Open_Data_Split_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 167
 testRunner.Then("The \'Assert_Data_Split_Large_View_Exists_OnDesignSurface\' recorded action is perf" +
                    "ormed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 172
 testRunner.When("The \'Open_Data_Split_Tool_Qvi_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 173
 testRunner.Then("The \'Assert_Data_Split_Qvi_Large_View_Exists_OnDesignSurface\' recorded action is " +
                    "performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Find_Index onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxFind_IndexOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Find_Index onto a new workflow", ((string[])(null)));
#line 175
this.ScenarioSetup(scenarioInfo);
#line 176
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 177
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 178
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 183
 testRunner.When("The \'Drag_Toolbox_Find_Index_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 184
 testRunner.Then("The \'Assert_Find_Index_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Replace onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxReplaceOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Replace onto a new workflow", ((string[])(null)));
#line 186
this.ScenarioSetup(scenarioInfo);
#line 187
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 188
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 189
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 194
 testRunner.When("The \'Drag_Toolbox_Replace_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 195
 testRunner.Then("The \'Assert_Replace_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Copy_Path onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxCopy_PathOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Copy_Path onto a new workflow", ((string[])(null)));
#line 197
this.ScenarioSetup(scenarioInfo);
#line 198
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 199
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 200
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 205
 testRunner.When("The \'Drag_Toolbox_Copy_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 206
 testRunner.Then("The \'Assert_Copy_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 211
 testRunner.When("The \'Open_Copy_Tool_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 212
 testRunner.Then("The \'Assert_Copy_Large_View_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Create_Path onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxCreate_PathOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Create_Path onto a new workflow", ((string[])(null)));
#line 214
this.ScenarioSetup(scenarioInfo);
#line 215
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 216
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 217
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 222
 testRunner.When("The \'Drag_Toolbox_Create_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 223
 testRunner.Then("The \'Assert_Create_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 228
 testRunner.When("The \'Open_Create_Tool_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 229
 testRunner.Then("The \'Assert_Create_Path_Large_View_Exists_OnDesignSurface\' recorded action is per" +
                    "formed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Delete_Path onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxDelete_PathOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Delete_Path onto a new workflow", ((string[])(null)));
#line 231
this.ScenarioSetup(scenarioInfo);
#line 232
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 233
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 234
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 239
 testRunner.When("The \'Drag_Toolbox_Delete_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 240
 testRunner.Then("The \'Assert_Delete_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Read_File onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxRead_FileOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Read_File onto a new workflow", ((string[])(null)));
#line 242
this.ScenarioSetup(scenarioInfo);
#line 243
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 244
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 245
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 250
 testRunner.When("The \'Drag_Toolbox_Read_File_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 251
 testRunner.Then("The \'Assert_Read_File_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 256
 testRunner.When("The \'Open_Read_File_Tool_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 257
 testRunner.Then("The \'Assert_Read_File_Large_View_Exists_OnDesignSurface\' recorded action is perfo" +
                    "rmed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Read_Folder onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxRead_FolderOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Read_Folder onto a new workflow", ((string[])(null)));
#line 259
this.ScenarioSetup(scenarioInfo);
#line 260
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 261
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 262
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 267
 testRunner.When("The \'Drag_Toolbox_Read_Folder_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 268
 testRunner.Then("The \'Assert_Read_Folder_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 273
 testRunner.When("The \'Open_Read_Folder_Tool_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 274
 testRunner.Then("The \'Assert_Read_Folder_Large_View_Exists_OnDesignSurface\' recorded action is per" +
                    "formed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Rename_Folder onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxRename_FolderOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Rename_Folder onto a new workflow", ((string[])(null)));
#line 276
this.ScenarioSetup(scenarioInfo);
#line 277
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 278
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 279
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 284
 testRunner.When("The \'Drag_Toolbox_Rename_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 285
 testRunner.Then("The \'Assert_Rename_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 290
 testRunner.When("The \'Open_Rename_Tool_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 291
 testRunner.Then("The \'Assert_Rename_Large_View_Exists_OnDesignSurface\' recorded action is performe" +
                    "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Unzip onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxUnzipOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Unzip onto a new workflow", ((string[])(null)));
#line 293
this.ScenarioSetup(scenarioInfo);
#line 294
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 295
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 296
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 301
 testRunner.When("The \'Drag_Toolbox_Unzip_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 302
 testRunner.Then("The \'Assert_Unzip_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 307
 testRunner.When("The \'Open_Unzip_Tool_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 308
 testRunner.Then("The \'Assert_Unzip_Large_View_Exists_OnDesignSurface\' recorded action is performed" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Write_File onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxWrite_FileOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Write_File onto a new workflow", ((string[])(null)));
#line 310
this.ScenarioSetup(scenarioInfo);
#line 311
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 312
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 313
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 318
 testRunner.When("The \'Drag_Toolbox_Write_File_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 319
 testRunner.Then("The \'Assert_Write_File_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 324
 testRunner.When("The \'Open_Write_File_Tool_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 325
 testRunner.Then("The \'Assert_Write_File_Large_View_Exists_OnDesignSurface\' recorded action is perf" +
                    "ormed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Zip onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxZipOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Zip onto a new workflow", ((string[])(null)));
#line 327
this.ScenarioSetup(scenarioInfo);
#line 328
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 329
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 330
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 335
 testRunner.When("The \'Drag_Toolbox_Zip_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 336
 testRunner.Then("The \'Assert_Zip_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 341
 testRunner.When("The \'Open_Zip_Tool_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 342
 testRunner.Then("The \'Assert_Zip_Large_View_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox For_Each onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxFor_EachOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox For_Each onto a new workflow", ((string[])(null)));
#line 344
this.ScenarioSetup(scenarioInfo);
#line 345
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 346
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 347
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 352
 testRunner.When("The \'Drag_Toolbox_For_Each_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 353
 testRunner.Then("The \'Assert_For_Each_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Format_Number onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxFormat_NumberOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Format_Number onto a new workflow", ((string[])(null)));
#line 355
this.ScenarioSetup(scenarioInfo);
#line 356
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 357
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 358
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 363
 testRunner.When("The \'Drag_Toolbox_Format_Number_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 364
 testRunner.Then("The \'Assert_Format_Number_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Length onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxLengthOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Length onto a new workflow", ((string[])(null)));
#line 366
this.ScenarioSetup(scenarioInfo);
#line 367
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 368
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 369
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 374
 testRunner.When("The \'Drag_Toolbox_Length_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 375
 testRunner.Then("The \'Assert_Length_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Random onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxRandomOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Random onto a new workflow", ((string[])(null)));
#line 377
this.ScenarioSetup(scenarioInfo);
#line 378
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 379
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 380
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 385
 testRunner.When("The \'Drag_Toolbox_Random_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 386
 testRunner.Then("The \'Assert_Random_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Script onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxScriptOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Script onto a new workflow", ((string[])(null)));
#line 388
this.ScenarioSetup(scenarioInfo);
#line 389
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 390
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 391
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 396
 testRunner.When("The \'Drag_Toolbox_Script_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 397
 testRunner.Then("The \'Assert_Script_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Sharepoint_Create onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxSharepoint_CreateOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Sharepoint_Create onto a new workflow", ((string[])(null)));
#line 399
this.ScenarioSetup(scenarioInfo);
#line 400
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 401
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 402
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 407
 testRunner.When("The \'Drag_Toolbox_Sharepoint_Create_Onto_DesignSurface\' recorded action is perfor" +
                    "med", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 408
 testRunner.Then("The \'Assert_Sharepoint_Create_Exists_OnDesignSurface\' recorded action is performe" +
                    "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 413
 testRunner.When("The \'Open_Sharepoint_Create_Tool_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 414
 testRunner.Then("The \'Assert_Sharepoint_Create_Large_View_Exists_OnDesignSurface\' recorded action " +
                    "is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Sharepoint_Delete onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxSharepoint_DeleteOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Sharepoint_Delete onto a new workflow", ((string[])(null)));
#line 416
this.ScenarioSetup(scenarioInfo);
#line 417
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 418
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 419
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 424
 testRunner.When("The \'Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurface\' recorded action is perfor" +
                    "med", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 425
 testRunner.Then("The \'Assert_Sharepoint_Delete_Exists_OnDesignSurface\' recorded action is performe" +
                    "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 430
 testRunner.When("The \'Open_Sharepoint_Delete_Tool_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 431
 testRunner.Then("The \'Assert_Sharepoint_Delete_Large_View_Exists_OnDesignSurface\' recorded action " +
                    "is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Sharepoint_Read onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxSharepoint_ReadOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Sharepoint_Read onto a new workflow", ((string[])(null)));
#line 433
this.ScenarioSetup(scenarioInfo);
#line 434
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 435
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 436
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 441
 testRunner.When("The \'Drag_Toolbox_Sharepoint_Read_Onto_DesignSurface\' recorded action is performe" +
                    "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 442
 testRunner.Then("The \'Assert_Sharepoint_Read_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 447
 testRunner.When("The \'Open_Sharepoint_Read_Tool_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 448
 testRunner.Then("The \'Assert_Sharepoint_Read_Large_View_Exists_OnDesignSurface\' recorded action is" +
                    " performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Sharepoint_Update onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxSharepoint_UpdateOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Sharepoint_Update onto a new workflow", ((string[])(null)));
#line 450
this.ScenarioSetup(scenarioInfo);
#line 451
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 452
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 453
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 458
 testRunner.When("The \'Drag_Toolbox_Sharepoint_Update_Onto_DesignSurface\' recorded action is perfor" +
                    "med", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 459
 testRunner.Then("The \'Assert_Sharepoint_Update_Exists_OnDesignSurface\' recorded action is performe" +
                    "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 464
 testRunner.When("The \'Open_Sharepoint_Update_Tool_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 465
 testRunner.Then("The \'Assert_Sharepoint_Update_Large_View_Exists_OnDesignSurface\' recorded action " +
                    "is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Sort_Record onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxSort_RecordOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Sort_Record onto a new workflow", ((string[])(null)));
#line 467
this.ScenarioSetup(scenarioInfo);
#line 468
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 469
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 470
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 475
 testRunner.When("The \'Drag_Toolbox_Sort_Record_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 476
 testRunner.Then("The \'Assert_Sort_Records_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox SQL_Bulk_Insert onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxSQL_Bulk_InsertOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox SQL_Bulk_Insert onto a new workflow", ((string[])(null)));
#line 478
this.ScenarioSetup(scenarioInfo);
#line 479
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 480
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 481
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 486
 testRunner.When("The \'Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurface\' recorded action is performe" +
                    "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 487
 testRunner.Then("The \'Assert_Sql_Bulk_insert_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 492
 testRunner.When("The \'Open_SQL_Bulk_Insert_Tool_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 493
 testRunner.Then("The \'Assert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurface\' recorded action is" +
                    " performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 498
 testRunner.When("The \'Open_SQL_Bulk_Insert_Tool_Qvi_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 499
 testRunner.Then("The \'Assert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurface\' recorded action is perfor" +
                    "med", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox System_Information onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxSystem_InformationOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox System_Information onto a new workflow", ((string[])(null)));
#line 501
this.ScenarioSetup(scenarioInfo);
#line 502
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 503
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 504
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 509
 testRunner.When("The \'Drag_Toolbox_System_Information_Onto_DesignSurface\' recorded action is perfo" +
                    "rmed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 510
 testRunner.Then("The \'Assert_System_information_Exists_OnDesignSurface\' recorded action is perform" +
                    "ed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 515
 testRunner.When("The \'Open_System_Information_Tool_Qvi_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 516
 testRunner.Then("The \'Assert_System_Info_Qvi_Large_View_Exists_OnDesignSurface\' recorded action is" +
                    " performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Unique_Records onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxUnique_RecordsOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Unique_Records onto a new workflow", ((string[])(null)));
#line 518
this.ScenarioSetup(scenarioInfo);
#line 519
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 520
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 521
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 526
 testRunner.When("The \'Drag_Toolbox_Unique_Records_Onto_DesignSurface\' recorded action is performed" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 527
 testRunner.Then("The \'Assert_Unique_Records_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Web_Request onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxWeb_RequestOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Web_Request onto a new workflow", ((string[])(null)));
#line 529
this.ScenarioSetup(scenarioInfo);
#line 530
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 531
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 532
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 537
 testRunner.When("The \'Drag_Toolbox_Web_Request_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 538
 testRunner.Then("The \'Assert_Web_Request_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 543
 testRunner.When("The \'Open_Web_Request_Tool_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 544
 testRunner.Then("The \'Assert_Web_Request_Large_View_Exists_OnDesignSurface\' recorded action is per" +
                    "formed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox XPath onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxXPathOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox XPath onto a new workflow", ((string[])(null)));
#line 546
this.ScenarioSetup(scenarioInfo);
#line 547
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 548
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 549
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 554
 testRunner.When("The \'Drag_Toolbox_XPath_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 555
 testRunner.Then("The \'Assert_XPath_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 560
 testRunner.When("The \'Open_Xpath_Tool_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 561
 testRunner.Then("The \'Assert_Xpath_Large_View_Exists_OnDesignSurface\' recorded action is performed" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 566
 testRunner.When("The \'Open_Xpath_Tool_Qvi_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 567
 testRunner.Then("The \'Assert_Xpath_Qvi_Large_View_Exists_OnDesignSurface\' recorded action is perfo" +
                    "rmed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Calculate onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxCalculateOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Calculate onto a new workflow", ((string[])(null)));
#line 569
this.ScenarioSetup(scenarioInfo);
#line 570
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 571
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 572
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 577
 testRunner.When("The \'Drag_Toolbox_Calculate_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 578
 testRunner.Then("The \'Assert_Calculate_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox CMD_Line onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxCMD_LineOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox CMD_Line onto a new workflow", ((string[])(null)));
#line 580
this.ScenarioSetup(scenarioInfo);
#line 581
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 582
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 583
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 588
 testRunner.When("The \'Drag_Toolbox_CMD_Line_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 589
 testRunner.Then("The \'Assert_CMD_Line_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 594
 testRunner.When("The \'Open_CMD_Line_Tool_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 595
 testRunner.Then("The \'Assert_CMD_Line_Large_View_Exists_OnDesignSurface\' recorded action is perfor" +
                    "med", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Comment onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxCommentOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Comment onto a new workflow", ((string[])(null)));
#line 597
this.ScenarioSetup(scenarioInfo);
#line 598
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 599
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 600
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 605
 testRunner.When("The \'Drag_Toolbox_Comment_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 606
 testRunner.Then("The \'Assert_Comment_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Count_Records onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxCount_RecordsOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Count_Records onto a new workflow", ((string[])(null)));
#line 608
this.ScenarioSetup(scenarioInfo);
#line 609
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 610
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 611
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 616
 testRunner.When("The \'Drag_Toolbox_Count_Records_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 617
 testRunner.Then("The \'Assert_Count_Records_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox create JSON onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxCreateJSONOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox create JSON onto a new workflow", ((string[])(null)));
#line 619
this.ScenarioSetup(scenarioInfo);
#line 620
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 621
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 622
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 627
 testRunner.When("The \'Drag_Toolbox_JSON_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 628
 testRunner.Then("The \'Assert_Create_JSON_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 633
 testRunner.When("The \'Open_Json_Tool_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 634
 testRunner.Then("The \'Assert_Json_Large_View_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 639
 testRunner.When("The \'Open_Json_Tool_Qvi_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 640
 testRunner.Then("The \'Assert_Json_Qvi_Large_View_Exists_OnDesignSurface\' recorded action is perfor" +
                    "med", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Delete_Record onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxDelete_RecordOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Delete_Record onto a new workflow", ((string[])(null)));
#line 642
this.ScenarioSetup(scenarioInfo);
#line 643
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 644
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 645
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 650
 testRunner.When("The \'Drag_Toolbox_Delete_Record_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 651
 testRunner.Then("The \'Assert_Delete_Record_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Date_And_Time onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxDate_And_TimeOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Date_And_Time onto a new workflow", ((string[])(null)));
#line 653
this.ScenarioSetup(scenarioInfo);
#line 654
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 655
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 656
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 661
 testRunner.When("The \'Drag_Toolbox_Date_And_Time_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 662
 testRunner.Then("The \'Assert_Date_And_Time_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox DateTime_Difference onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxDateTime_DifferenceOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox DateTime_Difference onto a new workflow", ((string[])(null)));
#line 664
this.ScenarioSetup(scenarioInfo);
#line 665
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 666
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 667
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 672
 testRunner.When("The \'Drag_Toolbox_DateTime_Difference_Onto_DesignSurface\' recorded action is perf" +
                    "ormed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 673
 testRunner.Then("The \'Assert_DateTime_Difference_Conversion_Exists_OnDesignSurface\' recorded actio" +
                    "n is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Email onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxEmailOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Email onto a new workflow", ((string[])(null)));
#line 675
this.ScenarioSetup(scenarioInfo);
#line 676
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 677
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 678
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 683
 testRunner.When("The \'Drag_Toolbox_Email_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 684
 testRunner.Then("The \'Assert_Email_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 689
 testRunner.When("The \'Open_Email_Tool_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 690
 testRunner.Then("The \'Assert_Email_Large_View_Exists_OnDesignSurface\' recorded action is performed" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Service Picker onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxServicePickerOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Service Picker onto a new workflow", ((string[])(null)));
#line 692
this.ScenarioSetup(scenarioInfo);
#line 693
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 694
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 695
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 700
 testRunner.When("The \'Drag_Toolbox_Service_Picker_Onto_DesignSurface\' recorded action is performed" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 701
 testRunner.Then("The \'Assert_Service_Picker_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Dropbox onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxDropboxOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Dropbox onto a new workflow", ((string[])(null)));
#line 703
this.ScenarioSetup(scenarioInfo);
#line 704
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 705
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 706
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 711
 testRunner.When("The \'Drag_Toolbox_Dropbox_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 712
 testRunner.Then("The \'Assert_Dropbox_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Find_Record_Index onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxFind_Record_IndexOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Find_Record_Index onto a new workflow", ((string[])(null)));
#line 714
this.ScenarioSetup(scenarioInfo);
#line 715
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 716
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 717
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 722
 testRunner.When("The \'Drag_Toolbox_Find_Record_Index_Onto_DesignSurface\' recorded action is perfor" +
                    "med", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 723
 testRunner.Then("The \'Assert_Find_Record_Index_Exists_OnDesignSurface\' recorded action is performe" +
                    "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 728
 testRunner.When("The \'Open_Find_Record_Index_Tool_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 729
 testRunner.Then("The \'Assert_Find_Record_index_Large_View_Exists_OnDesignSurface\' recorded action " +
                    "is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Drag toolbox Move onto a new workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DragToolboxMoveOntoANewWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Drag toolbox Move onto a new workflow", ((string[])(null)));
#line 731
this.ScenarioSetup(scenarioInfo);
#line 732
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 733
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 734
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 739
 testRunner.When("The \'Drag_Toolbox_Move_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 740
 testRunner.Then("The \'Assert_Move_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 745
 testRunner.When("The \'Open_Move_Tool_Large_View\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 746
 testRunner.Then("The \'Assert_Move_Large_View_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Variable List")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void VariableList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Variable List", ((string[])(null)));
#line 750
this.ScenarioSetup(scenarioInfo);
#line 751
 testRunner.Given("The \'Assert_VariableList_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 752
 testRunner.Given("The \'Assert_VariableList_DeleteButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 753
 testRunner.Given("The \'Assert_VariableList_Recordset_ChildTextBox_Exists\' recorded action is perfor" +
                    "med", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 754
 testRunner.Given("The \'Assert_VariableList_RecordsetInput_CheckBox_Exists\' recorded action is perfo" +
                    "rmed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 755
 testRunner.Given("The \'Assert_VariableList_RecordsetInput_ChildCheckBox_Exists\' recorded action is " +
                    "performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 756
 testRunner.Given("The \'Assert_VariableList_RecordsetItem_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 757
 testRunner.Given("The \'Assert_VariableList_RecordsetOutput_CheckBox_Exists\' recorded action is perf" +
                    "ormed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 758
 testRunner.Given("The \'Assert_VariableList_RecordsetOutput_ChildCheckBox_Exists\' recorded action is" +
                    " performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 759
 testRunner.Given("The \'Assert_VariableList_RecordsetTextBox_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 760
 testRunner.Given("The \'Assert_VariableList_SortButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 761
 testRunner.Given("The \'Assert_VariableList_VariableInput_CheckBox_Exists\' recorded action is perfor" +
                    "med", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 762
 testRunner.Given("The \'Assert_VariableList_VariableItem_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 763
 testRunner.Given("The \'Assert_VariableList_VariableOutput_CheckBox_Exists\' recorded action is perfo" +
                    "rmed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 764
 testRunner.Given("The \'Assert_VariableList_VariableTextBox_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 765
 testRunner.Given("The \'Assert_VariableList_DataInputTree_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Toolbox")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void Toolbox()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Toolbox", ((string[])(null)));
#line 768
this.ScenarioSetup(scenarioInfo);
#line 769
 testRunner.Given("The \'Assert_Toolbox_FilterTextbox_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 770
 testRunner.Given("The \'Assert_Toolbox_RefreshButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Connect Control Exists")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void ConnectControlExists()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Connect Control Exists", ((string[])(null)));
#line 773
this.ScenarioSetup(scenarioInfo);
#line 774
 testRunner.Given("The \'Assert_Connect_Control_Exists_InExplorer\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 775
 testRunner.Given("The \'Assert_Connect_ConnectControl_Button_Exists_InExplorer\' recorded action is p" +
                    "erformed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 776
 testRunner.Given("The \'Assert_Explorer_Edit_Connect_Control_Button_Exists\' recorded action is perfo" +
                    "rmed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Main Menu")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void MainMenu()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Main Menu", ((string[])(null)));
#line 779
this.ScenarioSetup(scenarioInfo);
#line 780
 testRunner.Given("The \'Assert_Save_Button_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 781
 testRunner.When("The \'Click_Save_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 782
 testRunner.Then("The \'Assert_New_Version_Download_Button_Exists_OnDesignSurface\' recorded action i" +
                    "s performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 785
 testRunner.Given("The \'Assert_Settings_Button_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 786
 testRunner.When("The \'Click_Settings_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 790
 testRunner.Given("The \'Assert_Debug_Button_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 791
 testRunner.When("The \'Click_Debug_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 795
 testRunner.Given("The \'Assert_Scheduler_Button_Exists_OnDesignSurface\' recorded action is performed" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 796
 testRunner.When("The \'Click_Scheduler_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 800
 testRunner.Given("The \'Assert_Deploy_Button_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 801
 testRunner.When("The \'Click_Deploy_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 805
 testRunner.Given("The \'Assert_Knowledge_Base_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 806
 testRunner.When("The \'Click_Knowledge_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 810
 testRunner.Given("The \'Assert_Lock_Button_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 811
 testRunner.When("The \'Click_Unlock_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 815
 testRunner.Given("The \'Assert_Database_Source_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 816
 testRunner.When("The \'Click_NewDatabaseSource_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 820
 testRunner.Given("The \'Assert_Plugin_Source_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 821
 testRunner.When("The \'Click_NewPluginSource_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 825
 testRunner.Given("The \'Assert_Web_Source_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 826
 testRunner.When("The \'Click_NewWebSource_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Save Dialog")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void SaveDialog()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Save Dialog", ((string[])(null)));
#line 830
this.ScenarioSetup(scenarioInfo);
#line 831
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 832
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 833
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 838
 testRunner.Given("The \'Assert_Save_Button_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 839
 testRunner.When("The \'Click_Save_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 840
 testRunner.Then("The \'Assert_SaveDialog_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 841
 testRunner.Then("The \'Assert_SaveDialog_CancelButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 842
 testRunner.Then("The \'Assert_SaveDialog_ErrorLabel_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 843
 testRunner.Then("The \'Assert_SaveDialog_ExplorerTree_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 844
 testRunner.Then("The \'Assert_SaveDialog_ExplorerTreeItem_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 845
 testRunner.Then("The \'Assert_SaveDialog_ExplorerView_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 846
 testRunner.Then("The \'Assert_SaveDialog_FilterTextbox_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 847
 testRunner.Then("The \'Assert_SaveDialog_NameLabel_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 848
 testRunner.Then("The \'Assert_SaveDialog_RefreshButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 849
 testRunner.Then("The \'Assert_SaveDialog_SaveButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 850
 testRunner.Then("The \'Assert_SaveDialog_ServiceName_Textbox_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 851
 testRunner.Then("The \'Assert_SaveDialog_WorkspaceName_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 856
 testRunner.When("The \'Click_SaveDialog_CancelButton\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 857
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Debug Output Window")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DebugOutputWindow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Debug Output Window", ((string[])(null)));
#line 860
this.ScenarioSetup(scenarioInfo);
#line 861
 testRunner.Given("The \'DebugOutput_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 862
 testRunner.Given("The \'DebugOutput_ExpandCollapseButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 863
 testRunner.Given("The \'DebugOutput_FilterTextbox_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 864
 testRunner.Given("The \'DebugOutput_ResultsTree_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 865
 testRunner.Given("The \'DebugOutput_SettingsButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 866
 testRunner.When("The \'Click_ExpandAndStepIn_NestedWorkflow\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 872
 testRunner.When("The \'Click_Cell_Highlights_Workflow_OnDesignSurface\' recorded action is performed" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 878
 testRunner.When("The \'Click_Nested_Workflow_Name\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Connectors and Sources cannot be dragged onto the design surface")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void ConnectorsAndSourcesCannotBeDraggedOntoTheDesignSurface()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Connectors and Sources cannot be dragged onto the design surface", ((string[])(null)));
#line 882
this.ScenarioSetup(scenarioInfo);
#line 883
 testRunner.When("The \'Drag_Database_Connector_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 889
 testRunner.When("The \'Drag_Plugin_Connector_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 895
 testRunner.When("The \'Drag_Web_Connector_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 901
 testRunner.When("The \'Drag_Sharepoint_Source_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 907
 testRunner.When("The \'Drag_Server_Source_Onto_DesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Scheduler")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void Scheduler()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scheduler", ((string[])(null)));
#line 910
this.ScenarioSetup(scenarioInfo);
#line 911
 testRunner.Given("The \'Assert_Scheduler_Button_Exists_OnDesignSurface\' recorded action is performed" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 912
 testRunner.When("The \'Click_Scheduler_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 913
 testRunner.Then("The \'Assert_Scheduler_CreateNewTask_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 918
 testRunner.When("The \'Click_Scheduler_Create_New_Task_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 919
 testRunner.Then("The \'Assert_Scheduler_DisabledRadioButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 924
 testRunner.When("The \'Click_Scheduler_Disable_Task_Radio_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 925
 testRunner.Then("The \'Assert_Scheduler_EditTrigger_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 930
 testRunner.When("The \'Click_Scheduler_EditTrigger_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 931
 testRunner.Then("The \'Assert_Scheduler_EnabledRadioButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 936
 testRunner.When("The \'Click_Scheduler_Enable_Task_Radio_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 937
 testRunner.Then("The \'Assert_Scheduler_ErrorMessage_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 938
 testRunner.Then("The \'Assert_Scheduler_HistoryInput_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 939
 testRunner.Then("The \'Assert_Scheduler_HistoryLabel_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 940
 testRunner.Then("The \'Assert_Scheduler_HistoryTable_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 941
 testRunner.Then("The \'Assert_Scheduler_NameInput_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 942
 testRunner.Then("The \'Assert_Scheduler_NameLabel_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 943
 testRunner.Then("The \'Assert_Scheduler_PasswordInput_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 944
 testRunner.Then("The \'Assert_Scheduler_PasswordLabel_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 945
 testRunner.Then("The \'Assert_Scheduler_ResourcePicker_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 950
 testRunner.When("The \'Click_Scheduler_ResourcePicker\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 951
 testRunner.Then("The \'Assert_Scheduler_RunTask_Checkbox_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 956
 testRunner.When("The \'Click_Scheduler_RunTask\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 957
 testRunner.Then("The \'Assert_Scheduler_DeleteButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 962
 testRunner.When("The \'Click_Scheduler_Delete_Task\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 963
 testRunner.Then("The \'Assert_Scheduler_Status_RadioButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 964
 testRunner.Then("The \'Assert_Scheduler_StatusLabe_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 965
 testRunner.Then("The \'Assert_Scheduler_TriggerLabel_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 966
 testRunner.Then("The \'Assert_Scheduler_TriggerValue_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 967
 testRunner.Then("The \'Assert_Scheduler_UserAccountLabel_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 968
 testRunner.Then("The \'Assert_Scheduler_UsernameInput_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 969
 testRunner.Then("The \'Assert_Scheduler_Usernamelabel_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 970
 testRunner.Then("The \'Assert_Scheduler_WorkflowInput_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 971
 testRunner.Then("The \'Assert_Scheduler_WorkflowLabel_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Settings")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void Settings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Settings", ((string[])(null)));
#line 973
this.ScenarioSetup(scenarioInfo);
#line 974
 testRunner.Given("The \'Assert_Settings_Button_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 975
 testRunner.When("The \'Click_Settings_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 980
 testRunner.Then("The \'Assert_Settings_LoggingTab_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 981
 testRunner.Then("The \'Assert_Settings_ResourcePermissions_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 982
 testRunner.Then("The \'Assert_Settings_SecurityTab_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 983
 testRunner.Then("The \'Assert_Settings_ServerPermissions_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 988
 testRunner.When("The \'Click_Settings_Admin_ServerPermissions\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 994
 testRunner.When("The \'Click_Settings_Contribute_ResourcePermissions\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1000
 testRunner.When("The \'Click_Settings_Contribute_ServerPermissions\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1006
 testRunner.When("The \'Click_Settings_Execute_ResourcePermissions\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1012
 testRunner.When("The \'Click_Settings_ResourcePermissions_ResourcePicker\' recorded action is perfor" +
                    "med", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1018
 testRunner.When("The \'Click_Settings_View_ResourcePermissions\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Context Menu on design surface")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void ContextMenuOnDesignSurface()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Context Menu on design surface", ((string[])(null)));
#line 1021
this.ScenarioSetup(scenarioInfo);
#line 1022
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1023
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1024
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1025
 testRunner.Then("The \'Open_Context_Menu_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Context Menu on Tab")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void ContextMenuOnTab()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Context Menu on Tab", ((string[])(null)));
#line 1027
this.ScenarioSetup(scenarioInfo);
#line 1028
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1029
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1030
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1035
 testRunner.Then("The \'Tab_Context_Menu\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Debug Input window")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void DebugInputWindow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Debug Input window", ((string[])(null)));
#line 1039
this.ScenarioSetup(scenarioInfo);
#line 1040
 testRunner.Given("The \'Assert_NewWorkFlow_RibbonButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1041
 testRunner.When("The \'Click_New_Workflow_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1042
 testRunner.Then("The \'Assert_StartNode_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1047
 testRunner.Then("The \'Assert_DebugInput_Window_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1048
 testRunner.Then("The \'Assert_DebugInput_CancelButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1049
 testRunner.Then("The \'Assert_DebugInput_RememberCheckbox_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1050
 testRunner.Then("The \'Assert_DebugInput_ViewInBrowser_Button_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1051
 testRunner.Then("The \'Assert_DebugInput_DebugButton_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1052
 testRunner.Then("The \'Assert_DebugInput_InputData_Window_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1053
 testRunner.Then("The \'Assert_DebugInput_InputData_Field_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1054
 testRunner.Then("The \'Assert_DebugInput_Xml_Tab_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1055
 testRunner.Then("The \'Assert_DebugInput_Xml_Window_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1056
 testRunner.Then("The \'Assert_DebugInput_Json_Tab_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1057
 testRunner.Then("The \'Assert_DebugInput_Json_Window_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Deploy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void Deploy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deploy", ((string[])(null)));
#line 1060
this.ScenarioSetup(scenarioInfo);
#line 1061
 testRunner.Given("The \'Assert_Deploy_Button_Exists_OnDesignSurface\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1062
 testRunner.When("The \'Click_Deploy_Ribbon_Button\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1066
 testRunner.Then("The \'Assert_Source_Server_Name_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1067
 testRunner.Then("The \'Assert_Refresh_Button_Source_Server_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1068
 testRunner.Then("The \'Assert_Filter_Source_Server_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1069
 testRunner.Then("The \'Assert_Connect_Control_DestinationServer_Exists\' recorded action is performe" +
                    "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1070
 testRunner.Then("The \'Assert_Override_Count_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1071
 testRunner.Then("The \'Assert_NewResource_Count_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1072
 testRunner.Then("The \'Assert_Source_Server_Edit_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1073
 testRunner.Then("The \'Assert_Connect_Button_Source_Server_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1074
 testRunner.Then("The \'Assert_Edit_Button_Destination_Server_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1075
 testRunner.Then("The \'Assert_Connect_button_Destination_Server_Exists\' recorded action is performe" +
                    "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1076
 testRunner.Then("The \'Assert_Connect_Control_SourceServer_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1077
 testRunner.Then("The \'Assert_ShowDependencies_Button_DestinationServer_Exists\' recorded action is " +
                    "performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1078
 testRunner.Then("The \'Assert_ServiceLabel_DestinationServer_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1079
 testRunner.Then("The \'Assert_ServicesCount_Label_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1080
 testRunner.Then("The \'Assert_SourceLabel_DestinationServer_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1081
 testRunner.Then("The \'Assert_SourceCount_DestinationServer_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1082
 testRunner.Then("The \'Assert_NewResource_Label_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1083
 testRunner.Then("The \'Assert_Override_Label_DestinationServer_Exists\' recorded action is performed" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1084
 testRunner.Then("The \'Assert_DeployButton_DestinationServer_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1085
 testRunner.Then("The \'Assert_SuccessMessage_Label_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Explorer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioUISpecs")]
        public virtual void Explorer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Explorer", ((string[])(null)));
#line 1088
this.ScenarioSetup(scenarioInfo);
#line 1089
 testRunner.Given("The \'Assert_Explorer_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1090
 testRunner.Then("The \'Assert_Explorer_ServerName_Exists\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1091
 testRunner.Then("The \'Right_Click_Context_Menu_InExplorer\' recorded action is performed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
