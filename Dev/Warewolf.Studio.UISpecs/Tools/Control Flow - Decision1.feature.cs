// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.Studio.UISpecs.Tools
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
    public partial class DecisionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Control Flow - Decision.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Decision", "\tIn order to branch based on the data\r\n\tAs Warewolf user\r\n\tI want tool that be ma" +
                    "kes a true or false (yes/no) decision based on the data", ProgrammingLanguage.CSharp, new string[] {
                        "Ignore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Decision")))
            {
                Warewolf.Studio.UISpecs.Tools.DecisionFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Opening Decision Large View")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Decision")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Decision")]
        public virtual void OpeningDecisionLargeView()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Opening Decision Large View", new string[] {
                        "ignore",
                        "Decision"});
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
 testRunner.Given("I have Decision tool on the design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
 testRunner.When("I double click on \"Decision\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
 testRunner.Then("the decision large view is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 14
 testRunner.And("\"statement1 of \"TextBox1\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("\"statement1 of \"TextBox2\" is \"NotVisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.And("\"TextBox1\" is focussed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "TextBox1",
                        "ComboBox",
                        "TextBox2",
                        "Delete"});
            table1.AddRow(new string[] {
                        "\"\"",
                        "Choose...",
                        "",
                        "NO"});
#line 17
 testRunner.And("Evaluates a statement to True or False", ((string)(null)), table1, "And ");
#line 20
 testRunner.And("Diplay text as \"If Choose..\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.And("True arm text as \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.And("False arm text as \"False\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.And("Require All decision to be True selected as \"Yes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.And("Done button is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adding Statements in Decision Tool")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Decision")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        public virtual void AddingStatementsInDecisionTool()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding Statements in Decision Tool", new string[] {
                        "ignore"});
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("I have Decision tool on the design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
 testRunner.When("I double click on \"Decision\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("the large view is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 31
 testRunner.And("\"statement1 of \"TextBox1\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.And("\"statement1 of \"TextBox2\" is \"NotVisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.And("\"TextBox1\" is focussed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "TextBox1",
                        "ComboBox",
                        "TextBox2",
                        "Delete"});
            table2.AddRow(new string[] {
                        "\"\"",
                        "Choose...",
                        "",
                        "NO"});
#line 34
 testRunner.And("Evaluates a statement to True or False", ((string)(null)), table2, "And ");
#line 37
 testRunner.When("I \"Add Statement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "TextBox1",
                        "ComboBox",
                        "TextBox2",
                        "Delete"});
            table3.AddRow(new string[] {
                        "\"\"",
                        "Choose...",
                        "",
                        "Yes"});
            table3.AddRow(new string[] {
                        "\"\"",
                        "Choose...",
                        "",
                        "Yes"});
#line 38
 testRunner.Then("Statements are", ((string)(null)), table3, "Then ");
#line 42
 testRunner.And("Diplay text as \"If Choose..\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And("True arm text as \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.And("False arm text as \"False\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.And("Require All decision to be True selected as \"Yes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.And("Done button is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Adding Statements more then five appears scroll bar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Decision")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        public virtual void AddingStatementsMoreThenFiveAppearsScrollBar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding Statements more then five appears scroll bar", new string[] {
                        "ignore"});
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
 testRunner.Given("Decision large view is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
 testRunner.When("I click on \"Add Statement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
 testRunner.When("I click on \"Add Statement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.When("I click on \"Add Statement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
 testRunner.When("I click on \"Add Statement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
 testRunner.When("I click on \"Add Statement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
 testRunner.When("I click on \"Add Statement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "TextBox1",
                        "ComboBox",
                        "TextBox2",
                        "Delete"});
            table4.AddRow(new string[] {
                        "\"\"",
                        "Choose...",
                        "",
                        "Yes"});
            table4.AddRow(new string[] {
                        "\"\"",
                        "Choose...",
                        "",
                        "Yes"});
            table4.AddRow(new string[] {
                        "\"\"",
                        "Choose...",
                        "",
                        "Yes"});
            table4.AddRow(new string[] {
                        "\"\"",
                        "Choose...",
                        "",
                        "Yes"});
            table4.AddRow(new string[] {
                        "\"\"",
                        "Choose...",
                        "",
                        "Yes"});
            table4.AddRow(new string[] {
                        "\"\"",
                        "Choose...",
                        "",
                        "Yes"});
#line 57
 testRunner.Then("Evaluates a statement to True or False", ((string)(null)), table4, "Then ");
#line 65
 testRunner.Then("scroll bar is \"visible\" on \"Decion large view\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 66
 testRunner.And("Diplay text as \"If Choose..\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.And("True arm text as \"True\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.And("False arm text as \"False\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.And("Require All decision to be True selected as \"Yes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
 testRunner.And("Done button is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Deleting Statements in Decision Tool")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Decision")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        public virtual void DeletingStatementsInDecisionTool()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deleting Statements in Decision Tool", new string[] {
                        "ignore"});
#line 73
this.ScenarioSetup(scenarioInfo);
#line 74
 testRunner.Given("Decision large view is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "TextBox1",
                        "ComboBox",
                        "TextBox2",
                        "Delete"});
            table5.AddRow(new string[] {
                        "\"\"",
                        "Choose...",
                        "",
                        "Yes"});
            table5.AddRow(new string[] {
                        "\"\"",
                        "Choose...",
                        "",
                        "Yes"});
#line 75
 testRunner.Then("Statements are", ((string)(null)), table5, "Then ");
#line 79
 testRunner.When("I delete \"statement1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "TextBox1",
                        "ComboBox",
                        "TextBox2",
                        "Delete"});
            table6.AddRow(new string[] {
                        "\"\"",
                        "Choose...",
                        "",
                        "NO"});
#line 80
 testRunner.Then("Evaluates a statement to True or False", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Selecting Statement in combobox1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Decision")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        public virtual void SelectingStatementInCombobox1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Selecting Statement in combobox1", new string[] {
                        "ignore"});
#line 85
this.ScenarioSetup(scenarioInfo);
#line 86
 testRunner.Given("Decision large view is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 87
 testRunner.And("\"statement1 of \"TextBox1\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
 testRunner.And("\"statement1 of \"TextBox2\" is \"NotVisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
 testRunner.When("I select \"statement1\" of combobox as \"There Is An Error\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 91
 testRunner.Then("\"statement1\" of \"TextBox1\" is \"NotVisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 92
 testRunner.And("\"statement1\" of \"TextBox2\" is \"NotVisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.And("I \"Add Statement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.When("I select \"statement2\" of combobox as \"There Is No Error\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 96
 testRunner.Then("\"statement2\" of \"TextBox1\" is \"NotVisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 97
 testRunner.And("\"statement2\" of \"TextBox2\" is \"NotVisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
 testRunner.And("I \"Add Statement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
 testRunner.When("I select \"statement3\" of combobox as \"=\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 101
 testRunner.Then("\"statement3\" of \"TextBox1\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 102
 testRunner.And("\"statement3\" of \"TextBox2\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
 testRunner.When("I select \"statement4\" of combobox as \">\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 105
 testRunner.Then("\"statement4\" of \"TextBox1\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 106
 testRunner.And("\"statement4\" of \"TextBox2\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
 testRunner.And("I \"Add Statement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
 testRunner.When("I select \"statement5\" of combobox as \"<\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 110
 testRunner.Then("\"statement5\" of \"TextBox1\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 111
 testRunner.And("\"statement5\" of \"TextBox2\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "TextBox1",
                        "ComboBox",
                        "TextBox2",
                        "Delete"});
            table7.AddRow(new string[] {
                        "",
                        "There Is An Error",
                        "",
                        "Yes"});
            table7.AddRow(new string[] {
                        "",
                        "There Is No Error",
                        "",
                        "Yes"});
            table7.AddRow(new string[] {
                        "\"\"",
                        "=",
                        "\"\"",
                        "Yes"});
            table7.AddRow(new string[] {
                        "\"\"",
                        ">",
                        "\"\"",
                        "Yes"});
            table7.AddRow(new string[] {
                        "\"\"",
                        "<",
                        "\"\"",
                        "Yes"});
#line 112
 testRunner.Then("Evaluates a statement to True or False", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Selecting Statement in combobox2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Decision")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        public virtual void SelectingStatementInCombobox2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Selecting Statement in combobox2", new string[] {
                        "ignore"});
#line 121
this.ScenarioSetup(scenarioInfo);
#line 122
 testRunner.Given("Decision large view is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 123
 testRunner.And("\"statement1 of \"TextBox1\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
 testRunner.And("\"statement1 of \"TextBox2\" is \"NotVisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
 testRunner.When("I select \"statement1\" of combobox as \"<> (Not Equal)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 127
 testRunner.Then("\"statement1\" of \"TextBox1\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 128
 testRunner.And("\"statement1\" of \"TextBox2\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 130
 testRunner.And("I \"Add Statement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
 testRunner.When("I select \"statement2\" of combobox as \">=\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 132
 testRunner.Then("\"statement2\" of \"TextBox1\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 133
 testRunner.And("\"statement2\" of \"TextBox2\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 135
 testRunner.And("I \"Add Statement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 136
 testRunner.When("I select \"statement3\" of combobox as \"<=\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 137
 testRunner.Then("\"statement3\" of \"TextBox1\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 138
 testRunner.And("\"statement3 of \"TextBox2\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
 testRunner.And("I \"Add Statement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
 testRunner.When("I select \"statement4\" of combobox as \"Starts With\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 142
 testRunner.Then("\"statement4\" of \"TextBox1\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 143
 testRunner.And("\"statement4 of \"TextBox2\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
 testRunner.And("I \"Add Statement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
 testRunner.When("I select \"statement5\" of combobox as \"Ends With\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 147
 testRunner.Then("\"statement5\" of \"TextBox1\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 148
 testRunner.And("\"statement5\" of \"TextBox2\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.And("I \"Add Statement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 151
 testRunner.When("I select \"statement6\" of combobox as \"Contains\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 152
 testRunner.Then("\"statement6\" of \"TextBox1\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 153
 testRunner.And("\"statement6\" of \"TextBox2\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "TextBox1",
                        "ComboBox",
                        "TextBox2",
                        "Delete"});
            table8.AddRow(new string[] {
                        "\"\"",
                        "<> (Not Equal)",
                        "\"\"",
                        "Yes"});
            table8.AddRow(new string[] {
                        "\"\"",
                        ">=",
                        "\"\"",
                        "Yes"});
            table8.AddRow(new string[] {
                        "\"\"",
                        "<=",
                        "\"\"",
                        "Yes"});
            table8.AddRow(new string[] {
                        "\"\"",
                        "Starts With",
                        "\"\"",
                        "Yes"});
            table8.AddRow(new string[] {
                        "\"\"",
                        "Ends With",
                        "\"\"",
                        "Yes"});
            table8.AddRow(new string[] {
                        "\"\"",
                        "Contains",
                        "\"\"",
                        "Yes"});
#line 154
 testRunner.Then("Evaluates a statement to True or False", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Selecting Statement in combobox3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Decision")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        public virtual void SelectingStatementInCombobox3()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Selecting Statement in combobox3", new string[] {
                        "ignore"});
#line 165
this.ScenarioSetup(scenarioInfo);
#line 166
 testRunner.Given("Decision large view is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 167
 testRunner.And("\"statement1\" of \"TextBox1\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 168
 testRunner.And("\"statement1\" of \"TextBox2\" is \"NotVisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 170
 testRunner.When("I select \"statement1\" of combobox as \"Doesn\"t Start With\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 171
 testRunner.Then("\"statement1\" of \"TextBox1\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 172
 testRunner.And("\"statement1\" of \"TextBox2\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 174
 testRunner.And("I \"Add Statement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 175
 testRunner.When("I select \"statement2\" of combobox as \"Doesn\"t Contain\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 176
 testRunner.Then("\"statement2\" of \"TextBox1\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 177
 testRunner.And("\"statement2\" of \"TextBox2\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
 testRunner.When("I select \"statement3\" of combobox as \"Is Alphanumeric\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 180
 testRunner.Then("\"statement3\" of \"TextBox1\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 181
 testRunner.And("\"statement3\" of \"TextBox2\" is \"NotVisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
 testRunner.And("I \"Add Statement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 184
 testRunner.When("I select \"statement4\" of combobox as \"Is Base64\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 185
 testRunner.Then("\"statement4\" of \"TextBox1\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 186
 testRunner.And("\"statement4\" of \"TextBox2\" is \"NotVisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 188
 testRunner.And("I \"Add Statement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 189
 testRunner.When("I select \"statement5\" of combobox as \"Is Between\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 190
 testRunner.Then("\"statement5\" of \"TextBox1\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 191
 testRunner.And("\"statement5\" of \"TextBox2\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 192
 testRunner.And("\"statement5\" of \"TextBox3\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 194
 testRunner.And("I \"Add Statement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 195
 testRunner.When("I select \"statement6\" of combobox as \"Is Binary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 196
 testRunner.Then("\"statement6\" of \"TextBox1\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 197
 testRunner.And("\"statement6 of \"TextBox2\" is \"NotVisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 199
 testRunner.And("I \"Add Statement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 200
 testRunner.When("I select \"statement7\" of combobox as \"Is Date\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 201
 testRunner.Then("\"statement7\" of \"TextBox1\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 202
 testRunner.And("\"statement7 of \"TextBox2\" is \"NotVisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "TextBox1",
                        "ComboBox",
                        "TextBox2",
                        "Delete"});
            table9.AddRow(new string[] {
                        "\"\"",
                        "Doesn\"t Start With",
                        "\"\"",
                        "Yes"});
            table9.AddRow(new string[] {
                        "\"\"",
                        "Doesn\"t Contain",
                        "\"\"",
                        "Yes"});
            table9.AddRow(new string[] {
                        "\"\"",
                        "Is Alphanumeric",
                        "",
                        "Yes"});
            table9.AddRow(new string[] {
                        "\"\"",
                        "Is Base64",
                        "",
                        "Yes"});
            table9.AddRow(new string[] {
                        "\"\"",
                        "Is Between",
                        "\"\"",
                        "Yes"});
            table9.AddRow(new string[] {
                        "\"\"",
                        "Is Binary",
                        "",
                        "Yes"});
            table9.AddRow(new string[] {
                        "\"\"",
                        "Is Date",
                        "",
                        "Yes"});
#line 203
 testRunner.Then("Evaluates a statement to True or False", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
