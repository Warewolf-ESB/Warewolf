// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Dev2.CodedUI.Tests.UIMaps.PluginServiceWizardUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public partial class PluginServiceWizardUIMap
    {
        /// <summary>
        /// Click Test, Save, Save
        /// </summary>
        public void ClickSave()
        {
            UITestControl uIItemImage = this.UIBusinessDesignStudioWindow.GetChildren()[0].GetChildren()[0];

            // Click image
            Mouse.Click(uIItemImage, new Point(887, 73));

            // Click image
            Mouse.Click(uIItemImage, new Point(771, 526));

            // Click image
            Mouse.Click(uIItemImage, new Point(612, 474));
        }

        /// <summary>
        /// PluginServiceDetailsWizardIsOpen
        /// </summary>
        private WpfWindow GetWindow()
        {
            #region Variable Declarations
            WpfWindow uIPluginServiceDetailsWindow = this.UIPluginServiceDetailsWindow;
            #endregion

            return uIPluginServiceDetailsWindow;
        }
        
        #region Properties
        public UIPluginServiceDetailsWindow UIPluginServiceDetailsWindow
        {
            get
            {
                if ((this.mUIPluginServiceDetailsWindow == null))
                {
                    this.mUIPluginServiceDetailsWindow = new UIPluginServiceDetailsWindow();
                }
                return this.mUIPluginServiceDetailsWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPluginServiceDetailsWindow mUIPluginServiceDetailsWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIPluginServiceDetailsWindow : WpfWindow
    {
        
        public UIPluginServiceDetailsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Plugin Service Details";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Plugin Service Details");
            #endregion
        }
    }
}
