// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Warewolf.Studio.UISpecs.OutsideWorkflowDesignSurfaceUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public partial class OutsideWorkflowDesignSurfaceUIMap
    {
        
        /// <summary>
        /// Assert_Close_Button_Exists_TopRibbon - Use 'Assert_Close_Button_Exists_TopRibbonExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Close_Button_Exists_TopRibbon()
        {
            #region Variable Declarations
            WpfButton closeStudioButton = this.MainStudioWindow.CloseStudioButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_Close_Button_Exists_TopRibbonExpectedValues.CloseStudioButtonExists, closeStudioButton.Exists, "Close Button does not Exist in the Top Ribbon");
        }
        
        /// <summary>
        /// Assert_Connect_button_Destination_Server_Exists - Use 'Assert_Connect_button_Destination_Server_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Connect_button_Destination_Server_Exists()
        {
            #region Variable Declarations
            WpfButton connectDestinationButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.ConnectDestinationButton;
            #endregion

            // Verify that the 'Exists' property of 'UI_DestinationServerConnectbtn_AutoID' button equals 'True'
            Assert.AreEqual(this.Assert_Connect_button_Destination_Server_ExistsExpectedValues.ConnectDestinationButtonExists, connectDestinationButton.Exists, "Connect Button in Destination server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_Connect_Button_Source_Server_Exists - Use 'Assert_Connect_Button_Source_Server_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Connect_Button_Source_Server_Exists()
        {
            #region Variable Declarations
            WpfButton sourceConnectButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.SourceConnectButton;
            #endregion

            // Verify that the 'Exists' property of 'UI_SourceConnectServerbtn_AutoID' button equals 'True'
            Assert.AreEqual(this.Assert_Connect_Button_Source_Server_ExistsExpectedValues.SourceConnectButtonExists, sourceConnectButton.Exists, "Connect button in the Source server does not exist");
        }
        
        /// <summary>
        /// Assert_Connect_ConnectControl_Button_Exists_InExplorer - Use 'Assert_Connect_ConnectControl_Button_Exists_InExplorerExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Connect_ConnectControl_Button_Exists_InExplorer()
        {
            #region Variable Declarations
            WpfButton connectServerButton = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ConnectControl.ConnectServerButton;
            #endregion

            // Verify that the 'Exists' property of 'UI_ConnectServerBtn_AutoID' button equals 'True'
            Assert.AreEqual(this.Assert_Connect_ConnectControl_Button_Exists_InExplorerExpectedValues.ConnectServerButtonExists, connectServerButton.Exists, "Connect in Explorer does not exist");
        }
        
        /// <summary>
        /// Assert_Connect_Control_DestinationServer_Exists - Use 'Assert_Connect_Control_DestinationServer_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Connect_Control_DestinationServer_Exists()
        {
            #region Variable Declarations
            WpfButton connectControlDestination = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.ConnectControlDestination;
            #endregion

            // Verify that the 'Exists' property of 'ToggleButton' button equals 'True'
            Assert.AreEqual(this.Assert_Connect_Control_DestinationServer_ExistsExpectedValues.ConnectControlDestinationExists, connectControlDestination.Exists, "Destination Server connect control does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_Connect_Control_Exists_InExplorer - Use 'Assert_Connect_Control_Exists_InExplorerExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Connect_Control_Exists_InExplorer()
        {
            #region Variable Declarations
            WpfButton serverListComboBox = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ConnectControl.ServerComboBox.ServerListComboBox;
            #endregion

            // Verify that the 'Exists' property of 'ToggleButton' button equals 'True'
            Assert.AreEqual(this.Assert_Connect_Control_Exists_InExplorerExpectedValues.ServerListComboBoxExists, serverListComboBox.Exists, "Explorer connect control does not exist");
        }
        
        /// <summary>
        /// Assert_Connect_Control_SourceServer_Exists - Use 'Assert_Connect_Control_SourceServer_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Connect_Control_SourceServer_Exists()
        {
            #region Variable Declarations
            WpfCustom sourceConnectControl = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.SourceConnectControl;
            #endregion

            // Verify that the 'Exists' property of 'SourceConnectControl' custom control equals 'True'
            Assert.AreEqual(this.Assert_Connect_Control_SourceServer_ExistsExpectedValues.SourceConnectControlExists, sourceConnectControl.Exists, "Source Server connect control does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_Database_Source_Dropdownlist_Exists - Use 'Assert_Database_Source_Dropdownlist_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Database_Source_Dropdownlist_Exists()
        {
            #region Variable Declarations
            WpfCustom sourcesComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.NewDBConnectorTab.WorkSurfaceContext.SourcesComboBox;
            #endregion

            // Verify that the 'Exists' property of 'SourcesComboBox' custom control equals 'True'
            Assert.AreEqual(this.Assert_Database_Source_Dropdownlist_ExistsExpectedValues.SourcesComboBoxExists, sourcesComboBox.Exists, "Database selector drop down list does not exist");
        }
        
        /// <summary>
        /// Assert_Database_Source_Exists - Use 'Assert_Database_Source_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Database_Source_Exists()
        {
            #region Variable Declarations
            WpfButton databaseSourceButton = this.MainStudioWindow.SideMenuBar.DatabaseSourceButton;
            #endregion

            // Verify that the 'Exists' property of 'Create a new database source' button equals 'True'
            Assert.AreEqual(this.Assert_Database_Source_ExistsExpectedValues.DatabaseSourceButtonExists, databaseSourceButton.Exists, "Database Source does not exist in the side menu");
        }
        
        /// <summary>
        /// Assert_DebugInput_CancelButton_Exists - Use 'Assert_DebugInput_CancelButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugInput_CancelButton_Exists()
        {
            #region Variable Declarations
            WpfButton cancelButton = this.DebugInputWindow.CancelButton;
            #endregion

            // Verify that the 'Exists' property of 'Cancel' button equals 'True'
            Assert.AreEqual(this.Assert_DebugInput_CancelButton_ExistsExpectedValues.CancelButtonExists, cancelButton.Exists, "Cancel Debug Input Window button does not Exist");
        }
        
        /// <summary>
        /// Assert_DebugInput_DebugButton_Exists - Use 'Assert_DebugInput_DebugButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugInput_DebugButton_Exists()
        {
            #region Variable Declarations
            WpfButton debugF6Button = this.DebugInputWindow.DebugF6Button;
            #endregion

            // Verify that the 'Exists' property of 'Debug (F6)' button equals 'True'
            Assert.AreEqual(this.Assert_DebugInput_DebugButton_ExistsExpectedValues.DebugF6ButtonExists, debugF6Button.Exists, "Debug button in Debug Input window does not Exist");
        }
        
        /// <summary>
        /// Assert_DebugInput_InputData_Field_Exists - Use 'Assert_DebugInput_InputData_Field_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugInput_InputData_Field_Exists()
        {
            #region Variable Declarations
            WpfText uIRec1setText = this.DebugInputWindow.UITabItemsTabList.InputDataTab.DataListInputsTable.UIDescriptionCell.UIRec1setText;
            #endregion

            // Verify that the 'Exists' property of 'rec(1).set' label equals 'True'
            Assert.AreEqual(this.Assert_DebugInput_InputData_Field_ExistsExpectedValues.UIRec1setTextExists, uIRec1setText.Exists, "First Field name does not exist in the Input Data window");
        }
        
        /// <summary>
        /// Assert_DebugInput_InputData_Window_Exists - Use 'Assert_DebugInput_InputData_Window_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugInput_InputData_Window_Exists()
        {
            #region Variable Declarations
            WpfTable dataListInputsTable = this.DebugInputWindow.UITabItemsTabList.InputDataTab.DataListInputsTable;
            #endregion

            // Verify that the 'Exists' property of 'DataListInputs' table equals 'True'
            Assert.AreEqual(this.Assert_DebugInput_InputData_Window_ExistsExpectedValues.DataListInputsTableExists, dataListInputsTable.Exists, "Input Data Window does not exist in Debug Input window");
        }
        
        /// <summary>
        /// Assert_DebugInput_Json_Tab_Exists - Use 'Assert_DebugInput_Json_Tab_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugInput_Json_Tab_Exists()
        {
            #region Variable Declarations
            WpfTabPage jSONTab = this.DebugInputWindow.UITabItemsTabList.JSONTab;
            #endregion

            // Verify that the 'Exists' property of 'JSON' tab equals 'True'
            Assert.AreEqual(this.Assert_DebugInput_Json_Tab_ExistsExpectedValues.JSONTabExists, jSONTab.Exists, "Assert Json tab does not exist in the debug input window");
        }
        
        /// <summary>
        /// Assert_DebugInput_Json_Window_Exists - Use 'Assert_DebugInput_Json_Window_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugInput_Json_Window_Exists()
        {
            #region Variable Declarations
            WpfCustom jSONWindow = this.DebugInputWindow.UITabItemsTabList.JSONTab.JSONWindow;
            #endregion

            // Verify that the 'Exists' property of 'UI_JsonEditor_AutoID' custom control equals 'True'
            Assert.AreEqual(this.Assert_DebugInput_Json_Window_ExistsExpectedValues.JSONWindowExists, jSONWindow.Exists, "Debug Input Json window does not exist");
        }
        
        /// <summary>
        /// Assert_DebugInput_RememberCheckbox_Exists - Use 'Assert_DebugInput_RememberCheckbox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugInput_RememberCheckbox_Exists()
        {
            #region Variable Declarations
            WpfCheckBox rememberDebugInputCheckBox = this.DebugInputWindow.RememberDebugInputCheckBox;
            #endregion

            // Verify that the 'Exists' property of 'Remember Debug Inputs' check box equals 'True'
            Assert.AreEqual(this.Assert_DebugInput_RememberCheckbox_ExistsExpectedValues.RememberDebugInputCheckBoxExists, rememberDebugInputCheckBox.Exists, "Remember Checkbox does not exist in the Debug Input window");
        }
        
        /// <summary>
        /// Assert_DebugInput_ViewInBrowser_Button_Exists - Use 'Assert_DebugInput_ViewInBrowser_Button_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugInput_ViewInBrowser_Button_Exists()
        {
            #region Variable Declarations
            WpfButton viewInBrowserF7Button = this.DebugInputWindow.ViewInBrowserF7Button;
            #endregion

            // Verify that the 'Enabled' property of 'View In Browser (F7)' button equals 'True'
            Assert.AreEqual(this.Assert_DebugInput_ViewInBrowser_Button_ExistsExpectedValues.ViewInBrowserF7ButtonEnabled, viewInBrowserF7Button.Enabled, "View in Browser button does not exist in Debug Input window");
        }
        
        /// <summary>
        /// Assert_DebugInput_Window_Exists - Use 'Assert_DebugInput_Window_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugInput_Window_Exists()
        {
            #region Variable Declarations
            WpfWindow debugInputWindow1 = this.DebugInputWindow.DebugInputWindow1;
            #endregion

            // Verify that the 'Exists' property of 'Wpf' window equals 'True'
            Assert.AreEqual(this.Assert_DebugInput_Window_ExistsExpectedValues.DebugInputWindow1Exists, debugInputWindow1.Exists, "Debug Input window does not exist");
        }
        
        /// <summary>
        /// Assert_DebugInput_Xml_Tab_Exists - Use 'Assert_DebugInput_Xml_Tab_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugInput_Xml_Tab_Exists()
        {
            #region Variable Declarations
            WpfTabPage xMLTab = this.DebugInputWindow.UITabItemsTabList.XMLTab;
            #endregion

            // Verify that the 'Exists' property of 'XML' tab equals 'True'
            Assert.AreEqual(this.Assert_DebugInput_Xml_Tab_ExistsExpectedValues.XMLTabExists, xMLTab.Exists, "Xml tab does not Exist in the Debug Input window");
        }
        
        /// <summary>
        /// Assert_DebugInput_Xml_Window_Exists - Use 'Assert_DebugInput_Xml_Window_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugInput_Xml_Window_Exists()
        {
            #region Variable Declarations
            WpfCustom xMLWindow = this.DebugInputWindow.UITabItemsTabList.XMLTab.XMLWindow;
            #endregion

            // Verify that the 'Exists' property of 'UI_XMLEditor_AutoID' custom control equals 'True'
            Assert.AreEqual(this.Assert_DebugInput_Xml_Window_ExistsExpectedValues.XMLWindowExists, xMLWindow.Exists, "Debug Input Xml window does not exist ");
        }
        
        /// <summary>
        /// Assert_DeployButton_DestinationServer_Exists - Use 'Assert_DeployButton_DestinationServer_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DeployButton_DestinationServer_Exists()
        {
            #region Variable Declarations
            WpfButton deployButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.DeployButton;
            #endregion

            // Verify that the 'Exists' property of 'Deploy' button equals 'True'
            Assert.AreEqual(this.Assert_DeployButton_DestinationServer_ExistsExpectedValues.DeployButtonExists, deployButton.Exists, "Deploy button in Destination server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_Edit_Button_Destination_Server_Exists - Use 'Assert_Edit_Button_Destination_Server_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Edit_Button_Destination_Server_Exists()
        {
            #region Variable Declarations
            WpfButton editDestinationButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.EditDestinationButton;
            #endregion

            // Verify that the 'Exists' property of '...' button equals 'True'
            Assert.AreEqual(this.Assert_Edit_Button_Destination_Server_ExistsExpectedValues.EditDestinationButtonExists, editDestinationButton.Exists, "Edit Destination Server button does not exist");
        }
        
        /// <summary>
        /// Assert_Explorer_Edit_Connect_Control_Button_Exists - Use 'Assert_Explorer_Edit_Connect_Control_Button_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Explorer_Edit_Connect_Control_Button_Exists()
        {
            #region Variable Declarations
            WpfButton editServerButton = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ConnectControl.EditServerButton;
            #endregion

            // Verify that the 'Exists' property of '...' button equals 'True'
            Assert.AreEqual(this.Assert_Explorer_Edit_Connect_Control_Button_ExistsExpectedValues.EditServerButtonExists, editServerButton.Exists, "Edit Connect control button does not exist");
        }
        
        /// <summary>
        /// Assert_Explorer_Exists - Use 'Assert_Explorer_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Explorer_Exists()
        {
            #region Variable Declarations
            WpfCustom explorer = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer;
            #endregion

            // Verify that the 'Exists' property of 'UI_ExplorerControl_AutoID' custom control equals 'True'
            Assert.AreEqual(this.Assert_Explorer_ExistsExpectedValues.ExplorerExists, explorer.Exists, "Explorer does not exist in the studio");
        }
        
        /// <summary>
        /// Assert_Explorer_ServerName_Exists - Use 'Assert_Explorer_ServerName_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Explorer_ServerName_Exists()
        {
            #region Variable Declarations
            WpfTreeItem explorerTreeItemChild = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.ExplorerTreeItem.ExplorerTreeItemChild;
            #endregion

            // Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
            Assert.AreEqual(this.Assert_Explorer_ServerName_ExistsExpectedValues.ExplorerTreeItemChildExists, explorerTreeItemChild.Exists, "Server Name does not exist in the Explorer");
        }
        
        /// <summary>
        /// Assert_Filter_Exists_InExplorer - Use 'Assert_Filter_Exists_InExplorerExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Filter_Exists_InExplorer()
        {
            #region Variable Declarations
            WpfText filterText = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.SearchTextBox.FilterText;
            #endregion

            // Verify that the 'Exists' property of 'Filter' label equals 'True'
            Assert.AreEqual(this.Assert_Filter_Exists_InExplorerExpectedValues.FilterTextExists, filterText.Exists, "Explorer Filter does not exist");
        }
        
        /// <summary>
        /// Assert_Filter_Source_Server_Exists - Use 'Assert_Filter_Source_Server_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Filter_Source_Server_Exists()
        {
            #region Variable Declarations
            WpfText filterText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.FilterText;
            #endregion

            // Verify that the 'Exists' property of 'Filter' label equals 'True'
            Assert.AreEqual(this.Assert_Filter_Source_Server_ExistsExpectedValues.FilterTextExists, filterText.Exists, "Filter source server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_FullScreen_Button_Exists_TopRibbon - Use 'Assert_FullScreen_Button_Exists_TopRibbonExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_FullScreen_Button_Exists_TopRibbon()
        {
            #region Variable Declarations
            WpfButton maximizeRestoreStudioButton = this.MainStudioWindow.MaximizeRestoreStudioButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_FullScreen_Button_Exists_TopRibbonExpectedValues.MaximizeRestoreStudioButtonExists, maximizeRestoreStudioButton.Exists, "Full Screen Button in the Top Ribbon does not Exist");
        }
        
        /// <summary>
        /// Assert_InputData_Tab_Exists - Use 'Assert_InputData_Tab_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_InputData_Tab_Exists()
        {
            #region Variable Declarations
            WpfTabPage inputDataTab = this.DebugInputWindow.UITabItemsTabList.InputDataTab;
            #endregion

            // Verify that the 'Exists' property of 'Input Data' tab equals 'True'
            Assert.AreEqual(this.Assert_InputData_Tab_ExistsExpectedValues.InputDataTabExists, inputDataTab.Exists, "Input Data Tab does not exist inside Debug Input Window");
        }
        
        /// <summary>
        /// Assert_LockAndUnlock_Button_Exists_TopRibbon - Use 'Assert_LockAndUnlock_Button_Exists_TopRibbonExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_LockAndUnlock_Button_Exists_TopRibbon()
        {
            #region Variable Declarations
            WpfButton lockStudioButton = this.MainStudioWindow.LockStudioButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_LockAndUnlock_Button_Exists_TopRibbonExpectedValues.LockStudioButtonExists, lockStudioButton.Exists, "Top Ribbon Lock button does not Exist");
        }
        
        /// <summary>
        /// Assert_Maximize_Button_Exists_TopRibbon - Use 'Assert_Maximize_Button_Exists_TopRibbonExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Maximize_Button_Exists_TopRibbon()
        {
            #region Variable Declarations
            WpfButton maximizeStudioButton = this.MainStudioWindow.MaximizeStudioButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_Maximize_Button_Exists_TopRibbonExpectedValues.MaximizeStudioButtonExists, maximizeStudioButton.Exists, "Maximize Button in the Top Ribbon does not Exist");
        }
        
        /// <summary>
        /// Assert_Minimize_Button_Exists_TopRibbon - Use 'Assert_Minimize_Button_Exists_TopRibbonExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Minimize_Button_Exists_TopRibbon()
        {
            #region Variable Declarations
            WpfButton minimizeStudioButton = this.MainStudioWindow.MinimizeStudioButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_Minimize_Button_Exists_TopRibbonExpectedValues.MinimizeStudioButtonExists, minimizeStudioButton.Exists, "Minimize Button in the Top Ribbon does not Exist");
        }
        
        /// <summary>
        /// Assert_NewResource_Count_Exists - Use 'Assert_NewResource_Count_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_NewResource_Count_Exists()
        {
            #region Variable Declarations
            WpfHyperlink newResourceHyperlink = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.NewResourceHyperlink;
            #endregion

            // Verify that the 'Exists' property of link equals 'True'
            Assert.AreEqual(this.Assert_NewResource_Count_ExistsExpectedValues.NewResourceHyperlinkExists, newResourceHyperlink.Exists, "New Resource count in destination server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_NewResource_Label_Exists - Use 'Assert_NewResource_Label_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_NewResource_Label_Exists()
        {
            #region Variable Declarations
            WpfText newResourcesText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.NewResourcesText;
            #endregion

            // Verify that the 'Exists' property of 'New Resources' label equals 'True'
            Assert.AreEqual(this.Assert_NewResource_Label_ExistsExpectedValues.NewResourcesTextExists, newResourcesText.Exists, "New Resource Label in the destination server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_NewWorkFlow_RibbonButton_Exists - Use 'Assert_NewWorkFlow_RibbonButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_NewWorkFlow_RibbonButton_Exists()
        {
            #region Variable Declarations
            WpfText newWorkflowIcon = this.MainStudioWindow.SideMenuBar.CollapsedSideMenu.NewWorkflowIcon;
            #endregion

            // Verify that the 'Exists' property of '' label equals 'True'
            Assert.AreEqual(this.Assert_NewWorkFlow_RibbonButton_ExistsExpectedValues.NewWorkflowIconExists, newWorkflowIcon.Exists, "New Workflow Ribbon Button Does Not Exist!");
        }
        
        /// <summary>
        /// Assert_Override_Count_Exists - Use 'Assert_Override_Count_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Override_Count_Exists()
        {
            #region Variable Declarations
            WpfHyperlink overrideHyperlink = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.OverrideHyperlink;
            #endregion

            // Verify that the 'Exists' property of link equals 'True'
            Assert.AreEqual(this.Assert_Override_Count_ExistsExpectedValues.OverrideHyperlinkExists, overrideHyperlink.Exists, "Override count in destination server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_Override_Label_DestinationServer_Exists - Use 'Assert_Override_Label_DestinationServer_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Override_Label_DestinationServer_Exists()
        {
            #region Variable Declarations
            WpfText overrideText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.OverrideText;
            #endregion

            // Verify that the 'Exists' property of 'Override' label equals 'True'
            Assert.AreEqual(this.Assert_Override_Label_DestinationServer_ExistsExpectedValues.OverrideTextExists, overrideText.Exists, "Override label on Destination Server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_Plugin_Source_Exists - Use 'Assert_Plugin_Source_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Plugin_Source_Exists()
        {
            #region Variable Declarations
            WpfButton pluginSourceButton = this.MainStudioWindow.SideMenuBar.PluginSourceButton;
            #endregion

            // Verify that the 'Exists' property of 'Create a new plugin source' button equals 'True'
            Assert.AreEqual(this.Assert_Plugin_Source_ExistsExpectedValues.PluginSourceButtonExists, pluginSourceButton.Exists, "Plugin Source does not exist in the side menu");
        }
        
        /// <summary>
        /// Assert_Position_Exists - Use 'Assert_Position_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Position_Exists()
        {
            #region Variable Declarations
            WpfMenuItem positionButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.FilesMenu.PositionButton;
            #endregion

            // Verify that the 'Exists' property of 'PART_FilesMenuItem' menu item equals 'True'
            Assert.AreEqual(this.Assert_Position_ExistsExpectedValues.PositionButtonExists, positionButton.Exists, "Option to view all open tabs does not exist");
        }
        
        /// <summary>
        /// Assert_Refresh_Button_Exists_InExplorer - Use 'Assert_Refresh_Button_Exists_InExplorerExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Refresh_Button_Exists_InExplorer()
        {
            #region Variable Declarations
            WpfButton explorerRefreshButton = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerRefreshButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_Refresh_Button_Exists_InExplorerExpectedValues.ExplorerRefreshButtonExists, explorerRefreshButton.Exists, "Refresh button in the Explorer does not exist");
        }
        
        /// <summary>
        /// Assert_Refresh_Button_Source_Server_Exists - Use 'Assert_Refresh_Button_Source_Server_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Refresh_Button_Source_Server_Exists()
        {
            #region Variable Declarations
            WpfButton refreshSourceServerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.RefreshSourceServerButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_Refresh_Button_Source_Server_ExistsExpectedValues.RefreshSourceServerButtonExists, refreshSourceServerButton.Exists, "Refresh button source server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_SaveDialog_CancelButton_Exists - Use 'Assert_SaveDialog_CancelButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_CancelButton_Exists()
        {
            #region Variable Declarations
            WpfButton cancelButton = this.SaveDialogWindow.CancelButton;
            #endregion

            // Verify that the 'Exists' property of 'Cancel' button equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_CancelButton_ExistsExpectedValues.CancelButtonExists, cancelButton.Exists, "Save dialog cancel button does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_ErrorLabel_Exists - Use 'Assert_SaveDialog_ErrorLabel_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_ErrorLabel_Exists()
        {
            #region Variable Declarations
            WpfText errorLabel = this.SaveDialogWindow.ErrorLabel;
            #endregion

            // Verify that the 'Exists' property of ''Name' cannot be empty.' label equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_ErrorLabel_ExistsExpectedValues.ErrorLabelExists, errorLabel.Exists, "Save dialog error label does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_Exists - Use 'Assert_SaveDialog_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_Exists()
        {
            #region Variable Declarations
            WpfWindow saveDialogWindow = this.SaveDialogWindow;
            #endregion

            // Verify that the 'Exists' property of 'SaveDialogView' window equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_ExistsExpectedValues.SaveDialogWindowExists, saveDialogWindow.Exists, "Save dialog window does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_ExplorerTree_Exists - Use 'Assert_SaveDialog_ExplorerTree_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_ExplorerTree_Exists()
        {
            #region Variable Declarations
            WpfTree explorerTree = this.SaveDialogWindow.ExplorerView.ExplorerTree;
            #endregion

            // Verify that the 'Exists' property of 'ExplorerTree' tree equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_ExplorerTree_ExistsExpectedValues.ExplorerTreeExists, explorerTree.Exists, "Save dialog explorer tree does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_ExplorerTreeItem_Exists - Use 'Assert_SaveDialog_ExplorerTreeItem_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_ExplorerTreeItem_Exists()
        {
            #region Variable Declarations
            WpfTreeItem explorerTreeItem = this.SaveDialogWindow.ExplorerView.ExplorerTree.ExplorerTreeItem;
            #endregion

            // Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_ExplorerTreeItem_ExistsExpectedValues.ExplorerTreeItemExists, explorerTreeItem.Exists, "Save dialog explorer tree item does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_ExplorerView_Exists - Use 'Assert_SaveDialog_ExplorerView_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_ExplorerView_Exists()
        {
            #region Variable Declarations
            WpfCustom explorerView = this.SaveDialogWindow.ExplorerView;
            #endregion

            // Verify that the 'Exists' property of 'ExplorerView' custom control equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_ExplorerView_ExistsExpectedValues.ExplorerViewExists, explorerView.Exists, "Save dialog explorer view does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_FilterTextbox_Exists - Use 'Assert_SaveDialog_FilterTextbox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_FilterTextbox_Exists()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.SaveDialogWindow.ExplorerView.SearchTextBox;
            #endregion

            // Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_FilterTextbox_ExistsExpectedValues.SearchTextBoxExists, searchTextBox.Exists, "Save dialog filter textbox does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_NameLabel_Exists - Use 'Assert_SaveDialog_NameLabel_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_NameLabel_Exists()
        {
            #region Variable Declarations
            WpfText nameLabel = this.SaveDialogWindow.NameLabel;
            #endregion

            // Verify that the 'Exists' property of 'Name:' label equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_NameLabel_ExistsExpectedValues.NameLabelExists, nameLabel.Exists, "Save dialog name label does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_RefreshButton_Exists - Use 'Assert_SaveDialog_RefreshButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_RefreshButton_Exists()
        {
            #region Variable Declarations
            WpfButton refreshButton = this.SaveDialogWindow.ExplorerView.RefreshButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_RefreshButton_ExistsExpectedValues.RefreshButtonExists, refreshButton.Exists, "Save dialog refresh button does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_SaveButton_Exists - Use 'Assert_SaveDialog_SaveButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_SaveButton_Exists()
        {
            #region Variable Declarations
            WpfButton saveButton = this.SaveDialogWindow.SaveButton;
            #endregion

            // Verify that the 'Exists' property of 'Save' button equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_SaveButton_ExistsExpectedValues.SaveButtonExists, saveButton.Exists, "Save dialog save button does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_ServiceName_Textbox_Exists - Use 'Assert_SaveDialog_ServiceName_Textbox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_ServiceName_Textbox_Exists()
        {
            #region Variable Declarations
            WpfEdit serviceNameTextBox = this.SaveDialogWindow.ServiceNameTextBox;
            #endregion

            // Verify that the 'Exists' property of 'ServiceNameTextBox' text box equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_ServiceName_Textbox_ExistsExpectedValues.ServiceNameTextBoxExists, serviceNameTextBox.Exists, "Save dialog service name textbox does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_WorkspaceName_Exists - Use 'Assert_SaveDialog_WorkspaceName_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_WorkspaceName_Exists()
        {
            #region Variable Declarations
            WpfText workspaceName = this.SaveDialogWindow.WorkspaceName;
            #endregion

            // Verify that the 'Exists' property of 'Unsaved 1' label equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_WorkspaceName_ExistsExpectedValues.WorkspaceNameExists, workspaceName.Exists, "Save dialog workspace name does not exist");
        }
        
        /// <summary>
        /// Assert_Scheduler_ConncectControl_Exists - Use 'Assert_Scheduler_ConncectControl_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_ConncectControl_Exists()
        {
            #region Variable Declarations
            WpfComboBox serverComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.ConnectControl.ServerComboBox;
            #endregion

            // Verify that the 'Exists' property of 'UI_SettingsServerComboBox_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_ConncectControl_ExistsExpectedValues.ServerComboBoxExists, serverComboBox.Exists, "Connect control in the scheduler does not exist");
        }
        
        /// <summary>
        /// Assert_Scheduler_ConnectButton_Exists - Use 'Assert_Scheduler_ConnectButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_ConnectButton_Exists()
        {
            #region Variable Declarations
            WpfButton connectServerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.ConnectControl.ConnectServerButton;
            #endregion

            // Verify that the 'Exists' property of 'UI_SettingsServerConnectButton_AutoID' button equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_ConnectButton_ExistsExpectedValues.ConnectServerButtonExists, connectServerButton.Exists, "Connect button in the scheduler does not exist");
        }
        
        /// <summary>
        /// Assert_Scheduler_ConnectControl_Edit_Exists - Use 'Assert_Scheduler_ConnectControl_Edit_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_ConnectControl_Edit_Exists()
        {
            #region Variable Declarations
            WpfButton editServerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.ConnectControl.EditServerButton;
            #endregion

            // Verify that the 'Exists' property of '...' button equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_ConnectControl_Edit_ExistsExpectedValues.EditServerButtonExists, editServerButton.Exists, "Edit button in the scheduler does not exist");
        }
        
        /// <summary>
        /// Assert_Scheduler_CreateNewTask_Exists - Use 'Assert_Scheduler_CreateNewTask_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_CreateNewTask_Exists()
        {
            #region Variable Declarations
            WpfButton newTaskButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.SchedulesList.SchedulerListItem.CreateTaskButton.NewTaskButton;
            #endregion

            // Verify that the 'Exists' property of first button next to '' button equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_CreateNewTask_ExistsExpectedValues.NewTaskButtonExists, newTaskButton.Exists, "Create new task button does not exist in the scheduler");
        }
        
        /// <summary>
        /// Assert_Scheduler_DeleteButton_Exists - Use 'Assert_Scheduler_DeleteButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_DeleteButton_Exists()
        {
            #region Variable Declarations
            WpfButton deleteTaskButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.SchedulesList.DeleteTaskButton;
            #endregion

            // Verify that the 'Exists' property of '...' button equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_DeleteButton_ExistsExpectedValues.DeleteTaskButtonExists, deleteTaskButton.Exists, "Delete task button does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_DisabledRadioButton_Exists - Use 'Assert_Scheduler_DisabledRadioButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_DisabledRadioButton_Exists()
        {
            #region Variable Declarations
            WpfRadioButton disabledRadioButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.DisabledRadioButton;
            #endregion

            // Verify that the 'Exists' property of 'Disabled' radio button equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_DisabledRadioButton_ExistsExpectedValues.DisabledRadioButtonExists, disabledRadioButton.Exists, "Disable radio button in the scheduler window does not exist");
        }
        
        /// <summary>
        /// Assert_Scheduler_EditTrigger_Exists - Use 'Assert_Scheduler_EditTrigger_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_EditTrigger_Exists()
        {
            #region Variable Declarations
            WpfButton editTriggerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.EditTriggerButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_EditTrigger_ExistsExpectedValues.EditTriggerButtonExists, editTriggerButton.Exists, "Edit trigger button does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_EnabledRadioButton_Exists - Use 'Assert_Scheduler_EnabledRadioButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_EnabledRadioButton_Exists()
        {
            #region Variable Declarations
            WpfRadioButton enabledRadioButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.EnabledRadioButton;
            #endregion

            // Verify that the 'Exists' property of 'Enabled' radio button equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_EnabledRadioButton_ExistsExpectedValues.EnabledRadioButtonExists, enabledRadioButton.Exists, "Enabled Radio button does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_ErrorMessage_Exists - Use 'Assert_Scheduler_ErrorMessage_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_ErrorMessage_Exists()
        {
            #region Variable Declarations
            WpfText errorMessageText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.ErrorMessageText;
            #endregion

            // Verify that the 'Exists' property of 'Please select a workflow to schedule' label equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_ErrorMessage_ExistsExpectedValues.ErrorMessageTextExists, errorMessageText.Exists, "Scheduler error message does not exist ");
        }
        
        /// <summary>
        /// Assert_Scheduler_HistoryInput_Exists - Use 'Assert_Scheduler_HistoryInput_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_HistoryInput_Exists()
        {
            #region Variable Declarations
            WpfEdit numOfHistoryTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.NumOfHistoryTextBoxEdit;
            #endregion

            // Verify that the 'Exists' property of 'UI_NumOfHisTextBox' text box equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_HistoryInput_ExistsExpectedValues.NumOfHistoryTextBoxEditExists, numOfHistoryTextBoxEdit.Exists, "History Input value does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_HistoryLabel_Exists - Use 'Assert_Scheduler_HistoryLabel_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_HistoryLabel_Exists()
        {
            #region Variable Declarations
            WpfText numberofHistoryText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.NumberofHistoryText;
            #endregion

            // Verify that the 'Exists' property of 'Number of History records to load (0 = all)' label equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_HistoryLabel_ExistsExpectedValues.NumberofHistoryTextExists, numberofHistoryText.Exists, "Number of History records label does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_HistoryTable_Exists - Use 'Assert_Scheduler_HistoryTable_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_HistoryTable_Exists()
        {
            #region Variable Declarations
            WpfTable historyTable = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.HistoryTable;
            #endregion

            // Verify that the 'Exists' property of table equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_HistoryTable_ExistsExpectedValues.HistoryTableExists, historyTable.Exists, "Scheduled task history does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_NameInput_Exists - Use 'Assert_Scheduler_NameInput_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_NameInput_Exists()
        {
            #region Variable Declarations
            WpfEdit nameTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.NameTextbox;
            #endregion

            // Verify that the 'Exists' property of 'UI_NameTextbox' text box equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_NameInput_ExistsExpectedValues.NameTextboxExists, nameTextbox.Exists, "Name Input does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_NameLabel_Exists - Use 'Assert_Scheduler_NameLabel_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_NameLabel_Exists()
        {
            #region Variable Declarations
            WpfText nameText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.NameText;
            #endregion

            // Verify that the 'Exists' property of 'Name' label equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_NameLabel_ExistsExpectedValues.NameTextExists, nameText.Exists, "name label does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_PasswordInput_Exists - Use 'Assert_Scheduler_PasswordInput_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_PasswordInput_Exists()
        {
            #region Variable Declarations
            WpfEdit passwordTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.PasswordTextBoxEdit;
            #endregion

            // Verify that the 'Exists' property of 'UI_PasswordBox' text box equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_PasswordInput_ExistsExpectedValues.PasswordTextBoxEditExists, passwordTextBoxEdit.Exists, "Password input does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_PasswordLabel_Exists - Use 'Assert_Scheduler_PasswordLabel_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_PasswordLabel_Exists()
        {
            #region Variable Declarations
            WpfText passwordText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.PasswordText;
            #endregion

            // Verify that the 'Exists' property of 'Password' label equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_PasswordLabel_ExistsExpectedValues.PasswordTextExists, passwordText.Exists, "Password label does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_ResourcePicker_Exists - Use 'Assert_Scheduler_ResourcePicker_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_ResourcePicker_Exists()
        {
            #region Variable Declarations
            WpfButton resourcePickerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.ResourcePickerButton;
            #endregion

            // Verify that the 'Exists' property of '...' button equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_ResourcePicker_ExistsExpectedValues.ResourcePickerButtonExists, resourcePickerButton.Exists, "Resource picker button does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_RunTask_Checkbox_Exists - Use 'Assert_Scheduler_RunTask_Checkbox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_RunTask_Checkbox_Exists()
        {
            #region Variable Declarations
            WpfCheckBox runTaskCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.RunTaskCheckBox;
            #endregion

            // Verify that the 'Exists' property of 'Run task as soon as possible after a scheduled sta...' check box equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_RunTask_Checkbox_ExistsExpectedValues.RunTaskCheckBoxExists, runTaskCheckBox.Exists, "Run task checkbox does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_Status_RadioButton_Exists - Use 'Assert_Scheduler_Status_RadioButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_Status_RadioButton_Exists()
        {
            #region Variable Declarations
            WpfCheckBox statusCheckbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.SchedulesList.NewTask.StatusCheckbox;
            #endregion

            // Verify that the 'Exists' property of check box equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_Status_RadioButton_ExistsExpectedValues.StatusCheckboxExists, statusCheckbox.Exists, "Status radio button does not exist in the scheduler");
        }
        
        /// <summary>
        /// Assert_Scheduler_StatusLabe_Exists - Use 'Assert_Scheduler_StatusLabe_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_StatusLabe_Exists()
        {
            #region Variable Declarations
            WpfText statusText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.StatusText;
            #endregion

            // Verify that the 'Exists' property of 'Status' label equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_StatusLabe_ExistsExpectedValues.StatusTextExists, statusText.Exists, "Status label does not exist in the scheduler");
        }
        
        /// <summary>
        /// Assert_Scheduler_TriggerLabel_Exists - Use 'Assert_Scheduler_TriggerLabel_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_TriggerLabel_Exists()
        {
            #region Variable Declarations
            WpfText triggerText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.TriggerText;
            #endregion

            // Verify that the 'Exists' property of 'Triggered at' label equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_TriggerLabel_ExistsExpectedValues.TriggerTextExists, triggerText.Exists, "Trigger label does not exist in the Scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_TriggerValue_Exists - Use 'Assert_Scheduler_TriggerValue_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_TriggerValue_Exists()
        {
            #region Variable Declarations
            WpfText triggerValueText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.TriggerValueText;
            #endregion

            // Verify that the 'Exists' property of 'At 2:40 PM every day' label equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_TriggerValue_ExistsExpectedValues.TriggerValueTextExists, triggerValueText.Exists, "Trigger value does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_UserAccountLabel_Exists - Use 'Assert_Scheduler_UserAccountLabel_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_UserAccountLabel_Exists()
        {
            #region Variable Declarations
            WpfText uIRunasthefollowinguseText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.UIRunasthefollowinguseText;
            #endregion

            // Verify that the 'Exists' property of 'Run as the following user account' label equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_UserAccountLabel_ExistsExpectedValues.UIRunasthefollowinguseTextExists, uIRunasthefollowinguseText.Exists, "user account label does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_UsernameInput_Exists - Use 'Assert_Scheduler_UsernameInput_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_UsernameInput_Exists()
        {
            #region Variable Declarations
            WpfEdit userNameTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.UserNameTextBoxEdit;
            #endregion

            // Verify that the 'Exists' property of 'UI_UserNameTextBox' text box equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_UsernameInput_ExistsExpectedValues.UserNameTextBoxEditExists, userNameTextBoxEdit.Exists, "Username input does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_Usernamelabel_Exists - Use 'Assert_Scheduler_Usernamelabel_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_Usernamelabel_Exists()
        {
            #region Variable Declarations
            WpfText usernameText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.UsernameText;
            #endregion

            // Verify that the 'Exists' property of 'Username' label equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_Usernamelabel_ExistsExpectedValues.UsernameTextExists, usernameText.Exists, "Username label does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_WorkflowInput_Exists - Use 'Assert_Scheduler_WorkflowInput_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_WorkflowInput_Exists()
        {
            #region Variable Declarations
            WpfEdit workflowNameTextBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.WorkflowNameTextBox;
            #endregion

            // Verify that the 'Exists' property of 'UI_WorkflowNameTextBox_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_WorkflowInput_ExistsExpectedValues.WorkflowNameTextBoxExists, workflowNameTextBox.Exists, "Workflow input does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_WorkflowLabel_Exists - Use 'Assert_Scheduler_WorkflowLabel_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_WorkflowLabel_Exists()
        {
            #region Variable Declarations
            WpfText workflowText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.WorkflowText;
            #endregion

            // Verify that the 'Exists' property of 'Workflow' label equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_WorkflowLabel_ExistsExpectedValues.WorkflowTextExists, workflowText.Exists, "Workflow label does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Server_Version_Exists - Use 'Assert_Server_Version_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Server_Version_Exists()
        {
            #region Variable Declarations
            WpfWindow splashPageWindow = this.SplashPageWindow;
            #endregion

            // Verify that the 'Exists' property of 'SplashPage' window equals 'True'
            Assert.AreEqual(this.Assert_Server_Version_ExistsExpectedValues.SplashPageWindowExists, splashPageWindow.Exists, "Server version splash page does not exist");
        }
        
        /// <summary>
        /// Assert_Service_Picker_Dialog_Exists - Use 'Assert_Service_Picker_Dialog_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Service_Picker_Dialog_Exists()
        {
            #region Variable Declarations
            WpfWindow servicePickerDialog = this.MainStudioWindow.ServicePickerDialog;
            #endregion

            // Verify that the 'Exists' property of 'Wpf' window equals 'True'
            Assert.AreEqual(this.Assert_Service_Picker_Dialog_ExistsExpectedValues.ServicePickerDialogExists, servicePickerDialog.Exists, "Service picker dialog does not exist");
        }
        
        /// <summary>
        /// Assert_Service_Picker_Exists_OnDesignSurface - Use 'Assert_Service_Picker_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Service_Picker_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfWindow servicePickerWindow = this.ServicePickerWindow;
            #endregion

            // Verify that the 'Exists' property of 'Wpf' window equals 'True'
            Assert.AreEqual(this.Assert_Service_Picker_Exists_OnDesignSurfaceExpectedValues.ServicePickerWindowExists, servicePickerWindow.Exists, "Services Picker tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_ServiceLabel_DestinationServer_Exists - Use 'Assert_ServiceLabel_DestinationServer_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_ServiceLabel_DestinationServer_Exists()
        {
            #region Variable Declarations
            WpfText servicesText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.ServicesText;
            #endregion

            // Verify that the 'Exists' property of 'Services' label equals 'True'
            Assert.AreEqual(this.Assert_ServiceLabel_DestinationServer_ExistsExpectedValues.ServicesTextExists, servicesText.Exists, "Services Label in destination server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_ServicesCount_Label_Exists - Use 'Assert_ServicesCount_Label_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_ServicesCount_Label_Exists()
        {
            #region Variable Declarations
            WpfText serviceCountText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.ServiceCountText;
            #endregion

            // Verify that the 'Exists' property of '0' label equals 'True'
            Assert.AreEqual(this.Assert_ServicesCount_Label_ExistsExpectedValues.ServiceCountTextExists, serviceCountText.Exists, "Service Count value in destination server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_Settings_ConnectButton_Exists - Use 'Assert_Settings_ConnectButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Settings_ConnectButton_Exists()
        {
            #region Variable Declarations
            WpfButton connectServerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.ConnectControl.ConnectServerButton;
            #endregion

            // Verify that the 'Exists' property of 'UI_SettingsServerConnectButton_AutoID' button equals 'True'
            Assert.AreEqual(this.Assert_Settings_ConnectButton_ExistsExpectedValues.ConnectServerButtonExists, connectServerButton.Exists, "Connect button in the settings window does not exist");
        }
        
        /// <summary>
        /// Assert_Settings_ConnectControl_Edit_Button_Exists - Use 'Assert_Settings_ConnectControl_Edit_Button_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Settings_ConnectControl_Edit_Button_Exists()
        {
            #region Variable Declarations
            WpfButton editServerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.ConnectControl.EditServerButton;
            #endregion

            // Verify that the 'Exists' property of '...' button equals 'True'
            Assert.AreEqual(this.Assert_Settings_ConnectControl_Edit_Button_ExistsExpectedValues.EditServerButtonExists, editServerButton.Exists, "Edit Server button does not exist in the Settings window");
        }
        
        /// <summary>
        /// Assert_Settings_ConnectControl_Exists - Use 'Assert_Settings_ConnectControl_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Settings_ConnectControl_Exists()
        {
            #region Variable Declarations
            WpfComboBox settingsServerComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.ConnectControl.SettingsServerComboBox;
            #endregion

            // Verify that the 'Exists' property of 'UI_SettingsServerComboBox_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Assert_Settings_ConnectControl_ExistsExpectedValues.SettingsServerComboBoxExists, settingsServerComboBox.Exists, "Connect Control in the Settings window does not exist");
        }
        
        /// <summary>
        /// Assert_Settings_LoggingTab_Exists - Use 'Assert_Settings_LoggingTab_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Settings_LoggingTab_Exists()
        {
            #region Variable Declarations
            WpfTabPage loggingTab = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.UIItemTabList.LoggingTab;
            #endregion

            // Verify that the 'Exists' property of 'System.Windows.Controls.TabItem Header: Content:' tab equals 'True'
            Assert.AreEqual(this.Assert_Settings_LoggingTab_ExistsExpectedValues.LoggingTabExists, loggingTab.Exists, "Logging tab does not exist in the settings window");
        }
        
        /// <summary>
        /// Assert_Settings_ResourcePermissions_Exists - Use 'Assert_Settings_ResourcePermissions_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Settings_ResourcePermissions_Exists()
        {
            #region Variable Declarations
            WpfTable resourcePermissions = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.UIItemTabList.SecurityTab.SecurityWindow.ResourcePermissions;
            #endregion

            // Verify that the 'Exists' property of 'ResourcePermissionsDataGrid' table equals 'True'
            Assert.AreEqual(this.Assert_Settings_ResourcePermissions_ExistsExpectedValues.ResourcePermissionsExists, resourcePermissions.Exists, "Resource Permissions does not exist in the settings window");
        }
        
        /// <summary>
        /// Assert_Settings_SecurityTab_Exists - Use 'Assert_Settings_SecurityTab_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Settings_SecurityTab_Exists()
        {
            #region Variable Declarations
            WpfTabPage securityTab = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.UIItemTabList.SecurityTab;
            #endregion

            // Verify that the 'Exists' property of 'System.Windows.Controls.TabItem Header: Content:' tab equals 'True'
            Assert.AreEqual(this.Assert_Settings_SecurityTab_ExistsExpectedValues.SecurityTabExists, securityTab.Exists, "Security tab does not exist in the settings window");
        }
        
        /// <summary>
        /// Assert_Settings_ServerPermissions_Exists - Use 'Assert_Settings_ServerPermissions_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Settings_ServerPermissions_Exists()
        {
            #region Variable Declarations
            WpfTable serverPermissions = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.UIItemTabList.SecurityTab.SecurityWindow.ServerPermissions;
            #endregion

            // Verify that the 'Exists' property of 'ServerPermissionsDataGrid' table equals 'True'
            Assert.AreEqual(this.Assert_Settings_ServerPermissions_ExistsExpectedValues.ServerPermissionsExists, serverPermissions.Exists, "Server Permissions does not exist in the settings window");
        }
        
        /// <summary>
        /// Assert_ShowDependencies_Button_DestinationServer_Exists - Use 'Assert_ShowDependencies_Button_DestinationServer_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_ShowDependencies_Button_DestinationServer_Exists()
        {
            #region Variable Declarations
            WpfButton showDependenciesButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.ShowDependenciesButton;
            #endregion

            // Verify that the 'Exists' property of 'Select All Dependencies' button equals 'True'
            Assert.AreEqual(this.Assert_ShowDependencies_Button_DestinationServer_ExistsExpectedValues.ShowDependenciesButtonExists, showDependenciesButton.Exists, "Select All Dependencies button Destination Server does not exist");
        }
        
        /// <summary>
        /// Assert_Source_Server_Edit_Exists - Use 'Assert_Source_Server_Edit_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Source_Server_Edit_Exists()
        {
            #region Variable Declarations
            WpfButton editSourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.EditSourceButton;
            #endregion

            // Verify that the 'Exists' property of '...' button equals 'True'
            Assert.AreEqual(this.Assert_Source_Server_Edit_ExistsExpectedValues.EditSourceButtonExists, editSourceButton.Exists, "Edit source server button does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_Source_Server_Name_Exists - Use 'Assert_Source_Server_Name_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Source_Server_Name_Exists()
        {
            #region Variable Declarations
            WpfTreeItem sourceServerName = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.SourceServerName;
            #endregion

            // Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
            Assert.AreEqual(this.Assert_Source_Server_Name_ExistsExpectedValues.SourceServerNameExists, sourceServerName.Exists, "Source server name in deploy window does not exist");
        }
        
        /// <summary>
        /// Assert_SourceCount_DestinationServer_Exists - Use 'Assert_SourceCount_DestinationServer_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SourceCount_DestinationServer_Exists()
        {
            #region Variable Declarations
            WpfText sourceCountText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.SourceCountText;
            #endregion

            // Verify that the 'Exists' property of '0' label equals 'True'
            Assert.AreEqual(this.Assert_SourceCount_DestinationServer_ExistsExpectedValues.SourceCountTextExists, sourceCountText.Exists, "Source Count value in the destination server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_SourceLabel_DestinationServer_Exists - Use 'Assert_SourceLabel_DestinationServer_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SourceLabel_DestinationServer_Exists()
        {
            #region Variable Declarations
            WpfText sourcesText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.SourcesText;
            #endregion

            // Verify that the 'Exists' property of 'Sources' label equals 'True'
            Assert.AreEqual(this.Assert_SourceLabel_DestinationServer_ExistsExpectedValues.SourcesTextExists, sourcesText.Exists, "Source label in destination server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_SplitPane_Content_Exists - Use 'Assert_SplitPane_Content_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SplitPane_Content_Exists()
        {
            #region Variable Declarations
            WpfCustom splitPaneContent = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent;
            #endregion

            // Verify that the 'Exists' property of 'SplitPaneContent' custom control equals 'True'
            Assert.AreEqual(this.Assert_SplitPane_Content_ExistsExpectedValues.SplitPaneContentExists, splitPaneContent.Exists, "Split pane content does not exist");
        }
        
        /// <summary>
        /// Assert_SplitPane_Left_Exists - Use 'Assert_SplitPane_Left_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SplitPane_Left_Exists()
        {
            #region Variable Declarations
            WpfCustom splitPaneMiddle = this.MainStudioWindow.DockManager.SplitPaneMiddle;
            #endregion

            // Verify that the 'Exists' property of 'SplitPaneMiddle' custom control equals 'True'
            Assert.AreEqual(this.Assert_SplitPane_Left_ExistsExpectedValues.SplitPaneMiddleExists, splitPaneMiddle.Exists, "Split pane left does not exist");
        }
        
        /// <summary>
        /// Assert_SplitPane_Right_Exists - Use 'Assert_SplitPane_Right_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SplitPane_Right_Exists()
        {
            #region Variable Declarations
            WpfCustom splitPaneRight = this.MainStudioWindow.DockManager.SplitPaneRight;
            #endregion

            // Verify that the 'Exists' property of 'SplitPaneRight' custom control equals 'True'
            Assert.AreEqual(this.Assert_SplitPane_Right_ExistsExpectedValues.SplitPaneRightExists, splitPaneRight.Exists, "Split pane right does not exist");
        }
        
        /// <summary>
        /// Assert_SuccessMessage_Label_Exists - Use 'Assert_SuccessMessage_Label_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SuccessMessage_Label_Exists()
        {
            #region Variable Declarations
            WpfText successMessageText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.SuccessMessageText;
            #endregion

            // Verify that the 'Exists' property of '1 Resource Deployed Successfully.' label equals 'True'
            Assert.AreEqual(this.Assert_SuccessMessage_Label_ExistsExpectedValues.SuccessMessageTextExists, successMessageText.Exists, "Success message label does not exist in destination server of the deploy window");
        }
        
        /// <summary>
        /// Assert_TabHeader_Exists - Use 'Assert_TabHeader_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_TabHeader_Exists()
        {
            #region Variable Declarations
            WpfTabPage tabContextMenu = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.TabContextMenu;
            #endregion

            // Verify that the 'Exists' property of 'Dev2.Studio.ViewModels.Help.HelpViewModel' tab equals 'True'
            Assert.AreEqual(this.Assert_TabHeader_ExistsExpectedValues.TabContextMenuExists, tabContextMenu.Exists, "Tab header does not exist");
        }
        
        /// <summary>
        /// Assert_Toolbox_FilterTextbox_Exists - Use 'Assert_Toolbox_FilterTextbox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Toolbox_FilterTextbox_Exists()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            #endregion

            // Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
            Assert.AreEqual(this.Assert_Toolbox_FilterTextbox_ExistsExpectedValues.SearchTextBoxExists, searchTextBox.Exists, "Toolbox filter textbox does not exist");
        }
        
        /// <summary>
        /// Assert_Toolbox_RefreshButton_Exists - Use 'Assert_Toolbox_RefreshButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Toolbox_RefreshButton_Exists()
        {
            #region Variable Declarations
            WpfButton refreshButton = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.RefreshButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_Toolbox_RefreshButton_ExistsExpectedValues.RefreshButtonExists, refreshButton.Exists, "Toolbox refresh button does not exist");
        }
        
        /// <summary>
        /// Assert_UnLock_Button_Exists - Use 'Assert_UnLock_Button_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_UnLock_Button_Exists()
        {
            #region Variable Declarations
            WpfButton lockMenuButton = this.MainStudioWindow.SideMenuBar.LockMenuButton;
            #endregion

            // Verify that the 'Exists' property of 'Lock / unlock the menu' button equals 'True'
            Assert.AreEqual(this.Assert_UnLock_Button_ExistsExpectedValues.LockMenuButtonExists, lockMenuButton.Exists, "Assert unlock does not exist on the side menu");
        }
        
        /// <summary>
        /// Assert_VariableList_AddedRecordset - Use 'Assert_VariableList_AddedRecordsetParams' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_AddedRecordset()
        {
            #region Variable Declarations
            WpfCell uIItemUnlimitedApplicaCell = this.UIWarewolfDEV2LEROYWARWindow.UISmallViewContentCustom.UISmallDataGridTable.UIUI_ActivityGridRow_1Row.UIItemUnlimitedApplicaCell;
            WpfTree uIUI_VariableTreeView_Tree = this.UIWarewolfDEV2LEROYWARWindow.UIVARIABLESCustom.UIUI_VariablesControl_Custom.UIUI_VariableTreeView_Tree;
            #endregion

            // Type 'rec().set' in 'Item: Unlimited.Applications.BusinessDesignStudio....' cell
            uIItemUnlimitedApplicaCell.Value = this.Assert_VariableList_AddedRecordsetParams.UIItemUnlimitedApplicaCellValue;

            // Click 'UI_VariableTreeView_AutoID' tree
            Mouse.Click(uIUI_VariableTreeView_Tree, new Point(173, 187));
        }
        
        /// <summary>
        /// Assert_VariableList_AddedVariable - Use 'Assert_VariableList_AddedVariableParams' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_AddedVariable()
        {
            #region Variable Declarations
            WpfCell uIItemUnlimitedApplicaCell = this.UIWarewolfDEV2LEROYWARWindow.UISmallViewContentCustom.UISmallDataGridTable.UIUI_ActivityGridRow_0Row.UIItemUnlimitedApplicaCell;
            WpfTree uIUI_VariableTreeView_Tree = this.UIWarewolfDEV2LEROYWARWindow.UIVARIABLESCustom.UIUI_VariablesControl_Custom.UIUI_VariableTreeView_Tree;
            #endregion

            // Type '[[var]]' in 'Item: Unlimited.Applications.BusinessDesignStudio....' cell
            uIItemUnlimitedApplicaCell.Value = this.Assert_VariableList_AddedVariableParams.UIItemUnlimitedApplicaCellValue;

            // Click 'UI_VariableTreeView_AutoID' tree
            Mouse.Click(uIUI_VariableTreeView_Tree, new Point(164, 152));
        }
        
        /// <summary>
        /// Assert_VariableList_DataInputTree_Exists - Use 'Assert_VariableList_DataInputTree_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_DataInputTree_Exists()
        {
            #region Variable Declarations
            WpfTree variableTreeView = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.VariableTreeView;
            #endregion

            // Verify that the 'Exists' property of 'UI_VariableTreeView_AutoID' tree equals 'True'
            Assert.AreEqual(this.Assert_VariableList_DataInputTree_ExistsExpectedValues.VariableTreeViewExists, variableTreeView.Exists, "Variable list data input tree does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_DeleteButton_Exists - Use 'Assert_VariableList_DeleteButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_DeleteButton_Exists()
        {
            #region Variable Declarations
            WpfButton deleteButton = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.DeleteButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_VariableList_DeleteButton_ExistsExpectedValues.DeleteButtonExists, deleteButton.Exists, "Variable list delete button does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_Exists - Use 'Assert_VariableList_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_Exists()
        {
            #region Variable Declarations
            WpfCustom variablesControl = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl;
            #endregion

            // Verify that the 'Exists' property of 'UI_VariablesControl_AutoID' custom control equals 'True'
            Assert.AreEqual(this.Assert_VariableList_ExistsExpectedValues.VariablesControlExists, variablesControl.Exists, "Variable list view does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_Recordset_ChildTextBox_Exists - Use 'Assert_VariableList_Recordset_ChildTextBox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_Recordset_ChildTextBox_Exists()
        {
            #region Variable Declarations
            WpfEdit recordsetNameChildTextBox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.VariableTreeView.RecordsetTreeItem.RecordsetModelTreeItem1.RecordsetChildModelTreeItem.RecordsetNameChildScrolBarPane.RecordsetNameChildTextBox;
            #endregion

            // Verify that the 'Exists' property of 'UI_NameTextBox_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_VariableList_Recordset_ChildTextBox_ExistsExpectedValues.RecordsetNameChildTextBoxExists, recordsetNameChildTextBox.Exists, "Variable list recordset child textbox does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_RecordsetInput_CheckBox_Exists - Use 'Assert_VariableList_RecordsetInput_CheckBox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_RecordsetInput_CheckBox_Exists()
        {
            #region Variable Declarations
            WpfCheckBox recordsetInputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.VariableTreeView.RecordsetTreeItem.RecordsetModelTreeItem1.RecordsetInputCheckbox;
            #endregion

            // Verify that the 'Exists' property of 'UI_IsInputCheckbox_AutoID' check box equals 'True'
            Assert.AreEqual(this.Assert_VariableList_RecordsetInput_CheckBox_ExistsExpectedValues.RecordsetInputCheckboxExists, recordsetInputCheckbox.Exists, "Variable list recordset input checkbox does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_RecordsetInput_ChildCheckBox_Exists - Use 'Assert_VariableList_RecordsetInput_ChildCheckBox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_RecordsetInput_ChildCheckBox_Exists()
        {
            #region Variable Declarations
            WpfCheckBox recordsetChildInputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.VariableTreeView.RecordsetTreeItem.RecordsetModelTreeItem1.RecordsetChildModelTreeItem.RecordsetChildInputCheckbox;
            #endregion

            // Verify that the 'Exists' property of 'UI_IsInputCheckbox_AutoID' check box equals 'True'
            Assert.AreEqual(this.Assert_VariableList_RecordsetInput_ChildCheckBox_ExistsExpectedValues.RecordsetChildInputCheckboxExists, recordsetChildInputCheckbox.Exists, "Variable list recordset child input checkbox does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_RecordsetItem_Exists - Use 'Assert_VariableList_RecordsetItem_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_RecordsetItem_Exists()
        {
            #region Variable Declarations
            WpfTreeItem recordsetTreeItem = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.VariableTreeView.RecordsetTreeItem;
            #endregion

            // Verify that the 'Exists' property of tree item numbered 2 in 'UI_VariableTreeView_AutoID' tree item equals 'True'
            Assert.AreEqual(this.Assert_VariableList_RecordsetItem_ExistsExpectedValues.RecordsetTreeItemExists, recordsetTreeItem.Exists, "Variable list recordset item does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_RecordsetOutput_CheckBox_Exists - Use 'Assert_VariableList_RecordsetOutput_CheckBox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_RecordsetOutput_CheckBox_Exists()
        {
            #region Variable Declarations
            WpfCheckBox recordsetOutputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.VariableTreeView.RecordsetTreeItem.RecordsetModelTreeItem1.RecordsetOutputCheckbox;
            #endregion

            // Verify that the 'Exists' property of 'UI_IsOutputCheckbox_AutoID' check box equals 'True'
            Assert.AreEqual(this.Assert_VariableList_RecordsetOutput_CheckBox_ExistsExpectedValues.RecordsetOutputCheckboxExists, recordsetOutputCheckbox.Exists, "Variable list recordset output checkbox does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_RecordsetOutput_ChildCheckBox_Exists - Use 'Assert_VariableList_RecordsetOutput_ChildCheckBox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_RecordsetOutput_ChildCheckBox_Exists()
        {
            #region Variable Declarations
            WpfCheckBox recordsetChildOutputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.VariableTreeView.RecordsetTreeItem.RecordsetModelTreeItem1.RecordsetChildModelTreeItem.RecordsetChildOutputCheckbox;
            #endregion

            // Verify that the 'Exists' property of 'UI_IsOutputCheckbox_AutoID' check box equals 'True'
            Assert.AreEqual(this.Assert_VariableList_RecordsetOutput_ChildCheckBox_ExistsExpectedValues.RecordsetChildOutputCheckboxExists, recordsetChildOutputCheckbox.Exists, "Variable list recordset child output checkbox does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_RecordsetTextBox_Exists - Use 'Assert_VariableList_RecordsetTextBox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_RecordsetTextBox_Exists()
        {
            #region Variable Declarations
            WpfEdit recordsetNameTextBox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.VariableTreeView.RecordsetTreeItem.RecordsetModelTreeItem1.RecordsetNameScrolBarPane.RecordsetNameTextBox;
            #endregion

            // Verify that the 'Exists' property of 'UI_NameTextBox_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_VariableList_RecordsetTextBox_ExistsExpectedValues.RecordsetNameTextBoxExists, recordsetNameTextBox.Exists, "Variable list recordset textbox does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_SortButton_Exists - Use 'Assert_VariableList_SortButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_SortButton_Exists()
        {
            #region Variable Declarations
            WpfButton sortButton = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.SortButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_VariableList_SortButton_ExistsExpectedValues.SortButtonExists, sortButton.Exists, "Variable list sort button does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_VariableInput_CheckBox_Exists - Use 'Assert_VariableList_VariableInput_CheckBox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_VariableInput_CheckBox_Exists()
        {
            #region Variable Declarations
            WpfCheckBox variableInputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.VariableTreeView.VariableTreeItem.VariableModelTreeItem1.VariableInputCheckbox;
            #endregion

            // Verify that the 'Exists' property of 'UI_IsInputCheckbox_AutoID' check box equals 'True'
            Assert.AreEqual(this.Assert_VariableList_VariableInput_CheckBox_ExistsExpectedValues.VariableInputCheckboxExists, variableInputCheckbox.Exists, "Variable list variable input checkbox does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_VariableItem_Exists - Use 'Assert_VariableList_VariableItem_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_VariableItem_Exists()
        {
            #region Variable Declarations
            WpfTreeItem variableTreeItem = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.VariableTreeView.VariableTreeItem;
            #endregion

            // Verify that the 'Exists' property of tree item numbered 1 in 'UI_VariableTreeView_AutoID' tree item equals 'True'
            Assert.AreEqual(this.Assert_VariableList_VariableItem_ExistsExpectedValues.VariableTreeItemExists, variableTreeItem.Exists, "Variable list variable item does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_VariableOutput_CheckBox_Exists - Use 'Assert_VariableList_VariableOutput_CheckBox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_VariableOutput_CheckBox_Exists()
        {
            #region Variable Declarations
            WpfCheckBox variableOutputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.VariableTreeView.VariableTreeItem.VariableModelTreeItem1.VariableOutputCheckbox;
            #endregion

            // Verify that the 'Exists' property of 'UI_IsOutputCheckbox_AutoID' check box equals 'True'
            Assert.AreEqual(this.Assert_VariableList_VariableOutput_CheckBox_ExistsExpectedValues.VariableOutputCheckboxExists, variableOutputCheckbox.Exists, "Variable list variable output checkbox does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_VariableTextBox_Exists - Use 'Assert_VariableList_VariableTextBox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_VariableTextBox_Exists()
        {
            #region Variable Declarations
            WpfEdit variableNameTextBox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.VariableTreeView.VariableTreeItem.VariableModelTreeItem1.VariableNameScrolBarPane.VariableNameTextBox;
            #endregion

            // Verify that the 'Exists' property of 'UI_NameTextBox_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_VariableList_VariableTextBox_ExistsExpectedValues.VariableNameTextBoxExists, variableNameTextBox.Exists, "Variable list variable textbox does not exist");
        }
        
        /// <summary>
        /// Assert_Web_Source_Exists - Use 'Assert_Web_Source_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Web_Source_Exists()
        {
            #region Variable Declarations
            WpfButton webSourceButton = this.MainStudioWindow.SideMenuBar.WebSourceButton;
            #endregion

            // Verify that the 'Exists' property of 'Create a new web source' button equals 'True'
            Assert.AreEqual(this.Assert_Web_Source_ExistsExpectedValues.WebSourceButtonExists, webSourceButton.Exists, "Web Source does not exist in the side menu");
        }
        
        /// <summary>
        /// Assert_WebSource_ReqTypeComboBox_Exists - Use 'Assert_WebSource_ReqTypeComboBox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_WebSource_ReqTypeComboBox_Exists()
        {
            #region Variable Declarations
            WpfComboBox requestTypesComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.NewWebConnectorTab.WorkSurfaceContext.RequestTypesComboBox;
            #endregion

            // Verify that the 'Exists' property of 'RequestTypes' combo box equals 'True'
            Assert.AreEqual(this.Assert_WebSource_ReqTypeComboBox_ExistsExpectedValues.RequestTypesComboBoxExists, requestTypesComboBox.Exists, "Request control not found");
        }
        
        /// <summary>
        /// Click_Cancel_Service_Picker_Dialog
        /// </summary>
        public void Click_Cancel_Service_Picker_Dialog()
        {
            #region Variable Declarations
            WpfButton cancel = this.MainStudioWindow.ServicePickerDialog.Cancel;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(cancel, new Point(57, 6));
        }
        
        /// <summary>
        /// Click_Close_FullScreen
        /// </summary>
        public void Click_Close_FullScreen()
        {
            #region Variable Declarations
            WpfHyperlink uIExitFullScreenF11Hyperlink = this.UIWarewolfDEV2LEROYWARWindow.UIExitFullScreenF11Text.UIExitFullScreenF11Hyperlink;
            #endregion

            // Click 'Exit Full Screen (F11)' link
            Mouse.Click(uIExitFullScreenF11Hyperlink, new Point(64, 5));
        }
        
        /// <summary>
        /// Click_Close_Studio_TopRibbon_Button
        /// </summary>
        public void Click_Close_Studio_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton closeStudioButton = this.MainStudioWindow.CloseStudioButton;
            #endregion

            // Click '' button
            Mouse.Click(closeStudioButton, new Point(23, 1));
        }
        
        /// <summary>
        /// Click_Debug_Ribbon_Button
        /// </summary>
        public void Click_Debug_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton runAndDebugButton = this.MainStudioWindow.SideMenuBar.RunAndDebugButton;
            #endregion

            // Click 'Run and debug your workflow service' button
            Mouse.Click(runAndDebugButton, new Point(13, 14));
        }
        
        /// <summary>
        /// Click_Deploy_Ribbon_Button
        /// </summary>
        public void Click_Deploy_Ribbon_Button()
        {
            #region Variable Declarations
            WpfText deployIcon = this.MainStudioWindow.SideMenuBar.CollapsedSideMenu.DeployIcon;
            #endregion

            // Click '' label
            Mouse.Click(deployIcon, new Point(16, 11));
        }
        
        /// <summary>
        /// Click_Dock_Explorer
        /// </summary>
        public void Click_Dock_Explorer()
        {
            #region Variable Declarations
            WpfCustom uIItemCustom4 = this.UIWarewolfDEV2LEROYWARWindow.UIItemCustom4;
            #endregion

            // Move custom control
            Mouse.StartDragging(uIItemCustom4, new Point(250, 16));
            Mouse.StopDragging(uIItemCustom4, -216, 217);
        }
        
        /// <summary>
        /// Click_Dock_ToolBox
        /// </summary>
        public void Click_Dock_ToolBox()
        {
            #region Variable Declarations
            WpfCustom uIItemCustom4 = this.UIWarewolfDEV2LEROYWARWindow.UIItemCustom4;
            #endregion

            // Move custom control
            Mouse.StartDragging(uIItemCustom4, new Point(234, 18));
            Mouse.StopDragging(uIItemCustom4, -66, -27);
        }
        
        /// <summary>
        /// Click_Dock_VariableList
        /// </summary>
        public void Click_Dock_VariableList()
        {
            #region Variable Declarations
            WpfCustom uIItemCustom4 = this.UIWarewolfDEV2LEROYWARWindow.UIItemCustom4;
            WpfCustom uIItemCustom = this.UIWpfWindow.UIItemCustom;
            #endregion

            // Move custom control to custom control
            uIItemCustom.EnsureClickable(new Point(54, 13));
            Mouse.StartDragging(uIItemCustom4, new Point(251, 15));
            Mouse.StopDragging(uIItemCustom, new Point(54, 13));
        }
        
        /// <summary>
        /// Click_ExpandAndStepIn_NestedWorkflow - Use 'Click_ExpandAndStepIn_NestedWorkflowParams' to pass parameters into this method.
        /// </summary>
        public void Click_ExpandAndStepIn_NestedWorkflow()
        {
            #region Variable Declarations
            WpfTreeItem uIHelloWorldTreeItem = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree.UIHelloWorldTreeItem;
            #endregion

            // Expand 'Hello World' tree item
            uIHelloWorldTreeItem.Expanded = this.Click_ExpandAndStepIn_NestedWorkflowParams.UIHelloWorldTreeItemExpanded;
        }
        
        /// <summary>
        /// Click_FullScreen_TopRibbon_Button
        /// </summary>
        public void Click_FullScreen_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton maximizeRestoreStudioButton = this.MainStudioWindow.MaximizeRestoreStudioButton;
            #endregion

            // Click '' button
            Mouse.Click(maximizeRestoreStudioButton, new Point(12, 9));
        }
        
        /// <summary>
        /// Click_Input_OnRecordset_InVariableList - Use 'Click_Input_OnRecordset_InVariableListParams' to pass parameters into this method.
        /// </summary>
        public void Click_Input_OnRecordset_InVariableList()
        {
            #region Variable Declarations
            WpfCheckBox recordsetInputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.VariableTreeView.RecordsetTreeItem.RecordsetModelTreeItem1.RecordsetInputCheckbox;
            #endregion

            // Select 'UI_IsInputCheckbox_AutoID' check box
            recordsetInputCheckbox.Checked = this.Click_Input_OnRecordset_InVariableListParams.RecordsetInputCheckboxChecked;
        }
        
        /// <summary>
        /// Click_Input_OnVariable_InVariableList - Use 'Click_Input_OnVariable_InVariableListParams' to pass parameters into this method.
        /// </summary>
        public void Click_Input_OnVariable_InVariableList()
        {
            #region Variable Declarations
            WpfCheckBox variableInputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.VariableTreeView.VariableTreeItem.VariableModelTreeItem1.VariableInputCheckbox;
            #endregion

            // Select 'UI_IsInputCheckbox_AutoID' check box
            variableInputCheckbox.Checked = this.Click_Input_OnVariable_InVariableListParams.VariableInputCheckboxChecked;
        }
        
        /// <summary>
        /// Click_Knowledge_Ribbon_Button
        /// </summary>
        public void Click_Knowledge_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton knowledgeBaseButton = this.MainStudioWindow.SideMenuBar.KnowledgeBaseButton;
            #endregion

            // Click 'Knowledge Base' button
            Mouse.Click(knowledgeBaseButton, new Point(4, 8));
        }
        
        /// <summary>
        /// Click_Lock_Ribbon_Button
        /// </summary>
        public void Click_Lock_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton lockStudioButton = this.MainStudioWindow.LockStudioButton;
            #endregion

            // Click '' button
            Mouse.Click(lockStudioButton, new Point(14, 5));
        }
        
        /// <summary>
        /// Click_Maximize_Restore_TopRibbon_Button
        /// </summary>
        public void Click_Maximize_Restore_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton maximizeStudioButton = this.MainStudioWindow.MaximizeStudioButton;
            #endregion

            // Click '' button
            Mouse.Click(maximizeStudioButton, new Point(9, 11));
        }
        
        /// <summary>
        /// Click_Maximize_TopRibbon_Button
        /// </summary>
        public void Click_Maximize_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton maximizeStudioButton = this.MainStudioWindow.MaximizeStudioButton;
            #endregion

            // Click '' button
            Mouse.Click(maximizeStudioButton, new Point(14, 14));
        }
        
        /// <summary>
        /// Click_Minimize_TopRibbon_Button
        /// </summary>
        public void Click_Minimize_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton minimizeStudioButton = this.MainStudioWindow.MinimizeStudioButton;
            #endregion

            // Click '' button
            Mouse.Click(minimizeStudioButton, new Point(6, 14));
        }
        
        /// <summary>
        /// Click_Move_ToolboxWindow
        /// </summary>
        public void Click_Move_ToolboxWindow()
        {
            #region Variable Declarations
            WpfCustom uITOOLBOXCustom = this.UIWarewolfDEV2LEROYWARWindow.UIDockManagerCustom.UIZ9651af96607d48d7b87Custom.UITOOLBOXCustom;
            WpfCustom uIItemCustom = this.UIWpfWindow.UIItemCustom;
            #endregion

            // Move 'TOOL BOX' custom control to custom control
            uIItemCustom.EnsureClickable(new Point(57, 90));
            Mouse.StartDragging(uITOOLBOXCustom, new Point(445, 28));
            Mouse.StopDragging(uIItemCustom, new Point(57, 90));
        }
        
        /// <summary>
        /// Click_Nested_Workflow_Name
        /// </summary>
        public void Click_Nested_Workflow_Name()
        {
            #region Variable Declarations
            WpfButton uIHelloWorldButton = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree.UIHelloWorldTreeItem.UIHelloWorldTreeItem1.UIHelloWorldButton;
            #endregion

            // Click 'Hello World' button
            Mouse.Click(uIHelloWorldButton, new Point(37, 10));
        }
        
        /// <summary>
        /// Click_New_DB_Connector_Ribbon_Button
        /// </summary>
        public void Click_New_DB_Connector_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton databaseConnectorButton = this.MainStudioWindow.SideMenuBar.DatabaseConnectorButton;
            #endregion

            // Click 'Create a new database connector' button
            Mouse.Click(databaseConnectorButton, new Point(8, 22));
        }
        
        /// <summary>
        /// Click_New_Plugin_Connector_Ribbon_Button
        /// </summary>
        public void Click_New_Plugin_Connector_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton pluginConnectorButton = this.MainStudioWindow.SideMenuBar.PluginConnectorButton;
            #endregion

            // Click 'Create a new plugin connector' button
            Mouse.Click(pluginConnectorButton, new Point(35, 12));
        }
        
        /// <summary>
        /// Click_New_Workflow_Ribbon_Button
        /// </summary>
        public void Click_New_Workflow_Ribbon_Button()
        {
            #region Variable Declarations
            WpfText newWorkflowIcon = this.MainStudioWindow.SideMenuBar.CollapsedSideMenu.NewWorkflowIcon;
            #endregion

            // Click '' label
            Mouse.Click(newWorkflowIcon, new Point(3, 8));
        }
        
        /// <summary>
        /// Click_NewDatabaseSource_Ribbon_Button
        /// </summary>
        public void Click_NewDatabaseSource_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton uICreateanewdatabasesoButton = this.MainStudioWindow.SideMenuBar.CollapsedSideMenu.UICreateanewdatabasesoButton;
            #endregion

            // Click 'Create a new database source' button
            Mouse.Click(uICreateanewdatabasesoButton, new Point(16, 15));
        }
        
        /// <summary>
        /// Click_NewPluginSource_Ribbon_Button
        /// </summary>
        public void Click_NewPluginSource_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton uICreateanewpluginsourButton = this.MainStudioWindow.SideMenuBar.CollapsedSideMenu.UICreateanewpluginsourButton;
            #endregion

            // Click 'Create a new plugin source' button
            Mouse.Click(uICreateanewpluginsourButton, new Point(22, 13));
        }
        
        /// <summary>
        /// Click_NewWebSource_Ribbon_Button
        /// </summary>
        public void Click_NewWebSource_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton uICreateanewwebsourceButton = this.MainStudioWindow.SideMenuBar.CollapsedSideMenu.UICreateanewwebsourceButton;
            #endregion

            // Click 'Create a new web source' button
            Mouse.Click(uICreateanewwebsourceButton, new Point(13, 18));
        }
        
        /// <summary>
        /// Click_Output_OnRecordset_InVariableList - Use 'Click_Output_OnRecordset_InVariableListParams' to pass parameters into this method.
        /// </summary>
        public void Click_Output_OnRecordset_InVariableList()
        {
            #region Variable Declarations
            WpfCheckBox recordsetOutputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.VariableTreeView.RecordsetTreeItem.RecordsetModelTreeItem1.RecordsetOutputCheckbox;
            #endregion

            // Select 'UI_IsOutputCheckbox_AutoID' check box
            recordsetOutputCheckbox.Checked = this.Click_Output_OnRecordset_InVariableListParams.RecordsetOutputCheckboxChecked;
        }
        
        /// <summary>
        /// Click_Output_OnVariable_InVariableList - Use 'Click_Output_OnVariable_InVariableListParams' to pass parameters into this method.
        /// </summary>
        public void Click_Output_OnVariable_InVariableList()
        {
            #region Variable Declarations
            WpfCheckBox variableOutputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.VariableTreeView.VariableTreeItem.VariableModelTreeItem1.VariableOutputCheckbox;
            #endregion

            // Select 'UI_IsOutputCheckbox_AutoID' check box
            variableOutputCheckbox.Checked = this.Click_Output_OnVariable_InVariableListParams.VariableOutputCheckboxChecked;
        }
        
        /// <summary>
        /// Click_Position_Button
        /// </summary>
        public void Click_Position_Button()
        {
            #region Variable Declarations
            WpfMenuItem positionButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.FilesMenu.PositionButton;
            #endregion

            // Click 'PART_FilesMenuItem' menu item
            Mouse.Click(positionButton, new Point(8, 7));
        }
        
        /// <summary>
        /// Click_Save_Ribbon_Button
        /// </summary>
        public void Click_Save_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton saveButton = this.MainStudioWindow.SideMenuBar.SaveButton;
            #endregion

            // Click 'Save this tab' button
            Mouse.Click(saveButton, new Point(10, 5));
        }
        
        /// <summary>
        /// Click_SaveDialog_CancelButton
        /// </summary>
        public void Click_SaveDialog_CancelButton()
        {
            #region Variable Declarations
            WpfButton cancelButton = this.SaveDialogWindow.CancelButton;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(cancelButton, new Point(6, 7));
        }
        
        /// <summary>
        /// Click_Scheduler_Create_New_Task_Ribbon_Button
        /// </summary>
        public void Click_Scheduler_Create_New_Task_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton newTaskButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.SchedulesList.SchedulerListItem.CreateTaskButton.NewTaskButton;
            #endregion

            // Click first button next to '' button
            Mouse.Click(newTaskButton, new Point(151, 13));
        }
        
        /// <summary>
        /// Click_Scheduler_Delete_Task
        /// </summary>
        public void Click_Scheduler_Delete_Task()
        {
            #region Variable Declarations
            WpfButton deleteTaskButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.SchedulesList.DeleteTaskButton;
            #endregion

            // Click '...' button
            Mouse.Click(deleteTaskButton, new Point(3, 17));
        }
        
        /// <summary>
        /// Click_Scheduler_Disable_Task_Radio_Button - Use 'Click_Scheduler_Disable_Task_Radio_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_Scheduler_Disable_Task_Radio_Button()
        {
            #region Variable Declarations
            WpfCheckBox statusCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.SchedulesList.UINameworkflow1ResourcListItem.StatusCheckBox;
            #endregion

            // Clear check box
            statusCheckBox.Checked = this.Click_Scheduler_Disable_Task_Radio_ButtonParams.StatusCheckBoxChecked;
        }
        
        /// <summary>
        /// Click_Scheduler_EditTrigger_Button
        /// </summary>
        public void Click_Scheduler_EditTrigger_Button()
        {
            #region Variable Declarations
            WpfButton editTriggerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.EditTriggerButton;
            #endregion

            // Click '' button
            Mouse.Click(editTriggerButton, new Point(10, 9));
        }
        
        /// <summary>
        /// Click_Scheduler_Enable_Task_Radio_Button - Use 'Click_Scheduler_Enable_Task_Radio_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_Scheduler_Enable_Task_Radio_Button()
        {
            #region Variable Declarations
            WpfCheckBox statusCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.SchedulesList.UINameworkflow1ResourcListItem.StatusCheckBox;
            #endregion

            // Select check box
            statusCheckBox.Checked = this.Click_Scheduler_Enable_Task_Radio_ButtonParams.StatusCheckBoxChecked;
        }
        
        /// <summary>
        /// Click_Scheduler_ResourcePicker
        /// </summary>
        public void Click_Scheduler_ResourcePicker()
        {
            #region Variable Declarations
            WpfButton resourcePickerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.ResourcePickerButton;
            #endregion

            // Click '...' button
            Mouse.Click(resourcePickerButton, new Point(20, 12));
        }
        
        /// <summary>
        /// Click_Scheduler_ResourcePicker_Button
        /// </summary>
        public void Click_Scheduler_ResourcePicker_Button()
        {
            #region Variable Declarations
            WpfButton resourcePickerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.ResourcePickerButton;
            #endregion

            // Click '...' button
            Mouse.Click(resourcePickerButton, new Point(14, 13));
        }
        
        /// <summary>
        /// Click_Scheduler_Ribbon_Button
        /// </summary>
        public void Click_Scheduler_Ribbon_Button()
        {
            #region Variable Declarations
            WpfText newScheduledTaskIcon = this.MainStudioWindow.SideMenuBar.CollapsedSideMenu.NewScheduledTaskIcon;
            #endregion

            // Click '' label
            Mouse.Click(newScheduledTaskIcon, new Point(4, 12));
        }
        
        /// <summary>
        /// Click_Scheduler_RunTask - Use 'Click_Scheduler_RunTaskParams' to pass parameters into this method.
        /// </summary>
        public void Click_Scheduler_RunTask()
        {
            #region Variable Declarations
            WpfCheckBox runTaskCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.RunTaskCheckBox;
            #endregion

            // Select 'Run task as soon as possible after a scheduled sta...' check box
            runTaskCheckBox.Checked = this.Click_Scheduler_RunTaskParams.RunTaskCheckBoxChecked;
        }
        
        /// <summary>
        /// Click_Settings_Admin_ServerPermissions - Use 'Click_Settings_Admin_ServerPermissionsParams' to pass parameters into this method.
        /// </summary>
        public void Click_Settings_Admin_ServerPermissions()
        {
            #region Variable Declarations
            WpfCell uIFalseCell = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.UIItemTabList.SecurityTab.SecurityWindow.ServerPermissions.UIFalseCell;
            #endregion

            // Select 'False' cell
            uIFalseCell.Checked = this.Click_Settings_Admin_ServerPermissionsParams.UIFalseCellChecked;
        }
        
        /// <summary>
        /// Click_Settings_Contribute_ResourcePermissions - Use 'Click_Settings_Contribute_ResourcePermissionsParams' to pass parameters into this method.
        /// </summary>
        public void Click_Settings_Contribute_ResourcePermissions()
        {
            #region Variable Declarations
            WpfCell uIFalseCell = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.UIItemTabList.SecurityTab.SecurityWindow.ResourcePermissions.UIFalseCell;
            #endregion

            // Select 'False' cell
            uIFalseCell.Checked = this.Click_Settings_Contribute_ResourcePermissionsParams.UIFalseCellChecked;
        }
        
        /// <summary>
        /// Click_Settings_Contribute_ServerPermissions - Use 'Click_Settings_Contribute_ServerPermissionsParams' to pass parameters into this method.
        /// </summary>
        public void Click_Settings_Contribute_ServerPermissions()
        {
            #region Variable Declarations
            WpfCell uIFalseCell = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.UIItemTabList.SecurityTab.SecurityWindow.ServerPermissions.UIFalseCell;
            #endregion

            // Select 'False' cell
            uIFalseCell.Checked = this.Click_Settings_Contribute_ServerPermissionsParams.UIFalseCellChecked;
        }
        
        /// <summary>
        /// Click_Settings_Execute_ResourcePermissions - Use 'Click_Settings_Execute_ResourcePermissionsParams' to pass parameters into this method.
        /// </summary>
        public void Click_Settings_Execute_ResourcePermissions()
        {
            #region Variable Declarations
            WpfCell uIFalseCell = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.UIItemTabList.SecurityTab.SecurityWindow.ResourcePermissions.UIFalseCell;
            #endregion

            // Select 'False' cell
            uIFalseCell.Checked = this.Click_Settings_Execute_ResourcePermissionsParams.UIFalseCellChecked;
        }
        
        /// <summary>
        /// Click_Settings_ResourcePermissions_ResourcePicker
        /// </summary>
        public void Click_Settings_ResourcePermissions_ResourcePicker()
        {
            #region Variable Declarations
            WpfButton resourcePickerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.UIItemTabList.SecurityTab.SecurityWindow.ResourcePermissions.ResourceCell.ResourcePickerButton;
            #endregion

            // Click '...' button
            Mouse.Click(resourcePickerButton, new Point(6, 15));
        }
        
        /// <summary>
        /// Click_Settings_Ribbon_Button
        /// </summary>
        public void Click_Settings_Ribbon_Button()
        {
            #region Variable Declarations
            WpfText settingsIcon = this.MainStudioWindow.SideMenuBar.CollapsedSideMenu.SettingsIcon;
            #endregion

            // Click '' label
            Mouse.Click(settingsIcon, new Point(7, 2));
        }
        
        /// <summary>
        /// Click_Settings_View_ResourcePermissions - Use 'Click_Settings_View_ResourcePermissionsParams' to pass parameters into this method.
        /// </summary>
        public void Click_Settings_View_ResourcePermissions()
        {
            #region Variable Declarations
            WpfCell uIFalseCell = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.UIItemTabList.SecurityTab.SecurityWindow.ResourcePermissions.UIFalseCell;
            #endregion

            // Select 'False' cell
            uIFalseCell.Checked = this.Click_Settings_View_ResourcePermissionsParams.UIFalseCellChecked;
        }
        
        /// <summary>
        /// Click_Toggle_Pin_DebugOutput
        /// </summary>
        public void Click_Toggle_Pin_DebugOutput()
        {
            #region Variable Declarations
            WpfButton debugOutputUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(debugOutputUnpinBtn, new Point(11, 10));
        }
        
        /// <summary>
        /// Click_Toggle_Pin_Documentor
        /// </summary>
        public void Click_Toggle_Pin_Documentor()
        {
            #region Variable Declarations
            WpfButton documentorUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneLeft.Help.DocumentorUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(documentorUnpinBtn, new Point(2, 11));
        }
        
        /// <summary>
        /// Click_Toggle_Pin_Explorer
        /// </summary>
        public void Click_Toggle_Pin_Explorer()
        {
            #region Variable Declarations
            WpfButton explorerUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(explorerUnpinBtn, new Point(12, 9));
        }
        
        /// <summary>
        /// Click_Toggle_Pin_Toolbox
        /// </summary>
        public void Click_Toggle_Pin_Toolbox()
        {
            #region Variable Declarations
            WpfButton toolUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(toolUnpinBtn, new Point(10, 8));
        }
        
        /// <summary>
        /// Click_Toggle_Pin_VariableList
        /// </summary>
        public void Click_Toggle_Pin_VariableList()
        {
            #region Variable Declarations
            WpfButton variableUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariableUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(variableUnpinBtn, new Point(10, 14));
        }
        
        /// <summary>
        /// Click_Toggle_Unpiin_Toolbox
        /// </summary>
        public void Click_Toggle_Unpiin_Toolbox()
        {
            #region Variable Declarations
            WpfButton toolUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(toolUnpinBtn, new Point(15, 13));
        }
        
        /// <summary>
        /// Click_Toggle_Unpin_DebugOutput
        /// </summary>
        public void Click_Toggle_Unpin_DebugOutput()
        {
            #region Variable Declarations
            WpfButton debugOutputUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(debugOutputUnpinBtn, new Point(8, 14));
        }
        
        /// <summary>
        /// Click_Toggle_Unpin_Documentor
        /// </summary>
        public void Click_Toggle_Unpin_Documentor()
        {
            #region Variable Declarations
            WpfButton documentorUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneLeft.Help.DocumentorUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(documentorUnpinBtn, new Point(14, 13));
        }
        
        /// <summary>
        /// Click_Toggle_Unpin_Explorer
        /// </summary>
        public void Click_Toggle_Unpin_Explorer()
        {
            #region Variable Declarations
            WpfButton explorerUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(explorerUnpinBtn, new Point(13, 7));
        }
        
        /// <summary>
        /// Click_Toggle_Unpin_VariableList
        /// </summary>
        public void Click_Toggle_Unpin_VariableList()
        {
            #region Variable Declarations
            WpfButton variableUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariableUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(variableUnpinBtn, new Point(14, 15));
        }
        
        /// <summary>
        /// Click_UnDock_DebugOutput
        /// </summary>
        public void Click_UnDock_DebugOutput()
        {
            #region Variable Declarations
            WpfCustom uIOUTPUTCustom = this.UIWarewolfDEV2LEROYWARWindow.UIZaaf3f1dc2d1d407cadbCustom.UIZ74f8d4a07ae44ffcbd8Custom.UIOUTPUTCustom;
            WpfCustom uIItemCustom4 = this.UIWarewolfDEV2LEROYWARWindow.UIItemCustom4;
            #endregion

            // Move 'OUTPUT' custom control to custom control
            uIItemCustom4.EnsureClickable(new Point(220, 26));
            Mouse.StartDragging(uIOUTPUTCustom, new Point(220, 25));
            Mouse.StopDragging(uIItemCustom4, new Point(220, 26));
        }
        
        /// <summary>
        /// Click_UnDock_Documentor
        /// </summary>
        public void Click_UnDock_Documentor()
        {
            #region Variable Declarations
            WpfText uIWHATDOESTHISDOText = this.UIWarewolfDEV2LEROYWARWindow.UIZ16e631b821c94d90bacCustom.UIZ2da82c89e9c54f37a62TabList.UIWHATDOESTHISDOTabPage.UIWHATDOESTHISDOCustom.UIWHATDOESTHISDOText;
            WpfCustom uIItemCustom4 = this.UIWarewolfDEV2LEROYWARWindow.UIItemCustom4;
            #endregion

            // Move 'WHAT DOES THIS DO?' label to custom control
            uIItemCustom4.EnsureClickable(new Point(186, 25));
            Mouse.StartDragging(uIWHATDOESTHISDOText, new Point(167, 13));
            Mouse.StopDragging(uIItemCustom4, new Point(186, 25));
        }
        
        /// <summary>
        /// Click_UnDock_Explorer
        /// </summary>
        public void Click_UnDock_Explorer()
        {
            #region Variable Declarations
            WpfCustom explorer = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer;
            #endregion

            // Click 'UI_ExplorerControl_AutoID' custom control
            Mouse.Click(explorer, new Point(177, -13));
        }
        
        /// <summary>
        /// Click_UnDock_ToolBox
        /// </summary>
        public void Click_UnDock_ToolBox()
        {
            #region Variable Declarations
            WpfCustom uITOOLBOXCustom = this.UIWarewolfDEV2LEROYWARWindow.UIDockManagerCustom.UIZcfe13fc0d52945a9a79Custom.UITOOLBOXCustom;
            WpfCustom uIItemCustom4 = this.UIWarewolfDEV2LEROYWARWindow.UIItemCustom4;
            #endregion

            // Move 'TOOL BOX' custom control to custom control
            uIItemCustom4.EnsureClickable(new Point(216, 19));
            Mouse.StartDragging(uITOOLBOXCustom, new Point(502, 18));
            Mouse.StopDragging(uIItemCustom4, new Point(216, 19));
        }
        
        /// <summary>
        /// Click_UnDock_VariableList
        /// </summary>
        public void Click_UnDock_VariableList()
        {
            #region Variable Declarations
            WpfCustom uIVARIABLESCustom = this.UIWarewolfDEV2LEROYWARWindow.UIZaaf3f1dc2d1d407cadbCustom.UIZ74f8d4a07ae44ffcbd8Custom.UIVARIABLESCustom;
            WpfCustom uIItemCustom4 = this.UIWarewolfDEV2LEROYWARWindow.UIItemCustom4;
            #endregion

            // Move 'VARIABLES' custom control to custom control
            uIItemCustom4.EnsureClickable(new Point(242, 20));
            Mouse.StartDragging(uIVARIABLESCustom, new Point(242, 20));
            Mouse.StopDragging(uIItemCustom4, new Point(242, 20));
        }
        
        /// <summary>
        /// Click_Unlock_Ribbon_Button
        /// </summary>
        public void Click_Unlock_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton lockMenuButton = this.MainStudioWindow.SideMenuBar.LockMenuButton;
            #endregion

            // Click 'Lock / unlock the menu' button
            Mouse.Click(lockMenuButton, new Point(8, 6));
        }
        
        /// <summary>
        /// Click_Unlock_TopRibbon_Button
        /// </summary>
        public void Click_Unlock_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton lockStudioButton = this.MainStudioWindow.LockStudioButton;
            #endregion

            // Click '' button
            Mouse.Click(lockStudioButton, new Point(10, 12));
        }
        
        /// <summary>
        /// Click_Yes_DeleteConfirmDialog
        /// </summary>
        public void Click_Yes_DeleteConfirmDialog()
        {
            #region Variable Declarations
            WpfButton yesButton = this.MessageBoxWindow.YesButton;
            #endregion

            // Click 'Yes' button
            Mouse.Click(yesButton, new Point(36, 6));
        }
        
        /// <summary>
        /// Close_New_Workflow_Tab_Without_Saving
        /// </summary>
        public void Close_New_Workflow_Tab_Without_Saving()
        {
            #region Variable Declarations
            WpfButton uIItemButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.UIItemButton;
            WpfButton nOButton = this.MessageBoxWindow.NOButton;
            #endregion

            // Click '' button
            Mouse.Click(uIItemButton, new Point(12, 7));

            // Click 'No' button
            Mouse.Click(nOButton, new Point(32, 5));
        }
        
        /// <summary>
        /// DebugInput_Add_New_Line_InputData - Use 'DebugInput_Add_New_Line_InputDataParams' to pass parameters into this method.
        /// </summary>
        public void DebugInput_Add_New_Line_InputData()
        {
            #region Variable Declarations
            WpfCell uIDescriptionCell = this.DebugInputWindow.UITabItemsTabList.InputDataTab.DataListInputsTable.UIDescriptionCell;
            #endregion

            // Type 's' in 'Description' cell
            uIDescriptionCell.Value = this.DebugInput_Add_New_Line_InputDataParams.UIDescriptionCellValue;
        }
        
        /// <summary>
        /// DebugOutput_Exists - Use 'DebugOutput_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void DebugOutput_Exists()
        {
            #region Variable Declarations
            WpfCustom debugOutput = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput;
            #endregion

            // Verify that the 'Exists' property of 'OUTPUT' custom control equals 'True'
            Assert.AreEqual(this.DebugOutput_ExistsExpectedValues.DebugOutputExists, debugOutput.Exists, "Assert_DebugOutput_Exists");

            // Verify that the 'Exists' property of 'OUTPUT' custom control equals 'True'
            Assert.AreEqual(this.DebugOutput_ExistsExpectedValues.DebugOutputExists1, debugOutput.Exists, "Debug output does not exist");
        }
        
        /// <summary>
        /// DebugOutput_ExpandCollapseButton_Exists - Use 'DebugOutput_ExpandCollapseButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void DebugOutput_ExpandCollapseButton_Exists()
        {
            #region Variable Declarations
            WpfButton expandCollapseButton = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.ExpandCollapseButton;
            #endregion

            // Verify that the 'Exists' property of '+' button equals 'True'
            Assert.AreEqual(this.DebugOutput_ExpandCollapseButton_ExistsExpectedValues.ExpandCollapseButtonExists, expandCollapseButton.Exists, "Debug output expand collapse button does not exist");
        }
        
        /// <summary>
        /// DebugOutput_FilterTextbox_Exists - Use 'DebugOutput_FilterTextbox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void DebugOutput_FilterTextbox_Exists()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.SearchTextBox;
            #endregion

            // Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
            Assert.AreEqual(this.DebugOutput_FilterTextbox_ExistsExpectedValues.SearchTextBoxExists, searchTextBox.Exists, "Debug output filter textbox does not exist");
        }
        
        /// <summary>
        /// DebugOutput_ResultsTree_Exists - Use 'DebugOutput_ResultsTree_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void DebugOutput_ResultsTree_Exists()
        {
            #region Variable Declarations
            WpfTree debugOutputTree = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree;
            #endregion

            // Verify that the 'Exists' property of 'DebugOutputTree' tree equals 'True'
            Assert.AreEqual(this.DebugOutput_ResultsTree_ExistsExpectedValues.DebugOutputTreeExists, debugOutputTree.Exists, "Debug output results tree does not exist");
        }
        
        /// <summary>
        /// DebugOutput_SettingsButton_Exists - Use 'DebugOutput_SettingsButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void DebugOutput_SettingsButton_Exists()
        {
            #region Variable Declarations
            WpfButton settingsButton = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.SettingsButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.DebugOutput_SettingsButton_ExistsExpectedValues.SettingsButtonExists, settingsButton.Exists, "Debug output settings button does not exist");
        }
        
        /// <summary>
        /// Edit_Database_Source_From_Connector
        /// </summary>
        public void Edit_Database_Source_From_Connector()
        {
            #region Variable Declarations
            WpfButton uIItemButton = this.UIWarewolfDEV2LEROYWARWindow.UIUI_SplitPane_AutoIDCustom.UIUI_TabManager_AutoIDTabList.UIDev2ViewModelsSourceTabPage.UIDev2StudioViewModelsCustom.UIItemButton;
            WpfButton uIItemButton1 = this.UIWarewolfDEV2LEROYWARWindow.UIUI_SplitPane_AutoIDCustom.UIUI_TabManager_AutoIDTabList.UIDev2ViewModelsSourceTabPage.UIDev2StudioViewModelsCustom.UIItemButton1;
            #endregion

            // Click '' button
            Mouse.Click(uIItemButton, new Point(12, 12));

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(9, 18));
        }
        
        /// <summary>
        /// Expand_And_Colapse_Tool_Area
        /// </summary>
        public void Expand_And_Colapse_Tool_Area()
        {
            #region Variable Declarations
            WpfGroup uIControlFlowGroup = this.UIWarewolfDEV2LEROYWARWindow.UIUI_ToolboxControl_AuCustom.UIToolListBoxList.UIControlFlowGroup;
            #endregion

            // Click 'Control Flow' group
            Mouse.Click(uIControlFlowGroup, new Point(1354, 10));

            // Click 'Control Flow' group
            Mouse.Click(uIControlFlowGroup, new Point(1349, 7));
        }
        
        /// <summary>
        /// Plugin_Connectot_Test_Connector_Calculate_Outputs - Use 'Plugin_Connectot_Test_Connector_Calculate_OutputsParams' to pass parameters into this method.
        /// </summary>
        public void Plugin_Connectot_Test_Connector_Calculate_Outputs()
        {
            #region Variable Declarations
            WpfCell uIValueCell = this.UIWarewolfDEV2LEROYWARWindow.UIItemCustom2.UIInputGridTable.UIValueCell;
            WpfButton uITestButton = this.UIWarewolfDEV2LEROYWARWindow.UIUI_SplitPane_AutoIDCustom.UIUI_TabManager_AutoIDTabList.UIDev2ViewModelsSourceTabPage1.UIDev2StudioViewModelsCustom.UITestButton;
            #endregion

            // Type 'test' in 'Value' cell
            uIValueCell.Value = this.Plugin_Connectot_Test_Connector_Calculate_OutputsParams.UIValueCellValue;

            // Click 'Test' button
            Mouse.Click(uITestButton, new Point(59, 9));
        }
        
        /// <summary>
        /// Right_Click_Context_Menu_InExplorer
        /// </summary>
        public void Right_Click_Context_Menu_InExplorer()
        {
            #region Variable Declarations
            WpfTreeItem explorerTreeItemChild = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.ExplorerTreeItem.ExplorerTreeItemChild;
            #endregion

            // Right-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(explorerTreeItemChild, MouseButtons.Right, ModifierKeys.None, new Point(107, 9));
        }
        
        /// <summary>
        /// Select_Action_Droplist
        /// </summary>
        public void Select_Action_Droplist()
        {
            #region Variable Declarations
            WpfCustom actionsComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.NewDBConnectorTab.WorkSurfaceContext.ActionsComboBox;
            WpfCustom uIDboPr_CitiesGetCountCustom = this.UIWarewolfDEV2LEROYWARWindow.UIDboPr_CitiesGetCountCustom;
            #endregion

            // Click 'ActionsComboBox' custom control
            Mouse.Click(actionsComboBox, new Point(226, 6));

            // Click 'dbo.Pr_CitiesGetCountries' custom control
            Mouse.Click(uIDboPr_CitiesGetCountCustom, new Point(156, 10));
        }
        
        /// <summary>
        /// Select_Data_Source_Droplist
        /// </summary>
        public void Select_Data_Source_Droplist()
        {
            #region Variable Declarations
            WpfCustom sourcesComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.NewDBConnectorTab.WorkSurfaceContext.SourcesComboBox;
            #endregion

            // Click 'SourcesComboBox' custom control
            Mouse.Click(sourcesComboBox, new Point(228, 12));
        }
        
        /// <summary>
        /// Select_Plugin_Connector_Action_Droplist
        /// </summary>
        public void Select_Plugin_Connector_Action_Droplist()
        {
            #region Variable Declarations
            WpfCustom actionsComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.NewPluginConnectorTab.WorkSurfaceContext.ActionsComboBox;
            WpfCustom uIDummySentCustom = this.UIWarewolfDEV2LEROYWARWindow.UIDummySentCustom;
            #endregion

            // Click 'ActionsComboBox' custom control
            Mouse.Click(actionsComboBox, new Point(233, 6));

            // Click 'DummySent' custom control
            Mouse.Click(uIDummySentCustom, new Point(200, 8));
        }
        
        /// <summary>
        /// Select_Plugin_Connector_Namespace_Droplist
        /// </summary>
        public void Select_Plugin_Connector_Namespace_Droplist()
        {
            #region Variable Declarations
            WpfCustom namespacesComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.NewPluginConnectorTab.WorkSurfaceContext.NamespacesComboBox;
            WpfText uIUnlimitedFrameworkPlText = this.UIWarewolfDEV2LEROYWARWindow.UIUnlimitedFrameworkPlCustom.UIUnlimitedFrameworkPlText;
            #endregion

            // Click 'NamespaceComboBox' custom control
            Mouse.Click(namespacesComboBox, new Point(233, 8));

            // Click 'Unlimited.Framework.Plugins.EmailPlugin' label
            Mouse.Click(uIUnlimitedFrameworkPlText, new Point(200, 11));
        }
        
        /// <summary>
        /// Select_Plugin_Connector_Source_Droplist
        /// </summary>
        public void Select_Plugin_Connector_Source_Droplist()
        {
            #region Variable Declarations
            WpfCustom sourcesComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.NewPluginConnectorTab.WorkSurfaceContext.SourcesComboBox;
            WpfCustom uIEmailPluginCustom = this.UIWarewolfDEV2LEROYWARWindow.UIEmailPluginCustom;
            #endregion

            // Click 'SourcesComboBox' custom control
            Mouse.Click(sourcesComboBox, new Point(231, 16));

            // Click 'Email Plugin' custom control
            Mouse.Click(uIEmailPluginCustom, new Point(193, 5));
        }
        
        /// <summary>
        /// Tab_Context_Menu
        /// </summary>
        public void Tab_Context_Menu()
        {
            #region Variable Declarations
            WpfTabPage tabContextMenu = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.TabContextMenu;
            #endregion

            // Right-Click 'Dev2.Studio.ViewModels.Help.HelpViewModel' tab
            Mouse.Click(tabContextMenu, MouseButtons.Right, ModifierKeys.None, new Point(64, 15));
        }
        
        /// <summary>
        /// Test_Connector_Calculate_Outputs - Use 'Test_Connector_Calculate_OutputsParams' to pass parameters into this method.
        /// </summary>
        public void Test_Connector_Calculate_Outputs()
        {
            #region Variable Declarations
            WpfEdit uITestdataEdit = this.UIWarewolfDEV2LEROYWARWindow.UIItemCustom1.UIInputsListList.UIWarewolfCoreServiceIListItem.UITestdataEdit;
            WpfButton uITestButton = this.UIWarewolfDEV2LEROYWARWindow.UIUI_SplitPane_AutoIDCustom.UIUI_TabManager_AutoIDTabList.UIDev2ViewModelsSourceTabPage.UIDev2StudioViewModelsCustom.UITestButton;
            #endregion

            // Type 's' in 'Test data' text box
            uITestdataEdit.Text = this.Test_Connector_Calculate_OutputsParams.UITestdataEditText;

            // Click 'Test' button
            Mouse.Click(uITestButton, new Point(47, 18));
        }
        
        #region Properties
        public virtual Assert_Close_Button_Exists_TopRibbonExpectedValues Assert_Close_Button_Exists_TopRibbonExpectedValues
        {
            get
            {
                if ((this.mAssert_Close_Button_Exists_TopRibbonExpectedValues == null))
                {
                    this.mAssert_Close_Button_Exists_TopRibbonExpectedValues = new Assert_Close_Button_Exists_TopRibbonExpectedValues();
                }
                return this.mAssert_Close_Button_Exists_TopRibbonExpectedValues;
            }
        }
        
        public virtual Assert_Connect_button_Destination_Server_ExistsExpectedValues Assert_Connect_button_Destination_Server_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Connect_button_Destination_Server_ExistsExpectedValues == null))
                {
                    this.mAssert_Connect_button_Destination_Server_ExistsExpectedValues = new Assert_Connect_button_Destination_Server_ExistsExpectedValues();
                }
                return this.mAssert_Connect_button_Destination_Server_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Connect_Button_Source_Server_ExistsExpectedValues Assert_Connect_Button_Source_Server_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Connect_Button_Source_Server_ExistsExpectedValues == null))
                {
                    this.mAssert_Connect_Button_Source_Server_ExistsExpectedValues = new Assert_Connect_Button_Source_Server_ExistsExpectedValues();
                }
                return this.mAssert_Connect_Button_Source_Server_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Connect_ConnectControl_Button_Exists_InExplorerExpectedValues Assert_Connect_ConnectControl_Button_Exists_InExplorerExpectedValues
        {
            get
            {
                if ((this.mAssert_Connect_ConnectControl_Button_Exists_InExplorerExpectedValues == null))
                {
                    this.mAssert_Connect_ConnectControl_Button_Exists_InExplorerExpectedValues = new Assert_Connect_ConnectControl_Button_Exists_InExplorerExpectedValues();
                }
                return this.mAssert_Connect_ConnectControl_Button_Exists_InExplorerExpectedValues;
            }
        }
        
        public virtual Assert_Connect_Control_DestinationServer_ExistsExpectedValues Assert_Connect_Control_DestinationServer_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Connect_Control_DestinationServer_ExistsExpectedValues == null))
                {
                    this.mAssert_Connect_Control_DestinationServer_ExistsExpectedValues = new Assert_Connect_Control_DestinationServer_ExistsExpectedValues();
                }
                return this.mAssert_Connect_Control_DestinationServer_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Connect_Control_Exists_InExplorerExpectedValues Assert_Connect_Control_Exists_InExplorerExpectedValues
        {
            get
            {
                if ((this.mAssert_Connect_Control_Exists_InExplorerExpectedValues == null))
                {
                    this.mAssert_Connect_Control_Exists_InExplorerExpectedValues = new Assert_Connect_Control_Exists_InExplorerExpectedValues();
                }
                return this.mAssert_Connect_Control_Exists_InExplorerExpectedValues;
            }
        }
        
        public virtual Assert_Connect_Control_SourceServer_ExistsExpectedValues Assert_Connect_Control_SourceServer_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Connect_Control_SourceServer_ExistsExpectedValues == null))
                {
                    this.mAssert_Connect_Control_SourceServer_ExistsExpectedValues = new Assert_Connect_Control_SourceServer_ExistsExpectedValues();
                }
                return this.mAssert_Connect_Control_SourceServer_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Database_Source_Dropdownlist_ExistsExpectedValues Assert_Database_Source_Dropdownlist_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Database_Source_Dropdownlist_ExistsExpectedValues == null))
                {
                    this.mAssert_Database_Source_Dropdownlist_ExistsExpectedValues = new Assert_Database_Source_Dropdownlist_ExistsExpectedValues();
                }
                return this.mAssert_Database_Source_Dropdownlist_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Database_Source_ExistsExpectedValues Assert_Database_Source_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Database_Source_ExistsExpectedValues == null))
                {
                    this.mAssert_Database_Source_ExistsExpectedValues = new Assert_Database_Source_ExistsExpectedValues();
                }
                return this.mAssert_Database_Source_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugInput_CancelButton_ExistsExpectedValues Assert_DebugInput_CancelButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugInput_CancelButton_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugInput_CancelButton_ExistsExpectedValues = new Assert_DebugInput_CancelButton_ExistsExpectedValues();
                }
                return this.mAssert_DebugInput_CancelButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugInput_DebugButton_ExistsExpectedValues Assert_DebugInput_DebugButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugInput_DebugButton_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugInput_DebugButton_ExistsExpectedValues = new Assert_DebugInput_DebugButton_ExistsExpectedValues();
                }
                return this.mAssert_DebugInput_DebugButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugInput_InputData_Field_ExistsExpectedValues Assert_DebugInput_InputData_Field_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugInput_InputData_Field_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugInput_InputData_Field_ExistsExpectedValues = new Assert_DebugInput_InputData_Field_ExistsExpectedValues();
                }
                return this.mAssert_DebugInput_InputData_Field_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugInput_InputData_Window_ExistsExpectedValues Assert_DebugInput_InputData_Window_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugInput_InputData_Window_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugInput_InputData_Window_ExistsExpectedValues = new Assert_DebugInput_InputData_Window_ExistsExpectedValues();
                }
                return this.mAssert_DebugInput_InputData_Window_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugInput_Json_Tab_ExistsExpectedValues Assert_DebugInput_Json_Tab_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugInput_Json_Tab_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugInput_Json_Tab_ExistsExpectedValues = new Assert_DebugInput_Json_Tab_ExistsExpectedValues();
                }
                return this.mAssert_DebugInput_Json_Tab_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugInput_Json_Window_ExistsExpectedValues Assert_DebugInput_Json_Window_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugInput_Json_Window_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugInput_Json_Window_ExistsExpectedValues = new Assert_DebugInput_Json_Window_ExistsExpectedValues();
                }
                return this.mAssert_DebugInput_Json_Window_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugInput_RememberCheckbox_ExistsExpectedValues Assert_DebugInput_RememberCheckbox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugInput_RememberCheckbox_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugInput_RememberCheckbox_ExistsExpectedValues = new Assert_DebugInput_RememberCheckbox_ExistsExpectedValues();
                }
                return this.mAssert_DebugInput_RememberCheckbox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugInput_ViewInBrowser_Button_ExistsExpectedValues Assert_DebugInput_ViewInBrowser_Button_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugInput_ViewInBrowser_Button_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugInput_ViewInBrowser_Button_ExistsExpectedValues = new Assert_DebugInput_ViewInBrowser_Button_ExistsExpectedValues();
                }
                return this.mAssert_DebugInput_ViewInBrowser_Button_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugInput_Window_ExistsExpectedValues Assert_DebugInput_Window_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugInput_Window_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugInput_Window_ExistsExpectedValues = new Assert_DebugInput_Window_ExistsExpectedValues();
                }
                return this.mAssert_DebugInput_Window_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugInput_Xml_Tab_ExistsExpectedValues Assert_DebugInput_Xml_Tab_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugInput_Xml_Tab_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugInput_Xml_Tab_ExistsExpectedValues = new Assert_DebugInput_Xml_Tab_ExistsExpectedValues();
                }
                return this.mAssert_DebugInput_Xml_Tab_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugInput_Xml_Window_ExistsExpectedValues Assert_DebugInput_Xml_Window_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugInput_Xml_Window_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugInput_Xml_Window_ExistsExpectedValues = new Assert_DebugInput_Xml_Window_ExistsExpectedValues();
                }
                return this.mAssert_DebugInput_Xml_Window_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DeployButton_DestinationServer_ExistsExpectedValues Assert_DeployButton_DestinationServer_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DeployButton_DestinationServer_ExistsExpectedValues == null))
                {
                    this.mAssert_DeployButton_DestinationServer_ExistsExpectedValues = new Assert_DeployButton_DestinationServer_ExistsExpectedValues();
                }
                return this.mAssert_DeployButton_DestinationServer_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Edit_Button_Destination_Server_ExistsExpectedValues Assert_Edit_Button_Destination_Server_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Edit_Button_Destination_Server_ExistsExpectedValues == null))
                {
                    this.mAssert_Edit_Button_Destination_Server_ExistsExpectedValues = new Assert_Edit_Button_Destination_Server_ExistsExpectedValues();
                }
                return this.mAssert_Edit_Button_Destination_Server_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Explorer_Edit_Connect_Control_Button_ExistsExpectedValues Assert_Explorer_Edit_Connect_Control_Button_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Explorer_Edit_Connect_Control_Button_ExistsExpectedValues == null))
                {
                    this.mAssert_Explorer_Edit_Connect_Control_Button_ExistsExpectedValues = new Assert_Explorer_Edit_Connect_Control_Button_ExistsExpectedValues();
                }
                return this.mAssert_Explorer_Edit_Connect_Control_Button_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Explorer_ExistsExpectedValues Assert_Explorer_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Explorer_ExistsExpectedValues == null))
                {
                    this.mAssert_Explorer_ExistsExpectedValues = new Assert_Explorer_ExistsExpectedValues();
                }
                return this.mAssert_Explorer_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Explorer_ServerName_ExistsExpectedValues Assert_Explorer_ServerName_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Explorer_ServerName_ExistsExpectedValues == null))
                {
                    this.mAssert_Explorer_ServerName_ExistsExpectedValues = new Assert_Explorer_ServerName_ExistsExpectedValues();
                }
                return this.mAssert_Explorer_ServerName_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Filter_Exists_InExplorerExpectedValues Assert_Filter_Exists_InExplorerExpectedValues
        {
            get
            {
                if ((this.mAssert_Filter_Exists_InExplorerExpectedValues == null))
                {
                    this.mAssert_Filter_Exists_InExplorerExpectedValues = new Assert_Filter_Exists_InExplorerExpectedValues();
                }
                return this.mAssert_Filter_Exists_InExplorerExpectedValues;
            }
        }
        
        public virtual Assert_Filter_Source_Server_ExistsExpectedValues Assert_Filter_Source_Server_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Filter_Source_Server_ExistsExpectedValues == null))
                {
                    this.mAssert_Filter_Source_Server_ExistsExpectedValues = new Assert_Filter_Source_Server_ExistsExpectedValues();
                }
                return this.mAssert_Filter_Source_Server_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_FullScreen_Button_Exists_TopRibbonExpectedValues Assert_FullScreen_Button_Exists_TopRibbonExpectedValues
        {
            get
            {
                if ((this.mAssert_FullScreen_Button_Exists_TopRibbonExpectedValues == null))
                {
                    this.mAssert_FullScreen_Button_Exists_TopRibbonExpectedValues = new Assert_FullScreen_Button_Exists_TopRibbonExpectedValues();
                }
                return this.mAssert_FullScreen_Button_Exists_TopRibbonExpectedValues;
            }
        }
        
        public virtual Assert_InputData_Tab_ExistsExpectedValues Assert_InputData_Tab_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_InputData_Tab_ExistsExpectedValues == null))
                {
                    this.mAssert_InputData_Tab_ExistsExpectedValues = new Assert_InputData_Tab_ExistsExpectedValues();
                }
                return this.mAssert_InputData_Tab_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_LockAndUnlock_Button_Exists_TopRibbonExpectedValues Assert_LockAndUnlock_Button_Exists_TopRibbonExpectedValues
        {
            get
            {
                if ((this.mAssert_LockAndUnlock_Button_Exists_TopRibbonExpectedValues == null))
                {
                    this.mAssert_LockAndUnlock_Button_Exists_TopRibbonExpectedValues = new Assert_LockAndUnlock_Button_Exists_TopRibbonExpectedValues();
                }
                return this.mAssert_LockAndUnlock_Button_Exists_TopRibbonExpectedValues;
            }
        }
        
        public virtual Assert_Maximize_Button_Exists_TopRibbonExpectedValues Assert_Maximize_Button_Exists_TopRibbonExpectedValues
        {
            get
            {
                if ((this.mAssert_Maximize_Button_Exists_TopRibbonExpectedValues == null))
                {
                    this.mAssert_Maximize_Button_Exists_TopRibbonExpectedValues = new Assert_Maximize_Button_Exists_TopRibbonExpectedValues();
                }
                return this.mAssert_Maximize_Button_Exists_TopRibbonExpectedValues;
            }
        }
        
        public virtual Assert_Minimize_Button_Exists_TopRibbonExpectedValues Assert_Minimize_Button_Exists_TopRibbonExpectedValues
        {
            get
            {
                if ((this.mAssert_Minimize_Button_Exists_TopRibbonExpectedValues == null))
                {
                    this.mAssert_Minimize_Button_Exists_TopRibbonExpectedValues = new Assert_Minimize_Button_Exists_TopRibbonExpectedValues();
                }
                return this.mAssert_Minimize_Button_Exists_TopRibbonExpectedValues;
            }
        }
        
        public virtual Assert_NewResource_Count_ExistsExpectedValues Assert_NewResource_Count_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_NewResource_Count_ExistsExpectedValues == null))
                {
                    this.mAssert_NewResource_Count_ExistsExpectedValues = new Assert_NewResource_Count_ExistsExpectedValues();
                }
                return this.mAssert_NewResource_Count_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_NewResource_Label_ExistsExpectedValues Assert_NewResource_Label_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_NewResource_Label_ExistsExpectedValues == null))
                {
                    this.mAssert_NewResource_Label_ExistsExpectedValues = new Assert_NewResource_Label_ExistsExpectedValues();
                }
                return this.mAssert_NewResource_Label_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_NewWorkFlow_RibbonButton_ExistsExpectedValues Assert_NewWorkFlow_RibbonButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_NewWorkFlow_RibbonButton_ExistsExpectedValues == null))
                {
                    this.mAssert_NewWorkFlow_RibbonButton_ExistsExpectedValues = new Assert_NewWorkFlow_RibbonButton_ExistsExpectedValues();
                }
                return this.mAssert_NewWorkFlow_RibbonButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Override_Count_ExistsExpectedValues Assert_Override_Count_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Override_Count_ExistsExpectedValues == null))
                {
                    this.mAssert_Override_Count_ExistsExpectedValues = new Assert_Override_Count_ExistsExpectedValues();
                }
                return this.mAssert_Override_Count_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Override_Label_DestinationServer_ExistsExpectedValues Assert_Override_Label_DestinationServer_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Override_Label_DestinationServer_ExistsExpectedValues == null))
                {
                    this.mAssert_Override_Label_DestinationServer_ExistsExpectedValues = new Assert_Override_Label_DestinationServer_ExistsExpectedValues();
                }
                return this.mAssert_Override_Label_DestinationServer_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Plugin_Source_ExistsExpectedValues Assert_Plugin_Source_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Plugin_Source_ExistsExpectedValues == null))
                {
                    this.mAssert_Plugin_Source_ExistsExpectedValues = new Assert_Plugin_Source_ExistsExpectedValues();
                }
                return this.mAssert_Plugin_Source_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Position_ExistsExpectedValues Assert_Position_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Position_ExistsExpectedValues == null))
                {
                    this.mAssert_Position_ExistsExpectedValues = new Assert_Position_ExistsExpectedValues();
                }
                return this.mAssert_Position_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Refresh_Button_Exists_InExplorerExpectedValues Assert_Refresh_Button_Exists_InExplorerExpectedValues
        {
            get
            {
                if ((this.mAssert_Refresh_Button_Exists_InExplorerExpectedValues == null))
                {
                    this.mAssert_Refresh_Button_Exists_InExplorerExpectedValues = new Assert_Refresh_Button_Exists_InExplorerExpectedValues();
                }
                return this.mAssert_Refresh_Button_Exists_InExplorerExpectedValues;
            }
        }
        
        public virtual Assert_Refresh_Button_Source_Server_ExistsExpectedValues Assert_Refresh_Button_Source_Server_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Refresh_Button_Source_Server_ExistsExpectedValues == null))
                {
                    this.mAssert_Refresh_Button_Source_Server_ExistsExpectedValues = new Assert_Refresh_Button_Source_Server_ExistsExpectedValues();
                }
                return this.mAssert_Refresh_Button_Source_Server_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_CancelButton_ExistsExpectedValues Assert_SaveDialog_CancelButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_CancelButton_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_CancelButton_ExistsExpectedValues = new Assert_SaveDialog_CancelButton_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_CancelButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_ErrorLabel_ExistsExpectedValues Assert_SaveDialog_ErrorLabel_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_ErrorLabel_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_ErrorLabel_ExistsExpectedValues = new Assert_SaveDialog_ErrorLabel_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_ErrorLabel_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_ExistsExpectedValues Assert_SaveDialog_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_ExistsExpectedValues = new Assert_SaveDialog_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_ExplorerTree_ExistsExpectedValues Assert_SaveDialog_ExplorerTree_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_ExplorerTree_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_ExplorerTree_ExistsExpectedValues = new Assert_SaveDialog_ExplorerTree_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_ExplorerTree_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_ExplorerTreeItem_ExistsExpectedValues Assert_SaveDialog_ExplorerTreeItem_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_ExplorerTreeItem_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_ExplorerTreeItem_ExistsExpectedValues = new Assert_SaveDialog_ExplorerTreeItem_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_ExplorerTreeItem_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_ExplorerView_ExistsExpectedValues Assert_SaveDialog_ExplorerView_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_ExplorerView_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_ExplorerView_ExistsExpectedValues = new Assert_SaveDialog_ExplorerView_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_ExplorerView_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_FilterTextbox_ExistsExpectedValues Assert_SaveDialog_FilterTextbox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_FilterTextbox_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_FilterTextbox_ExistsExpectedValues = new Assert_SaveDialog_FilterTextbox_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_FilterTextbox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_NameLabel_ExistsExpectedValues Assert_SaveDialog_NameLabel_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_NameLabel_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_NameLabel_ExistsExpectedValues = new Assert_SaveDialog_NameLabel_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_NameLabel_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_RefreshButton_ExistsExpectedValues Assert_SaveDialog_RefreshButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_RefreshButton_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_RefreshButton_ExistsExpectedValues = new Assert_SaveDialog_RefreshButton_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_RefreshButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_SaveButton_ExistsExpectedValues Assert_SaveDialog_SaveButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_SaveButton_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_SaveButton_ExistsExpectedValues = new Assert_SaveDialog_SaveButton_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_SaveButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_ServiceName_Textbox_ExistsExpectedValues Assert_SaveDialog_ServiceName_Textbox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_ServiceName_Textbox_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_ServiceName_Textbox_ExistsExpectedValues = new Assert_SaveDialog_ServiceName_Textbox_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_ServiceName_Textbox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_WorkspaceName_ExistsExpectedValues Assert_SaveDialog_WorkspaceName_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_WorkspaceName_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_WorkspaceName_ExistsExpectedValues = new Assert_SaveDialog_WorkspaceName_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_WorkspaceName_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_ConncectControl_ExistsExpectedValues Assert_Scheduler_ConncectControl_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_ConncectControl_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_ConncectControl_ExistsExpectedValues = new Assert_Scheduler_ConncectControl_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_ConncectControl_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_ConnectButton_ExistsExpectedValues Assert_Scheduler_ConnectButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_ConnectButton_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_ConnectButton_ExistsExpectedValues = new Assert_Scheduler_ConnectButton_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_ConnectButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_ConnectControl_Edit_ExistsExpectedValues Assert_Scheduler_ConnectControl_Edit_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_ConnectControl_Edit_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_ConnectControl_Edit_ExistsExpectedValues = new Assert_Scheduler_ConnectControl_Edit_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_ConnectControl_Edit_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_CreateNewTask_ExistsExpectedValues Assert_Scheduler_CreateNewTask_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_CreateNewTask_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_CreateNewTask_ExistsExpectedValues = new Assert_Scheduler_CreateNewTask_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_CreateNewTask_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_DeleteButton_ExistsExpectedValues Assert_Scheduler_DeleteButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_DeleteButton_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_DeleteButton_ExistsExpectedValues = new Assert_Scheduler_DeleteButton_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_DeleteButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_DisabledRadioButton_ExistsExpectedValues Assert_Scheduler_DisabledRadioButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_DisabledRadioButton_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_DisabledRadioButton_ExistsExpectedValues = new Assert_Scheduler_DisabledRadioButton_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_DisabledRadioButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_EditTrigger_ExistsExpectedValues Assert_Scheduler_EditTrigger_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_EditTrigger_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_EditTrigger_ExistsExpectedValues = new Assert_Scheduler_EditTrigger_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_EditTrigger_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_EnabledRadioButton_ExistsExpectedValues Assert_Scheduler_EnabledRadioButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_EnabledRadioButton_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_EnabledRadioButton_ExistsExpectedValues = new Assert_Scheduler_EnabledRadioButton_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_EnabledRadioButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_ErrorMessage_ExistsExpectedValues Assert_Scheduler_ErrorMessage_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_ErrorMessage_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_ErrorMessage_ExistsExpectedValues = new Assert_Scheduler_ErrorMessage_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_ErrorMessage_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_HistoryInput_ExistsExpectedValues Assert_Scheduler_HistoryInput_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_HistoryInput_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_HistoryInput_ExistsExpectedValues = new Assert_Scheduler_HistoryInput_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_HistoryInput_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_HistoryLabel_ExistsExpectedValues Assert_Scheduler_HistoryLabel_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_HistoryLabel_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_HistoryLabel_ExistsExpectedValues = new Assert_Scheduler_HistoryLabel_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_HistoryLabel_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_HistoryTable_ExistsExpectedValues Assert_Scheduler_HistoryTable_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_HistoryTable_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_HistoryTable_ExistsExpectedValues = new Assert_Scheduler_HistoryTable_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_HistoryTable_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_NameInput_ExistsExpectedValues Assert_Scheduler_NameInput_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_NameInput_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_NameInput_ExistsExpectedValues = new Assert_Scheduler_NameInput_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_NameInput_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_NameLabel_ExistsExpectedValues Assert_Scheduler_NameLabel_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_NameLabel_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_NameLabel_ExistsExpectedValues = new Assert_Scheduler_NameLabel_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_NameLabel_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_PasswordInput_ExistsExpectedValues Assert_Scheduler_PasswordInput_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_PasswordInput_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_PasswordInput_ExistsExpectedValues = new Assert_Scheduler_PasswordInput_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_PasswordInput_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_PasswordLabel_ExistsExpectedValues Assert_Scheduler_PasswordLabel_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_PasswordLabel_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_PasswordLabel_ExistsExpectedValues = new Assert_Scheduler_PasswordLabel_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_PasswordLabel_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_ResourcePicker_ExistsExpectedValues Assert_Scheduler_ResourcePicker_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_ResourcePicker_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_ResourcePicker_ExistsExpectedValues = new Assert_Scheduler_ResourcePicker_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_ResourcePicker_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_RunTask_Checkbox_ExistsExpectedValues Assert_Scheduler_RunTask_Checkbox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_RunTask_Checkbox_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_RunTask_Checkbox_ExistsExpectedValues = new Assert_Scheduler_RunTask_Checkbox_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_RunTask_Checkbox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_Status_RadioButton_ExistsExpectedValues Assert_Scheduler_Status_RadioButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_Status_RadioButton_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_Status_RadioButton_ExistsExpectedValues = new Assert_Scheduler_Status_RadioButton_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_Status_RadioButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_StatusLabe_ExistsExpectedValues Assert_Scheduler_StatusLabe_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_StatusLabe_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_StatusLabe_ExistsExpectedValues = new Assert_Scheduler_StatusLabe_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_StatusLabe_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_TriggerLabel_ExistsExpectedValues Assert_Scheduler_TriggerLabel_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_TriggerLabel_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_TriggerLabel_ExistsExpectedValues = new Assert_Scheduler_TriggerLabel_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_TriggerLabel_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_TriggerValue_ExistsExpectedValues Assert_Scheduler_TriggerValue_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_TriggerValue_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_TriggerValue_ExistsExpectedValues = new Assert_Scheduler_TriggerValue_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_TriggerValue_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_UserAccountLabel_ExistsExpectedValues Assert_Scheduler_UserAccountLabel_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_UserAccountLabel_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_UserAccountLabel_ExistsExpectedValues = new Assert_Scheduler_UserAccountLabel_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_UserAccountLabel_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_UsernameInput_ExistsExpectedValues Assert_Scheduler_UsernameInput_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_UsernameInput_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_UsernameInput_ExistsExpectedValues = new Assert_Scheduler_UsernameInput_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_UsernameInput_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_Usernamelabel_ExistsExpectedValues Assert_Scheduler_Usernamelabel_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_Usernamelabel_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_Usernamelabel_ExistsExpectedValues = new Assert_Scheduler_Usernamelabel_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_Usernamelabel_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_WorkflowInput_ExistsExpectedValues Assert_Scheduler_WorkflowInput_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_WorkflowInput_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_WorkflowInput_ExistsExpectedValues = new Assert_Scheduler_WorkflowInput_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_WorkflowInput_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_WorkflowLabel_ExistsExpectedValues Assert_Scheduler_WorkflowLabel_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_WorkflowLabel_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_WorkflowLabel_ExistsExpectedValues = new Assert_Scheduler_WorkflowLabel_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_WorkflowLabel_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Server_Version_ExistsExpectedValues Assert_Server_Version_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Server_Version_ExistsExpectedValues == null))
                {
                    this.mAssert_Server_Version_ExistsExpectedValues = new Assert_Server_Version_ExistsExpectedValues();
                }
                return this.mAssert_Server_Version_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Service_Picker_Dialog_ExistsExpectedValues Assert_Service_Picker_Dialog_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Service_Picker_Dialog_ExistsExpectedValues == null))
                {
                    this.mAssert_Service_Picker_Dialog_ExistsExpectedValues = new Assert_Service_Picker_Dialog_ExistsExpectedValues();
                }
                return this.mAssert_Service_Picker_Dialog_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Service_Picker_Exists_OnDesignSurfaceExpectedValues Assert_Service_Picker_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Service_Picker_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Service_Picker_Exists_OnDesignSurfaceExpectedValues = new Assert_Service_Picker_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Service_Picker_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_ServiceLabel_DestinationServer_ExistsExpectedValues Assert_ServiceLabel_DestinationServer_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_ServiceLabel_DestinationServer_ExistsExpectedValues == null))
                {
                    this.mAssert_ServiceLabel_DestinationServer_ExistsExpectedValues = new Assert_ServiceLabel_DestinationServer_ExistsExpectedValues();
                }
                return this.mAssert_ServiceLabel_DestinationServer_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_ServicesCount_Label_ExistsExpectedValues Assert_ServicesCount_Label_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_ServicesCount_Label_ExistsExpectedValues == null))
                {
                    this.mAssert_ServicesCount_Label_ExistsExpectedValues = new Assert_ServicesCount_Label_ExistsExpectedValues();
                }
                return this.mAssert_ServicesCount_Label_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Settings_ConnectButton_ExistsExpectedValues Assert_Settings_ConnectButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Settings_ConnectButton_ExistsExpectedValues == null))
                {
                    this.mAssert_Settings_ConnectButton_ExistsExpectedValues = new Assert_Settings_ConnectButton_ExistsExpectedValues();
                }
                return this.mAssert_Settings_ConnectButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Settings_ConnectControl_Edit_Button_ExistsExpectedValues Assert_Settings_ConnectControl_Edit_Button_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Settings_ConnectControl_Edit_Button_ExistsExpectedValues == null))
                {
                    this.mAssert_Settings_ConnectControl_Edit_Button_ExistsExpectedValues = new Assert_Settings_ConnectControl_Edit_Button_ExistsExpectedValues();
                }
                return this.mAssert_Settings_ConnectControl_Edit_Button_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Settings_ConnectControl_ExistsExpectedValues Assert_Settings_ConnectControl_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Settings_ConnectControl_ExistsExpectedValues == null))
                {
                    this.mAssert_Settings_ConnectControl_ExistsExpectedValues = new Assert_Settings_ConnectControl_ExistsExpectedValues();
                }
                return this.mAssert_Settings_ConnectControl_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Settings_LoggingTab_ExistsExpectedValues Assert_Settings_LoggingTab_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Settings_LoggingTab_ExistsExpectedValues == null))
                {
                    this.mAssert_Settings_LoggingTab_ExistsExpectedValues = new Assert_Settings_LoggingTab_ExistsExpectedValues();
                }
                return this.mAssert_Settings_LoggingTab_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Settings_ResourcePermissions_ExistsExpectedValues Assert_Settings_ResourcePermissions_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Settings_ResourcePermissions_ExistsExpectedValues == null))
                {
                    this.mAssert_Settings_ResourcePermissions_ExistsExpectedValues = new Assert_Settings_ResourcePermissions_ExistsExpectedValues();
                }
                return this.mAssert_Settings_ResourcePermissions_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Settings_SecurityTab_ExistsExpectedValues Assert_Settings_SecurityTab_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Settings_SecurityTab_ExistsExpectedValues == null))
                {
                    this.mAssert_Settings_SecurityTab_ExistsExpectedValues = new Assert_Settings_SecurityTab_ExistsExpectedValues();
                }
                return this.mAssert_Settings_SecurityTab_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Settings_ServerPermissions_ExistsExpectedValues Assert_Settings_ServerPermissions_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Settings_ServerPermissions_ExistsExpectedValues == null))
                {
                    this.mAssert_Settings_ServerPermissions_ExistsExpectedValues = new Assert_Settings_ServerPermissions_ExistsExpectedValues();
                }
                return this.mAssert_Settings_ServerPermissions_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_ShowDependencies_Button_DestinationServer_ExistsExpectedValues Assert_ShowDependencies_Button_DestinationServer_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_ShowDependencies_Button_DestinationServer_ExistsExpectedValues == null))
                {
                    this.mAssert_ShowDependencies_Button_DestinationServer_ExistsExpectedValues = new Assert_ShowDependencies_Button_DestinationServer_ExistsExpectedValues();
                }
                return this.mAssert_ShowDependencies_Button_DestinationServer_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Source_Server_Edit_ExistsExpectedValues Assert_Source_Server_Edit_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Source_Server_Edit_ExistsExpectedValues == null))
                {
                    this.mAssert_Source_Server_Edit_ExistsExpectedValues = new Assert_Source_Server_Edit_ExistsExpectedValues();
                }
                return this.mAssert_Source_Server_Edit_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Source_Server_Name_ExistsExpectedValues Assert_Source_Server_Name_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Source_Server_Name_ExistsExpectedValues == null))
                {
                    this.mAssert_Source_Server_Name_ExistsExpectedValues = new Assert_Source_Server_Name_ExistsExpectedValues();
                }
                return this.mAssert_Source_Server_Name_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SourceCount_DestinationServer_ExistsExpectedValues Assert_SourceCount_DestinationServer_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SourceCount_DestinationServer_ExistsExpectedValues == null))
                {
                    this.mAssert_SourceCount_DestinationServer_ExistsExpectedValues = new Assert_SourceCount_DestinationServer_ExistsExpectedValues();
                }
                return this.mAssert_SourceCount_DestinationServer_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SourceLabel_DestinationServer_ExistsExpectedValues Assert_SourceLabel_DestinationServer_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SourceLabel_DestinationServer_ExistsExpectedValues == null))
                {
                    this.mAssert_SourceLabel_DestinationServer_ExistsExpectedValues = new Assert_SourceLabel_DestinationServer_ExistsExpectedValues();
                }
                return this.mAssert_SourceLabel_DestinationServer_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SplitPane_Content_ExistsExpectedValues Assert_SplitPane_Content_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SplitPane_Content_ExistsExpectedValues == null))
                {
                    this.mAssert_SplitPane_Content_ExistsExpectedValues = new Assert_SplitPane_Content_ExistsExpectedValues();
                }
                return this.mAssert_SplitPane_Content_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SplitPane_Left_ExistsExpectedValues Assert_SplitPane_Left_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SplitPane_Left_ExistsExpectedValues == null))
                {
                    this.mAssert_SplitPane_Left_ExistsExpectedValues = new Assert_SplitPane_Left_ExistsExpectedValues();
                }
                return this.mAssert_SplitPane_Left_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SplitPane_Right_ExistsExpectedValues Assert_SplitPane_Right_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SplitPane_Right_ExistsExpectedValues == null))
                {
                    this.mAssert_SplitPane_Right_ExistsExpectedValues = new Assert_SplitPane_Right_ExistsExpectedValues();
                }
                return this.mAssert_SplitPane_Right_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SuccessMessage_Label_ExistsExpectedValues Assert_SuccessMessage_Label_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SuccessMessage_Label_ExistsExpectedValues == null))
                {
                    this.mAssert_SuccessMessage_Label_ExistsExpectedValues = new Assert_SuccessMessage_Label_ExistsExpectedValues();
                }
                return this.mAssert_SuccessMessage_Label_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_TabHeader_ExistsExpectedValues Assert_TabHeader_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_TabHeader_ExistsExpectedValues == null))
                {
                    this.mAssert_TabHeader_ExistsExpectedValues = new Assert_TabHeader_ExistsExpectedValues();
                }
                return this.mAssert_TabHeader_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Toolbox_FilterTextbox_ExistsExpectedValues Assert_Toolbox_FilterTextbox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Toolbox_FilterTextbox_ExistsExpectedValues == null))
                {
                    this.mAssert_Toolbox_FilterTextbox_ExistsExpectedValues = new Assert_Toolbox_FilterTextbox_ExistsExpectedValues();
                }
                return this.mAssert_Toolbox_FilterTextbox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Toolbox_RefreshButton_ExistsExpectedValues Assert_Toolbox_RefreshButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Toolbox_RefreshButton_ExistsExpectedValues == null))
                {
                    this.mAssert_Toolbox_RefreshButton_ExistsExpectedValues = new Assert_Toolbox_RefreshButton_ExistsExpectedValues();
                }
                return this.mAssert_Toolbox_RefreshButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_UnLock_Button_ExistsExpectedValues Assert_UnLock_Button_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_UnLock_Button_ExistsExpectedValues == null))
                {
                    this.mAssert_UnLock_Button_ExistsExpectedValues = new Assert_UnLock_Button_ExistsExpectedValues();
                }
                return this.mAssert_UnLock_Button_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_AddedRecordsetParams Assert_VariableList_AddedRecordsetParams
        {
            get
            {
                if ((this.mAssert_VariableList_AddedRecordsetParams == null))
                {
                    this.mAssert_VariableList_AddedRecordsetParams = new Assert_VariableList_AddedRecordsetParams();
                }
                return this.mAssert_VariableList_AddedRecordsetParams;
            }
        }
        
        public virtual Assert_VariableList_AddedVariableParams Assert_VariableList_AddedVariableParams
        {
            get
            {
                if ((this.mAssert_VariableList_AddedVariableParams == null))
                {
                    this.mAssert_VariableList_AddedVariableParams = new Assert_VariableList_AddedVariableParams();
                }
                return this.mAssert_VariableList_AddedVariableParams;
            }
        }
        
        public virtual Assert_VariableList_DataInputTree_ExistsExpectedValues Assert_VariableList_DataInputTree_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_DataInputTree_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_DataInputTree_ExistsExpectedValues = new Assert_VariableList_DataInputTree_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_DataInputTree_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_DeleteButton_ExistsExpectedValues Assert_VariableList_DeleteButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_DeleteButton_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_DeleteButton_ExistsExpectedValues = new Assert_VariableList_DeleteButton_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_DeleteButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_ExistsExpectedValues Assert_VariableList_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_ExistsExpectedValues = new Assert_VariableList_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_Recordset_ChildTextBox_ExistsExpectedValues Assert_VariableList_Recordset_ChildTextBox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_Recordset_ChildTextBox_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_Recordset_ChildTextBox_ExistsExpectedValues = new Assert_VariableList_Recordset_ChildTextBox_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_Recordset_ChildTextBox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_RecordsetInput_CheckBox_ExistsExpectedValues Assert_VariableList_RecordsetInput_CheckBox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_RecordsetInput_CheckBox_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_RecordsetInput_CheckBox_ExistsExpectedValues = new Assert_VariableList_RecordsetInput_CheckBox_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_RecordsetInput_CheckBox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_RecordsetInput_ChildCheckBox_ExistsExpectedValues Assert_VariableList_RecordsetInput_ChildCheckBox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_RecordsetInput_ChildCheckBox_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_RecordsetInput_ChildCheckBox_ExistsExpectedValues = new Assert_VariableList_RecordsetInput_ChildCheckBox_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_RecordsetInput_ChildCheckBox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_RecordsetItem_ExistsExpectedValues Assert_VariableList_RecordsetItem_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_RecordsetItem_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_RecordsetItem_ExistsExpectedValues = new Assert_VariableList_RecordsetItem_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_RecordsetItem_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_RecordsetOutput_CheckBox_ExistsExpectedValues Assert_VariableList_RecordsetOutput_CheckBox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_RecordsetOutput_CheckBox_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_RecordsetOutput_CheckBox_ExistsExpectedValues = new Assert_VariableList_RecordsetOutput_CheckBox_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_RecordsetOutput_CheckBox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_RecordsetOutput_ChildCheckBox_ExistsExpectedValues Assert_VariableList_RecordsetOutput_ChildCheckBox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_RecordsetOutput_ChildCheckBox_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_RecordsetOutput_ChildCheckBox_ExistsExpectedValues = new Assert_VariableList_RecordsetOutput_ChildCheckBox_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_RecordsetOutput_ChildCheckBox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_RecordsetTextBox_ExistsExpectedValues Assert_VariableList_RecordsetTextBox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_RecordsetTextBox_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_RecordsetTextBox_ExistsExpectedValues = new Assert_VariableList_RecordsetTextBox_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_RecordsetTextBox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_SortButton_ExistsExpectedValues Assert_VariableList_SortButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_SortButton_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_SortButton_ExistsExpectedValues = new Assert_VariableList_SortButton_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_SortButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_VariableInput_CheckBox_ExistsExpectedValues Assert_VariableList_VariableInput_CheckBox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_VariableInput_CheckBox_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_VariableInput_CheckBox_ExistsExpectedValues = new Assert_VariableList_VariableInput_CheckBox_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_VariableInput_CheckBox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_VariableItem_ExistsExpectedValues Assert_VariableList_VariableItem_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_VariableItem_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_VariableItem_ExistsExpectedValues = new Assert_VariableList_VariableItem_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_VariableItem_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_VariableOutput_CheckBox_ExistsExpectedValues Assert_VariableList_VariableOutput_CheckBox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_VariableOutput_CheckBox_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_VariableOutput_CheckBox_ExistsExpectedValues = new Assert_VariableList_VariableOutput_CheckBox_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_VariableOutput_CheckBox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_VariableTextBox_ExistsExpectedValues Assert_VariableList_VariableTextBox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_VariableTextBox_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_VariableTextBox_ExistsExpectedValues = new Assert_VariableList_VariableTextBox_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_VariableTextBox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Web_Source_ExistsExpectedValues Assert_Web_Source_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Web_Source_ExistsExpectedValues == null))
                {
                    this.mAssert_Web_Source_ExistsExpectedValues = new Assert_Web_Source_ExistsExpectedValues();
                }
                return this.mAssert_Web_Source_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_WebSource_ReqTypeComboBox_ExistsExpectedValues Assert_WebSource_ReqTypeComboBox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_WebSource_ReqTypeComboBox_ExistsExpectedValues == null))
                {
                    this.mAssert_WebSource_ReqTypeComboBox_ExistsExpectedValues = new Assert_WebSource_ReqTypeComboBox_ExistsExpectedValues();
                }
                return this.mAssert_WebSource_ReqTypeComboBox_ExistsExpectedValues;
            }
        }
        
        public virtual Click_ExpandAndStepIn_NestedWorkflowParams Click_ExpandAndStepIn_NestedWorkflowParams
        {
            get
            {
                if ((this.mClick_ExpandAndStepIn_NestedWorkflowParams == null))
                {
                    this.mClick_ExpandAndStepIn_NestedWorkflowParams = new Click_ExpandAndStepIn_NestedWorkflowParams();
                }
                return this.mClick_ExpandAndStepIn_NestedWorkflowParams;
            }
        }
        
        public virtual Click_Input_OnRecordset_InVariableListParams Click_Input_OnRecordset_InVariableListParams
        {
            get
            {
                if ((this.mClick_Input_OnRecordset_InVariableListParams == null))
                {
                    this.mClick_Input_OnRecordset_InVariableListParams = new Click_Input_OnRecordset_InVariableListParams();
                }
                return this.mClick_Input_OnRecordset_InVariableListParams;
            }
        }
        
        public virtual Click_Input_OnVariable_InVariableListParams Click_Input_OnVariable_InVariableListParams
        {
            get
            {
                if ((this.mClick_Input_OnVariable_InVariableListParams == null))
                {
                    this.mClick_Input_OnVariable_InVariableListParams = new Click_Input_OnVariable_InVariableListParams();
                }
                return this.mClick_Input_OnVariable_InVariableListParams;
            }
        }
        
        public virtual Click_Output_OnRecordset_InVariableListParams Click_Output_OnRecordset_InVariableListParams
        {
            get
            {
                if ((this.mClick_Output_OnRecordset_InVariableListParams == null))
                {
                    this.mClick_Output_OnRecordset_InVariableListParams = new Click_Output_OnRecordset_InVariableListParams();
                }
                return this.mClick_Output_OnRecordset_InVariableListParams;
            }
        }
        
        public virtual Click_Output_OnVariable_InVariableListParams Click_Output_OnVariable_InVariableListParams
        {
            get
            {
                if ((this.mClick_Output_OnVariable_InVariableListParams == null))
                {
                    this.mClick_Output_OnVariable_InVariableListParams = new Click_Output_OnVariable_InVariableListParams();
                }
                return this.mClick_Output_OnVariable_InVariableListParams;
            }
        }
        
        public virtual Click_Scheduler_Disable_Task_Radio_ButtonParams Click_Scheduler_Disable_Task_Radio_ButtonParams
        {
            get
            {
                if ((this.mClick_Scheduler_Disable_Task_Radio_ButtonParams == null))
                {
                    this.mClick_Scheduler_Disable_Task_Radio_ButtonParams = new Click_Scheduler_Disable_Task_Radio_ButtonParams();
                }
                return this.mClick_Scheduler_Disable_Task_Radio_ButtonParams;
            }
        }
        
        public virtual Click_Scheduler_Enable_Task_Radio_ButtonParams Click_Scheduler_Enable_Task_Radio_ButtonParams
        {
            get
            {
                if ((this.mClick_Scheduler_Enable_Task_Radio_ButtonParams == null))
                {
                    this.mClick_Scheduler_Enable_Task_Radio_ButtonParams = new Click_Scheduler_Enable_Task_Radio_ButtonParams();
                }
                return this.mClick_Scheduler_Enable_Task_Radio_ButtonParams;
            }
        }
        
        public virtual Click_Scheduler_RunTaskParams Click_Scheduler_RunTaskParams
        {
            get
            {
                if ((this.mClick_Scheduler_RunTaskParams == null))
                {
                    this.mClick_Scheduler_RunTaskParams = new Click_Scheduler_RunTaskParams();
                }
                return this.mClick_Scheduler_RunTaskParams;
            }
        }
        
        public virtual Click_Settings_Admin_ServerPermissionsParams Click_Settings_Admin_ServerPermissionsParams
        {
            get
            {
                if ((this.mClick_Settings_Admin_ServerPermissionsParams == null))
                {
                    this.mClick_Settings_Admin_ServerPermissionsParams = new Click_Settings_Admin_ServerPermissionsParams();
                }
                return this.mClick_Settings_Admin_ServerPermissionsParams;
            }
        }
        
        public virtual Click_Settings_Contribute_ResourcePermissionsParams Click_Settings_Contribute_ResourcePermissionsParams
        {
            get
            {
                if ((this.mClick_Settings_Contribute_ResourcePermissionsParams == null))
                {
                    this.mClick_Settings_Contribute_ResourcePermissionsParams = new Click_Settings_Contribute_ResourcePermissionsParams();
                }
                return this.mClick_Settings_Contribute_ResourcePermissionsParams;
            }
        }
        
        public virtual Click_Settings_Contribute_ServerPermissionsParams Click_Settings_Contribute_ServerPermissionsParams
        {
            get
            {
                if ((this.mClick_Settings_Contribute_ServerPermissionsParams == null))
                {
                    this.mClick_Settings_Contribute_ServerPermissionsParams = new Click_Settings_Contribute_ServerPermissionsParams();
                }
                return this.mClick_Settings_Contribute_ServerPermissionsParams;
            }
        }
        
        public virtual Click_Settings_Execute_ResourcePermissionsParams Click_Settings_Execute_ResourcePermissionsParams
        {
            get
            {
                if ((this.mClick_Settings_Execute_ResourcePermissionsParams == null))
                {
                    this.mClick_Settings_Execute_ResourcePermissionsParams = new Click_Settings_Execute_ResourcePermissionsParams();
                }
                return this.mClick_Settings_Execute_ResourcePermissionsParams;
            }
        }
        
        public virtual Click_Settings_View_ResourcePermissionsParams Click_Settings_View_ResourcePermissionsParams
        {
            get
            {
                if ((this.mClick_Settings_View_ResourcePermissionsParams == null))
                {
                    this.mClick_Settings_View_ResourcePermissionsParams = new Click_Settings_View_ResourcePermissionsParams();
                }
                return this.mClick_Settings_View_ResourcePermissionsParams;
            }
        }
        
        public virtual DebugInput_Add_New_Line_InputDataParams DebugInput_Add_New_Line_InputDataParams
        {
            get
            {
                if ((this.mDebugInput_Add_New_Line_InputDataParams == null))
                {
                    this.mDebugInput_Add_New_Line_InputDataParams = new DebugInput_Add_New_Line_InputDataParams();
                }
                return this.mDebugInput_Add_New_Line_InputDataParams;
            }
        }
        
        public virtual DebugOutput_ExistsExpectedValues DebugOutput_ExistsExpectedValues
        {
            get
            {
                if ((this.mDebugOutput_ExistsExpectedValues == null))
                {
                    this.mDebugOutput_ExistsExpectedValues = new DebugOutput_ExistsExpectedValues();
                }
                return this.mDebugOutput_ExistsExpectedValues;
            }
        }
        
        public virtual DebugOutput_ExpandCollapseButton_ExistsExpectedValues DebugOutput_ExpandCollapseButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mDebugOutput_ExpandCollapseButton_ExistsExpectedValues == null))
                {
                    this.mDebugOutput_ExpandCollapseButton_ExistsExpectedValues = new DebugOutput_ExpandCollapseButton_ExistsExpectedValues();
                }
                return this.mDebugOutput_ExpandCollapseButton_ExistsExpectedValues;
            }
        }
        
        public virtual DebugOutput_FilterTextbox_ExistsExpectedValues DebugOutput_FilterTextbox_ExistsExpectedValues
        {
            get
            {
                if ((this.mDebugOutput_FilterTextbox_ExistsExpectedValues == null))
                {
                    this.mDebugOutput_FilterTextbox_ExistsExpectedValues = new DebugOutput_FilterTextbox_ExistsExpectedValues();
                }
                return this.mDebugOutput_FilterTextbox_ExistsExpectedValues;
            }
        }
        
        public virtual DebugOutput_ResultsTree_ExistsExpectedValues DebugOutput_ResultsTree_ExistsExpectedValues
        {
            get
            {
                if ((this.mDebugOutput_ResultsTree_ExistsExpectedValues == null))
                {
                    this.mDebugOutput_ResultsTree_ExistsExpectedValues = new DebugOutput_ResultsTree_ExistsExpectedValues();
                }
                return this.mDebugOutput_ResultsTree_ExistsExpectedValues;
            }
        }
        
        public virtual DebugOutput_SettingsButton_ExistsExpectedValues DebugOutput_SettingsButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mDebugOutput_SettingsButton_ExistsExpectedValues == null))
                {
                    this.mDebugOutput_SettingsButton_ExistsExpectedValues = new DebugOutput_SettingsButton_ExistsExpectedValues();
                }
                return this.mDebugOutput_SettingsButton_ExistsExpectedValues;
            }
        }
        
        public virtual Plugin_Connectot_Test_Connector_Calculate_OutputsParams Plugin_Connectot_Test_Connector_Calculate_OutputsParams
        {
            get
            {
                if ((this.mPlugin_Connectot_Test_Connector_Calculate_OutputsParams == null))
                {
                    this.mPlugin_Connectot_Test_Connector_Calculate_OutputsParams = new Plugin_Connectot_Test_Connector_Calculate_OutputsParams();
                }
                return this.mPlugin_Connectot_Test_Connector_Calculate_OutputsParams;
            }
        }
        
        public virtual Test_Connector_Calculate_OutputsParams Test_Connector_Calculate_OutputsParams
        {
            get
            {
                if ((this.mTest_Connector_Calculate_OutputsParams == null))
                {
                    this.mTest_Connector_Calculate_OutputsParams = new Test_Connector_Calculate_OutputsParams();
                }
                return this.mTest_Connector_Calculate_OutputsParams;
            }
        }
        
        public MainStudioWindow MainStudioWindow
        {
            get
            {
                if ((this.mMainStudioWindow == null))
                {
                    this.mMainStudioWindow = new MainStudioWindow();
                }
                return this.mMainStudioWindow;
            }
        }
        
        public MessageBoxWindow MessageBoxWindow
        {
            get
            {
                if ((this.mMessageBoxWindow == null))
                {
                    this.mMessageBoxWindow = new MessageBoxWindow();
                }
                return this.mMessageBoxWindow;
            }
        }
        
        public UIWarewolfDEV2LEROYWARWindow UIWarewolfDEV2LEROYWARWindow
        {
            get
            {
                if ((this.mUIWarewolfDEV2LEROYWARWindow == null))
                {
                    this.mUIWarewolfDEV2LEROYWARWindow = new UIWarewolfDEV2LEROYWARWindow();
                }
                return this.mUIWarewolfDEV2LEROYWARWindow;
            }
        }
        
        public DebugInputWindow DebugInputWindow
        {
            get
            {
                if ((this.mDebugInputWindow == null))
                {
                    this.mDebugInputWindow = new DebugInputWindow();
                }
                return this.mDebugInputWindow;
            }
        }
        
        public UIWpfWindow UIWpfWindow
        {
            get
            {
                if ((this.mUIWpfWindow == null))
                {
                    this.mUIWpfWindow = new UIWpfWindow();
                }
                return this.mUIWpfWindow;
            }
        }
        
        public SaveDialogWindow SaveDialogWindow
        {
            get
            {
                if ((this.mSaveDialogWindow == null))
                {
                    this.mSaveDialogWindow = new SaveDialogWindow();
                }
                return this.mSaveDialogWindow;
            }
        }
        
        public ServicePickerWindow ServicePickerWindow
        {
            get
            {
                if ((this.mServicePickerWindow == null))
                {
                    this.mServicePickerWindow = new ServicePickerWindow();
                }
                return this.mServicePickerWindow;
            }
        }
        
        public SplashPageWindow SplashPageWindow
        {
            get
            {
                if ((this.mSplashPageWindow == null))
                {
                    this.mSplashPageWindow = new SplashPageWindow();
                }
                return this.mSplashPageWindow;
            }
        }
        #endregion
        
        #region Fields
        private Assert_Close_Button_Exists_TopRibbonExpectedValues mAssert_Close_Button_Exists_TopRibbonExpectedValues;
        
        private Assert_Connect_button_Destination_Server_ExistsExpectedValues mAssert_Connect_button_Destination_Server_ExistsExpectedValues;
        
        private Assert_Connect_Button_Source_Server_ExistsExpectedValues mAssert_Connect_Button_Source_Server_ExistsExpectedValues;
        
        private Assert_Connect_ConnectControl_Button_Exists_InExplorerExpectedValues mAssert_Connect_ConnectControl_Button_Exists_InExplorerExpectedValues;
        
        private Assert_Connect_Control_DestinationServer_ExistsExpectedValues mAssert_Connect_Control_DestinationServer_ExistsExpectedValues;
        
        private Assert_Connect_Control_Exists_InExplorerExpectedValues mAssert_Connect_Control_Exists_InExplorerExpectedValues;
        
        private Assert_Connect_Control_SourceServer_ExistsExpectedValues mAssert_Connect_Control_SourceServer_ExistsExpectedValues;
        
        private Assert_Database_Source_Dropdownlist_ExistsExpectedValues mAssert_Database_Source_Dropdownlist_ExistsExpectedValues;
        
        private Assert_Database_Source_ExistsExpectedValues mAssert_Database_Source_ExistsExpectedValues;
        
        private Assert_DebugInput_CancelButton_ExistsExpectedValues mAssert_DebugInput_CancelButton_ExistsExpectedValues;
        
        private Assert_DebugInput_DebugButton_ExistsExpectedValues mAssert_DebugInput_DebugButton_ExistsExpectedValues;
        
        private Assert_DebugInput_InputData_Field_ExistsExpectedValues mAssert_DebugInput_InputData_Field_ExistsExpectedValues;
        
        private Assert_DebugInput_InputData_Window_ExistsExpectedValues mAssert_DebugInput_InputData_Window_ExistsExpectedValues;
        
        private Assert_DebugInput_Json_Tab_ExistsExpectedValues mAssert_DebugInput_Json_Tab_ExistsExpectedValues;
        
        private Assert_DebugInput_Json_Window_ExistsExpectedValues mAssert_DebugInput_Json_Window_ExistsExpectedValues;
        
        private Assert_DebugInput_RememberCheckbox_ExistsExpectedValues mAssert_DebugInput_RememberCheckbox_ExistsExpectedValues;
        
        private Assert_DebugInput_ViewInBrowser_Button_ExistsExpectedValues mAssert_DebugInput_ViewInBrowser_Button_ExistsExpectedValues;
        
        private Assert_DebugInput_Window_ExistsExpectedValues mAssert_DebugInput_Window_ExistsExpectedValues;
        
        private Assert_DebugInput_Xml_Tab_ExistsExpectedValues mAssert_DebugInput_Xml_Tab_ExistsExpectedValues;
        
        private Assert_DebugInput_Xml_Window_ExistsExpectedValues mAssert_DebugInput_Xml_Window_ExistsExpectedValues;
        
        private Assert_DeployButton_DestinationServer_ExistsExpectedValues mAssert_DeployButton_DestinationServer_ExistsExpectedValues;
        
        private Assert_Edit_Button_Destination_Server_ExistsExpectedValues mAssert_Edit_Button_Destination_Server_ExistsExpectedValues;
        
        private Assert_Explorer_Edit_Connect_Control_Button_ExistsExpectedValues mAssert_Explorer_Edit_Connect_Control_Button_ExistsExpectedValues;
        
        private Assert_Explorer_ExistsExpectedValues mAssert_Explorer_ExistsExpectedValues;
        
        private Assert_Explorer_ServerName_ExistsExpectedValues mAssert_Explorer_ServerName_ExistsExpectedValues;
        
        private Assert_Filter_Exists_InExplorerExpectedValues mAssert_Filter_Exists_InExplorerExpectedValues;
        
        private Assert_Filter_Source_Server_ExistsExpectedValues mAssert_Filter_Source_Server_ExistsExpectedValues;
        
        private Assert_FullScreen_Button_Exists_TopRibbonExpectedValues mAssert_FullScreen_Button_Exists_TopRibbonExpectedValues;
        
        private Assert_InputData_Tab_ExistsExpectedValues mAssert_InputData_Tab_ExistsExpectedValues;
        
        private Assert_LockAndUnlock_Button_Exists_TopRibbonExpectedValues mAssert_LockAndUnlock_Button_Exists_TopRibbonExpectedValues;
        
        private Assert_Maximize_Button_Exists_TopRibbonExpectedValues mAssert_Maximize_Button_Exists_TopRibbonExpectedValues;
        
        private Assert_Minimize_Button_Exists_TopRibbonExpectedValues mAssert_Minimize_Button_Exists_TopRibbonExpectedValues;
        
        private Assert_NewResource_Count_ExistsExpectedValues mAssert_NewResource_Count_ExistsExpectedValues;
        
        private Assert_NewResource_Label_ExistsExpectedValues mAssert_NewResource_Label_ExistsExpectedValues;
        
        private Assert_NewWorkFlow_RibbonButton_ExistsExpectedValues mAssert_NewWorkFlow_RibbonButton_ExistsExpectedValues;
        
        private Assert_Override_Count_ExistsExpectedValues mAssert_Override_Count_ExistsExpectedValues;
        
        private Assert_Override_Label_DestinationServer_ExistsExpectedValues mAssert_Override_Label_DestinationServer_ExistsExpectedValues;
        
        private Assert_Plugin_Source_ExistsExpectedValues mAssert_Plugin_Source_ExistsExpectedValues;
        
        private Assert_Position_ExistsExpectedValues mAssert_Position_ExistsExpectedValues;
        
        private Assert_Refresh_Button_Exists_InExplorerExpectedValues mAssert_Refresh_Button_Exists_InExplorerExpectedValues;
        
        private Assert_Refresh_Button_Source_Server_ExistsExpectedValues mAssert_Refresh_Button_Source_Server_ExistsExpectedValues;
        
        private Assert_SaveDialog_CancelButton_ExistsExpectedValues mAssert_SaveDialog_CancelButton_ExistsExpectedValues;
        
        private Assert_SaveDialog_ErrorLabel_ExistsExpectedValues mAssert_SaveDialog_ErrorLabel_ExistsExpectedValues;
        
        private Assert_SaveDialog_ExistsExpectedValues mAssert_SaveDialog_ExistsExpectedValues;
        
        private Assert_SaveDialog_ExplorerTree_ExistsExpectedValues mAssert_SaveDialog_ExplorerTree_ExistsExpectedValues;
        
        private Assert_SaveDialog_ExplorerTreeItem_ExistsExpectedValues mAssert_SaveDialog_ExplorerTreeItem_ExistsExpectedValues;
        
        private Assert_SaveDialog_ExplorerView_ExistsExpectedValues mAssert_SaveDialog_ExplorerView_ExistsExpectedValues;
        
        private Assert_SaveDialog_FilterTextbox_ExistsExpectedValues mAssert_SaveDialog_FilterTextbox_ExistsExpectedValues;
        
        private Assert_SaveDialog_NameLabel_ExistsExpectedValues mAssert_SaveDialog_NameLabel_ExistsExpectedValues;
        
        private Assert_SaveDialog_RefreshButton_ExistsExpectedValues mAssert_SaveDialog_RefreshButton_ExistsExpectedValues;
        
        private Assert_SaveDialog_SaveButton_ExistsExpectedValues mAssert_SaveDialog_SaveButton_ExistsExpectedValues;
        
        private Assert_SaveDialog_ServiceName_Textbox_ExistsExpectedValues mAssert_SaveDialog_ServiceName_Textbox_ExistsExpectedValues;
        
        private Assert_SaveDialog_WorkspaceName_ExistsExpectedValues mAssert_SaveDialog_WorkspaceName_ExistsExpectedValues;
        
        private Assert_Scheduler_ConncectControl_ExistsExpectedValues mAssert_Scheduler_ConncectControl_ExistsExpectedValues;
        
        private Assert_Scheduler_ConnectButton_ExistsExpectedValues mAssert_Scheduler_ConnectButton_ExistsExpectedValues;
        
        private Assert_Scheduler_ConnectControl_Edit_ExistsExpectedValues mAssert_Scheduler_ConnectControl_Edit_ExistsExpectedValues;
        
        private Assert_Scheduler_CreateNewTask_ExistsExpectedValues mAssert_Scheduler_CreateNewTask_ExistsExpectedValues;
        
        private Assert_Scheduler_DeleteButton_ExistsExpectedValues mAssert_Scheduler_DeleteButton_ExistsExpectedValues;
        
        private Assert_Scheduler_DisabledRadioButton_ExistsExpectedValues mAssert_Scheduler_DisabledRadioButton_ExistsExpectedValues;
        
        private Assert_Scheduler_EditTrigger_ExistsExpectedValues mAssert_Scheduler_EditTrigger_ExistsExpectedValues;
        
        private Assert_Scheduler_EnabledRadioButton_ExistsExpectedValues mAssert_Scheduler_EnabledRadioButton_ExistsExpectedValues;
        
        private Assert_Scheduler_ErrorMessage_ExistsExpectedValues mAssert_Scheduler_ErrorMessage_ExistsExpectedValues;
        
        private Assert_Scheduler_HistoryInput_ExistsExpectedValues mAssert_Scheduler_HistoryInput_ExistsExpectedValues;
        
        private Assert_Scheduler_HistoryLabel_ExistsExpectedValues mAssert_Scheduler_HistoryLabel_ExistsExpectedValues;
        
        private Assert_Scheduler_HistoryTable_ExistsExpectedValues mAssert_Scheduler_HistoryTable_ExistsExpectedValues;
        
        private Assert_Scheduler_NameInput_ExistsExpectedValues mAssert_Scheduler_NameInput_ExistsExpectedValues;
        
        private Assert_Scheduler_NameLabel_ExistsExpectedValues mAssert_Scheduler_NameLabel_ExistsExpectedValues;
        
        private Assert_Scheduler_PasswordInput_ExistsExpectedValues mAssert_Scheduler_PasswordInput_ExistsExpectedValues;
        
        private Assert_Scheduler_PasswordLabel_ExistsExpectedValues mAssert_Scheduler_PasswordLabel_ExistsExpectedValues;
        
        private Assert_Scheduler_ResourcePicker_ExistsExpectedValues mAssert_Scheduler_ResourcePicker_ExistsExpectedValues;
        
        private Assert_Scheduler_RunTask_Checkbox_ExistsExpectedValues mAssert_Scheduler_RunTask_Checkbox_ExistsExpectedValues;
        
        private Assert_Scheduler_Status_RadioButton_ExistsExpectedValues mAssert_Scheduler_Status_RadioButton_ExistsExpectedValues;
        
        private Assert_Scheduler_StatusLabe_ExistsExpectedValues mAssert_Scheduler_StatusLabe_ExistsExpectedValues;
        
        private Assert_Scheduler_TriggerLabel_ExistsExpectedValues mAssert_Scheduler_TriggerLabel_ExistsExpectedValues;
        
        private Assert_Scheduler_TriggerValue_ExistsExpectedValues mAssert_Scheduler_TriggerValue_ExistsExpectedValues;
        
        private Assert_Scheduler_UserAccountLabel_ExistsExpectedValues mAssert_Scheduler_UserAccountLabel_ExistsExpectedValues;
        
        private Assert_Scheduler_UsernameInput_ExistsExpectedValues mAssert_Scheduler_UsernameInput_ExistsExpectedValues;
        
        private Assert_Scheduler_Usernamelabel_ExistsExpectedValues mAssert_Scheduler_Usernamelabel_ExistsExpectedValues;
        
        private Assert_Scheduler_WorkflowInput_ExistsExpectedValues mAssert_Scheduler_WorkflowInput_ExistsExpectedValues;
        
        private Assert_Scheduler_WorkflowLabel_ExistsExpectedValues mAssert_Scheduler_WorkflowLabel_ExistsExpectedValues;
        
        private Assert_Server_Version_ExistsExpectedValues mAssert_Server_Version_ExistsExpectedValues;
        
        private Assert_Service_Picker_Dialog_ExistsExpectedValues mAssert_Service_Picker_Dialog_ExistsExpectedValues;
        
        private Assert_Service_Picker_Exists_OnDesignSurfaceExpectedValues mAssert_Service_Picker_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_ServiceLabel_DestinationServer_ExistsExpectedValues mAssert_ServiceLabel_DestinationServer_ExistsExpectedValues;
        
        private Assert_ServicesCount_Label_ExistsExpectedValues mAssert_ServicesCount_Label_ExistsExpectedValues;
        
        private Assert_Settings_ConnectButton_ExistsExpectedValues mAssert_Settings_ConnectButton_ExistsExpectedValues;
        
        private Assert_Settings_ConnectControl_Edit_Button_ExistsExpectedValues mAssert_Settings_ConnectControl_Edit_Button_ExistsExpectedValues;
        
        private Assert_Settings_ConnectControl_ExistsExpectedValues mAssert_Settings_ConnectControl_ExistsExpectedValues;
        
        private Assert_Settings_LoggingTab_ExistsExpectedValues mAssert_Settings_LoggingTab_ExistsExpectedValues;
        
        private Assert_Settings_ResourcePermissions_ExistsExpectedValues mAssert_Settings_ResourcePermissions_ExistsExpectedValues;
        
        private Assert_Settings_SecurityTab_ExistsExpectedValues mAssert_Settings_SecurityTab_ExistsExpectedValues;
        
        private Assert_Settings_ServerPermissions_ExistsExpectedValues mAssert_Settings_ServerPermissions_ExistsExpectedValues;
        
        private Assert_ShowDependencies_Button_DestinationServer_ExistsExpectedValues mAssert_ShowDependencies_Button_DestinationServer_ExistsExpectedValues;
        
        private Assert_Source_Server_Edit_ExistsExpectedValues mAssert_Source_Server_Edit_ExistsExpectedValues;
        
        private Assert_Source_Server_Name_ExistsExpectedValues mAssert_Source_Server_Name_ExistsExpectedValues;
        
        private Assert_SourceCount_DestinationServer_ExistsExpectedValues mAssert_SourceCount_DestinationServer_ExistsExpectedValues;
        
        private Assert_SourceLabel_DestinationServer_ExistsExpectedValues mAssert_SourceLabel_DestinationServer_ExistsExpectedValues;
        
        private Assert_SplitPane_Content_ExistsExpectedValues mAssert_SplitPane_Content_ExistsExpectedValues;
        
        private Assert_SplitPane_Left_ExistsExpectedValues mAssert_SplitPane_Left_ExistsExpectedValues;
        
        private Assert_SplitPane_Right_ExistsExpectedValues mAssert_SplitPane_Right_ExistsExpectedValues;
        
        private Assert_SuccessMessage_Label_ExistsExpectedValues mAssert_SuccessMessage_Label_ExistsExpectedValues;
        
        private Assert_TabHeader_ExistsExpectedValues mAssert_TabHeader_ExistsExpectedValues;
        
        private Assert_Toolbox_FilterTextbox_ExistsExpectedValues mAssert_Toolbox_FilterTextbox_ExistsExpectedValues;
        
        private Assert_Toolbox_RefreshButton_ExistsExpectedValues mAssert_Toolbox_RefreshButton_ExistsExpectedValues;
        
        private Assert_UnLock_Button_ExistsExpectedValues mAssert_UnLock_Button_ExistsExpectedValues;
        
        private Assert_VariableList_AddedRecordsetParams mAssert_VariableList_AddedRecordsetParams;
        
        private Assert_VariableList_AddedVariableParams mAssert_VariableList_AddedVariableParams;
        
        private Assert_VariableList_DataInputTree_ExistsExpectedValues mAssert_VariableList_DataInputTree_ExistsExpectedValues;
        
        private Assert_VariableList_DeleteButton_ExistsExpectedValues mAssert_VariableList_DeleteButton_ExistsExpectedValues;
        
        private Assert_VariableList_ExistsExpectedValues mAssert_VariableList_ExistsExpectedValues;
        
        private Assert_VariableList_Recordset_ChildTextBox_ExistsExpectedValues mAssert_VariableList_Recordset_ChildTextBox_ExistsExpectedValues;
        
        private Assert_VariableList_RecordsetInput_CheckBox_ExistsExpectedValues mAssert_VariableList_RecordsetInput_CheckBox_ExistsExpectedValues;
        
        private Assert_VariableList_RecordsetInput_ChildCheckBox_ExistsExpectedValues mAssert_VariableList_RecordsetInput_ChildCheckBox_ExistsExpectedValues;
        
        private Assert_VariableList_RecordsetItem_ExistsExpectedValues mAssert_VariableList_RecordsetItem_ExistsExpectedValues;
        
        private Assert_VariableList_RecordsetOutput_CheckBox_ExistsExpectedValues mAssert_VariableList_RecordsetOutput_CheckBox_ExistsExpectedValues;
        
        private Assert_VariableList_RecordsetOutput_ChildCheckBox_ExistsExpectedValues mAssert_VariableList_RecordsetOutput_ChildCheckBox_ExistsExpectedValues;
        
        private Assert_VariableList_RecordsetTextBox_ExistsExpectedValues mAssert_VariableList_RecordsetTextBox_ExistsExpectedValues;
        
        private Assert_VariableList_SortButton_ExistsExpectedValues mAssert_VariableList_SortButton_ExistsExpectedValues;
        
        private Assert_VariableList_VariableInput_CheckBox_ExistsExpectedValues mAssert_VariableList_VariableInput_CheckBox_ExistsExpectedValues;
        
        private Assert_VariableList_VariableItem_ExistsExpectedValues mAssert_VariableList_VariableItem_ExistsExpectedValues;
        
        private Assert_VariableList_VariableOutput_CheckBox_ExistsExpectedValues mAssert_VariableList_VariableOutput_CheckBox_ExistsExpectedValues;
        
        private Assert_VariableList_VariableTextBox_ExistsExpectedValues mAssert_VariableList_VariableTextBox_ExistsExpectedValues;
        
        private Assert_Web_Source_ExistsExpectedValues mAssert_Web_Source_ExistsExpectedValues;
        
        private Assert_WebSource_ReqTypeComboBox_ExistsExpectedValues mAssert_WebSource_ReqTypeComboBox_ExistsExpectedValues;
        
        private Click_ExpandAndStepIn_NestedWorkflowParams mClick_ExpandAndStepIn_NestedWorkflowParams;
        
        private Click_Input_OnRecordset_InVariableListParams mClick_Input_OnRecordset_InVariableListParams;
        
        private Click_Input_OnVariable_InVariableListParams mClick_Input_OnVariable_InVariableListParams;
        
        private Click_Output_OnRecordset_InVariableListParams mClick_Output_OnRecordset_InVariableListParams;
        
        private Click_Output_OnVariable_InVariableListParams mClick_Output_OnVariable_InVariableListParams;
        
        private Click_Scheduler_Disable_Task_Radio_ButtonParams mClick_Scheduler_Disable_Task_Radio_ButtonParams;
        
        private Click_Scheduler_Enable_Task_Radio_ButtonParams mClick_Scheduler_Enable_Task_Radio_ButtonParams;
        
        private Click_Scheduler_RunTaskParams mClick_Scheduler_RunTaskParams;
        
        private Click_Settings_Admin_ServerPermissionsParams mClick_Settings_Admin_ServerPermissionsParams;
        
        private Click_Settings_Contribute_ResourcePermissionsParams mClick_Settings_Contribute_ResourcePermissionsParams;
        
        private Click_Settings_Contribute_ServerPermissionsParams mClick_Settings_Contribute_ServerPermissionsParams;
        
        private Click_Settings_Execute_ResourcePermissionsParams mClick_Settings_Execute_ResourcePermissionsParams;
        
        private Click_Settings_View_ResourcePermissionsParams mClick_Settings_View_ResourcePermissionsParams;
        
        private DebugInput_Add_New_Line_InputDataParams mDebugInput_Add_New_Line_InputDataParams;
        
        private DebugOutput_ExistsExpectedValues mDebugOutput_ExistsExpectedValues;
        
        private DebugOutput_ExpandCollapseButton_ExistsExpectedValues mDebugOutput_ExpandCollapseButton_ExistsExpectedValues;
        
        private DebugOutput_FilterTextbox_ExistsExpectedValues mDebugOutput_FilterTextbox_ExistsExpectedValues;
        
        private DebugOutput_ResultsTree_ExistsExpectedValues mDebugOutput_ResultsTree_ExistsExpectedValues;
        
        private DebugOutput_SettingsButton_ExistsExpectedValues mDebugOutput_SettingsButton_ExistsExpectedValues;
        
        private Plugin_Connectot_Test_Connector_Calculate_OutputsParams mPlugin_Connectot_Test_Connector_Calculate_OutputsParams;
        
        private Test_Connector_Calculate_OutputsParams mTest_Connector_Calculate_OutputsParams;
        
        private MainStudioWindow mMainStudioWindow;
        
        private MessageBoxWindow mMessageBoxWindow;
        
        private UIWarewolfDEV2LEROYWARWindow mUIWarewolfDEV2LEROYWARWindow;
        
        private DebugInputWindow mDebugInputWindow;
        
        private UIWpfWindow mUIWpfWindow;
        
        private SaveDialogWindow mSaveDialogWindow;
        
        private ServicePickerWindow mServicePickerWindow;
        
        private SplashPageWindow mSplashPageWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Close_Button_Exists_TopRibbon'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Close_Button_Exists_TopRibbonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool CloseStudioButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Connect_button_Destination_Server_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Connect_button_Destination_Server_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_DestinationServerConnectbtn_AutoID' button equals 'True'
        /// </summary>
        public bool ConnectDestinationButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Connect_Button_Source_Server_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Connect_Button_Source_Server_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_SourceConnectServerbtn_AutoID' button equals 'True'
        /// </summary>
        public bool SourceConnectButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Connect_ConnectControl_Button_Exists_InExplorer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Connect_ConnectControl_Button_Exists_InExplorerExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_ConnectServerBtn_AutoID' button equals 'True'
        /// </summary>
        public bool ConnectServerButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Connect_Control_DestinationServer_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Connect_Control_DestinationServer_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'ToggleButton' button equals 'True'
        /// </summary>
        public bool ConnectControlDestinationExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Connect_Control_Exists_InExplorer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Connect_Control_Exists_InExplorerExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'ToggleButton' button equals 'True'
        /// </summary>
        public bool ServerListComboBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Connect_Control_SourceServer_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Connect_Control_SourceServer_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SourceConnectControl' custom control equals 'True'
        /// </summary>
        public bool SourceConnectControlExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Database_Source_Dropdownlist_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Database_Source_Dropdownlist_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SourcesComboBox' custom control equals 'True'
        /// </summary>
        public bool SourcesComboBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Database_Source_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Database_Source_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Create a new database source' button equals 'True'
        /// </summary>
        public bool DatabaseSourceButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugInput_CancelButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_DebugInput_CancelButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Cancel' button equals 'True'
        /// </summary>
        public bool CancelButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugInput_DebugButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_DebugInput_DebugButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Debug (F6)' button equals 'True'
        /// </summary>
        public bool DebugF6ButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugInput_InputData_Field_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_DebugInput_InputData_Field_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'rec(1).set' label equals 'True'
        /// </summary>
        public bool UIRec1setTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugInput_InputData_Window_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_DebugInput_InputData_Window_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DataListInputs' table equals 'True'
        /// </summary>
        public bool DataListInputsTableExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugInput_Json_Tab_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_DebugInput_Json_Tab_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'JSON' tab equals 'True'
        /// </summary>
        public bool JSONTabExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugInput_Json_Window_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_DebugInput_Json_Window_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_JsonEditor_AutoID' custom control equals 'True'
        /// </summary>
        public bool JSONWindowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugInput_RememberCheckbox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_DebugInput_RememberCheckbox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Remember Debug Inputs' check box equals 'True'
        /// </summary>
        public bool RememberDebugInputCheckBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugInput_ViewInBrowser_Button_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_DebugInput_ViewInBrowser_Button_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'View In Browser (F7)' button equals 'True'
        /// </summary>
        public bool ViewInBrowserF7ButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugInput_Window_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_DebugInput_Window_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Wpf' window equals 'True'
        /// </summary>
        public bool DebugInputWindow1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugInput_Xml_Tab_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_DebugInput_Xml_Tab_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'XML' tab equals 'True'
        /// </summary>
        public bool XMLTabExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugInput_Xml_Window_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_DebugInput_Xml_Window_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_XMLEditor_AutoID' custom control equals 'True'
        /// </summary>
        public bool XMLWindowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DeployButton_DestinationServer_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_DeployButton_DestinationServer_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Deploy' button equals 'True'
        /// </summary>
        public bool DeployButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Edit_Button_Destination_Server_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Edit_Button_Destination_Server_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '...' button equals 'True'
        /// </summary>
        public bool EditDestinationButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Explorer_Edit_Connect_Control_Button_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Explorer_Edit_Connect_Control_Button_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '...' button equals 'True'
        /// </summary>
        public bool EditServerButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Explorer_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Explorer_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_ExplorerControl_AutoID' custom control equals 'True'
        /// </summary>
        public bool ExplorerExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Explorer_ServerName_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Explorer_ServerName_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
        /// </summary>
        public bool ExplorerTreeItemChildExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Filter_Exists_InExplorer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Filter_Exists_InExplorerExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Filter' label equals 'True'
        /// </summary>
        public bool FilterTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Filter_Source_Server_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Filter_Source_Server_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Filter' label equals 'True'
        /// </summary>
        public bool FilterTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_FullScreen_Button_Exists_TopRibbon'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_FullScreen_Button_Exists_TopRibbonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool MaximizeRestoreStudioButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_InputData_Tab_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_InputData_Tab_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Input Data' tab equals 'True'
        /// </summary>
        public bool InputDataTabExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_LockAndUnlock_Button_Exists_TopRibbon'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_LockAndUnlock_Button_Exists_TopRibbonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool LockStudioButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Maximize_Button_Exists_TopRibbon'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Maximize_Button_Exists_TopRibbonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool MaximizeStudioButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Minimize_Button_Exists_TopRibbon'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Minimize_Button_Exists_TopRibbonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool MinimizeStudioButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_NewResource_Count_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_NewResource_Count_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of link equals 'True'
        /// </summary>
        public bool NewResourceHyperlinkExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_NewResource_Label_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_NewResource_Label_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'New Resources' label equals 'True'
        /// </summary>
        public bool NewResourcesTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_NewWorkFlow_RibbonButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_NewWorkFlow_RibbonButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' label equals 'True'
        /// </summary>
        public bool NewWorkflowIconExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Override_Count_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Override_Count_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of link equals 'True'
        /// </summary>
        public bool OverrideHyperlinkExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Override_Label_DestinationServer_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Override_Label_DestinationServer_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Override' label equals 'True'
        /// </summary>
        public bool OverrideTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Plugin_Source_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Plugin_Source_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Create a new plugin source' button equals 'True'
        /// </summary>
        public bool PluginSourceButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Position_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Position_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'PART_FilesMenuItem' menu item equals 'True'
        /// </summary>
        public bool PositionButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Refresh_Button_Exists_InExplorer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Refresh_Button_Exists_InExplorerExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool ExplorerRefreshButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Refresh_Button_Source_Server_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Refresh_Button_Source_Server_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool RefreshSourceServerButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_CancelButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_SaveDialog_CancelButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Cancel' button equals 'True'
        /// </summary>
        public bool CancelButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_ErrorLabel_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_SaveDialog_ErrorLabel_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of ''Name' cannot be empty.' label equals 'True'
        /// </summary>
        public bool ErrorLabelExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_SaveDialog_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SaveDialogView' window equals 'True'
        /// </summary>
        public bool SaveDialogWindowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_ExplorerTree_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_SaveDialog_ExplorerTree_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'ExplorerTree' tree equals 'True'
        /// </summary>
        public bool ExplorerTreeExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_ExplorerTreeItem_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_SaveDialog_ExplorerTreeItem_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
        /// </summary>
        public bool ExplorerTreeItemExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_ExplorerView_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_SaveDialog_ExplorerView_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'ExplorerView' custom control equals 'True'
        /// </summary>
        public bool ExplorerViewExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_FilterTextbox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_SaveDialog_FilterTextbox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
        /// </summary>
        public bool SearchTextBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_NameLabel_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_SaveDialog_NameLabel_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Name:' label equals 'True'
        /// </summary>
        public bool NameLabelExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_RefreshButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_SaveDialog_RefreshButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool RefreshButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_SaveButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_SaveDialog_SaveButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Save' button equals 'True'
        /// </summary>
        public bool SaveButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_ServiceName_Textbox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_SaveDialog_ServiceName_Textbox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'ServiceNameTextBox' text box equals 'True'
        /// </summary>
        public bool ServiceNameTextBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_WorkspaceName_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_SaveDialog_WorkspaceName_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Unsaved 1' label equals 'True'
        /// </summary>
        public bool WorkspaceNameExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_ConncectControl_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_ConncectControl_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_SettingsServerComboBox_AutoID' combo box equals 'True'
        /// </summary>
        public bool ServerComboBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_ConnectButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_ConnectButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_SettingsServerConnectButton_AutoID' button equals 'True'
        /// </summary>
        public bool ConnectServerButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_ConnectControl_Edit_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_ConnectControl_Edit_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '...' button equals 'True'
        /// </summary>
        public bool EditServerButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_CreateNewTask_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_CreateNewTask_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of first button next to '' button equals 'True'
        /// </summary>
        public bool NewTaskButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_DeleteButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_DeleteButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '...' button equals 'True'
        /// </summary>
        public bool DeleteTaskButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_DisabledRadioButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_DisabledRadioButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Disabled' radio button equals 'True'
        /// </summary>
        public bool DisabledRadioButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_EditTrigger_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_EditTrigger_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool EditTriggerButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_EnabledRadioButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_EnabledRadioButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Enabled' radio button equals 'True'
        /// </summary>
        public bool EnabledRadioButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_ErrorMessage_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_ErrorMessage_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Please select a workflow to schedule' label equals 'True'
        /// </summary>
        public bool ErrorMessageTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_HistoryInput_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_HistoryInput_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_NumOfHisTextBox' text box equals 'True'
        /// </summary>
        public bool NumOfHistoryTextBoxEditExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_HistoryLabel_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_HistoryLabel_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Number of History records to load (0 = all)' label equals 'True'
        /// </summary>
        public bool NumberofHistoryTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_HistoryTable_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_HistoryTable_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of table equals 'True'
        /// </summary>
        public bool HistoryTableExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_NameInput_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_NameInput_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_NameTextbox' text box equals 'True'
        /// </summary>
        public bool NameTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_NameLabel_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_NameLabel_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Name' label equals 'True'
        /// </summary>
        public bool NameTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_PasswordInput_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_PasswordInput_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_PasswordBox' text box equals 'True'
        /// </summary>
        public bool PasswordTextBoxEditExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_PasswordLabel_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_PasswordLabel_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Password' label equals 'True'
        /// </summary>
        public bool PasswordTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_ResourcePicker_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_ResourcePicker_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '...' button equals 'True'
        /// </summary>
        public bool ResourcePickerButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_RunTask_Checkbox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_RunTask_Checkbox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Run task as soon as possible after a scheduled sta...' check box equals 'True'
        /// </summary>
        public bool RunTaskCheckBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_Status_RadioButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_Status_RadioButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of check box equals 'True'
        /// </summary>
        public bool StatusCheckboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_StatusLabe_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_StatusLabe_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Status' label equals 'True'
        /// </summary>
        public bool StatusTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_TriggerLabel_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_TriggerLabel_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Triggered at' label equals 'True'
        /// </summary>
        public bool TriggerTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_TriggerValue_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_TriggerValue_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'At 2:40 PM every day' label equals 'True'
        /// </summary>
        public bool TriggerValueTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_UserAccountLabel_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_UserAccountLabel_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Run as the following user account' label equals 'True'
        /// </summary>
        public bool UIRunasthefollowinguseTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_UsernameInput_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_UsernameInput_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_UserNameTextBox' text box equals 'True'
        /// </summary>
        public bool UserNameTextBoxEditExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_Usernamelabel_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_Usernamelabel_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Username' label equals 'True'
        /// </summary>
        public bool UsernameTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_WorkflowInput_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_WorkflowInput_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_WorkflowNameTextBox_AutoID' text box equals 'True'
        /// </summary>
        public bool WorkflowNameTextBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_WorkflowLabel_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Scheduler_WorkflowLabel_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Workflow' label equals 'True'
        /// </summary>
        public bool WorkflowTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Server_Version_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Server_Version_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SplashPage' window equals 'True'
        /// </summary>
        public bool SplashPageWindowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Service_Picker_Dialog_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Service_Picker_Dialog_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Wpf' window equals 'True'
        /// </summary>
        public bool ServicePickerDialogExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Service_Picker_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Service_Picker_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Wpf' window equals 'True'
        /// </summary>
        public bool ServicePickerWindowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_ServiceLabel_DestinationServer_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_ServiceLabel_DestinationServer_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Services' label equals 'True'
        /// </summary>
        public bool ServicesTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_ServicesCount_Label_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_ServicesCount_Label_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '0' label equals 'True'
        /// </summary>
        public bool ServiceCountTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Settings_ConnectButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Settings_ConnectButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_SettingsServerConnectButton_AutoID' button equals 'True'
        /// </summary>
        public bool ConnectServerButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Settings_ConnectControl_Edit_Button_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Settings_ConnectControl_Edit_Button_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '...' button equals 'True'
        /// </summary>
        public bool EditServerButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Settings_ConnectControl_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Settings_ConnectControl_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_SettingsServerComboBox_AutoID' combo box equals 'True'
        /// </summary>
        public bool SettingsServerComboBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Settings_LoggingTab_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Settings_LoggingTab_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'System.Windows.Controls.TabItem Header: Content:' tab equals 'True'
        /// </summary>
        public bool LoggingTabExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Settings_ResourcePermissions_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Settings_ResourcePermissions_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'ResourcePermissionsDataGrid' table equals 'True'
        /// </summary>
        public bool ResourcePermissionsExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Settings_SecurityTab_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Settings_SecurityTab_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'System.Windows.Controls.TabItem Header: Content:' tab equals 'True'
        /// </summary>
        public bool SecurityTabExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Settings_ServerPermissions_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Settings_ServerPermissions_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'ServerPermissionsDataGrid' table equals 'True'
        /// </summary>
        public bool ServerPermissionsExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_ShowDependencies_Button_DestinationServer_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_ShowDependencies_Button_DestinationServer_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Select All Dependencies' button equals 'True'
        /// </summary>
        public bool ShowDependenciesButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Source_Server_Edit_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Source_Server_Edit_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '...' button equals 'True'
        /// </summary>
        public bool EditSourceButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Source_Server_Name_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Source_Server_Name_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
        /// </summary>
        public bool SourceServerNameExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SourceCount_DestinationServer_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_SourceCount_DestinationServer_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '0' label equals 'True'
        /// </summary>
        public bool SourceCountTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SourceLabel_DestinationServer_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_SourceLabel_DestinationServer_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Sources' label equals 'True'
        /// </summary>
        public bool SourcesTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SplitPane_Content_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_SplitPane_Content_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SplitPaneContent' custom control equals 'True'
        /// </summary>
        public bool SplitPaneContentExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SplitPane_Left_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_SplitPane_Left_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SplitPaneMiddle' custom control equals 'True'
        /// </summary>
        public bool SplitPaneMiddleExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SplitPane_Right_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_SplitPane_Right_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SplitPaneRight' custom control equals 'True'
        /// </summary>
        public bool SplitPaneRightExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SuccessMessage_Label_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_SuccessMessage_Label_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '1 Resource Deployed Successfully.' label equals 'True'
        /// </summary>
        public bool SuccessMessageTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_TabHeader_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_TabHeader_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Dev2.Studio.ViewModels.Help.HelpViewModel' tab equals 'True'
        /// </summary>
        public bool TabContextMenuExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Toolbox_FilterTextbox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Toolbox_FilterTextbox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
        /// </summary>
        public bool SearchTextBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Toolbox_RefreshButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Toolbox_RefreshButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool RefreshButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_UnLock_Button_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_UnLock_Button_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Lock / unlock the menu' button equals 'True'
        /// </summary>
        public bool LockMenuButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_AddedRecordset'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_VariableList_AddedRecordsetParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'rec().set' in 'Item: Unlimited.Applications.BusinessDesignStudio....' cell
        /// </summary>
        public string UIItemUnlimitedApplicaCellValue = "rec().set";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_AddedVariable'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_VariableList_AddedVariableParams
    {
        
        #region Fields
        /// <summary>
        /// Type '[[var]]' in 'Item: Unlimited.Applications.BusinessDesignStudio....' cell
        /// </summary>
        public string UIItemUnlimitedApplicaCellValue = "[[var]]";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_DataInputTree_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_VariableList_DataInputTree_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_VariableTreeView_AutoID' tree equals 'True'
        /// </summary>
        public bool VariableTreeViewExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_DeleteButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_VariableList_DeleteButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool DeleteButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_VariableList_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_VariablesControl_AutoID' custom control equals 'True'
        /// </summary>
        public bool VariablesControlExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_Recordset_ChildTextBox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_VariableList_Recordset_ChildTextBox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_NameTextBox_AutoID' text box equals 'True'
        /// </summary>
        public bool RecordsetNameChildTextBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_RecordsetInput_CheckBox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_VariableList_RecordsetInput_CheckBox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_IsInputCheckbox_AutoID' check box equals 'True'
        /// </summary>
        public bool RecordsetInputCheckboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_RecordsetInput_ChildCheckBox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_VariableList_RecordsetInput_ChildCheckBox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_IsInputCheckbox_AutoID' check box equals 'True'
        /// </summary>
        public bool RecordsetChildInputCheckboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_RecordsetItem_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_VariableList_RecordsetItem_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of tree item numbered 2 in 'UI_VariableTreeView_AutoID' tree item equals 'True'
        /// </summary>
        public bool RecordsetTreeItemExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_RecordsetOutput_CheckBox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_VariableList_RecordsetOutput_CheckBox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_IsOutputCheckbox_AutoID' check box equals 'True'
        /// </summary>
        public bool RecordsetOutputCheckboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_RecordsetOutput_ChildCheckBox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_VariableList_RecordsetOutput_ChildCheckBox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_IsOutputCheckbox_AutoID' check box equals 'True'
        /// </summary>
        public bool RecordsetChildOutputCheckboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_RecordsetTextBox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_VariableList_RecordsetTextBox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_NameTextBox_AutoID' text box equals 'True'
        /// </summary>
        public bool RecordsetNameTextBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_SortButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_VariableList_SortButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool SortButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_VariableInput_CheckBox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_VariableList_VariableInput_CheckBox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_IsInputCheckbox_AutoID' check box equals 'True'
        /// </summary>
        public bool VariableInputCheckboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_VariableItem_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_VariableList_VariableItem_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of tree item numbered 1 in 'UI_VariableTreeView_AutoID' tree item equals 'True'
        /// </summary>
        public bool VariableTreeItemExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_VariableOutput_CheckBox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_VariableList_VariableOutput_CheckBox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_IsOutputCheckbox_AutoID' check box equals 'True'
        /// </summary>
        public bool VariableOutputCheckboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_VariableTextBox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_VariableList_VariableTextBox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_NameTextBox_AutoID' text box equals 'True'
        /// </summary>
        public bool VariableNameTextBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Web_Source_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Web_Source_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Create a new web source' button equals 'True'
        /// </summary>
        public bool WebSourceButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_WebSource_ReqTypeComboBox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_WebSource_ReqTypeComboBox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'RequestTypes' combo box equals 'True'
        /// </summary>
        public bool RequestTypesComboBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_ExpandAndStepIn_NestedWorkflow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Click_ExpandAndStepIn_NestedWorkflowParams
    {
        
        #region Fields
        /// <summary>
        /// Expand 'Hello World' tree item
        /// </summary>
        public bool UIHelloWorldTreeItemExpanded = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Input_OnRecordset_InVariableList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Click_Input_OnRecordset_InVariableListParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'UI_IsInputCheckbox_AutoID' check box
        /// </summary>
        public bool RecordsetInputCheckboxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Input_OnVariable_InVariableList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Click_Input_OnVariable_InVariableListParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'UI_IsInputCheckbox_AutoID' check box
        /// </summary>
        public bool VariableInputCheckboxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Output_OnRecordset_InVariableList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Click_Output_OnRecordset_InVariableListParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'UI_IsOutputCheckbox_AutoID' check box
        /// </summary>
        public bool RecordsetOutputCheckboxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Output_OnVariable_InVariableList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Click_Output_OnVariable_InVariableListParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'UI_IsOutputCheckbox_AutoID' check box
        /// </summary>
        public bool VariableOutputCheckboxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Scheduler_Disable_Task_Radio_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Click_Scheduler_Disable_Task_Radio_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Clear check box
        /// </summary>
        public bool StatusCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Scheduler_Enable_Task_Radio_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Click_Scheduler_Enable_Task_Radio_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Select check box
        /// </summary>
        public bool StatusCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Scheduler_RunTask'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Click_Scheduler_RunTaskParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Run task as soon as possible after a scheduled sta...' check box
        /// </summary>
        public bool RunTaskCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Settings_Admin_ServerPermissions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Click_Settings_Admin_ServerPermissionsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'False' cell
        /// </summary>
        public bool UIFalseCellChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Settings_Contribute_ResourcePermissions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Click_Settings_Contribute_ResourcePermissionsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'False' cell
        /// </summary>
        public bool UIFalseCellChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Settings_Contribute_ServerPermissions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Click_Settings_Contribute_ServerPermissionsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'False' cell
        /// </summary>
        public bool UIFalseCellChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Settings_Execute_ResourcePermissions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Click_Settings_Execute_ResourcePermissionsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'False' cell
        /// </summary>
        public bool UIFalseCellChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Settings_View_ResourcePermissions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Click_Settings_View_ResourcePermissionsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'False' cell
        /// </summary>
        public bool UIFalseCellChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DebugInput_Add_New_Line_InputData'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DebugInput_Add_New_Line_InputDataParams
    {
        
        #region Fields
        /// <summary>
        /// Type 's' in 'Description' cell
        /// </summary>
        public string UIDescriptionCellValue = "s";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DebugOutput_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DebugOutput_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'OUTPUT' custom control equals 'True'
        /// </summary>
        public bool DebugOutputExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'OUTPUT' custom control equals 'True'
        /// </summary>
        public bool DebugOutputExists1 = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DebugOutput_ExpandCollapseButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DebugOutput_ExpandCollapseButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '+' button equals 'True'
        /// </summary>
        public bool ExpandCollapseButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DebugOutput_FilterTextbox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DebugOutput_FilterTextbox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
        /// </summary>
        public bool SearchTextBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DebugOutput_ResultsTree_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DebugOutput_ResultsTree_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DebugOutputTree' tree equals 'True'
        /// </summary>
        public bool DebugOutputTreeExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DebugOutput_SettingsButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DebugOutput_SettingsButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool SettingsButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Plugin_Connectot_Test_Connector_Calculate_Outputs'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Plugin_Connectot_Test_Connector_Calculate_OutputsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'test' in 'Value' cell
        /// </summary>
        public string UIValueCellValue = "test";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test_Connector_Calculate_Outputs'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Test_Connector_Calculate_OutputsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 's' in 'Test data' text box
        /// </summary>
        public string UITestdataEditText = "s";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class MainStudioWindow : WpfWindow
    {
        
        public MainStudioWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.Name, "Warewolf", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfButton LockStudioButton
        {
            get
            {
                if ((this.mLockStudioButton == null))
                {
                    this.mLockStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mLockStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_LOCK";
                    this.mLockStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLockStudioButton;
            }
        }
        
        public WpfButton MinimizeStudioButton
        {
            get
            {
                if ((this.mMinimizeStudioButton == null))
                {
                    this.mMinimizeStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mMinimizeStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_MINIMIZE";
                    this.mMinimizeStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMinimizeStudioButton;
            }
        }
        
        public WpfButton MaximizeRestoreStudioButton
        {
            get
            {
                if ((this.mMaximizeRestoreStudioButton == null))
                {
                    this.mMaximizeRestoreStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mMaximizeRestoreStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_SUPER_MAXIMIZE_RESTORE";
                    this.mMaximizeRestoreStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMaximizeRestoreStudioButton;
            }
        }
        
        public WpfButton MaximizeStudioButton
        {
            get
            {
                if ((this.mMaximizeStudioButton == null))
                {
                    this.mMaximizeStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mMaximizeStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_MAXIMIZE_RESTORE";
                    this.mMaximizeStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMaximizeStudioButton;
            }
        }
        
        public WpfButton CloseStudioButton
        {
            get
            {
                if ((this.mCloseStudioButton == null))
                {
                    this.mCloseStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_CLOSE";
                    this.mCloseStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseStudioButton;
            }
        }
        
        public SideMenuBar SideMenuBar
        {
            get
            {
                if ((this.mSideMenuBar == null))
                {
                    this.mSideMenuBar = new SideMenuBar(this);
                }
                return this.mSideMenuBar;
            }
        }
        
        public DockManager DockManager
        {
            get
            {
                if ((this.mDockManager == null))
                {
                    this.mDockManager = new DockManager(this);
                }
                return this.mDockManager;
            }
        }
        
        public ServicePickerDialog ServicePickerDialog
        {
            get
            {
                if ((this.mServicePickerDialog == null))
                {
                    this.mServicePickerDialog = new ServicePickerDialog(this);
                }
                return this.mServicePickerDialog;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mLockStudioButton;
        
        private WpfButton mMinimizeStudioButton;
        
        private WpfButton mMaximizeRestoreStudioButton;
        
        private WpfButton mMaximizeStudioButton;
        
        private WpfButton mCloseStudioButton;
        
        private SideMenuBar mSideMenuBar;
        
        private DockManager mDockManager;
        
        private ServicePickerDialog mServicePickerDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SideMenuBar : WpfCustom
    {
        
        public SideMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MenuView";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DatabaseSourceButton
        {
            get
            {
                if ((this.mDatabaseSourceButton == null))
                {
                    this.mDatabaseSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDatabaseSourceButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Create a new database source";
                    this.mDatabaseSourceButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDatabaseSourceButton;
            }
        }
        
        public WpfButton PluginSourceButton
        {
            get
            {
                if ((this.mPluginSourceButton == null))
                {
                    this.mPluginSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mPluginSourceButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Create a new plugin source";
                    this.mPluginSourceButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mPluginSourceButton;
            }
        }
        
        public WpfButton DatabaseConnectorButton
        {
            get
            {
                if ((this.mDatabaseConnectorButton == null))
                {
                    this.mDatabaseConnectorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDatabaseConnectorButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Create a new database connector";
                    this.mDatabaseConnectorButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDatabaseConnectorButton;
            }
        }
        
        public WpfButton PluginConnectorButton
        {
            get
            {
                if ((this.mPluginConnectorButton == null))
                {
                    this.mPluginConnectorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mPluginConnectorButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Create a new plugin connector";
                    this.mPluginConnectorButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mPluginConnectorButton;
            }
        }
        
        public WpfButton WebSourceButton
        {
            get
            {
                if ((this.mWebSourceButton == null))
                {
                    this.mWebSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mWebSourceButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Create a new web source";
                    this.mWebSourceButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mWebSourceButton;
            }
        }
        
        public WpfButton NewVersionButton
        {
            get
            {
                if ((this.mNewVersionButton == null))
                {
                    this.mNewVersionButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewVersionButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "VersionButton";
                    this.mNewVersionButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mNewVersionButton;
            }
        }
        
        public WpfButton ConfigureSettingsButton
        {
            get
            {
                if ((this.mConfigureSettingsButton == null))
                {
                    this.mConfigureSettingsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConfigureSettingsButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Configure settings";
                    this.mConfigureSettingsButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mConfigureSettingsButton;
            }
        }
        
        public WpfButton RunAndDebugButton
        {
            get
            {
                if ((this.mRunAndDebugButton == null))
                {
                    this.mRunAndDebugButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRunAndDebugButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Run and debug your workflow service";
                    this.mRunAndDebugButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mRunAndDebugButton;
            }
        }
        
        public WpfButton SchedulerButton
        {
            get
            {
                if ((this.mSchedulerButton == null))
                {
                    this.mSchedulerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSchedulerButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Schedule a service to run";
                    this.mSchedulerButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSchedulerButton;
            }
        }
        
        public WpfButton DeployButton
        {
            get
            {
                if ((this.mDeployButton == null))
                {
                    this.mDeployButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeployButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Move resources between Warewolf servers";
                    this.mDeployButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDeployButton;
            }
        }
        
        public WpfButton SaveButton
        {
            get
            {
                if ((this.mSaveButton == null))
                {
                    this.mSaveButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSaveButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Save this tab";
                    this.mSaveButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSaveButton;
            }
        }
        
        public CollapsedSideMenu CollapsedSideMenu
        {
            get
            {
                if ((this.mCollapsedSideMenu == null))
                {
                    this.mCollapsedSideMenu = new CollapsedSideMenu(this);
                }
                return this.mCollapsedSideMenu;
            }
        }
        
        public WpfButton NewWorkflowButton
        {
            get
            {
                if ((this.mNewWorkflowButton == null))
                {
                    this.mNewWorkflowButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewWorkflowButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Create a new service";
                    this.mNewWorkflowButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWorkflowButton;
            }
        }
        
        public WpfButton NewWebServiceButton
        {
            get
            {
                if ((this.mNewWebServiceButton == null))
                {
                    this.mNewWebServiceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewWebServiceButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Create a new web service";
                    this.mNewWebServiceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWebServiceButton;
            }
        }
        
        public WpfButton KnowledgeBaseButton
        {
            get
            {
                if ((this.mKnowledgeBaseButton == null))
                {
                    this.mKnowledgeBaseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mKnowledgeBaseButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Knowledge Base";
                    this.mKnowledgeBaseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mKnowledgeBaseButton;
            }
        }
        
        public WpfButton LockMenuButton
        {
            get
            {
                if ((this.mLockMenuButton == null))
                {
                    this.mLockMenuButton = new WpfButton(this);
                    #region Search Criteria
                    this.mLockMenuButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Lock / unlock the menu";
                    this.mLockMenuButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLockMenuButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDatabaseSourceButton;
        
        private WpfButton mPluginSourceButton;
        
        private WpfButton mDatabaseConnectorButton;
        
        private WpfButton mPluginConnectorButton;
        
        private WpfButton mWebSourceButton;
        
        private WpfButton mNewVersionButton;
        
        private WpfButton mConfigureSettingsButton;
        
        private WpfButton mRunAndDebugButton;
        
        private WpfButton mSchedulerButton;
        
        private WpfButton mDeployButton;
        
        private WpfButton mSaveButton;
        
        private CollapsedSideMenu mCollapsedSideMenu;
        
        private WpfButton mNewWorkflowButton;
        
        private WpfButton mNewWebServiceButton;
        
        private WpfButton mKnowledgeBaseButton;
        
        private WpfButton mLockMenuButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class CollapsedSideMenu : WpfText
    {
        
        public CollapsedSideMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = " ";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton UICreateanewdatabasesoButton
        {
            get
            {
                if ((this.mUICreateanewdatabasesoButton == null))
                {
                    this.mUICreateanewdatabasesoButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICreateanewdatabasesoButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Create a new database source";
                    this.mUICreateanewdatabasesoButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUICreateanewdatabasesoButton;
            }
        }
        
        public WpfButton UICreateanewpluginsourButton
        {
            get
            {
                if ((this.mUICreateanewpluginsourButton == null))
                {
                    this.mUICreateanewpluginsourButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICreateanewpluginsourButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Create a new plugin source";
                    this.mUICreateanewpluginsourButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUICreateanewpluginsourButton;
            }
        }
        
        public WpfButton UICreateanewwebsourceButton
        {
            get
            {
                if ((this.mUICreateanewwebsourceButton == null))
                {
                    this.mUICreateanewwebsourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICreateanewwebsourceButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Create a new web source";
                    this.mUICreateanewwebsourceButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUICreateanewwebsourceButton;
            }
        }
        
        public WpfText NewWorkflowIcon
        {
            get
            {
                if ((this.mNewWorkflowIcon == null))
                {
                    this.mNewWorkflowIcon = new WpfText(this);
                    #region Search Criteria
                    this.mNewWorkflowIcon.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mNewWorkflowIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWorkflowIcon;
            }
        }
        
        public WpfText DeployIcon
        {
            get
            {
                if ((this.mDeployIcon == null))
                {
                    this.mDeployIcon = new WpfText(this);
                    #region Search Criteria
                    this.mDeployIcon.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mDeployIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeployIcon;
            }
        }
        
        public WpfText NewDatabseConnIcon
        {
            get
            {
                if ((this.mNewDatabseConnIcon == null))
                {
                    this.mNewDatabseConnIcon = new WpfText(this);
                    #region Search Criteria
                    this.mNewDatabseConnIcon.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mNewDatabseConnIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewDatabseConnIcon;
            }
        }
        
        public WpfText NewPluginConnIcon
        {
            get
            {
                if ((this.mNewPluginConnIcon == null))
                {
                    this.mNewPluginConnIcon = new WpfText(this);
                    #region Search Criteria
                    this.mNewPluginConnIcon.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mNewPluginConnIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewPluginConnIcon;
            }
        }
        
        public WpfText NewWebConnIcon
        {
            get
            {
                if ((this.mNewWebConnIcon == null))
                {
                    this.mNewWebConnIcon = new WpfText(this);
                    #region Search Criteria
                    this.mNewWebConnIcon.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mNewWebConnIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWebConnIcon;
            }
        }
        
        public WpfText NewScheduledTaskIcon
        {
            get
            {
                if ((this.mNewScheduledTaskIcon == null))
                {
                    this.mNewScheduledTaskIcon = new WpfText(this);
                    #region Search Criteria
                    this.mNewScheduledTaskIcon.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mNewScheduledTaskIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewScheduledTaskIcon;
            }
        }
        
        public WpfText SettingsIcon
        {
            get
            {
                if ((this.mSettingsIcon == null))
                {
                    this.mSettingsIcon = new WpfText(this);
                    #region Search Criteria
                    this.mSettingsIcon.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mSettingsIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSettingsIcon;
            }
        }
        
        public WpfText HelpIcon
        {
            get
            {
                if ((this.mHelpIcon == null))
                {
                    this.mHelpIcon = new WpfText(this);
                    #region Search Criteria
                    this.mHelpIcon.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mHelpIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHelpIcon;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUICreateanewdatabasesoButton;
        
        private WpfButton mUICreateanewpluginsourButton;
        
        private WpfButton mUICreateanewwebsourceButton;
        
        private WpfText mNewWorkflowIcon;
        
        private WpfText mDeployIcon;
        
        private WpfText mNewDatabseConnIcon;
        
        private WpfText mNewPluginConnIcon;
        
        private WpfText mNewWebConnIcon;
        
        private WpfText mNewScheduledTaskIcon;
        
        private WpfText mSettingsIcon;
        
        private WpfText mHelpIcon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DockManager : WpfCustom
    {
        
        public DockManager(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamDockManager";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DockManager";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SplitPaneLeft SplitPaneLeft
        {
            get
            {
                if ((this.mSplitPaneLeft == null))
                {
                    this.mSplitPaneLeft = new SplitPaneLeft(this);
                }
                return this.mSplitPaneLeft;
            }
        }
        
        public SplitPaneMiddle SplitPaneMiddle
        {
            get
            {
                if ((this.mSplitPaneMiddle == null))
                {
                    this.mSplitPaneMiddle = new SplitPaneMiddle(this);
                }
                return this.mSplitPaneMiddle;
            }
        }
        
        public SplitPaneRight SplitPaneRight
        {
            get
            {
                if ((this.mSplitPaneRight == null))
                {
                    this.mSplitPaneRight = new SplitPaneRight(this);
                }
                return this.mSplitPaneRight;
            }
        }
        
        public WpfTabList UnpinnedTabAreaTop
        {
            get
            {
                if ((this.mUnpinnedTabAreaTop == null))
                {
                    this.mUnpinnedTabAreaTop = new WpfTabList(this);
                    #region Search Criteria
                    this.mUnpinnedTabAreaTop.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "PART_UnpinnedTabAreaTop";
                    this.mUnpinnedTabAreaTop.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnpinnedTabAreaTop;
            }
        }
        
        public WpfTabList UnpinnedTabAreaBottom
        {
            get
            {
                if ((this.mUnpinnedTabAreaBottom == null))
                {
                    this.mUnpinnedTabAreaBottom = new WpfTabList(this);
                    #region Search Criteria
                    this.mUnpinnedTabAreaBottom.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "PART_UnpinnedTabAreaBottom";
                    this.mUnpinnedTabAreaBottom.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnpinnedTabAreaBottom;
            }
        }
        
        public WpfTabList UnpinnedTabAreaLeft
        {
            get
            {
                if ((this.mUnpinnedTabAreaLeft == null))
                {
                    this.mUnpinnedTabAreaLeft = new WpfTabList(this);
                    #region Search Criteria
                    this.mUnpinnedTabAreaLeft.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "PART_UnpinnedTabAreaLeft";
                    this.mUnpinnedTabAreaLeft.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnpinnedTabAreaLeft;
            }
        }
        
        public WpfTabList UnpinnedTabAreaRight
        {
            get
            {
                if ((this.mUnpinnedTabAreaRight == null))
                {
                    this.mUnpinnedTabAreaRight = new WpfTabList(this);
                    #region Search Criteria
                    this.mUnpinnedTabAreaRight.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "PART_UnpinnedTabAreaRight";
                    this.mUnpinnedTabAreaRight.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnpinnedTabAreaRight;
            }
        }
        #endregion
        
        #region Fields
        private SplitPaneLeft mSplitPaneLeft;
        
        private SplitPaneMiddle mSplitPaneMiddle;
        
        private SplitPaneRight mSplitPaneRight;
        
        private WpfTabList mUnpinnedTabAreaTop;
        
        private WpfTabList mUnpinnedTabAreaBottom;
        
        private WpfTabList mUnpinnedTabAreaLeft;
        
        private WpfTabList mUnpinnedTabAreaRight;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SplitPaneLeft : WpfCustom
    {
        
        public SplitPaneLeft(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public Explorer Explorer
        {
            get
            {
                if ((this.mExplorer == null))
                {
                    this.mExplorer = new Explorer(this);
                }
                return this.mExplorer;
            }
        }
        
        public WpfControl ExplorerToolboxSplitter
        {
            get
            {
                if ((this.mExplorerToolboxSplitter == null))
                {
                    this.mExplorerToolboxSplitter = new WpfControl(this);
                    #region Search Criteria
                    this.mExplorerToolboxSplitter.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mExplorerToolboxSplitter.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mExplorerToolboxSplitter.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExplorerToolboxSplitter;
            }
        }
        
        public ToolBox ToolBox
        {
            get
            {
                if ((this.mToolBox == null))
                {
                    this.mToolBox = new ToolBox(this);
                }
                return this.mToolBox;
            }
        }
        
        public WpfControl ToolboxHelpSplitter
        {
            get
            {
                if ((this.mToolboxHelpSplitter == null))
                {
                    this.mToolboxHelpSplitter = new WpfControl(this);
                    #region Search Criteria
                    this.mToolboxHelpSplitter.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mToolboxHelpSplitter.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
                    this.mToolboxHelpSplitter.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mToolboxHelpSplitter.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToolboxHelpSplitter;
            }
        }
        
        public Help Help
        {
            get
            {
                if ((this.mHelp == null))
                {
                    this.mHelp = new Help(this);
                }
                return this.mHelp;
            }
        }
        #endregion
        
        #region Fields
        private Explorer mExplorer;
        
        private WpfControl mExplorerToolboxSplitter;
        
        private ToolBox mToolBox;
        
        private WpfControl mToolboxHelpSplitter;
        
        private Help mHelp;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Explorer : WpfCustom
    {
        
        public Explorer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ExplorerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_ExplorerControl_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ExplorerUnpinBtn
        {
            get
            {
                if ((this.mExplorerUnpinBtn == null))
                {
                    this.mExplorerUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mExplorerUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mExplorerUnpinBtn.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mExplorerUnpinBtn;
            }
        }
        
        public ConnectControl ConnectControl
        {
            get
            {
                if ((this.mConnectControl == null))
                {
                    this.mConnectControl = new ConnectControl(this);
                }
                return this.mConnectControl;
            }
        }
        
        public SearchTextBox SearchTextBox
        {
            get
            {
                if ((this.mSearchTextBox == null))
                {
                    this.mSearchTextBox = new SearchTextBox(this);
                }
                return this.mSearchTextBox;
            }
        }
        
        public WpfButton ExplorerRefreshButton
        {
            get
            {
                if ((this.mExplorerRefreshButton == null))
                {
                    this.mExplorerRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExplorerRefreshButton.SearchProperties[WpfButton.PropertyNames.Name] = "";
                    this.mExplorerRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExplorerRefreshButton;
            }
        }
        
        public ExplorerTree ExplorerTree
        {
            get
            {
                if ((this.mExplorerTree == null))
                {
                    this.mExplorerTree = new ExplorerTree(this);
                }
                return this.mExplorerTree;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mExplorerUnpinBtn;
        
        private ConnectControl mConnectControl;
        
        private SearchTextBox mSearchTextBox;
        
        private WpfButton mExplorerRefreshButton;
        
        private ExplorerTree mExplorerTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ConnectControl : WpfCustom
    {
        
        public ConnectControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ConnectControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ServerComboBox ServerComboBox
        {
            get
            {
                if ((this.mServerComboBox == null))
                {
                    this.mServerComboBox = new ServerComboBox(this);
                }
                return this.mServerComboBox;
            }
        }
        
        public WpfButton EditServerButton
        {
            get
            {
                if ((this.mEditServerButton == null))
                {
                    this.mEditServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditServerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_ServerEditBtn_AutoID";
                    this.mEditServerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditServerButton;
            }
        }
        
        public WpfButton ConnectServerButton
        {
            get
            {
                if ((this.mConnectServerButton == null))
                {
                    this.mConnectServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConnectServerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_ConnectServerBtn_AutoID";
                    this.mConnectServerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnectServerButton;
            }
        }
        #endregion
        
        #region Fields
        private ServerComboBox mServerComboBox;
        
        private WpfButton mEditServerButton;
        
        private WpfButton mConnectServerButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ServerComboBox : WpfCustom
    {
        
        public ServerComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "TheServerComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ServerListComboBox
        {
            get
            {
                if ((this.mServerListComboBox == null))
                {
                    this.mServerListComboBox = new WpfButton(this);
                    #region Search Criteria
                    this.mServerListComboBox.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mServerListComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mServerListComboBox;
            }
        }
        
        public WpfEdit UITextBoxPresenterEdit
        {
            get
            {
                if ((this.mUITextBoxPresenterEdit == null))
                {
                    this.mUITextBoxPresenterEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBoxPresenterEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TextBoxPresenter";
                    this.mUITextBoxPresenterEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUITextBoxPresenterEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mServerListComboBox;
        
        private WpfEdit mUITextBoxPresenterEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SearchTextBox : WpfEdit
    {
        
        public SearchTextBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText FilterText
        {
            get
            {
                if ((this.mFilterText == null))
                {
                    this.mFilterText = new WpfText(this);
                    #region Search Criteria
                    this.mFilterText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mFilterText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFilterText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mFilterText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ExplorerTree : WpfTree
    {
        
        public ExplorerTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "ExplorerTree";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ExplorerTreeItem ExplorerTreeItem
        {
            get
            {
                if ((this.mExplorerTreeItem == null))
                {
                    this.mExplorerTreeItem = new ExplorerTreeItem(this);
                }
                return this.mExplorerTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private ExplorerTreeItem mExplorerTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ExplorerTreeItem : WpfTreeItem
    {
        
        public ExplorerTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfTreeItem ExplorerTreeItemChild
        {
            get
            {
                if ((this.mExplorerTreeItemChild == null))
                {
                    this.mExplorerTreeItemChild = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mExplorerTreeItemChild.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mExplorerTreeItemChild.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExplorerTreeItemChild.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mExplorerTreeItemChild.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExplorerTreeItemChild;
            }
        }
        #endregion
        
        #region Fields
        private WpfTreeItem mExplorerTreeItemChild;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ToolBox : WpfCustom
    {
        
        public ToolBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ToolboxView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_ToolboxControl_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfButton ToolUnpinBtn
        {
            get
            {
                if ((this.mToolUnpinBtn == null))
                {
                    this.mToolUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mToolUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mToolUnpinBtn.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mToolUnpinBtn;
            }
        }
        
        public WpfEdit SearchTextBox
        {
            get
            {
                if ((this.mSearchTextBox == null))
                {
                    this.mSearchTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mSearchTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
                    this.mSearchTextBox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mSearchTextBox;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.Name] = "";
                    this.mRefreshButton.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public ToolListBox ToolListBox
        {
            get
            {
                if ((this.mToolListBox == null))
                {
                    this.mToolListBox = new ToolListBox(this);
                }
                return this.mToolListBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mToolUnpinBtn;
        
        private WpfEdit mSearchTextBox;
        
        private WpfButton mRefreshButton;
        
        private ToolListBox mToolListBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ToolListBox : WpfList
    {
        
        public ToolListBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "ToolListBox";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public DataTools DataTools
        {
            get
            {
                if ((this.mDataTools == null))
                {
                    this.mDataTools = new DataTools(this);
                }
                return this.mDataTools;
            }
        }
        
        public FlowTools FlowTools
        {
            get
            {
                if ((this.mFlowTools == null))
                {
                    this.mFlowTools = new FlowTools(this);
                }
                return this.mFlowTools;
            }
        }
        
        public FileAndFolderTools FileAndFolderTools
        {
            get
            {
                if ((this.mFileAndFolderTools == null))
                {
                    this.mFileAndFolderTools = new FileAndFolderTools(this);
                }
                return this.mFileAndFolderTools;
            }
        }
        
        public LoopTools LoopTools
        {
            get
            {
                if ((this.mLoopTools == null))
                {
                    this.mLoopTools = new LoopTools(this);
                }
                return this.mLoopTools;
            }
        }
        
        public RecordsetTools RecordsetTools
        {
            get
            {
                if ((this.mRecordsetTools == null))
                {
                    this.mRecordsetTools = new RecordsetTools(this);
                }
                return this.mRecordsetTools;
            }
        }
        
        public ResourceTools ResourceTools
        {
            get
            {
                if ((this.mResourceTools == null))
                {
                    this.mResourceTools = new ResourceTools(this);
                }
                return this.mResourceTools;
            }
        }
        
        public ScriptingTools ScriptingTools
        {
            get
            {
                if ((this.mScriptingTools == null))
                {
                    this.mScriptingTools = new ScriptingTools(this);
                }
                return this.mScriptingTools;
            }
        }
        
        public SharepointTools SharepointTools
        {
            get
            {
                if ((this.mSharepointTools == null))
                {
                    this.mSharepointTools = new SharepointTools(this);
                }
                return this.mSharepointTools;
            }
        }
        
        public UtilityTools UtilityTools
        {
            get
            {
                if ((this.mUtilityTools == null))
                {
                    this.mUtilityTools = new UtilityTools(this);
                }
                return this.mUtilityTools;
            }
        }
        
        public ConnectorTools ConnectorTools
        {
            get
            {
                if ((this.mConnectorTools == null))
                {
                    this.mConnectorTools = new ConnectorTools(this);
                }
                return this.mConnectorTools;
            }
        }
        #endregion
        
        #region Fields
        private DataTools mDataTools;
        
        private FlowTools mFlowTools;
        
        private FileAndFolderTools mFileAndFolderTools;
        
        private LoopTools mLoopTools;
        
        private RecordsetTools mRecordsetTools;
        
        private ResourceTools mResourceTools;
        
        private ScriptingTools mScriptingTools;
        
        private SharepointTools mSharepointTools;
        
        private UtilityTools mUtilityTools;
        
        private ConnectorTools mConnectorTools;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DataTools : WpfGroup
    {
        
        public DataTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Data";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfListItem MultiAssign
        {
            get
            {
                if ((this.mMultiAssign == null))
                {
                    this.mMultiAssign = new WpfListItem(this);
                    #region Search Criteria
                    this.mMultiAssign.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mMultiAssign.SearchProperties[WpfListItem.PropertyNames.Instance] = "7";
                    this.mMultiAssign.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mMultiAssign;
            }
        }
        
        public WpfListItem DataMerge
        {
            get
            {
                if ((this.mDataMerge == null))
                {
                    this.mDataMerge = new WpfListItem(this);
                    #region Search Criteria
                    this.mDataMerge.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mDataMerge.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDataMerge;
            }
        }
        
        public WpfListItem BaseConvert
        {
            get
            {
                if ((this.mBaseConvert == null))
                {
                    this.mBaseConvert = new WpfListItem(this);
                    #region Search Criteria
                    this.mBaseConvert.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mBaseConvert.SearchProperties[WpfListItem.PropertyNames.Instance] = "2";
                    this.mBaseConvert.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mBaseConvert;
            }
        }
        
        public WpfListItem CaseConvert
        {
            get
            {
                if ((this.mCaseConvert == null))
                {
                    this.mCaseConvert = new WpfListItem(this);
                    #region Search Criteria
                    this.mCaseConvert.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mCaseConvert.SearchProperties[WpfListItem.PropertyNames.Instance] = "3";
                    this.mCaseConvert.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCaseConvert;
            }
        }
        
        public WpfListItem DataSplit
        {
            get
            {
                if ((this.mDataSplit == null))
                {
                    this.mDataSplit = new WpfListItem(this);
                    #region Search Criteria
                    this.mDataSplit.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mDataSplit.SearchProperties[WpfListItem.PropertyNames.Instance] = "4";
                    this.mDataSplit.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDataSplit;
            }
        }
        
        public WpfListItem FindIndex
        {
            get
            {
                if ((this.mFindIndex == null))
                {
                    this.mFindIndex = new WpfListItem(this);
                    #region Search Criteria
                    this.mFindIndex.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mFindIndex.SearchProperties[WpfListItem.PropertyNames.Instance] = "5";
                    this.mFindIndex.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mFindIndex;
            }
        }
        
        public WpfListItem Replace
        {
            get
            {
                if ((this.mReplace == null))
                {
                    this.mReplace = new WpfListItem(this);
                    #region Search Criteria
                    this.mReplace.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mReplace.SearchProperties[WpfListItem.PropertyNames.Instance] = "6";
                    this.mReplace.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mReplace;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mMultiAssign;
        
        private WpfListItem mDataMerge;
        
        private WpfListItem mBaseConvert;
        
        private WpfListItem mCaseConvert;
        
        private WpfListItem mDataSplit;
        
        private WpfListItem mFindIndex;
        
        private WpfListItem mReplace;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class FlowTools : WpfGroup
    {
        
        public FlowTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Control Flow";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfListItem Decision
        {
            get
            {
                if ((this.mDecision == null))
                {
                    this.mDecision = new WpfListItem(this);
                    #region Search Criteria
                    this.mDecision.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mDecision.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDecision;
            }
        }
        
        public WpfListItem Switch
        {
            get
            {
                if ((this.mSwitch == null))
                {
                    this.mSwitch = new WpfListItem(this);
                    #region Search Criteria
                    this.mSwitch.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mSwitch.SearchProperties[WpfListItem.PropertyNames.Instance] = "2";
                    this.mSwitch.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSwitch;
            }
        }
        
        public WpfListItem Sequence
        {
            get
            {
                if ((this.mSequence == null))
                {
                    this.mSequence = new WpfListItem(this);
                    #region Search Criteria
                    this.mSequence.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mSequence.SearchProperties[WpfListItem.PropertyNames.Instance] = "3";
                    this.mSequence.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSequence;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mDecision;
        
        private WpfListItem mSwitch;
        
        private WpfListItem mSequence;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class FileAndFolderTools : WpfGroup
    {
        
        public FileAndFolderTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "File & Folder";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfListItem Create
        {
            get
            {
                if ((this.mCreate == null))
                {
                    this.mCreate = new WpfListItem(this);
                    #region Search Criteria
                    this.mCreate.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mCreate.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCreate;
            }
        }
        
        public WpfListItem Copy
        {
            get
            {
                if ((this.mCopy == null))
                {
                    this.mCopy = new WpfListItem(this);
                    #region Search Criteria
                    this.mCopy.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mCopy.SearchProperties[WpfListItem.PropertyNames.Instance] = "2";
                    this.mCopy.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCopy;
            }
        }
        
        public WpfListItem Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new WpfListItem(this);
                    #region Search Criteria
                    this.mDelete.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mDelete.SearchProperties[WpfListItem.PropertyNames.Instance] = "3";
                    this.mDelete.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDelete;
            }
        }
        
        public WpfListItem Move
        {
            get
            {
                if ((this.mMove == null))
                {
                    this.mMove = new WpfListItem(this);
                    #region Search Criteria
                    this.mMove.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mMove.SearchProperties[WpfListItem.PropertyNames.Instance] = "4";
                    this.mMove.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mMove;
            }
        }
        
        public WpfListItem ReadFolder
        {
            get
            {
                if ((this.mReadFolder == null))
                {
                    this.mReadFolder = new WpfListItem(this);
                    #region Search Criteria
                    this.mReadFolder.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mReadFolder.SearchProperties[WpfListItem.PropertyNames.Instance] = "5";
                    this.mReadFolder.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mReadFolder;
            }
        }
        
        public WpfListItem ReadFile
        {
            get
            {
                if ((this.mReadFile == null))
                {
                    this.mReadFile = new WpfListItem(this);
                    #region Search Criteria
                    this.mReadFile.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mReadFile.SearchProperties[WpfListItem.PropertyNames.Instance] = "6";
                    this.mReadFile.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mReadFile;
            }
        }
        
        public WpfListItem WriteFolder
        {
            get
            {
                if ((this.mWriteFolder == null))
                {
                    this.mWriteFolder = new WpfListItem(this);
                    #region Search Criteria
                    this.mWriteFolder.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mWriteFolder.SearchProperties[WpfListItem.PropertyNames.Instance] = "7";
                    this.mWriteFolder.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mWriteFolder;
            }
        }
        
        public WpfListItem Rename
        {
            get
            {
                if ((this.mRename == null))
                {
                    this.mRename = new WpfListItem(this);
                    #region Search Criteria
                    this.mRename.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mRename.SearchProperties[WpfListItem.PropertyNames.Instance] = "8";
                    this.mRename.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mRename;
            }
        }
        
        public WpfListItem UnZip
        {
            get
            {
                if ((this.mUnZip == null))
                {
                    this.mUnZip = new WpfListItem(this);
                    #region Search Criteria
                    this.mUnZip.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUnZip.SearchProperties[WpfListItem.PropertyNames.Instance] = "9";
                    this.mUnZip.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mUnZip;
            }
        }
        
        public WpfListItem Zip
        {
            get
            {
                if ((this.mZip == null))
                {
                    this.mZip = new WpfListItem(this);
                    #region Search Criteria
                    this.mZip.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mZip.SearchProperties[WpfListItem.PropertyNames.Instance] = "10";
                    this.mZip.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mZip;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mCreate;
        
        private WpfListItem mCopy;
        
        private WpfListItem mDelete;
        
        private WpfListItem mMove;
        
        private WpfListItem mReadFolder;
        
        private WpfListItem mReadFile;
        
        private WpfListItem mWriteFolder;
        
        private WpfListItem mRename;
        
        private WpfListItem mUnZip;
        
        private WpfListItem mZip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class LoopTools : WpfGroup
    {
        
        public LoopTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Loop Constructs";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfListItem ForEach
        {
            get
            {
                if ((this.mForEach == null))
                {
                    this.mForEach = new WpfListItem(this);
                    #region Search Criteria
                    this.mForEach.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mForEach.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mForEach;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mForEach;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetTools : WpfGroup
    {
        
        public RecordsetTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Recordset";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfListItem Length
        {
            get
            {
                if ((this.mLength == null))
                {
                    this.mLength = new WpfListItem(this);
                    #region Search Criteria
                    this.mLength.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mLength.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mLength;
            }
        }
        
        public WpfListItem FindRecords
        {
            get
            {
                if ((this.mFindRecords == null))
                {
                    this.mFindRecords = new WpfListItem(this);
                    #region Search Criteria
                    this.mFindRecords.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mFindRecords.SearchProperties[WpfListItem.PropertyNames.Instance] = "2";
                    this.mFindRecords.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mFindRecords;
            }
        }
        
        public WpfListItem Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new WpfListItem(this);
                    #region Search Criteria
                    this.mDelete.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mDelete.SearchProperties[WpfListItem.PropertyNames.Instance] = "3";
                    this.mDelete.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDelete;
            }
        }
        
        public WpfListItem Sort
        {
            get
            {
                if ((this.mSort == null))
                {
                    this.mSort = new WpfListItem(this);
                    #region Search Criteria
                    this.mSort.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mSort.SearchProperties[WpfListItem.PropertyNames.Instance] = "4";
                    this.mSort.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSort;
            }
        }
        
        public WpfListItem Count
        {
            get
            {
                if ((this.mCount == null))
                {
                    this.mCount = new WpfListItem(this);
                    #region Search Criteria
                    this.mCount.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mCount.SearchProperties[WpfListItem.PropertyNames.Instance] = "5";
                    this.mCount.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCount;
            }
        }
        
        public WpfListItem SQLBulkInsert
        {
            get
            {
                if ((this.mSQLBulkInsert == null))
                {
                    this.mSQLBulkInsert = new WpfListItem(this);
                    #region Search Criteria
                    this.mSQLBulkInsert.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mSQLBulkInsert.SearchProperties[WpfListItem.PropertyNames.Instance] = "6";
                    this.mSQLBulkInsert.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSQLBulkInsert;
            }
        }
        
        public WpfListItem UniqueRecords
        {
            get
            {
                if ((this.mUniqueRecords == null))
                {
                    this.mUniqueRecords = new WpfListItem(this);
                    #region Search Criteria
                    this.mUniqueRecords.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUniqueRecords.SearchProperties[WpfListItem.PropertyNames.Instance] = "7";
                    this.mUniqueRecords.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mUniqueRecords;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mLength;
        
        private WpfListItem mFindRecords;
        
        private WpfListItem mDelete;
        
        private WpfListItem mSort;
        
        private WpfListItem mCount;
        
        private WpfListItem mSQLBulkInsert;
        
        private WpfListItem mUniqueRecords;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ResourceTools : WpfGroup
    {
        
        public ResourceTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Resources";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfListItem DataConnector
        {
            get
            {
                if ((this.mDataConnector == null))
                {
                    this.mDataConnector = new WpfListItem(this);
                    #region Search Criteria
                    this.mDataConnector.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mDataConnector.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDataConnector;
            }
        }
        
        public WpfListItem Service
        {
            get
            {
                if ((this.mService == null))
                {
                    this.mService = new WpfListItem(this);
                    #region Search Criteria
                    this.mService.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mService.SearchProperties[WpfListItem.PropertyNames.Instance] = "2";
                    this.mService.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mService;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mDataConnector;
        
        private WpfListItem mService;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ScriptingTools : WpfGroup
    {
        
        public ScriptingTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Scripting";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfListItem CreateJSON
        {
            get
            {
                if ((this.mCreateJSON == null))
                {
                    this.mCreateJSON = new WpfListItem(this);
                    #region Search Criteria
                    this.mCreateJSON.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mCreateJSON.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCreateJSON;
            }
        }
        
        public WpfListItem CMDScript
        {
            get
            {
                if ((this.mCMDScript == null))
                {
                    this.mCMDScript = new WpfListItem(this);
                    #region Search Criteria
                    this.mCMDScript.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mCMDScript.SearchProperties[WpfListItem.PropertyNames.Instance] = "2";
                    this.mCMDScript.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCMDScript;
            }
        }
        
        public WpfListItem Script
        {
            get
            {
                if ((this.mScript == null))
                {
                    this.mScript = new WpfListItem(this);
                    #region Search Criteria
                    this.mScript.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mScript.SearchProperties[WpfListItem.PropertyNames.Instance] = "3";
                    this.mScript.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mScript;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mCreateJSON;
        
        private WpfListItem mCMDScript;
        
        private WpfListItem mScript;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SharepointTools : WpfGroup
    {
        
        public SharepointTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Sharepoint";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfListItem CreateListItems
        {
            get
            {
                if ((this.mCreateListItems == null))
                {
                    this.mCreateListItems = new WpfListItem(this);
                    #region Search Criteria
                    this.mCreateListItems.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mCreateListItems.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCreateListItems;
            }
        }
        
        public WpfListItem DeleteListItems
        {
            get
            {
                if ((this.mDeleteListItems == null))
                {
                    this.mDeleteListItems = new WpfListItem(this);
                    #region Search Criteria
                    this.mDeleteListItems.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mDeleteListItems.SearchProperties[WpfListItem.PropertyNames.Instance] = "2";
                    this.mDeleteListItems.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDeleteListItems;
            }
        }
        
        public WpfListItem ReadListItems
        {
            get
            {
                if ((this.mReadListItems == null))
                {
                    this.mReadListItems = new WpfListItem(this);
                    #region Search Criteria
                    this.mReadListItems.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mReadListItems.SearchProperties[WpfListItem.PropertyNames.Instance] = "3";
                    this.mReadListItems.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mReadListItems;
            }
        }
        
        public WpfListItem UpdateListItems
        {
            get
            {
                if ((this.mUpdateListItems == null))
                {
                    this.mUpdateListItems = new WpfListItem(this);
                    #region Search Criteria
                    this.mUpdateListItems.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUpdateListItems.SearchProperties[WpfListItem.PropertyNames.Instance] = "4";
                    this.mUpdateListItems.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mUpdateListItems;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mCreateListItems;
        
        private WpfListItem mDeleteListItems;
        
        private WpfListItem mReadListItems;
        
        private WpfListItem mUpdateListItems;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UtilityTools : WpfGroup
    {
        
        public UtilityTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Utility";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfListItem Calculate
        {
            get
            {
                if ((this.mCalculate == null))
                {
                    this.mCalculate = new WpfListItem(this);
                    #region Search Criteria
                    this.mCalculate.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mCalculate.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCalculate;
            }
        }
        
        public WpfListItem DateTime
        {
            get
            {
                if ((this.mDateTime == null))
                {
                    this.mDateTime = new WpfListItem(this);
                    #region Search Criteria
                    this.mDateTime.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mDateTime.SearchProperties[WpfListItem.PropertyNames.Instance] = "2";
                    this.mDateTime.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDateTime;
            }
        }
        
        public WpfListItem DateTimeDifference
        {
            get
            {
                if ((this.mDateTimeDifference == null))
                {
                    this.mDateTimeDifference = new WpfListItem(this);
                    #region Search Criteria
                    this.mDateTimeDifference.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mDateTimeDifference.SearchProperties[WpfListItem.PropertyNames.Instance] = "3";
                    this.mDateTimeDifference.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDateTimeDifference;
            }
        }
        
        public WpfListItem SysInfo
        {
            get
            {
                if ((this.mSysInfo == null))
                {
                    this.mSysInfo = new WpfListItem(this);
                    #region Search Criteria
                    this.mSysInfo.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mSysInfo.SearchProperties[WpfListItem.PropertyNames.Instance] = "4";
                    this.mSysInfo.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSysInfo;
            }
        }
        
        public WpfListItem FormatNumber
        {
            get
            {
                if ((this.mFormatNumber == null))
                {
                    this.mFormatNumber = new WpfListItem(this);
                    #region Search Criteria
                    this.mFormatNumber.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mFormatNumber.SearchProperties[WpfListItem.PropertyNames.Instance] = "5";
                    this.mFormatNumber.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mFormatNumber;
            }
        }
        
        public WpfListItem Random
        {
            get
            {
                if ((this.mRandom == null))
                {
                    this.mRandom = new WpfListItem(this);
                    #region Search Criteria
                    this.mRandom.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mRandom.SearchProperties[WpfListItem.PropertyNames.Instance] = "6";
                    this.mRandom.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mRandom;
            }
        }
        
        public WpfListItem Email
        {
            get
            {
                if ((this.mEmail == null))
                {
                    this.mEmail = new WpfListItem(this);
                    #region Search Criteria
                    this.mEmail.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mEmail.SearchProperties[WpfListItem.PropertyNames.Instance] = "7";
                    this.mEmail.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mEmail;
            }
        }
        
        public WpfListItem WebRequest
        {
            get
            {
                if ((this.mWebRequest == null))
                {
                    this.mWebRequest = new WpfListItem(this);
                    #region Search Criteria
                    this.mWebRequest.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mWebRequest.SearchProperties[WpfListItem.PropertyNames.Instance] = "8";
                    this.mWebRequest.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mWebRequest;
            }
        }
        
        public WpfListItem Comment
        {
            get
            {
                if ((this.mComment == null))
                {
                    this.mComment = new WpfListItem(this);
                    #region Search Criteria
                    this.mComment.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mComment.SearchProperties[WpfListItem.PropertyNames.Instance] = "9";
                    this.mComment.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mComment;
            }
        }
        
        public WpfListItem XPath
        {
            get
            {
                if ((this.mXPath == null))
                {
                    this.mXPath = new WpfListItem(this);
                    #region Search Criteria
                    this.mXPath.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mXPath.SearchProperties[WpfListItem.PropertyNames.Instance] = "10";
                    this.mXPath.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mXPath;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mCalculate;
        
        private WpfListItem mDateTime;
        
        private WpfListItem mDateTimeDifference;
        
        private WpfListItem mSysInfo;
        
        private WpfListItem mFormatNumber;
        
        private WpfListItem mRandom;
        
        private WpfListItem mEmail;
        
        private WpfListItem mWebRequest;
        
        private WpfListItem mComment;
        
        private WpfListItem mXPath;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ConnectorTools : WpfGroup
    {
        
        public ConnectorTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Connectors";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfListItem DropBox
        {
            get
            {
                if ((this.mDropBox == null))
                {
                    this.mDropBox = new WpfListItem(this);
                    #region Search Criteria
                    this.mDropBox.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mDropBox.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDropBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mDropBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Help : WpfCustom
    {
        
        public Help(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Help";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DocumentorUnpinBtn
        {
            get
            {
                if ((this.mDocumentorUnpinBtn == null))
                {
                    this.mDocumentorUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mDocumentorUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mDocumentorUnpinBtn.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDocumentorUnpinBtn;
            }
        }
        
        public WpfControl HelpWindow
        {
            get
            {
                if ((this.mHelpWindow == null))
                {
                    this.mHelpWindow = new WpfControl(this);
                    #region Search Criteria
                    this.mHelpWindow.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mHelpWindow.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mHelpWindow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHelpWindow;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDocumentorUnpinBtn;
        
        private WpfControl mHelpWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SplitPaneMiddle : WpfCustom
    {
        
        public SplitPaneMiddle(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public SplitPaneContent SplitPaneContent
        {
            get
            {
                if ((this.mSplitPaneContent == null))
                {
                    this.mSplitPaneContent = new SplitPaneContent(this);
                }
                return this.mSplitPaneContent;
            }
        }
        #endregion
        
        #region Fields
        private SplitPaneContent mSplitPaneContent;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SplitPaneContent : WpfCustom
    {
        
        public SplitPaneContent(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public TabMan TabMan
        {
            get
            {
                if ((this.mTabMan == null))
                {
                    this.mTabMan = new TabMan(this);
                }
                return this.mTabMan;
            }
        }
        #endregion
        
        #region Fields
        private TabMan mTabMan;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class TabMan : WpfTabList
    {
        
        public TabMan(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "UI_TabManager_AutoID";
            this.WindowTitles.Add("Warewolf");
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfTabPage TabContextMenu
        {
            get
            {
                if ((this.mTabContextMenu == null))
                {
                    this.mTabContextMenu = new WpfTabPage(this);
                    #region Search Criteria
                    this.mTabContextMenu.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Studio.ViewModels.Help.HelpViewModel";
                    this.mTabContextMenu.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mTabContextMenu;
            }
        }
        
        public DeployTab DeployTab
        {
            get
            {
                if ((this.mDeployTab == null))
                {
                    this.mDeployTab = new DeployTab(this);
                }
                return this.mDeployTab;
            }
        }
        
        public NewWebConnectorTab NewWebConnectorTab
        {
            get
            {
                if ((this.mNewWebConnectorTab == null))
                {
                    this.mNewWebConnectorTab = new NewWebConnectorTab(this);
                }
                return this.mNewWebConnectorTab;
            }
        }
        
        public NewServerSourceTab NewServerSourceTab
        {
            get
            {
                if ((this.mNewServerSourceTab == null))
                {
                    this.mNewServerSourceTab = new NewServerSourceTab(this);
                }
                return this.mNewServerSourceTab;
            }
        }
        
        public SchedulerTab SchedulerTab
        {
            get
            {
                if ((this.mSchedulerTab == null))
                {
                    this.mSchedulerTab = new SchedulerTab(this);
                }
                return this.mSchedulerTab;
            }
        }
        
        public SettingsTab SettingsTab
        {
            get
            {
                if ((this.mSettingsTab == null))
                {
                    this.mSettingsTab = new SettingsTab(this);
                }
                return this.mSettingsTab;
            }
        }
        
        public WorkflowTab WorkflowTab
        {
            get
            {
                if ((this.mWorkflowTab == null))
                {
                    this.mWorkflowTab = new WorkflowTab(this);
                }
                return this.mWorkflowTab;
            }
        }
        
        public NewDBConnectorTab NewDBConnectorTab
        {
            get
            {
                if ((this.mNewDBConnectorTab == null))
                {
                    this.mNewDBConnectorTab = new NewDBConnectorTab(this);
                }
                return this.mNewDBConnectorTab;
            }
        }
        
        public NewPluginConnectorTab NewPluginConnectorTab
        {
            get
            {
                if ((this.mNewPluginConnectorTab == null))
                {
                    this.mNewPluginConnectorTab = new NewPluginConnectorTab(this);
                }
                return this.mNewPluginConnectorTab;
            }
        }
        
        public FilesMenu FilesMenu
        {
            get
            {
                if ((this.mFilesMenu == null))
                {
                    this.mFilesMenu = new FilesMenu(this);
                }
                return this.mFilesMenu;
            }
        }
        
        public WpfButton NavigatorButton
        {
            get
            {
                if ((this.mNavigatorButton == null))
                {
                    this.mNavigatorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNavigatorButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "showNavigatorButton";
                    this.mNavigatorButton.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNavigatorButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfTabPage mTabContextMenu;
        
        private DeployTab mDeployTab;
        
        private NewWebConnectorTab mNewWebConnectorTab;
        
        private NewServerSourceTab mNewServerSourceTab;
        
        private SchedulerTab mSchedulerTab;
        
        private SettingsTab mSettingsTab;
        
        private WorkflowTab mWorkflowTab;
        
        private NewDBConnectorTab mNewDBConnectorTab;
        
        private NewPluginConnectorTab mNewPluginConnectorTab;
        
        private FilesMenu mFilesMenu;
        
        private WpfButton mNavigatorButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DeployTab : WpfTabPage
    {
        
        public DeployTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.DeployWorksurfaceViewModel";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public DestinationServer DestinationServer
        {
            get
            {
                if ((this.mDestinationServer == null))
                {
                    this.mDestinationServer = new DestinationServer(this);
                }
                return this.mDestinationServer;
            }
        }
        
        public WpfTreeItem SourceServerName
        {
            get
            {
                if ((this.mSourceServerName == null))
                {
                    this.mSourceServerName = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mSourceServerName.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mSourceServerName.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSourceServerName;
            }
        }
        #endregion
        
        #region Fields
        private DestinationServer mDestinationServer;
        
        private WpfTreeItem mSourceServerName;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DestinationServer : WpfCustom
    {
        
        public DestinationServer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfButton RefreshSourceServerButton
        {
            get
            {
                if ((this.mRefreshSourceServerButton == null))
                {
                    this.mRefreshSourceServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshSourceServerButton.SearchProperties[WpfButton.PropertyNames.Name] = "";
                    this.mRefreshSourceServerButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mRefreshSourceServerButton;
            }
        }
        
        public WpfText FilterText
        {
            get
            {
                if ((this.mFilterText == null))
                {
                    this.mFilterText = new WpfText(this);
                    #region Search Criteria
                    this.mFilterText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mFilterText.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mFilterText;
            }
        }
        
        public WpfButton ConnectControlDestination
        {
            get
            {
                if ((this.mConnectControlDestination == null))
                {
                    this.mConnectControlDestination = new WpfButton(this);
                    #region Search Criteria
                    this.mConnectControlDestination.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mConnectControlDestination.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mConnectControlDestination;
            }
        }
        
        public WpfHyperlink OverrideHyperlink
        {
            get
            {
                if ((this.mOverrideHyperlink == null))
                {
                    this.mOverrideHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mOverrideHyperlink.SearchProperties[WpfHyperlink.PropertyNames.AutomationId] = "OverridesCountView";
                    this.mOverrideHyperlink.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mOverrideHyperlink;
            }
        }
        
        public WpfHyperlink NewResourceHyperlink
        {
            get
            {
                if ((this.mNewResourceHyperlink == null))
                {
                    this.mNewResourceHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mNewResourceHyperlink.SearchProperties[WpfHyperlink.PropertyNames.AutomationId] = "NewResourcesView";
                    this.mNewResourceHyperlink.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mNewResourceHyperlink;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SourceServerEditbtn_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public WpfButton SourceConnectButton
        {
            get
            {
                if ((this.mSourceConnectButton == null))
                {
                    this.mSourceConnectButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSourceConnectButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SourceConnectServerbtn_AutoID";
                    this.mSourceConnectButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSourceConnectButton;
            }
        }
        
        public WpfButton EditDestinationButton
        {
            get
            {
                if ((this.mEditDestinationButton == null))
                {
                    this.mEditDestinationButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditDestinationButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_DestinationServerEditbtn_AutoID";
                    this.mEditDestinationButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mEditDestinationButton;
            }
        }
        
        public WpfButton ConnectDestinationButton
        {
            get
            {
                if ((this.mConnectDestinationButton == null))
                {
                    this.mConnectDestinationButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConnectDestinationButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_DestinationServerConnectbtn_AutoID";
                    this.mConnectDestinationButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mConnectDestinationButton;
            }
        }
        
        public WpfCustom SourceConnectControl
        {
            get
            {
                if ((this.mSourceConnectControl == null))
                {
                    this.mSourceConnectControl = new WpfCustom(this);
                    #region Search Criteria
                    this.mSourceConnectControl.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
                    this.mSourceConnectControl.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SourceConnectControl";
                    this.mSourceConnectControl.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSourceConnectControl;
            }
        }
        
        public WpfButton ShowDependenciesButton
        {
            get
            {
                if ((this.mShowDependenciesButton == null))
                {
                    this.mShowDependenciesButton = new WpfButton(this);
                    #region Search Criteria
                    this.mShowDependenciesButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SelectDepbtn_AutoID";
                    this.mShowDependenciesButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mShowDependenciesButton;
            }
        }
        
        public WpfText ServicesText
        {
            get
            {
                if ((this.mServicesText == null))
                {
                    this.mServicesText = new WpfText(this);
                    #region Search Criteria
                    this.mServicesText.SearchProperties[WpfText.PropertyNames.Name] = "Services";
                    this.mServicesText.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mServicesText;
            }
        }
        
        public WpfText ServiceCountText
        {
            get
            {
                if ((this.mServiceCountText == null))
                {
                    this.mServiceCountText = new WpfText(this);
                    #region Search Criteria
                    this.mServiceCountText.SearchProperties[WpfText.PropertyNames.AutomationId] = "WorkflowsCount";
                    this.mServiceCountText.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mServiceCountText;
            }
        }
        
        public WpfText SourcesText
        {
            get
            {
                if ((this.mSourcesText == null))
                {
                    this.mSourcesText = new WpfText(this);
                    #region Search Criteria
                    this.mSourcesText.SearchProperties[WpfText.PropertyNames.Name] = "Sources";
                    this.mSourcesText.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSourcesText;
            }
        }
        
        public WpfText SourceCountText
        {
            get
            {
                if ((this.mSourceCountText == null))
                {
                    this.mSourceCountText = new WpfText(this);
                    #region Search Criteria
                    this.mSourceCountText.SearchProperties[WpfText.PropertyNames.AutomationId] = "SourcesCount";
                    this.mSourceCountText.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSourceCountText;
            }
        }
        
        public WpfText NewResourcesText
        {
            get
            {
                if ((this.mNewResourcesText == null))
                {
                    this.mNewResourcesText = new WpfText(this);
                    #region Search Criteria
                    this.mNewResourcesText.SearchProperties[WpfText.PropertyNames.Name] = "New Resources";
                    this.mNewResourcesText.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mNewResourcesText;
            }
        }
        
        public WpfText OverrideText
        {
            get
            {
                if ((this.mOverrideText == null))
                {
                    this.mOverrideText = new WpfText(this);
                    #region Search Criteria
                    this.mOverrideText.SearchProperties[WpfText.PropertyNames.Name] = "Override";
                    this.mOverrideText.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mOverrideText;
            }
        }
        
        public WpfButton DeployButton
        {
            get
            {
                if ((this.mDeployButton == null))
                {
                    this.mDeployButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeployButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Deploybtn_AutoID";
                    this.mDeployButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDeployButton;
            }
        }
        
        public WpfText SuccessMessageText
        {
            get
            {
                if ((this.mSuccessMessageText == null))
                {
                    this.mSuccessMessageText = new WpfText(this);
                    #region Search Criteria
                    this.mSuccessMessageText.SearchProperties[WpfText.PropertyNames.AutomationId] = "UI_DeploySelectTB_AutoID";
                    this.mSuccessMessageText.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSuccessMessageText;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mRefreshSourceServerButton;
        
        private WpfText mFilterText;
        
        private WpfButton mConnectControlDestination;
        
        private WpfHyperlink mOverrideHyperlink;
        
        private WpfHyperlink mNewResourceHyperlink;
        
        private WpfButton mEditSourceButton;
        
        private WpfButton mSourceConnectButton;
        
        private WpfButton mEditDestinationButton;
        
        private WpfButton mConnectDestinationButton;
        
        private WpfCustom mSourceConnectControl;
        
        private WpfButton mShowDependenciesButton;
        
        private WpfText mServicesText;
        
        private WpfText mServiceCountText;
        
        private WpfText mSourcesText;
        
        private WpfText mSourceCountText;
        
        private WpfText mNewResourcesText;
        
        private WpfText mOverrideText;
        
        private WpfButton mDeployButton;
        
        private WpfText mSuccessMessageText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class NewWebConnectorTab : WpfTabPage
    {
        
        public NewWebConnectorTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.WebServices.IWebService]" +
                "";
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext mWorkSurfaceContext;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class WorkSurfaceContext : WpfCustom
    {
        
        public WorkSurfaceContext(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public WpfComboBox RequestTypesComboBox
        {
            get
            {
                if ((this.mRequestTypesComboBox == null))
                {
                    this.mRequestTypesComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mRequestTypesComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "RequestTypes";
                    this.mRequestTypesComboBox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRequestTypesComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mRequestTypesComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class NewServerSourceTab : WpfTabPage
    {
        
        public NewServerSourceTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.IServerSource]";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext1 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext1(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        
        public WpfButton TabCloseButton
        {
            get
            {
                if ((this.mTabCloseButton == null))
                {
                    this.mTabCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTabCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mTabCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTabCloseButton;
            }
        }
        
        public WpfImage NoAuthMessageText
        {
            get
            {
                if ((this.mNoAuthMessageText == null))
                {
                    this.mNoAuthMessageText = new WpfImage(this);
                    #region Search Criteria
                    this.mNoAuthMessageText.SearchProperties[WpfImage.PropertyNames.HelpText] = "You are not authorized to edit this resource";
                    this.mNoAuthMessageText.SearchProperties[WpfImage.PropertyNames.Instance] = "2";
                    this.mNoAuthMessageText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNoAuthMessageText;
            }
        }
        
        public WpfText NewServerTitleText
        {
            get
            {
                if ((this.mNewServerTitleText == null))
                {
                    this.mNewServerTitleText = new WpfText(this);
                    #region Search Criteria
                    this.mNewServerTitleText.SearchProperties[WpfText.PropertyNames.Name] = "New Server Source";
                    this.mNewServerTitleText.SearchProperties[WpfText.PropertyNames.Instance] = "2";
                    this.mNewServerTitleText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewServerTitleText;
            }
        }
        
        public WpfImage NewServerBackground
        {
            get
            {
                if ((this.mNewServerBackground == null))
                {
                    this.mNewServerBackground = new WpfImage(this);
                    #region Search Criteria
                    this.mNewServerBackground.SearchProperties[WpfImage.PropertyNames.AutomationId] = "New Server Source";
                    this.mNewServerBackground.SearchProperties[WpfImage.PropertyNames.Instance] = "2";
                    this.mNewServerBackground.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewServerBackground;
            }
        }
        
        public WpfImage NoAuthImage
        {
            get
            {
                if ((this.mNoAuthImage == null))
                {
                    this.mNoAuthImage = new WpfImage(this);
                    #region Search Criteria
                    this.mNoAuthImage.SearchProperties[WpfImage.PropertyNames.HelpText] = "You are not authorized to edit this resource";
                    this.mNoAuthImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNoAuthImage;
            }
        }
        
        public WpfText AddressText
        {
            get
            {
                if ((this.mAddressText == null))
                {
                    this.mAddressText = new WpfText(this);
                    #region Search Criteria
                    this.mAddressText.SearchProperties[WpfText.PropertyNames.Name] = "New Server Source";
                    this.mAddressText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddressText;
            }
        }
        
        public WpfImage NewServerTabIcon
        {
            get
            {
                if ((this.mNewServerTabIcon == null))
                {
                    this.mNewServerTabIcon = new WpfImage(this);
                    #region Search Criteria
                    this.mNewServerTabIcon.SearchProperties[WpfImage.PropertyNames.AutomationId] = "New Server Source";
                    this.mNewServerTabIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewServerTabIcon;
            }
        }
        
        public WpfImage UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUIItemImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext1 mWorkSurfaceContext;
        
        private WpfButton mTabCloseButton;
        
        private WpfImage mNoAuthMessageText;
        
        private WpfText mNewServerTitleText;
        
        private WpfImage mNewServerBackground;
        
        private WpfImage mNoAuthImage;
        
        private WpfText mAddressText;
        
        private WpfImage mNewServerTabIcon;
        
        private WpfImage mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class WorkSurfaceContext1 : WpfCustom
    {
        
        public WorkSurfaceContext1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NewServerSourceWizard NewServerSourceWizard
        {
            get
            {
                if ((this.mNewServerSourceWizard == null))
                {
                    this.mNewServerSourceWizard = new NewServerSourceWizard(this);
                }
                return this.mNewServerSourceWizard;
            }
        }
        #endregion
        
        #region Fields
        private NewServerSourceWizard mNewServerSourceWizard;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class NewServerSourceWizard : WpfCustom
    {
        
        public NewServerSourceWizard(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ManageServerControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AuthTypeOptions AuthTypeOptions
        {
            get
            {
                if ((this.mAuthTypeOptions == null))
                {
                    this.mAuthTypeOptions = new AuthTypeOptions(this);
                }
                return this.mAuthTypeOptions;
            }
        }
        
        public AddressComboBox AddressComboBox
        {
            get
            {
                if ((this.mAddressComboBox == null))
                {
                    this.mAddressComboBox = new AddressComboBox(this);
                }
                return this.mAddressComboBox;
            }
        }
        #endregion
        
        #region Fields
        private AuthTypeOptions mAuthTypeOptions;
        
        private AddressComboBox mAddressComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class AuthTypeOptions : WpfCustom
    {
        
        public AuthTypeOptions(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ProtocolItems";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfButton WindowsAuth
        {
            get
            {
                if ((this.mWindowsAuth == null))
                {
                    this.mWindowsAuth = new WpfButton(this);
                    #region Search Criteria
                    this.mWindowsAuth.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mWindowsAuth.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mWindowsAuth;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mWindowsAuth;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class AddressComboBox : WpfComboBox
    {
        
        public AddressComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "AddressTextBox";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfEdit AddressEditBox
        {
            get
            {
                if ((this.mAddressEditBox == null))
                {
                    this.mAddressEditBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mAddressEditBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mAddressEditBox.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mAddressEditBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mAddressEditBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SchedulerTab : WpfCustom
    {
        
        public SchedulerTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SchedulerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SchedulerView_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox RunTaskCheckBox
        {
            get
            {
                if ((this.mRunTaskCheckBox == null))
                {
                    this.mRunTaskCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRunTaskCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_RunAsapCheckBox";
                    this.mRunTaskCheckBox.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mRunTaskCheckBox;
            }
        }
        
        public WpfText NumberofHistoryText
        {
            get
            {
                if ((this.mNumberofHistoryText == null))
                {
                    this.mNumberofHistoryText = new WpfText(this);
                    #region Search Criteria
                    this.mNumberofHistoryText.SearchProperties[WpfText.PropertyNames.Name] = "Number of History records to load (0 = all) ";
                    this.mNumberofHistoryText.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mNumberofHistoryText;
            }
        }
        
        public WpfEdit NumOfHistoryTextBoxEdit
        {
            get
            {
                if ((this.mNumOfHistoryTextBoxEdit == null))
                {
                    this.mNumOfHistoryTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mNumOfHistoryTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NumOfHisTextBox";
                    this.mNumOfHistoryTextBoxEdit.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mNumOfHistoryTextBoxEdit;
            }
        }
        
        public WpfText UIRunasthefollowinguseText
        {
            get
            {
                if ((this.mUIRunasthefollowinguseText == null))
                {
                    this.mUIRunasthefollowinguseText = new WpfText(this);
                    #region Search Criteria
                    this.mUIRunasthefollowinguseText.SearchProperties[WpfText.PropertyNames.Name] = "Run as the following user account ";
                    this.mUIRunasthefollowinguseText.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIRunasthefollowinguseText;
            }
        }
        
        public WpfText UsernameText
        {
            get
            {
                if ((this.mUsernameText == null))
                {
                    this.mUsernameText = new WpfText(this);
                    #region Search Criteria
                    this.mUsernameText.SearchProperties[WpfText.PropertyNames.AutomationId] = "UsernameTextBlock";
                    this.mUsernameText.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUsernameText;
            }
        }
        
        public WpfEdit UserNameTextBoxEdit
        {
            get
            {
                if ((this.mUserNameTextBoxEdit == null))
                {
                    this.mUserNameTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUserNameTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_UserNameTextBox";
                    this.mUserNameTextBoxEdit.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUserNameTextBoxEdit;
            }
        }
        
        public WpfText PasswordText
        {
            get
            {
                if ((this.mPasswordText == null))
                {
                    this.mPasswordText = new WpfText(this);
                    #region Search Criteria
                    this.mPasswordText.SearchProperties[WpfText.PropertyNames.Name] = "Password ";
                    this.mPasswordText.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mPasswordText;
            }
        }
        
        public WpfEdit PasswordTextBoxEdit
        {
            get
            {
                if ((this.mPasswordTextBoxEdit == null))
                {
                    this.mPasswordTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_PasswordBox";
                    this.mPasswordTextBoxEdit.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mPasswordTextBoxEdit;
            }
        }
        
        public WpfText ErrorMessageText
        {
            get
            {
                if ((this.mErrorMessageText == null))
                {
                    this.mErrorMessageText = new WpfText(this);
                    #region Search Criteria
                    this.mErrorMessageText.SearchProperties[WpfText.PropertyNames.Name] = "Please select a workflow to schedule";
                    this.mErrorMessageText.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mErrorMessageText;
            }
        }
        
        public WpfTable HistoryTable
        {
            get
            {
                if ((this.mHistoryTable == null))
                {
                    this.mHistoryTable = new WpfTable(this);
                    #region Search Criteria
                    this.mHistoryTable.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mHistoryTable;
            }
        }
        
        public ConnectControl1 ConnectControl
        {
            get
            {
                if ((this.mConnectControl == null))
                {
                    this.mConnectControl = new ConnectControl1(this);
                }
                return this.mConnectControl;
            }
        }
        
        public SchedulesList SchedulesList
        {
            get
            {
                if ((this.mSchedulesList == null))
                {
                    this.mSchedulesList = new SchedulesList(this);
                }
                return this.mSchedulesList;
            }
        }
        
        public WpfText TriggerText
        {
            get
            {
                if ((this.mTriggerText == null))
                {
                    this.mTriggerText = new WpfText(this);
                    #region Search Criteria
                    this.mTriggerText.SearchProperties[WpfText.PropertyNames.Name] = "Triggered at ";
                    this.mTriggerText.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mTriggerText;
            }
        }
        
        public WpfText TriggerValueText
        {
            get
            {
                if ((this.mTriggerValueText == null))
                {
                    this.mTriggerValueText = new WpfText(this);
                    #region Search Criteria
                    this.mTriggerValueText.SearchProperties[WpfText.PropertyNames.Name] = "At 2:40 PM every day";
                    this.mTriggerValueText.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mTriggerValueText;
            }
        }
        
        public WpfButton EditTriggerButton
        {
            get
            {
                if ((this.mEditTriggerButton == null))
                {
                    this.mEditTriggerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditTriggerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_EditTriggerButton_AutoID";
                    this.mEditTriggerButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mEditTriggerButton;
            }
        }
        
        public WpfText NameText
        {
            get
            {
                if ((this.mNameText == null))
                {
                    this.mNameText = new WpfText(this);
                    #region Search Criteria
                    this.mNameText.SearchProperties[WpfText.PropertyNames.Name] = "Name ";
                    this.mNameText.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mNameText;
            }
        }
        
        public WpfEdit NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mNameTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextbox";
                    this.mNameTextbox.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mNameTextbox;
            }
        }
        
        public WpfText StatusText
        {
            get
            {
                if ((this.mStatusText == null))
                {
                    this.mStatusText = new WpfText(this);
                    #region Search Criteria
                    this.mStatusText.SearchProperties[WpfText.PropertyNames.Name] = "Status ";
                    this.mStatusText.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mStatusText;
            }
        }
        
        public WpfRadioButton EnabledRadioButton
        {
            get
            {
                if ((this.mEnabledRadioButton == null))
                {
                    this.mEnabledRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mEnabledRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_EnabledRadioButton";
                    this.mEnabledRadioButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mEnabledRadioButton;
            }
        }
        
        public WpfRadioButton DisabledRadioButton
        {
            get
            {
                if ((this.mDisabledRadioButton == null))
                {
                    this.mDisabledRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mDisabledRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_DisabledRadioButton";
                    this.mDisabledRadioButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDisabledRadioButton;
            }
        }
        
        public WpfText WorkflowText
        {
            get
            {
                if ((this.mWorkflowText == null))
                {
                    this.mWorkflowText = new WpfText(this);
                    #region Search Criteria
                    this.mWorkflowText.SearchProperties[WpfText.PropertyNames.Name] = "Workflow ";
                    this.mWorkflowText.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mWorkflowText;
            }
        }
        
        public WpfEdit WorkflowNameTextBox
        {
            get
            {
                if ((this.mWorkflowNameTextBox == null))
                {
                    this.mWorkflowNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mWorkflowNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_WorkflowNameTextBox_AutoID";
                    this.mWorkflowNameTextBox.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mWorkflowNameTextBox;
            }
        }
        
        public WpfButton ResourcePickerButton
        {
            get
            {
                if ((this.mResourcePickerButton == null))
                {
                    this.mResourcePickerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mResourcePickerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_WorkflowSelectorButton_AutoID";
                    this.mResourcePickerButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mResourcePickerButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mRunTaskCheckBox;
        
        private WpfText mNumberofHistoryText;
        
        private WpfEdit mNumOfHistoryTextBoxEdit;
        
        private WpfText mUIRunasthefollowinguseText;
        
        private WpfText mUsernameText;
        
        private WpfEdit mUserNameTextBoxEdit;
        
        private WpfText mPasswordText;
        
        private WpfEdit mPasswordTextBoxEdit;
        
        private WpfText mErrorMessageText;
        
        private WpfTable mHistoryTable;
        
        private ConnectControl1 mConnectControl;
        
        private SchedulesList mSchedulesList;
        
        private WpfText mTriggerText;
        
        private WpfText mTriggerValueText;
        
        private WpfButton mEditTriggerButton;
        
        private WpfText mNameText;
        
        private WpfEdit mNameTextbox;
        
        private WpfText mStatusText;
        
        private WpfRadioButton mEnabledRadioButton;
        
        private WpfRadioButton mDisabledRadioButton;
        
        private WpfText mWorkflowText;
        
        private WpfEdit mWorkflowNameTextBox;
        
        private WpfButton mResourcePickerButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ConnectControl1 : WpfCustom
    {
        
        public ConnectControl1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ConnectUserControl";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfComboBox ServerComboBox
        {
            get
            {
                if ((this.mServerComboBox == null))
                {
                    this.mServerComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mServerComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_SettingsServerComboBox_AutoID";
                    this.mServerComboBox.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mServerComboBox;
            }
        }
        
        public WpfButton EditServerButton
        {
            get
            {
                if ((this.mEditServerButton == null))
                {
                    this.mEditServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditServerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SettingsServerEditButton_AutoID";
                    this.mEditServerButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mEditServerButton;
            }
        }
        
        public WpfButton ConnectServerButton
        {
            get
            {
                if ((this.mConnectServerButton == null))
                {
                    this.mConnectServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConnectServerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SettingsServerConnectButton_AutoID";
                    this.mConnectServerButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mConnectServerButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mServerComboBox;
        
        private WpfButton mEditServerButton;
        
        private WpfButton mConnectServerButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SchedulesList : WpfList
    {
        
        public SchedulesList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "schedules";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UINameworkflow1ResourcListItem UINameworkflow1ResourcListItem
        {
            get
            {
                if ((this.mUINameworkflow1ResourcListItem == null))
                {
                    this.mUINameworkflow1ResourcListItem = new UINameworkflow1ResourcListItem(this);
                }
                return this.mUINameworkflow1ResourcListItem;
            }
        }
        
        public SchedulerListItem SchedulerListItem
        {
            get
            {
                if ((this.mSchedulerListItem == null))
                {
                    this.mSchedulerListItem = new SchedulerListItem(this);
                }
                return this.mSchedulerListItem;
            }
        }
        
        public NewTask NewTask
        {
            get
            {
                if ((this.mNewTask == null))
                {
                    this.mNewTask = new NewTask(this);
                }
                return this.mNewTask;
            }
        }
        
        public WpfButton DeleteTaskButton
        {
            get
            {
                if ((this.mDeleteTaskButton == null))
                {
                    this.mDeleteTaskButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteTaskButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_WorkflowSelectorButton_AutoID";
                    this.mDeleteTaskButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDeleteTaskButton;
            }
        }
        #endregion
        
        #region Fields
        private UINameworkflow1ResourcListItem mUINameworkflow1ResourcListItem;
        
        private SchedulerListItem mSchedulerListItem;
        
        private NewTask mNewTask;
        
        private WpfButton mDeleteTaskButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UINameworkflow1ResourcListItem : WpfListItem
    {
        
        public UINameworkflow1ResourcListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Name:workflow1 ResourceId:00000000-0000-0000-0000-000000000000";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox StatusCheckBox
        {
            get
            {
                if ((this.mStatusCheckBox == null))
                {
                    this.mStatusCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mStatusCheckBox.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mStatusCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mStatusCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SchedulerListItem : WpfListItem
    {
        
        public SchedulerListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Scheduler.DummyResource";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public CreateTaskButton CreateTaskButton
        {
            get
            {
                if ((this.mCreateTaskButton == null))
                {
                    this.mCreateTaskButton = new CreateTaskButton(this);
                }
                return this.mCreateTaskButton;
            }
        }
        #endregion
        
        #region Fields
        private CreateTaskButton mCreateTaskButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class CreateTaskButton : WpfButton
    {
        
        public CreateTaskButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfButton NewTaskButton
        {
            get
            {
                if ((this.mNewTaskButton == null))
                {
                    this.mNewTaskButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewTaskButton.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mNewTaskButton.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mNewTaskButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mNewTaskButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mNewTaskButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class NewTask : WpfListItem
    {
        
        public NewTask(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Name:New Task1 ResourceId:00000000-0000-0000-0000-000000000000";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox StatusCheckbox
        {
            get
            {
                if ((this.mStatusCheckbox == null))
                {
                    this.mStatusCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mStatusCheckbox.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mStatusCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mStatusCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SettingsTab : WpfCustom
    {
        
        public SettingsTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SettingsView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SettingsView_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public ConnectControl2 ConnectControl
        {
            get
            {
                if ((this.mConnectControl == null))
                {
                    this.mConnectControl = new ConnectControl2(this);
                }
                return this.mConnectControl;
            }
        }
        
        public UIItemTabList UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new UIItemTabList(this);
                }
                return this.mUIItemTabList;
            }
        }
        #endregion
        
        #region Fields
        private ConnectControl2 mConnectControl;
        
        private UIItemTabList mUIItemTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ConnectControl2 : WpfCustom
    {
        
        public ConnectControl2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ConnectUserControl";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfComboBox SettingsServerComboBox
        {
            get
            {
                if ((this.mSettingsServerComboBox == null))
                {
                    this.mSettingsServerComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mSettingsServerComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_SettingsServerComboBox_AutoID";
                    this.mSettingsServerComboBox.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSettingsServerComboBox;
            }
        }
        
        public WpfButton EditServerButton
        {
            get
            {
                if ((this.mEditServerButton == null))
                {
                    this.mEditServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditServerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SettingsServerEditButton_AutoID";
                    this.mEditServerButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mEditServerButton;
            }
        }
        
        public WpfButton ConnectServerButton
        {
            get
            {
                if ((this.mConnectServerButton == null))
                {
                    this.mConnectServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConnectServerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SettingsServerConnectButton_AutoID";
                    this.mConnectServerButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mConnectServerButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mSettingsServerComboBox;
        
        private WpfButton mEditServerButton;
        
        private WpfButton mConnectServerButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIItemTabList : WpfTabList
    {
        
        public UIItemTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public SecurityTab SecurityTab
        {
            get
            {
                if ((this.mSecurityTab == null))
                {
                    this.mSecurityTab = new SecurityTab(this);
                }
                return this.mSecurityTab;
            }
        }
        
        public WpfTabPage LoggingTab
        {
            get
            {
                if ((this.mLoggingTab == null))
                {
                    this.mLoggingTab = new WpfTabPage(this);
                    #region Search Criteria
                    this.mLoggingTab.SearchProperties[WpfTabPage.PropertyNames.Name] = "System.Windows.Controls.TabItem Header: Content:";
                    this.mLoggingTab.SearchProperties[WpfTabPage.PropertyNames.Instance] = "2";
                    this.mLoggingTab.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mLoggingTab;
            }
        }
        #endregion
        
        #region Fields
        private SecurityTab mSecurityTab;
        
        private WpfTabPage mLoggingTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SecurityTab : WpfTabPage
    {
        
        public SecurityTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "System.Windows.Controls.TabItem Header: Content:";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public SecurityWindow SecurityWindow
        {
            get
            {
                if ((this.mSecurityWindow == null))
                {
                    this.mSecurityWindow = new SecurityWindow(this);
                }
                return this.mSecurityWindow;
            }
        }
        #endregion
        
        #region Fields
        private SecurityWindow mSecurityWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SecurityWindow : WpfCustom
    {
        
        public SecurityWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SecurityView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SecurityViewContent";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public ServerPermissions ServerPermissions
        {
            get
            {
                if ((this.mServerPermissions == null))
                {
                    this.mServerPermissions = new ServerPermissions(this);
                }
                return this.mServerPermissions;
            }
        }
        
        public ResourcePermissions ResourcePermissions
        {
            get
            {
                if ((this.mResourcePermissions == null))
                {
                    this.mResourcePermissions = new ResourcePermissions(this);
                }
                return this.mResourcePermissions;
            }
        }
        #endregion
        
        #region Fields
        private ServerPermissions mServerPermissions;
        
        private ResourcePermissions mResourcePermissions;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ServerPermissions : WpfTable
    {
        
        public ServerPermissions(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "ServerPermissionsDataGrid";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WpfCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
                    this.mUIFalseCell.SearchProperties[WpfCell.PropertyNames.Value] = "False";
                    this.mUIFalseCell.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfCell mUIFalseCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ResourcePermissions : WpfTable
    {
        
        public ResourcePermissions(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "ResourcePermissionsDataGrid";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public ResourceCell ResourceCell
        {
            get
            {
                if ((this.mResourceCell == null))
                {
                    this.mResourceCell = new ResourceCell(this);
                }
                return this.mResourceCell;
            }
        }
        
        public WpfCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WpfCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
                    this.mUIFalseCell.SearchProperties[WpfCell.PropertyNames.Value] = "False";
                    this.mUIFalseCell.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        #endregion
        
        #region Fields
        private ResourceCell mResourceCell;
        
        private WpfCell mUIFalseCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ResourceCell : WpfCell
    {
        
        public ResourceCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfButton ResourcePickerButton
        {
            get
            {
                if ((this.mResourcePickerButton == null))
                {
                    this.mResourcePickerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mResourcePickerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__AddResourceButton_AutoID";
                    this.mResourcePickerButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mResourcePickerButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mResourcePickerButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class WorkflowTab : WpfTabPage
    {
        
        public WorkflowTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Studio.ViewModels.Workflow.WorkflowDesignerViewModel";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext2 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext2(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mUIItemButton.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext2 mWorkSurfaceContext;
        
        private WpfButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class WorkSurfaceContext2 : WpfCustom
    {
        
        public WorkSurfaceContext2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WorkflowDesignerView WorkflowDesignerView
        {
            get
            {
                if ((this.mWorkflowDesignerView == null))
                {
                    this.mWorkflowDesignerView = new WorkflowDesignerView(this);
                }
                return this.mWorkflowDesignerView;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowDesignerView mWorkflowDesignerView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class WorkflowDesignerView : WpfCustom
    {
        
        public WorkflowDesignerView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DesignerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UserControl_1";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane(this);
                }
                return this.mScrollViewerPane;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane mScrollViewerPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ScrollViewerPane : WpfPane
    {
        
        public ScrollViewerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "scrollViewer";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public ActivityTypeDesigner ActivityTypeDesigner
        {
            get
            {
                if ((this.mActivityTypeDesigner == null))
                {
                    this.mActivityTypeDesigner = new ActivityTypeDesigner(this);
                }
                return this.mActivityTypeDesigner;
            }
        }
        #endregion
        
        #region Fields
        private ActivityTypeDesigner mActivityTypeDesigner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ActivityTypeDesigner : WpfCustom
    {
        
        public ActivityTypeDesigner(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ActivityTypeDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActivityTypeDesigner";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WorkflowItemPresenter WorkflowItemPresenter
        {
            get
            {
                if ((this.mWorkflowItemPresenter == null))
                {
                    this.mWorkflowItemPresenter = new WorkflowItemPresenter(this);
                }
                return this.mWorkflowItemPresenter;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowItemPresenter mWorkflowItemPresenter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class WorkflowItemPresenter : WpfCustom
    {
        
        public WorkflowItemPresenter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "WorkflowItemPresenter";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public Flowchart Flowchart
        {
            get
            {
                if ((this.mFlowchart == null))
                {
                    this.mFlowchart = new Flowchart(this);
                }
                return this.mFlowchart;
            }
        }
        #endregion
        
        #region Fields
        private Flowchart mFlowchart;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Flowchart : WpfCustom
    {
        
        public Flowchart(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowchartDesigner";
            this.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "Unsaved", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfCustom ForEachActivity
        {
            get
            {
                if ((this.mForEachActivity == null))
                {
                    this.mForEachActivity = new WpfCustom(this);
                    #region Search Criteria
                    this.mForEachActivity.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ForeachDesigner";
                    this.mForEachActivity.SearchProperties[WpfControl.PropertyNames.AutomationId] = "For Each(ForeachDesigner)";
                    this.mForEachActivity.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mForEachActivity;
            }
        }
        
        public WpfCustom RecordsetLength
        {
            get
            {
                if ((this.mRecordsetLength == null))
                {
                    this.mRecordsetLength = new WpfCustom(this);
                    #region Search Criteria
                    this.mRecordsetLength.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.RecordsLengthDesigner";
                    this.mRecordsetLength.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Length(RecordsLengthDesigner)";
                    this.mRecordsetLength.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mRecordsetLength;
            }
        }
        
        public WpfCustom FindRecordsMulti
        {
            get
            {
                if ((this.mFindRecordsMulti == null))
                {
                    this.mFindRecordsMulti = new WpfCustom(this);
                    #region Search Criteria
                    this.mFindRecordsMulti.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FindRecordsMultipleCriteriaDesigner";
                    this.mFindRecordsMulti.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Find Record Index (1)(FindRecordsMultipleCriteriaDesigner)";
                    this.mFindRecordsMulti.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mFindRecordsMulti;
            }
        }
        
        public WpfCustom DeleteRecord
        {
            get
            {
                if ((this.mDeleteRecord == null))
                {
                    this.mDeleteRecord = new WpfCustom(this);
                    #region Search Criteria
                    this.mDeleteRecord.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DeleteRecordsDesigner";
                    this.mDeleteRecord.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Delete Record(DeleteRecordsDesigner)";
                    this.mDeleteRecord.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDeleteRecord;
            }
        }
        
        public WpfCustom SortRecords
        {
            get
            {
                if ((this.mSortRecords == null))
                {
                    this.mSortRecords = new WpfCustom(this);
                    #region Search Criteria
                    this.mSortRecords.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SortRecordsDesigner";
                    this.mSortRecords.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sort Records(SortRecordsDesigner)";
                    this.mSortRecords.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSortRecords;
            }
        }
        
        public WpfCustom CountRecordset
        {
            get
            {
                if ((this.mCountRecordset == null))
                {
                    this.mCountRecordset = new WpfCustom(this);
                    #region Search Criteria
                    this.mCountRecordset.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CountRecordsDesigner";
                    this.mCountRecordset.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Count Records(CountRecordsDesigner)";
                    this.mCountRecordset.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mCountRecordset;
            }
        }
        
        public WpfCustom SqlBulkInsert
        {
            get
            {
                if ((this.mSqlBulkInsert == null))
                {
                    this.mSqlBulkInsert = new WpfCustom(this);
                    #region Search Criteria
                    this.mSqlBulkInsert.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SqlBulkInsertDesigner";
                    this.mSqlBulkInsert.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SQL Bulk Insert(SqlBulkInsertDesigner)";
                    this.mSqlBulkInsert.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSqlBulkInsert;
            }
        }
        
        public WpfCustom Unique
        {
            get
            {
                if ((this.mUnique == null))
                {
                    this.mUnique = new WpfCustom(this);
                    #region Search Criteria
                    this.mUnique.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UniqueRecordsDesigner";
                    this.mUnique.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Unique Records(UniqueRecordsDesigner)";
                    this.mUnique.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUnique;
            }
        }
        
        public WpfCustom CreateJson
        {
            get
            {
                if ((this.mCreateJson == null))
                {
                    this.mCreateJson = new WpfCustom(this);
                    #region Search Criteria
                    this.mCreateJson.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CreateJsonDesigner";
                    this.mCreateJson.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Create JSON (1)(CreateJsonDesigner)";
                    this.mCreateJson.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mCreateJson;
            }
        }
        
        public WpfCustom ExecuteCommand
        {
            get
            {
                if ((this.mExecuteCommand == null))
                {
                    this.mExecuteCommand = new WpfCustom(this);
                    #region Search Criteria
                    this.mExecuteCommand.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CommandLineDesigner";
                    this.mExecuteCommand.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Execute Command Line(CommandLineDesigner)";
                    this.mExecuteCommand.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mExecuteCommand;
            }
        }
        
        public WpfCustom Scripting
        {
            get
            {
                if ((this.mScripting == null))
                {
                    this.mScripting = new WpfCustom(this);
                    #region Search Criteria
                    this.mScripting.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ScriptDesigner";
                    this.mScripting.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Script(ScriptDesigner)";
                    this.mScripting.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mScripting;
            }
        }
        
        public WpfCustom SharepointCreate
        {
            get
            {
                if ((this.mSharepointCreate == null))
                {
                    this.mSharepointCreate = new WpfCustom(this);
                    #region Search Criteria
                    this.mSharepointCreate.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharepointListCreateDesigner";
                    this.mSharepointCreate.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sharepoint Create List Item(SharepointListCreateDesigner)";
                    this.mSharepointCreate.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSharepointCreate;
            }
        }
        
        public WpfCustom SharepointDeleteList
        {
            get
            {
                if ((this.mSharepointDeleteList == null))
                {
                    this.mSharepointDeleteList = new WpfCustom(this);
                    #region Search Criteria
                    this.mSharepointDeleteList.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharepointListDeleteDesigner";
                    this.mSharepointDeleteList.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sharepoint Delete List Item (1)(SharepointListDeleteDesigner)";
                    this.mSharepointDeleteList.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSharepointDeleteList;
            }
        }
        
        public WpfCustom SharepointReadList
        {
            get
            {
                if ((this.mSharepointReadList == null))
                {
                    this.mSharepointReadList = new WpfCustom(this);
                    #region Search Criteria
                    this.mSharepointReadList.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharepointListReadDesigner";
                    this.mSharepointReadList.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sharepoint Read List Item (1)(SharepointListReadDesigner)";
                    this.mSharepointReadList.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSharepointReadList;
            }
        }
        
        public WpfCustom SharepointUpdateList
        {
            get
            {
                if ((this.mSharepointUpdateList == null))
                {
                    this.mSharepointUpdateList = new WpfCustom(this);
                    #region Search Criteria
                    this.mSharepointUpdateList.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharepointListUpdateDesigner";
                    this.mSharepointUpdateList.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sharepoint Update List Item (1)(SharepointListUpdateDesigner)";
                    this.mSharepointUpdateList.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSharepointUpdateList;
            }
        }
        
        public WpfCustom Calculate
        {
            get
            {
                if ((this.mCalculate == null))
                {
                    this.mCalculate = new WpfCustom(this);
                    #region Search Criteria
                    this.mCalculate.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CalculateDesigner";
                    this.mCalculate.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Calculate(CalculateDesigner)";
                    this.mCalculate.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mCalculate;
            }
        }
        
        public WpfCustom DateTime
        {
            get
            {
                if ((this.mDateTime == null))
                {
                    this.mDateTime = new WpfCustom(this);
                    #region Search Criteria
                    this.mDateTime.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DateTimeDesigner";
                    this.mDateTime.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Date and Time(DateTimeDesigner)";
                    this.mDateTime.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDateTime;
            }
        }
        
        public WpfCustom DateTimeDifferenc
        {
            get
            {
                if ((this.mDateTimeDifferenc == null))
                {
                    this.mDateTimeDifferenc = new WpfCustom(this);
                    #region Search Criteria
                    this.mDateTimeDifferenc.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DateTimeDifferenceDesigner";
                    this.mDateTimeDifferenc.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Date and Time Difference(DateTimeDifferenceDesigner)";
                    this.mDateTimeDifferenc.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDateTimeDifferenc;
            }
        }
        
        public WpfCustom GatherSystemInfo
        {
            get
            {
                if ((this.mGatherSystemInfo == null))
                {
                    this.mGatherSystemInfo = new WpfCustom(this);
                    #region Search Criteria
                    this.mGatherSystemInfo.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.GatherSystemInformationDesigner";
                    this.mGatherSystemInfo.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Gather System Information (1)(GatherSystemInformationDesigner)";
                    this.mGatherSystemInfo.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mGatherSystemInfo;
            }
        }
        
        public WpfCustom NumberFormat
        {
            get
            {
                if ((this.mNumberFormat == null))
                {
                    this.mNumberFormat = new WpfCustom(this);
                    #region Search Criteria
                    this.mNumberFormat.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FormatNumberDesigner";
                    this.mNumberFormat.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Format Number(FormatNumberDesigner)";
                    this.mNumberFormat.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mNumberFormat;
            }
        }
        
        public WpfCustom Random
        {
            get
            {
                if ((this.mRandom == null))
                {
                    this.mRandom = new WpfCustom(this);
                    #region Search Criteria
                    this.mRandom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.RandomDesigner";
                    this.mRandom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Random(RandomDesigner)";
                    this.mRandom.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mRandom;
            }
        }
        
        public WpfCustom SendEmail
        {
            get
            {
                if ((this.mSendEmail == null))
                {
                    this.mSendEmail = new WpfCustom(this);
                    #region Search Criteria
                    this.mSendEmail.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.EmailDesigner";
                    this.mSendEmail.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Email(EmailDesigner)";
                    this.mSendEmail.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSendEmail;
            }
        }
        
        public WpfCustom WebGetRequest
        {
            get
            {
                if ((this.mWebGetRequest == null))
                {
                    this.mWebGetRequest = new WpfCustom(this);
                    #region Search Criteria
                    this.mWebGetRequest.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.GetWebRequestWithTimeOutDesigner";
                    this.mWebGetRequest.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Web Request(GetWebRequestWithTimeOutDesigner)";
                    this.mWebGetRequest.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mWebGetRequest;
            }
        }
        
        public WpfCustom Comment
        {
            get
            {
                if ((this.mComment == null))
                {
                    this.mComment = new WpfCustom(this);
                    #region Search Criteria
                    this.mComment.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CommentDesigner";
                    this.mComment.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Comment(CommentDesigner)";
                    this.mComment.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mComment;
            }
        }
        
        public WpfCustom XPath
        {
            get
            {
                if ((this.mXPath == null))
                {
                    this.mXPath = new WpfCustom(this);
                    #region Search Criteria
                    this.mXPath.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XPathDesigner";
                    this.mXPath.SearchProperties[WpfControl.PropertyNames.AutomationId] = "XPath (1)(XPathDesigner)";
                    this.mXPath.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mXPath;
            }
        }
        
        public WpfCustom DropBoxFile
        {
            get
            {
                if ((this.mDropBoxFile == null))
                {
                    this.mDropBoxFile = new WpfCustom(this);
                    #region Search Criteria
                    this.mDropBoxFile.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DropboxUploadFileDesigner";
                    this.mDropBoxFile.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dropbox File Operation(DropboxUploadFileDesigner)";
                    this.mDropBoxFile.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDropBoxFile;
            }
        }
        
        public WpfCustom PathCreate
        {
            get
            {
                if ((this.mPathCreate == null))
                {
                    this.mPathCreate = new WpfCustom(this);
                    #region Search Criteria
                    this.mPathCreate.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CreateDesigner";
                    this.mPathCreate.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Create(CreateDesigner)";
                    this.mPathCreate.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mPathCreate;
            }
        }
        
        public WpfCustom PathCopy
        {
            get
            {
                if ((this.mPathCopy == null))
                {
                    this.mPathCopy = new WpfCustom(this);
                    #region Search Criteria
                    this.mPathCopy.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CopyDesigner";
                    this.mPathCopy.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Copy(CopyDesigner)";
                    this.mPathCopy.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mPathCopy;
            }
        }
        
        public WpfCustom PathDelete
        {
            get
            {
                if ((this.mPathDelete == null))
                {
                    this.mPathDelete = new WpfCustom(this);
                    #region Search Criteria
                    this.mPathDelete.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DeleteDesigner";
                    this.mPathDelete.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Delete(DeleteDesigner)";
                    this.mPathDelete.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mPathDelete;
            }
        }
        
        public WpfCustom PathMove
        {
            get
            {
                if ((this.mPathMove == null))
                {
                    this.mPathMove = new WpfCustom(this);
                    #region Search Criteria
                    this.mPathMove.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MoveDesigner";
                    this.mPathMove.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Move(MoveDesigner)";
                    this.mPathMove.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mPathMove;
            }
        }
        
        public WpfCustom FolderRead
        {
            get
            {
                if ((this.mFolderRead == null))
                {
                    this.mFolderRead = new WpfCustom(this);
                    #region Search Criteria
                    this.mFolderRead.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ReadFolderDesigner";
                    this.mFolderRead.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Read Folder(ReadFolderDesigner)";
                    this.mFolderRead.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mFolderRead;
            }
        }
        
        public WpfCustom FileRead
        {
            get
            {
                if ((this.mFileRead == null))
                {
                    this.mFileRead = new WpfCustom(this);
                    #region Search Criteria
                    this.mFileRead.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ReadFileDesigner";
                    this.mFileRead.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Read File(ReadFileDesigner)";
                    this.mFileRead.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mFileRead;
            }
        }
        
        public WpfCustom FileWrite
        {
            get
            {
                if ((this.mFileWrite == null))
                {
                    this.mFileWrite = new WpfCustom(this);
                    #region Search Criteria
                    this.mFileWrite.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WriteFileDesigner";
                    this.mFileWrite.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Write File(WriteFileDesigner)";
                    this.mFileWrite.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mFileWrite;
            }
        }
        
        public WpfCustom PathRename
        {
            get
            {
                if ((this.mPathRename == null))
                {
                    this.mPathRename = new WpfCustom(this);
                    #region Search Criteria
                    this.mPathRename.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.RenameDesigner";
                    this.mPathRename.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Rename(RenameDesigner)";
                    this.mPathRename.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mPathRename;
            }
        }
        
        public WpfCustom UnZip
        {
            get
            {
                if ((this.mUnZip == null))
                {
                    this.mUnZip = new WpfCustom(this);
                    #region Search Criteria
                    this.mUnZip.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UnzipDesigner";
                    this.mUnZip.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Unzip(UnzipDesigner)";
                    this.mUnZip.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUnZip;
            }
        }
        
        public WpfCustom Zip
        {
            get
            {
                if ((this.mZip == null))
                {
                    this.mZip = new WpfCustom(this);
                    #region Search Criteria
                    this.mZip.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ZipDesigner";
                    this.mZip.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Zip(ZipDesigner)";
                    this.mZip.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mZip;
            }
        }
        
        public WpfCustom DataMerge
        {
            get
            {
                if ((this.mDataMerge == null))
                {
                    this.mDataMerge = new WpfCustom(this);
                    #region Search Criteria
                    this.mDataMerge.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DataMergeDesigner";
                    this.mDataMerge.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Data Merge (1)(DataMergeDesigner)";
                    this.mDataMerge.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDataMerge;
            }
        }
        
        public WpfCustom BaseConvert
        {
            get
            {
                if ((this.mBaseConvert == null))
                {
                    this.mBaseConvert = new WpfCustom(this);
                    #region Search Criteria
                    this.mBaseConvert.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.BaseConvertDesigner";
                    this.mBaseConvert.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Base Conversion (1)(BaseConvertDesigner)";
                    this.mBaseConvert.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mBaseConvert;
            }
        }
        
        public WpfCustom CaseConvert
        {
            get
            {
                if ((this.mCaseConvert == null))
                {
                    this.mCaseConvert = new WpfCustom(this);
                    #region Search Criteria
                    this.mCaseConvert.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CaseConvertDesigner";
                    this.mCaseConvert.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Case Conversion (1)(CaseConvertDesigner)";
                    this.mCaseConvert.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mCaseConvert;
            }
        }
        
        public WpfCustom DataSplit
        {
            get
            {
                if ((this.mDataSplit == null))
                {
                    this.mDataSplit = new WpfCustom(this);
                    #region Search Criteria
                    this.mDataSplit.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DataSplitDesigner";
                    this.mDataSplit.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Data Split (1)(DataSplitDesigner)";
                    this.mDataSplit.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDataSplit;
            }
        }
        
        public WpfCustom FindIndex
        {
            get
            {
                if ((this.mFindIndex == null))
                {
                    this.mFindIndex = new WpfCustom(this);
                    #region Search Criteria
                    this.mFindIndex.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FindIndexDesigner";
                    this.mFindIndex.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Find Index(FindIndexDesigner)";
                    this.mFindIndex.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mFindIndex;
            }
        }
        
        public WpfCustom Replace
        {
            get
            {
                if ((this.mReplace == null))
                {
                    this.mReplace = new WpfCustom(this);
                    #region Search Criteria
                    this.mReplace.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ReplaceDesigner";
                    this.mReplace.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Replace(ReplaceDesigner)";
                    this.mReplace.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mReplace;
            }
        }
        
        public WpfCustom Switch
        {
            get
            {
                if ((this.mSwitch == null))
                {
                    this.mSwitch = new WpfCustom(this);
                    #region Search Criteria
                    this.mSwitch.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowSwitchDesigner";
                    this.mSwitch.SearchProperties[WpfControl.PropertyNames.AutomationId] = "FlowSwitchDesigner";
                    this.mSwitch.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSwitch;
            }
        }
        
        public WpfCustom Sequence
        {
            get
            {
                if ((this.mSequence == null))
                {
                    this.mSequence = new WpfCustom(this);
                    #region Search Criteria
                    this.mSequence.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SequenceDesigner";
                    this.mSequence.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sequence(SequenceDesigner)";
                    this.mSequence.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSequence;
            }
        }
        
        public WpfCustom Decision
        {
            get
            {
                if ((this.mDecision == null))
                {
                    this.mDecision = new WpfCustom(this);
                    #region Search Criteria
                    this.mDecision.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowDecisionDesigner";
                    this.mDecision.SearchProperties[WpfControl.PropertyNames.AutomationId] = "FlowDecisionDesigner";
                    this.mDecision.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDecision;
            }
        }
        
        public WpfCustom MultiAssign
        {
            get
            {
                if ((this.mMultiAssign == null))
                {
                    this.mMultiAssign = new WpfCustom(this);
                    #region Search Criteria
                    this.mMultiAssign.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MultiAssignDesigner";
                    this.mMultiAssign.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Assign (1)(MultiAssignDesigner)";
                    this.mMultiAssign.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mMultiAssign;
            }
        }
        
        public WpfCustom StartNode
        {
            get
            {
                if ((this.mStartNode == null))
                {
                    this.mStartNode = new WpfCustom(this);
                    #region Search Criteria
                    this.mStartNode.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.StartSymbol";
                    this.mStartNode.SearchProperties[WpfControl.PropertyNames.AutomationId] = "StartSymbol";
                    this.mStartNode.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mStartNode;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mForEachActivity;
        
        private WpfCustom mRecordsetLength;
        
        private WpfCustom mFindRecordsMulti;
        
        private WpfCustom mDeleteRecord;
        
        private WpfCustom mSortRecords;
        
        private WpfCustom mCountRecordset;
        
        private WpfCustom mSqlBulkInsert;
        
        private WpfCustom mUnique;
        
        private WpfCustom mCreateJson;
        
        private WpfCustom mExecuteCommand;
        
        private WpfCustom mScripting;
        
        private WpfCustom mSharepointCreate;
        
        private WpfCustom mSharepointDeleteList;
        
        private WpfCustom mSharepointReadList;
        
        private WpfCustom mSharepointUpdateList;
        
        private WpfCustom mCalculate;
        
        private WpfCustom mDateTime;
        
        private WpfCustom mDateTimeDifferenc;
        
        private WpfCustom mGatherSystemInfo;
        
        private WpfCustom mNumberFormat;
        
        private WpfCustom mRandom;
        
        private WpfCustom mSendEmail;
        
        private WpfCustom mWebGetRequest;
        
        private WpfCustom mComment;
        
        private WpfCustom mXPath;
        
        private WpfCustom mDropBoxFile;
        
        private WpfCustom mPathCreate;
        
        private WpfCustom mPathCopy;
        
        private WpfCustom mPathDelete;
        
        private WpfCustom mPathMove;
        
        private WpfCustom mFolderRead;
        
        private WpfCustom mFileRead;
        
        private WpfCustom mFileWrite;
        
        private WpfCustom mPathRename;
        
        private WpfCustom mUnZip;
        
        private WpfCustom mZip;
        
        private WpfCustom mDataMerge;
        
        private WpfCustom mBaseConvert;
        
        private WpfCustom mCaseConvert;
        
        private WpfCustom mDataSplit;
        
        private WpfCustom mFindIndex;
        
        private WpfCustom mReplace;
        
        private WpfCustom mSwitch;
        
        private WpfCustom mSequence;
        
        private WpfCustom mDecision;
        
        private WpfCustom mMultiAssign;
        
        private WpfCustom mStartNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class NewDBConnectorTab : WpfTabPage
    {
        
        public NewDBConnectorTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.ServerProxyLayer.IDbSour" +
                "ce]";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext3 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext3(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        
        public WpfScrollBar VerticalScrollBar
        {
            get
            {
                if ((this.mVerticalScrollBar == null))
                {
                    this.mVerticalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mVerticalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "VerticalScrollBar";
                    this.mVerticalScrollBar.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mVerticalScrollBar;
            }
        }
        
        public WpfScrollBar HorizontalScrollBar
        {
            get
            {
                if ((this.mHorizontalScrollBar == null))
                {
                    this.mHorizontalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mHorizontalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "HorizontalScrollBar";
                    this.mHorizontalScrollBar.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mHorizontalScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext3 mWorkSurfaceContext;
        
        private WpfScrollBar mVerticalScrollBar;
        
        private WpfScrollBar mHorizontalScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class WorkSurfaceContext3 : WpfCustom
    {
        
        public WorkSurfaceContext3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public SourcesComboBox SourcesComboBox
        {
            get
            {
                if ((this.mSourcesComboBox == null))
                {
                    this.mSourcesComboBox = new SourcesComboBox(this);
                }
                return this.mSourcesComboBox;
            }
        }
        
        public NewDBConnectorWizard NewDBConnectorWizard
        {
            get
            {
                if ((this.mNewDBConnectorWizard == null))
                {
                    this.mNewDBConnectorWizard = new NewDBConnectorWizard(this);
                }
                return this.mNewDBConnectorWizard;
            }
        }
        
        public WpfText Step1Text
        {
            get
            {
                if ((this.mStep1Text == null))
                {
                    this.mStep1Text = new WpfText(this);
                    #region Search Criteria
                    this.mStep1Text.SearchProperties[WpfText.PropertyNames.Name] = "1";
                    this.mStep1Text.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mStep1Text;
            }
        }
        
        public WpfText TitleText
        {
            get
            {
                if ((this.mTitleText == null))
                {
                    this.mTitleText = new WpfText(this);
                    #region Search Criteria
                    this.mTitleText.SearchProperties[WpfText.PropertyNames.Name] = "Data Source";
                    this.mTitleText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mTitleText;
            }
        }
        
        public WpfButton EditButton
        {
            get
            {
                if ((this.mEditButton == null))
                {
                    this.mEditButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditButton.SearchProperties[WpfButton.PropertyNames.Name] = " ... ";
                    this.mEditButton.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mEditButton;
            }
        }
        
        public WpfText OrText
        {
            get
            {
                if ((this.mOrText == null))
                {
                    this.mOrText = new WpfText(this);
                    #region Search Criteria
                    this.mOrText.SearchProperties[WpfText.PropertyNames.Name] = "or";
                    this.mOrText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mOrText;
            }
        }
        
        public WpfButton NewButton
        {
            get
            {
                if ((this.mNewButton == null))
                {
                    this.mNewButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewButton.SearchProperties[WpfButton.PropertyNames.Name] = "New";
                    this.mNewButton.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNewButton;
            }
        }
        
        public WpfText Step2Text
        {
            get
            {
                if ((this.mStep2Text == null))
                {
                    this.mStep2Text = new WpfText(this);
                    #region Search Criteria
                    this.mStep2Text.SearchProperties[WpfText.PropertyNames.Name] = "2";
                    this.mStep2Text.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mStep2Text;
            }
        }
        
        public WpfText SelectanActionText
        {
            get
            {
                if ((this.mSelectanActionText == null))
                {
                    this.mSelectanActionText = new WpfText(this);
                    #region Search Criteria
                    this.mSelectanActionText.SearchProperties[WpfText.PropertyNames.Name] = "Select an Action";
                    this.mSelectanActionText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSelectanActionText;
            }
        }
        
        public WpfCustom ActionsComboBox
        {
            get
            {
                if ((this.mActionsComboBox == null))
                {
                    this.mActionsComboBox = new WpfCustom(this);
                    #region Search Criteria
                    this.mActionsComboBox.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
                    this.mActionsComboBox.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActionsComboBox";
                    this.mActionsComboBox.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mActionsComboBox;
            }
        }
        
        public RefreshButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new RefreshButton(this);
                }
                return this.mRefreshButton;
            }
        }
        
        public WpfText Step3Text
        {
            get
            {
                if ((this.mStep3Text == null))
                {
                    this.mStep3Text = new WpfText(this);
                    #region Search Criteria
                    this.mStep3Text.SearchProperties[WpfText.PropertyNames.Name] = "3";
                    this.mStep3Text.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mStep3Text;
            }
        }
        
        public WpfText TestActionTitleText
        {
            get
            {
                if ((this.mTestActionTitleText == null))
                {
                    this.mTestActionTitleText = new WpfText(this);
                    #region Search Criteria
                    this.mTestActionTitleText.SearchProperties[WpfText.PropertyNames.Name] = "Test Connector and Calculate Outputs";
                    this.mTestActionTitleText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mTestActionTitleText;
            }
        }
        
        public WpfText InputsText
        {
            get
            {
                if ((this.mInputsText == null))
                {
                    this.mInputsText = new WpfText(this);
                    #region Search Criteria
                    this.mInputsText.SearchProperties[WpfText.PropertyNames.Name] = "Inputs";
                    this.mInputsText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mInputsText;
            }
        }
        
        public WpfList InputsList
        {
            get
            {
                if ((this.mInputsList == null))
                {
                    this.mInputsList = new WpfList(this);
                    #region Search Criteria
                    this.mInputsList.SearchProperties[WpfList.PropertyNames.AutomationId] = "InputsList";
                    this.mInputsList.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mInputsList;
            }
        }
        
        public TestActionButton TestActionButton
        {
            get
            {
                if ((this.mTestActionButton == null))
                {
                    this.mTestActionButton = new TestActionButton(this);
                }
                return this.mTestActionButton;
            }
        }
        
        public OutputsTitleText OutputsTitleText
        {
            get
            {
                if ((this.mOutputsTitleText == null))
                {
                    this.mOutputsTitleText = new OutputsTitleText(this);
                }
                return this.mOutputsTitleText;
            }
        }
        
        public WpfText NoneText
        {
            get
            {
                if ((this.mNoneText == null))
                {
                    this.mNoneText = new WpfText(this);
                    #region Search Criteria
                    this.mNoneText.SearchProperties[WpfText.PropertyNames.Name] = "None";
                    this.mNoneText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNoneText;
            }
        }
        
        public WpfText Step4Text
        {
            get
            {
                if ((this.mStep4Text == null))
                {
                    this.mStep4Text = new WpfText(this);
                    #region Search Criteria
                    this.mStep4Text.SearchProperties[WpfText.PropertyNames.Name] = "4";
                    this.mStep4Text.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mStep4Text;
            }
        }
        
        public WpfText DefaultsandMappingText
        {
            get
            {
                if ((this.mDefaultsandMappingText == null))
                {
                    this.mDefaultsandMappingText = new WpfText(this);
                    #region Search Criteria
                    this.mDefaultsandMappingText.SearchProperties[WpfText.PropertyNames.Name] = "Defaults and Mapping";
                    this.mDefaultsandMappingText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDefaultsandMappingText;
            }
        }
        
        public WpfCustom MappingsView
        {
            get
            {
                if ((this.mMappingsView == null))
                {
                    this.mMappingsView = new WpfCustom(this);
                    #region Search Criteria
                    this.mMappingsView.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MappingsView";
                    this.mMappingsView.SearchProperties[WpfControl.PropertyNames.AutomationId] = "MappingsView";
                    this.mMappingsView.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mMappingsView;
            }
        }
        
        public WpfText ErrorText
        {
            get
            {
                if ((this.mErrorText == null))
                {
                    this.mErrorText = new WpfText(this);
                    #region Search Criteria
                    this.mErrorText.SearchProperties[WpfText.PropertyNames.AutomationId] = "ErrorTextBlock";
                    this.mErrorText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mErrorText;
            }
        }
        
        public WpfTable OutputsTable
        {
            get
            {
                if ((this.mOutputsTable == null))
                {
                    this.mOutputsTable = new WpfTable(this);
                    #region Search Criteria
                    this.mOutputsTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "OutputsDataGrid";
                    this.mOutputsTable.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mOutputsTable;
            }
        }
        #endregion
        
        #region Fields
        private SourcesComboBox mSourcesComboBox;
        
        private NewDBConnectorWizard mNewDBConnectorWizard;
        
        private WpfText mStep1Text;
        
        private WpfText mTitleText;
        
        private WpfButton mEditButton;
        
        private WpfText mOrText;
        
        private WpfButton mNewButton;
        
        private WpfText mStep2Text;
        
        private WpfText mSelectanActionText;
        
        private WpfCustom mActionsComboBox;
        
        private RefreshButton mRefreshButton;
        
        private WpfText mStep3Text;
        
        private WpfText mTestActionTitleText;
        
        private WpfText mInputsText;
        
        private WpfList mInputsList;
        
        private TestActionButton mTestActionButton;
        
        private OutputsTitleText mOutputsTitleText;
        
        private WpfText mNoneText;
        
        private WpfText mStep4Text;
        
        private WpfText mDefaultsandMappingText;
        
        private WpfCustom mMappingsView;
        
        private WpfText mErrorText;
        
        private WpfTable mOutputsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SourcesComboBox : WpfCustom
    {
        
        public SourcesComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SourcesComboBox";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfButton SourceComboBoxDropdownButton
        {
            get
            {
                if ((this.mSourceComboBoxDropdownButton == null))
                {
                    this.mSourceComboBoxDropdownButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSourceComboBoxDropdownButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mSourceComboBoxDropdownButton.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSourceComboBoxDropdownButton;
            }
        }
        
        public WpfEdit SourceTextBox
        {
            get
            {
                if ((this.mSourceTextBox == null))
                {
                    this.mSourceTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mSourceTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TextBoxPresenter";
                    this.mSourceTextBox.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSourceTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mSourceComboBoxDropdownButton;
        
        private WpfEdit mSourceTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class NewDBConnectorWizard : WpfCustom
    {
        
        public NewDBConnectorWizard(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ManageDatabaseServiceControl";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public EditButton EditButton
        {
            get
            {
                if ((this.mEditButton == null))
                {
                    this.mEditButton = new EditButton(this);
                }
                return this.mEditButton;
            }
        }
        
        public NewButton NewButton
        {
            get
            {
                if ((this.mNewButton == null))
                {
                    this.mNewButton = new NewButton(this);
                }
                return this.mNewButton;
            }
        }
        
        public ActionsComboBox ActionsComboBox
        {
            get
            {
                if ((this.mActionsComboBox == null))
                {
                    this.mActionsComboBox = new ActionsComboBox(this);
                }
                return this.mActionsComboBox;
            }
        }
        
        public MappingsView MappingsView
        {
            get
            {
                if ((this.mMappingsView == null))
                {
                    this.mMappingsView = new MappingsView(this);
                }
                return this.mMappingsView;
            }
        }
        #endregion
        
        #region Fields
        private EditButton mEditButton;
        
        private NewButton mNewButton;
        
        private ActionsComboBox mActionsComboBox;
        
        private MappingsView mMappingsView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class EditButton : WpfButton
    {
        
        public EditButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = " ... ";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfText EditButtonText
        {
            get
            {
                if ((this.mEditButtonText == null))
                {
                    this.mEditButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mEditButtonText.SearchProperties[WpfText.PropertyNames.Name] = " ... ";
                    this.mEditButtonText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mEditButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mEditButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class NewButton : WpfButton
    {
        
        public NewButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "New";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfText UINewText
        {
            get
            {
                if ((this.mUINewText == null))
                {
                    this.mUINewText = new WpfText(this);
                    #region Search Criteria
                    this.mUINewText.SearchProperties[WpfText.PropertyNames.Name] = "New";
                    this.mUINewText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mUINewText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUINewText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ActionsComboBox : WpfCustom
    {
        
        public ActionsComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActionsComboBox";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfButton UIToggleButtonButton
        {
            get
            {
                if ((this.mUIToggleButtonButton == null))
                {
                    this.mUIToggleButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIToggleButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mUIToggleButtonButton.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mUIToggleButtonButton;
            }
        }
        
        public WpfEdit UITextBoxPresenterEdit
        {
            get
            {
                if ((this.mUITextBoxPresenterEdit == null))
                {
                    this.mUITextBoxPresenterEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBoxPresenterEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TextBoxPresenter";
                    this.mUITextBoxPresenterEdit.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mUITextBoxPresenterEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIToggleButtonButton;
        
        private WpfEdit mUITextBoxPresenterEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class MappingsView : WpfCustom
    {
        
        public MappingsView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MappingsView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "MappingsView";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfPane MappingsPane
        {
            get
            {
                if ((this.mMappingsPane == null))
                {
                    this.mMappingsPane = new WpfPane(this);
                    #region Search Criteria
                    this.mMappingsPane.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
                    this.mMappingsPane.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mMappingsPane;
            }
        }
        
        public NoneText NoneText
        {
            get
            {
                if ((this.mNoneText == null))
                {
                    this.mNoneText = new NoneText(this);
                }
                return this.mNoneText;
            }
        }
        
        public WpfTable OutputsMappingsTable
        {
            get
            {
                if ((this.mOutputsMappingsTable == null))
                {
                    this.mOutputsMappingsTable = new WpfTable(this);
                    #region Search Criteria
                    this.mOutputsMappingsTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "OutputsMappingDataGrid";
                    this.mOutputsMappingsTable.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mOutputsMappingsTable;
            }
        }
        
        public RecordsetNameText RecordsetNameText
        {
            get
            {
                if ((this.mRecordsetNameText == null))
                {
                    this.mRecordsetNameText = new RecordsetNameText(this);
                }
                return this.mRecordsetNameText;
            }
        }
        
        public WpfText NoneText1
        {
            get
            {
                if ((this.mNoneText1 == null))
                {
                    this.mNoneText1 = new WpfText(this);
                    #region Search Criteria
                    this.mNoneText1.SearchProperties[WpfText.PropertyNames.Name] = "None";
                    this.mNoneText1.SearchProperties[WpfText.PropertyNames.Instance] = "2";
                    this.mNoneText1.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNoneText1;
            }
        }
        #endregion
        
        #region Fields
        private WpfPane mMappingsPane;
        
        private NoneText mNoneText;
        
        private WpfTable mOutputsMappingsTable;
        
        private RecordsetNameText mRecordsetNameText;
        
        private WpfText mNoneText1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class NoneText : WpfText
    {
        
        public NoneText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "None";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfPane NonePane
        {
            get
            {
                if ((this.mNonePane == null))
                {
                    this.mNonePane = new WpfPane(this);
                    #region Search Criteria
                    this.mNonePane.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
                    this.mNonePane.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mNonePane.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNonePane;
            }
        }
        #endregion
        
        #region Fields
        private WpfPane mNonePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetNameText : WpfText
    {
        
        public RecordsetNameText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Recordset Name";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfEdit RecordsetNameTextBox
        {
            get
            {
                if ((this.mRecordsetNameTextBox == null))
                {
                    this.mRecordsetNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordsetNameTextBox.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mRecordsetNameTextBox.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mRecordsetNameTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mRecordsetNameTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RefreshButton : WpfButton
    {
        
        public RefreshButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "RefreshButton";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfCustom CircularProgressBar
        {
            get
            {
                if ((this.mCircularProgressBar == null))
                {
                    this.mCircularProgressBar = new WpfCustom(this);
                    #region Search Criteria
                    this.mCircularProgressBar.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mCircularProgressBar.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mCircularProgressBar.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCircularProgressBar;
            }
        }
        
        public WpfText RefreshingText
        {
            get
            {
                if ((this.mRefreshingText == null))
                {
                    this.mRefreshingText = new WpfText(this);
                    #region Search Criteria
                    this.mRefreshingText.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mRefreshingText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mRefreshingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mCircularProgressBar;
        
        private WpfText mRefreshingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class TestActionButton : WpfButton
    {
        
        public TestActionButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestActionButton";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfCustom CircularProgressBar
        {
            get
            {
                if ((this.mCircularProgressBar == null))
                {
                    this.mCircularProgressBar = new WpfCustom(this);
                    #region Search Criteria
                    this.mCircularProgressBar.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mCircularProgressBar.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mCircularProgressBar.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCircularProgressBar;
            }
        }
        
        public WpfText TestText
        {
            get
            {
                if ((this.mTestText == null))
                {
                    this.mTestText = new WpfText(this);
                    #region Search Criteria
                    this.mTestText.SearchProperties[WpfText.PropertyNames.Name] = "Test";
                    this.mTestText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mTestText;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mCircularProgressBar;
        
        private WpfText mTestText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class OutputsTitleText : WpfText
    {
        
        public OutputsTitleText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Outputs";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfPane OutputsScrollViewer
        {
            get
            {
                if ((this.mOutputsScrollViewer == null))
                {
                    this.mOutputsScrollViewer = new WpfPane(this);
                    #region Search Criteria
                    this.mOutputsScrollViewer.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
                    this.mOutputsScrollViewer.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mOutputsScrollViewer.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mOutputsScrollViewer;
            }
        }
        #endregion
        
        #region Fields
        private WpfPane mOutputsScrollViewer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class NewPluginConnectorTab : WpfTabPage
    {
        
        public NewPluginConnectorTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.IPluginService]";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage UnknownItemImage
        {
            get
            {
                if ((this.mUnknownItemImage == null))
                {
                    this.mUnknownItemImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUnknownItemImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mUnknownItemImage;
            }
        }
        
        public WpfImage NewPluginConnectorTabIcon
        {
            get
            {
                if ((this.mNewPluginConnectorTabIcon == null))
                {
                    this.mNewPluginConnectorTabIcon = new WpfImage(this);
                    #region Search Criteria
                    this.mNewPluginConnectorTabIcon.SearchProperties[WpfImage.PropertyNames.AutomationId] = "New Plugin Connector *";
                    this.mNewPluginConnectorTabIcon.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNewPluginConnectorTabIcon;
            }
        }
        
        public WpfText NewPluginConnectorTabText
        {
            get
            {
                if ((this.mNewPluginConnectorTabText == null))
                {
                    this.mNewPluginConnectorTabText = new WpfText(this);
                    #region Search Criteria
                    this.mNewPluginConnectorTabText.SearchProperties[WpfText.PropertyNames.Name] = "New Plugin Connector *";
                    this.mNewPluginConnectorTabText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNewPluginConnectorTabText;
            }
        }
        
        public WpfImage NoAuthIcon
        {
            get
            {
                if ((this.mNoAuthIcon == null))
                {
                    this.mNoAuthIcon = new WpfImage(this);
                    #region Search Criteria
                    this.mNoAuthIcon.SearchProperties[WpfImage.PropertyNames.HelpText] = "You are not authorized to edit this resource";
                    this.mNoAuthIcon.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNoAuthIcon;
            }
        }
        
        public WpfImage NewPluginConnectorTabIcon1
        {
            get
            {
                if ((this.mNewPluginConnectorTabIcon1 == null))
                {
                    this.mNewPluginConnectorTabIcon1 = new WpfImage(this);
                    #region Search Criteria
                    this.mNewPluginConnectorTabIcon1.SearchProperties[WpfImage.PropertyNames.AutomationId] = "New Plugin Connector *";
                    this.mNewPluginConnectorTabIcon1.SearchProperties[WpfImage.PropertyNames.Instance] = "2";
                    this.mNewPluginConnectorTabIcon1.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNewPluginConnectorTabIcon1;
            }
        }
        
        public WpfText NewPluginConnectorTabText1
        {
            get
            {
                if ((this.mNewPluginConnectorTabText1 == null))
                {
                    this.mNewPluginConnectorTabText1 = new WpfText(this);
                    #region Search Criteria
                    this.mNewPluginConnectorTabText1.SearchProperties[WpfText.PropertyNames.Name] = "New Plugin Connector *";
                    this.mNewPluginConnectorTabText1.SearchProperties[WpfText.PropertyNames.Instance] = "2";
                    this.mNewPluginConnectorTabText1.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNewPluginConnectorTabText1;
            }
        }
        
        public WpfImage NoAuthIcon1
        {
            get
            {
                if ((this.mNoAuthIcon1 == null))
                {
                    this.mNoAuthIcon1 = new WpfImage(this);
                    #region Search Criteria
                    this.mNoAuthIcon1.SearchProperties[WpfImage.PropertyNames.HelpText] = "You are not authorized to edit this resource";
                    this.mNoAuthIcon1.SearchProperties[WpfImage.PropertyNames.Instance] = "2";
                    this.mNoAuthIcon1.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNoAuthIcon1;
            }
        }
        
        public WpfButton NewPluginConnectorTabCloseButton
        {
            get
            {
                if ((this.mNewPluginConnectorTabCloseButton == null))
                {
                    this.mNewPluginConnectorTabCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewPluginConnectorTabCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mNewPluginConnectorTabCloseButton.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNewPluginConnectorTabCloseButton;
            }
        }
        
        public WorkSurfaceContext4 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext4(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        
        public WpfScrollBar VerticalScrollBar
        {
            get
            {
                if ((this.mVerticalScrollBar == null))
                {
                    this.mVerticalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mVerticalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "VerticalScrollBar";
                    this.mVerticalScrollBar.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mVerticalScrollBar;
            }
        }
        
        public WpfScrollBar HorizontalScrollBar
        {
            get
            {
                if ((this.mHorizontalScrollBar == null))
                {
                    this.mHorizontalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mHorizontalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "HorizontalScrollBar";
                    this.mHorizontalScrollBar.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mHorizontalScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUnknownItemImage;
        
        private WpfImage mNewPluginConnectorTabIcon;
        
        private WpfText mNewPluginConnectorTabText;
        
        private WpfImage mNoAuthIcon;
        
        private WpfImage mNewPluginConnectorTabIcon1;
        
        private WpfText mNewPluginConnectorTabText1;
        
        private WpfImage mNoAuthIcon1;
        
        private WpfButton mNewPluginConnectorTabCloseButton;
        
        private WorkSurfaceContext4 mWorkSurfaceContext;
        
        private WpfScrollBar mVerticalScrollBar;
        
        private WpfScrollBar mHorizontalScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class WorkSurfaceContext4 : WpfCustom
    {
        
        public WorkSurfaceContext4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public NewPluginConnectorWizard NewPluginConnectorWizard
        {
            get
            {
                if ((this.mNewPluginConnectorWizard == null))
                {
                    this.mNewPluginConnectorWizard = new NewPluginConnectorWizard(this);
                }
                return this.mNewPluginConnectorWizard;
            }
        }
        
        public WpfCustom NewPluginConnectorWizard1
        {
            get
            {
                if ((this.mNewPluginConnectorWizard1 == null))
                {
                    this.mNewPluginConnectorWizard1 = new WpfCustom(this);
                    #region Search Criteria
                    this.mNewPluginConnectorWizard1.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ManagePluginServiceControl";
                    this.mNewPluginConnectorWizard1.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNewPluginConnectorWizard1;
            }
        }
        
        public WpfText SelectaNamespaceTitleText
        {
            get
            {
                if ((this.mSelectaNamespaceTitleText == null))
                {
                    this.mSelectaNamespaceTitleText = new WpfText(this);
                    #region Search Criteria
                    this.mSelectaNamespaceTitleText.SearchProperties[WpfText.PropertyNames.Name] = "Select a Namespace";
                    this.mSelectaNamespaceTitleText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSelectaNamespaceTitleText;
            }
        }
        
        public WpfCustom NamespacesComboBox
        {
            get
            {
                if ((this.mNamespacesComboBox == null))
                {
                    this.mNamespacesComboBox = new WpfCustom(this);
                    #region Search Criteria
                    this.mNamespacesComboBox.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
                    this.mNamespacesComboBox.SearchProperties[WpfControl.PropertyNames.AutomationId] = "NamespaceComboBox";
                    this.mNamespacesComboBox.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNamespacesComboBox;
            }
        }
        
        public WpfText Step3Title
        {
            get
            {
                if ((this.mStep3Title == null))
                {
                    this.mStep3Title = new WpfText(this);
                    #region Search Criteria
                    this.mStep3Title.SearchProperties[WpfText.PropertyNames.Name] = "3";
                    this.mStep3Title.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mStep3Title;
            }
        }
        
        public WpfText SelectanActionTitle
        {
            get
            {
                if ((this.mSelectanActionTitle == null))
                {
                    this.mSelectanActionTitle = new WpfText(this);
                    #region Search Criteria
                    this.mSelectanActionTitle.SearchProperties[WpfText.PropertyNames.Name] = "Select an Action";
                    this.mSelectanActionTitle.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSelectanActionTitle;
            }
        }
        
        public WpfCustom ActionsComboBox
        {
            get
            {
                if ((this.mActionsComboBox == null))
                {
                    this.mActionsComboBox = new WpfCustom(this);
                    #region Search Criteria
                    this.mActionsComboBox.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
                    this.mActionsComboBox.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActionsComboBox";
                    this.mActionsComboBox.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mActionsComboBox;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "RefreshButton";
                    this.mRefreshButton.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public WpfText Step4Title
        {
            get
            {
                if ((this.mStep4Title == null))
                {
                    this.mStep4Title = new WpfText(this);
                    #region Search Criteria
                    this.mStep4Title.SearchProperties[WpfText.PropertyNames.Name] = "4";
                    this.mStep4Title.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mStep4Title;
            }
        }
        
        public WpfText TestConnectorTitleText
        {
            get
            {
                if ((this.mTestConnectorTitleText == null))
                {
                    this.mTestConnectorTitleText = new WpfText(this);
                    #region Search Criteria
                    this.mTestConnectorTitleText.SearchProperties[WpfText.PropertyNames.Name] = "Test Connector and Calculate Outputs";
                    this.mTestConnectorTitleText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mTestConnectorTitleText;
            }
        }
        
        public WpfButton TestButton
        {
            get
            {
                if ((this.mTestButton == null))
                {
                    this.mTestButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestButton";
                    this.mTestButton.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mTestButton;
            }
        }
        
        public WpfTable InputTable
        {
            get
            {
                if ((this.mInputTable == null))
                {
                    this.mInputTable = new WpfTable(this);
                    #region Search Criteria
                    this.mInputTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "InputGrid";
                    this.mInputTable.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mInputTable;
            }
        }
        
        public TestResultsText TestResultsText
        {
            get
            {
                if ((this.mTestResultsText == null))
                {
                    this.mTestResultsText = new TestResultsText(this);
                }
                return this.mTestResultsText;
            }
        }
        
        public WpfText CalculatedOutputsText
        {
            get
            {
                if ((this.mCalculatedOutputsText == null))
                {
                    this.mCalculatedOutputsText = new WpfText(this);
                    #region Search Criteria
                    this.mCalculatedOutputsText.SearchProperties[WpfText.PropertyNames.Name] = @"[{""$type"":""Dev2.Runtime.ServiceModel.Data.Recordset, Dev2.Runtime.Services"",""Name"":"""",""HasErrors"":false,""ErrorMessage"":null,""Fields"":[{""$type"":""Dev2.Runtime.ServiceModel.Data.RecordsetField, Dev2.Runtime.Services"",""Name"":""PrimitiveReturnValue"",""Alias"":""PrimitiveReturnValue"",""RecordsetAlias"":"""",""Path"":{""$type"":""Unlimited.Framework.Converters.Graph.String.Xml.XmlPath, Dev2.Core"",""ActualPath"":""PrimitiveReturnValue"",""DisplayPath"":""PrimitiveReturnValue"",""SampleData"":""value"",""OutputExpression"":""""}}],""Records"":[{""$type"":""Dev2.Runtime.ServiceModel.Data.RecordsetRecord, Dev2.Runtime.Services"",""Label"":""(1)"",""Name"":"""",""Count"":1,""Cells"":[{""$type"":""Dev2.Runtime.ServiceModel.Data.RecordsetCell, Dev2.Runtime.Services"",""Name"":""(1).PrimitiveReturnValue"",""Label"":""PrimitiveReturnValue"",""Value"":""value""}]}]}]";
                    this.mCalculatedOutputsText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCalculatedOutputsText;
            }
        }
        
        public WpfText Step5Title
        {
            get
            {
                if ((this.mStep5Title == null))
                {
                    this.mStep5Title = new WpfText(this);
                    #region Search Criteria
                    this.mStep5Title.SearchProperties[WpfText.PropertyNames.Name] = "5";
                    this.mStep5Title.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mStep5Title;
            }
        }
        
        public WpfText DefaultsAndMappingText
        {
            get
            {
                if ((this.mDefaultsAndMappingText == null))
                {
                    this.mDefaultsAndMappingText = new WpfText(this);
                    #region Search Criteria
                    this.mDefaultsAndMappingText.SearchProperties[WpfText.PropertyNames.Name] = "Defaults and Mapping";
                    this.mDefaultsAndMappingText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDefaultsAndMappingText;
            }
        }
        
        public WpfCustom MappingsView
        {
            get
            {
                if ((this.mMappingsView == null))
                {
                    this.mMappingsView = new WpfCustom(this);
                    #region Search Criteria
                    this.mMappingsView.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MappingsView";
                    this.mMappingsView.SearchProperties[WpfControl.PropertyNames.AutomationId] = "MappingsView";
                    this.mMappingsView.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mMappingsView;
            }
        }
        
        public WpfText ErrorText
        {
            get
            {
                if ((this.mErrorText == null))
                {
                    this.mErrorText = new WpfText(this);
                    #region Search Criteria
                    this.mErrorText.SearchProperties[WpfText.PropertyNames.AutomationId] = "ErrorTextBlock";
                    this.mErrorText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mErrorText;
            }
        }
        
        public WpfText Step2Title
        {
            get
            {
                if ((this.mStep2Title == null))
                {
                    this.mStep2Title = new WpfText(this);
                    #region Search Criteria
                    this.mStep2Title.SearchProperties[WpfText.PropertyNames.Name] = "2";
                    this.mStep2Title.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mStep2Title;
            }
        }
        
        public WpfButton NewButton
        {
            get
            {
                if ((this.mNewButton == null))
                {
                    this.mNewButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "NewButton";
                    this.mNewButton.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNewButton;
            }
        }
        
        public WpfText ORText
        {
            get
            {
                if ((this.mORText == null))
                {
                    this.mORText = new WpfText(this);
                    #region Search Criteria
                    this.mORText.SearchProperties[WpfText.PropertyNames.Name] = "or";
                    this.mORText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mORText;
            }
        }
        
        public WpfButton EditButton
        {
            get
            {
                if ((this.mEditButton == null))
                {
                    this.mEditButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "EditButton";
                    this.mEditButton.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mEditButton;
            }
        }
        
        public WpfCustom SourcesComboBox
        {
            get
            {
                if ((this.mSourcesComboBox == null))
                {
                    this.mSourcesComboBox = new WpfCustom(this);
                    #region Search Criteria
                    this.mSourcesComboBox.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
                    this.mSourcesComboBox.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SourcesComboBox";
                    this.mSourcesComboBox.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSourcesComboBox;
            }
        }
        
        public WpfText SelectSourceTitleText
        {
            get
            {
                if ((this.mSelectSourceTitleText == null))
                {
                    this.mSelectSourceTitleText = new WpfText(this);
                    #region Search Criteria
                    this.mSelectSourceTitleText.SearchProperties[WpfText.PropertyNames.Name] = "Select a Source";
                    this.mSelectSourceTitleText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSelectSourceTitleText;
            }
        }
        
        public WpfText Step1Title
        {
            get
            {
                if ((this.mStep1Title == null))
                {
                    this.mStep1Title = new WpfText(this);
                    #region Search Criteria
                    this.mStep1Title.SearchProperties[WpfText.PropertyNames.Name] = "1";
                    this.mStep1Title.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mStep1Title;
            }
        }
        
        public WpfPane NewPluginConnectorPane
        {
            get
            {
                if ((this.mNewPluginConnectorPane == null))
                {
                    this.mNewPluginConnectorPane = new WpfPane(this);
                    #region Search Criteria
                    this.mNewPluginConnectorPane.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
                    this.mNewPluginConnectorPane.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNewPluginConnectorPane;
            }
        }
        #endregion
        
        #region Fields
        private NewPluginConnectorWizard mNewPluginConnectorWizard;
        
        private WpfCustom mNewPluginConnectorWizard1;
        
        private WpfText mSelectaNamespaceTitleText;
        
        private WpfCustom mNamespacesComboBox;
        
        private WpfText mStep3Title;
        
        private WpfText mSelectanActionTitle;
        
        private WpfCustom mActionsComboBox;
        
        private WpfButton mRefreshButton;
        
        private WpfText mStep4Title;
        
        private WpfText mTestConnectorTitleText;
        
        private WpfButton mTestButton;
        
        private WpfTable mInputTable;
        
        private TestResultsText mTestResultsText;
        
        private WpfText mCalculatedOutputsText;
        
        private WpfText mStep5Title;
        
        private WpfText mDefaultsAndMappingText;
        
        private WpfCustom mMappingsView;
        
        private WpfText mErrorText;
        
        private WpfText mStep2Title;
        
        private WpfButton mNewButton;
        
        private WpfText mORText;
        
        private WpfButton mEditButton;
        
        private WpfCustom mSourcesComboBox;
        
        private WpfText mSelectSourceTitleText;
        
        private WpfText mStep1Title;
        
        private WpfPane mNewPluginConnectorPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class NewPluginConnectorWizard : WpfCustom
    {
        
        public NewPluginConnectorWizard(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ManagePluginServiceControl";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public SourcesComboBox1 SourcesComboBox
        {
            get
            {
                if ((this.mSourcesComboBox == null))
                {
                    this.mSourcesComboBox = new SourcesComboBox1(this);
                }
                return this.mSourcesComboBox;
            }
        }
        
        public SourcesEditButton SourcesEditButton
        {
            get
            {
                if ((this.mSourcesEditButton == null))
                {
                    this.mSourcesEditButton = new SourcesEditButton(this);
                }
                return this.mSourcesEditButton;
            }
        }
        
        public NewButton1 NewButton
        {
            get
            {
                if ((this.mNewButton == null))
                {
                    this.mNewButton = new NewButton1(this);
                }
                return this.mNewButton;
            }
        }
        
        public ActionsComboBox1 ActionsComboBox
        {
            get
            {
                if ((this.mActionsComboBox == null))
                {
                    this.mActionsComboBox = new ActionsComboBox1(this);
                }
                return this.mActionsComboBox;
            }
        }
        
        public RefreshButton1 RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new RefreshButton1(this);
                }
                return this.mRefreshButton;
            }
        }
        
        public TestActionButton1 TestActionButton
        {
            get
            {
                if ((this.mTestActionButton == null))
                {
                    this.mTestActionButton = new TestActionButton1(this);
                }
                return this.mTestActionButton;
            }
        }
        
        public InputTable InputTable
        {
            get
            {
                if ((this.mInputTable == null))
                {
                    this.mInputTable = new InputTable(this);
                }
                return this.mInputTable;
            }
        }
        
        public MappingsView1 MappingsView
        {
            get
            {
                if ((this.mMappingsView == null))
                {
                    this.mMappingsView = new MappingsView1(this);
                }
                return this.mMappingsView;
            }
        }
        #endregion
        
        #region Fields
        private SourcesComboBox1 mSourcesComboBox;
        
        private SourcesEditButton mSourcesEditButton;
        
        private NewButton1 mNewButton;
        
        private ActionsComboBox1 mActionsComboBox;
        
        private RefreshButton1 mRefreshButton;
        
        private TestActionButton1 mTestActionButton;
        
        private InputTable mInputTable;
        
        private MappingsView1 mMappingsView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SourcesComboBox1 : WpfCustom
    {
        
        public SourcesComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SourcesComboBox";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfButton SourcesComboBoxDropDownButton
        {
            get
            {
                if ((this.mSourcesComboBoxDropDownButton == null))
                {
                    this.mSourcesComboBoxDropDownButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSourcesComboBoxDropDownButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mSourcesComboBoxDropDownButton.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSourcesComboBoxDropDownButton;
            }
        }
        
        public WpfEdit SourcesTextBox
        {
            get
            {
                if ((this.mSourcesTextBox == null))
                {
                    this.mSourcesTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mSourcesTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TextBoxPresenter";
                    this.mSourcesTextBox.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSourcesTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mSourcesComboBoxDropDownButton;
        
        private WpfEdit mSourcesTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SourcesEditButton : WpfButton
    {
        
        public SourcesEditButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "EditButton";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfText SourcesEditButtonText
        {
            get
            {
                if ((this.mSourcesEditButtonText == null))
                {
                    this.mSourcesEditButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mSourcesEditButtonText.SearchProperties[WpfText.PropertyNames.Name] = " ... ";
                    this.mSourcesEditButtonText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSourcesEditButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mSourcesEditButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class NewButton1 : WpfButton
    {
        
        public NewButton1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "NewButton";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfText NewButtonText
        {
            get
            {
                if ((this.mNewButtonText == null))
                {
                    this.mNewButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mNewButtonText.SearchProperties[WpfText.PropertyNames.Name] = "New";
                    this.mNewButtonText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNewButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mNewButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ActionsComboBox1 : WpfCustom
    {
        
        public ActionsComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActionsComboBox";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfButton ActionsComboBoxDropDownButton
        {
            get
            {
                if ((this.mActionsComboBoxDropDownButton == null))
                {
                    this.mActionsComboBoxDropDownButton = new WpfButton(this);
                    #region Search Criteria
                    this.mActionsComboBoxDropDownButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mActionsComboBoxDropDownButton.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mActionsComboBoxDropDownButton;
            }
        }
        
        public WpfEdit ActionsTextBox
        {
            get
            {
                if ((this.mActionsTextBox == null))
                {
                    this.mActionsTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mActionsTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TextBoxPresenter";
                    this.mActionsTextBox.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mActionsTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mActionsComboBoxDropDownButton;
        
        private WpfEdit mActionsTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RefreshButton1 : WpfButton
    {
        
        public RefreshButton1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "RefreshButton";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfText RefreshingText
        {
            get
            {
                if ((this.mRefreshingText == null))
                {
                    this.mRefreshingText = new WpfText(this);
                    #region Search Criteria
                    this.mRefreshingText.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mRefreshingText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mRefreshingText;
            }
        }
        
        public WpfCustom CircularProgressBar
        {
            get
            {
                if ((this.mCircularProgressBar == null))
                {
                    this.mCircularProgressBar = new WpfCustom(this);
                    #region Search Criteria
                    this.mCircularProgressBar.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mCircularProgressBar.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mCircularProgressBar.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCircularProgressBar;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mRefreshingText;
        
        private WpfCustom mCircularProgressBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class TestActionButton1 : WpfButton
    {
        
        public TestActionButton1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestButton";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfText TestActionButtonText
        {
            get
            {
                if ((this.mTestActionButtonText == null))
                {
                    this.mTestActionButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mTestActionButtonText.SearchProperties[WpfText.PropertyNames.Name] = "Test";
                    this.mTestActionButtonText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mTestActionButtonText;
            }
        }
        
        public WpfCustom CircularProgressBar
        {
            get
            {
                if ((this.mCircularProgressBar == null))
                {
                    this.mCircularProgressBar = new WpfCustom(this);
                    #region Search Criteria
                    this.mCircularProgressBar.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mCircularProgressBar.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mCircularProgressBar.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCircularProgressBar;
            }
        }
        
        public WpfPane ScrollViewer
        {
            get
            {
                if ((this.mScrollViewer == null))
                {
                    this.mScrollViewer = new WpfPane(this);
                    #region Search Criteria
                    this.mScrollViewer.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
                    this.mScrollViewer.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mScrollViewer.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mScrollViewer;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTestActionButtonText;
        
        private WpfCustom mCircularProgressBar;
        
        private WpfPane mScrollViewer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class InputTable : WpfTable
    {
        
        public InputTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "InputGrid";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfPane InputPane
        {
            get
            {
                if ((this.mInputPane == null))
                {
                    this.mInputPane = new WpfPane(this);
                    #region Search Criteria
                    this.mInputPane.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
                    this.mInputPane.SearchProperties[WpfPane.PropertyNames.Name] = "0";
                    this.mInputPane.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mInputPane;
            }
        }
        
        public DataCell DataCell
        {
            get
            {
                if ((this.mDataCell == null))
                {
                    this.mDataCell = new DataCell(this);
                }
                return this.mDataCell;
            }
        }
        
        public ValueCell ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfPane mInputPane;
        
        private DataCell mDataCell;
        
        private ValueCell mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DataCell : WpfCell
    {
        
        public DataCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "data";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfText DataText
        {
            get
            {
                if ((this.mDataText == null))
                {
                    this.mDataText = new WpfText(this);
                    #region Search Criteria
                    this.mDataText.SearchProperties[WpfText.PropertyNames.Name] = "data";
                    this.mDataText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDataText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mDataText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ValueCell : WpfCell
    {
        
        public ValueCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "value";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfEdit ValueTextBox
        {
            get
            {
                if ((this.mValueTextBox == null))
                {
                    this.mValueTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mValueTextBox.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mValueTextBox;
            }
        }
        
        public WpfScrollBar VerticalScrollBar
        {
            get
            {
                if ((this.mVerticalScrollBar == null))
                {
                    this.mVerticalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mVerticalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "VerticalScrollBar";
                    this.mVerticalScrollBar.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mVerticalScrollBar;
            }
        }
        
        public WpfScrollBar HorizontalScrollBar
        {
            get
            {
                if ((this.mHorizontalScrollBar == null))
                {
                    this.mHorizontalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mHorizontalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "HorizontalScrollBar";
                    this.mHorizontalScrollBar.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mHorizontalScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mValueTextBox;
        
        private WpfScrollBar mVerticalScrollBar;
        
        private WpfScrollBar mHorizontalScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class MappingsView1 : WpfCustom
    {
        
        public MappingsView1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MappingsView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "MappingsView";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfPane InputMappingsPane
        {
            get
            {
                if ((this.mInputMappingsPane == null))
                {
                    this.mInputMappingsPane = new WpfPane(this);
                    #region Search Criteria
                    this.mInputMappingsPane.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
                    this.mInputMappingsPane.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mInputMappingsPane;
            }
        }
        
        public InputMappingTable InputMappingTable
        {
            get
            {
                if ((this.mInputMappingTable == null))
                {
                    this.mInputMappingTable = new InputMappingTable(this);
                }
                return this.mInputMappingTable;
            }
        }
        
        public WpfText DefaultValueText
        {
            get
            {
                if ((this.mDefaultValueText == null))
                {
                    this.mDefaultValueText = new WpfText(this);
                    #region Search Criteria
                    this.mDefaultValueText.SearchProperties[WpfText.PropertyNames.Name] = "Default Value";
                    this.mDefaultValueText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDefaultValueText;
            }
        }
        
        public NoneText1 NoneText
        {
            get
            {
                if ((this.mNoneText == null))
                {
                    this.mNoneText = new NoneText1(this);
                }
                return this.mNoneText;
            }
        }
        
        public OutputsMappingTable OutputsMappingTable
        {
            get
            {
                if ((this.mOutputsMappingTable == null))
                {
                    this.mOutputsMappingTable = new OutputsMappingTable(this);
                }
                return this.mOutputsMappingTable;
            }
        }
        
        public WpfText NoneText1
        {
            get
            {
                if ((this.mNoneText1 == null))
                {
                    this.mNoneText1 = new WpfText(this);
                    #region Search Criteria
                    this.mNoneText1.SearchProperties[WpfText.PropertyNames.Name] = "None";
                    this.mNoneText1.SearchProperties[WpfText.PropertyNames.Instance] = "2";
                    this.mNoneText1.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNoneText1;
            }
        }
        
        public RecordsetNameText1 RecordsetNameText
        {
            get
            {
                if ((this.mRecordsetNameText == null))
                {
                    this.mRecordsetNameText = new RecordsetNameText1(this);
                }
                return this.mRecordsetNameText;
            }
        }
        #endregion
        
        #region Fields
        private WpfPane mInputMappingsPane;
        
        private InputMappingTable mInputMappingTable;
        
        private WpfText mDefaultValueText;
        
        private NoneText1 mNoneText;
        
        private OutputsMappingTable mOutputsMappingTable;
        
        private WpfText mNoneText1;
        
        private RecordsetNameText1 mRecordsetNameText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class InputMappingTable : WpfTable
    {
        
        public InputMappingTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "InputsMappingDataGrid";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfPane InputMappingsPane
        {
            get
            {
                if ((this.mInputMappingsPane == null))
                {
                    this.mInputMappingsPane = new WpfPane(this);
                    #region Search Criteria
                    this.mInputMappingsPane.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
                    this.mInputMappingsPane.SearchProperties[WpfPane.PropertyNames.Name] = "0";
                    this.mInputMappingsPane.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mInputMappingsPane;
            }
        }
        
        public DataCell1 DataCell
        {
            get
            {
                if ((this.mDataCell == null))
                {
                    this.mDataCell = new DataCell1(this);
                }
                return this.mDataCell;
            }
        }
        
        public DefaultValueCell DefaultValueCell
        {
            get
            {
                if ((this.mDefaultValueCell == null))
                {
                    this.mDefaultValueCell = new DefaultValueCell(this);
                }
                return this.mDefaultValueCell;
            }
        }
        
        public RequiredCell RequiredCell
        {
            get
            {
                if ((this.mRequiredCell == null))
                {
                    this.mRequiredCell = new RequiredCell(this);
                }
                return this.mRequiredCell;
            }
        }
        
        public EmptyIsNullCell EmptyIsNullCell
        {
            get
            {
                if ((this.mEmptyIsNullCell == null))
                {
                    this.mEmptyIsNullCell = new EmptyIsNullCell(this);
                }
                return this.mEmptyIsNullCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfPane mInputMappingsPane;
        
        private DataCell1 mDataCell;
        
        private DefaultValueCell mDefaultValueCell;
        
        private RequiredCell mRequiredCell;
        
        private EmptyIsNullCell mEmptyIsNullCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DataCell1 : WpfCell
    {
        
        public DataCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "data";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfText DataText
        {
            get
            {
                if ((this.mDataText == null))
                {
                    this.mDataText = new WpfText(this);
                    #region Search Criteria
                    this.mDataText.SearchProperties[WpfText.PropertyNames.Name] = "data";
                    this.mDataText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDataText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mDataText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DefaultValueCell : WpfCell
    {
        
        public DefaultValueCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfEdit DefaultValueTextBox
        {
            get
            {
                if ((this.mDefaultValueTextBox == null))
                {
                    this.mDefaultValueTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mDefaultValueTextBox.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDefaultValueTextBox;
            }
        }
        
        public WpfScrollBar VerticalScrollBar
        {
            get
            {
                if ((this.mVerticalScrollBar == null))
                {
                    this.mVerticalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mVerticalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "VerticalScrollBar";
                    this.mVerticalScrollBar.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mVerticalScrollBar;
            }
        }
        
        public WpfScrollBar HorizontalScrollBar
        {
            get
            {
                if ((this.mHorizontalScrollBar == null))
                {
                    this.mHorizontalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mHorizontalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "HorizontalScrollBar";
                    this.mHorizontalScrollBar.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mHorizontalScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mDefaultValueTextBox;
        
        private WpfScrollBar mVerticalScrollBar;
        
        private WpfScrollBar mHorizontalScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RequiredCell : WpfCell
    {
        
        public RequiredCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox RequiredCheckBox
        {
            get
            {
                if ((this.mRequiredCheckBox == null))
                {
                    this.mRequiredCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRequiredCheckBox.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mRequiredCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mRequiredCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class EmptyIsNullCell : WpfCell
    {
        
        public EmptyIsNullCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "False";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox EmptyIsNullCheckBox
        {
            get
            {
                if ((this.mEmptyIsNullCheckBox == null))
                {
                    this.mEmptyIsNullCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEmptyIsNullCheckBox.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mEmptyIsNullCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mEmptyIsNullCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class NoneText1 : WpfText
    {
        
        public NoneText1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "None";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfPane OutputMappingPane
        {
            get
            {
                if ((this.mOutputMappingPane == null))
                {
                    this.mOutputMappingPane = new WpfPane(this);
                    #region Search Criteria
                    this.mOutputMappingPane.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
                    this.mOutputMappingPane.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mOutputMappingPane.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mOutputMappingPane;
            }
        }
        #endregion
        
        #region Fields
        private WpfPane mOutputMappingPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class OutputsMappingTable : WpfTable
    {
        
        public OutputsMappingTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "OutputsMappingDataGrid";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfPane OutputMappingsPane
        {
            get
            {
                if ((this.mOutputMappingsPane == null))
                {
                    this.mOutputMappingsPane = new WpfPane(this);
                    #region Search Criteria
                    this.mOutputMappingsPane.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
                    this.mOutputMappingsPane.SearchProperties[WpfPane.PropertyNames.Name] = "0";
                    this.mOutputMappingsPane.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mOutputMappingsPane;
            }
        }
        
        public TextCell TextCell
        {
            get
            {
                if ((this.mTextCell == null))
                {
                    this.mTextCell = new TextCell(this);
                }
                return this.mTextCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfPane mOutputMappingsPane;
        
        private TextCell mTextCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class TextCell : WpfCell
    {
        
        public TextCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "PrimitiveReturnValue";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfText TextCellText
        {
            get
            {
                if ((this.mTextCellText == null))
                {
                    this.mTextCellText = new WpfText(this);
                    #region Search Criteria
                    this.mTextCellText.SearchProperties[WpfText.PropertyNames.Name] = "PrimitiveReturnValue";
                    this.mTextCellText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mTextCellText;
            }
        }
        
        public WpfScrollBar VerticalScrollBar
        {
            get
            {
                if ((this.mVerticalScrollBar == null))
                {
                    this.mVerticalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mVerticalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "VerticalScrollBar";
                    this.mVerticalScrollBar.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mVerticalScrollBar;
            }
        }
        
        public WpfScrollBar HorizontalScrollBar
        {
            get
            {
                if ((this.mHorizontalScrollBar == null))
                {
                    this.mHorizontalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mHorizontalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "HorizontalScrollBar";
                    this.mHorizontalScrollBar.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mHorizontalScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextCellText;
        
        private WpfScrollBar mVerticalScrollBar;
        
        private WpfScrollBar mHorizontalScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetNameText1 : WpfText
    {
        
        public RecordsetNameText1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Recordset Name";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfEdit RecordsetTextBox
        {
            get
            {
                if ((this.mRecordsetTextBox == null))
                {
                    this.mRecordsetTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordsetTextBox.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mRecordsetTextBox.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mRecordsetTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mRecordsetTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class TestResultsText : WpfText
    {
        
        public TestResultsText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Test Results";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfPane TestResultsPane
        {
            get
            {
                if ((this.mTestResultsPane == null))
                {
                    this.mTestResultsPane = new WpfPane(this);
                    #region Search Criteria
                    this.mTestResultsPane.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
                    this.mTestResultsPane.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mTestResultsPane.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mTestResultsPane;
            }
        }
        #endregion
        
        #region Fields
        private WpfPane mTestResultsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class FilesMenu : WpfMenu
    {
        
        public FilesMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.AutomationId] = "filesMenu";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem PositionButton
        {
            get
            {
                if ((this.mPositionButton == null))
                {
                    this.mPositionButton = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mPositionButton.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "PART_FilesMenuItem";
                    this.mPositionButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mPositionButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mPositionButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SplitPaneRight : WpfCustom
    {
        
        public SplitPaneRight(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public Variables Variables
        {
            get
            {
                if ((this.mVariables == null))
                {
                    this.mVariables = new Variables(this);
                }
                return this.mVariables;
            }
        }
        
        public DebugOutput DebugOutput
        {
            get
            {
                if ((this.mDebugOutput == null))
                {
                    this.mDebugOutput = new DebugOutput(this);
                }
                return this.mDebugOutput;
            }
        }
        #endregion
        
        #region Fields
        private Variables mVariables;
        
        private DebugOutput mDebugOutput;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Variables : WpfCustom
    {
        
        public Variables(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Variables";
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public WpfButton VariableUnpinBtn
        {
            get
            {
                if ((this.mVariableUnpinBtn == null))
                {
                    this.mVariableUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mVariableUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mVariableUnpinBtn.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mVariableUnpinBtn;
            }
        }
        
        public VariablesControl VariablesControl
        {
            get
            {
                if ((this.mVariablesControl == null))
                {
                    this.mVariablesControl = new VariablesControl(this);
                }
                return this.mVariablesControl;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mVariableUnpinBtn;
        
        private VariablesControl mVariablesControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class VariablesControl : WpfCustom
    {
        
        public VariablesControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DataListView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_VariablesControl_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_AddRemovebtn_AutoID";
                    this.mDeleteButton.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        
        public WpfButton SortButton
        {
            get
            {
                if ((this.mSortButton == null))
                {
                    this.mSortButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSortButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Sortbtn_AutoID";
                    this.mSortButton.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mSortButton;
            }
        }
        
        public VariableTreeView VariableTreeView
        {
            get
            {
                if ((this.mVariableTreeView == null))
                {
                    this.mVariableTreeView = new VariableTreeView(this);
                }
                return this.mVariableTreeView;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDeleteButton;
        
        private WpfButton mSortButton;
        
        private VariableTreeView mVariableTreeView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class VariableTreeView : WpfTree
    {
        
        public VariableTreeView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "UI_VariableTreeView_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public VariableTreeItem VariableTreeItem
        {
            get
            {
                if ((this.mVariableTreeItem == null))
                {
                    this.mVariableTreeItem = new VariableTreeItem(this);
                }
                return this.mVariableTreeItem;
            }
        }
        
        public RecordsetTreeItem RecordsetTreeItem
        {
            get
            {
                if ((this.mRecordsetTreeItem == null))
                {
                    this.mRecordsetTreeItem = new RecordsetTreeItem(this);
                }
                return this.mRecordsetTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private VariableTreeItem mVariableTreeItem;
        
        private RecordsetTreeItem mRecordsetTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class VariableTreeItem : WpfTreeItem
    {
        
        public VariableTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public VariableModelTreeItem1 VariableModelTreeItem1
        {
            get
            {
                if ((this.mVariableModelTreeItem1 == null))
                {
                    this.mVariableModelTreeItem1 = new VariableModelTreeItem1(this);
                }
                return this.mVariableModelTreeItem1;
            }
        }
        
        public VariableModelTreeItem2 VariableModelTreeItem2
        {
            get
            {
                if ((this.mVariableModelTreeItem2 == null))
                {
                    this.mVariableModelTreeItem2 = new VariableModelTreeItem2(this);
                }
                return this.mVariableModelTreeItem2;
            }
        }
        
        public VariableModelTreeItem3 VariableModelTreeItem3
        {
            get
            {
                if ((this.mVariableModelTreeItem3 == null))
                {
                    this.mVariableModelTreeItem3 = new VariableModelTreeItem3(this);
                }
                return this.mVariableModelTreeItem3;
            }
        }
        
        public VariableModelTreeItem4 VariableModelTreeItem4
        {
            get
            {
                if ((this.mVariableModelTreeItem4 == null))
                {
                    this.mVariableModelTreeItem4 = new VariableModelTreeItem4(this);
                }
                return this.mVariableModelTreeItem4;
            }
        }
        
        public VariableModelTreeItem5 VariableModelTreeItem5
        {
            get
            {
                if ((this.mVariableModelTreeItem5 == null))
                {
                    this.mVariableModelTreeItem5 = new VariableModelTreeItem5(this);
                }
                return this.mVariableModelTreeItem5;
            }
        }
        #endregion
        
        #region Fields
        private VariableModelTreeItem1 mVariableModelTreeItem1;
        
        private VariableModelTreeItem2 mVariableModelTreeItem2;
        
        private VariableModelTreeItem3 mVariableModelTreeItem3;
        
        private VariableModelTreeItem4 mVariableModelTreeItem4;
        
        private VariableModelTreeItem5 mVariableModelTreeItem5;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class VariableModelTreeItem1 : WpfTreeItem
    {
        
        public VariableModelTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Dev2.Studio.Core.Models.DataList.DataListItemModel";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public VariableNameScrolBarPane VariableNameScrolBarPane
        {
            get
            {
                if ((this.mVariableNameScrolBarPane == null))
                {
                    this.mVariableNameScrolBarPane = new VariableNameScrolBarPane(this);
                }
                return this.mVariableNameScrolBarPane;
            }
        }
        
        public WpfCheckBox VariableInputCheckbox
        {
            get
            {
                if ((this.mVariableInputCheckbox == null))
                {
                    this.mVariableInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mVariableInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mVariableInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mVariableInputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mVariableInputCheckbox;
            }
        }
        
        public WpfCheckBox VariableOutputCheckbox
        {
            get
            {
                if ((this.mVariableOutputCheckbox == null))
                {
                    this.mVariableOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mVariableOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mVariableOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mVariableOutputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mVariableOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private VariableNameScrolBarPane mVariableNameScrolBarPane;
        
        private WpfCheckBox mVariableInputCheckbox;
        
        private WpfCheckBox mVariableOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class VariableNameScrolBarPane : WpfPane
    {
        
        public VariableNameScrolBarPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public WpfEdit VariableNameTextBox
        {
            get
            {
                if ((this.mVariableNameTextBox == null))
                {
                    this.mVariableNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mVariableNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mVariableNameTextBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mVariableNameTextBox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mVariableNameTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mVariableNameTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class VariableModelTreeItem2 : WpfTreeItem
    {
        
        public VariableModelTreeItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Dev2.Studio.Core.Models.DataList.DataListItemModel";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public VariableNameScrolBarPane1 VariableNameScrolBarPane
        {
            get
            {
                if ((this.mVariableNameScrolBarPane == null))
                {
                    this.mVariableNameScrolBarPane = new VariableNameScrolBarPane1(this);
                }
                return this.mVariableNameScrolBarPane;
            }
        }
        
        public WpfCheckBox VariableInputCheckbox
        {
            get
            {
                if ((this.mVariableInputCheckbox == null))
                {
                    this.mVariableInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mVariableInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mVariableInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mVariableInputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mVariableInputCheckbox;
            }
        }
        
        public WpfCheckBox VariableOutputCheckbox
        {
            get
            {
                if ((this.mVariableOutputCheckbox == null))
                {
                    this.mVariableOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mVariableOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mVariableOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mVariableOutputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mVariableOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private VariableNameScrolBarPane1 mVariableNameScrolBarPane;
        
        private WpfCheckBox mVariableInputCheckbox;
        
        private WpfCheckBox mVariableOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class VariableNameScrolBarPane1 : WpfPane
    {
        
        public VariableNameScrolBarPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public WpfEdit VariableNameTextBox
        {
            get
            {
                if ((this.mVariableNameTextBox == null))
                {
                    this.mVariableNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mVariableNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mVariableNameTextBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mVariableNameTextBox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mVariableNameTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mVariableNameTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class VariableModelTreeItem3 : WpfTreeItem
    {
        
        public VariableModelTreeItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Dev2.Studio.Core.Models.DataList.DataListItemModel";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public VariableNameScrolBarPane2 VariableNameScrolBarPane
        {
            get
            {
                if ((this.mVariableNameScrolBarPane == null))
                {
                    this.mVariableNameScrolBarPane = new VariableNameScrolBarPane2(this);
                }
                return this.mVariableNameScrolBarPane;
            }
        }
        
        public WpfCheckBox VariableInputCheckbox
        {
            get
            {
                if ((this.mVariableInputCheckbox == null))
                {
                    this.mVariableInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mVariableInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mVariableInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mVariableInputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mVariableInputCheckbox;
            }
        }
        
        public WpfCheckBox VariableOutputCheckbox
        {
            get
            {
                if ((this.mVariableOutputCheckbox == null))
                {
                    this.mVariableOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mVariableOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mVariableOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mVariableOutputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mVariableOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private VariableNameScrolBarPane2 mVariableNameScrolBarPane;
        
        private WpfCheckBox mVariableInputCheckbox;
        
        private WpfCheckBox mVariableOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class VariableNameScrolBarPane2 : WpfPane
    {
        
        public VariableNameScrolBarPane2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public WpfEdit VariableNameTextBox
        {
            get
            {
                if ((this.mVariableNameTextBox == null))
                {
                    this.mVariableNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mVariableNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mVariableNameTextBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mVariableNameTextBox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mVariableNameTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mVariableNameTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class VariableModelTreeItem4 : WpfTreeItem
    {
        
        public VariableModelTreeItem4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Dev2.Studio.Core.Models.DataList.DataListItemModel";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "4";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public VariableNameScrolBarPane3 VariableNameScrolBarPane
        {
            get
            {
                if ((this.mVariableNameScrolBarPane == null))
                {
                    this.mVariableNameScrolBarPane = new VariableNameScrolBarPane3(this);
                }
                return this.mVariableNameScrolBarPane;
            }
        }
        
        public WpfCheckBox VariableInputCheckbox
        {
            get
            {
                if ((this.mVariableInputCheckbox == null))
                {
                    this.mVariableInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mVariableInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mVariableInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mVariableInputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mVariableInputCheckbox;
            }
        }
        
        public WpfCheckBox VariableOutputCheckbox
        {
            get
            {
                if ((this.mVariableOutputCheckbox == null))
                {
                    this.mVariableOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mVariableOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mVariableOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mVariableOutputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mVariableOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private VariableNameScrolBarPane3 mVariableNameScrolBarPane;
        
        private WpfCheckBox mVariableInputCheckbox;
        
        private WpfCheckBox mVariableOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class VariableNameScrolBarPane3 : WpfPane
    {
        
        public VariableNameScrolBarPane3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public WpfEdit VariableNameTextBox
        {
            get
            {
                if ((this.mVariableNameTextBox == null))
                {
                    this.mVariableNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mVariableNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mVariableNameTextBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mVariableNameTextBox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mVariableNameTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mVariableNameTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class VariableModelTreeItem5 : WpfTreeItem
    {
        
        public VariableModelTreeItem5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Dev2.Studio.Core.Models.DataList.DataListItemModel";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "5";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public VariableNameScrolBarPane4 VariableNameScrolBarPane
        {
            get
            {
                if ((this.mVariableNameScrolBarPane == null))
                {
                    this.mVariableNameScrolBarPane = new VariableNameScrolBarPane4(this);
                }
                return this.mVariableNameScrolBarPane;
            }
        }
        
        public WpfCheckBox VariableInputCheckbox
        {
            get
            {
                if ((this.mVariableInputCheckbox == null))
                {
                    this.mVariableInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mVariableInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mVariableInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mVariableInputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mVariableInputCheckbox;
            }
        }
        
        public WpfCheckBox VariableOutputCheckbox
        {
            get
            {
                if ((this.mVariableOutputCheckbox == null))
                {
                    this.mVariableOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mVariableOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mVariableOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mVariableOutputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mVariableOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private VariableNameScrolBarPane4 mVariableNameScrolBarPane;
        
        private WpfCheckBox mVariableInputCheckbox;
        
        private WpfCheckBox mVariableOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class VariableNameScrolBarPane4 : WpfPane
    {
        
        public VariableNameScrolBarPane4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public WpfEdit VariableNameTextBox
        {
            get
            {
                if ((this.mVariableNameTextBox == null))
                {
                    this.mVariableNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mVariableNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mVariableNameTextBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mVariableNameTextBox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mVariableNameTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mVariableNameTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetTreeItem : WpfTreeItem
    {
        
        public RecordsetTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public RecordsetModelTreeItem1 RecordsetModelTreeItem1
        {
            get
            {
                if ((this.mRecordsetModelTreeItem1 == null))
                {
                    this.mRecordsetModelTreeItem1 = new RecordsetModelTreeItem1(this);
                }
                return this.mRecordsetModelTreeItem1;
            }
        }
        
        public RecordsetModelTreeItem2 RecordsetModelTreeItem2
        {
            get
            {
                if ((this.mRecordsetModelTreeItem2 == null))
                {
                    this.mRecordsetModelTreeItem2 = new RecordsetModelTreeItem2(this);
                }
                return this.mRecordsetModelTreeItem2;
            }
        }
        
        public RecordsetModelTreeItem3 RecordsetModelTreeItem3
        {
            get
            {
                if ((this.mRecordsetModelTreeItem3 == null))
                {
                    this.mRecordsetModelTreeItem3 = new RecordsetModelTreeItem3(this);
                }
                return this.mRecordsetModelTreeItem3;
            }
        }
        
        public RecordsetModelTreeItem4 RecordsetModelTreeItem4
        {
            get
            {
                if ((this.mRecordsetModelTreeItem4 == null))
                {
                    this.mRecordsetModelTreeItem4 = new RecordsetModelTreeItem4(this);
                }
                return this.mRecordsetModelTreeItem4;
            }
        }
        
        public RecordsetModelTreeItem5 RecordsetModelTreeItem5
        {
            get
            {
                if ((this.mRecordsetModelTreeItem5 == null))
                {
                    this.mRecordsetModelTreeItem5 = new RecordsetModelTreeItem5(this);
                }
                return this.mRecordsetModelTreeItem5;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetModelTreeItem1 mRecordsetModelTreeItem1;
        
        private RecordsetModelTreeItem2 mRecordsetModelTreeItem2;
        
        private RecordsetModelTreeItem3 mRecordsetModelTreeItem3;
        
        private RecordsetModelTreeItem4 mRecordsetModelTreeItem4;
        
        private RecordsetModelTreeItem5 mRecordsetModelTreeItem5;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetModelTreeItem1 : WpfTreeItem
    {
        
        public RecordsetModelTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Dev2.Studio.Core.Models.DataList.DataListItemModel";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public RecordsetNameScrolBarPane RecordsetNameScrolBarPane
        {
            get
            {
                if ((this.mRecordsetNameScrolBarPane == null))
                {
                    this.mRecordsetNameScrolBarPane = new RecordsetNameScrolBarPane(this);
                }
                return this.mRecordsetNameScrolBarPane;
            }
        }
        
        public WpfCheckBox RecordsetInputCheckbox
        {
            get
            {
                if ((this.mRecordsetInputCheckbox == null))
                {
                    this.mRecordsetInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRecordsetInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mRecordsetInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetInputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetInputCheckbox;
            }
        }
        
        public WpfCheckBox RecordsetOutputCheckbox
        {
            get
            {
                if ((this.mRecordsetOutputCheckbox == null))
                {
                    this.mRecordsetOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRecordsetOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mRecordsetOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetOutputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetOutputCheckbox;
            }
        }
        
        public RecordsetChildModelTreeItem RecordsetChildModelTreeItem
        {
            get
            {
                if ((this.mRecordsetChildModelTreeItem == null))
                {
                    this.mRecordsetChildModelTreeItem = new RecordsetChildModelTreeItem(this);
                }
                return this.mRecordsetChildModelTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetNameScrolBarPane mRecordsetNameScrolBarPane;
        
        private WpfCheckBox mRecordsetInputCheckbox;
        
        private WpfCheckBox mRecordsetOutputCheckbox;
        
        private RecordsetChildModelTreeItem mRecordsetChildModelTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetNameScrolBarPane : WpfPane
    {
        
        public RecordsetNameScrolBarPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public WpfEdit RecordsetNameTextBox
        {
            get
            {
                if ((this.mRecordsetNameTextBox == null))
                {
                    this.mRecordsetNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordsetNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mRecordsetNameTextBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetNameTextBox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetNameTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mRecordsetNameTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetChildModelTreeItem : WpfTreeItem
    {
        
        public RecordsetChildModelTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Dev2.Studio.Core.Models.DataList.DataListItemModel";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public RecordsetNameChildScrolBarPane RecordsetNameChildScrolBarPane
        {
            get
            {
                if ((this.mRecordsetNameChildScrolBarPane == null))
                {
                    this.mRecordsetNameChildScrolBarPane = new RecordsetNameChildScrolBarPane(this);
                }
                return this.mRecordsetNameChildScrolBarPane;
            }
        }
        
        public WpfCheckBox RecordsetChildInputCheckbox
        {
            get
            {
                if ((this.mRecordsetChildInputCheckbox == null))
                {
                    this.mRecordsetChildInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRecordsetChildInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mRecordsetChildInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetChildInputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetChildInputCheckbox;
            }
        }
        
        public WpfCheckBox RecordsetChildOutputCheckbox
        {
            get
            {
                if ((this.mRecordsetChildOutputCheckbox == null))
                {
                    this.mRecordsetChildOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRecordsetChildOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mRecordsetChildOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetChildOutputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetChildOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetNameChildScrolBarPane mRecordsetNameChildScrolBarPane;
        
        private WpfCheckBox mRecordsetChildInputCheckbox;
        
        private WpfCheckBox mRecordsetChildOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetNameChildScrolBarPane : WpfPane
    {
        
        public RecordsetNameChildScrolBarPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public WpfEdit RecordsetNameChildTextBox
        {
            get
            {
                if ((this.mRecordsetNameChildTextBox == null))
                {
                    this.mRecordsetNameChildTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordsetNameChildTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mRecordsetNameChildTextBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetNameChildTextBox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetNameChildTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mRecordsetNameChildTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetModelTreeItem2 : WpfTreeItem
    {
        
        public RecordsetModelTreeItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Dev2.Studio.Core.Models.DataList.DataListItemModel";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public RecordsetNameScrolBarPane1 RecordsetNameScrolBarPane
        {
            get
            {
                if ((this.mRecordsetNameScrolBarPane == null))
                {
                    this.mRecordsetNameScrolBarPane = new RecordsetNameScrolBarPane1(this);
                }
                return this.mRecordsetNameScrolBarPane;
            }
        }
        
        public WpfCheckBox RecordsetInputCheckbox
        {
            get
            {
                if ((this.mRecordsetInputCheckbox == null))
                {
                    this.mRecordsetInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRecordsetInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mRecordsetInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetInputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetInputCheckbox;
            }
        }
        
        public WpfCheckBox RecordsetOutputCheckbox
        {
            get
            {
                if ((this.mRecordsetOutputCheckbox == null))
                {
                    this.mRecordsetOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRecordsetOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mRecordsetOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetOutputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetOutputCheckbox;
            }
        }
        
        public RecordsetChildModelTreeItem1 RecordsetChildModelTreeItem
        {
            get
            {
                if ((this.mRecordsetChildModelTreeItem == null))
                {
                    this.mRecordsetChildModelTreeItem = new RecordsetChildModelTreeItem1(this);
                }
                return this.mRecordsetChildModelTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetNameScrolBarPane1 mRecordsetNameScrolBarPane;
        
        private WpfCheckBox mRecordsetInputCheckbox;
        
        private WpfCheckBox mRecordsetOutputCheckbox;
        
        private RecordsetChildModelTreeItem1 mRecordsetChildModelTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetNameScrolBarPane1 : WpfPane
    {
        
        public RecordsetNameScrolBarPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public WpfEdit RecordsetNameTextBox
        {
            get
            {
                if ((this.mRecordsetNameTextBox == null))
                {
                    this.mRecordsetNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordsetNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mRecordsetNameTextBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetNameTextBox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetNameTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mRecordsetNameTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetChildModelTreeItem1 : WpfTreeItem
    {
        
        public RecordsetChildModelTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Dev2.Studio.Core.Models.DataList.DataListItemModel";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public RecordsetNameChildScrolBarPane1 RecordsetNameChildScrolBarPane
        {
            get
            {
                if ((this.mRecordsetNameChildScrolBarPane == null))
                {
                    this.mRecordsetNameChildScrolBarPane = new RecordsetNameChildScrolBarPane1(this);
                }
                return this.mRecordsetNameChildScrolBarPane;
            }
        }
        
        public WpfCheckBox RecordsetChildInputCheckbox
        {
            get
            {
                if ((this.mRecordsetChildInputCheckbox == null))
                {
                    this.mRecordsetChildInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRecordsetChildInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mRecordsetChildInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetChildInputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetChildInputCheckbox;
            }
        }
        
        public WpfCheckBox RecordsetChildOutputCheckbox
        {
            get
            {
                if ((this.mRecordsetChildOutputCheckbox == null))
                {
                    this.mRecordsetChildOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRecordsetChildOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mRecordsetChildOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetChildOutputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetChildOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetNameChildScrolBarPane1 mRecordsetNameChildScrolBarPane;
        
        private WpfCheckBox mRecordsetChildInputCheckbox;
        
        private WpfCheckBox mRecordsetChildOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetNameChildScrolBarPane1 : WpfPane
    {
        
        public RecordsetNameChildScrolBarPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public WpfEdit RecordsetNameChildTextBox
        {
            get
            {
                if ((this.mRecordsetNameChildTextBox == null))
                {
                    this.mRecordsetNameChildTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordsetNameChildTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mRecordsetNameChildTextBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetNameChildTextBox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetNameChildTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mRecordsetNameChildTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetModelTreeItem3 : WpfTreeItem
    {
        
        public RecordsetModelTreeItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Dev2.Studio.Core.Models.DataList.DataListItemModel";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public RecordsetNameScrolBarPane2 RecordsetNameScrolBarPane
        {
            get
            {
                if ((this.mRecordsetNameScrolBarPane == null))
                {
                    this.mRecordsetNameScrolBarPane = new RecordsetNameScrolBarPane2(this);
                }
                return this.mRecordsetNameScrolBarPane;
            }
        }
        
        public WpfCheckBox RecordsetInputCheckbox
        {
            get
            {
                if ((this.mRecordsetInputCheckbox == null))
                {
                    this.mRecordsetInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRecordsetInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mRecordsetInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetInputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetInputCheckbox;
            }
        }
        
        public WpfCheckBox RecordsetOutputCheckbox
        {
            get
            {
                if ((this.mRecordsetOutputCheckbox == null))
                {
                    this.mRecordsetOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRecordsetOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mRecordsetOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetOutputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetOutputCheckbox;
            }
        }
        
        public RecordsetChildModelTreeItem2 RecordsetChildModelTreeItem
        {
            get
            {
                if ((this.mRecordsetChildModelTreeItem == null))
                {
                    this.mRecordsetChildModelTreeItem = new RecordsetChildModelTreeItem2(this);
                }
                return this.mRecordsetChildModelTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetNameScrolBarPane2 mRecordsetNameScrolBarPane;
        
        private WpfCheckBox mRecordsetInputCheckbox;
        
        private WpfCheckBox mRecordsetOutputCheckbox;
        
        private RecordsetChildModelTreeItem2 mRecordsetChildModelTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetNameScrolBarPane2 : WpfPane
    {
        
        public RecordsetNameScrolBarPane2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public WpfEdit RecordsetNameTextBox
        {
            get
            {
                if ((this.mRecordsetNameTextBox == null))
                {
                    this.mRecordsetNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordsetNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mRecordsetNameTextBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetNameTextBox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetNameTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mRecordsetNameTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetChildModelTreeItem2 : WpfTreeItem
    {
        
        public RecordsetChildModelTreeItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Dev2.Studio.Core.Models.DataList.DataListItemModel";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public RecordsetNameChildScrolBarPane2 RecordsetNameChildScrolBarPane
        {
            get
            {
                if ((this.mRecordsetNameChildScrolBarPane == null))
                {
                    this.mRecordsetNameChildScrolBarPane = new RecordsetNameChildScrolBarPane2(this);
                }
                return this.mRecordsetNameChildScrolBarPane;
            }
        }
        
        public WpfCheckBox RecordsetChildInputCheckbox
        {
            get
            {
                if ((this.mRecordsetChildInputCheckbox == null))
                {
                    this.mRecordsetChildInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRecordsetChildInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mRecordsetChildInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetChildInputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetChildInputCheckbox;
            }
        }
        
        public WpfCheckBox RecordsetChildOutputCheckbox
        {
            get
            {
                if ((this.mRecordsetChildOutputCheckbox == null))
                {
                    this.mRecordsetChildOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRecordsetChildOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mRecordsetChildOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetChildOutputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetChildOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetNameChildScrolBarPane2 mRecordsetNameChildScrolBarPane;
        
        private WpfCheckBox mRecordsetChildInputCheckbox;
        
        private WpfCheckBox mRecordsetChildOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetNameChildScrolBarPane2 : WpfPane
    {
        
        public RecordsetNameChildScrolBarPane2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public WpfEdit RecordsetNameChildTextBox
        {
            get
            {
                if ((this.mRecordsetNameChildTextBox == null))
                {
                    this.mRecordsetNameChildTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordsetNameChildTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mRecordsetNameChildTextBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetNameChildTextBox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetNameChildTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mRecordsetNameChildTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetModelTreeItem4 : WpfTreeItem
    {
        
        public RecordsetModelTreeItem4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Dev2.Studio.Core.Models.DataList.DataListItemModel";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "4";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public RecordsetNameScrolBarPane3 RecordsetNameScrolBarPane
        {
            get
            {
                if ((this.mRecordsetNameScrolBarPane == null))
                {
                    this.mRecordsetNameScrolBarPane = new RecordsetNameScrolBarPane3(this);
                }
                return this.mRecordsetNameScrolBarPane;
            }
        }
        
        public WpfCheckBox RecordsetInputCheckbox
        {
            get
            {
                if ((this.mRecordsetInputCheckbox == null))
                {
                    this.mRecordsetInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRecordsetInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mRecordsetInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetInputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetInputCheckbox;
            }
        }
        
        public WpfCheckBox RecordsetOutputCheckbox
        {
            get
            {
                if ((this.mRecordsetOutputCheckbox == null))
                {
                    this.mRecordsetOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRecordsetOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mRecordsetOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetOutputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetOutputCheckbox;
            }
        }
        
        public RecordsetChildModelTreeItem3 RecordsetChildModelTreeItem
        {
            get
            {
                if ((this.mRecordsetChildModelTreeItem == null))
                {
                    this.mRecordsetChildModelTreeItem = new RecordsetChildModelTreeItem3(this);
                }
                return this.mRecordsetChildModelTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetNameScrolBarPane3 mRecordsetNameScrolBarPane;
        
        private WpfCheckBox mRecordsetInputCheckbox;
        
        private WpfCheckBox mRecordsetOutputCheckbox;
        
        private RecordsetChildModelTreeItem3 mRecordsetChildModelTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetNameScrolBarPane3 : WpfPane
    {
        
        public RecordsetNameScrolBarPane3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public WpfEdit RecordsetNameTextBox
        {
            get
            {
                if ((this.mRecordsetNameTextBox == null))
                {
                    this.mRecordsetNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordsetNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mRecordsetNameTextBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetNameTextBox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetNameTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mRecordsetNameTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetChildModelTreeItem3 : WpfTreeItem
    {
        
        public RecordsetChildModelTreeItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Dev2.Studio.Core.Models.DataList.DataListItemModel";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public RecordsetNameChildScrolBarPane3 RecordsetNameChildScrolBarPane
        {
            get
            {
                if ((this.mRecordsetNameChildScrolBarPane == null))
                {
                    this.mRecordsetNameChildScrolBarPane = new RecordsetNameChildScrolBarPane3(this);
                }
                return this.mRecordsetNameChildScrolBarPane;
            }
        }
        
        public WpfCheckBox RecordsetChildInputCheckbox
        {
            get
            {
                if ((this.mRecordsetChildInputCheckbox == null))
                {
                    this.mRecordsetChildInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRecordsetChildInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mRecordsetChildInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetChildInputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetChildInputCheckbox;
            }
        }
        
        public WpfCheckBox RecordsetChildOutputCheckbox
        {
            get
            {
                if ((this.mRecordsetChildOutputCheckbox == null))
                {
                    this.mRecordsetChildOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRecordsetChildOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mRecordsetChildOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetChildOutputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetChildOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetNameChildScrolBarPane3 mRecordsetNameChildScrolBarPane;
        
        private WpfCheckBox mRecordsetChildInputCheckbox;
        
        private WpfCheckBox mRecordsetChildOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetNameChildScrolBarPane3 : WpfPane
    {
        
        public RecordsetNameChildScrolBarPane3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public WpfEdit RecordsetNameChildTextBox
        {
            get
            {
                if ((this.mRecordsetNameChildTextBox == null))
                {
                    this.mRecordsetNameChildTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordsetNameChildTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mRecordsetNameChildTextBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetNameChildTextBox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetNameChildTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mRecordsetNameChildTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetModelTreeItem5 : WpfTreeItem
    {
        
        public RecordsetModelTreeItem5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Dev2.Studio.Core.Models.DataList.DataListItemModel";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "5";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public RecordsetNameScrolBarPane4 RecordsetNameScrolBarPane
        {
            get
            {
                if ((this.mRecordsetNameScrolBarPane == null))
                {
                    this.mRecordsetNameScrolBarPane = new RecordsetNameScrolBarPane4(this);
                }
                return this.mRecordsetNameScrolBarPane;
            }
        }
        
        public WpfCheckBox RecordsetInputCheckbox
        {
            get
            {
                if ((this.mRecordsetInputCheckbox == null))
                {
                    this.mRecordsetInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRecordsetInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mRecordsetInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetInputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetInputCheckbox;
            }
        }
        
        public WpfCheckBox RecordsetOutputCheckbox
        {
            get
            {
                if ((this.mRecordsetOutputCheckbox == null))
                {
                    this.mRecordsetOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRecordsetOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mRecordsetOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetOutputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetOutputCheckbox;
            }
        }
        
        public RecordsetChildModelTreeItem4 RecordsetChildModelTreeItem
        {
            get
            {
                if ((this.mRecordsetChildModelTreeItem == null))
                {
                    this.mRecordsetChildModelTreeItem = new RecordsetChildModelTreeItem4(this);
                }
                return this.mRecordsetChildModelTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetNameScrolBarPane4 mRecordsetNameScrolBarPane;
        
        private WpfCheckBox mRecordsetInputCheckbox;
        
        private WpfCheckBox mRecordsetOutputCheckbox;
        
        private RecordsetChildModelTreeItem4 mRecordsetChildModelTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetNameScrolBarPane4 : WpfPane
    {
        
        public RecordsetNameScrolBarPane4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public WpfEdit RecordsetNameTextBox
        {
            get
            {
                if ((this.mRecordsetNameTextBox == null))
                {
                    this.mRecordsetNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordsetNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mRecordsetNameTextBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetNameTextBox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetNameTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mRecordsetNameTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetChildModelTreeItem4 : WpfTreeItem
    {
        
        public RecordsetChildModelTreeItem4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Dev2.Studio.Core.Models.DataList.DataListItemModel";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public RecordsetNameChildScrolBarPane4 RecordsetNameChildScrolBarPane
        {
            get
            {
                if ((this.mRecordsetNameChildScrolBarPane == null))
                {
                    this.mRecordsetNameChildScrolBarPane = new RecordsetNameChildScrolBarPane4(this);
                }
                return this.mRecordsetNameChildScrolBarPane;
            }
        }
        
        public WpfCheckBox RecordsetChildInputCheckbox
        {
            get
            {
                if ((this.mRecordsetChildInputCheckbox == null))
                {
                    this.mRecordsetChildInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRecordsetChildInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mRecordsetChildInputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetChildInputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetChildInputCheckbox;
            }
        }
        
        public WpfCheckBox RecordsetChildOutputCheckbox
        {
            get
            {
                if ((this.mRecordsetChildOutputCheckbox == null))
                {
                    this.mRecordsetChildOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRecordsetChildOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mRecordsetChildOutputCheckbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetChildOutputCheckbox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetChildOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetNameChildScrolBarPane4 mRecordsetNameChildScrolBarPane;
        
        private WpfCheckBox mRecordsetChildInputCheckbox;
        
        private WpfCheckBox mRecordsetChildOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetNameChildScrolBarPane4 : WpfPane
    {
        
        public RecordsetNameChildScrolBarPane4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "varsScrolBar";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public WpfEdit RecordsetNameChildTextBox
        {
            get
            {
                if ((this.mRecordsetNameChildTextBox == null))
                {
                    this.mRecordsetNameChildTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordsetNameChildTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mRecordsetNameChildTextBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mRecordsetNameChildTextBox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mRecordsetNameChildTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mRecordsetNameChildTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DebugOutput : WpfCustom
    {
        
        public DebugOutput(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DebugOutputView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DebugOutput";
            this.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
            #endregion
        }
        
        #region Properties
        public WpfButton DebugOutputUnpinBtn
        {
            get
            {
                if ((this.mDebugOutputUnpinBtn == null))
                {
                    this.mDebugOutputUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mDebugOutputUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mDebugOutputUnpinBtn.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDebugOutputUnpinBtn;
            }
        }
        
        public WpfEdit SearchTextBox
        {
            get
            {
                if ((this.mSearchTextBox == null))
                {
                    this.mSearchTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mSearchTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
                    this.mSearchTextBox.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mSearchTextBox;
            }
        }
        
        public WpfButton SettingsButton
        {
            get
            {
                if ((this.mSettingsButton == null))
                {
                    this.mSettingsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSettingsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_DebugOutputOptionsButton_AutoID";
                    this.mSettingsButton.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mSettingsButton;
            }
        }
        
        public WpfButton ExpandCollapseButton
        {
            get
            {
                if ((this.mExpandCollapseButton == null))
                {
                    this.mExpandCollapseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpandCollapseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_DebugOutputExpandAllMode_AutoID";
                    this.mExpandCollapseButton.WindowTitles.Add("Warewolf (DEV2\\PIETER.TERBLANCHE)");
                    #endregion
                }
                return this.mExpandCollapseButton;
            }
        }
        
        public DebugOutputTree DebugOutputTree
        {
            get
            {
                if ((this.mDebugOutputTree == null))
                {
                    this.mDebugOutputTree = new DebugOutputTree(this);
                }
                return this.mDebugOutputTree;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDebugOutputUnpinBtn;
        
        private WpfEdit mSearchTextBox;
        
        private WpfButton mSettingsButton;
        
        private WpfButton mExpandCollapseButton;
        
        private DebugOutputTree mDebugOutputTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DebugOutputTree : WpfTree
    {
        
        public DebugOutputTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "DebugOutputTree";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UIHelloWorldTreeItem UIHelloWorldTreeItem
        {
            get
            {
                if ((this.mUIHelloWorldTreeItem == null))
                {
                    this.mUIHelloWorldTreeItem = new UIHelloWorldTreeItem(this);
                }
                return this.mUIHelloWorldTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIHelloWorldTreeItem mUIHelloWorldTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIHelloWorldTreeItem : WpfTreeItem
    {
        
        public UIHelloWorldTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "Service";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UIHelloWorldTreeItem1 UIHelloWorldTreeItem1
        {
            get
            {
                if ((this.mUIHelloWorldTreeItem1 == null))
                {
                    this.mUIHelloWorldTreeItem1 = new UIHelloWorldTreeItem1(this);
                }
                return this.mUIHelloWorldTreeItem1;
            }
        }
        #endregion
        
        #region Fields
        private UIHelloWorldTreeItem1 mUIHelloWorldTreeItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIHelloWorldTreeItem1 : WpfTreeItem
    {
        
        public UIHelloWorldTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "Start";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfButton UIHelloWorldButton
        {
            get
            {
                if ((this.mUIHelloWorldButton == null))
                {
                    this.mUIHelloWorldButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIHelloWorldButton.SearchProperties[WpfButton.PropertyNames.Name] = "Hello World";
                    this.mUIHelloWorldButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIHelloWorldButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIHelloWorldButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIHelloWorldButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ServicePickerDialog : WpfWindow
    {
        
        public ServicePickerDialog(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Select A Service";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.SearchProperties[WpfWindow.PropertyNames.AutomationId] = "UI_SelectServiceWindow_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfButton Cancel
        {
            get
            {
                if ((this.mCancel == null))
                {
                    this.mCancel = new WpfButton(this);
                    #region Search Criteria
                    this.mCancel.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SelectServiceCancelButton_AutoID";
                    this.mCancel.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCancel;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class MessageBoxWindow : WpfWindow
    {
        
        public MessageBoxWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "WarewolfMessageBox";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public YesButton YesButton
        {
            get
            {
                if ((this.mYesButton == null))
                {
                    this.mYesButton = new YesButton(this);
                }
                return this.mYesButton;
            }
        }
        
        public NOButton NOButton
        {
            get
            {
                if ((this.mNOButton == null))
                {
                    this.mNOButton = new NOButton(this);
                }
                return this.mNOButton;
            }
        }
        
        public CancelButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new CancelButton(this);
                }
                return this.mCancelButton;
            }
        }
        #endregion
        
        #region Fields
        private YesButton mYesButton;
        
        private NOButton mNOButton;
        
        private CancelButton mCancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class YesButton : WpfButton
    {
        
        public YesButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "Yes";
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public WpfText YesButtonText
        {
            get
            {
                if ((this.mYesButtonText == null))
                {
                    this.mYesButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mYesButtonText.SearchProperties[WpfText.PropertyNames.Name] = "Yes";
                    this.mYesButtonText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mYesButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mYesButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class NOButton : WpfButton
    {
        
        public NOButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "No";
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public WpfText NOButtonText
        {
            get
            {
                if ((this.mNOButtonText == null))
                {
                    this.mNOButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mNOButtonText.SearchProperties[WpfText.PropertyNames.Name] = "No";
                    this.mNOButtonText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mNOButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mNOButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class CancelButton : WpfButton
    {
        
        public CancelButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "Cancel";
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public WpfText CancelButtonText
        {
            get
            {
                if ((this.mCancelButtonText == null))
                {
                    this.mCancelButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mCancelButtonText.SearchProperties[WpfText.PropertyNames.Name] = "Cancel";
                    this.mCancelButtonText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mCancelButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mCancelButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIWarewolfDEV2LEROYWARWindow : WpfWindow
    {
        
        public UIWarewolfDEV2LEROYWARWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Warewolf (DEV2\\LEROY.WARNER)";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        
        public UIItemCustom1 UIItemCustom1
        {
            get
            {
                if ((this.mUIItemCustom1 == null))
                {
                    this.mUIItemCustom1 = new UIItemCustom1(this);
                }
                return this.mUIItemCustom1;
            }
        }
        
        public WpfCustom UIGreenPointCustom
        {
            get
            {
                if ((this.mUIGreenPointCustom == null))
                {
                    this.mUIGreenPointCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIGreenPointCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mUIGreenPointCustom.SearchProperties[WpfControl.PropertyNames.Name] = "GreenPoint";
                    this.mUIGreenPointCustom.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIGreenPointCustom;
            }
        }
        
        public WpfCustom UIDboPr_CitiesGetCountCustom
        {
            get
            {
                if ((this.mUIDboPr_CitiesGetCountCustom == null))
                {
                    this.mUIDboPr_CitiesGetCountCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIDboPr_CitiesGetCountCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mUIDboPr_CitiesGetCountCustom.SearchProperties[WpfControl.PropertyNames.Name] = "dbo.Pr_CitiesGetCountries";
                    this.mUIDboPr_CitiesGetCountCustom.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIDboPr_CitiesGetCountCustom;
            }
        }
        
        public UIUI_SplitPane_AutoIDCustom UIUI_SplitPane_AutoIDCustom
        {
            get
            {
                if ((this.mUIUI_SplitPane_AutoIDCustom == null))
                {
                    this.mUIUI_SplitPane_AutoIDCustom = new UIUI_SplitPane_AutoIDCustom(this);
                }
                return this.mUIUI_SplitPane_AutoIDCustom;
            }
        }
        
        public UIItemCustom2 UIItemCustom2
        {
            get
            {
                if ((this.mUIItemCustom2 == null))
                {
                    this.mUIItemCustom2 = new UIItemCustom2(this);
                }
                return this.mUIItemCustom2;
            }
        }
        
        public WpfCustom UIEmailPluginCustom
        {
            get
            {
                if ((this.mUIEmailPluginCustom == null))
                {
                    this.mUIEmailPluginCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIEmailPluginCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mUIEmailPluginCustom.SearchProperties[WpfControl.PropertyNames.Name] = "Email Plugin";
                    this.mUIEmailPluginCustom.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIEmailPluginCustom;
            }
        }
        
        public UIUnlimitedFrameworkPlCustom UIUnlimitedFrameworkPlCustom
        {
            get
            {
                if ((this.mUIUnlimitedFrameworkPlCustom == null))
                {
                    this.mUIUnlimitedFrameworkPlCustom = new UIUnlimitedFrameworkPlCustom(this);
                }
                return this.mUIUnlimitedFrameworkPlCustom;
            }
        }
        
        public WpfCustom UIDummySentCustom
        {
            get
            {
                if ((this.mUIDummySentCustom == null))
                {
                    this.mUIDummySentCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIDummySentCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mUIDummySentCustom.SearchProperties[WpfControl.PropertyNames.Name] = "DummySent";
                    this.mUIDummySentCustom.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIDummySentCustom;
            }
        }
        
        public UIUI_ToolboxControl_AuCustom UIUI_ToolboxControl_AuCustom
        {
            get
            {
                if ((this.mUIUI_ToolboxControl_AuCustom == null))
                {
                    this.mUIUI_ToolboxControl_AuCustom = new UIUI_ToolboxControl_AuCustom(this);
                }
                return this.mUIUI_ToolboxControl_AuCustom;
            }
        }
        
        public UIActivityBuilderCustom UIActivityBuilderCustom
        {
            get
            {
                if ((this.mUIActivityBuilderCustom == null))
                {
                    this.mUIActivityBuilderCustom = new UIActivityBuilderCustom(this);
                }
                return this.mUIActivityBuilderCustom;
            }
        }
        
        public WpfWindow UIWpfWindow
        {
            get
            {
                if ((this.mUIWpfWindow == null))
                {
                    this.mUIWpfWindow = new WpfWindow(this);
                    #region Search Criteria
                    this.mUIWpfWindow.SearchProperties[WpfWindow.PropertyNames.Name] = "Select A Data Connector";
                    this.mUIWpfWindow.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
                    this.mUIWpfWindow.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWpfWindow;
            }
        }
        
        public WpfWindow UIWpfWindow1
        {
            get
            {
                if ((this.mUIWpfWindow1 == null))
                {
                    this.mUIWpfWindow1 = new WpfWindow(this);
                    #region Search Criteria
                    this.mUIWpfWindow1.SearchProperties[WpfWindow.PropertyNames.Name] = "Select A Service";
                    this.mUIWpfWindow1.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
                    this.mUIWpfWindow1.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWpfWindow1;
            }
        }
        
        public UIDockManagerCustom UIDockManagerCustom
        {
            get
            {
                if ((this.mUIDockManagerCustom == null))
                {
                    this.mUIDockManagerCustom = new UIDockManagerCustom(this);
                }
                return this.mUIDockManagerCustom;
            }
        }
        
        public UISourceNavigationViewCustom UISourceNavigationViewCustom
        {
            get
            {
                if ((this.mUISourceNavigationViewCustom == null))
                {
                    this.mUISourceNavigationViewCustom = new UISourceNavigationViewCustom(this);
                }
                return this.mUISourceNavigationViewCustom;
            }
        }
        
        public UIDev2StudioViewModelsCustom2 UIDev2StudioViewModelsCustom
        {
            get
            {
                if ((this.mUIDev2StudioViewModelsCustom == null))
                {
                    this.mUIDev2StudioViewModelsCustom = new UIDev2StudioViewModelsCustom2(this);
                }
                return this.mUIDev2StudioViewModelsCustom;
            }
        }
        
        public UIExitFullScreenF11Text UIExitFullScreenF11Text
        {
            get
            {
                if ((this.mUIExitFullScreenF11Text == null))
                {
                    this.mUIExitFullScreenF11Text = new UIExitFullScreenF11Text(this);
                }
                return this.mUIExitFullScreenF11Text;
            }
        }
        
        public UIZ16e631b821c94d90bacCustom1 UIZ16e631b821c94d90bacCustom
        {
            get
            {
                if ((this.mUIZ16e631b821c94d90bacCustom == null))
                {
                    this.mUIZ16e631b821c94d90bacCustom = new UIZ16e631b821c94d90bacCustom1(this);
                }
                return this.mUIZ16e631b821c94d90bacCustom;
            }
        }
        
        public UIZ74f8d4a07ae44ffcbd8Custom UIZ74f8d4a07ae44ffcbd8Custom
        {
            get
            {
                if ((this.mUIZ74f8d4a07ae44ffcbd8Custom == null))
                {
                    this.mUIZ74f8d4a07ae44ffcbd8Custom = new UIZ74f8d4a07ae44ffcbd8Custom(this);
                }
                return this.mUIZ74f8d4a07ae44ffcbd8Custom;
            }
        }
        
        public UIZcfe13fc0d52945a9a79Custom1 UIZcfe13fc0d52945a9a79Custom
        {
            get
            {
                if ((this.mUIZcfe13fc0d52945a9a79Custom == null))
                {
                    this.mUIZcfe13fc0d52945a9a79Custom = new UIZcfe13fc0d52945a9a79Custom1(this);
                }
                return this.mUIZcfe13fc0d52945a9a79Custom;
            }
        }
        
        public UISmallViewContentCustom UISmallViewContentCustom
        {
            get
            {
                if ((this.mUISmallViewContentCustom == null))
                {
                    this.mUISmallViewContentCustom = new UISmallViewContentCustom(this);
                }
                return this.mUISmallViewContentCustom;
            }
        }
        
        public UIVARIABLESCustom UIVARIABLESCustom
        {
            get
            {
                if ((this.mUIVARIABLESCustom == null))
                {
                    this.mUIVARIABLESCustom = new UIVARIABLESCustom(this);
                }
                return this.mUIVARIABLESCustom;
            }
        }
        
        public WpfCustom UIItemCustom4
        {
            get
            {
                if ((this.mUIItemCustom4 == null))
                {
                    this.mUIItemCustom4 = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIItemCustom4.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ToolWindow";
                    this.mUIItemCustom4.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIItemCustom4;
            }
        }
        
        public UIZaaf3f1dc2d1d407cadbCustom UIZaaf3f1dc2d1d407cadbCustom
        {
            get
            {
                if ((this.mUIZaaf3f1dc2d1d407cadbCustom == null))
                {
                    this.mUIZaaf3f1dc2d1d407cadbCustom = new UIZaaf3f1dc2d1d407cadbCustom(this);
                }
                return this.mUIZaaf3f1dc2d1d407cadbCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom mUIItemCustom;
        
        private UIItemCustom1 mUIItemCustom1;
        
        private WpfCustom mUIGreenPointCustom;
        
        private WpfCustom mUIDboPr_CitiesGetCountCustom;
        
        private UIUI_SplitPane_AutoIDCustom mUIUI_SplitPane_AutoIDCustom;
        
        private UIItemCustom2 mUIItemCustom2;
        
        private WpfCustom mUIEmailPluginCustom;
        
        private UIUnlimitedFrameworkPlCustom mUIUnlimitedFrameworkPlCustom;
        
        private WpfCustom mUIDummySentCustom;
        
        private UIUI_ToolboxControl_AuCustom mUIUI_ToolboxControl_AuCustom;
        
        private UIActivityBuilderCustom mUIActivityBuilderCustom;
        
        private WpfWindow mUIWpfWindow;
        
        private WpfWindow mUIWpfWindow1;
        
        private UIDockManagerCustom mUIDockManagerCustom;
        
        private UISourceNavigationViewCustom mUISourceNavigationViewCustom;
        
        private UIDev2StudioViewModelsCustom2 mUIDev2StudioViewModelsCustom;
        
        private UIExitFullScreenF11Text mUIExitFullScreenF11Text;
        
        private UIZ16e631b821c94d90bacCustom1 mUIZ16e631b821c94d90bacCustom;
        
        private UIZ74f8d4a07ae44ffcbd8Custom mUIZ74f8d4a07ae44ffcbd8Custom;
        
        private UIZcfe13fc0d52945a9a79Custom1 mUIZcfe13fc0d52945a9a79Custom;
        
        private UISmallViewContentCustom mUISmallViewContentCustom;
        
        private UIVARIABLESCustom mUIVARIABLESCustom;
        
        private WpfCustom mUIItemCustom4;
        
        private UIZaaf3f1dc2d1d407cadbCustom mUIZaaf3f1dc2d1d407cadbCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MenuView";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UIItemText UIItemText
        {
            get
            {
                if ((this.mUIItemText == null))
                {
                    this.mUIItemText = new UIItemText(this);
                }
                return this.mUIItemText;
            }
        }
        #endregion
        
        #region Fields
        private UIItemText mUIItemText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIItemText : WpfText
    {
        
        public UIItemText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = " ";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfText UIItemText1
        {
            get
            {
                if ((this.mUIItemText1 == null))
                {
                    this.mUIItemText1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItemText1.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mUIItemText1.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIItemText1;
            }
        }
        
        public WpfText UIItemText11
        {
            get
            {
                if ((this.mUIItemText11 == null))
                {
                    this.mUIItemText11 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItemText11.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mUIItemText11.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIItemText11;
            }
        }
        
        public WpfText UIItemText12
        {
            get
            {
                if ((this.mUIItemText12 == null))
                {
                    this.mUIItemText12 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItemText12.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mUIItemText12.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIItemText12;
            }
        }
        
        public WpfText UIItemText13
        {
            get
            {
                if ((this.mUIItemText13 == null))
                {
                    this.mUIItemText13 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItemText13.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mUIItemText13.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIItemText13;
            }
        }
        
        public WpfText UIItemText14
        {
            get
            {
                if ((this.mUIItemText14 == null))
                {
                    this.mUIItemText14 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItemText14.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mUIItemText14.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIItemText14;
            }
        }
        
        public WpfText UIItemText15
        {
            get
            {
                if ((this.mUIItemText15 == null))
                {
                    this.mUIItemText15 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItemText15.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mUIItemText15.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIItemText15;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIItemText1;
        
        private WpfText mUIItemText11;
        
        private WpfText mUIItemText12;
        
        private WpfText mUIItemText13;
        
        private WpfText mUIItemText14;
        
        private WpfText mUIItemText15;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIItemCustom1 : WpfCustom
    {
        
        public UIItemCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ManageDatabaseServiceControl";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UIInputsListList UIInputsListList
        {
            get
            {
                if ((this.mUIInputsListList == null))
                {
                    this.mUIInputsListList = new UIInputsListList(this);
                }
                return this.mUIInputsListList;
            }
        }
        #endregion
        
        #region Fields
        private UIInputsListList mUIInputsListList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIInputsListList : WpfList
    {
        
        public UIInputsListList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "InputsList";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UIWarewolfCoreServiceIListItem UIWarewolfCoreServiceIListItem
        {
            get
            {
                if ((this.mUIWarewolfCoreServiceIListItem == null))
                {
                    this.mUIWarewolfCoreServiceIListItem = new UIWarewolfCoreServiceIListItem(this);
                }
                return this.mUIWarewolfCoreServiceIListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIWarewolfCoreServiceIListItem mUIWarewolfCoreServiceIListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIWarewolfCoreServiceIListItem : WpfListItem
    {
        
        public UIWarewolfCoreServiceIListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Core.ServiceInput";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITestdataEdit
        {
            get
            {
                if ((this.mUITestdataEdit == null))
                {
                    this.mUITestdataEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITestdataEdit.SearchProperties[WpfEdit.PropertyNames.HelpText] = "Test data";
                    this.mUITestdataEdit.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUITestdataEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITestdataEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIUI_SplitPane_AutoIDCustom : WpfCustom
    {
        
        public UIUI_SplitPane_AutoIDCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SplitPane_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UIUI_TabManager_AutoIDTabList UIUI_TabManager_AutoIDTabList
        {
            get
            {
                if ((this.mUIUI_TabManager_AutoIDTabList == null))
                {
                    this.mUIUI_TabManager_AutoIDTabList = new UIUI_TabManager_AutoIDTabList(this);
                }
                return this.mUIUI_TabManager_AutoIDTabList;
            }
        }
        #endregion
        
        #region Fields
        private UIUI_TabManager_AutoIDTabList mUIUI_TabManager_AutoIDTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIUI_TabManager_AutoIDTabList : WpfTabList
    {
        
        public UIUI_TabManager_AutoIDTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "UI_TabManager_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UIDev2ViewModelsSourceTabPage UIDev2ViewModelsSourceTabPage
        {
            get
            {
                if ((this.mUIDev2ViewModelsSourceTabPage == null))
                {
                    this.mUIDev2ViewModelsSourceTabPage = new UIDev2ViewModelsSourceTabPage(this);
                }
                return this.mUIDev2ViewModelsSourceTabPage;
            }
        }
        
        public UIDev2ViewModelsSourceTabPage1 UIDev2ViewModelsSourceTabPage1
        {
            get
            {
                if ((this.mUIDev2ViewModelsSourceTabPage1 == null))
                {
                    this.mUIDev2ViewModelsSourceTabPage1 = new UIDev2ViewModelsSourceTabPage1(this);
                }
                return this.mUIDev2ViewModelsSourceTabPage1;
            }
        }
        #endregion
        
        #region Fields
        private UIDev2ViewModelsSourceTabPage mUIDev2ViewModelsSourceTabPage;
        
        private UIDev2ViewModelsSourceTabPage1 mUIDev2ViewModelsSourceTabPage1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIDev2ViewModelsSourceTabPage : WpfTabPage
    {
        
        public UIDev2ViewModelsSourceTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.DB.IDatabaseService]";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UIDev2StudioViewModelsCustom UIDev2StudioViewModelsCustom
        {
            get
            {
                if ((this.mUIDev2StudioViewModelsCustom == null))
                {
                    this.mUIDev2StudioViewModelsCustom = new UIDev2StudioViewModelsCustom(this);
                }
                return this.mUIDev2StudioViewModelsCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDev2StudioViewModelsCustom mUIDev2StudioViewModelsCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIDev2StudioViewModelsCustom : WpfCustom
    {
        
        public UIDev2StudioViewModelsCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfButton UITestButton
        {
            get
            {
                if ((this.mUITestButton == null))
                {
                    this.mUITestButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUITestButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestActionButton";
                    this.mUITestButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUITestButton;
            }
        }
        
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "RefreshButton";
                    this.mUIItemButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public WpfButton UIItemButton1
        {
            get
            {
                if ((this.mUIItemButton1 == null))
                {
                    this.mUIItemButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton1.SearchProperties[WpfButton.PropertyNames.Name] = " ... ";
                    this.mUIItemButton1.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIItemButton1;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUITestButton;
        
        private WpfButton mUIItemButton;
        
        private WpfButton mUIItemButton1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIDev2ViewModelsSourceTabPage1 : WpfTabPage
    {
        
        public UIDev2ViewModelsSourceTabPage1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.IPluginService]";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UIDev2StudioViewModelsCustom1 UIDev2StudioViewModelsCustom
        {
            get
            {
                if ((this.mUIDev2StudioViewModelsCustom == null))
                {
                    this.mUIDev2StudioViewModelsCustom = new UIDev2StudioViewModelsCustom1(this);
                }
                return this.mUIDev2StudioViewModelsCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDev2StudioViewModelsCustom1 mUIDev2StudioViewModelsCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIDev2StudioViewModelsCustom1 : WpfCustom
    {
        
        public UIDev2StudioViewModelsCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfButton UITestButton
        {
            get
            {
                if ((this.mUITestButton == null))
                {
                    this.mUITestButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUITestButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestButton";
                    this.mUITestButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUITestButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUITestButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIItemCustom2 : WpfCustom
    {
        
        public UIItemCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ManagePluginServiceControl";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UIInputGridTable UIInputGridTable
        {
            get
            {
                if ((this.mUIInputGridTable == null))
                {
                    this.mUIInputGridTable = new UIInputGridTable(this);
                }
                return this.mUIInputGridTable;
            }
        }
        #endregion
        
        #region Fields
        private UIInputGridTable mUIInputGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIInputGridTable : WpfTable
    {
        
        public UIInputGridTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "InputGrid";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfCell UIValueCell
        {
            get
            {
                if ((this.mUIValueCell == null))
                {
                    this.mUIValueCell = new WpfCell(this);
                    #region Search Criteria
                    this.mUIValueCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
                    this.mUIValueCell.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIValueCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfCell mUIValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIUnlimitedFrameworkPlCustom : WpfCustom
    {
        
        public UIUnlimitedFrameworkPlCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Unlimited.Framework.Plugins.EmailPlugin";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfText UIUnlimitedFrameworkPlText
        {
            get
            {
                if ((this.mUIUnlimitedFrameworkPlText == null))
                {
                    this.mUIUnlimitedFrameworkPlText = new WpfText(this);
                    #region Search Criteria
                    this.mUIUnlimitedFrameworkPlText.SearchProperties[WpfText.PropertyNames.Name] = "Unlimited.Framework.Plugins.EmailPlugin";
                    this.mUIUnlimitedFrameworkPlText.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIUnlimitedFrameworkPlText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIUnlimitedFrameworkPlText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIUI_ToolboxControl_AuCustom : WpfCustom
    {
        
        public UIUI_ToolboxControl_AuCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ToolboxView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_ToolboxControl_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UIToolListBoxList UIToolListBoxList
        {
            get
            {
                if ((this.mUIToolListBoxList == null))
                {
                    this.mUIToolListBoxList = new UIToolListBoxList(this);
                }
                return this.mUIToolListBoxList;
            }
        }
        
        public UIToolButtonImageText UIToolButtonImageText
        {
            get
            {
                if ((this.mUIToolButtonImageText == null))
                {
                    this.mUIToolButtonImageText = new UIToolButtonImageText(this);
                }
                return this.mUIToolButtonImageText;
            }
        }
        
        public UIToolButtonImageText1 UIToolButtonImageText1
        {
            get
            {
                if ((this.mUIToolButtonImageText1 == null))
                {
                    this.mUIToolButtonImageText1 = new UIToolButtonImageText1(this);
                }
                return this.mUIToolButtonImageText1;
            }
        }
        #endregion
        
        #region Fields
        private UIToolListBoxList mUIToolListBoxList;
        
        private UIToolButtonImageText mUIToolButtonImageText;
        
        private UIToolButtonImageText1 mUIToolButtonImageText1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIToolListBoxList : WpfList
    {
        
        public UIToolListBoxList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "ToolListBox";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UIControlFlowGroup UIControlFlowGroup
        {
            get
            {
                if ((this.mUIControlFlowGroup == null))
                {
                    this.mUIControlFlowGroup = new UIControlFlowGroup(this);
                }
                return this.mUIControlFlowGroup;
            }
        }
        
        public UIFileFolderGroup UIFileFolderGroup
        {
            get
            {
                if ((this.mUIFileFolderGroup == null))
                {
                    this.mUIFileFolderGroup = new UIFileFolderGroup(this);
                }
                return this.mUIFileFolderGroup;
            }
        }
        
        public UILoopConstructsGroup UILoopConstructsGroup
        {
            get
            {
                if ((this.mUILoopConstructsGroup == null))
                {
                    this.mUILoopConstructsGroup = new UILoopConstructsGroup(this);
                }
                return this.mUILoopConstructsGroup;
            }
        }
        
        public UIRecordsetGroup UIRecordsetGroup
        {
            get
            {
                if ((this.mUIRecordsetGroup == null))
                {
                    this.mUIRecordsetGroup = new UIRecordsetGroup(this);
                }
                return this.mUIRecordsetGroup;
            }
        }
        
        public UIScriptingGroup UIScriptingGroup
        {
            get
            {
                if ((this.mUIScriptingGroup == null))
                {
                    this.mUIScriptingGroup = new UIScriptingGroup(this);
                }
                return this.mUIScriptingGroup;
            }
        }
        
        public UISharepointGroup UISharepointGroup
        {
            get
            {
                if ((this.mUISharepointGroup == null))
                {
                    this.mUISharepointGroup = new UISharepointGroup(this);
                }
                return this.mUISharepointGroup;
            }
        }
        
        public UIUtilityGroup UIUtilityGroup
        {
            get
            {
                if ((this.mUIUtilityGroup == null))
                {
                    this.mUIUtilityGroup = new UIUtilityGroup(this);
                }
                return this.mUIUtilityGroup;
            }
        }
        
        public WpfGroup UIConnectorsGroup
        {
            get
            {
                if ((this.mUIConnectorsGroup == null))
                {
                    this.mUIConnectorsGroup = new WpfGroup(this);
                    #region Search Criteria
                    this.mUIConnectorsGroup.SearchProperties[WpfGroup.PropertyNames.Name] = "Connectors";
                    this.mUIConnectorsGroup.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIConnectorsGroup;
            }
        }
        
        public UIResourcesGroup UIResourcesGroup
        {
            get
            {
                if ((this.mUIResourcesGroup == null))
                {
                    this.mUIResourcesGroup = new UIResourcesGroup(this);
                }
                return this.mUIResourcesGroup;
            }
        }
        
        public UIDataGroup UIDataGroup
        {
            get
            {
                if ((this.mUIDataGroup == null))
                {
                    this.mUIDataGroup = new UIDataGroup(this);
                }
                return this.mUIDataGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIControlFlowGroup mUIControlFlowGroup;
        
        private UIFileFolderGroup mUIFileFolderGroup;
        
        private UILoopConstructsGroup mUILoopConstructsGroup;
        
        private UIRecordsetGroup mUIRecordsetGroup;
        
        private UIScriptingGroup mUIScriptingGroup;
        
        private UISharepointGroup mUISharepointGroup;
        
        private UIUtilityGroup mUIUtilityGroup;
        
        private WpfGroup mUIConnectorsGroup;
        
        private UIResourcesGroup mUIResourcesGroup;
        
        private UIDataGroup mUIDataGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIControlFlowGroup : WpfGroup
    {
        
        public UIControlFlowGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Control Flow";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIWarewolfStudioViewMoListItem
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem == null))
                {
                    this.mUIWarewolfStudioViewMoListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem;
            }
        }
        
        public WpfListItem UIWarewolfStudioViewMoListItem1
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem1 == null))
                {
                    this.mUIWarewolfStudioViewMoListItem1 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem1.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem1.SearchProperties[WpfListItem.PropertyNames.Instance] = "2";
                    this.mUIWarewolfStudioViewMoListItem1.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem1;
            }
        }
        
        public WpfListItem UIWarewolfStudioViewMoListItem2
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem2 == null))
                {
                    this.mUIWarewolfStudioViewMoListItem2 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem2.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem2.SearchProperties[WpfListItem.PropertyNames.Instance] = "2";
                    this.mUIWarewolfStudioViewMoListItem2.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem2;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIWarewolfStudioViewMoListItem;
        
        private WpfListItem mUIWarewolfStudioViewMoListItem1;
        
        private WpfListItem mUIWarewolfStudioViewMoListItem2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIFileFolderGroup : WpfGroup
    {
        
        public UIFileFolderGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "File & Folder";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIWarewolfStudioViewMoListItem
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem == null))
                {
                    this.mUIWarewolfStudioViewMoListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem.SearchProperties[WpfListItem.PropertyNames.Instance] = "2";
                    this.mUIWarewolfStudioViewMoListItem.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem;
            }
        }
        
        public WpfListItem UIWarewolfStudioViewMoListItem1
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem1 == null))
                {
                    this.mUIWarewolfStudioViewMoListItem1 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem1.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem1.SearchProperties[WpfListItem.PropertyNames.Instance] = "4";
                    this.mUIWarewolfStudioViewMoListItem1.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem1;
            }
        }
        
        public WpfListItem UIWarewolfStudioViewMoListItem2
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem2 == null))
                {
                    this.mUIWarewolfStudioViewMoListItem2 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem2.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem2.SearchProperties[WpfListItem.PropertyNames.Instance] = "4";
                    this.mUIWarewolfStudioViewMoListItem2.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem2;
            }
        }
        
        public WpfListItem UIWarewolfStudioViewMoListItem3
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem3 == null))
                {
                    this.mUIWarewolfStudioViewMoListItem3 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem3.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem3.SearchProperties[WpfListItem.PropertyNames.Instance] = "5";
                    this.mUIWarewolfStudioViewMoListItem3.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem3;
            }
        }
        
        public WpfListItem UIWarewolfStudioViewMoListItem4
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem4 == null))
                {
                    this.mUIWarewolfStudioViewMoListItem4 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem4.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem4.SearchProperties[WpfListItem.PropertyNames.Instance] = "7";
                    this.mUIWarewolfStudioViewMoListItem4.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem4;
            }
        }
        
        public WpfListItem UIWarewolfStudioViewMoListItem5
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem5 == null))
                {
                    this.mUIWarewolfStudioViewMoListItem5 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem5.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem5.SearchProperties[WpfListItem.PropertyNames.Instance] = "10";
                    this.mUIWarewolfStudioViewMoListItem5.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem5;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIWarewolfStudioViewMoListItem;
        
        private WpfListItem mUIWarewolfStudioViewMoListItem1;
        
        private WpfListItem mUIWarewolfStudioViewMoListItem2;
        
        private WpfListItem mUIWarewolfStudioViewMoListItem3;
        
        private WpfListItem mUIWarewolfStudioViewMoListItem4;
        
        private WpfListItem mUIWarewolfStudioViewMoListItem5;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UILoopConstructsGroup : WpfGroup
    {
        
        public UILoopConstructsGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Loop Constructs";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIWarewolfStudioViewMoListItem
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem == null))
                {
                    this.mUIWarewolfStudioViewMoListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIWarewolfStudioViewMoListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIRecordsetGroup : WpfGroup
    {
        
        public UIRecordsetGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Recordset";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIWarewolfStudioViewMoListItem
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem == null))
                {
                    this.mUIWarewolfStudioViewMoListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem.SearchProperties[WpfListItem.PropertyNames.Instance] = "4";
                    this.mUIWarewolfStudioViewMoListItem.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem;
            }
        }
        
        public WpfListItem UIWarewolfStudioViewMoListItem1
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem1 == null))
                {
                    this.mUIWarewolfStudioViewMoListItem1 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem1.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem1.SearchProperties[WpfListItem.PropertyNames.Instance] = "7";
                    this.mUIWarewolfStudioViewMoListItem1.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem1;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIWarewolfStudioViewMoListItem;
        
        private WpfListItem mUIWarewolfStudioViewMoListItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIScriptingGroup : WpfGroup
    {
        
        public UIScriptingGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Scripting";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIWarewolfStudioViewMoListItem
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem == null))
                {
                    this.mUIWarewolfStudioViewMoListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem;
            }
        }
        
        public WpfListItem UIWarewolfStudioViewMoListItem1
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem1 == null))
                {
                    this.mUIWarewolfStudioViewMoListItem1 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem1.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem1.SearchProperties[WpfListItem.PropertyNames.Instance] = "2";
                    this.mUIWarewolfStudioViewMoListItem1.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem1;
            }
        }
        
        public WpfListItem UIWarewolfStudioViewMoListItem2
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem2 == null))
                {
                    this.mUIWarewolfStudioViewMoListItem2 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem2.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem2.SearchProperties[WpfListItem.PropertyNames.Instance] = "3";
                    this.mUIWarewolfStudioViewMoListItem2.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem2;
            }
        }
        
        public WpfListItem UIWarewolfStudioViewMoListItem3
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem3 == null))
                {
                    this.mUIWarewolfStudioViewMoListItem3 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem3.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem3.SearchProperties[WpfListItem.PropertyNames.Instance] = "3";
                    this.mUIWarewolfStudioViewMoListItem3.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem3;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIWarewolfStudioViewMoListItem;
        
        private WpfListItem mUIWarewolfStudioViewMoListItem1;
        
        private WpfListItem mUIWarewolfStudioViewMoListItem2;
        
        private WpfListItem mUIWarewolfStudioViewMoListItem3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UISharepointGroup : WpfGroup
    {
        
        public UISharepointGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Sharepoint";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIWarewolfStudioViewMoListItem
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem == null))
                {
                    this.mUIWarewolfStudioViewMoListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem.SearchProperties[WpfListItem.PropertyNames.Instance] = "2";
                    this.mUIWarewolfStudioViewMoListItem.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIWarewolfStudioViewMoListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIUtilityGroup : WpfGroup
    {
        
        public UIUtilityGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Utility";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIWarewolfStudioViewMoListItem
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem == null))
                {
                    this.mUIWarewolfStudioViewMoListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem;
            }
        }
        
        public WpfListItem UIWarewolfStudioViewMoListItem1
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem1 == null))
                {
                    this.mUIWarewolfStudioViewMoListItem1 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem1.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem1.SearchProperties[WpfListItem.PropertyNames.Instance] = "3";
                    this.mUIWarewolfStudioViewMoListItem1.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem1;
            }
        }
        
        public WpfListItem UIWarewolfStudioViewMoListItem2
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem2 == null))
                {
                    this.mUIWarewolfStudioViewMoListItem2 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem2.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem2.SearchProperties[WpfListItem.PropertyNames.Instance] = "9";
                    this.mUIWarewolfStudioViewMoListItem2.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem2;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIWarewolfStudioViewMoListItem;
        
        private WpfListItem mUIWarewolfStudioViewMoListItem1;
        
        private WpfListItem mUIWarewolfStudioViewMoListItem2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIResourcesGroup : WpfGroup
    {
        
        public UIResourcesGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Resources";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIWarewolfStudioViewMoListItem
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem == null))
                {
                    this.mUIWarewolfStudioViewMoListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem.SearchProperties[WpfListItem.PropertyNames.Instance] = "2";
                    this.mUIWarewolfStudioViewMoListItem.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem;
            }
        }
        
        public WpfListItem UIWarewolfStudioViewMoListItem1
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem1 == null))
                {
                    this.mUIWarewolfStudioViewMoListItem1 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem1.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem1.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem1;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIWarewolfStudioViewMoListItem;
        
        private WpfListItem mUIWarewolfStudioViewMoListItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIDataGroup : WpfGroup
    {
        
        public UIDataGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Data";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIWarewolfStudioViewMoListItem
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem == null))
                {
                    this.mUIWarewolfStudioViewMoListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem;
            }
        }
        
        public WpfListItem UIWarewolfStudioViewMoListItem1
        {
            get
            {
                if ((this.mUIWarewolfStudioViewMoListItem1 == null))
                {
                    this.mUIWarewolfStudioViewMoListItem1 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIWarewolfStudioViewMoListItem1.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
                    this.mUIWarewolfStudioViewMoListItem1.SearchProperties[WpfListItem.PropertyNames.Instance] = "6";
                    this.mUIWarewolfStudioViewMoListItem1.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWarewolfStudioViewMoListItem1;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIWarewolfStudioViewMoListItem;
        
        private WpfListItem mUIWarewolfStudioViewMoListItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIToolButtonImageText : WpfText
    {
        
        public UIToolButtonImageText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "ToolButtonImage";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfImage UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUIItemImage.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIToolButtonImageText1 : WpfText
    {
        
        public UIToolButtonImageText1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "ToolButtonImage";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfImage UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUIItemImage.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIActivityBuilderCustom : WpfCustom
    {
        
        public UIActivityBuilderCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ActivityTypeDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActivityTypeDesigner";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UIWorkflowItemPresenteCustom UIWorkflowItemPresenteCustom
        {
            get
            {
                if ((this.mUIWorkflowItemPresenteCustom == null))
                {
                    this.mUIWorkflowItemPresenteCustom = new UIWorkflowItemPresenteCustom(this);
                }
                return this.mUIWorkflowItemPresenteCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIWorkflowItemPresenteCustom mUIWorkflowItemPresenteCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIWorkflowItemPresenteCustom : WpfCustom
    {
        
        public UIWorkflowItemPresenteCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "WorkflowItemPresenter";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfCustom UIFlowchartCustom
        {
            get
            {
                if ((this.mUIFlowchartCustom == null))
                {
                    this.mUIFlowchartCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIFlowchartCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowchartDesigner";
                    this.mUIFlowchartCustom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Unsaved 1(FlowchartDesigner)";
                    this.mUIFlowchartCustom.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIFlowchartCustom;
            }
        }
        
        public WpfCustom UIFlowchartCustom1
        {
            get
            {
                if ((this.mUIFlowchartCustom1 == null))
                {
                    this.mUIFlowchartCustom1 = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIFlowchartCustom1.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowchartDesigner";
                    this.mUIFlowchartCustom1.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Unsaved 3(FlowchartDesigner)";
                    this.mUIFlowchartCustom1.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIFlowchartCustom1;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mUIFlowchartCustom;
        
        private WpfCustom mUIFlowchartCustom1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIDockManagerCustom : WpfCustom
    {
        
        public UIDockManagerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamDockManager";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DockManager";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UIZ16e631b821c94d90bacCustom UIZ16e631b821c94d90bacCustom
        {
            get
            {
                if ((this.mUIZ16e631b821c94d90bacCustom == null))
                {
                    this.mUIZ16e631b821c94d90bacCustom = new UIZ16e631b821c94d90bacCustom(this);
                }
                return this.mUIZ16e631b821c94d90bacCustom;
            }
        }
        
        public UIZcfe13fc0d52945a9a79Custom UIZcfe13fc0d52945a9a79Custom
        {
            get
            {
                if ((this.mUIZcfe13fc0d52945a9a79Custom == null))
                {
                    this.mUIZcfe13fc0d52945a9a79Custom = new UIZcfe13fc0d52945a9a79Custom(this);
                }
                return this.mUIZcfe13fc0d52945a9a79Custom;
            }
        }
        
        public UIZ9651af96607d48d7b87Custom UIZ9651af96607d48d7b87Custom
        {
            get
            {
                if ((this.mUIZ9651af96607d48d7b87Custom == null))
                {
                    this.mUIZ9651af96607d48d7b87Custom = new UIZ9651af96607d48d7b87Custom(this);
                }
                return this.mUIZ9651af96607d48d7b87Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIZ16e631b821c94d90bacCustom mUIZ16e631b821c94d90bacCustom;
        
        private UIZcfe13fc0d52945a9a79Custom mUIZcfe13fc0d52945a9a79Custom;
        
        private UIZ9651af96607d48d7b87Custom mUIZ9651af96607d48d7b87Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIZ16e631b821c94d90bacCustom : WpfCustom
    {
        
        public UIZ16e631b821c94d90bacCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Z16e631b821c94d90bac5a069b4483750";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfCustom UIWHATDOESTHISDOCustom
        {
            get
            {
                if ((this.mUIWHATDOESTHISDOCustom == null))
                {
                    this.mUIWHATDOESTHISDOCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIWHATDOESTHISDOCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
                    this.mUIWHATDOESTHISDOCustom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Help";
                    this.mUIWHATDOESTHISDOCustom.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWHATDOESTHISDOCustom;
            }
        }
        
        public WpfCustom UIEXPLORERCustom
        {
            get
            {
                if ((this.mUIEXPLORERCustom == null))
                {
                    this.mUIEXPLORERCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIEXPLORERCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
                    this.mUIEXPLORERCustom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Explorer";
                    this.mUIEXPLORERCustom.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIEXPLORERCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mUIWHATDOESTHISDOCustom;
        
        private WpfCustom mUIEXPLORERCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIZcfe13fc0d52945a9a79Custom : WpfCustom
    {
        
        public UIZcfe13fc0d52945a9a79Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Zcfe13fc0d52945a9a794a85eb08d97f5";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfCustom UITOOLBOXCustom
        {
            get
            {
                if ((this.mUITOOLBOXCustom == null))
                {
                    this.mUITOOLBOXCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUITOOLBOXCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
                    this.mUITOOLBOXCustom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Toolbox";
                    this.mUITOOLBOXCustom.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUITOOLBOXCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mUITOOLBOXCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIZ9651af96607d48d7b87Custom : WpfCustom
    {
        
        public UIZ9651af96607d48d7b87Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Z9651af96607d48d7b87bf874413e658d";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfCustom UITOOLBOXCustom
        {
            get
            {
                if ((this.mUITOOLBOXCustom == null))
                {
                    this.mUITOOLBOXCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUITOOLBOXCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
                    this.mUITOOLBOXCustom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Toolbox";
                    this.mUITOOLBOXCustom.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUITOOLBOXCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mUITOOLBOXCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UISourceNavigationViewCustom : WpfCustom
    {
        
        public UISourceNavigationViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ExplorerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SourceNavigationView";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfEdit UISearchTextBoxEdit
        {
            get
            {
                if ((this.mUISearchTextBoxEdit == null))
                {
                    this.mUISearchTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUISearchTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
                    this.mUISearchTextBoxEdit.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUISearchTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUISearchTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIDev2StudioViewModelsCustom2 : WpfCustom
    {
        
        public UIDev2StudioViewModelsCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UIUI_SchedulerView_AutCustom UIUI_SchedulerView_AutCustom
        {
            get
            {
                if ((this.mUIUI_SchedulerView_AutCustom == null))
                {
                    this.mUIUI_SchedulerView_AutCustom = new UIUI_SchedulerView_AutCustom(this);
                }
                return this.mUIUI_SchedulerView_AutCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIUI_SchedulerView_AutCustom mUIUI_SchedulerView_AutCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIUI_SchedulerView_AutCustom : WpfCustom
    {
        
        public UIUI_SchedulerView_AutCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SchedulerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SchedulerView_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfButton UIItemButton1
        {
            get
            {
                if ((this.mUIItemButton1 == null))
                {
                    this.mUIItemButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_EditTriggerButton_AutoID";
                    this.mUIItemButton1.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIItemButton1;
            }
        }
        
        public WpfCheckBox UIRuntaskassoonaspossiCheckBox
        {
            get
            {
                if ((this.mUIRuntaskassoonaspossiCheckBox == null))
                {
                    this.mUIRuntaskassoonaspossiCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIRuntaskassoonaspossiCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_RunAsapCheckBox";
                    this.mUIRuntaskassoonaspossiCheckBox.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIRuntaskassoonaspossiCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIItemButton1;
        
        private WpfCheckBox mUIRuntaskassoonaspossiCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIExitFullScreenF11Text : WpfText
    {
        
        public UIExitFullScreenF11Text(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Exit Full Screen (F11)";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink UIExitFullScreenF11Hyperlink
        {
            get
            {
                if ((this.mUIExitFullScreenF11Hyperlink == null))
                {
                    this.mUIExitFullScreenF11Hyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mUIExitFullScreenF11Hyperlink.SearchProperties[WpfHyperlink.PropertyNames.Name] = "Exit Full Screen (F11)";
                    this.mUIExitFullScreenF11Hyperlink.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIExitFullScreenF11Hyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mUIExitFullScreenF11Hyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIZ16e631b821c94d90bacCustom1 : WpfCustom
    {
        
        public UIZ16e631b821c94d90bacCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Z16e631b821c94d90bac5a069b4483750";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfCustom UIEXPLORERCustom
        {
            get
            {
                if ((this.mUIEXPLORERCustom == null))
                {
                    this.mUIEXPLORERCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIEXPLORERCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
                    this.mUIEXPLORERCustom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Explorer";
                    this.mUIEXPLORERCustom.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIEXPLORERCustom;
            }
        }
        
        public UIZ2da82c89e9c54f37a62TabList UIZ2da82c89e9c54f37a62TabList
        {
            get
            {
                if ((this.mUIZ2da82c89e9c54f37a62TabList == null))
                {
                    this.mUIZ2da82c89e9c54f37a62TabList = new UIZ2da82c89e9c54f37a62TabList(this);
                }
                return this.mUIZ2da82c89e9c54f37a62TabList;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mUIEXPLORERCustom;
        
        private UIZ2da82c89e9c54f37a62TabList mUIZ2da82c89e9c54f37a62TabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIZ2da82c89e9c54f37a62TabList : WpfTabList
    {
        
        public UIZ2da82c89e9c54f37a62TabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "Z2da82c89e9c54f37a622562186283aaf";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UIWHATDOESTHISDOTabPage UIWHATDOESTHISDOTabPage
        {
            get
            {
                if ((this.mUIWHATDOESTHISDOTabPage == null))
                {
                    this.mUIWHATDOESTHISDOTabPage = new UIWHATDOESTHISDOTabPage(this);
                }
                return this.mUIWHATDOESTHISDOTabPage;
            }
        }
        #endregion
        
        #region Fields
        private UIWHATDOESTHISDOTabPage mUIWHATDOESTHISDOTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIWHATDOESTHISDOTabPage : WpfTabPage
    {
        
        public UIWHATDOESTHISDOTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "WHAT DOES THIS DO?";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UIWHATDOESTHISDOCustom UIWHATDOESTHISDOCustom
        {
            get
            {
                if ((this.mUIWHATDOESTHISDOCustom == null))
                {
                    this.mUIWHATDOESTHISDOCustom = new UIWHATDOESTHISDOCustom(this);
                }
                return this.mUIWHATDOESTHISDOCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIWHATDOESTHISDOCustom mUIWHATDOESTHISDOCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIWHATDOESTHISDOCustom : WpfCustom
    {
        
        public UIWHATDOESTHISDOCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Help";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfText UIWHATDOESTHISDOText
        {
            get
            {
                if ((this.mUIWHATDOESTHISDOText == null))
                {
                    this.mUIWHATDOESTHISDOText = new WpfText(this);
                    #region Search Criteria
                    this.mUIWHATDOESTHISDOText.SearchProperties[WpfText.PropertyNames.Name] = "WHAT DOES THIS DO?";
                    this.mUIWHATDOESTHISDOText.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIWHATDOESTHISDOText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIWHATDOESTHISDOText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIZ74f8d4a07ae44ffcbd8Custom : WpfCustom
    {
        
        public UIZ74f8d4a07ae44ffcbd8Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Z74f8d4a07ae44ffcbd8a047e14ef9e9c";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfCustom UIVARIABLESCustom
        {
            get
            {
                if ((this.mUIVARIABLESCustom == null))
                {
                    this.mUIVARIABLESCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIVARIABLESCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
                    this.mUIVARIABLESCustom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Variables";
                    this.mUIVARIABLESCustom.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIVARIABLESCustom;
            }
        }
        
        public WpfCustom UIOUTPUTCustom
        {
            get
            {
                if ((this.mUIOUTPUTCustom == null))
                {
                    this.mUIOUTPUTCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIOUTPUTCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
                    this.mUIOUTPUTCustom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "OutputPane";
                    this.mUIOUTPUTCustom.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIOUTPUTCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mUIVARIABLESCustom;
        
        private WpfCustom mUIOUTPUTCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIZcfe13fc0d52945a9a79Custom1 : WpfCustom
    {
        
        public UIZcfe13fc0d52945a9a79Custom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Zcfe13fc0d52945a9a794a85eb08d97f5";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfCustom UITOOLBOXCustom
        {
            get
            {
                if ((this.mUITOOLBOXCustom == null))
                {
                    this.mUITOOLBOXCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUITOOLBOXCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
                    this.mUITOOLBOXCustom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Toolbox";
                    this.mUITOOLBOXCustom.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUITOOLBOXCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mUITOOLBOXCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UISmallViewContentCustom : WpfCustom
    {
        
        public UISmallViewContentCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UISmallDataGridTable UISmallDataGridTable
        {
            get
            {
                if ((this.mUISmallDataGridTable == null))
                {
                    this.mUISmallDataGridTable = new UISmallDataGridTable(this);
                }
                return this.mUISmallDataGridTable;
            }
        }
        #endregion
        
        #region Fields
        private UISmallDataGridTable mUISmallDataGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UISmallDataGridTable : WpfTable
    {
        
        public UISmallDataGridTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UIUI_ActivityGridRow_0Row UIUI_ActivityGridRow_0Row
        {
            get
            {
                if ((this.mUIUI_ActivityGridRow_0Row == null))
                {
                    this.mUIUI_ActivityGridRow_0Row = new UIUI_ActivityGridRow_0Row(this);
                }
                return this.mUIUI_ActivityGridRow_0Row;
            }
        }
        
        public UIUI_ActivityGridRow_1Row UIUI_ActivityGridRow_1Row
        {
            get
            {
                if ((this.mUIUI_ActivityGridRow_1Row == null))
                {
                    this.mUIUI_ActivityGridRow_1Row = new UIUI_ActivityGridRow_1Row(this);
                }
                return this.mUIUI_ActivityGridRow_1Row;
            }
        }
        #endregion
        
        #region Fields
        private UIUI_ActivityGridRow_0Row mUIUI_ActivityGridRow_0Row;
        
        private UIUI_ActivityGridRow_1Row mUIUI_ActivityGridRow_1Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIUI_ActivityGridRow_0Row : WpfRow
    {
        
        public UIUI_ActivityGridRow_0Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_0_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfCell UIItemUnlimitedApplicaCell
        {
            get
            {
                if ((this.mUIItemUnlimitedApplicaCell == null))
                {
                    this.mUIItemUnlimitedApplicaCell = new WpfCell(this);
                    #region Search Criteria
                    this.mUIItemUnlimitedApplicaCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
                    this.mUIItemUnlimitedApplicaCell.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
                    this.mUIItemUnlimitedApplicaCell.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
                    this.mUIItemUnlimitedApplicaCell.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIItemUnlimitedApplicaCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfCell mUIItemUnlimitedApplicaCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIUI_ActivityGridRow_1Row : WpfRow
    {
        
        public UIUI_ActivityGridRow_1Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_1_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfCell UIItemUnlimitedApplicaCell
        {
            get
            {
                if ((this.mUIItemUnlimitedApplicaCell == null))
                {
                    this.mUIItemUnlimitedApplicaCell = new WpfCell(this);
                    #region Search Criteria
                    this.mUIItemUnlimitedApplicaCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
                    this.mUIItemUnlimitedApplicaCell.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
                    this.mUIItemUnlimitedApplicaCell.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
                    this.mUIItemUnlimitedApplicaCell.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIItemUnlimitedApplicaCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfCell mUIItemUnlimitedApplicaCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIVARIABLESCustom : WpfCustom
    {
        
        public UIVARIABLESCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Variables";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UIUI_VariablesControl_Custom UIUI_VariablesControl_Custom
        {
            get
            {
                if ((this.mUIUI_VariablesControl_Custom == null))
                {
                    this.mUIUI_VariablesControl_Custom = new UIUI_VariablesControl_Custom(this);
                }
                return this.mUIUI_VariablesControl_Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIUI_VariablesControl_Custom mUIUI_VariablesControl_Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIUI_VariablesControl_Custom : WpfCustom
    {
        
        public UIUI_VariablesControl_Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DataListView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_VariablesControl_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfTree UIUI_VariableTreeView_Tree
        {
            get
            {
                if ((this.mUIUI_VariableTreeView_Tree == null))
                {
                    this.mUIUI_VariableTreeView_Tree = new WpfTree(this);
                    #region Search Criteria
                    this.mUIUI_VariableTreeView_Tree.SearchProperties[WpfTree.PropertyNames.AutomationId] = "UI_VariableTreeView_AutoID";
                    this.mUIUI_VariableTreeView_Tree.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIUI_VariableTreeView_Tree;
            }
        }
        #endregion
        
        #region Fields
        private WpfTree mUIUI_VariableTreeView_Tree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIZaaf3f1dc2d1d407cadbCustom : WpfCustom
    {
        
        public UIZaaf3f1dc2d1d407cadbCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Zaaf3f1dc2d1d407cadb945c85197b0f6";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UIZ74f8d4a07ae44ffcbd8Custom1 UIZ74f8d4a07ae44ffcbd8Custom
        {
            get
            {
                if ((this.mUIZ74f8d4a07ae44ffcbd8Custom == null))
                {
                    this.mUIZ74f8d4a07ae44ffcbd8Custom = new UIZ74f8d4a07ae44ffcbd8Custom1(this);
                }
                return this.mUIZ74f8d4a07ae44ffcbd8Custom;
            }
        }
        #endregion
        
        #region Fields
        private UIZ74f8d4a07ae44ffcbd8Custom1 mUIZ74f8d4a07ae44ffcbd8Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIZ74f8d4a07ae44ffcbd8Custom1 : WpfCustom
    {
        
        public UIZ74f8d4a07ae44ffcbd8Custom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Z74f8d4a07ae44ffcbd8a047e14ef9e9c";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfCustom UIOUTPUTCustom
        {
            get
            {
                if ((this.mUIOUTPUTCustom == null))
                {
                    this.mUIOUTPUTCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIOUTPUTCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
                    this.mUIOUTPUTCustom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "OutputPane";
                    this.mUIOUTPUTCustom.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIOUTPUTCustom;
            }
        }
        
        public WpfCustom UIVARIABLESCustom
        {
            get
            {
                if ((this.mUIVARIABLESCustom == null))
                {
                    this.mUIVARIABLESCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIVARIABLESCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
                    this.mUIVARIABLESCustom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Variables";
                    this.mUIVARIABLESCustom.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIVARIABLESCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mUIOUTPUTCustom;
        
        private WpfCustom mUIVARIABLESCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DebugInputWindow : WpfWindow
    {
        
        public DebugInputWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Warewolf (DEV2\\LEROY.WARNER)";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfWindow DebugInputWindow1
        {
            get
            {
                if ((this.mDebugInputWindow1 == null))
                {
                    this.mDebugInputWindow1 = new WpfWindow(this);
                    #region Search Criteria
                    this.mDebugInputWindow1.SearchProperties[WpfWindow.PropertyNames.Name] = "Debug input data";
                    this.mDebugInputWindow1.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
                    this.mDebugInputWindow1.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDebugInputWindow1;
            }
        }
        
        public UITabItemsTabList UITabItemsTabList
        {
            get
            {
                if ((this.mUITabItemsTabList == null))
                {
                    this.mUITabItemsTabList = new UITabItemsTabList(this);
                }
                return this.mUITabItemsTabList;
            }
        }
        
        public WpfCheckBox RememberDebugInputCheckBox
        {
            get
            {
                if ((this.mRememberDebugInputCheckBox == null))
                {
                    this.mRememberDebugInputCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRememberDebugInputCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_RememberInputsCb_AutoID";
                    this.mRememberDebugInputCheckBox.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mRememberDebugInputCheckBox;
            }
        }
        
        public WpfButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Cancelbtn_AutoID";
                    this.mCancelButton.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        
        public WpfButton DebugF6Button
        {
            get
            {
                if ((this.mDebugF6Button == null))
                {
                    this.mDebugF6Button = new WpfButton(this);
                    #region Search Criteria
                    this.mDebugF6Button.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Executebtn_AutoID";
                    this.mDebugF6Button.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDebugF6Button;
            }
        }
        
        public WpfButton ViewInBrowserF7Button
        {
            get
            {
                if ((this.mViewInBrowserF7Button == null))
                {
                    this.mViewInBrowserF7Button = new WpfButton(this);
                    #region Search Criteria
                    this.mViewInBrowserF7Button.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Browserbtn_AutoID";
                    this.mViewInBrowserF7Button.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mViewInBrowserF7Button;
            }
        }
        #endregion
        
        #region Fields
        private WpfWindow mDebugInputWindow1;
        
        private UITabItemsTabList mUITabItemsTabList;
        
        private WpfCheckBox mRememberDebugInputCheckBox;
        
        private WpfButton mCancelButton;
        
        private WpfButton mDebugF6Button;
        
        private WpfButton mViewInBrowserF7Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UITabItemsTabList : WpfTabList
    {
        
        public UITabItemsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "TabItems";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public InputDataTab InputDataTab
        {
            get
            {
                if ((this.mInputDataTab == null))
                {
                    this.mInputDataTab = new InputDataTab(this);
                }
                return this.mInputDataTab;
            }
        }
        
        public XMLTab XMLTab
        {
            get
            {
                if ((this.mXMLTab == null))
                {
                    this.mXMLTab = new XMLTab(this);
                }
                return this.mXMLTab;
            }
        }
        
        public JSONTab JSONTab
        {
            get
            {
                if ((this.mJSONTab == null))
                {
                    this.mJSONTab = new JSONTab(this);
                }
                return this.mJSONTab;
            }
        }
        #endregion
        
        #region Fields
        private InputDataTab mInputDataTab;
        
        private XMLTab mXMLTab;
        
        private JSONTab mJSONTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class InputDataTab : WpfTabPage
    {
        
        public InputDataTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.AutomationId] = "UI_InputDataTab_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public DataListInputsTable DataListInputsTable
        {
            get
            {
                if ((this.mDataListInputsTable == null))
                {
                    this.mDataListInputsTable = new DataListInputsTable(this);
                }
                return this.mDataListInputsTable;
            }
        }
        #endregion
        
        #region Fields
        private DataListInputsTable mDataListInputsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DataListInputsTable : WpfTable
    {
        
        public DataListInputsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "DataListInputs";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public UIDescriptionCell UIDescriptionCell
        {
            get
            {
                if ((this.mUIDescriptionCell == null))
                {
                    this.mUIDescriptionCell = new UIDescriptionCell(this);
                }
                return this.mUIDescriptionCell;
            }
        }
        #endregion
        
        #region Fields
        private UIDescriptionCell mUIDescriptionCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIDescriptionCell : WpfCell
    {
        
        public UIDescriptionCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfText UIRec1setText
        {
            get
            {
                if ((this.mUIRec1setText == null))
                {
                    this.mUIRec1setText = new WpfText(this);
                    #region Search Criteria
                    this.mUIRec1setText.SearchProperties[WpfText.PropertyNames.Name] = "rec(1).set";
                    this.mUIRec1setText.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIRec1setText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIRec1setText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class XMLTab : WpfTabPage
    {
        
        public XMLTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.AutomationId] = "UI_XMLTab_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfCustom XMLWindow
        {
            get
            {
                if ((this.mXMLWindow == null))
                {
                    this.mXMLWindow = new WpfCustom(this);
                    #region Search Criteria
                    this.mXMLWindow.SearchProperties[WpfControl.PropertyNames.ClassName] = null;
                    this.mXMLWindow.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_XMLEditor_AutoID";
                    this.mXMLWindow.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mXMLWindow;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mXMLWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class JSONTab : WpfTabPage
    {
        
        public JSONTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.AutomationId] = "UI_XMLTab_AutoID";
            this.SearchProperties[WpfTabPage.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfCustom JSONWindow
        {
            get
            {
                if ((this.mJSONWindow == null))
                {
                    this.mJSONWindow = new WpfCustom(this);
                    #region Search Criteria
                    this.mJSONWindow.SearchProperties[WpfControl.PropertyNames.ClassName] = null;
                    this.mJSONWindow.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_JsonEditor_AutoID";
                    this.mJSONWindow.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mJSONWindow;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mJSONWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIWpfWindow : WpfWindow
    {
        
        public UIWpfWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WpfButton UIDoneButton
        {
            get
            {
                if ((this.mUIDoneButton == null))
                {
                    this.mUIDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    #endregion
                }
                return this.mUIDoneButton;
            }
        }
        
        public UIExplorerViewCustom UIExplorerViewCustom
        {
            get
            {
                if ((this.mUIExplorerViewCustom == null))
                {
                    this.mUIExplorerViewCustom = new UIExplorerViewCustom(this);
                }
                return this.mUIExplorerViewCustom;
            }
        }
        
        public UIItemCustom3 UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom3(this);
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIDoneButton;
        
        private UIExplorerViewCustom mUIExplorerViewCustom;
        
        private UIItemCustom3 mUIItemCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIExplorerViewCustom : WpfCustom
    {
        
        public UIExplorerViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ExplorerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ExplorerView";
            #endregion
        }
        
        #region Properties
        public UISearchTextBoxEdit UISearchTextBoxEdit
        {
            get
            {
                if ((this.mUISearchTextBoxEdit == null))
                {
                    this.mUISearchTextBoxEdit = new UISearchTextBoxEdit(this);
                }
                return this.mUISearchTextBoxEdit;
            }
        }
        
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.Name] = "";
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private UISearchTextBoxEdit mUISearchTextBoxEdit;
        
        private WpfButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UISearchTextBoxEdit : WpfEdit
    {
        
        public UISearchTextBoxEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
            #endregion
        }
        
        #region Properties
        public WpfText UIFilterText
        {
            get
            {
                if ((this.mUIFilterText == null))
                {
                    this.mUIFilterText = new WpfText(this);
                    #region Search Criteria
                    this.mUIFilterText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    #endregion
                }
                return this.mUIFilterText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIFilterText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIItemCustom3 : WpfCustom
    {
        
        public UIItemCustom3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ToolWindow";
            #endregion
        }
        
        #region Properties
        public UIVARIABLESCustom1 UIVARIABLESCustom
        {
            get
            {
                if ((this.mUIVARIABLESCustom == null))
                {
                    this.mUIVARIABLESCustom = new UIVARIABLESCustom1(this);
                }
                return this.mUIVARIABLESCustom;
            }
        }
        
        public UIOUTPUTCustom UIOUTPUTCustom
        {
            get
            {
                if ((this.mUIOUTPUTCustom == null))
                {
                    this.mUIOUTPUTCustom = new UIOUTPUTCustom(this);
                }
                return this.mUIOUTPUTCustom;
            }
        }
        
        public UIEXPLORERCustom UIEXPLORERCustom
        {
            get
            {
                if ((this.mUIEXPLORERCustom == null))
                {
                    this.mUIEXPLORERCustom = new UIEXPLORERCustom(this);
                }
                return this.mUIEXPLORERCustom;
            }
        }
        
        public UIWHATDOESTHISDOCustom1 UIWHATDOESTHISDOCustom
        {
            get
            {
                if ((this.mUIWHATDOESTHISDOCustom == null))
                {
                    this.mUIWHATDOESTHISDOCustom = new UIWHATDOESTHISDOCustom1(this);
                }
                return this.mUIWHATDOESTHISDOCustom;
            }
        }
        
        public UITOOLBOXCustom UITOOLBOXCustom
        {
            get
            {
                if ((this.mUITOOLBOXCustom == null))
                {
                    this.mUITOOLBOXCustom = new UITOOLBOXCustom(this);
                }
                return this.mUITOOLBOXCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIVARIABLESCustom1 mUIVARIABLESCustom;
        
        private UIOUTPUTCustom mUIOUTPUTCustom;
        
        private UIEXPLORERCustom mUIEXPLORERCustom;
        
        private UIWHATDOESTHISDOCustom1 mUIWHATDOESTHISDOCustom;
        
        private UITOOLBOXCustom mUITOOLBOXCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIVARIABLESCustom1 : WpfCustom
    {
        
        public UIVARIABLESCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Variables";
            #endregion
        }
        
        #region Properties
        public WpfButton UIUnpinBtnButton
        {
            get
            {
                if ((this.mUIUnpinBtnButton == null))
                {
                    this.mUIUnpinBtnButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIUnpinBtnButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    #endregion
                }
                return this.mUIUnpinBtnButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIUnpinBtnButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIOUTPUTCustom : WpfCustom
    {
        
        public UIOUTPUTCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "OutputPane";
            #endregion
        }
        
        #region Properties
        public WpfButton UIUnpinBtnButton
        {
            get
            {
                if ((this.mUIUnpinBtnButton == null))
                {
                    this.mUIUnpinBtnButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIUnpinBtnButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    #endregion
                }
                return this.mUIUnpinBtnButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIUnpinBtnButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIEXPLORERCustom : WpfCustom
    {
        
        public UIEXPLORERCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Explorer";
            #endregion
        }
        
        #region Properties
        public WpfButton UIUnpinBtnButton
        {
            get
            {
                if ((this.mUIUnpinBtnButton == null))
                {
                    this.mUIUnpinBtnButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIUnpinBtnButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    #endregion
                }
                return this.mUIUnpinBtnButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIUnpinBtnButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UIWHATDOESTHISDOCustom1 : WpfCustom
    {
        
        public UIWHATDOESTHISDOCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Help";
            #endregion
        }
        
        #region Properties
        public WpfButton UIUnpinBtnButton
        {
            get
            {
                if ((this.mUIUnpinBtnButton == null))
                {
                    this.mUIUnpinBtnButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIUnpinBtnButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    #endregion
                }
                return this.mUIUnpinBtnButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIUnpinBtnButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UITOOLBOXCustom : WpfCustom
    {
        
        public UITOOLBOXCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Toolbox";
            #endregion
        }
        
        #region Properties
        public WpfButton UIUnpinBtnButton
        {
            get
            {
                if ((this.mUIUnpinBtnButton == null))
                {
                    this.mUIUnpinBtnButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIUnpinBtnButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    #endregion
                }
                return this.mUIUnpinBtnButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIUnpinBtnButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SaveDialogWindow : WpfWindow
    {
        
        public SaveDialogWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "SaveDialogView";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SaveDialogView");
            #endregion
        }
        
        #region Properties
        public WpfText WorkspaceName
        {
            get
            {
                if ((this.mWorkspaceName == null))
                {
                    this.mWorkspaceName = new WpfText(this);
                    #region Search Criteria
                    this.mWorkspaceName.SearchProperties.Add(new PropertyExpression(WpfText.PropertyNames.Name, "Unsaved", PropertyExpressionOperator.Contains));
                    this.mWorkspaceName.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mWorkspaceName;
            }
        }
        
        public ExplorerView ExplorerView
        {
            get
            {
                if ((this.mExplorerView == null))
                {
                    this.mExplorerView = new ExplorerView(this);
                }
                return this.mExplorerView;
            }
        }
        
        public WpfText NameLabel
        {
            get
            {
                if ((this.mNameLabel == null))
                {
                    this.mNameLabel = new WpfText(this);
                    #region Search Criteria
                    this.mNameLabel.SearchProperties[WpfText.PropertyNames.Name] = "Name:";
                    this.mNameLabel.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mNameLabel;
            }
        }
        
        public WpfEdit ServiceNameTextBox
        {
            get
            {
                if ((this.mServiceNameTextBox == null))
                {
                    this.mServiceNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mServiceNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "ServiceNameTextBox";
                    this.mServiceNameTextBox.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mServiceNameTextBox;
            }
        }
        
        public WpfText ErrorLabel
        {
            get
            {
                if ((this.mErrorLabel == null))
                {
                    this.mErrorLabel = new WpfText(this);
                    #region Search Criteria
                    this.mErrorLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "ErrorMessageTextBlock";
                    this.mErrorLabel.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mErrorLabel;
            }
        }
        
        public WpfButton SaveButton
        {
            get
            {
                if ((this.mSaveButton == null))
                {
                    this.mSaveButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSaveButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "OkButton";
                    this.mSaveButton.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mSaveButton;
            }
        }
        
        public WpfButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CancelButton";
                    this.mCancelButton.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mWorkspaceName;
        
        private ExplorerView mExplorerView;
        
        private WpfText mNameLabel;
        
        private WpfEdit mServiceNameTextBox;
        
        private WpfText mErrorLabel;
        
        private WpfButton mSaveButton;
        
        private WpfButton mCancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ExplorerView : WpfCustom
    {
        
        public ExplorerView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ExplorerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ExplorerView";
            this.WindowTitles.Add("SaveDialogView");
            #endregion
        }
        
        #region Properties
        public WpfEdit SearchTextBox
        {
            get
            {
                if ((this.mSearchTextBox == null))
                {
                    this.mSearchTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mSearchTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
                    this.mSearchTextBox.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mSearchTextBox;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.Name] = "";
                    this.mRefreshButton.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public ExplorerTree1 ExplorerTree
        {
            get
            {
                if ((this.mExplorerTree == null))
                {
                    this.mExplorerTree = new ExplorerTree1(this);
                }
                return this.mExplorerTree;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mSearchTextBox;
        
        private WpfButton mRefreshButton;
        
        private ExplorerTree1 mExplorerTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ExplorerTree1 : WpfTree
    {
        
        public ExplorerTree1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "ExplorerTree";
            this.WindowTitles.Add("SaveDialogView");
            #endregion
        }
        
        #region Properties
        public WpfTreeItem ExplorerTreeItem
        {
            get
            {
                if ((this.mExplorerTreeItem == null))
                {
                    this.mExplorerTreeItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mExplorerTreeItem.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mExplorerTreeItem.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mExplorerTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfTreeItem mExplorerTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ServicePickerWindow : WpfWindow
    {
        
        public ServicePickerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Select A Service";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SplashPageWindow : WpfWindow
    {
        
        public SplashPageWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "SplashPage";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SplashPage");
            #endregion
        }
    }
}
