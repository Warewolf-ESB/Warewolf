// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Warewolf.Studio.UISpecs
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Assert_Assign_Large_View_Exists_OnDesignSurface - Use 'Assert_Assign_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Assign_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom multiAssign = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign;
            #endregion

            // Verify that the 'Exists' property of 'DsfMultiAssignActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Assign_Large_View_Exists_OnDesignSurfaceExpectedValues.MultiAssignExists, multiAssign.Exists, "Assign tool large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Assign_QVI_Large_View_Exists_OnDesignSurface - Use 'Assert_Assign_QVI_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Assign_QVI_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom quickVariableInputLargeView = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.QuickVariableInputLargeView;
            #endregion

            // Verify that the 'Exists' property of 'QuickVariableInputContent' custom control equals 'True'
            Assert.AreEqual(this.Assert_Assign_QVI_Large_View_Exists_OnDesignSurfaceExpectedValues.QuickVariableInputLargeViewExists, quickVariableInputLargeView.Exists, "QVI on assign is not open");
        }
        
        /// <summary>
        /// Assert_Base_Conversion_Exists_OnDesignSurface - Use 'Assert_Base_Conversion_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Base_Conversion_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom baseConvert = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert;
            #endregion

            // Verify that the 'Exists' property of 'DsfBaseConvertActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Base_Conversion_Exists_OnDesignSurfaceExpectedValues.BaseConvertExists, baseConvert.Exists, "Base Conversion on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurface - Use 'Assert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom baseConvert = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert;
            #endregion

            // Verify that the 'Exists' property of 'DsfBaseConvertActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues.BaseConvertExists, baseConvert.Exists, "Base Conversion QVI Window does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_Calculate_Exists_OnDesignSurface - Use 'Assert_Calculate_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Calculate_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom calculate = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate;
            #endregion

            // Verify that the 'Exists' property of 'DsfCalculateActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Calculate_Exists_OnDesignSurfaceExpectedValues.CalculateExists, calculate.Exists, "Calculate tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Case_Conversion_Exists_OnDesignSurface - Use 'Assert_Case_Conversion_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Case_Conversion_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom caseConvert = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CaseConvert;
            #endregion

            // Verify that the 'Exists' property of 'DsfCaseConvertActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Case_Conversion_Exists_OnDesignSurfaceExpectedValues.CaseConvertExists, caseConvert.Exists, "Case Conversion on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurface - Use 'Assert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom caseConvert = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CaseConvert;
            #endregion

            // Verify that the 'Exists' property of 'DsfCaseConvertActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues.CaseConvertExists, caseConvert.Exists, "Case Conversion QVI Window does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_Close_Tab_Button_Exists - Use 'Assert_Close_Tab_Button_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Close_Tab_Button_Exists()
        {
            #region Variable Declarations
            WpfButton closeButton = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.CloseButton;
            #endregion

            // Verify that the 'Exists' property of 'closeBtn' custom control equals 'True'
            Assert.AreEqual(this.Assert_Close_Tab_Button_ExistsExpectedValues.CloseButtonExists, closeButton.Exists, "Close tab button does not exist");
        }
        
        /// <summary>
        /// Assert_CMD_Line_Exists_OnDesignSurface - Use 'Assert_CMD_Line_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_CMD_Line_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom executeCommandLine = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine;
            #endregion

            // Verify that the 'Exists' property of 'DsfExecuteCommandLineActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_CMD_Line_Exists_OnDesignSurfaceExpectedValues.ExecuteCommandLineExists, executeCommandLine.Exists, "CMD Line tool on the design surface tool does not exist");
        }
        
        /// <summary>
        /// Assert_CMD_Line_Large_View_Exists_OnDesignSurface - Use 'Assert_CMD_Line_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_CMD_Line_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom executeCommandLine = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine;
            #endregion

            // Verify that the 'Exists' property of 'DsfExecuteCommandLineActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_CMD_Line_Large_View_Exists_OnDesignSurfaceExpectedValues.ExecuteCommandLineExists, executeCommandLine.Exists, "CMD Line large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Comment_Exists_OnDesignSurface - Use 'Assert_Comment_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Comment_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom comment = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Comment;
            #endregion

            // Verify that the 'Exists' property of 'DsfCommentActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Comment_Exists_OnDesignSurfaceExpectedValues.CommentExists, comment.Exists, "Comment tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Copy_Exists_OnDesignSurface - Use 'Assert_Copy_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Copy_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathCopy = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCopy;
            #endregion

            // Verify that the 'Exists' property of 'DsfPathCopy' custom control equals 'True'
            Assert.AreEqual(this.Assert_Copy_Exists_OnDesignSurfaceExpectedValues.PathCopyExists, pathCopy.Exists, "Copy on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Copy_Large_View_Exists_OnDesignSurface - Use 'Assert_Copy_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Copy_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathCopy = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCopy;
            #endregion

            // Verify that the 'Exists' property of 'DsfPathCopy' custom control equals 'True'
            Assert.AreEqual(this.Assert_Copy_Large_View_Exists_OnDesignSurfaceExpectedValues.PathCopyExists, pathCopy.Exists, "Copy Tool large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Count_Records_Exists_OnDesignSurface - Use 'Assert_Count_Records_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Count_Records_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom countRecordset = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CountRecordset;
            #endregion

            // Verify that the 'Exists' property of 'DsfCountRecordsetActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Count_Records_Exists_OnDesignSurfaceExpectedValues.CountRecordsetExists, countRecordset.Exists, "Count Records tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Create_Exists_OnDesignSurface - Use 'Assert_Create_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Create_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathCreate = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCreate;
            #endregion

            // Verify that the 'Exists' property of 'DsfPathCreate' custom control equals 'True'
            Assert.AreEqual(this.Assert_Create_Exists_OnDesignSurfaceExpectedValues.PathCreateExists, pathCreate.Exists, "Create tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Create_JSON_Exists_OnDesignSurface - Use 'Assert_Create_JSON_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Create_JSON_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom createJson = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson;
            #endregion

            // Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Create_JSON_Exists_OnDesignSurfaceExpectedValues.CreateJsonExists, createJson.Exists, "Create JSON tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Create_Path_Large_View_Exists_OnDesignSurface - Use 'Assert_Create_Path_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Create_Path_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathCreate = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCreate;
            #endregion

            // Verify that the 'Exists' property of 'DsfPathCreate' custom control equals 'True'
            Assert.AreEqual(this.Assert_Create_Path_Large_View_Exists_OnDesignSurfaceExpectedValues.PathCreateExists, pathCreate.Exists, "Creat Path large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Data_Connector_Exists_OnDesignSurface - Use 'Assert_Data_Connector_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Data_Connector_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom databaseConnector = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DatabaseConnector;
            #endregion

            // Verify that the 'Exists' property of 'DsfDatabaseActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Data_Connector_Exists_OnDesignSurfaceExpectedValues.DatabaseConnectorExists, databaseConnector.Exists, "Data Connector on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Data_Merge_Exists_OnDesignSurface - Use 'Assert_Data_Merge_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Data_Merge_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dataMerge = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge;
            #endregion

            // Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Data_Merge_Exists_OnDesignSurfaceExpectedValues.DataMergeExists, dataMerge.Exists, "Data Merge on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Data_Merge_Large_View_Exists_OnDesignSurface - Use 'Assert_Data_Merge_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Data_Merge_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dataMerge = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge;
            #endregion

            // Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Data_Merge_Large_View_Exists_OnDesignSurfaceExpectedValues.DataMergeExists, dataMerge.Exists, "Data merge large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurface - Use 'Assert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dataMerge = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge;
            #endregion

            // Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues.DataMergeExists, dataMerge.Exists, "Data Merge QVi on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Data_Split_Exists_OnDesignSurface - Use 'Assert_Data_Split_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Data_Split_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dataSplit = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit;
            #endregion

            // Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Data_Split_Exists_OnDesignSurfaceExpectedValues.DataSplitExists, dataSplit.Exists, "Data Split on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Data_Split_Large_View_Exists_OnDesignSurface - Use 'Assert_Data_Split_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Data_Split_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dataSplit = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit;
            #endregion

            // Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Data_Split_Large_View_Exists_OnDesignSurfaceExpectedValues.DataSplitExists, dataSplit.Exists, "Data Split large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Data_Split_Qvi_Large_View_Exists_OnDesignSurface - Use 'Assert_Data_Split_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Data_Split_Qvi_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dataSplit = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit;
            #endregion

            // Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Data_Split_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues.DataSplitExists, dataSplit.Exists, "Data Split Qvi does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_Date_And_Time_Exists_OnDesignSurface - Use 'Assert_Date_And_Time_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Date_And_Time_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dateTime = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTime;
            #endregion

            // Verify that the 'Exists' property of 'DsfDateTimeActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Date_And_Time_Exists_OnDesignSurfaceExpectedValues.DateTimeExists, dateTime.Exists, "Date and Time tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_DateTime_Difference_Conversion_Exists_OnDesignSurface - Use 'Assert_DateTime_Difference_Conversion_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DateTime_Difference_Conversion_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dateTimeDifference = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTimeDifference;
            #endregion

            // Verify that the 'Exists' property of 'DsfDateTimeDifferenceActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_DateTime_Difference_Conversion_Exists_OnDesignSurfaceExpectedValues.DateTimeDifferenceExists, dateTimeDifference.Exists, "Date And Time Difference tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Decision_Exists_In_The_Toolbox - Use 'Assert_Decision_Exists_In_The_ToolboxExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Decision_Exists_In_The_Toolbox()
        {
            #region Variable Declarations
            WpfImage decisionImage = this.MainStudioWindow.ToolBox.ToolListBox.FlowTools.Decision.DecisionImage;
            #endregion

            // Verify that the 'Exists' property of 'Decision' image equals 'True'
            Assert.AreEqual(this.Assert_Decision_Exists_In_The_ToolboxExpectedValues.DecisionImageExists, decisionImage.Exists, "Decision does not exist in the Toolbox");
        }
        
        /// <summary>
        /// Assert_Decision_Exists_OnDesignSurface - Use 'Assert_Decision_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Decision_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom decision = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Decision;
            #endregion

            // Verify that the 'Exists' property of 'FlowDecision' custom control equals 'True'
            Assert.AreEqual(this.Assert_Decision_Exists_OnDesignSurfaceExpectedValues.DecisionExists, decision.Exists, "Decision on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Delete_Exists_OnDesignSurface - Use 'Assert_Delete_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Delete_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathDelete = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathDelete;
            #endregion

            // Verify that the 'Exists' property of 'DsfPathDelete' custom control equals 'True'
            Assert.AreEqual(this.Assert_Delete_Exists_OnDesignSurfaceExpectedValues.PathDeleteExists, pathDelete.Exists, "Delete tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Delete_Record_Exists_OnDesignSurface - Use 'Assert_Delete_Record_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Delete_Record_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom deleteRecord = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DeleteRecord;
            #endregion

            // Verify that the 'Exists' property of 'DsfDeleteRecordActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Delete_Record_Exists_OnDesignSurfaceExpectedValues.DeleteRecordExists, deleteRecord.Exists, "Delete record tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_DotNet_DLL_Connector_Exists_OnDesignSurface - Use 'Assert_DotNet_DLL_Connector_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DotNet_DLL_Connector_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dotNetDll = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll;
            #endregion

            // Verify that the 'Exists' property of 'DsfDotNetDllActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_DotNet_DLL_Connector_Exists_OnDesignSurfaceExpectedValues.DotNetDllExists, dotNetDll.Exists, "DotNet DLL tool does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_Dropbox_Download_Exists_OnDesignSurface - Use 'Assert_Dropbox_Download_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Dropbox_Download_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dropBox_DOWNLOAD = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DropBox_DOWNLOAD;
            #endregion

            // Verify that the 'Exists' property of 'DsfDropBoxFileActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Dropbox_Download_Exists_OnDesignSurfaceExpectedValues.DropBox_DOWNLOADExists, dropBox_DOWNLOAD.Exists, "Dropbox Download tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Dropbox_Upload_Exists_OnDesignSurface - Use 'Assert_Dropbox_Upload_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Dropbox_Upload_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dropBox_UPLOAD = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DropBox_UPLOAD;
            #endregion

            // Verify that the 'Exists' property of 'DsfDropBoxFileActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Dropbox_Upload_Exists_OnDesignSurfaceExpectedValues.DropBox_UPLOADExists, dropBox_UPLOAD.Exists, "Dropbox Upload tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Email_Exists_OnDesignSurface - Use 'Assert_Email_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Email_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sendEmail = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SendEmail;
            #endregion

            // Verify that the 'Exists' property of 'DsfSendEmailActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Email_Exists_OnDesignSurfaceExpectedValues.SendEmailExists, sendEmail.Exists, "Email tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Email_Large_View_Exists_OnDesignSurface - Use 'Assert_Email_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Email_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sendEmail = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SendEmail;
            #endregion

            // Verify that the 'Exists' property of 'DsfSendEmailActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Email_Large_View_Exists_OnDesignSurfaceExpectedValues.SendEmailExists, sendEmail.Exists, "Email Tool large view does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_Find_Index_Exists_OnDesignSurface - Use 'Assert_Find_Index_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Find_Index_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom findIndex = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindIndex;
            #endregion

            // Verify that the 'Exists' property of 'DsfIndexActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Find_Index_Exists_OnDesignSurfaceExpectedValues.FindIndexExists, findIndex.Exists, "Find Index on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Find_Record_Index_Exists_OnDesignSurface - Use 'Assert_Find_Record_Index_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Find_Record_Index_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom findRecordsIndex = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindRecordsIndex;
            #endregion

            // Verify that the 'Exists' property of 'DsfFindRecordsMultipleCriteriaActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Find_Record_Index_Exists_OnDesignSurfaceExpectedValues.FindRecordsIndexExists, findRecordsIndex.Exists, "Find Record Index tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Find_Record_index_Large_View_Exists_OnDesignSurface - Use 'Assert_Find_Record_index_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Find_Record_index_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom findRecordsIndex = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindRecordsIndex;
            #endregion

            // Verify that the 'Exists' property of 'DsfFindRecordsMultipleCriteriaActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Find_Record_index_Large_View_Exists_OnDesignSurfaceExpectedValues.FindRecordsIndexExists, findRecordsIndex.Exists, "Find Record Index large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_For_Each_Exists_OnDesignSurface - Use 'Assert_For_Each_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_For_Each_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom forEach = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach;
            #endregion

            // Verify that the 'Exists' property of 'DsfForEachActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_For_Each_Exists_OnDesignSurfaceExpectedValues.ForEachExists, forEach.Exists, "For Each tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Format_Number_Exists_OnDesignSurface - Use 'Assert_Format_Number_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Format_Number_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom formatNumber = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FormatNumber;
            #endregion

            // Verify that the 'Exists' property of 'DsfNumberFormatActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Format_Number_Exists_OnDesignSurfaceExpectedValues.FormatNumberExists, formatNumber.Exists, "Format Number tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Generic_Context_Menu_Exists - Use 'Assert_Generic_Context_Menu_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Generic_Context_Menu_Exists()
        {
            #region Variable Declarations
            WpfMenu genericContextMenu = this.MainStudioWindow.GenericContextMenu;
            #endregion

            // Verify that the 'Exists' property of popup menu equals 'True'
            Assert.AreEqual(this.Assert_Generic_Context_Menu_ExistsExpectedValues.GenericContextMenuExists, genericContextMenu.Exists, "Context Menu does not exist on design surface");
        }
        
        /// <summary>
        /// Assert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurface - Use 'Assert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom webGet = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet;
            #endregion

            // Verify that the 'Exists' property of 'DsfWebGetActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues.WebGetExists, webGet.Exists, "Web Get Request Tool does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_GetWeb_RequestTool_small_View_Exists_OnDesignSurface - Use 'Assert_GetWeb_RequestTool_small_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_GetWeb_RequestTool_small_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom webGet = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet;
            #endregion

            // Verify that the 'Exists' property of 'DsfWebGetActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_GetWeb_RequestTool_small_View_Exists_OnDesignSurfaceExpectedValues.WebGetExists, webGet.Exists, "Web Get Request small view does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_Json_Large_View_Exists_OnDesignSurface - Use 'Assert_Json_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Json_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom createJson = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson;
            #endregion

            // Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Json_Large_View_Exists_OnDesignSurfaceExpectedValues.CreateJsonExists, createJson.Exists, "JSON tool large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Json_Qvi_Large_View_Exists_OnDesignSurface - Use 'Assert_Json_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Json_Qvi_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom createJson = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson;
            #endregion

            // Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Json_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues.CreateJsonExists, createJson.Exists, "JSON QVI window does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_Length_Exists_OnDesignSurface - Use 'Assert_Length_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Length_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom length = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Length;
            #endregion

            // Verify that the 'Exists' property of 'DsfRecordsetLengthActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Length_Exists_OnDesignSurfaceExpectedValues.LengthExists, length.Exists, "Length tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_MainStudioWindow_Exists - Use 'Assert_MainStudioWindow_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_MainStudioWindow_Exists()
        {
            #region Variable Declarations
            WpfWindow mainStudioWindow = this.MainStudioWindow;
            #endregion

            // Verify that the 'Exists' property of 'Warewolf' window equals 'True'
            Assert.AreEqual(this.Assert_MainStudioWindow_ExistsExpectedValues.MainStudioWindowExists, mainStudioWindow.Exists, "Main Studio Window Does not Exist");
        }
        
        /// <summary>
        /// Move tool on the design surface does not exist
        /// </summary>
        public void Assert_Move_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathMove = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathMove;
            #endregion

            // Verify that the 'Exists' property of 'DsfPathMove' custom control equals 'True'
            Assert.AreEqual(this.Assert_Move_Exists_OnDesignSurfaceExpectedValues.PathMoveExists, pathMove.Exists, "Move tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Move_Large_View_Exists_OnDesignSurface - Use 'Assert_Move_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Move_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathMove = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathMove;
            #endregion

            // Verify that the 'Exists' property of 'DsfPathMove' custom control equals 'True'
            Assert.AreEqual(this.Assert_Move_Large_View_Exists_OnDesignSurfaceExpectedValues.PathMoveExists, pathMove.Exists, "Move tool large view does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_MultiAssign_Exists_OnDesignSurface - Use 'Assert_MultiAssign_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_MultiAssign_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom multiAssign = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign;
            #endregion

            // Verify that the 'Exists' property of 'DsfMultiAssignActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_MultiAssign_Exists_OnDesignSurfaceExpectedValues.MultiAssignExists, multiAssign.Exists, "MultiAssign on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Mysql_Database_Large_View_Exists_OnDesignSurface - Use 'Assert_Mysql_Database_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Mysql_Database_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom mySqlDatabase = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MySqlDatabase;
            #endregion

            // Verify that the 'Exists' property of 'DsfMySqlDatabaseActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Mysql_Database_Large_View_Exists_OnDesignSurfaceExpectedValues.MySqlDatabaseExists, mySqlDatabase.Exists, "MySql Database Connector large view does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_New_Workflow_Context_Menu_Exists - Use 'Assert_New_Workflow_Context_Menu_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_New_Workflow_Context_Menu_Exists()
        {
            #region Variable Declarations
            WpfMenu genericContextMenu = this.MainStudioWindow.GenericContextMenu;
            #endregion

            // Verify that the 'Exists' property of popup menu equals 'True'
            Assert.AreEqual(this.Assert_New_Workflow_Context_Menu_ExistsExpectedValues.GenericContextMenuExists, genericContextMenu.Exists, "Assign tool large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Plugin_Connector_Exists_OnDesignSurface - Use 'Assert_Plugin_Connector_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Plugin_Connector_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pluginConnector = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PluginConnector;
            #endregion

            // Verify that the 'Exists' property of 'DsfPluginActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Plugin_Connector_Exists_OnDesignSurfaceExpectedValues.PluginConnectorExists, pluginConnector.Exists, "Plugin Connector on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurface - Use 'Assert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom webPost = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebPost;
            #endregion

            // Verify that the 'Exists' property of 'DsfWebPostActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues.WebPostExists, webPost.Exists, "Web Post Request Tool does not exist on the design surface ");
        }
        
        /// <summary>
        /// Assert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurface - Use 'Assert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom webPost = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebPost;
            #endregion

            // Verify that the 'Exists' property of 'DsfWebPostActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurfaceExpectedValues.WebPostExists, webPost.Exists, "Web Post Request small view does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_Random_Exists_OnDesignSurface - Use 'Assert_Random_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Random_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom random = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Random;
            #endregion

            // Verify that the 'Exists' property of 'DsfRandomActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Random_Exists_OnDesignSurfaceExpectedValues.RandomExists, random.Exists, "Random tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Read_File_Exists_OnDesignSurface - Use 'Assert_Read_File_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Read_File_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom fileRead = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileRead;
            #endregion

            // Verify that the 'Exists' property of 'DsfFileRead' custom control equals 'True'
            Assert.AreEqual(this.Assert_Read_File_Exists_OnDesignSurfaceExpectedValues.FileReadExists, fileRead.Exists, "Read File tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Read_File_Large_View_Exists_OnDesignSurface - Use 'Assert_Read_File_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Read_File_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom fileRead = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileRead;
            #endregion

            // Verify that the 'Exists' property of 'DsfFileRead' custom control equals 'True'
            Assert.AreEqual(this.Assert_Read_File_Large_View_Exists_OnDesignSurfaceExpectedValues.FileReadExists, fileRead.Exists, "Read file large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Read_Folder_Exists_OnDesignSurface - Use 'Assert_Read_Folder_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Read_Folder_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom folderRead = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FolderRead;
            #endregion

            // Verify that the 'Exists' property of 'DsfFolderRead' custom control equals 'True'
            Assert.AreEqual(this.Assert_Read_Folder_Exists_OnDesignSurfaceExpectedValues.FolderReadExists, folderRead.Exists, "Read folder tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Read_Folder_Large_View_Exists_OnDesignSurface - Use 'Assert_Read_Folder_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Read_Folder_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom folderRead = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FolderRead;
            #endregion

            // Verify that the 'Exists' property of 'DsfFolderRead' custom control equals 'True'
            Assert.AreEqual(this.Assert_Read_Folder_Large_View_Exists_OnDesignSurfaceExpectedValues.FolderReadExists, folderRead.Exists, "Read Folder large view does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_Rename_Exists_OnDesignSurface - Use 'Assert_Rename_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Rename_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathRename = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathRename;
            #endregion

            // Verify that the 'Exists' property of 'DsfPathRename' custom control equals 'True'
            Assert.AreEqual(this.Assert_Rename_Exists_OnDesignSurfaceExpectedValues.PathRenameExists, pathRename.Exists, "Rename tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Rename_Large_View_Exists_OnDesignSurface - Use 'Assert_Rename_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Rename_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathRename = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathRename;
            #endregion

            // Verify that the 'Exists' property of 'DsfPathRename' custom control equals 'True'
            Assert.AreEqual(this.Assert_Rename_Large_View_Exists_OnDesignSurfaceExpectedValues.PathRenameExists, pathRename.Exists, "Rename tool large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Replace_Exists_OnDesignSurface - Use 'Assert_Replace_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Replace_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom replace = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Replace;
            #endregion

            // Verify that the 'Exists' property of 'DsfReplaceActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Replace_Exists_OnDesignSurfaceExpectedValues.ReplaceExists, replace.Exists, "Replace on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Script_Exists_OnDesignSurface - Use 'Assert_Script_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Script_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom scripting = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Scripting;
            #endregion

            // Verify that the 'Exists' property of 'DsfScriptingActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Script_Exists_OnDesignSurfaceExpectedValues.ScriptingExists, scripting.Exists, "Script tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Sequence_Exists_OnDesignSurface - Use 'Assert_Sequence_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sequence_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sequence = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Sequence;
            #endregion

            // Verify that the 'Exists' property of 'DsfSequenceActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sequence_Exists_OnDesignSurfaceExpectedValues.SequenceExists, sequence.Exists, "Sequence on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Sharepoint_Create_Exists_OnDesignSurface - Use 'Assert_Sharepoint_Create_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sharepoint_Create_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointCreate = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCreate;
            #endregion

            // Verify that the 'Exists' property of 'SharepointCreateListItemActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sharepoint_Create_Exists_OnDesignSurfaceExpectedValues.SharepointCreateExists, sharepointCreate.Exists, "Sharepoint create tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Sharepoint_Create_Large_View_Exists_OnDesignSurface - Use 'Assert_Sharepoint_Create_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sharepoint_Create_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointCreate = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCreate;
            #endregion

            // Verify that the 'Exists' property of 'SharepointCreateListItemActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sharepoint_Create_Large_View_Exists_OnDesignSurfaceExpectedValues.SharepointCreateExists, sharepointCreate.Exists, "Sharepoint Create tool large view does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_Sharepoint_Delete_Exists_OnDesignSurface - Use 'Assert_Sharepoint_Delete_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sharepoint_Delete_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointDelete = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointDelete;
            #endregion

            // Verify that the 'Exists' property of 'SharepointDeleteListItemActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sharepoint_Delete_Exists_OnDesignSurfaceExpectedValues.SharepointDeleteExists, sharepointDelete.Exists, "Sharepoint Delete tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Sharepoint_Delete_Large_View_Exists_OnDesignSurface - Use 'Assert_Sharepoint_Delete_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sharepoint_Delete_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointDelete = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointDelete;
            #endregion

            // Verify that the 'Exists' property of 'SharepointDeleteListItemActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sharepoint_Delete_Large_View_Exists_OnDesignSurfaceExpectedValues.SharepointDeleteExists, sharepointDelete.Exists, "Sharepoint Delete tool large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Sharepoint_Read_Exists_OnDesignSurface - Use 'Assert_Sharepoint_Read_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sharepoint_Read_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointRead = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointRead;
            #endregion

            // Verify that the 'Exists' property of 'SharepointReadListActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sharepoint_Read_Exists_OnDesignSurfaceExpectedValues.SharepointReadExists, sharepointRead.Exists, "Sharepoint Read tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Sharepoint_Read_Large_View_Exists_OnDesignSurface - Use 'Assert_Sharepoint_Read_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sharepoint_Read_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointRead = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointRead;
            #endregion

            // Verify that the 'Exists' property of 'SharepointReadListActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sharepoint_Read_Large_View_Exists_OnDesignSurfaceExpectedValues.SharepointReadExists, sharepointRead.Exists, "Sharepoint Read large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Sharepoint_Update_Exists_OnDesignSurface - Use 'Assert_Sharepoint_Update_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sharepoint_Update_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointUpdate = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointUpdate;
            #endregion

            // Verify that the 'Exists' property of 'SharepointUpdateListItemActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sharepoint_Update_Exists_OnDesignSurfaceExpectedValues.SharepointUpdateExists, sharepointUpdate.Exists, "Sharepoint update tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Sharepoint_Update_Large_View_Exists_OnDesignSurface - Use 'Assert_Sharepoint_Update_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sharepoint_Update_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointUpdate = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointUpdate;
            #endregion

            // Verify that the 'Exists' property of 'SharepointUpdateListItemActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sharepoint_Update_Large_View_Exists_OnDesignSurfaceExpectedValues.SharepointUpdateExists, sharepointUpdate.Exists, "Sharepoint Update tool large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Sort_Records_Exists_OnDesignSurface - Use 'Assert_Sort_Records_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sort_Records_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sortRecords = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SortRecords;
            #endregion

            // Verify that the 'Exists' property of 'DsfSortRecordsActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sort_Records_Exists_OnDesignSurfaceExpectedValues.SortRecordsExists, sortRecords.Exists, "Sort Record tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Sql_Bulk_insert_Exists_OnDesignSurface - Use 'Assert_Sql_Bulk_insert_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sql_Bulk_insert_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sqlBulkInsert = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlBulkInsert;
            #endregion

            // Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sql_Bulk_insert_Exists_OnDesignSurfaceExpectedValues.SqlBulkInsertExists, sqlBulkInsert.Exists, "Sql Bulk Insert tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurface - Use 'Assert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sqlBulkInsert = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlBulkInsert;
            #endregion

            // Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurfaceExpectedValues.SqlBulkInsertExists, sqlBulkInsert.Exists, "Sql Bulk Insert large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurface - Use 'Assert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sqlBulkInsert = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlBulkInsert;
            #endregion

            // Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurfaceExpectedValues.SqlBulkInsertExists, sqlBulkInsert.Exists, "Sql Bulk Insert Qvi window on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_SQL_Server_Database_Large_View_Exists_OnDesignSurface - Use 'Assert_SQL_Server_Database_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SQL_Server_Database_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sqlServerDatabase = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase;
            #endregion

            // Verify that the 'Exists' property of 'DsfSqlServerDatabaseActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_SQL_Server_Database_Large_View_Exists_OnDesignSurfaceExpectedValues.SqlServerDatabaseExists, sqlServerDatabase.Exists, "SQL Server Database does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_StartNode_Exists - Use 'Assert_StartNode_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_StartNode_Exists()
        {
            #region Variable Declarations
            WpfCustom startNode = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.StartNode;
            #endregion

            // Wait for 1 seconds for user delay between actions; Verify that the 'Exists' property of 'StartNode' custom control equals 'True'
            Playback.Wait(1000);
            Assert.AreEqual(this.Assert_StartNode_ExistsExpectedValues.StartNodeExists, startNode.Exists, "Start Node Does Not Exist");
        }
        
        /// <summary>
        /// Assert_Switch_Exists_OnDesignSurface - Use 'Assert_Switch_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Switch_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom switch1 = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Switch;
            #endregion

            // Verify that the 'Exists' property of 'FlowSwitch`1[String]' custom control equals 'True'
            Assert.AreEqual(this.Assert_Switch_Exists_OnDesignSurfaceExpectedValues.SwitchExists, switch1.Exists, "Switch on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_System_Info_Qvi_Large_View_Exists_OnDesignSurface - Use 'Assert_System_Info_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_System_Info_Qvi_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom gatherSystemInfo = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.GatherSystemInfo;
            #endregion

            // Verify that the 'Exists' property of 'DsfGatherSystemInformationActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_System_Info_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues.GatherSystemInfoExists, gatherSystemInfo.Exists, "System Info QVI window does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_System_information_Exists_OnDesignSurface - Use 'Assert_System_information_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_System_information_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom gatherSystemInfo = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.GatherSystemInfo;
            #endregion

            // Verify that the 'Exists' property of 'DsfGatherSystemInformationActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_System_information_Exists_OnDesignSurfaceExpectedValues.GatherSystemInfoExists, gatherSystemInfo.Exists, "System Info tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Unique_Records_Exists_OnDesignSurface - Use 'Assert_Unique_Records_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Unique_Records_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom unique = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Unique;
            #endregion

            // Verify that the 'Exists' property of 'DsfUniqueActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Unique_Records_Exists_OnDesignSurfaceExpectedValues.UniqueExists, unique.Exists, "Unique Records tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Unzip_Exists_OnDesignSurface - Use 'Assert_Unzip_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Unzip_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom unZip = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.UnZip;
            #endregion

            // Verify that the 'Exists' property of 'DsfUnZip' custom control equals 'True'
            Assert.AreEqual(this.Assert_Unzip_Exists_OnDesignSurfaceExpectedValues.UnZipExists, unZip.Exists, "Unzip on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Unzip_Large_View_Exists_OnDesignSurface - Use 'Assert_Unzip_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Unzip_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom unZip = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.UnZip;
            #endregion

            // Verify that the 'Exists' property of 'DsfUnZip' custom control equals 'True'
            Assert.AreEqual(this.Assert_Unzip_Large_View_Exists_OnDesignSurfaceExpectedValues.UnZipExists, unZip.Exists, "Unzip large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Web_Connectors_Exists_OnDesignSurface - Use 'Assert_Web_Connectors_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Web_Connectors_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom webConnector = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebConnector;
            #endregion

            // Verify that the 'Exists' property of 'DsfWebserviceActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Web_Connectors_Exists_OnDesignSurfaceExpectedValues.WebConnectorExists, webConnector.Exists, "Web Connector on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Workflow_Exists_OnDesignSurface - Use 'Assert_Workflow_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Workflow_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom subWorkflow = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SubWorkflow;
            #endregion

            // Verify that the 'Exists' property of 'DsfActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Workflow_Exists_OnDesignSurfaceExpectedValues.SubWorkflowExists, subWorkflow.Exists, "Workflow on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Write_File_Exists_OnDesignSurface - Use 'Assert_Write_File_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Write_File_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom fileWrite = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileWrite;
            #endregion

            // Verify that the 'Exists' property of 'DsfFileWrite' custom control equals 'True'
            Assert.AreEqual(this.Assert_Write_File_Exists_OnDesignSurfaceExpectedValues.FileWriteExists, fileWrite.Exists, "Write File tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Write_File_Large_View_Exists_OnDesignSurface - Use 'Assert_Write_File_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Write_File_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom fileWrite = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileWrite;
            #endregion

            // Verify that the 'Exists' property of 'DsfFileWrite' custom control equals 'True'
            Assert.AreEqual(this.Assert_Write_File_Large_View_Exists_OnDesignSurfaceExpectedValues.FileWriteExists, fileWrite.Exists, "Write file large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_XPath_Exists_OnDesignSurface - Use 'Assert_XPath_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_XPath_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom xPath = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath;
            #endregion

            // Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_XPath_Exists_OnDesignSurfaceExpectedValues.XPathExists, xPath.Exists, "XPath tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Xpath_Large_View_Exists_OnDesignSurface - Use 'Assert_Xpath_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Xpath_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom xPath = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath;
            #endregion

            // Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Xpath_Large_View_Exists_OnDesignSurfaceExpectedValues.XPathExists, xPath.Exists, "Xpath large view does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_Xpath_Qvi_Large_View_Exists_OnDesignSurface - Use 'Assert_Xpath_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Xpath_Qvi_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom xPath = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath;
            #endregion

            // Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Xpath_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues.XPathExists, xPath.Exists, "Xpath Qvi does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_Zip_Exists_OnDesignSurface - Use 'Assert_Zip_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Zip_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom zip = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Zip;
            #endregion

            // Verify that the 'Exists' property of 'DsfZip' custom control equals 'True'
            Assert.AreEqual(this.Assert_Zip_Exists_OnDesignSurfaceExpectedValues.ZipExists, zip.Exists, "Zip tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Zip_Large_View_Exists_OnDesignSurface - Use 'Assert_Zip_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Zip_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom zip = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Zip;
            #endregion

            // Verify that the 'Exists' property of 'DsfZip' custom control equals 'True'
            Assert.AreEqual(this.Assert_Zip_Large_View_Exists_OnDesignSurfaceExpectedValues.ZipExists, zip.Exists, "Zip large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Click_Close_Tab_Button
        /// </summary>
        public void Click_Close_Tab_Button()
        {
            #region Variable Declarations
            WpfButton closeButton = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.CloseButton;
            #endregion

            // Click 'closeBtn' custom control
            Mouse.Click(closeButton, new Point(5, 5));
        }
        
        /// <summary>
        /// Click_Close_Tab_Context_Menu_Button
        /// </summary>
        public void Click_Close_Tab_Context_Menu_Button()
        {
            #region Variable Declarations
            WpfMenuItem close = this.MainStudioWindow.TabContextMenu.Close;
            #endregion

            // Click 'Close' menu item
            Mouse.Click(close, new Point(27, 13));
        }
        
        /// <summary>
        /// Click_Show_Server_Version_Explorer_Context_menu
        /// </summary>
        public void Click_Show_Server_Version_Explorer_Context_menu()
        {
            #region Variable Declarations
            WpfMenuItem showServerVersion = this.MainStudioWindow.ExplorerContextMenu.ShowServerVersion;
            #endregion

            // Click 'Server Version' menu item
            Mouse.Click(showServerVersion, new Point(45, 13));
        }
        
        /// <summary>
        /// Drag_Database_Connector_Onto_DesignSurface
        /// </summary>
        public void Drag_Database_Connector_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfTreeItem databaseConnector = this.MainStudioWindow.Explorer.ExplorerTree.LocalhostTreeItem.DatabaseConnector;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 137));
            Mouse.StartDragging(databaseConnector, new Point(111, 184));
            Mouse.StopDragging(flowchart, new Point(305, 137));
        }
        
        /// <summary>
        /// Drag_Database_Source_Onto_DesignSurface
        /// </summary>
        public void Drag_Database_Source_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfTree explorerTree = this.MainStudioWindow.Explorer.ExplorerTree;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'ExplorerTree' tree to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(288, 185));
            Mouse.StartDragging(explorerTree, new Point(102, 377));
            Mouse.StopDragging(flowchart, new Point(288, 185));
        }
        
        /// <summary>
        /// Drag_DotNet_DLL_Connector_Onto_DesignSurface
        /// </summary>
        public void Drag_DotNet_DLL_Connector_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage dotNetDLLConnectorImage = this.MainStudioWindow.ToolBox.ToolListBox.ResourceTools.DotNetDLLConnector.DotNetDLLConnectorImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'DotNetDLLConnector' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 127));
            Mouse.StartDragging(dotNetDLLConnectorImage, new Point(16, 25));
            Mouse.StopDragging(flowchart, new Point(308, 127));
        }
        
        /// <summary>
        /// Drag_GetWeb_RequestTool_Onto_DesignSurface
        /// </summary>
        public void Drag_GetWeb_RequestTool_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage webRequestImage = this.MainStudioWindow.ToolBox.ToolListBox.UtilityTools.WebRequest.WebRequestImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'WebRequest' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 124));
            Mouse.StartDragging(webRequestImage, new Point(12, 3));
            Mouse.StopDragging(flowchart, new Point(305, 124));
        }
        
        /// <summary>
        /// Drag_Plugin_Connector_Onto_DesignSurface
        /// </summary>
        public void Drag_Plugin_Connector_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfTreeItem pluginConnector = this.MainStudioWindow.Explorer.ExplorerTree.LocalhostTreeItem.PluginConnector;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(311, 140));
            Mouse.StartDragging(pluginConnector, new Point(58, 12));
            Mouse.StopDragging(flowchart, new Point(311, 140));
        }
        
        /// <summary>
        /// Drag_Plugin_Source_Onto_DesignSurface
        /// </summary>
        public void Drag_Plugin_Source_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfTree explorerTree = this.MainStudioWindow.Explorer.ExplorerTree;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'ExplorerTree' tree to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(302, 173));
            Mouse.StartDragging(explorerTree, new Point(107, 456));
            Mouse.StopDragging(flowchart, new Point(302, 173));
        }
        
        /// <summary>
        /// Drag_PostWeb_RequestTool_Onto_DesignSurface
        /// </summary>
        public void Drag_PostWeb_RequestTool_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfCustom webPost = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebPost;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'DsfWebPostActivity' custom control to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 128));
            Mouse.StartDragging(webPost, new Point(20, 35));
            Mouse.StopDragging(flowchart, new Point(306, 128));
        }
        
        /// <summary>
        /// Drag_Server_Source_Onto_DesignSurface
        /// </summary>
        public void Drag_Server_Source_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfTreeItem serverSource = this.MainStudioWindow.Explorer.ExplorerTree.LocalhostTreeItem.ServerSource;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(295, 235));
            Mouse.StartDragging(serverSource, new Point(71, 12));
            Mouse.StopDragging(flowchart, new Point(295, 235));
        }
        
        /// <summary>
        /// Drag_Sharepoint_Source_Onto_DesignSurface
        /// </summary>
        public void Drag_Sharepoint_Source_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfTreeItem sharepointSource = this.MainStudioWindow.Explorer.ExplorerTree.LocalhostTreeItem.SharepointSource;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 165));
            Mouse.StartDragging(sharepointSource, new Point(131, 11));
            Mouse.StopDragging(flowchart, new Point(307, 165));
        }
        
        /// <summary>
        /// Drag_Toolbox_Base_Conversion_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Base_Conversion_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage baseConvertImage = this.MainStudioWindow.ToolBox.ToolListBox.DataTools.BaseConvert.BaseConvertImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'BaseConvert' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(303, 128));
            Mouse.StartDragging(baseConvertImage, new Point(12, 12));
            Mouse.StopDragging(flowchart, new Point(303, 128));
        }
        
        /// <summary>
        /// Drag_Toolbox_Calculate_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Calculate_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage calculateImage = this.MainStudioWindow.ToolBox.ToolListBox.UtilityTools.Calculate.CalculateImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Calculate' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 131));
            Mouse.StartDragging(calculateImage, new Point(59, -17));
            Mouse.StopDragging(flowchart, new Point(305, 131));
        }
        
        /// <summary>
        /// Drag_Toolbox_Case_Conversion_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Case_Conversion_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage caseConvertImage = this.MainStudioWindow.ToolBox.ToolListBox.DataTools.CaseConvert.CaseConvertImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'CaseConvert' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(303, 130));
            Mouse.StartDragging(caseConvertImage, new Point(19, 13));
            Mouse.StopDragging(flowchart, new Point(303, 130));
        }
        
        /// <summary>
        /// Drag_Toolbox_CMD_Line_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_CMD_Line_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage cMDScriptImage = this.MainStudioWindow.ToolBox.ToolListBox.ScriptingTools.CMDScript.CMDScriptImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'CMDScript' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 122));
            Mouse.StartDragging(cMDScriptImage, new Point(19, 19));
            Mouse.StopDragging(flowchart, new Point(305, 122));
        }
        
        /// <summary>
        /// Drag_Toolbox_Comment_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Comment_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage commentImage = this.MainStudioWindow.ToolBox.ToolListBox.UtilityTools.Comment.CommentImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Comment' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 129));
            Mouse.StartDragging(commentImage, new Point(40, 15));
            Mouse.StopDragging(flowchart, new Point(308, 129));
        }
        
        /// <summary>
        /// Drag_Toolbox_Copy_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Copy_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage copyImage = this.MainStudioWindow.ToolBox.ToolListBox.FileAndFTP.Copy.CopyImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Copy' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(310, 129));
            Mouse.StartDragging(copyImage, new Point(19, -3));
            Mouse.StopDragging(flowchart, new Point(310, 129));
        }
        
        /// <summary>
        /// Drag_Toolbox_Count_Records_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Count_Records_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage countImage = this.MainStudioWindow.ToolBox.ToolListBox.RecordsetTools.Count.CountImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Count' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 125));
            Mouse.StartDragging(countImage, new Point(13, 18));
            Mouse.StopDragging(flowchart, new Point(307, 125));
        }
        
        /// <summary>
        /// Drag_Toolbox_Create_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Create_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage createImage = this.MainStudioWindow.ToolBox.ToolListBox.FileAndFTP.Create.CreateImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Create' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 131));
            Mouse.StartDragging(createImage, new Point(9, 16));
            Mouse.StopDragging(flowchart, new Point(308, 131));
        }
        
        /// <summary>
        /// Drag_Toolbox_Data_Merge_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Data_Merge_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage dataMergeImage = this.MainStudioWindow.ToolBox.ToolListBox.DataTools.DataMerge.DataMergeImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'DataMerge' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 133));
            Mouse.StartDragging(dataMergeImage, new Point(54, 23));
            Mouse.StopDragging(flowchart, new Point(305, 133));
        }
        
        /// <summary>
        /// Drag_Toolbox_Data_Split_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Data_Split_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage dataSplitImage = this.MainStudioWindow.ToolBox.ToolListBox.DataTools.DataSplit.DataSplitImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'DataSplit' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 129));
            Mouse.StartDragging(dataSplitImage, new Point(3, 8));
            Mouse.StopDragging(flowchart, new Point(308, 129));
        }
        
        /// <summary>
        /// Drag_Toolbox_Date_And_Time_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Date_And_Time_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage dateTimeImage = this.MainStudioWindow.ToolBox.ToolListBox.UtilityTools.DateTime.DateTimeImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'DateTime' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 127));
            Mouse.StartDragging(dateTimeImage, new Point(20, -1));
            Mouse.StopDragging(flowchart, new Point(304, 127));
        }
        
        /// <summary>
        /// Drag_Toolbox_DateTime_Difference_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_DateTime_Difference_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage dateTimeDifferenceImage = this.MainStudioWindow.ToolBox.ToolListBox.UtilityTools.DateTimeDifference.DateTimeDifferenceImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'DateTimeDifference' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 131));
            Mouse.StartDragging(dateTimeDifferenceImage, new Point(48, 7));
            Mouse.StopDragging(flowchart, new Point(306, 131));
        }
        
        /// <summary>
        /// Drag_Toolbox_Decision_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Decision_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage decisionImage = this.MainStudioWindow.ToolBox.ToolListBox.FlowTools.Decision.DecisionImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Decision' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(309, 128));
            Mouse.StartDragging(decisionImage, new Point(16, 11));
            Mouse.StopDragging(flowchart, new Point(309, 128));
        }
        
        /// <summary>
        /// Drag_Toolbox_Delete_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Delete_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage deleteImage = this.MainStudioWindow.ToolBox.ToolListBox.FileAndFTP.Delete.DeleteImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Delete' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 125));
            Mouse.StartDragging(deleteImage, new Point(13, 9));
            Mouse.StopDragging(flowchart, new Point(306, 125));
        }
        
        /// <summary>
        /// Drag_Toolbox_Delete_Record_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Delete_Record_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage deleteImage = this.MainStudioWindow.ToolBox.ToolListBox.RecordsetTools.Delete.DeleteImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Delete' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(309, 128));
            Mouse.StartDragging(deleteImage, new Point(1, 15));
            Mouse.StopDragging(flowchart, new Point(309, 128));
        }
        
        /// <summary>
        /// Drag_Toolbox_Dropbox_Download_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Dropbox_Download_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage dropboxDownloadImage = this.MainStudioWindow.ToolBox.ToolListBox.StorageTools.DropboxDownload.DropboxDownloadImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'DropboxDownload' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 131));
            Mouse.StartDragging(dropboxDownloadImage, new Point(30, 8));
            Mouse.StopDragging(flowchart, new Point(307, 131));
        }
        
        /// <summary>
        /// Drag_Toolbox_Dropbox_Upload_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Dropbox_Upload_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage dropboxUploadImage = this.MainStudioWindow.ToolBox.ToolListBox.StorageTools.DropboxUpload.DropboxUploadImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'DropboxUpload' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 131));
            Mouse.StartDragging(dropboxUploadImage, new Point(30, 8));
            Mouse.StopDragging(flowchart, new Point(307, 131));
        }
        
        /// <summary>
        /// Drag_Toolbox_Email_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Email_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage emailImage = this.MainStudioWindow.ToolBox.ToolListBox.UtilityTools.Email.EmailImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Email' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 129));
            Mouse.StartDragging(emailImage, new Point(16, -39));
            Mouse.StopDragging(flowchart, new Point(308, 129));
        }
        
        /// <summary>
        /// Drag_Toolbox_Find_Index_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Find_Index_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage findIndexImage = this.MainStudioWindow.ToolBox.ToolListBox.DataTools.FindIndex.FindIndexImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'FindIndex' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 131));
            Mouse.StartDragging(findIndexImage, new Point(9, 5));
            Mouse.StopDragging(flowchart, new Point(305, 131));
        }
        
        /// <summary>
        /// Drag_Toolbox_Find_Record_Index_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Find_Record_Index_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage findRecordsImage = this.MainStudioWindow.ToolBox.ToolListBox.RecordsetTools.FindRecords.FindRecordsImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'FindRecords' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 130));
            Mouse.StartDragging(findRecordsImage, new Point(8, 8));
            Mouse.StopDragging(flowchart, new Point(307, 130));
        }
        
        /// <summary>
        /// Drag_Toolbox_For_Each_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_For_Each_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage forEachImage = this.MainStudioWindow.ToolBox.ToolListBox.LoopTools.ForEach.ForEachImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'ForEach' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 129));
            Mouse.StartDragging(forEachImage, new Point(40, 19));
            Mouse.StopDragging(flowchart, new Point(307, 129));
        }
        
        /// <summary>
        /// Drag_Toolbox_Format_Number_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Format_Number_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage formatNumberImage = this.MainStudioWindow.ToolBox.ToolListBox.UtilityTools.FormatNumber.FormatNumberImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'FormatNumber' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 131));
            Mouse.StartDragging(formatNumberImage, new Point(18, 11));
            Mouse.StopDragging(flowchart, new Point(305, 131));
        }
        
        /// <summary>
        /// Drag_Toolbox_JSON_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_JSON_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage createJSONImage = this.MainStudioWindow.ToolBox.ToolListBox.UtilityTools.CreateJSON.CreateJSONImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'CreateJSON' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 127));
            Mouse.StartDragging(createJSONImage, new Point(0, 10));
            Mouse.StopDragging(flowchart, new Point(305, 127));
        }
        
        /// <summary>
        /// Drag_Toolbox_Length_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Length_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage lengthImage = this.MainStudioWindow.ToolBox.ToolListBox.RecordsetTools.Length.LengthImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Length' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 125));
            Mouse.StartDragging(lengthImage, new Point(16, 6));
            Mouse.StopDragging(flowchart, new Point(308, 125));
        }
        
        /// <summary>
        /// Drag_Toolbox_Move_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Move_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage moveImage = this.MainStudioWindow.ToolBox.ToolListBox.FileAndFTP.Move.MoveImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Move' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 129));
            Mouse.StartDragging(moveImage, new Point(32, 4));
            Mouse.StopDragging(flowchart, new Point(306, 129));
        }
        
        /// <summary>
        /// Drag_Toolbox_MultiAssign_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_MultiAssign_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage assignImage = this.MainStudioWindow.ToolBox.ToolListBox.DataTools.MultiAssign.AssignImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Assign' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 128));
            Mouse.StartDragging(assignImage, new Point(13, 17));
            Mouse.StopDragging(flowchart, new Point(307, 128));
        }
        
        /// <summary>
        /// Drag_Toolbox_MySql_Database_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_MySql_Database_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage mySQLImage = this.MainStudioWindow.ToolBox.ToolListBox.Database.MySQL.MySQLImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'MySQL' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 130));
            Mouse.StartDragging(mySQLImage, new Point(4, 2));
            Mouse.StopDragging(flowchart, new Point(306, 130));
        }
        
        /// <summary>
        /// Drag_Toolbox_Random_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Random_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage randomImage = this.MainStudioWindow.ToolBox.ToolListBox.UtilityTools.Random.RandomImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Random' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 127));
            Mouse.StartDragging(randomImage, new Point(9, -21));
            Mouse.StopDragging(flowchart, new Point(308, 127));
        }
        
        /// <summary>
        /// Drag_Toolbox_Read_File_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Read_File_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage readFileImage = this.MainStudioWindow.ToolBox.ToolListBox.FileAndFTP.ReadFile.ReadFileImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'ReadFile' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 125));
            Mouse.StartDragging(readFileImage, new Point(12, 15));
            Mouse.StopDragging(flowchart, new Point(304, 125));
        }
        
        /// <summary>
        /// Drag_Toolbox_Read_Folder_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Read_Folder_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage readFolderImage = this.MainStudioWindow.ToolBox.ToolListBox.FileAndFTP.ReadFolder.ReadFolderImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'ReadFolder' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 129));
            Mouse.StartDragging(readFolderImage, new Point(14, 3));
            Mouse.StopDragging(flowchart, new Point(305, 129));
        }
        
        /// <summary>
        /// Drag_Toolbox_Rename_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Rename_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage renameImage = this.MainStudioWindow.ToolBox.ToolListBox.FileAndFTP.Rename.RenameImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Rename' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 128));
            Mouse.StartDragging(renameImage, new Point(6, 11));
            Mouse.StopDragging(flowchart, new Point(305, 128));
        }
        
        /// <summary>
        /// Drag_Toolbox_Replace_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Replace_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage replaceImage = this.MainStudioWindow.ToolBox.ToolListBox.DataTools.Replace.ReplaceImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Replace' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 121));
            Mouse.StartDragging(replaceImage, new Point(16, 10));
            Mouse.StopDragging(flowchart, new Point(306, 121));
        }
        
        /// <summary>
        /// Drag_Toolbox_Script_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Script_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage scriptImage = this.MainStudioWindow.ToolBox.ToolListBox.ScriptingTools.Script.ScriptImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Script' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 130));
            Mouse.StartDragging(scriptImage, new Point(49, 17));
            Mouse.StopDragging(flowchart, new Point(307, 130));
        }
        
        /// <summary>
        /// Drag_Toolbox_Sequence_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Sequence_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage sequenceImage = this.MainStudioWindow.ToolBox.ToolListBox.FlowTools.Sequence.SequenceImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Sequence' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 131));
            Mouse.StartDragging(sequenceImage, new Point(18, -12));
            Mouse.StopDragging(flowchart, new Point(305, 131));
        }
        
        /// <summary>
        /// Drag_Toolbox_Service_Picker_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Service_Picker_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage serviceImage = this.MainStudioWindow.ToolBox.ToolListBox.ResourceTools.Service.ServiceImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Service' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 126));
            Mouse.StartDragging(serviceImage, new Point(50, 5));
            Mouse.StopDragging(flowchart, new Point(304, 126));
        }
        
        /// <summary>
        /// Drag_Toolbox_Sharepoint_Create_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Sharepoint_Create_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage createListItemsImage = this.MainStudioWindow.ToolBox.ToolListBox.SharepointTools.CreateListItems.CreateListItemsImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'CreateListItems' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(311, 128));
            Mouse.StartDragging(createListItemsImage, new Point(10, 16));
            Mouse.StopDragging(flowchart, new Point(311, 128));
        }
        
        /// <summary>
        /// Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage deleteListItemsImage = this.MainStudioWindow.ToolBox.ToolListBox.SharepointTools.DeleteListItems.DeleteListItemsImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'DeleteListItems' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 131));
            Mouse.StartDragging(deleteListItemsImage, new Point(16, 5));
            Mouse.StopDragging(flowchart, new Point(306, 131));
        }
        
        /// <summary>
        /// Drag_Toolbox_Sharepoint_Read_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Sharepoint_Read_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage readListItemsImage = this.MainStudioWindow.ToolBox.ToolListBox.SharepointTools.ReadListItems.ReadListItemsImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'ReadListItems' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(303, 128));
            Mouse.StartDragging(readListItemsImage, new Point(13, 15));
            Mouse.StopDragging(flowchart, new Point(303, 128));
        }
        
        /// <summary>
        /// Drag_Toolbox_Sharepoint_Update_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Sharepoint_Update_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage updateListItemsImage = this.MainStudioWindow.ToolBox.ToolListBox.SharepointTools.UpdateListItems.UpdateListItemsImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'UpdateListItems' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(300, 127));
            Mouse.StartDragging(updateListItemsImage, new Point(17, 9));
            Mouse.StopDragging(flowchart, new Point(300, 127));
        }
        
        /// <summary>
        /// Drag_Toolbox_Sort_Record_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Sort_Record_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage sortImage = this.MainStudioWindow.ToolBox.ToolListBox.RecordsetTools.Sort.SortImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Sort' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(300, 122));
            Mouse.StartDragging(sortImage, new Point(7, 8));
            Mouse.StopDragging(flowchart, new Point(300, 122));
        }
        
        /// <summary>
        /// Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage sQLBulkInsertImage = this.MainStudioWindow.ToolBox.ToolListBox.Database.SQLBulkInsert.SQLBulkInsertImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'SQLBulkInsert' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 129));
            Mouse.StartDragging(sQLBulkInsertImage, new Point(11, 16));
            Mouse.StopDragging(flowchart, new Point(304, 129));
        }
        
        /// <summary>
        /// Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage sQLServerImage = this.MainStudioWindow.ToolBox.ToolListBox.Database.SQLServer.SQLServerImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'SQLServer' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 127));
            Mouse.StartDragging(sQLServerImage, new Point(10, -7));
            Mouse.StopDragging(flowchart, new Point(304, 127));
        }
        
        /// <summary>
        /// Drag_Toolbox_Switch_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Switch_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage switchImage = this.MainStudioWindow.ToolBox.ToolListBox.FlowTools.Switch.SwitchImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Switch' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(303, 126));
            Mouse.StartDragging(switchImage, new Point(22, 30));
            Mouse.StopDragging(flowchart, new Point(303, 126));
        }
        
        /// <summary>
        /// Drag_Toolbox_System_Information_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_System_Information_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage sysInfoImage = this.MainStudioWindow.ToolBox.ToolListBox.UtilityTools.SysInfo.SysInfoImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'SysInfo' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 129));
            Mouse.StartDragging(sysInfoImage, new Point(8, 12));
            Mouse.StopDragging(flowchart, new Point(304, 129));
        }
        
        /// <summary>
        /// Drag_Toolbox_Unique_Records_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Unique_Records_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage uniqueRecordsImage = this.MainStudioWindow.ToolBox.ToolListBox.RecordsetTools.UniqueRecords.UniqueRecordsImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'UniqueRecords' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 133));
            Mouse.StartDragging(uniqueRecordsImage, new Point(43, 6));
            Mouse.StopDragging(flowchart, new Point(304, 133));
        }
        
        /// <summary>
        /// Drag_Toolbox_Unzip_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Unzip_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage unZipImage = this.MainStudioWindow.ToolBox.ToolListBox.FileAndFTP.UnZip.UnZipImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'UnZip' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 128));
            Mouse.StartDragging(unZipImage, new Point(15, 0));
            Mouse.StopDragging(flowchart, new Point(306, 128));
        }
        
        /// <summary>
        /// Drag_Toolbox_Web_Request_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Web_Request_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage webRequestImage = this.MainStudioWindow.ToolBox.ToolListBox.UtilityTools.WebRequest.WebRequestImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'WebRequest' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 128));
            Mouse.StartDragging(webRequestImage, new Point(14, 3));
            Mouse.StopDragging(flowchart, new Point(308, 128));
        }
        
        /// <summary>
        /// Drag_Toolbox_Write_File_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Write_File_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage writeFileImage = this.MainStudioWindow.ToolBox.ToolListBox.FileAndFTP.WriteFile.WriteFileImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'WriteFile' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 132));
            Mouse.StartDragging(writeFileImage, new Point(10, 18));
            Mouse.StopDragging(flowchart, new Point(306, 132));
        }
        
        /// <summary>
        /// Drag_Toolbox_XPath_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_XPath_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage xPathImage = this.MainStudioWindow.ToolBox.ToolListBox.UtilityTools.XPath.XPathImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'XPath' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 123));
            Mouse.StartDragging(xPathImage, new Point(12, -13));
            Mouse.StopDragging(flowchart, new Point(307, 123));
        }
        
        /// <summary>
        /// Drag_Toolbox_Zip_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Zip_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage zipImage = this.MainStudioWindow.ToolBox.ToolListBox.FileAndFTP.Zip.ZipImage;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Zip' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 131));
            Mouse.StartDragging(zipImage, new Point(16, 4));
            Mouse.StopDragging(flowchart, new Point(306, 131));
        }
        
        /// <summary>
        /// Drag_Web_Connector_Onto_DesignSurface
        /// </summary>
        public void Drag_Web_Connector_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfTreeItem webConnector = this.MainStudioWindow.Explorer.ExplorerTree.LocalhostTreeItem.WebConnector;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(295, 123));
            Mouse.StartDragging(webConnector, new Point(82, 12));
            Mouse.StopDragging(flowchart, new Point(295, 123));
        }
        
        /// <summary>
        /// Drag_Web_Source_Onto_DesignSurface
        /// </summary>
        public void Drag_Web_Source_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfTree explorerTree = this.MainStudioWindow.Explorer.ExplorerTree;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'ExplorerTree' tree to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(302, 134));
            Mouse.StartDragging(explorerTree, new Point(141, 413));
            Mouse.StopDragging(flowchart, new Point(302, 134));
        }
        
        /// <summary>
        /// Drag_Workflow_Onto_DesignSurface
        /// </summary>
        public void Drag_Workflow_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfTreeItem uIInfragisticsControlsTreeItem1 = this.MainStudioWindow.Explorer.ExplorerTree.LocalhostTreeItem.UIInfragisticsControlsTreeItem1;
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            WpfCustom subWorkflow = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SubWorkflow;
            #endregion

            // Move 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(302, 123));
            Mouse.StartDragging(uIInfragisticsControlsTreeItem1, new Point(77, 9));
            Mouse.StopDragging(flowchart, new Point(302, 123));

            // Double-Click 'DsfActivity' custom control
            Mouse.DoubleClick(subWorkflow, new Point(262, 3));
        }
        
        /// <summary>
        /// Open_Assign_Tool_Large_View
        /// </summary>
        public void Open_Assign_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom multiAssign = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign;
            #endregion

            // Double-Click 'DsfMultiAssignActivity' custom control
            Mouse.DoubleClick(multiAssign, new Point(145, 5));
        }
        
        /// <summary>
        /// Open_Assign_Tool_Qvi_Large_View - Use 'Open_Assign_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Assign_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.OpenQuickVariableInpToggleButton;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Assign_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;
        }
        
        /// <summary>
        /// Open_Base_Conversion_Tool_Qvi_Large_View - Use 'Open_Base_Conversion_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Base_Conversion_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert.OpenQuickVariableInpToggleButton;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Base_Conversion_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;
        }
        
        /// <summary>
        /// Open_Case_Conversion_Tool_Qvi_Large_View - Use 'Open_Case_Conversion_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Case_Conversion_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CaseConvert.OpenQuickVariableInpToggleButton;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Case_Conversion_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;
        }
        
        /// <summary>
        /// Open_CMD_Line_Tool_Large_View
        /// </summary>
        public void Open_CMD_Line_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom executeCommandLine = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine;
            #endregion

            // Double-Click 'DsfExecuteCommandLineActivity' custom control
            Mouse.DoubleClick(executeCommandLine, new Point(174, 10));
        }
        
        /// <summary>
        /// Open_Context_Menu_OnDesignSurface
        /// </summary>
        public void Open_Context_Menu_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom flowchart = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Right-Click 'Flowchart' custom control
            Mouse.Click(flowchart, MouseButtons.Right, ModifierKeys.None, new Point(304, 286));
        }
        
        /// <summary>
        /// Open_Copy_Tool_Large_View
        /// </summary>
        public void Open_Copy_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom pathCopy = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCopy;
            #endregion

            // Double-Click 'DsfPathCopy' custom control
            Mouse.DoubleClick(pathCopy, new Point(144, 11));
        }
        
        /// <summary>
        /// Open_CountRecords_Large_View
        /// </summary>
        public void Open_CountRecords_Large_View()
        {
            #region Variable Declarations
            WpfCustom countRecordset = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CountRecordset;
            #endregion

            // Double-Click 'DsfCountRecordsetActivity' custom control
            Mouse.DoubleClick(countRecordset, new Point(130, 11));
        }
        
        /// <summary>
        /// Open_Create_JSON_Large_View
        /// </summary>
        public void Open_Create_JSON_Large_View()
        {
            #region Variable Declarations
            WpfCustom createJson = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson;
            #endregion

            // Double-Click 'DsfCreateJsonActivity' custom control
            Mouse.DoubleClick(createJson, new Point(124, 9));
        }
        
        /// <summary>
        /// Open_Create_Tool_Large_View
        /// </summary>
        public void Open_Create_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom pathCreate = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCreate;
            #endregion

            // Double-Click 'DsfPathCreate' custom control
            Mouse.DoubleClick(pathCreate, new Point(118, 13));
        }
        
        /// <summary>
        /// Open_Data_Merge_Large_View
        /// </summary>
        public void Open_Data_Merge_Large_View()
        {
            #region Variable Declarations
            WpfCustom dataMerge = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge;
            #endregion

            // Double-Click 'DsfDataMergeActivity' custom control
            Mouse.DoubleClick(dataMerge, new Point(185, 9));
        }
        
        /// <summary>
        /// Open_Data_Merge_Tool_Qvi_Large_View - Use 'Open_Data_Merge_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Data_Merge_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.OpenQuickVariableInpToggleButton;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Data_Merge_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;
        }
        
        /// <summary>
        /// Open_Data_Split_Large_View
        /// </summary>
        public void Open_Data_Split_Large_View()
        {
            #region Variable Declarations
            WpfCustom dataSplit = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit;
            #endregion

            // Double-Click 'DsfDataSplitActivity' custom control
            Mouse.DoubleClick(dataSplit, new Point(203, 10));
        }
        
        /// <summary>
        /// Open_Data_Split_Tool_Qvi_Large_View - Use 'Open_Data_Split_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Data_Split_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit.OpenQuickVariableInpToggleButton;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Data_Split_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;
        }
        
        /// <summary>
        /// Open_DotNet_DLL_Connector_Tool_Small_View
        /// </summary>
        public void Open_DotNet_DLL_Connector_Tool_Small_View()
        {
            #region Variable Declarations
            WpfCustom dotNetDll = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll;
            #endregion

            // Double-Click 'DsfDotNetDllActivity' custom control
            Mouse.DoubleClick(dotNetDll, new Point(238, 16));
        }
        
        /// <summary>
        /// Open_DropboxFileOperation_Large_View
        /// </summary>
        public void Open_DropboxFileOperation_Large_View()
        {
            #region Variable Declarations
            WpfCustom dropBox_DOWNLOAD = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DropBox_DOWNLOAD;
            #endregion

            // Double-Click 'DsfDropBoxFileActivity' custom control
            Mouse.DoubleClick(dropBox_DOWNLOAD, new Point(174, 14));
        }
        
        /// <summary>
        /// Open_Email_Tool_Large_View
        /// </summary>
        public void Open_Email_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sendEmail = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SendEmail;
            #endregion

            // Double-Click 'DsfSendEmailActivity' custom control
            Mouse.DoubleClick(sendEmail, new Point(168, 11));
        }
        
        /// <summary>
        /// Open_ExecuteCommandline_LargeView
        /// </summary>
        public void Open_ExecuteCommandline_LargeView()
        {
            #region Variable Declarations
            WpfCustom executeCommandLine = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine;
            #endregion

            // Double-Click 'DsfExecuteCommandLineActivity' custom control
            Mouse.DoubleClick(executeCommandLine, new Point(178, 10));
        }
        
        /// <summary>
        /// Open_Find_Record_Index_Tool_Large_View
        /// </summary>
        public void Open_Find_Record_Index_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom findRecordsIndex = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindRecordsIndex;
            #endregion

            // Double-Click 'DsfFindRecordsMultipleCriteriaActivity' custom control
            Mouse.DoubleClick(findRecordsIndex, new Point(172, 5));
        }
        
        /// <summary>
        /// Open_ForEach_Large_View
        /// </summary>
        public void Open_ForEach_Large_View()
        {
            #region Variable Declarations
            WpfCustom forEach = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach;
            #endregion

            // Double-Click 'DsfForEachActivity' custom control
            Mouse.DoubleClick(forEach, new Point(131, 14));
        }
        
        /// <summary>
        /// Open_GetWeb_RequestTool_small_View
        /// </summary>
        public void Open_GetWeb_RequestTool_small_View()
        {
            #region Variable Declarations
            WpfCustom webGet = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet;
            #endregion

            // Double-Click 'DsfWebGetActivity' custom control
            Mouse.DoubleClick(webGet, new Point(237, 7));
        }
        
        /// <summary>
        /// Open_Json_Tool_Large_View
        /// </summary>
        public void Open_Json_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom createJson = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson;
            #endregion

            // Double-Click 'DsfCreateJsonActivity' custom control
            Mouse.DoubleClick(createJson, new Point(158, 13));
        }
        
        /// <summary>
        /// Open_Json_Tool_Qvi_Large_View - Use 'Open_Json_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Json_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson.OpenQuickVariableInpToggleButton;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Json_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;
        }
        
        /// <summary>
        /// Open_Move_Tool_Large_View
        /// </summary>
        public void Open_Move_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom pathMove = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathMove;
            #endregion

            // Double-Click 'DsfPathMove' custom control
            Mouse.DoubleClick(pathMove, new Point(125, 6));
        }
        
        /// <summary>
        /// Open_MySql_Database_Tool_Small_View
        /// </summary>
        public void Open_MySql_Database_Tool_Small_View()
        {
            #region Variable Declarations
            WpfCustom mySqlDatabase = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MySqlDatabase;
            #endregion

            // Double-Click 'DsfMySqlDatabaseActivity' custom control
            Mouse.DoubleClick(mySqlDatabase, new Point(238, 15));
        }
        
        /// <summary>
        /// Open_PostWeb_RequestTool_small_View
        /// </summary>
        public void Open_PostWeb_RequestTool_small_View()
        {
            #region Variable Declarations
            WpfCustom webPost = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebPost;
            #endregion

            // Double-Click 'DsfWebPostActivity' custom control
            Mouse.DoubleClick(webPost, new Point(255, 8));
        }
        
        /// <summary>
        /// Open_Read_File_Tool_Large_View
        /// </summary>
        public void Open_Read_File_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom fileRead = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileRead;
            #endregion

            // Double-Click 'DsfFileRead' custom control
            Mouse.DoubleClick(fileRead, new Point(120, 5));
        }
        
        /// <summary>
        /// Open_Read_Folder_Tool_Large_View
        /// </summary>
        public void Open_Read_Folder_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom folderRead = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FolderRead;
            #endregion

            // Double-Click 'DsfFolderRead' custom control
            Mouse.DoubleClick(folderRead, new Point(138, 14));
        }
        
        /// <summary>
        /// Open_Rename_Tool_Large_View
        /// </summary>
        public void Open_Rename_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom pathRename = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathRename;
            #endregion

            // Double-Click 'DsfPathRename' custom control
            Mouse.DoubleClick(pathRename, new Point(145, 7));
        }
        
        /// <summary>
        /// Open_Sharepoint_Create_Tool_Large_View
        /// </summary>
        public void Open_Sharepoint_Create_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sharepointCreate = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCreate;
            #endregion

            // Double-Click 'SharepointCreateListItemActivity' custom control
            Mouse.DoubleClick(sharepointCreate, new Point(195, 11));
        }
        
        /// <summary>
        /// Open_Sharepoint_Delete_Tool_Large_View
        /// </summary>
        public void Open_Sharepoint_Delete_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sharepointDelete = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointDelete;
            #endregion

            // Double-Click 'SharepointDeleteListItemActivity' custom control
            Mouse.DoubleClick(sharepointDelete, new Point(218, 11));
        }
        
        /// <summary>
        /// Open_Sharepoint_Read_Tool_Large_View
        /// </summary>
        public void Open_Sharepoint_Read_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sharepointRead = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointRead;
            #endregion

            // Double-Click 'SharepointReadListActivity' custom control
            Mouse.DoubleClick(sharepointRead, new Point(195, 7));
        }
        
        /// <summary>
        /// Open_Sharepoint_Update_Tool_Large_View
        /// </summary>
        public void Open_Sharepoint_Update_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sharepointUpdate = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointUpdate;
            #endregion

            // Double-Click 'SharepointUpdateListItemActivity' custom control
            Mouse.DoubleClick(sharepointUpdate, new Point(230, 11));
        }
        
        /// <summary>
        /// Open_SortRecords_Large_View
        /// </summary>
        public void Open_SortRecords_Large_View()
        {
            #region Variable Declarations
            WpfCustom sortRecords = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SortRecords;
            #endregion

            // Double-Click 'DsfSortRecordsActivity' custom control
            Mouse.DoubleClick(sortRecords, new Point(114, 13));
        }
        
        /// <summary>
        /// Open_SQL_Bulk_Insert_Tool_Large_View
        /// </summary>
        public void Open_SQL_Bulk_Insert_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sqlBulkInsert = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlBulkInsert;
            #endregion

            // Double-Click 'DsfSqlBulkInsertActivity' custom control
            Mouse.DoubleClick(sqlBulkInsert, new Point(157, 6));
        }
        
        /// <summary>
        /// Open_SQL_Bulk_Insert_Tool_Qvi_Large_View - Use 'Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_SQL_Bulk_Insert_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlBulkInsert.OpenQuickVariableInpToggleButton;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;
        }
        
        /// <summary>
        /// Open_Sql_Server_Tool_small_View
        /// </summary>
        public void Open_Sql_Server_Tool_small_View()
        {
            #region Variable Declarations
            WpfCustom sqlServerDatabase = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase;
            #endregion

            // Double-Click 'DsfSqlServerDatabaseActivity' custom control
            Mouse.DoubleClick(sqlServerDatabase, new Point(253, 18));
        }
        
        /// <summary>
        /// Open_System_Information_Tool_Qvi_Large_View - Use 'Open_System_Information_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_System_Information_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.GatherSystemInfo.OpenQuickVariableInpToggleButton;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_System_Information_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;
        }
        
        /// <summary>
        /// Open_UniqueRecords_Large_View
        /// </summary>
        public void Open_UniqueRecords_Large_View()
        {
            #region Variable Declarations
            WpfCustom unique = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Unique;
            #endregion

            // Double-Click 'DsfUniqueActivity' custom control
            Mouse.DoubleClick(unique, new Point(134, 10));
        }
        
        /// <summary>
        /// Open_Unzip_Tool_Large_View
        /// </summary>
        public void Open_Unzip_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom unZip = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.UnZip;
            #endregion

            // Double-Click 'DsfUnZip' custom control
            Mouse.DoubleClick(unZip, new Point(102, 14));
        }
        
        /// <summary>
        /// Open_WebRequest_LargeView
        /// </summary>
        public void Open_WebRequest_LargeView()
        {
            #region Variable Declarations
            WpfCustom webGet = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet;
            #endregion

            // Double-Click 'DsfWebGetActivity' custom control
            Mouse.DoubleClick(webGet, new Point(126, 13));
        }
        
        /// <summary>
        /// Open_Write_File_Tool_Large_View
        /// </summary>
        public void Open_Write_File_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom fileWrite = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileWrite;
            #endregion

            // Double-Click 'DsfFileWrite' custom control
            Mouse.DoubleClick(fileWrite, new Point(149, 13));
        }
        
        /// <summary>
        /// Open_Xpath_Tool_Large_View
        /// </summary>
        public void Open_Xpath_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom xPath = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath;
            #endregion

            // Double-Click 'DsfXPathActivity' custom control
            Mouse.DoubleClick(xPath, new Point(113, 12));
        }
        
        /// <summary>
        /// Open_Xpath_Tool_Qvi_Large_View - Use 'Open_Xpath_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Xpath_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath.OpenQuickVariableInpToggleButton;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Xpath_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;
        }
        
        /// <summary>
        /// Open_Zip_Tool_Large_View
        /// </summary>
        public void Open_Zip_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom zip = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Zip;
            #endregion

            // Double-Click 'DsfZip' custom control
            Mouse.DoubleClick(zip, new Point(124, 12));
        }
        
        /// <summary>
        /// PressF11_EnterFullScreen - Use 'PressF11_EnterFullScreenParams' to pass parameters into this method.
        /// </summary>
        public void PressF11_EnterFullScreen()
        {
            #region Variable Declarations
            WpfWindow mainStudioWindow = this.MainStudioWindow;
            #endregion

            // Type '{F11}' in 'Warewolf' window
            Keyboard.SendKeys(mainStudioWindow, this.PressF11_EnterFullScreenParams.MainStudioWindowSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// RightClick_Assign_OnDesignSurface
        /// </summary>
        public void RightClick_Assign_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom multiAssign = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign;
            #endregion

            // Right-Click 'DsfMultiAssignActivity' custom control
            Mouse.Click(multiAssign, MouseButtons.Right, ModifierKeys.None, new Point(115, 10));
        }
        
        /// <summary>
        /// RightClick_BaseConvert_OnDesignSurface
        /// </summary>
        public void RightClick_BaseConvert_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom baseConvert = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert;
            #endregion

            // Right-Click 'DsfBaseConvertActivity' custom control
            Mouse.Click(baseConvert, MouseButtons.Right, ModifierKeys.None, new Point(148, 12));
        }
        
        /// <summary>
        /// RightClick_Calculate_OnDesignSurface
        /// </summary>
        public void RightClick_Calculate_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom calculate = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate;
            #endregion

            // Right-Click 'DsfCalculateActivity' custom control
            Mouse.Click(calculate, MouseButtons.Right, ModifierKeys.None, new Point(144, 10));
        }
        
        /// <summary>
        /// RightClick_CaseConvert_OnDesignSurface
        /// </summary>
        public void RightClick_CaseConvert_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom caseConvert = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CaseConvert;
            #endregion

            // Right-Click 'DsfCaseConvertActivity' custom control
            Mouse.Click(caseConvert, MouseButtons.Right, ModifierKeys.None, new Point(156, 10));
        }
        
        /// <summary>
        /// RightClick_Comment_OnDesignSurface
        /// </summary>
        public void RightClick_Comment_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom comment = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Comment;
            #endregion

            // Right-Click 'DsfCommentActivity' custom control
            Mouse.Click(comment, MouseButtons.Right, ModifierKeys.None, new Point(121, 10));
        }
        
        /// <summary>
        /// RightClick_Copy_OnDesignSurface
        /// </summary>
        public void RightClick_Copy_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathCopy = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCopy;
            #endregion

            // Right-Click 'DsfPathCopy' custom control
            Mouse.Click(pathCopy, MouseButtons.Right, ModifierKeys.None, new Point(104, 10));
        }
        
        /// <summary>
        /// RightClick_CountRecords_OnDesignSurface
        /// </summary>
        public void RightClick_CountRecords_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom countRecordset = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CountRecordset;
            #endregion

            // Right-Click 'DsfCountRecordsetActivity' custom control
            Mouse.Click(countRecordset, MouseButtons.Right, ModifierKeys.None, new Point(131, 10));
        }
        
        /// <summary>
        /// RightClick_CreateJSON_OnDesignSurface
        /// </summary>
        public void RightClick_CreateJSON_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom createJson = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson;
            #endregion

            // Right-Click 'DsfCreateJsonActivity' custom control
            Mouse.Click(createJson, MouseButtons.Right, ModifierKeys.None, new Point(128, 9));
        }
        
        /// <summary>
        /// RightClick_CreateTool_OnDesignSurface
        /// </summary>
        public void RightClick_CreateTool_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathCreate = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCreate;
            #endregion

            // Right-Click 'DsfPathCreate' custom control
            Mouse.Click(pathCreate, MouseButtons.Right, ModifierKeys.None, new Point(108, 14));
        }
        
        /// <summary>
        /// RightClick_DataMerge_OnDesignSurface
        /// </summary>
        public void RightClick_DataMerge_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dataMerge = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge;
            #endregion

            // Right-Click 'DsfDataMergeActivity' custom control
            Mouse.Click(dataMerge, MouseButtons.Right, ModifierKeys.None, new Point(140, 7));
        }
        
        /// <summary>
        /// RightClick_DataSplit_OnDesignSurface
        /// </summary>
        public void RightClick_DataSplit_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dataSplit = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit;
            #endregion

            // Right-Click 'DsfDataSplitActivity' custom control
            Mouse.Click(dataSplit, MouseButtons.Right, ModifierKeys.None, new Point(153, 6));
        }
        
        /// <summary>
        /// RightClick_DateTime_OnDesignSurface
        /// </summary>
        public void RightClick_DateTime_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dateTime = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTime;
            #endregion

            // Right-Click 'DsfDateTimeActivity' custom control
            Mouse.Click(dateTime, MouseButtons.Right, ModifierKeys.None, new Point(145, 13));
        }
        
        /// <summary>
        /// RightClick_DateTimeDifference_OnDesignSurface
        /// </summary>
        public void RightClick_DateTimeDifference_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dateTimeDifference = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTimeDifference;
            #endregion

            // Right-Click 'DsfDateTimeDifferenceActivity' custom control
            Mouse.Click(dateTimeDifference, MouseButtons.Right, ModifierKeys.None, new Point(174, 10));
        }
        
        /// <summary>
        /// RightClick_Decision_OnDesignSurface
        /// </summary>
        public void RightClick_Decision_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom decision = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Decision;
            #endregion

            // Right-Click 'FlowDecision' custom control
            Mouse.Click(decision, MouseButtons.Right, ModifierKeys.None, new Point(28, 22));
        }
        
        /// <summary>
        /// RightClick_Delete_OnDesignSurface
        /// </summary>
        public void RightClick_Delete_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathDelete = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathDelete;
            #endregion

            // Right-Click 'DsfPathDelete' custom control
            Mouse.Click(pathDelete, MouseButtons.Right, ModifierKeys.None, new Point(100, 10));
        }
        
        /// <summary>
        /// RightClick_DeleteRecord_OnDesignSurface
        /// </summary>
        public void RightClick_DeleteRecord_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom deleteRecord = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DeleteRecord;
            #endregion

            // Right-Click 'DsfDeleteRecordActivity' custom control
            Mouse.Click(deleteRecord, MouseButtons.Right, ModifierKeys.None, new Point(116, 9));
        }
        
        /// <summary>
        /// RightClick_DotNetDllConnector_OnDesignSurface
        /// </summary>
        public void RightClick_DotNetDllConnector_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dotNetDll = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll;
            #endregion

            // Right-Click 'DsfDotNetDllActivity' custom control
            Mouse.Click(dotNetDll, MouseButtons.Right, ModifierKeys.None, new Point(164, 10));
        }
        
        /// <summary>
        /// RightClick_DropboxFileOperation_OnDesignSurface
        /// </summary>
        public void RightClick_DropboxFileOperation_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dropBox_DOWNLOAD = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DropBox_DOWNLOAD;
            #endregion

            // Right-Click 'DsfDropBoxFileActivity' custom control
            Mouse.Click(dropBox_DOWNLOAD, MouseButtons.Right, ModifierKeys.None, new Point(181, 11));
        }
        
        /// <summary>
        /// RightClick_Email_OnDesignSurface
        /// </summary>
        public void RightClick_Email_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sendEmail = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SendEmail;
            #endregion

            // Right-Click 'DsfSendEmailActivity' custom control
            Mouse.Click(sendEmail, MouseButtons.Right, ModifierKeys.None, new Point(129, 11));
        }
        
        /// <summary>
        /// RightClick_ExecuteCommandLine_OnDesignSurface
        /// </summary>
        public void RightClick_ExecuteCommandLine_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom executeCommandLine = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine;
            #endregion

            // Right-Click 'DsfExecuteCommandLineActivity' custom control
            Mouse.Click(executeCommandLine, MouseButtons.Right, ModifierKeys.None, new Point(165, 13));
        }
        
        /// <summary>
        /// RightClick_FindIndex_OnDesignSurface
        /// </summary>
        public void RightClick_FindIndex_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom findIndex = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindIndex;
            #endregion

            // Right-Click 'DsfIndexActivity' custom control
            Mouse.Click(findIndex, MouseButtons.Right, ModifierKeys.None, new Point(113, 8));
        }
        
        /// <summary>
        /// RightClick_FindRecordIndex_OnDesignSurface
        /// </summary>
        public void RightClick_FindRecordIndex_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom findRecordsIndex = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindRecordsIndex;
            #endregion

            // Right-Click 'DsfFindRecordsMultipleCriteriaActivity' custom control
            Mouse.Click(findRecordsIndex, MouseButtons.Right, ModifierKeys.None, new Point(191, 11));
        }
        
        /// <summary>
        /// RightClick_ForEach_OnDesignSurface
        /// </summary>
        public void RightClick_ForEach_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom forEach = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach;
            #endregion

            // Right-Click 'DsfForEachActivity' custom control
            Mouse.Click(forEach, MouseButtons.Right, ModifierKeys.None, new Point(137, 9));
        }
        
        /// <summary>
        /// RightClick_FormatNumber_OnDesignSurface
        /// </summary>
        public void RightClick_FormatNumber_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom formatNumber = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FormatNumber;
            #endregion

            // Right-Click 'DsfNumberFormatActivity' custom control
            Mouse.Click(formatNumber, MouseButtons.Right, ModifierKeys.None, new Point(143, 9));
        }
        
        /// <summary>
        /// RightClick_Length_OnDesignSurface
        /// </summary>
        public void RightClick_Length_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom length = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Length;
            #endregion

            // Right-Click 'DsfRecordsetLengthActivity' custom control
            Mouse.Click(length, MouseButtons.Right, ModifierKeys.None, new Point(97, 10));
        }
        
        /// <summary>
        /// RightClick_Move_OnDesignSurface
        /// </summary>
        public void RightClick_Move_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathMove = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathMove;
            #endregion

            // Right-Click 'DsfPathMove' custom control
            Mouse.Click(pathMove, MouseButtons.Right, ModifierKeys.None, new Point(98, 11));
        }
        
        /// <summary>
        /// RightClick_MySqlConnector_OnDesignSurface
        /// </summary>
        public void RightClick_MySqlConnector_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sqlServerDatabase = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase;
            #endregion

            // Right-Click 'DsfSqlServerDatabaseActivity' custom control
            Mouse.Click(sqlServerDatabase, MouseButtons.Right, ModifierKeys.None, new Point(198, 8));
        }
        
        /// <summary>
        /// RightClick_MySQLConnector_OnDesignSurface1
        /// </summary>
        public void RightClick_MySQLConnector_OnDesignSurface1()
        {
            #region Variable Declarations
            WpfCustom mySqlDatabase = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MySqlDatabase;
            #endregion

            // Right-Click 'DsfMySqlDatabaseActivity' custom control
            Mouse.Click(mySqlDatabase, MouseButtons.Right, ModifierKeys.None, new Point(202, 10));
        }
        
        /// <summary>
        /// RightClick_New_Workflow_Tab
        /// </summary>
        public void RightClick_New_Workflow_Tab()
        {
            #region Variable Declarations
            WpfTabPage workflowTab = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab;
            #endregion

            // Right-Click 'Dev2.Studio.ViewModels.Workflow.WorkflowDesignerVi...' tab
            Mouse.Click(workflowTab, MouseButtons.Right, ModifierKeys.None, new Point(63, 18));
        }
        
        /// <summary>
        /// RightClick_Random_OnDesignSurface
        /// </summary>
        public void RightClick_Random_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom random = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Random;
            #endregion

            // Right-Click 'DsfRandomActivity' custom control
            Mouse.Click(random, MouseButtons.Right, ModifierKeys.None, new Point(107, 13));
        }
        
        /// <summary>
        /// RightClick_ReadFile_OnDesignSurface
        /// </summary>
        public void RightClick_ReadFile_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom fileRead = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileRead;
            #endregion

            // Right-Click 'DsfFileRead' custom control
            Mouse.Click(fileRead, MouseButtons.Right, ModifierKeys.None, new Point(99, 14));
        }
        
        /// <summary>
        /// RightClick_ReadFolder_OnDesignSurface
        /// </summary>
        public void RightClick_ReadFolder_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom folderRead = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FolderRead;
            #endregion

            // Right-Click 'DsfFolderRead' custom control
            Mouse.Click(folderRead, MouseButtons.Right, ModifierKeys.None, new Point(115, 12));
        }
        
        /// <summary>
        /// RightClick_Rename_OnDesignSurface
        /// </summary>
        public void RightClick_Rename_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathRename = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathRename;
            #endregion

            // Right-Click 'DsfPathRename' custom control
            Mouse.Click(pathRename, MouseButtons.Right, ModifierKeys.None, new Point(103, 7));
        }
        
        /// <summary>
        /// RightClick_Replace_OnDesignSurface
        /// </summary>
        public void RightClick_Replace_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom replace = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Replace;
            #endregion

            // Right-Click 'DsfReplaceActivity' custom control
            Mouse.Click(replace, MouseButtons.Right, ModifierKeys.None, new Point(100, 7));
        }
        
        /// <summary>
        /// RightClick_ScriptTool_OnDesignSurface
        /// </summary>
        public void RightClick_ScriptTool_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom scripting = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Scripting;
            #endregion

            // Right-Click 'DsfScriptingActivity' custom control
            Mouse.Click(scripting, MouseButtons.Right, ModifierKeys.None, new Point(110, 11));
        }
        
        /// <summary>
        /// RightClick_Sequence_OnDesignSurface
        /// </summary>
        public void RightClick_Sequence_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sequence = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Sequence;
            #endregion

            // Right-Click 'DsfSequenceActivity' custom control
            Mouse.Click(sequence, MouseButtons.Right, ModifierKeys.None, new Point(119, 8));
        }
        
        /// <summary>
        /// RightClick_SharepointCreateListItem_OnDesignSurface
        /// </summary>
        public void RightClick_SharepointCreateListItem_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointCreate = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCreate;
            #endregion

            // Right-Click 'SharepointCreateListItemActivity' custom control
            Mouse.Click(sharepointCreate, MouseButtons.Right, ModifierKeys.None, new Point(199, 12));
        }
        
        /// <summary>
        /// RightClick_SharepointDelete_OnDesignSurface
        /// </summary>
        public void RightClick_SharepointDelete_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointDelete = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointDelete;
            #endregion

            // Right-Click 'SharepointDeleteListItemActivity' custom control
            Mouse.Click(sharepointDelete, MouseButtons.Right, ModifierKeys.None, new Point(217, 8));
        }
        
        /// <summary>
        /// RightClick_SharepointRead_OnDesignSurface
        /// </summary>
        public void RightClick_SharepointRead_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointRead = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointRead;
            #endregion

            // Right-Click 'SharepointReadListActivity' custom control
            Mouse.Click(sharepointRead, MouseButtons.Right, ModifierKeys.None, new Point(203, 9));
        }
        
        /// <summary>
        /// RightClick_SharepointUpdate_OnDesignSurface
        /// </summary>
        public void RightClick_SharepointUpdate_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointUpdate = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointUpdate;
            #endregion

            // Right-Click 'SharepointUpdateListItemActivity' custom control
            Mouse.Click(sharepointUpdate, MouseButtons.Right, ModifierKeys.None, new Point(210, 5));
        }
        
        /// <summary>
        /// RightClick_SortRecords_OnDesignSurface
        /// </summary>
        public void RightClick_SortRecords_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sortRecords = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SortRecords;
            #endregion

            // Right-Click 'DsfSortRecordsActivity' custom control
            Mouse.Click(sortRecords, MouseButtons.Right, ModifierKeys.None, new Point(118, 8));
        }
        
        /// <summary>
        /// RightClick_SQLConnector_OnDesignSurface
        /// </summary>
        public void RightClick_SQLConnector_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sqlBulkInsert = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlBulkInsert;
            #endregion

            // Right-Click 'DsfSqlBulkInsertActivity' custom control
            Mouse.Click(sqlBulkInsert, MouseButtons.Right, ModifierKeys.None, new Point(143, 6));
        }
        
        /// <summary>
        /// RightClick_Switch_OnDesignSurface
        /// </summary>
        public void RightClick_Switch_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom switch1 = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Switch;
            #endregion

            // Right-Click 'FlowSwitch`1[String]' custom control
            Mouse.Click(switch1, MouseButtons.Right, ModifierKeys.None, new Point(46, 15));
        }
        
        /// <summary>
        /// RightClick_SystemInformation_OnDesignSurface
        /// </summary>
        public void RightClick_SystemInformation_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom gatherSystemInfo = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.GatherSystemInfo;
            #endregion

            // Right-Click 'DsfGatherSystemInformationActivity' custom control
            Mouse.Click(gatherSystemInfo, MouseButtons.Right, ModifierKeys.None, new Point(217, 10));
        }
        
        /// <summary>
        /// RightClick_UniqueRecords_OnDesignSurface
        /// </summary>
        public void RightClick_UniqueRecords_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom unique = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Unique;
            #endregion

            // Right-Click 'DsfUniqueActivity' custom control
            Mouse.Click(unique, MouseButtons.Right, ModifierKeys.None, new Point(133, 11));
        }
        
        /// <summary>
        /// RightClick_Unzip_OnDesignSurface
        /// </summary>
        public void RightClick_Unzip_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom unZip = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.UnZip;
            #endregion

            // Right-Click 'DsfUnZip' custom control
            Mouse.Click(unZip, MouseButtons.Right, ModifierKeys.None, new Point(101, 10));
        }
        
        /// <summary>
        /// RightClick_WebRequest_OnDesignSurface
        /// </summary>
        public void RightClick_WebRequest_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom webGet = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet;
            #endregion

            // Right-Click 'DsfWebGetActivity' custom control
            Mouse.Click(webGet, MouseButtons.Right, ModifierKeys.None, new Point(165, 8));
        }
        
        /// <summary>
        /// RightClick_WriteFile_OnDesignSurface
        /// </summary>
        public void RightClick_WriteFile_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom fileWrite = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileWrite;
            #endregion

            // Right-Click 'DsfFileWrite' custom control
            Mouse.Click(fileWrite, MouseButtons.Right, ModifierKeys.None, new Point(96, 12));
        }
        
        /// <summary>
        /// RightClick_XPath_OnDesignSurface
        /// </summary>
        public void RightClick_XPath_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom xPath = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath;
            #endregion

            // Right-Click 'DsfXPathActivity' custom control
            Mouse.Click(xPath, MouseButtons.Right, ModifierKeys.None, new Point(99, 8));
        }
        
        /// <summary>
        /// RightClick_Zip_OnDesignSurface
        /// </summary>
        public void RightClick_Zip_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom zip = this.MainStudioWindow.SplitPane.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Zip;
            #endregion

            // Right-Click 'DsfZip' custom control
            Mouse.Click(zip, MouseButtons.Right, ModifierKeys.None, new Point(95, 12));
        }
        
        /// <summary>
        /// Select_Copy_FromContextMenu
        /// </summary>
        public void Select_Copy_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem copy = this.MainStudioWindow.GenericContextMenu.Copy;
            #endregion

            // Click 'Copy' menu item
            Mouse.Click(copy, new Point(27, 18));
        }
        
        /// <summary>
        /// Select_CopyAsImage_FromContextMenu
        /// </summary>
        public void Select_CopyAsImage_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem copyasImage = this.MainStudioWindow.GenericContextMenu.CopyasImage;
            #endregion

            // Click 'Copy as Image' menu item
            Mouse.Click(copyasImage, new Point(62, 22));
        }
        
        /// <summary>
        /// Select_Cut_FromContextMenu
        /// </summary>
        public void Select_Cut_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem cut = this.MainStudioWindow.GenericContextMenu.Cut;
            #endregion

            // Click 'Cut' menu item
            Mouse.Click(cut, new Point(53, 16));
        }
        
        /// <summary>
        /// Select_Delete_FromExplorerContextMenu
        /// </summary>
        public void Select_Delete_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem delete = this.MainStudioWindow.ExplorerContextMenu.Delete;
            #endregion

            // Click 'Delete' menu item
            Mouse.Click(delete, new Point(87, 12));
        }
        
        /// <summary>
        /// Select_DeleteRow_FromContextMenu
        /// </summary>
        public void Select_DeleteRow_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem deleteRow = this.MainStudioWindow.GenericContextMenu.DeleteRow;
            #endregion

            // Click 'Delete Row' menu item
            Mouse.Click(deleteRow, new Point(74, 9));
        }
        
        /// <summary>
        /// Select_Deploy_FromExplorerContextMenu
        /// </summary>
        public void Select_Deploy_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem deploy = this.MainStudioWindow.ExplorerContextMenu.Deploy;
            #endregion

            // Click 'Deploy' menu item
            Mouse.Click(deploy, new Point(57, 11));
        }
        
        /// <summary>
        /// Select_InsertRow_FromContextMenu
        /// </summary>
        public void Select_InsertRow_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem insertRow = this.MainStudioWindow.GenericContextMenu.InsertRow;
            #endregion

            // Click 'Insert Row' menu item
            Mouse.Click(insertRow, new Point(66, 19));
        }
        
        /// <summary>
        /// Select_NewDatabaseSource_FromExplorerContextMenu
        /// </summary>
        public void Select_NewDatabaseSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newDatabaseSource = this.MainStudioWindow.ExplorerContextMenu.NewDatabaseSource;
            #endregion

            // Click 'New Database Source' menu item
            Mouse.Click(newDatabaseSource, new Point(72, 14));
        }
        
        /// <summary>
        /// Select_NewDropboxSource_FromExplorerContextMenu
        /// </summary>
        public void Select_NewDropboxSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newDropboxSource = this.MainStudioWindow.ExplorerContextMenu.NewDropboxSource;
            #endregion

            // Click 'New Dropbox Source' menu item
            Mouse.Click(newDropboxSource, new Point(119, 15));
        }
        
        /// <summary>
        /// Select_NewEmailSource_FromExplorerContextMenu
        /// </summary>
        public void Select_NewEmailSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newEmailSource = this.MainStudioWindow.ExplorerContextMenu.NewEmailSource;
            #endregion

            // Click 'New Email Source' menu item
            Mouse.Click(newEmailSource, new Point(101, 13));
        }
        
        /// <summary>
        /// Select_NewFolder_FromExplorerContextMenu
        /// </summary>
        public void Select_NewFolder_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newFolder = this.MainStudioWindow.ExplorerContextMenu.NewFolder;
            #endregion

            // Click 'New Folder' menu item
            Mouse.Click(newFolder, new Point(87, 14));
        }
        
        /// <summary>
        /// Select_NewPluginSource_FromExplorerContextMenu
        /// </summary>
        public void Select_NewPluginSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newPluginSource = this.MainStudioWindow.ExplorerContextMenu.NewPluginSource;
            #endregion

            // Click 'New Plugin Source' menu item
            Mouse.Click(newPluginSource, new Point(78, 11));
        }
        
        /// <summary>
        /// Select_NewServerSource_FromExplorerContextMenu
        /// </summary>
        public void Select_NewServerSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newServerSource = this.MainStudioWindow.ExplorerContextMenu.NewServerSource;
            #endregion

            // Click 'New Server Source' menu item
            Mouse.Click(newServerSource, new Point(44, 13));
        }
        
        /// <summary>
        /// Select_NewSharepointSource_FromExplorerContextMenu
        /// </summary>
        public void Select_NewSharepointSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newSharepointSource = this.MainStudioWindow.ExplorerContextMenu.NewSharepointSource;
            #endregion

            // Click 'New Sharepoint Source' menu item
            Mouse.Click(newSharepointSource, new Point(126, 17));
        }
        
        /// <summary>
        /// Select_NewWebSource_FromExplorerContextMenu
        /// </summary>
        public void Select_NewWebSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newWebServiceSource = this.MainStudioWindow.ExplorerContextMenu.NewWebServiceSource;
            #endregion

            // Click 'New Web Service Source' menu item
            Mouse.Click(newWebServiceSource, new Point(82, 20));
        }
        
        /// <summary>
        /// Select_NewWorkflow_FromExplorerContextMenu
        /// </summary>
        public void Select_NewWorkflow_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newWorkflow = this.MainStudioWindow.ExplorerContextMenu.NewWorkflow;
            #endregion

            // Click 'New Workflow Service' menu item
            Mouse.Click(newWorkflow, new Point(30, 11));
        }
        
        /// <summary>
        /// Select_Paste_FromContextMenu
        /// </summary>
        public void Select_Paste_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem paste = this.MainStudioWindow.GenericContextMenu.Paste;
            #endregion

            // Click 'Paste' menu item
            Mouse.Click(paste, new Point(52, 16));
        }
        
        /// <summary>
        /// Select_Rename_FromExplorerContextMenu
        /// </summary>
        public void Select_Rename_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem rename = this.MainStudioWindow.ExplorerContextMenu.Rename;
            #endregion

            // Click 'Rename' menu item
            Mouse.Click(rename, new Point(73, 15));
        }
        
        /// <summary>
        /// Select_SaveAsImage_FromContextMenu
        /// </summary>
        public void Select_SaveAsImage_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem saveasImage = this.MainStudioWindow.GenericContextMenu.SaveasImage;
            #endregion

            // Click 'Save as Image' menu item
            Mouse.Click(saveasImage, new Point(38, 15));
        }
        
        /// <summary>
        /// Select_SetAsStartNode_FromContextMenu
        /// </summary>
        public void Select_SetAsStartNode_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem setasStartNode = this.MainStudioWindow.GenericContextMenu.SetasStartNode;
            #endregion

            // Click 'Set as Start Node' menu item
            Mouse.Click(setasStartNode, new Point(67, 16));
        }
        
        /// <summary>
        /// Select_ShowLargeView_FromContextMenu
        /// </summary>
        public void Select_ShowLargeView_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem showLargeView = this.MainStudioWindow.GenericContextMenu.ShowLargeView;
            #endregion

            // Click 'Show Large View' menu item
            Mouse.Click(showLargeView, new Point(43, 15));
        }
        
        #region Properties
        public virtual Assert_Assign_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Assign_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Assign_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Assign_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Assign_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Assign_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Assign_QVI_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Assign_QVI_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Assign_QVI_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Assign_QVI_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Assign_QVI_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Assign_QVI_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Base_Conversion_Exists_OnDesignSurfaceExpectedValues Assert_Base_Conversion_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Base_Conversion_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Base_Conversion_Exists_OnDesignSurfaceExpectedValues = new Assert_Base_Conversion_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Base_Conversion_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Calculate_Exists_OnDesignSurfaceExpectedValues Assert_Calculate_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Calculate_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Calculate_Exists_OnDesignSurfaceExpectedValues = new Assert_Calculate_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Calculate_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Case_Conversion_Exists_OnDesignSurfaceExpectedValues Assert_Case_Conversion_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Case_Conversion_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Case_Conversion_Exists_OnDesignSurfaceExpectedValues = new Assert_Case_Conversion_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Case_Conversion_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Close_Tab_Button_ExistsExpectedValues Assert_Close_Tab_Button_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Close_Tab_Button_ExistsExpectedValues == null))
                {
                    this.mAssert_Close_Tab_Button_ExistsExpectedValues = new Assert_Close_Tab_Button_ExistsExpectedValues();
                }
                return this.mAssert_Close_Tab_Button_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_CMD_Line_Exists_OnDesignSurfaceExpectedValues Assert_CMD_Line_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_CMD_Line_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_CMD_Line_Exists_OnDesignSurfaceExpectedValues = new Assert_CMD_Line_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_CMD_Line_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_CMD_Line_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_CMD_Line_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_CMD_Line_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_CMD_Line_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_CMD_Line_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_CMD_Line_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Comment_Exists_OnDesignSurfaceExpectedValues Assert_Comment_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Comment_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Comment_Exists_OnDesignSurfaceExpectedValues = new Assert_Comment_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Comment_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Copy_Exists_OnDesignSurfaceExpectedValues Assert_Copy_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Copy_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Copy_Exists_OnDesignSurfaceExpectedValues = new Assert_Copy_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Copy_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Copy_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Copy_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Copy_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Copy_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Copy_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Copy_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Count_Records_Exists_OnDesignSurfaceExpectedValues Assert_Count_Records_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Count_Records_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Count_Records_Exists_OnDesignSurfaceExpectedValues = new Assert_Count_Records_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Count_Records_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Create_Exists_OnDesignSurfaceExpectedValues Assert_Create_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Create_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Create_Exists_OnDesignSurfaceExpectedValues = new Assert_Create_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Create_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Create_JSON_Exists_OnDesignSurfaceExpectedValues Assert_Create_JSON_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Create_JSON_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Create_JSON_Exists_OnDesignSurfaceExpectedValues = new Assert_Create_JSON_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Create_JSON_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Create_Path_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Create_Path_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Create_Path_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Create_Path_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Create_Path_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Create_Path_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Data_Connector_Exists_OnDesignSurfaceExpectedValues Assert_Data_Connector_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Data_Connector_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Data_Connector_Exists_OnDesignSurfaceExpectedValues = new Assert_Data_Connector_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Data_Connector_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Data_Merge_Exists_OnDesignSurfaceExpectedValues Assert_Data_Merge_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Data_Merge_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Data_Merge_Exists_OnDesignSurfaceExpectedValues = new Assert_Data_Merge_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Data_Merge_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Data_Merge_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Data_Merge_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Data_Merge_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Data_Merge_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Data_Merge_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Data_Merge_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Data_Split_Exists_OnDesignSurfaceExpectedValues Assert_Data_Split_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Data_Split_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Data_Split_Exists_OnDesignSurfaceExpectedValues = new Assert_Data_Split_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Data_Split_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Data_Split_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Data_Split_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Data_Split_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Data_Split_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Data_Split_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Data_Split_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Data_Split_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Data_Split_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Data_Split_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Data_Split_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Data_Split_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Data_Split_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Date_And_Time_Exists_OnDesignSurfaceExpectedValues Assert_Date_And_Time_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Date_And_Time_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Date_And_Time_Exists_OnDesignSurfaceExpectedValues = new Assert_Date_And_Time_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Date_And_Time_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_DateTime_Difference_Conversion_Exists_OnDesignSurfaceExpectedValues Assert_DateTime_Difference_Conversion_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_DateTime_Difference_Conversion_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_DateTime_Difference_Conversion_Exists_OnDesignSurfaceExpectedValues = new Assert_DateTime_Difference_Conversion_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_DateTime_Difference_Conversion_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Decision_Exists_In_The_ToolboxExpectedValues Assert_Decision_Exists_In_The_ToolboxExpectedValues
        {
            get
            {
                if ((this.mAssert_Decision_Exists_In_The_ToolboxExpectedValues == null))
                {
                    this.mAssert_Decision_Exists_In_The_ToolboxExpectedValues = new Assert_Decision_Exists_In_The_ToolboxExpectedValues();
                }
                return this.mAssert_Decision_Exists_In_The_ToolboxExpectedValues;
            }
        }
        
        public virtual Assert_Decision_Exists_OnDesignSurfaceExpectedValues Assert_Decision_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Decision_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Decision_Exists_OnDesignSurfaceExpectedValues = new Assert_Decision_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Decision_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Delete_Exists_OnDesignSurfaceExpectedValues Assert_Delete_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Delete_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Delete_Exists_OnDesignSurfaceExpectedValues = new Assert_Delete_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Delete_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Delete_Record_Exists_OnDesignSurfaceExpectedValues Assert_Delete_Record_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Delete_Record_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Delete_Record_Exists_OnDesignSurfaceExpectedValues = new Assert_Delete_Record_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Delete_Record_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_DotNet_DLL_Connector_Exists_OnDesignSurfaceExpectedValues Assert_DotNet_DLL_Connector_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_DotNet_DLL_Connector_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_DotNet_DLL_Connector_Exists_OnDesignSurfaceExpectedValues = new Assert_DotNet_DLL_Connector_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_DotNet_DLL_Connector_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Dropbox_Download_Exists_OnDesignSurfaceExpectedValues Assert_Dropbox_Download_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Dropbox_Download_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Dropbox_Download_Exists_OnDesignSurfaceExpectedValues = new Assert_Dropbox_Download_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Dropbox_Download_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Dropbox_Upload_Exists_OnDesignSurfaceExpectedValues Assert_Dropbox_Upload_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Dropbox_Upload_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Dropbox_Upload_Exists_OnDesignSurfaceExpectedValues = new Assert_Dropbox_Upload_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Dropbox_Upload_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Email_Exists_OnDesignSurfaceExpectedValues Assert_Email_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Email_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Email_Exists_OnDesignSurfaceExpectedValues = new Assert_Email_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Email_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Email_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Email_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Email_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Email_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Email_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Email_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Find_Index_Exists_OnDesignSurfaceExpectedValues Assert_Find_Index_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Find_Index_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Find_Index_Exists_OnDesignSurfaceExpectedValues = new Assert_Find_Index_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Find_Index_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Find_Record_Index_Exists_OnDesignSurfaceExpectedValues Assert_Find_Record_Index_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Find_Record_Index_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Find_Record_Index_Exists_OnDesignSurfaceExpectedValues = new Assert_Find_Record_Index_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Find_Record_Index_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Find_Record_index_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Find_Record_index_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Find_Record_index_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Find_Record_index_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Find_Record_index_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Find_Record_index_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_For_Each_Exists_OnDesignSurfaceExpectedValues Assert_For_Each_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_For_Each_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_For_Each_Exists_OnDesignSurfaceExpectedValues = new Assert_For_Each_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_For_Each_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Format_Number_Exists_OnDesignSurfaceExpectedValues Assert_Format_Number_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Format_Number_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Format_Number_Exists_OnDesignSurfaceExpectedValues = new Assert_Format_Number_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Format_Number_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Generic_Context_Menu_ExistsExpectedValues Assert_Generic_Context_Menu_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Generic_Context_Menu_ExistsExpectedValues == null))
                {
                    this.mAssert_Generic_Context_Menu_ExistsExpectedValues = new Assert_Generic_Context_Menu_ExistsExpectedValues();
                }
                return this.mAssert_Generic_Context_Menu_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_GetWeb_RequestTool_small_View_Exists_OnDesignSurfaceExpectedValues Assert_GetWeb_RequestTool_small_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_GetWeb_RequestTool_small_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_GetWeb_RequestTool_small_View_Exists_OnDesignSurfaceExpectedValues = new Assert_GetWeb_RequestTool_small_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_GetWeb_RequestTool_small_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Json_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Json_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Json_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Json_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Json_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Json_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Json_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Json_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Json_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Json_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Json_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Json_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Length_Exists_OnDesignSurfaceExpectedValues Assert_Length_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Length_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Length_Exists_OnDesignSurfaceExpectedValues = new Assert_Length_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Length_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_MainStudioWindow_ExistsExpectedValues Assert_MainStudioWindow_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_MainStudioWindow_ExistsExpectedValues == null))
                {
                    this.mAssert_MainStudioWindow_ExistsExpectedValues = new Assert_MainStudioWindow_ExistsExpectedValues();
                }
                return this.mAssert_MainStudioWindow_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Move_Exists_OnDesignSurfaceExpectedValues Assert_Move_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Move_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Move_Exists_OnDesignSurfaceExpectedValues = new Assert_Move_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Move_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Move_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Move_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Move_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Move_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Move_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Move_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_MultiAssign_Exists_OnDesignSurfaceExpectedValues Assert_MultiAssign_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_MultiAssign_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_MultiAssign_Exists_OnDesignSurfaceExpectedValues = new Assert_MultiAssign_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_MultiAssign_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Mysql_Database_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Mysql_Database_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Mysql_Database_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Mysql_Database_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Mysql_Database_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Mysql_Database_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_New_Workflow_Context_Menu_ExistsExpectedValues Assert_New_Workflow_Context_Menu_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_New_Workflow_Context_Menu_ExistsExpectedValues == null))
                {
                    this.mAssert_New_Workflow_Context_Menu_ExistsExpectedValues = new Assert_New_Workflow_Context_Menu_ExistsExpectedValues();
                }
                return this.mAssert_New_Workflow_Context_Menu_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Plugin_Connector_Exists_OnDesignSurfaceExpectedValues Assert_Plugin_Connector_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Plugin_Connector_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Plugin_Connector_Exists_OnDesignSurfaceExpectedValues = new Assert_Plugin_Connector_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Plugin_Connector_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurfaceExpectedValues Assert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurfaceExpectedValues = new Assert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Random_Exists_OnDesignSurfaceExpectedValues Assert_Random_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Random_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Random_Exists_OnDesignSurfaceExpectedValues = new Assert_Random_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Random_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Read_File_Exists_OnDesignSurfaceExpectedValues Assert_Read_File_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Read_File_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Read_File_Exists_OnDesignSurfaceExpectedValues = new Assert_Read_File_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Read_File_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Read_File_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Read_File_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Read_File_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Read_File_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Read_File_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Read_File_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Read_Folder_Exists_OnDesignSurfaceExpectedValues Assert_Read_Folder_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Read_Folder_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Read_Folder_Exists_OnDesignSurfaceExpectedValues = new Assert_Read_Folder_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Read_Folder_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Read_Folder_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Read_Folder_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Read_Folder_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Read_Folder_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Read_Folder_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Read_Folder_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Rename_Exists_OnDesignSurfaceExpectedValues Assert_Rename_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Rename_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Rename_Exists_OnDesignSurfaceExpectedValues = new Assert_Rename_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Rename_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Rename_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Rename_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Rename_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Rename_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Rename_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Rename_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Replace_Exists_OnDesignSurfaceExpectedValues Assert_Replace_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Replace_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Replace_Exists_OnDesignSurfaceExpectedValues = new Assert_Replace_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Replace_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Script_Exists_OnDesignSurfaceExpectedValues Assert_Script_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Script_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Script_Exists_OnDesignSurfaceExpectedValues = new Assert_Script_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Script_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Sequence_Exists_OnDesignSurfaceExpectedValues Assert_Sequence_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sequence_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sequence_Exists_OnDesignSurfaceExpectedValues = new Assert_Sequence_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sequence_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Sharepoint_Create_Exists_OnDesignSurfaceExpectedValues Assert_Sharepoint_Create_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sharepoint_Create_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sharepoint_Create_Exists_OnDesignSurfaceExpectedValues = new Assert_Sharepoint_Create_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sharepoint_Create_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Sharepoint_Create_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Sharepoint_Create_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sharepoint_Create_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sharepoint_Create_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Sharepoint_Create_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sharepoint_Create_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Sharepoint_Delete_Exists_OnDesignSurfaceExpectedValues Assert_Sharepoint_Delete_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sharepoint_Delete_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sharepoint_Delete_Exists_OnDesignSurfaceExpectedValues = new Assert_Sharepoint_Delete_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sharepoint_Delete_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Sharepoint_Delete_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Sharepoint_Delete_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sharepoint_Delete_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sharepoint_Delete_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Sharepoint_Delete_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sharepoint_Delete_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Sharepoint_Read_Exists_OnDesignSurfaceExpectedValues Assert_Sharepoint_Read_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sharepoint_Read_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sharepoint_Read_Exists_OnDesignSurfaceExpectedValues = new Assert_Sharepoint_Read_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sharepoint_Read_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Sharepoint_Read_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Sharepoint_Read_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sharepoint_Read_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sharepoint_Read_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Sharepoint_Read_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sharepoint_Read_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Sharepoint_Update_Exists_OnDesignSurfaceExpectedValues Assert_Sharepoint_Update_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sharepoint_Update_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sharepoint_Update_Exists_OnDesignSurfaceExpectedValues = new Assert_Sharepoint_Update_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sharepoint_Update_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Sharepoint_Update_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Sharepoint_Update_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sharepoint_Update_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sharepoint_Update_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Sharepoint_Update_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sharepoint_Update_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Sort_Records_Exists_OnDesignSurfaceExpectedValues Assert_Sort_Records_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sort_Records_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sort_Records_Exists_OnDesignSurfaceExpectedValues = new Assert_Sort_Records_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sort_Records_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Sql_Bulk_insert_Exists_OnDesignSurfaceExpectedValues Assert_Sql_Bulk_insert_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sql_Bulk_insert_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sql_Bulk_insert_Exists_OnDesignSurfaceExpectedValues = new Assert_Sql_Bulk_insert_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sql_Bulk_insert_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurfaceExpectedValues Assert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurfaceExpectedValues = new Assert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_SQL_Server_Database_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_SQL_Server_Database_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_SQL_Server_Database_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_SQL_Server_Database_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_SQL_Server_Database_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_SQL_Server_Database_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_StartNode_ExistsExpectedValues Assert_StartNode_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_StartNode_ExistsExpectedValues == null))
                {
                    this.mAssert_StartNode_ExistsExpectedValues = new Assert_StartNode_ExistsExpectedValues();
                }
                return this.mAssert_StartNode_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Switch_Exists_OnDesignSurfaceExpectedValues Assert_Switch_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Switch_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Switch_Exists_OnDesignSurfaceExpectedValues = new Assert_Switch_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Switch_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_System_Info_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_System_Info_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_System_Info_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_System_Info_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_System_Info_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_System_Info_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_System_information_Exists_OnDesignSurfaceExpectedValues Assert_System_information_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_System_information_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_System_information_Exists_OnDesignSurfaceExpectedValues = new Assert_System_information_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_System_information_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Unique_Records_Exists_OnDesignSurfaceExpectedValues Assert_Unique_Records_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Unique_Records_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Unique_Records_Exists_OnDesignSurfaceExpectedValues = new Assert_Unique_Records_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Unique_Records_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Unzip_Exists_OnDesignSurfaceExpectedValues Assert_Unzip_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Unzip_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Unzip_Exists_OnDesignSurfaceExpectedValues = new Assert_Unzip_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Unzip_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Unzip_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Unzip_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Unzip_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Unzip_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Unzip_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Unzip_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Web_Connectors_Exists_OnDesignSurfaceExpectedValues Assert_Web_Connectors_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Web_Connectors_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Web_Connectors_Exists_OnDesignSurfaceExpectedValues = new Assert_Web_Connectors_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Web_Connectors_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Workflow_Exists_OnDesignSurfaceExpectedValues Assert_Workflow_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Workflow_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Workflow_Exists_OnDesignSurfaceExpectedValues = new Assert_Workflow_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Workflow_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Write_File_Exists_OnDesignSurfaceExpectedValues Assert_Write_File_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Write_File_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Write_File_Exists_OnDesignSurfaceExpectedValues = new Assert_Write_File_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Write_File_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Write_File_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Write_File_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Write_File_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Write_File_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Write_File_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Write_File_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_XPath_Exists_OnDesignSurfaceExpectedValues Assert_XPath_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_XPath_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_XPath_Exists_OnDesignSurfaceExpectedValues = new Assert_XPath_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_XPath_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Xpath_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Xpath_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Xpath_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Xpath_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Xpath_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Xpath_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Xpath_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Xpath_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Xpath_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Xpath_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Xpath_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Xpath_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Zip_Exists_OnDesignSurfaceExpectedValues Assert_Zip_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Zip_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Zip_Exists_OnDesignSurfaceExpectedValues = new Assert_Zip_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Zip_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Zip_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Zip_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Zip_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Zip_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Zip_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Zip_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Open_Assign_Tool_Qvi_Large_ViewParams Open_Assign_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Assign_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Assign_Tool_Qvi_Large_ViewParams = new Open_Assign_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Assign_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Base_Conversion_Tool_Qvi_Large_ViewParams Open_Base_Conversion_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Base_Conversion_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Base_Conversion_Tool_Qvi_Large_ViewParams = new Open_Base_Conversion_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Base_Conversion_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Case_Conversion_Tool_Qvi_Large_ViewParams Open_Case_Conversion_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Case_Conversion_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Case_Conversion_Tool_Qvi_Large_ViewParams = new Open_Case_Conversion_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Case_Conversion_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Data_Merge_Tool_Qvi_Large_ViewParams Open_Data_Merge_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Data_Merge_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Data_Merge_Tool_Qvi_Large_ViewParams = new Open_Data_Merge_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Data_Merge_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Data_Split_Tool_Qvi_Large_ViewParams Open_Data_Split_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Data_Split_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Data_Split_Tool_Qvi_Large_ViewParams = new Open_Data_Split_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Data_Split_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Json_Tool_Qvi_Large_ViewParams Open_Json_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Json_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Json_Tool_Qvi_Large_ViewParams = new Open_Json_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Json_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams = new Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_System_Information_Tool_Qvi_Large_ViewParams Open_System_Information_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_System_Information_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_System_Information_Tool_Qvi_Large_ViewParams = new Open_System_Information_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_System_Information_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Xpath_Tool_Qvi_Large_ViewParams Open_Xpath_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Xpath_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Xpath_Tool_Qvi_Large_ViewParams = new Open_Xpath_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Xpath_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual PressF11_EnterFullScreenParams PressF11_EnterFullScreenParams
        {
            get
            {
                if ((this.mPressF11_EnterFullScreenParams == null))
                {
                    this.mPressF11_EnterFullScreenParams = new PressF11_EnterFullScreenParams();
                }
                return this.mPressF11_EnterFullScreenParams;
            }
        }
        
        public MainStudioWindow MainStudioWindow
        {
            get
            {
                if ((this.mMainStudioWindow == null))
                {
                    this.mMainStudioWindow = new MainStudioWindow();
                }
                return this.mMainStudioWindow;
            }
        }
        
        public MessageBoxWindow MessageBoxWindow
        {
            get
            {
                if ((this.mMessageBoxWindow == null))
                {
                    this.mMessageBoxWindow = new MessageBoxWindow();
                }
                return this.mMessageBoxWindow;
            }
        }
        #endregion
        
        #region Fields
        private Assert_Assign_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Assign_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Assign_QVI_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Assign_QVI_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Base_Conversion_Exists_OnDesignSurfaceExpectedValues mAssert_Base_Conversion_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Calculate_Exists_OnDesignSurfaceExpectedValues mAssert_Calculate_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Case_Conversion_Exists_OnDesignSurfaceExpectedValues mAssert_Case_Conversion_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Close_Tab_Button_ExistsExpectedValues mAssert_Close_Tab_Button_ExistsExpectedValues;
        
        private Assert_CMD_Line_Exists_OnDesignSurfaceExpectedValues mAssert_CMD_Line_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_CMD_Line_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_CMD_Line_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Comment_Exists_OnDesignSurfaceExpectedValues mAssert_Comment_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Copy_Exists_OnDesignSurfaceExpectedValues mAssert_Copy_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Copy_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Copy_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Count_Records_Exists_OnDesignSurfaceExpectedValues mAssert_Count_Records_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Create_Exists_OnDesignSurfaceExpectedValues mAssert_Create_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Create_JSON_Exists_OnDesignSurfaceExpectedValues mAssert_Create_JSON_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Create_Path_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Create_Path_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Data_Connector_Exists_OnDesignSurfaceExpectedValues mAssert_Data_Connector_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Data_Merge_Exists_OnDesignSurfaceExpectedValues mAssert_Data_Merge_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Data_Merge_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Data_Merge_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Data_Split_Exists_OnDesignSurfaceExpectedValues mAssert_Data_Split_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Data_Split_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Data_Split_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Data_Split_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Data_Split_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Date_And_Time_Exists_OnDesignSurfaceExpectedValues mAssert_Date_And_Time_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_DateTime_Difference_Conversion_Exists_OnDesignSurfaceExpectedValues mAssert_DateTime_Difference_Conversion_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Decision_Exists_In_The_ToolboxExpectedValues mAssert_Decision_Exists_In_The_ToolboxExpectedValues;
        
        private Assert_Decision_Exists_OnDesignSurfaceExpectedValues mAssert_Decision_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Delete_Exists_OnDesignSurfaceExpectedValues mAssert_Delete_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Delete_Record_Exists_OnDesignSurfaceExpectedValues mAssert_Delete_Record_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_DotNet_DLL_Connector_Exists_OnDesignSurfaceExpectedValues mAssert_DotNet_DLL_Connector_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Dropbox_Download_Exists_OnDesignSurfaceExpectedValues mAssert_Dropbox_Download_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Dropbox_Upload_Exists_OnDesignSurfaceExpectedValues mAssert_Dropbox_Upload_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Email_Exists_OnDesignSurfaceExpectedValues mAssert_Email_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Email_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Email_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Find_Index_Exists_OnDesignSurfaceExpectedValues mAssert_Find_Index_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Find_Record_Index_Exists_OnDesignSurfaceExpectedValues mAssert_Find_Record_Index_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Find_Record_index_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Find_Record_index_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_For_Each_Exists_OnDesignSurfaceExpectedValues mAssert_For_Each_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Format_Number_Exists_OnDesignSurfaceExpectedValues mAssert_Format_Number_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Generic_Context_Menu_ExistsExpectedValues mAssert_Generic_Context_Menu_ExistsExpectedValues;
        
        private Assert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_GetWeb_RequestTool_small_View_Exists_OnDesignSurfaceExpectedValues mAssert_GetWeb_RequestTool_small_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Json_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Json_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Json_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Json_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Length_Exists_OnDesignSurfaceExpectedValues mAssert_Length_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_MainStudioWindow_ExistsExpectedValues mAssert_MainStudioWindow_ExistsExpectedValues;
        
        private Assert_Move_Exists_OnDesignSurfaceExpectedValues mAssert_Move_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Move_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Move_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_MultiAssign_Exists_OnDesignSurfaceExpectedValues mAssert_MultiAssign_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Mysql_Database_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Mysql_Database_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_New_Workflow_Context_Menu_ExistsExpectedValues mAssert_New_Workflow_Context_Menu_ExistsExpectedValues;
        
        private Assert_Plugin_Connector_Exists_OnDesignSurfaceExpectedValues mAssert_Plugin_Connector_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurfaceExpectedValues mAssert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Random_Exists_OnDesignSurfaceExpectedValues mAssert_Random_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Read_File_Exists_OnDesignSurfaceExpectedValues mAssert_Read_File_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Read_File_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Read_File_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Read_Folder_Exists_OnDesignSurfaceExpectedValues mAssert_Read_Folder_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Read_Folder_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Read_Folder_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Rename_Exists_OnDesignSurfaceExpectedValues mAssert_Rename_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Rename_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Rename_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Replace_Exists_OnDesignSurfaceExpectedValues mAssert_Replace_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Script_Exists_OnDesignSurfaceExpectedValues mAssert_Script_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Sequence_Exists_OnDesignSurfaceExpectedValues mAssert_Sequence_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Sharepoint_Create_Exists_OnDesignSurfaceExpectedValues mAssert_Sharepoint_Create_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Sharepoint_Create_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Sharepoint_Create_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Sharepoint_Delete_Exists_OnDesignSurfaceExpectedValues mAssert_Sharepoint_Delete_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Sharepoint_Delete_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Sharepoint_Delete_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Sharepoint_Read_Exists_OnDesignSurfaceExpectedValues mAssert_Sharepoint_Read_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Sharepoint_Read_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Sharepoint_Read_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Sharepoint_Update_Exists_OnDesignSurfaceExpectedValues mAssert_Sharepoint_Update_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Sharepoint_Update_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Sharepoint_Update_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Sort_Records_Exists_OnDesignSurfaceExpectedValues mAssert_Sort_Records_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Sql_Bulk_insert_Exists_OnDesignSurfaceExpectedValues mAssert_Sql_Bulk_insert_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurfaceExpectedValues mAssert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_SQL_Server_Database_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_SQL_Server_Database_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_StartNode_ExistsExpectedValues mAssert_StartNode_ExistsExpectedValues;
        
        private Assert_Switch_Exists_OnDesignSurfaceExpectedValues mAssert_Switch_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_System_Info_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_System_Info_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_System_information_Exists_OnDesignSurfaceExpectedValues mAssert_System_information_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Unique_Records_Exists_OnDesignSurfaceExpectedValues mAssert_Unique_Records_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Unzip_Exists_OnDesignSurfaceExpectedValues mAssert_Unzip_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Unzip_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Unzip_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Web_Connectors_Exists_OnDesignSurfaceExpectedValues mAssert_Web_Connectors_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Workflow_Exists_OnDesignSurfaceExpectedValues mAssert_Workflow_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Write_File_Exists_OnDesignSurfaceExpectedValues mAssert_Write_File_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Write_File_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Write_File_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_XPath_Exists_OnDesignSurfaceExpectedValues mAssert_XPath_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Xpath_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Xpath_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Xpath_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Xpath_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Zip_Exists_OnDesignSurfaceExpectedValues mAssert_Zip_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Zip_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Zip_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Open_Assign_Tool_Qvi_Large_ViewParams mOpen_Assign_Tool_Qvi_Large_ViewParams;
        
        private Open_Base_Conversion_Tool_Qvi_Large_ViewParams mOpen_Base_Conversion_Tool_Qvi_Large_ViewParams;
        
        private Open_Case_Conversion_Tool_Qvi_Large_ViewParams mOpen_Case_Conversion_Tool_Qvi_Large_ViewParams;
        
        private Open_Data_Merge_Tool_Qvi_Large_ViewParams mOpen_Data_Merge_Tool_Qvi_Large_ViewParams;
        
        private Open_Data_Split_Tool_Qvi_Large_ViewParams mOpen_Data_Split_Tool_Qvi_Large_ViewParams;
        
        private Open_Json_Tool_Qvi_Large_ViewParams mOpen_Json_Tool_Qvi_Large_ViewParams;
        
        private Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams mOpen_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams;
        
        private Open_System_Information_Tool_Qvi_Large_ViewParams mOpen_System_Information_Tool_Qvi_Large_ViewParams;
        
        private Open_Xpath_Tool_Qvi_Large_ViewParams mOpen_Xpath_Tool_Qvi_Large_ViewParams;
        
        private PressF11_EnterFullScreenParams mPressF11_EnterFullScreenParams;
        
        private MainStudioWindow mMainStudioWindow;
        
        private MessageBoxWindow mMessageBoxWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Assign_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Assign_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfMultiAssignActivity' custom control equals 'True'
        /// </summary>
        public bool MultiAssignExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Assign_QVI_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Assign_QVI_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'QuickVariableInputContent' custom control equals 'True'
        /// </summary>
        public bool QuickVariableInputLargeViewExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Base_Conversion_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Base_Conversion_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfBaseConvertActivity' custom control equals 'True'
        /// </summary>
        public bool BaseConvertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfBaseConvertActivity' custom control equals 'True'
        /// </summary>
        public bool BaseConvertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Calculate_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Calculate_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCalculateActivity' custom control equals 'True'
        /// </summary>
        public bool CalculateExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Case_Conversion_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Case_Conversion_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCaseConvertActivity' custom control equals 'True'
        /// </summary>
        public bool CaseConvertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCaseConvertActivity' custom control equals 'True'
        /// </summary>
        public bool CaseConvertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Close_Tab_Button_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Close_Tab_Button_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'closeBtn' custom control equals 'True'
        /// </summary>
        public bool CloseButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_CMD_Line_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_CMD_Line_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfExecuteCommandLineActivity' custom control equals 'True'
        /// </summary>
        public bool ExecuteCommandLineExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_CMD_Line_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_CMD_Line_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfExecuteCommandLineActivity' custom control equals 'True'
        /// </summary>
        public bool ExecuteCommandLineExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Comment_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Comment_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCommentActivity' custom control equals 'True'
        /// </summary>
        public bool CommentExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Copy_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Copy_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathCopy' custom control equals 'True'
        /// </summary>
        public bool PathCopyExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Copy_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Copy_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathCopy' custom control equals 'True'
        /// </summary>
        public bool PathCopyExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Count_Records_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Count_Records_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCountRecordsetActivity' custom control equals 'True'
        /// </summary>
        public bool CountRecordsetExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Create_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Create_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathCreate' custom control equals 'True'
        /// </summary>
        public bool PathCreateExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Create_JSON_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Create_JSON_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
        /// </summary>
        public bool CreateJsonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Create_Path_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Create_Path_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathCreate' custom control equals 'True'
        /// </summary>
        public bool PathCreateExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Data_Connector_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Data_Connector_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDatabaseActivity' custom control equals 'True'
        /// </summary>
        public bool DatabaseConnectorExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Data_Merge_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Data_Merge_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
        /// </summary>
        public bool DataMergeExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Data_Merge_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Data_Merge_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
        /// </summary>
        public bool DataMergeExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
        /// </summary>
        public bool DataMergeExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Data_Split_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Data_Split_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
        /// </summary>
        public bool DataSplitExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Data_Split_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Data_Split_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
        /// </summary>
        public bool DataSplitExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Data_Split_Qvi_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Data_Split_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
        /// </summary>
        public bool DataSplitExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Date_And_Time_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Date_And_Time_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDateTimeActivity' custom control equals 'True'
        /// </summary>
        public bool DateTimeExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DateTime_Difference_Conversion_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_DateTime_Difference_Conversion_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDateTimeDifferenceActivity' custom control equals 'True'
        /// </summary>
        public bool DateTimeDifferenceExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Decision_Exists_In_The_Toolbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Decision_Exists_In_The_ToolboxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Decision' image equals 'True'
        /// </summary>
        public bool DecisionImageExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Decision_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Decision_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'FlowDecision' custom control equals 'True'
        /// </summary>
        public bool DecisionExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Delete_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Delete_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathDelete' custom control equals 'True'
        /// </summary>
        public bool PathDeleteExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Delete_Record_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Delete_Record_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDeleteRecordActivity' custom control equals 'True'
        /// </summary>
        public bool DeleteRecordExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DotNet_DLL_Connector_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_DotNet_DLL_Connector_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDotNetDllActivity' custom control equals 'True'
        /// </summary>
        public bool DotNetDllExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Dropbox_Download_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Dropbox_Download_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDropBoxFileActivity' custom control equals 'True'
        /// </summary>
        public bool DropBox_DOWNLOADExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Dropbox_Upload_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Dropbox_Upload_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDropBoxFileActivity' custom control equals 'True'
        /// </summary>
        public bool DropBox_UPLOADExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Email_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Email_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSendEmailActivity' custom control equals 'True'
        /// </summary>
        public bool SendEmailExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Email_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Email_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSendEmailActivity' custom control equals 'True'
        /// </summary>
        public bool SendEmailExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Find_Index_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Find_Index_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfIndexActivity' custom control equals 'True'
        /// </summary>
        public bool FindIndexExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Find_Record_Index_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Find_Record_Index_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFindRecordsMultipleCriteriaActivity' custom control equals 'True'
        /// </summary>
        public bool FindRecordsIndexExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Find_Record_index_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Find_Record_index_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFindRecordsMultipleCriteriaActivity' custom control equals 'True'
        /// </summary>
        public bool FindRecordsIndexExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_For_Each_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_For_Each_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfForEachActivity' custom control equals 'True'
        /// </summary>
        public bool ForEachExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Format_Number_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Format_Number_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfNumberFormatActivity' custom control equals 'True'
        /// </summary>
        public bool FormatNumberExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Generic_Context_Menu_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Generic_Context_Menu_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of popup menu equals 'True'
        /// </summary>
        public bool GenericContextMenuExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfWebGetActivity' custom control equals 'True'
        /// </summary>
        public bool WebGetExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_GetWeb_RequestTool_small_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_GetWeb_RequestTool_small_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfWebGetActivity' custom control equals 'True'
        /// </summary>
        public bool WebGetExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Json_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Json_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
        /// </summary>
        public bool CreateJsonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Json_Qvi_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Json_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
        /// </summary>
        public bool CreateJsonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Length_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Length_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfRecordsetLengthActivity' custom control equals 'True'
        /// </summary>
        public bool LengthExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_MainStudioWindow_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_MainStudioWindow_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Warewolf' window equals 'True'
        /// </summary>
        public bool MainStudioWindowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Move_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Move_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathMove' custom control equals 'True'
        /// </summary>
        public bool PathMoveExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Move_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Move_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathMove' custom control equals 'True'
        /// </summary>
        public bool PathMoveExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_MultiAssign_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_MultiAssign_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfMultiAssignActivity' custom control equals 'True'
        /// </summary>
        public bool MultiAssignExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Mysql_Database_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Mysql_Database_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfMySqlDatabaseActivity' custom control equals 'True'
        /// </summary>
        public bool MySqlDatabaseExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_New_Workflow_Context_Menu_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_New_Workflow_Context_Menu_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of popup menu equals 'True'
        /// </summary>
        public bool GenericContextMenuExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Plugin_Connector_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Plugin_Connector_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPluginActivity' custom control equals 'True'
        /// </summary>
        public bool PluginConnectorExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfWebPostActivity' custom control equals 'True'
        /// </summary>
        public bool WebPostExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfWebPostActivity' custom control equals 'True'
        /// </summary>
        public bool WebPostExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Random_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Random_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfRandomActivity' custom control equals 'True'
        /// </summary>
        public bool RandomExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Read_File_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Read_File_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFileRead' custom control equals 'True'
        /// </summary>
        public bool FileReadExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Read_File_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Read_File_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFileRead' custom control equals 'True'
        /// </summary>
        public bool FileReadExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Read_Folder_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Read_Folder_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFolderRead' custom control equals 'True'
        /// </summary>
        public bool FolderReadExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Read_Folder_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Read_Folder_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFolderRead' custom control equals 'True'
        /// </summary>
        public bool FolderReadExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Rename_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Rename_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathRename' custom control equals 'True'
        /// </summary>
        public bool PathRenameExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Rename_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Rename_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathRename' custom control equals 'True'
        /// </summary>
        public bool PathRenameExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Replace_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Replace_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfReplaceActivity' custom control equals 'True'
        /// </summary>
        public bool ReplaceExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Script_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Script_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfScriptingActivity' custom control equals 'True'
        /// </summary>
        public bool ScriptingExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sequence_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Sequence_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSequenceActivity' custom control equals 'True'
        /// </summary>
        public bool SequenceExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sharepoint_Create_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Sharepoint_Create_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SharepointCreateListItemActivity' custom control equals 'True'
        /// </summary>
        public bool SharepointCreateExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sharepoint_Create_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Sharepoint_Create_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SharepointCreateListItemActivity' custom control equals 'True'
        /// </summary>
        public bool SharepointCreateExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sharepoint_Delete_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Sharepoint_Delete_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SharepointDeleteListItemActivity' custom control equals 'True'
        /// </summary>
        public bool SharepointDeleteExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sharepoint_Delete_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Sharepoint_Delete_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SharepointDeleteListItemActivity' custom control equals 'True'
        /// </summary>
        public bool SharepointDeleteExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sharepoint_Read_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Sharepoint_Read_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SharepointReadListActivity' custom control equals 'True'
        /// </summary>
        public bool SharepointReadExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sharepoint_Read_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Sharepoint_Read_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SharepointReadListActivity' custom control equals 'True'
        /// </summary>
        public bool SharepointReadExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sharepoint_Update_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Sharepoint_Update_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SharepointUpdateListItemActivity' custom control equals 'True'
        /// </summary>
        public bool SharepointUpdateExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sharepoint_Update_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Sharepoint_Update_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SharepointUpdateListItemActivity' custom control equals 'True'
        /// </summary>
        public bool SharepointUpdateExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sort_Records_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Sort_Records_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSortRecordsActivity' custom control equals 'True'
        /// </summary>
        public bool SortRecordsExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sql_Bulk_insert_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Sql_Bulk_insert_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
        /// </summary>
        public bool SqlBulkInsertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
        /// </summary>
        public bool SqlBulkInsertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
        /// </summary>
        public bool SqlBulkInsertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SQL_Server_Database_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_SQL_Server_Database_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSqlServerDatabaseActivity' custom control equals 'True'
        /// </summary>
        public bool SqlServerDatabaseExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_StartNode_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_StartNode_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Wait for 1 seconds for user delay between actions; Verify that the 'Exists' property of 'StartNode' custom control equals 'True'
        /// </summary>
        public bool StartNodeExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Switch_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Switch_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'FlowSwitch`1[String]' custom control equals 'True'
        /// </summary>
        public bool SwitchExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_System_Info_Qvi_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_System_Info_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfGatherSystemInformationActivity' custom control equals 'True'
        /// </summary>
        public bool GatherSystemInfoExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_System_information_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_System_information_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfGatherSystemInformationActivity' custom control equals 'True'
        /// </summary>
        public bool GatherSystemInfoExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Unique_Records_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Unique_Records_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfUniqueActivity' custom control equals 'True'
        /// </summary>
        public bool UniqueExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Unzip_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Unzip_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfUnZip' custom control equals 'True'
        /// </summary>
        public bool UnZipExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Unzip_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Unzip_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfUnZip' custom control equals 'True'
        /// </summary>
        public bool UnZipExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Web_Connectors_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Web_Connectors_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfWebserviceActivity' custom control equals 'True'
        /// </summary>
        public bool WebConnectorExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Workflow_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Workflow_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfActivity' custom control equals 'True'
        /// </summary>
        public bool SubWorkflowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Write_File_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Write_File_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFileWrite' custom control equals 'True'
        /// </summary>
        public bool FileWriteExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Write_File_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Write_File_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFileWrite' custom control equals 'True'
        /// </summary>
        public bool FileWriteExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_XPath_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_XPath_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
        /// </summary>
        public bool XPathExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Xpath_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Xpath_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
        /// </summary>
        public bool XPathExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Xpath_Qvi_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Xpath_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
        /// </summary>
        public bool XPathExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Zip_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Zip_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfZip' custom control equals 'True'
        /// </summary>
        public bool ZipExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Zip_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Assert_Zip_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfZip' custom control equals 'True'
        /// </summary>
        public bool ZipExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Assign_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Open_Assign_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Base_Conversion_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Open_Base_Conversion_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Case_Conversion_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Open_Case_Conversion_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Data_Merge_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Open_Data_Merge_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Data_Split_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Open_Data_Split_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Json_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Open_Json_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_SQL_Bulk_Insert_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_System_Information_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Open_System_Information_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Xpath_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Open_Xpath_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PressF11_EnterFullScreen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class PressF11_EnterFullScreenParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{F11}' in 'Warewolf' window
        /// </summary>
        public string MainStudioWindowSendKeys = "{F11}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class MainStudioWindow : WpfWindow
    {
        
        public MainStudioWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.Name, "Warewolf", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabContextMenu TabContextMenu
        {
            get
            {
                if ((this.mTabContextMenu == null))
                {
                    this.mTabContextMenu = new TabContextMenu(this);
                }
                return this.mTabContextMenu;
            }
        }
        
        public ExplorerContextMenu ExplorerContextMenu
        {
            get
            {
                if ((this.mExplorerContextMenu == null))
                {
                    this.mExplorerContextMenu = new ExplorerContextMenu(this);
                }
                return this.mExplorerContextMenu;
            }
        }
        
        public GenericContextMenu GenericContextMenu
        {
            get
            {
                if ((this.mGenericContextMenu == null))
                {
                    this.mGenericContextMenu = new GenericContextMenu(this);
                }
                return this.mGenericContextMenu;
            }
        }
        
        public SplitPane SplitPane
        {
            get
            {
                if ((this.mSplitPane == null))
                {
                    this.mSplitPane = new SplitPane(this);
                }
                return this.mSplitPane;
            }
        }
        
        public ConnectControl ConnectControl
        {
            get
            {
                if ((this.mConnectControl == null))
                {
                    this.mConnectControl = new ConnectControl(this);
                }
                return this.mConnectControl;
            }
        }
        
        public Explorer Explorer
        {
            get
            {
                if ((this.mExplorer == null))
                {
                    this.mExplorer = new Explorer(this);
                }
                return this.mExplorer;
            }
        }
        
        public ToolBox ToolBox
        {
            get
            {
                if ((this.mToolBox == null))
                {
                    this.mToolBox = new ToolBox(this);
                }
                return this.mToolBox;
            }
        }
        #endregion
        
        #region Fields
        private TabContextMenu mTabContextMenu;
        
        private ExplorerContextMenu mExplorerContextMenu;
        
        private GenericContextMenu mGenericContextMenu;
        
        private SplitPane mSplitPane;
        
        private ConnectControl mConnectControl;
        
        private Explorer mExplorer;
        
        private ToolBox mToolBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class TabContextMenu : WpfMenu
    {
        
        public TabContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem Close
        {
            get
            {
                if ((this.mClose == null))
                {
                    this.mClose = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mClose.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Close";
                    this.mClose.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mClose;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mClose;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ExplorerContextMenu : WpfMenu
    {
        
        public ExplorerContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.AutomationId] = "ExplorerMenu";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem ShowServerVersion
        {
            get
            {
                if ((this.mShowServerVersion == null))
                {
                    this.mShowServerVersion = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mShowServerVersion.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ServerVersion";
                    this.mShowServerVersion.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mShowServerVersion;
            }
        }
        
        public WpfMenuItem NewWorkflow
        {
            get
            {
                if ((this.mNewWorkflow == null))
                {
                    this.mNewWorkflow = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewWorkflow.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewService";
                    this.mNewWorkflow.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNewWorkflow;
            }
        }
        
        public WpfMenuItem NewServerSource
        {
            get
            {
                if ((this.mNewServerSource == null))
                {
                    this.mNewServerSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewServerSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewServerSource";
                    this.mNewServerSource.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNewServerSource;
            }
        }
        
        public WpfMenuItem NewDatabaseSource
        {
            get
            {
                if ((this.mNewDatabaseSource == null))
                {
                    this.mNewDatabaseSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewDatabaseSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewDataBaseSource";
                    this.mNewDatabaseSource.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNewDatabaseSource;
            }
        }
        
        public WpfMenuItem NewWebServiceSource
        {
            get
            {
                if ((this.mNewWebServiceSource == null))
                {
                    this.mNewWebServiceSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewWebServiceSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewWebSource";
                    this.mNewWebServiceSource.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNewWebServiceSource;
            }
        }
        
        public WpfMenuItem NewPluginSource
        {
            get
            {
                if ((this.mNewPluginSource == null))
                {
                    this.mNewPluginSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewPluginSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewPluginSource";
                    this.mNewPluginSource.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNewPluginSource;
            }
        }
        
        public WpfMenuItem NewEmailSource
        {
            get
            {
                if ((this.mNewEmailSource == null))
                {
                    this.mNewEmailSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewEmailSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewEmailSource";
                    this.mNewEmailSource.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNewEmailSource;
            }
        }
        
        public WpfMenuItem NewDropboxSource
        {
            get
            {
                if ((this.mNewDropboxSource == null))
                {
                    this.mNewDropboxSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewDropboxSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewDropboxSource";
                    this.mNewDropboxSource.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNewDropboxSource;
            }
        }
        
        public WpfMenuItem NewSharepointSource
        {
            get
            {
                if ((this.mNewSharepointSource == null))
                {
                    this.mNewSharepointSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewSharepointSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewSharepointSource";
                    this.mNewSharepointSource.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNewSharepointSource;
            }
        }
        
        public WpfMenuItem NewFolder
        {
            get
            {
                if ((this.mNewFolder == null))
                {
                    this.mNewFolder = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewFolder.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewFolderFromItem";
                    this.mNewFolder.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNewFolder;
            }
        }
        
        public WpfMenuItem Rename
        {
            get
            {
                if ((this.mRename == null))
                {
                    this.mRename = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mRename.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Rename";
                    this.mRename.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mRename;
            }
        }
        
        public WpfMenuItem Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDelete.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Delete";
                    this.mDelete.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDelete;
            }
        }
        
        public WpfMenuItem Deploy
        {
            get
            {
                if ((this.mDeploy == null))
                {
                    this.mDeploy = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDeploy.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Deploy";
                    this.mDeploy.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDeploy;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mShowServerVersion;
        
        private WpfMenuItem mNewWorkflow;
        
        private WpfMenuItem mNewServerSource;
        
        private WpfMenuItem mNewDatabaseSource;
        
        private WpfMenuItem mNewWebServiceSource;
        
        private WpfMenuItem mNewPluginSource;
        
        private WpfMenuItem mNewEmailSource;
        
        private WpfMenuItem mNewDropboxSource;
        
        private WpfMenuItem mNewSharepointSource;
        
        private WpfMenuItem mNewFolder;
        
        private WpfMenuItem mRename;
        
        private WpfMenuItem mDelete;
        
        private WpfMenuItem mDeploy;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class GenericContextMenu : WpfMenu
    {
        
        public GenericContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem Cut
        {
            get
            {
                if ((this.mCut == null))
                {
                    this.mCut = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mCut.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "CutMenuItem";
                    this.mCut.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCut;
            }
        }
        
        public WpfMenuItem Paste
        {
            get
            {
                if ((this.mPaste == null))
                {
                    this.mPaste = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mPaste.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "PasteMenuItem";
                    this.mPaste.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mPaste;
            }
        }
        
        public WpfMenuItem Copy
        {
            get
            {
                if ((this.mCopy == null))
                {
                    this.mCopy = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mCopy.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "CopyMenuItem";
                    this.mCopy.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCopy;
            }
        }
        
        public WpfMenuItem CopyasImage
        {
            get
            {
                if ((this.mCopyasImage == null))
                {
                    this.mCopyasImage = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mCopyasImage.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "CopyAsImageMenuItem";
                    this.mCopyasImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCopyasImage;
            }
        }
        
        public WpfMenuItem SaveasImage
        {
            get
            {
                if ((this.mSaveasImage == null))
                {
                    this.mSaveasImage = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mSaveasImage.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "SaveAsImageMenuItem";
                    this.mSaveasImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSaveasImage;
            }
        }
        
        public WpfMenuItem SetasStartNode
        {
            get
            {
                if ((this.mSetasStartNode == null))
                {
                    this.mSetasStartNode = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mSetasStartNode.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "SetAsStartNodeMenuItem";
                    this.mSetasStartNode.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSetasStartNode;
            }
        }
        
        public WpfMenuItem ShowLargeView
        {
            get
            {
                if ((this.mShowLargeView == null))
                {
                    this.mShowLargeView = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mShowLargeView.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "UI_ShowLargeViewMenuItem_AutoID";
                    this.mShowLargeView.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mShowLargeView;
            }
        }
        
        public WpfMenuItem InsertRow
        {
            get
            {
                if ((this.mInsertRow == null))
                {
                    this.mInsertRow = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mInsertRow.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "UI_InsertRowMenuItem_AutoID";
                    this.mInsertRow.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mInsertRow;
            }
        }
        
        public WpfMenuItem DeleteRow
        {
            get
            {
                if ((this.mDeleteRow == null))
                {
                    this.mDeleteRow = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDeleteRow.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "UI_DeleteRowMenuItem_AutoID";
                    this.mDeleteRow.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDeleteRow;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mCut;
        
        private WpfMenuItem mPaste;
        
        private WpfMenuItem mCopy;
        
        private WpfMenuItem mCopyasImage;
        
        private WpfMenuItem mSaveasImage;
        
        private WpfMenuItem mSetasStartNode;
        
        private WpfMenuItem mShowLargeView;
        
        private WpfMenuItem mInsertRow;
        
        private WpfMenuItem mDeleteRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SplitPane : WpfCustom
    {
        
        public SplitPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SplitPane_AutoID";
            this.WindowTitles.Add("Warewolf");
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public TabMan TabMan
        {
            get
            {
                if ((this.mTabMan == null))
                {
                    this.mTabMan = new TabMan(this);
                }
                return this.mTabMan;
            }
        }
        #endregion
        
        #region Fields
        private TabMan mTabMan;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class TabMan : WpfTabList
    {
        
        public TabMan(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "UI_TabManager_AutoID";
            this.WindowTitles.Add("Warewolf");
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WorkflowTab WorkflowTab
        {
            get
            {
                if ((this.mWorkflowTab == null))
                {
                    this.mWorkflowTab = new WorkflowTab(this);
                }
                return this.mWorkflowTab;
            }
        }
        
        public WpfMenu FilesMenu
        {
            get
            {
                if ((this.mFilesMenu == null))
                {
                    this.mFilesMenu = new WpfMenu(this);
                    #region Search Criteria
                    this.mFilesMenu.SearchProperties[WpfMenu.PropertyNames.AutomationId] = "filesMenu";
                    this.mFilesMenu.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mFilesMenu;
            }
        }
        
        public WpfButton NavigatorButton
        {
            get
            {
                if ((this.mNavigatorButton == null))
                {
                    this.mNavigatorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNavigatorButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "showNavigatorButton";
                    this.mNavigatorButton.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mNavigatorButton;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowTab mWorkflowTab;
        
        private WpfMenu mFilesMenu;
        
        private WpfButton mNavigatorButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class WorkflowTab : WpfTabPage
    {
        
        public WorkflowTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Studio.ViewModels.Workflow.WorkflowDesignerViewModel";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfButton CloseButton
        {
            get
            {
                if ((this.mCloseButton == null))
                {
                    this.mCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mCloseButton.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCloseButton;
            }
        }
        
        public WorkSurfaceContext WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mCloseButton;
        
        private WorkSurfaceContext mWorkSurfaceContext;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class WorkSurfaceContext : WpfCustom
    {
        
        public WorkSurfaceContext(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WorkflowDesignerView WorkflowDesignerView
        {
            get
            {
                if ((this.mWorkflowDesignerView == null))
                {
                    this.mWorkflowDesignerView = new WorkflowDesignerView(this);
                }
                return this.mWorkflowDesignerView;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowDesignerView mWorkflowDesignerView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class WorkflowDesignerView : WpfCustom
    {
        
        public WorkflowDesignerView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DesignerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UserControl_1";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane(this);
                }
                return this.mScrollViewerPane;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane mScrollViewerPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ScrollViewerPane : WpfPane
    {
        
        public ScrollViewerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "scrollViewer";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public ActivityTypeDesigner ActivityTypeDesigner
        {
            get
            {
                if ((this.mActivityTypeDesigner == null))
                {
                    this.mActivityTypeDesigner = new ActivityTypeDesigner(this);
                }
                return this.mActivityTypeDesigner;
            }
        }
        #endregion
        
        #region Fields
        private ActivityTypeDesigner mActivityTypeDesigner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ActivityTypeDesigner : WpfCustom
    {
        
        public ActivityTypeDesigner(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ActivityTypeDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActivityTypeDesigner";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WorkflowItemPresenter WorkflowItemPresenter
        {
            get
            {
                if ((this.mWorkflowItemPresenter == null))
                {
                    this.mWorkflowItemPresenter = new WorkflowItemPresenter(this);
                }
                return this.mWorkflowItemPresenter;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowItemPresenter mWorkflowItemPresenter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class WorkflowItemPresenter : WpfCustom
    {
        
        public WorkflowItemPresenter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "WorkflowItemPresenter";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public Flowchart Flowchart
        {
            get
            {
                if ((this.mFlowchart == null))
                {
                    this.mFlowchart = new Flowchart(this);
                }
                return this.mFlowchart;
            }
        }
        #endregion
        
        #region Fields
        private Flowchart mFlowchart;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Flowchart : WpfCustom
    {
        
        public Flowchart(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowchartDesigner";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfCustom WebGet
        {
            get
            {
                if ((this.mWebGet == null))
                {
                    this.mWebGet = new WpfCustom(this);
                    #region Search Criteria
                    this.mWebGet.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.GetWebRequestWithTimeOutDesigner";
                    this.mWebGet.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Web Request(GetWebRequestWithTimeOutDesigner)";
                    this.mWebGet.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mWebGet;
            }
        }
        
        public WpfCustom WebPost
        {
            get
            {
                if ((this.mWebPost == null))
                {
                    this.mWebPost = new WpfCustom(this);
                    #region Search Criteria
                    this.mWebPost.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WebServicePostDesigner";
                    this.mWebPost.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Web Post Request Connector(WebServicePostDesigner)";
                    this.mWebPost.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mWebPost;
            }
        }
        
        public WpfCustom DotNetDll
        {
            get
            {
                if ((this.mDotNetDll == null))
                {
                    this.mDotNetDll = new WpfCustom(this);
                    #region Search Criteria
                    this.mDotNetDll.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DotNetDllDesigner";
                    this.mDotNetDll.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DotNet DLL Connector(DotNetDllDesigner)";
                    this.mDotNetDll.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDotNetDll;
            }
        }
        
        public DataMerge DataMerge
        {
            get
            {
                if ((this.mDataMerge == null))
                {
                    this.mDataMerge = new DataMerge(this);
                }
                return this.mDataMerge;
            }
        }
        
        public DataSplit DataSplit
        {
            get
            {
                if ((this.mDataSplit == null))
                {
                    this.mDataSplit = new DataSplit(this);
                }
                return this.mDataSplit;
            }
        }
        
        public WpfCustom MySqlDatabase
        {
            get
            {
                if ((this.mMySqlDatabase == null))
                {
                    this.mMySqlDatabase = new WpfCustom(this);
                    #region Search Criteria
                    this.mMySqlDatabase.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MySqlDatabaseDesigner";
                    this.mMySqlDatabase.SearchProperties[WpfControl.PropertyNames.AutomationId] = "MySql Database(MySqlDatabaseDesigner)";
                    this.mMySqlDatabase.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mMySqlDatabase;
            }
        }
        
        public WpfCustom SqlServerDatabase
        {
            get
            {
                if ((this.mSqlServerDatabase == null))
                {
                    this.mSqlServerDatabase = new WpfCustom(this);
                    #region Search Criteria
                    this.mSqlServerDatabase.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SqlServerDatabaseDesigner";
                    this.mSqlServerDatabase.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SQL Server Database(SqlServerDatabaseDesigner)";
                    this.mSqlServerDatabase.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSqlServerDatabase;
            }
        }
        
        public BaseConvert BaseConvert
        {
            get
            {
                if ((this.mBaseConvert == null))
                {
                    this.mBaseConvert = new BaseConvert(this);
                }
                return this.mBaseConvert;
            }
        }
        
        public CaseConvert CaseConvert
        {
            get
            {
                if ((this.mCaseConvert == null))
                {
                    this.mCaseConvert = new CaseConvert(this);
                }
                return this.mCaseConvert;
            }
        }
        
        public WpfCustom SubWorkflow
        {
            get
            {
                if ((this.mSubWorkflow == null))
                {
                    this.mSubWorkflow = new WpfCustom(this);
                    #region Search Criteria
                    this.mSubWorkflow.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceDesigner";
                    this.mSubWorkflow.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Wolf-860(ServiceDesigner)";
                    this.mSubWorkflow.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSubWorkflow;
            }
        }
        
        public WpfCustom PluginConnector
        {
            get
            {
                if ((this.mPluginConnector == null))
                {
                    this.mPluginConnector = new WpfCustom(this);
                    #region Search Criteria
                    this.mPluginConnector.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceDesigner";
                    this.mPluginConnector.SearchProperties[WpfControl.PropertyNames.AutomationId] = "wolf-829(ServiceDesigner)";
                    this.mPluginConnector.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mPluginConnector;
            }
        }
        
        public WpfCustom WebConnector
        {
            get
            {
                if ((this.mWebConnector == null))
                {
                    this.mWebConnector = new WpfCustom(this);
                    #region Search Criteria
                    this.mWebConnector.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceDesigner";
                    this.mWebConnector.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Alert(ServiceDesigner)";
                    this.mWebConnector.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mWebConnector;
            }
        }
        
        public WpfCustom DatabaseConnector
        {
            get
            {
                if ((this.mDatabaseConnector == null))
                {
                    this.mDatabaseConnector = new WpfCustom(this);
                    #region Search Criteria
                    this.mDatabaseConnector.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceDesigner";
                    this.mDatabaseConnector.SearchProperties[WpfControl.PropertyNames.AutomationId] = "MyDataCon(ServiceDesigner)";
                    this.mDatabaseConnector.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDatabaseConnector;
            }
        }
        
        public WpfCustom ForEach
        {
            get
            {
                if ((this.mForEach == null))
                {
                    this.mForEach = new WpfCustom(this);
                    #region Search Criteria
                    this.mForEach.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ForeachDesigner";
                    this.mForEach.SearchProperties[WpfControl.PropertyNames.AutomationId] = "For Each(ForeachDesigner)";
                    this.mForEach.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mForEach;
            }
        }
        
        public WpfCustom Length
        {
            get
            {
                if ((this.mLength == null))
                {
                    this.mLength = new WpfCustom(this);
                    #region Search Criteria
                    this.mLength.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.RecordsLengthDesigner";
                    this.mLength.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Length(RecordsLengthDesigner)";
                    this.mLength.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mLength;
            }
        }
        
        public WpfCustom FindRecordsIndex
        {
            get
            {
                if ((this.mFindRecordsIndex == null))
                {
                    this.mFindRecordsIndex = new WpfCustom(this);
                    #region Search Criteria
                    this.mFindRecordsIndex.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FindRecordsMultipleCriteriaDesigner";
                    this.mFindRecordsIndex.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Find Record Index (1)(FindRecordsMultipleCriteriaDesigner)";
                    this.mFindRecordsIndex.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mFindRecordsIndex;
            }
        }
        
        public WpfCustom DeleteRecord
        {
            get
            {
                if ((this.mDeleteRecord == null))
                {
                    this.mDeleteRecord = new WpfCustom(this);
                    #region Search Criteria
                    this.mDeleteRecord.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DeleteRecordsDesigner";
                    this.mDeleteRecord.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Delete Record(DeleteRecordsDesigner)";
                    this.mDeleteRecord.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDeleteRecord;
            }
        }
        
        public WpfCustom SortRecords
        {
            get
            {
                if ((this.mSortRecords == null))
                {
                    this.mSortRecords = new WpfCustom(this);
                    #region Search Criteria
                    this.mSortRecords.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SortRecordsDesigner";
                    this.mSortRecords.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sort Records(SortRecordsDesigner)";
                    this.mSortRecords.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSortRecords;
            }
        }
        
        public WpfCustom CountRecordset
        {
            get
            {
                if ((this.mCountRecordset == null))
                {
                    this.mCountRecordset = new WpfCustom(this);
                    #region Search Criteria
                    this.mCountRecordset.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CountRecordsDesigner";
                    this.mCountRecordset.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Count Records(CountRecordsDesigner)";
                    this.mCountRecordset.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mCountRecordset;
            }
        }
        
        public SqlBulkInsert SqlBulkInsert
        {
            get
            {
                if ((this.mSqlBulkInsert == null))
                {
                    this.mSqlBulkInsert = new SqlBulkInsert(this);
                }
                return this.mSqlBulkInsert;
            }
        }
        
        public WpfCustom Unique
        {
            get
            {
                if ((this.mUnique == null))
                {
                    this.mUnique = new WpfCustom(this);
                    #region Search Criteria
                    this.mUnique.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UniqueRecordsDesigner";
                    this.mUnique.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Unique Records(UniqueRecordsDesigner)";
                    this.mUnique.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUnique;
            }
        }
        
        public CreateJson CreateJson
        {
            get
            {
                if ((this.mCreateJson == null))
                {
                    this.mCreateJson = new CreateJson(this);
                }
                return this.mCreateJson;
            }
        }
        
        public WpfCustom ExecuteCommandLine
        {
            get
            {
                if ((this.mExecuteCommandLine == null))
                {
                    this.mExecuteCommandLine = new WpfCustom(this);
                    #region Search Criteria
                    this.mExecuteCommandLine.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CommandLineDesigner";
                    this.mExecuteCommandLine.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Execute Command Line(CommandLineDesigner)";
                    this.mExecuteCommandLine.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mExecuteCommandLine;
            }
        }
        
        public WpfCustom Scripting
        {
            get
            {
                if ((this.mScripting == null))
                {
                    this.mScripting = new WpfCustom(this);
                    #region Search Criteria
                    this.mScripting.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ScriptDesigner";
                    this.mScripting.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Script(ScriptDesigner)";
                    this.mScripting.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mScripting;
            }
        }
        
        public WpfCustom SharepointCreate
        {
            get
            {
                if ((this.mSharepointCreate == null))
                {
                    this.mSharepointCreate = new WpfCustom(this);
                    #region Search Criteria
                    this.mSharepointCreate.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharepointListCreateDesigner";
                    this.mSharepointCreate.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sharepoint Create List Item(SharepointListCreateDesigner)";
                    this.mSharepointCreate.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSharepointCreate;
            }
        }
        
        public WpfCustom SharepointDelete
        {
            get
            {
                if ((this.mSharepointDelete == null))
                {
                    this.mSharepointDelete = new WpfCustom(this);
                    #region Search Criteria
                    this.mSharepointDelete.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharepointListDeleteDesigner";
                    this.mSharepointDelete.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sharepoint Delete List Item (1)(SharepointListDeleteDesigner)";
                    this.mSharepointDelete.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSharepointDelete;
            }
        }
        
        public WpfCustom SharepointRead
        {
            get
            {
                if ((this.mSharepointRead == null))
                {
                    this.mSharepointRead = new WpfCustom(this);
                    #region Search Criteria
                    this.mSharepointRead.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharepointListReadDesigner";
                    this.mSharepointRead.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sharepoint Read List Item (1)(SharepointListReadDesigner)";
                    this.mSharepointRead.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSharepointRead;
            }
        }
        
        public WpfCustom SharepointUpdate
        {
            get
            {
                if ((this.mSharepointUpdate == null))
                {
                    this.mSharepointUpdate = new WpfCustom(this);
                    #region Search Criteria
                    this.mSharepointUpdate.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharepointListUpdateDesigner";
                    this.mSharepointUpdate.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sharepoint Update List Item (1)(SharepointListUpdateDesigner)";
                    this.mSharepointUpdate.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSharepointUpdate;
            }
        }
        
        public WpfCustom Calculate
        {
            get
            {
                if ((this.mCalculate == null))
                {
                    this.mCalculate = new WpfCustom(this);
                    #region Search Criteria
                    this.mCalculate.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CalculateDesigner";
                    this.mCalculate.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Calculate(CalculateDesigner)";
                    this.mCalculate.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mCalculate;
            }
        }
        
        public WpfCustom DateTime
        {
            get
            {
                if ((this.mDateTime == null))
                {
                    this.mDateTime = new WpfCustom(this);
                    #region Search Criteria
                    this.mDateTime.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DateTimeDesigner";
                    this.mDateTime.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Date and Time(DateTimeDesigner)";
                    this.mDateTime.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDateTime;
            }
        }
        
        public WpfCustom DateTimeDifference
        {
            get
            {
                if ((this.mDateTimeDifference == null))
                {
                    this.mDateTimeDifference = new WpfCustom(this);
                    #region Search Criteria
                    this.mDateTimeDifference.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DateTimeDifferenceDesigner";
                    this.mDateTimeDifference.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Date and Time Difference(DateTimeDifferenceDesigner)";
                    this.mDateTimeDifference.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDateTimeDifference;
            }
        }
        
        public GatherSystemInfo GatherSystemInfo
        {
            get
            {
                if ((this.mGatherSystemInfo == null))
                {
                    this.mGatherSystemInfo = new GatherSystemInfo(this);
                }
                return this.mGatherSystemInfo;
            }
        }
        
        public WpfCustom FormatNumber
        {
            get
            {
                if ((this.mFormatNumber == null))
                {
                    this.mFormatNumber = new WpfCustom(this);
                    #region Search Criteria
                    this.mFormatNumber.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FormatNumberDesigner";
                    this.mFormatNumber.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Format Number(FormatNumberDesigner)";
                    this.mFormatNumber.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mFormatNumber;
            }
        }
        
        public WpfCustom Random
        {
            get
            {
                if ((this.mRandom == null))
                {
                    this.mRandom = new WpfCustom(this);
                    #region Search Criteria
                    this.mRandom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.RandomDesigner";
                    this.mRandom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Random(RandomDesigner)";
                    this.mRandom.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mRandom;
            }
        }
        
        public WpfCustom SendEmail
        {
            get
            {
                if ((this.mSendEmail == null))
                {
                    this.mSendEmail = new WpfCustom(this);
                    #region Search Criteria
                    this.mSendEmail.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.EmailDesigner";
                    this.mSendEmail.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Email(EmailDesigner)";
                    this.mSendEmail.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSendEmail;
            }
        }
        
        public WpfCustom Comment
        {
            get
            {
                if ((this.mComment == null))
                {
                    this.mComment = new WpfCustom(this);
                    #region Search Criteria
                    this.mComment.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CommentDesigner";
                    this.mComment.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Comment(CommentDesigner)";
                    this.mComment.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mComment;
            }
        }
        
        public XPath XPath
        {
            get
            {
                if ((this.mXPath == null))
                {
                    this.mXPath = new XPath(this);
                }
                return this.mXPath;
            }
        }
        
        public WpfCustom DropBox_DOWNLOAD
        {
            get
            {
                if ((this.mDropBox_DOWNLOAD == null))
                {
                    this.mDropBox_DOWNLOAD = new WpfCustom(this);
                    #region Search Criteria
                    this.mDropBox_DOWNLOAD.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DropBoxDownloadDesigner";
                    this.mDropBox_DOWNLOAD.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DOWNLOAD from Dropbox(DropBoxDownloadDesigner)";
                    this.mDropBox_DOWNLOAD.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDropBox_DOWNLOAD;
            }
        }
        
        public WpfCustom DropBox_UPLOAD
        {
            get
            {
                if ((this.mDropBox_UPLOAD == null))
                {
                    this.mDropBox_UPLOAD = new WpfCustom(this);
                    #region Search Criteria
                    this.mDropBox_UPLOAD.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DropBoxUploadDesigner";
                    this.mDropBox_UPLOAD.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Upload to Dropbox(DropBoxUploadDesigner)";
                    this.mDropBox_UPLOAD.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDropBox_UPLOAD;
            }
        }
        
        public WpfCustom PathCreate
        {
            get
            {
                if ((this.mPathCreate == null))
                {
                    this.mPathCreate = new WpfCustom(this);
                    #region Search Criteria
                    this.mPathCreate.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CreateDesigner";
                    this.mPathCreate.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Create(CreateDesigner)";
                    this.mPathCreate.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mPathCreate;
            }
        }
        
        public WpfCustom PathCopy
        {
            get
            {
                if ((this.mPathCopy == null))
                {
                    this.mPathCopy = new WpfCustom(this);
                    #region Search Criteria
                    this.mPathCopy.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CopyDesigner";
                    this.mPathCopy.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Copy(CopyDesigner)";
                    this.mPathCopy.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mPathCopy;
            }
        }
        
        public WpfCustom PathDelete
        {
            get
            {
                if ((this.mPathDelete == null))
                {
                    this.mPathDelete = new WpfCustom(this);
                    #region Search Criteria
                    this.mPathDelete.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DeleteDesigner";
                    this.mPathDelete.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Delete(DeleteDesigner)";
                    this.mPathDelete.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mPathDelete;
            }
        }
        
        public WpfCustom PathMove
        {
            get
            {
                if ((this.mPathMove == null))
                {
                    this.mPathMove = new WpfCustom(this);
                    #region Search Criteria
                    this.mPathMove.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MoveDesigner";
                    this.mPathMove.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Move(MoveDesigner)";
                    this.mPathMove.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mPathMove;
            }
        }
        
        public WpfCustom FolderRead
        {
            get
            {
                if ((this.mFolderRead == null))
                {
                    this.mFolderRead = new WpfCustom(this);
                    #region Search Criteria
                    this.mFolderRead.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ReadFolderDesigner";
                    this.mFolderRead.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Read Folder(ReadFolderDesigner)";
                    this.mFolderRead.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mFolderRead;
            }
        }
        
        public WpfCustom FileRead
        {
            get
            {
                if ((this.mFileRead == null))
                {
                    this.mFileRead = new WpfCustom(this);
                    #region Search Criteria
                    this.mFileRead.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ReadFileDesigner";
                    this.mFileRead.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Read File(ReadFileDesigner)";
                    this.mFileRead.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mFileRead;
            }
        }
        
        public WpfCustom FileWrite
        {
            get
            {
                if ((this.mFileWrite == null))
                {
                    this.mFileWrite = new WpfCustom(this);
                    #region Search Criteria
                    this.mFileWrite.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WriteFileDesigner";
                    this.mFileWrite.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Write File(WriteFileDesigner)";
                    this.mFileWrite.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mFileWrite;
            }
        }
        
        public WpfCustom PathRename
        {
            get
            {
                if ((this.mPathRename == null))
                {
                    this.mPathRename = new WpfCustom(this);
                    #region Search Criteria
                    this.mPathRename.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.RenameDesigner";
                    this.mPathRename.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Rename(RenameDesigner)";
                    this.mPathRename.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mPathRename;
            }
        }
        
        public WpfCustom UnZip
        {
            get
            {
                if ((this.mUnZip == null))
                {
                    this.mUnZip = new WpfCustom(this);
                    #region Search Criteria
                    this.mUnZip.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UnzipDesigner";
                    this.mUnZip.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Unzip(UnzipDesigner)";
                    this.mUnZip.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUnZip;
            }
        }
        
        public WpfCustom Zip
        {
            get
            {
                if ((this.mZip == null))
                {
                    this.mZip = new WpfCustom(this);
                    #region Search Criteria
                    this.mZip.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ZipDesigner";
                    this.mZip.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Zip(ZipDesigner)";
                    this.mZip.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mZip;
            }
        }
        
        public WpfCustom FindIndex
        {
            get
            {
                if ((this.mFindIndex == null))
                {
                    this.mFindIndex = new WpfCustom(this);
                    #region Search Criteria
                    this.mFindIndex.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FindIndexDesigner";
                    this.mFindIndex.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Find Index(FindIndexDesigner)";
                    this.mFindIndex.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mFindIndex;
            }
        }
        
        public WpfCustom Replace
        {
            get
            {
                if ((this.mReplace == null))
                {
                    this.mReplace = new WpfCustom(this);
                    #region Search Criteria
                    this.mReplace.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ReplaceDesigner";
                    this.mReplace.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Replace(ReplaceDesigner)";
                    this.mReplace.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mReplace;
            }
        }
        
        public WpfCustom Switch
        {
            get
            {
                if ((this.mSwitch == null))
                {
                    this.mSwitch = new WpfCustom(this);
                    #region Search Criteria
                    this.mSwitch.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowSwitchDesigner";
                    this.mSwitch.SearchProperties[WpfControl.PropertyNames.AutomationId] = "FlowSwitchDesigner";
                    this.mSwitch.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSwitch;
            }
        }
        
        public WpfCustom Sequence
        {
            get
            {
                if ((this.mSequence == null))
                {
                    this.mSequence = new WpfCustom(this);
                    #region Search Criteria
                    this.mSequence.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SequenceDesigner";
                    this.mSequence.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sequence(SequenceDesigner)";
                    this.mSequence.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSequence;
            }
        }
        
        public WpfCustom Decision
        {
            get
            {
                if ((this.mDecision == null))
                {
                    this.mDecision = new WpfCustom(this);
                    #region Search Criteria
                    this.mDecision.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowDecisionDesigner";
                    this.mDecision.SearchProperties[WpfControl.PropertyNames.AutomationId] = "FlowDecisionDesigner";
                    this.mDecision.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDecision;
            }
        }
        
        public MultiAssign MultiAssign
        {
            get
            {
                if ((this.mMultiAssign == null))
                {
                    this.mMultiAssign = new MultiAssign(this);
                }
                return this.mMultiAssign;
            }
        }
        
        public WpfCustom StartNode
        {
            get
            {
                if ((this.mStartNode == null))
                {
                    this.mStartNode = new WpfCustom(this);
                    #region Search Criteria
                    this.mStartNode.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.StartSymbol";
                    this.mStartNode.SearchProperties[WpfControl.PropertyNames.AutomationId] = "StartSymbol";
                    this.mStartNode.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mStartNode;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mWebGet;
        
        private WpfCustom mWebPost;
        
        private WpfCustom mDotNetDll;
        
        private DataMerge mDataMerge;
        
        private DataSplit mDataSplit;
        
        private WpfCustom mMySqlDatabase;
        
        private WpfCustom mSqlServerDatabase;
        
        private BaseConvert mBaseConvert;
        
        private CaseConvert mCaseConvert;
        
        private WpfCustom mSubWorkflow;
        
        private WpfCustom mPluginConnector;
        
        private WpfCustom mWebConnector;
        
        private WpfCustom mDatabaseConnector;
        
        private WpfCustom mForEach;
        
        private WpfCustom mLength;
        
        private WpfCustom mFindRecordsIndex;
        
        private WpfCustom mDeleteRecord;
        
        private WpfCustom mSortRecords;
        
        private WpfCustom mCountRecordset;
        
        private SqlBulkInsert mSqlBulkInsert;
        
        private WpfCustom mUnique;
        
        private CreateJson mCreateJson;
        
        private WpfCustom mExecuteCommandLine;
        
        private WpfCustom mScripting;
        
        private WpfCustom mSharepointCreate;
        
        private WpfCustom mSharepointDelete;
        
        private WpfCustom mSharepointRead;
        
        private WpfCustom mSharepointUpdate;
        
        private WpfCustom mCalculate;
        
        private WpfCustom mDateTime;
        
        private WpfCustom mDateTimeDifference;
        
        private GatherSystemInfo mGatherSystemInfo;
        
        private WpfCustom mFormatNumber;
        
        private WpfCustom mRandom;
        
        private WpfCustom mSendEmail;
        
        private WpfCustom mComment;
        
        private XPath mXPath;
        
        private WpfCustom mDropBox_DOWNLOAD;
        
        private WpfCustom mDropBox_UPLOAD;
        
        private WpfCustom mPathCreate;
        
        private WpfCustom mPathCopy;
        
        private WpfCustom mPathDelete;
        
        private WpfCustom mPathMove;
        
        private WpfCustom mFolderRead;
        
        private WpfCustom mFileRead;
        
        private WpfCustom mFileWrite;
        
        private WpfCustom mPathRename;
        
        private WpfCustom mUnZip;
        
        private WpfCustom mZip;
        
        private WpfCustom mFindIndex;
        
        private WpfCustom mReplace;
        
        private WpfCustom mSwitch;
        
        private WpfCustom mSequence;
        
        private WpfCustom mDecision;
        
        private MultiAssign mMultiAssign;
        
        private WpfCustom mStartNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DataMerge : WpfCustom
    {
        
        public DataMerge(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DataMergeDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Data Merge (1)(DataMergeDesigner)";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DataSplit : WpfCustom
    {
        
        public DataSplit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DataSplitDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Data Split (1)(DataSplitDesigner)";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class BaseConvert : WpfCustom
    {
        
        public BaseConvert(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.BaseConvertDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Base Conversion (1)(BaseConvertDesigner)";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class CaseConvert : WpfCustom
    {
        
        public CaseConvert(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CaseConvertDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Case Conversion (1)(CaseConvertDesigner)";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SqlBulkInsert : WpfCustom
    {
        
        public SqlBulkInsert(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SqlBulkInsertDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SQL Bulk Insert(SqlBulkInsertDesigner)";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class CreateJson : WpfCustom
    {
        
        public CreateJson(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CreateJsonDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Create JSON (1)(CreateJsonDesigner)";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class GatherSystemInfo : WpfCustom
    {
        
        public GatherSystemInfo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.GatherSystemInformationDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Gather System Information (1)(GatherSystemInformationDesigner)";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class XPath : WpfCustom
    {
        
        public XPath(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XPathDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "XPath (1)(XPathDesigner)";
            this.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class MultiAssign : WpfCustom
    {
        
        public MultiAssign(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MultiAssignDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Assign (1)(MultiAssignDesigner)";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        
        public WpfCustom QuickVariableInputLargeView
        {
            get
            {
                if ((this.mQuickVariableInputLargeView == null))
                {
                    this.mQuickVariableInputLargeView = new WpfCustom(this);
                    #region Search Criteria
                    this.mQuickVariableInputLargeView.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.QuickVariableInputView";
                    this.mQuickVariableInputLargeView.SearchProperties[WpfControl.PropertyNames.AutomationId] = "QuickVariableInputContent";
                    this.mQuickVariableInputLargeView.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mQuickVariableInputLargeView;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        
        private WpfCustom mQuickVariableInputLargeView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ConnectControl : WpfCustom
    {
        
        public ConnectControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ConnectControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UITheServerComboBoxCustom UITheServerComboBoxCustom
        {
            get
            {
                if ((this.mUITheServerComboBoxCustom == null))
                {
                    this.mUITheServerComboBoxCustom = new UITheServerComboBoxCustom(this);
                }
                return this.mUITheServerComboBoxCustom;
            }
        }
        
        public WpfButton EditButton
        {
            get
            {
                if ((this.mEditButton == null))
                {
                    this.mEditButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_ServerEditBtn_AutoID";
                    this.mEditButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditButton;
            }
        }
        
        public WpfButton ConnectServerButton
        {
            get
            {
                if ((this.mConnectServerButton == null))
                {
                    this.mConnectServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConnectServerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_ConnectServerBtn_AutoID";
                    this.mConnectServerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnectServerButton;
            }
        }
        #endregion
        
        #region Fields
        private UITheServerComboBoxCustom mUITheServerComboBoxCustom;
        
        private WpfButton mEditButton;
        
        private WpfButton mConnectServerButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UITheServerComboBoxCustom : WpfCustom
    {
        
        public UITheServerComboBoxCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "TheServerComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton UIToggleButtonButton
        {
            get
            {
                if ((this.mUIToggleButtonButton == null))
                {
                    this.mUIToggleButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIToggleButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mUIToggleButtonButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIToggleButtonButton;
            }
        }
        
        public WpfEdit UITextBoxPresenterEdit
        {
            get
            {
                if ((this.mUITextBoxPresenterEdit == null))
                {
                    this.mUITextBoxPresenterEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBoxPresenterEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TextBoxPresenter";
                    this.mUITextBoxPresenterEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUITextBoxPresenterEdit;
            }
        }
        
        public WpfText UINewRemoteServerText
        {
            get
            {
                if ((this.mUINewRemoteServerText == null))
                {
                    this.mUINewRemoteServerText = new WpfText(this);
                    #region Search Criteria
                    this.mUINewRemoteServerText.SearchProperties[WpfText.PropertyNames.Name] = "New Remote Server...";
                    this.mUINewRemoteServerText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUINewRemoteServerText;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIToggleButtonButton;
        
        private WpfEdit mUITextBoxPresenterEdit;
        
        private WpfText mUINewRemoteServerText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Explorer : WpfCustom
    {
        
        public Explorer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ExplorerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_ExplorerControl_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UISearchTextBoxEdit UISearchTextBoxEdit
        {
            get
            {
                if ((this.mUISearchTextBoxEdit == null))
                {
                    this.mUISearchTextBoxEdit = new UISearchTextBoxEdit(this);
                }
                return this.mUISearchTextBoxEdit;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.Name] = "";
                    this.mRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public ExplorerTree ExplorerTree
        {
            get
            {
                if ((this.mExplorerTree == null))
                {
                    this.mExplorerTree = new ExplorerTree(this);
                }
                return this.mExplorerTree;
            }
        }
        #endregion
        
        #region Fields
        private UISearchTextBoxEdit mUISearchTextBoxEdit;
        
        private WpfButton mRefreshButton;
        
        private ExplorerTree mExplorerTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UISearchTextBoxEdit : WpfEdit
    {
        
        public UISearchTextBoxEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText UIFilterText
        {
            get
            {
                if ((this.mUIFilterText == null))
                {
                    this.mUIFilterText = new WpfText(this);
                    #region Search Criteria
                    this.mUIFilterText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mUIFilterText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIFilterText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIFilterText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ExplorerTree : WpfTree
    {
        
        public ExplorerTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "ExplorerTree";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public LocalhostTreeItem LocalhostTreeItem
        {
            get
            {
                if ((this.mLocalhostTreeItem == null))
                {
                    this.mLocalhostTreeItem = new LocalhostTreeItem(this);
                }
                return this.mLocalhostTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private LocalhostTreeItem mLocalhostTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class LocalhostTreeItem : WpfTreeItem
    {
        
        public LocalhostTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfTreeItem UIInfragisticsControlsTreeItem1
        {
            get
            {
                if ((this.mUIInfragisticsControlsTreeItem1 == null))
                {
                    this.mUIInfragisticsControlsTreeItem1 = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mUIInfragisticsControlsTreeItem1.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mUIInfragisticsControlsTreeItem1.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "20";
                    this.mUIInfragisticsControlsTreeItem1.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIInfragisticsControlsTreeItem1.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIInfragisticsControlsTreeItem1;
            }
        }
        
        public WpfTreeItem UIInfragisticsControlsTreeItem16
        {
            get
            {
                if ((this.mUIInfragisticsControlsTreeItem16 == null))
                {
                    this.mUIInfragisticsControlsTreeItem16 = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mUIInfragisticsControlsTreeItem16.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mUIInfragisticsControlsTreeItem16.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "13";
                    this.mUIInfragisticsControlsTreeItem16.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIInfragisticsControlsTreeItem16.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mUIInfragisticsControlsTreeItem16;
            }
        }
        
        public WpfTreeItem ServerSource
        {
            get
            {
                if ((this.mServerSource == null))
                {
                    this.mServerSource = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mServerSource.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mServerSource.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "10";
                    this.mServerSource.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mServerSource.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mServerSource;
            }
        }
        
        public WpfTreeItem SharepointSource
        {
            get
            {
                if ((this.mSharepointSource == null))
                {
                    this.mSharepointSource = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mSharepointSource.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mSharepointSource.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
                    this.mSharepointSource.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSharepointSource.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mSharepointSource;
            }
        }
        
        public WpfTreeItem DatabaseConnector
        {
            get
            {
                if ((this.mDatabaseConnector == null))
                {
                    this.mDatabaseConnector = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mDatabaseConnector.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mDatabaseConnector.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "5";
                    this.mDatabaseConnector.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mDatabaseConnector.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mDatabaseConnector;
            }
        }
        
        public WpfTreeItem PluginConnector
        {
            get
            {
                if ((this.mPluginConnector == null))
                {
                    this.mPluginConnector = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mPluginConnector.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mPluginConnector.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "9";
                    this.mPluginConnector.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mPluginConnector.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mPluginConnector;
            }
        }
        
        public WpfTreeItem WebConnector
        {
            get
            {
                if ((this.mWebConnector == null))
                {
                    this.mWebConnector = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mWebConnector.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mWebConnector.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "23";
                    this.mWebConnector.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mWebConnector.WindowTitles.Add("Warewolf (DEV2\\LEROY.WARNER)");
                    #endregion
                }
                return this.mWebConnector;
            }
        }
        #endregion
        
        #region Fields
        private WpfTreeItem mUIInfragisticsControlsTreeItem1;
        
        private WpfTreeItem mUIInfragisticsControlsTreeItem16;
        
        private WpfTreeItem mServerSource;
        
        private WpfTreeItem mSharepointSource;
        
        private WpfTreeItem mDatabaseConnector;
        
        private WpfTreeItem mPluginConnector;
        
        private WpfTreeItem mWebConnector;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ToolBox : WpfCustom
    {
        
        public ToolBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ToolboxView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_ToolboxControl_AutoID";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public ToolListBox ToolListBox
        {
            get
            {
                if ((this.mToolListBox == null))
                {
                    this.mToolListBox = new ToolListBox(this);
                }
                return this.mToolListBox;
            }
        }
        #endregion
        
        #region Fields
        private ToolListBox mToolListBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ToolListBox : WpfList
    {
        
        public ToolListBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "ToolListBox";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public FlowTools FlowTools
        {
            get
            {
                if ((this.mFlowTools == null))
                {
                    this.mFlowTools = new FlowTools(this);
                }
                return this.mFlowTools;
            }
        }
        
        public DataTools DataTools
        {
            get
            {
                if ((this.mDataTools == null))
                {
                    this.mDataTools = new DataTools(this);
                }
                return this.mDataTools;
            }
        }
        
        public Database Database
        {
            get
            {
                if ((this.mDatabase == null))
                {
                    this.mDatabase = new Database(this);
                }
                return this.mDatabase;
            }
        }
        
        public FileAndFTP FileAndFTP
        {
            get
            {
                if ((this.mFileAndFTP == null))
                {
                    this.mFileAndFTP = new FileAndFTP(this);
                }
                return this.mFileAndFTP;
            }
        }
        
        public HTTPWebMethods HTTPWebMethods
        {
            get
            {
                if ((this.mHTTPWebMethods == null))
                {
                    this.mHTTPWebMethods = new HTTPWebMethods(this);
                }
                return this.mHTTPWebMethods;
            }
        }
        
        public LoopTools LoopTools
        {
            get
            {
                if ((this.mLoopTools == null))
                {
                    this.mLoopTools = new LoopTools(this);
                }
                return this.mLoopTools;
            }
        }
        
        public RecordsetTools RecordsetTools
        {
            get
            {
                if ((this.mRecordsetTools == null))
                {
                    this.mRecordsetTools = new RecordsetTools(this);
                }
                return this.mRecordsetTools;
            }
        }
        
        public ResourceTools ResourceTools
        {
            get
            {
                if ((this.mResourceTools == null))
                {
                    this.mResourceTools = new ResourceTools(this);
                }
                return this.mResourceTools;
            }
        }
        
        public ScriptingTools ScriptingTools
        {
            get
            {
                if ((this.mScriptingTools == null))
                {
                    this.mScriptingTools = new ScriptingTools(this);
                }
                return this.mScriptingTools;
            }
        }
        
        public SharepointTools SharepointTools
        {
            get
            {
                if ((this.mSharepointTools == null))
                {
                    this.mSharepointTools = new SharepointTools(this);
                }
                return this.mSharepointTools;
            }
        }
        
        public StorageTools StorageTools
        {
            get
            {
                if ((this.mStorageTools == null))
                {
                    this.mStorageTools = new StorageTools(this);
                }
                return this.mStorageTools;
            }
        }
        
        public UtilityTools UtilityTools
        {
            get
            {
                if ((this.mUtilityTools == null))
                {
                    this.mUtilityTools = new UtilityTools(this);
                }
                return this.mUtilityTools;
            }
        }
        #endregion
        
        #region Fields
        private FlowTools mFlowTools;
        
        private DataTools mDataTools;
        
        private Database mDatabase;
        
        private FileAndFTP mFileAndFTP;
        
        private HTTPWebMethods mHTTPWebMethods;
        
        private LoopTools mLoopTools;
        
        private RecordsetTools mRecordsetTools;
        
        private ResourceTools mResourceTools;
        
        private ScriptingTools mScriptingTools;
        
        private SharepointTools mSharepointTools;
        
        private StorageTools mStorageTools;
        
        private UtilityTools mUtilityTools;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class FlowTools : WpfGroup
    {
        
        public FlowTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Control Flow";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public Decision Decision
        {
            get
            {
                if ((this.mDecision == null))
                {
                    this.mDecision = new Decision(this);
                }
                return this.mDecision;
            }
        }
        
        public Switch Switch
        {
            get
            {
                if ((this.mSwitch == null))
                {
                    this.mSwitch = new Switch(this);
                }
                return this.mSwitch;
            }
        }
        
        public Sequence Sequence
        {
            get
            {
                if ((this.mSequence == null))
                {
                    this.mSequence = new Sequence(this);
                }
                return this.mSequence;
            }
        }
        #endregion
        
        #region Fields
        private Decision mDecision;
        
        private Switch mSwitch;
        
        private Sequence mSequence;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Decision : WpfListItem
    {
        
        public Decision(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Decision";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage DecisionImage
        {
            get
            {
                if ((this.mDecisionImage == null))
                {
                    this.mDecisionImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDecisionImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Decision";
                    this.mDecisionImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDecisionImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDecisionImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Switch : WpfListItem
    {
        
        public Switch(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Switch";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage SwitchImage
        {
            get
            {
                if ((this.mSwitchImage == null))
                {
                    this.mSwitchImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSwitchImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Switch";
                    this.mSwitchImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSwitchImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSwitchImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Sequence : WpfListItem
    {
        
        public Sequence(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Sequence";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage SequenceImage
        {
            get
            {
                if ((this.mSequenceImage == null))
                {
                    this.mSequenceImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSequenceImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Sequence";
                    this.mSequenceImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSequenceImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSequenceImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DataTools : WpfGroup
    {
        
        public DataTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Data";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public MultiAssign1 MultiAssign
        {
            get
            {
                if ((this.mMultiAssign == null))
                {
                    this.mMultiAssign = new MultiAssign1(this);
                }
                return this.mMultiAssign;
            }
        }
        
        public DataMerge1 DataMerge
        {
            get
            {
                if ((this.mDataMerge == null))
                {
                    this.mDataMerge = new DataMerge1(this);
                }
                return this.mDataMerge;
            }
        }
        
        public BaseConvert1 BaseConvert
        {
            get
            {
                if ((this.mBaseConvert == null))
                {
                    this.mBaseConvert = new BaseConvert1(this);
                }
                return this.mBaseConvert;
            }
        }
        
        public CaseConvert1 CaseConvert
        {
            get
            {
                if ((this.mCaseConvert == null))
                {
                    this.mCaseConvert = new CaseConvert1(this);
                }
                return this.mCaseConvert;
            }
        }
        
        public DataSplit1 DataSplit
        {
            get
            {
                if ((this.mDataSplit == null))
                {
                    this.mDataSplit = new DataSplit1(this);
                }
                return this.mDataSplit;
            }
        }
        
        public FindIndex FindIndex
        {
            get
            {
                if ((this.mFindIndex == null))
                {
                    this.mFindIndex = new FindIndex(this);
                }
                return this.mFindIndex;
            }
        }
        
        public Replace Replace
        {
            get
            {
                if ((this.mReplace == null))
                {
                    this.mReplace = new Replace(this);
                }
                return this.mReplace;
            }
        }
        #endregion
        
        #region Fields
        private MultiAssign1 mMultiAssign;
        
        private DataMerge1 mDataMerge;
        
        private BaseConvert1 mBaseConvert;
        
        private CaseConvert1 mCaseConvert;
        
        private DataSplit1 mDataSplit;
        
        private FindIndex mFindIndex;
        
        private Replace mReplace;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class MultiAssign1 : WpfListItem
    {
        
        public MultiAssign1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Assign";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage AssignImage
        {
            get
            {
                if ((this.mAssignImage == null))
                {
                    this.mAssignImage = new WpfImage(this);
                    #region Search Criteria
                    this.mAssignImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Assign";
                    this.mAssignImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mAssignImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mAssignImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DataMerge1 : WpfListItem
    {
        
        public DataMerge1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Data Merge";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage DataMergeImage
        {
            get
            {
                if ((this.mDataMergeImage == null))
                {
                    this.mDataMergeImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDataMergeImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Data Merge";
                    this.mDataMergeImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDataMergeImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDataMergeImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class BaseConvert1 : WpfListItem
    {
        
        public BaseConvert1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Base Convert";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage BaseConvertImage
        {
            get
            {
                if ((this.mBaseConvertImage == null))
                {
                    this.mBaseConvertImage = new WpfImage(this);
                    #region Search Criteria
                    this.mBaseConvertImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Base Convert";
                    this.mBaseConvertImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mBaseConvertImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mBaseConvertImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class CaseConvert1 : WpfListItem
    {
        
        public CaseConvert1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Case Convert";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage CaseConvertImage
        {
            get
            {
                if ((this.mCaseConvertImage == null))
                {
                    this.mCaseConvertImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCaseConvertImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Case Convert";
                    this.mCaseConvertImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCaseConvertImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCaseConvertImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DataSplit1 : WpfListItem
    {
        
        public DataSplit1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Data Split";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage DataSplitImage
        {
            get
            {
                if ((this.mDataSplitImage == null))
                {
                    this.mDataSplitImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDataSplitImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Data Split";
                    this.mDataSplitImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDataSplitImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDataSplitImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class FindIndex : WpfListItem
    {
        
        public FindIndex(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Find Index";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage FindIndexImage
        {
            get
            {
                if ((this.mFindIndexImage == null))
                {
                    this.mFindIndexImage = new WpfImage(this);
                    #region Search Criteria
                    this.mFindIndexImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Find Index";
                    this.mFindIndexImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mFindIndexImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mFindIndexImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Replace : WpfListItem
    {
        
        public Replace(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Replace";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage ReplaceImage
        {
            get
            {
                if ((this.mReplaceImage == null))
                {
                    this.mReplaceImage = new WpfImage(this);
                    #region Search Criteria
                    this.mReplaceImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Replace";
                    this.mReplaceImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mReplaceImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mReplaceImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Database : WpfGroup
    {
        
        public Database(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Database";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public MySQL MySQL
        {
            get
            {
                if ((this.mMySQL == null))
                {
                    this.mMySQL = new MySQL(this);
                }
                return this.mMySQL;
            }
        }
        
        public SQLBulkInsert1 SQLBulkInsert
        {
            get
            {
                if ((this.mSQLBulkInsert == null))
                {
                    this.mSQLBulkInsert = new SQLBulkInsert1(this);
                }
                return this.mSQLBulkInsert;
            }
        }
        
        public SQLServer SQLServer
        {
            get
            {
                if ((this.mSQLServer == null))
                {
                    this.mSQLServer = new SQLServer(this);
                }
                return this.mSQLServer;
            }
        }
        #endregion
        
        #region Fields
        private MySQL mMySQL;
        
        private SQLBulkInsert1 mSQLBulkInsert;
        
        private SQLServer mSQLServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class MySQL : WpfListItem
    {
        
        public MySQL(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "MySQL";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage MySQLImage
        {
            get
            {
                if ((this.mMySQLImage == null))
                {
                    this.mMySQLImage = new WpfImage(this);
                    #region Search Criteria
                    this.mMySQLImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "MySQL";
                    this.mMySQLImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mMySQLImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mMySQLImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SQLBulkInsert1 : WpfListItem
    {
        
        public SQLBulkInsert1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "SQL Bulk Insert";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage SQLBulkInsertImage
        {
            get
            {
                if ((this.mSQLBulkInsertImage == null))
                {
                    this.mSQLBulkInsertImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSQLBulkInsertImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "SQL Bulk Insert";
                    this.mSQLBulkInsertImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSQLBulkInsertImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSQLBulkInsertImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SQLServer : WpfListItem
    {
        
        public SQLServer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "SQL Server";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage SQLServerImage
        {
            get
            {
                if ((this.mSQLServerImage == null))
                {
                    this.mSQLServerImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSQLServerImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "SQL Server";
                    this.mSQLServerImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSQLServerImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSQLServerImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class FileAndFTP : WpfGroup
    {
        
        public FileAndFTP(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "File, FTP, FTPS & SFTP";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public Create Create
        {
            get
            {
                if ((this.mCreate == null))
                {
                    this.mCreate = new Create(this);
                }
                return this.mCreate;
            }
        }
        
        public Copy Copy
        {
            get
            {
                if ((this.mCopy == null))
                {
                    this.mCopy = new Copy(this);
                }
                return this.mCopy;
            }
        }
        
        public Delete Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new Delete(this);
                }
                return this.mDelete;
            }
        }
        
        public Move Move
        {
            get
            {
                if ((this.mMove == null))
                {
                    this.mMove = new Move(this);
                }
                return this.mMove;
            }
        }
        
        public ReadFolder ReadFolder
        {
            get
            {
                if ((this.mReadFolder == null))
                {
                    this.mReadFolder = new ReadFolder(this);
                }
                return this.mReadFolder;
            }
        }
        
        public ReadFile ReadFile
        {
            get
            {
                if ((this.mReadFile == null))
                {
                    this.mReadFile = new ReadFile(this);
                }
                return this.mReadFile;
            }
        }
        
        public WriteFile WriteFile
        {
            get
            {
                if ((this.mWriteFile == null))
                {
                    this.mWriteFile = new WriteFile(this);
                }
                return this.mWriteFile;
            }
        }
        
        public Rename Rename
        {
            get
            {
                if ((this.mRename == null))
                {
                    this.mRename = new Rename(this);
                }
                return this.mRename;
            }
        }
        
        public UnZip UnZip
        {
            get
            {
                if ((this.mUnZip == null))
                {
                    this.mUnZip = new UnZip(this);
                }
                return this.mUnZip;
            }
        }
        
        public Zip Zip
        {
            get
            {
                if ((this.mZip == null))
                {
                    this.mZip = new Zip(this);
                }
                return this.mZip;
            }
        }
        #endregion
        
        #region Fields
        private Create mCreate;
        
        private Copy mCopy;
        
        private Delete mDelete;
        
        private Move mMove;
        
        private ReadFolder mReadFolder;
        
        private ReadFile mReadFile;
        
        private WriteFile mWriteFile;
        
        private Rename mRename;
        
        private UnZip mUnZip;
        
        private Zip mZip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Create : WpfListItem
    {
        
        public Create(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Create";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage CreateImage
        {
            get
            {
                if ((this.mCreateImage == null))
                {
                    this.mCreateImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCreateImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Create";
                    this.mCreateImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCreateImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCreateImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Copy : WpfListItem
    {
        
        public Copy(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Copy";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage CopyImage
        {
            get
            {
                if ((this.mCopyImage == null))
                {
                    this.mCopyImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCopyImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Copy";
                    this.mCopyImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCopyImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCopyImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Delete : WpfListItem
    {
        
        public Delete(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Delete";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage DeleteImage
        {
            get
            {
                if ((this.mDeleteImage == null))
                {
                    this.mDeleteImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Delete";
                    this.mDeleteImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDeleteImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDeleteImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Move : WpfListItem
    {
        
        public Move(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Move";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage MoveImage
        {
            get
            {
                if ((this.mMoveImage == null))
                {
                    this.mMoveImage = new WpfImage(this);
                    #region Search Criteria
                    this.mMoveImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Move";
                    this.mMoveImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mMoveImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mMoveImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ReadFolder : WpfListItem
    {
        
        public ReadFolder(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Read Folder";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage ReadFolderImage
        {
            get
            {
                if ((this.mReadFolderImage == null))
                {
                    this.mReadFolderImage = new WpfImage(this);
                    #region Search Criteria
                    this.mReadFolderImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Read Folder";
                    this.mReadFolderImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mReadFolderImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mReadFolderImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ReadFile : WpfListItem
    {
        
        public ReadFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Read File";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage ReadFileImage
        {
            get
            {
                if ((this.mReadFileImage == null))
                {
                    this.mReadFileImage = new WpfImage(this);
                    #region Search Criteria
                    this.mReadFileImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Read File";
                    this.mReadFileImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mReadFileImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mReadFileImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class WriteFile : WpfListItem
    {
        
        public WriteFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Write File";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage WriteFileImage
        {
            get
            {
                if ((this.mWriteFileImage == null))
                {
                    this.mWriteFileImage = new WpfImage(this);
                    #region Search Criteria
                    this.mWriteFileImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Write File";
                    this.mWriteFileImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mWriteFileImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mWriteFileImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Rename : WpfListItem
    {
        
        public Rename(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Rename";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage RenameImage
        {
            get
            {
                if ((this.mRenameImage == null))
                {
                    this.mRenameImage = new WpfImage(this);
                    #region Search Criteria
                    this.mRenameImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Rename";
                    this.mRenameImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mRenameImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mRenameImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UnZip : WpfListItem
    {
        
        public UnZip(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "UnZip";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage UnZipImage
        {
            get
            {
                if ((this.mUnZipImage == null))
                {
                    this.mUnZipImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUnZipImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "UnZip";
                    this.mUnZipImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mUnZipImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUnZipImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Zip : WpfListItem
    {
        
        public Zip(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Zip";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage ZipImage
        {
            get
            {
                if ((this.mZipImage == null))
                {
                    this.mZipImage = new WpfImage(this);
                    #region Search Criteria
                    this.mZipImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Zip";
                    this.mZipImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mZipImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mZipImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class HTTPWebMethods : WpfGroup
    {
        
        public HTTPWebMethods(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "HTTP Web Methods";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public DELETE1 DELETE
        {
            get
            {
                if ((this.mDELETE == null))
                {
                    this.mDELETE = new DELETE1(this);
                }
                return this.mDELETE;
            }
        }
        
        public GET GET
        {
            get
            {
                if ((this.mGET == null))
                {
                    this.mGET = new GET(this);
                }
                return this.mGET;
            }
        }
        
        public POST POST
        {
            get
            {
                if ((this.mPOST == null))
                {
                    this.mPOST = new POST(this);
                }
                return this.mPOST;
            }
        }
        
        public PUT PUT
        {
            get
            {
                if ((this.mPUT == null))
                {
                    this.mPUT = new PUT(this);
                }
                return this.mPUT;
            }
        }
        #endregion
        
        #region Fields
        private DELETE1 mDELETE;
        
        private GET mGET;
        
        private POST mPOST;
        
        private PUT mPUT;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DELETE1 : WpfListItem
    {
        
        public DELETE1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "DELETE";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage DELETEImage
        {
            get
            {
                if ((this.mDELETEImage == null))
                {
                    this.mDELETEImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDELETEImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DELETE";
                    this.mDELETEImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDELETEImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDELETEImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class GET : WpfListItem
    {
        
        public GET(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "GET";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage GETImage
        {
            get
            {
                if ((this.mGETImage == null))
                {
                    this.mGETImage = new WpfImage(this);
                    #region Search Criteria
                    this.mGETImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "GET";
                    this.mGETImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mGETImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mGETImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class POST : WpfListItem
    {
        
        public POST(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "POST";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage POSTImage
        {
            get
            {
                if ((this.mPOSTImage == null))
                {
                    this.mPOSTImage = new WpfImage(this);
                    #region Search Criteria
                    this.mPOSTImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "POST";
                    this.mPOSTImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mPOSTImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mPOSTImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class PUT : WpfListItem
    {
        
        public PUT(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "PUT";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage PUTImage
        {
            get
            {
                if ((this.mPUTImage == null))
                {
                    this.mPUTImage = new WpfImage(this);
                    #region Search Criteria
                    this.mPUTImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "PUT";
                    this.mPUTImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mPUTImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mPUTImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class LoopTools : WpfGroup
    {
        
        public LoopTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Loop Constructs";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public ForEach ForEach
        {
            get
            {
                if ((this.mForEach == null))
                {
                    this.mForEach = new ForEach(this);
                }
                return this.mForEach;
            }
        }
        #endregion
        
        #region Fields
        private ForEach mForEach;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ForEach : WpfListItem
    {
        
        public ForEach(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "ForEach";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage ForEachImage
        {
            get
            {
                if ((this.mForEachImage == null))
                {
                    this.mForEachImage = new WpfImage(this);
                    #region Search Criteria
                    this.mForEachImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "ForEach";
                    this.mForEachImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mForEachImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mForEachImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class RecordsetTools : WpfGroup
    {
        
        public RecordsetTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Recordset";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public Length Length
        {
            get
            {
                if ((this.mLength == null))
                {
                    this.mLength = new Length(this);
                }
                return this.mLength;
            }
        }
        
        public FindRecords FindRecords
        {
            get
            {
                if ((this.mFindRecords == null))
                {
                    this.mFindRecords = new FindRecords(this);
                }
                return this.mFindRecords;
            }
        }
        
        public Delete2 Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new Delete2(this);
                }
                return this.mDelete;
            }
        }
        
        public Sort Sort
        {
            get
            {
                if ((this.mSort == null))
                {
                    this.mSort = new Sort(this);
                }
                return this.mSort;
            }
        }
        
        public Count Count
        {
            get
            {
                if ((this.mCount == null))
                {
                    this.mCount = new Count(this);
                }
                return this.mCount;
            }
        }
        
        public UniqueRecords UniqueRecords
        {
            get
            {
                if ((this.mUniqueRecords == null))
                {
                    this.mUniqueRecords = new UniqueRecords(this);
                }
                return this.mUniqueRecords;
            }
        }
        #endregion
        
        #region Fields
        private Length mLength;
        
        private FindRecords mFindRecords;
        
        private Delete2 mDelete;
        
        private Sort mSort;
        
        private Count mCount;
        
        private UniqueRecords mUniqueRecords;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Length : WpfListItem
    {
        
        public Length(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Length";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage LengthImage
        {
            get
            {
                if ((this.mLengthImage == null))
                {
                    this.mLengthImage = new WpfImage(this);
                    #region Search Criteria
                    this.mLengthImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Length";
                    this.mLengthImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mLengthImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mLengthImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class FindRecords : WpfListItem
    {
        
        public FindRecords(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Find Records";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage FindRecordsImage
        {
            get
            {
                if ((this.mFindRecordsImage == null))
                {
                    this.mFindRecordsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mFindRecordsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Find Records";
                    this.mFindRecordsImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mFindRecordsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mFindRecordsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Delete2 : WpfListItem
    {
        
        public Delete2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Delete";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage DeleteImage
        {
            get
            {
                if ((this.mDeleteImage == null))
                {
                    this.mDeleteImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Delete";
                    this.mDeleteImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDeleteImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDeleteImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Sort : WpfListItem
    {
        
        public Sort(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Sort";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage SortImage
        {
            get
            {
                if ((this.mSortImage == null))
                {
                    this.mSortImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSortImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Sort";
                    this.mSortImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSortImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSortImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Count : WpfListItem
    {
        
        public Count(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Count";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage CountImage
        {
            get
            {
                if ((this.mCountImage == null))
                {
                    this.mCountImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCountImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Count";
                    this.mCountImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCountImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCountImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UniqueRecords : WpfListItem
    {
        
        public UniqueRecords(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Unique Records";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage UniqueRecordsImage
        {
            get
            {
                if ((this.mUniqueRecordsImage == null))
                {
                    this.mUniqueRecordsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUniqueRecordsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Unique Records";
                    this.mUniqueRecordsImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mUniqueRecordsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUniqueRecordsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ResourceTools : WpfGroup
    {
        
        public ResourceTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Resources";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public DotNetDLLConnector DotNetDLLConnector
        {
            get
            {
                if ((this.mDotNetDLLConnector == null))
                {
                    this.mDotNetDLLConnector = new DotNetDLLConnector(this);
                }
                return this.mDotNetDLLConnector;
            }
        }
        
        public Service Service
        {
            get
            {
                if ((this.mService == null))
                {
                    this.mService = new Service(this);
                }
                return this.mService;
            }
        }
        #endregion
        
        #region Fields
        private DotNetDLLConnector mDotNetDLLConnector;
        
        private Service mService;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DotNetDLLConnector : WpfListItem
    {
        
        public DotNetDLLConnector(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "DotNet DLL Connector";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage DotNetDLLConnectorImage
        {
            get
            {
                if ((this.mDotNetDLLConnectorImage == null))
                {
                    this.mDotNetDLLConnectorImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDotNetDLLConnectorImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DotNet DLL Connector";
                    this.mDotNetDLLConnectorImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDotNetDLLConnectorImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDotNetDLLConnectorImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Service : WpfListItem
    {
        
        public Service(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Service";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage ServiceImage
        {
            get
            {
                if ((this.mServiceImage == null))
                {
                    this.mServiceImage = new WpfImage(this);
                    #region Search Criteria
                    this.mServiceImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Service";
                    this.mServiceImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mServiceImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mServiceImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ScriptingTools : WpfGroup
    {
        
        public ScriptingTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Scripting";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public CMDScript CMDScript
        {
            get
            {
                if ((this.mCMDScript == null))
                {
                    this.mCMDScript = new CMDScript(this);
                }
                return this.mCMDScript;
            }
        }
        
        public Script Script
        {
            get
            {
                if ((this.mScript == null))
                {
                    this.mScript = new Script(this);
                }
                return this.mScript;
            }
        }
        #endregion
        
        #region Fields
        private CMDScript mCMDScript;
        
        private Script mScript;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class CMDScript : WpfListItem
    {
        
        public CMDScript(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "CMD Script";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage CMDScriptImage
        {
            get
            {
                if ((this.mCMDScriptImage == null))
                {
                    this.mCMDScriptImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCMDScriptImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "CMD Script";
                    this.mCMDScriptImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCMDScriptImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCMDScriptImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Script : WpfListItem
    {
        
        public Script(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Script";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage ScriptImage
        {
            get
            {
                if ((this.mScriptImage == null))
                {
                    this.mScriptImage = new WpfImage(this);
                    #region Search Criteria
                    this.mScriptImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Script";
                    this.mScriptImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mScriptImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mScriptImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SharepointTools : WpfGroup
    {
        
        public SharepointTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Sharepoint";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public CreateListItems CreateListItems
        {
            get
            {
                if ((this.mCreateListItems == null))
                {
                    this.mCreateListItems = new CreateListItems(this);
                }
                return this.mCreateListItems;
            }
        }
        
        public DeleteListItems DeleteListItems
        {
            get
            {
                if ((this.mDeleteListItems == null))
                {
                    this.mDeleteListItems = new DeleteListItems(this);
                }
                return this.mDeleteListItems;
            }
        }
        
        public ReadListItems ReadListItems
        {
            get
            {
                if ((this.mReadListItems == null))
                {
                    this.mReadListItems = new ReadListItems(this);
                }
                return this.mReadListItems;
            }
        }
        
        public UpdateListItems UpdateListItems
        {
            get
            {
                if ((this.mUpdateListItems == null))
                {
                    this.mUpdateListItems = new UpdateListItems(this);
                }
                return this.mUpdateListItems;
            }
        }
        #endregion
        
        #region Fields
        private CreateListItems mCreateListItems;
        
        private DeleteListItems mDeleteListItems;
        
        private ReadListItems mReadListItems;
        
        private UpdateListItems mUpdateListItems;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class CreateListItems : WpfListItem
    {
        
        public CreateListItems(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Create List Item(s)";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage CreateListItemsImage
        {
            get
            {
                if ((this.mCreateListItemsImage == null))
                {
                    this.mCreateListItemsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCreateListItemsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Create List Item(s)";
                    this.mCreateListItemsImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCreateListItemsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCreateListItemsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DeleteListItems : WpfListItem
    {
        
        public DeleteListItems(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Delete List Item(s)";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage DeleteListItemsImage
        {
            get
            {
                if ((this.mDeleteListItemsImage == null))
                {
                    this.mDeleteListItemsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteListItemsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Delete List Item(s)";
                    this.mDeleteListItemsImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDeleteListItemsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDeleteListItemsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class ReadListItems : WpfListItem
    {
        
        public ReadListItems(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Read List Item(s)";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage ReadListItemsImage
        {
            get
            {
                if ((this.mReadListItemsImage == null))
                {
                    this.mReadListItemsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mReadListItemsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Read List Item(s)";
                    this.mReadListItemsImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mReadListItemsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mReadListItemsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UpdateListItems : WpfListItem
    {
        
        public UpdateListItems(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Update List Item(s)";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage UpdateListItemsImage
        {
            get
            {
                if ((this.mUpdateListItemsImage == null))
                {
                    this.mUpdateListItemsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUpdateListItemsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Update List Item(s)";
                    this.mUpdateListItemsImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mUpdateListItemsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUpdateListItemsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class StorageTools : WpfGroup
    {
        
        public StorageTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Storage";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public DropboxDownload DropboxDownload
        {
            get
            {
                if ((this.mDropboxDownload == null))
                {
                    this.mDropboxDownload = new DropboxDownload(this);
                }
                return this.mDropboxDownload;
            }
        }
        
        public DropboxUpload DropboxUpload
        {
            get
            {
                if ((this.mDropboxUpload == null))
                {
                    this.mDropboxUpload = new DropboxUpload(this);
                }
                return this.mDropboxUpload;
            }
        }
        
        public SelectandApply SelectandApply
        {
            get
            {
                if ((this.mSelectandApply == null))
                {
                    this.mSelectandApply = new SelectandApply(this);
                }
                return this.mSelectandApply;
            }
        }
        #endregion
        
        #region Fields
        private DropboxDownload mDropboxDownload;
        
        private DropboxUpload mDropboxUpload;
        
        private SelectandApply mSelectandApply;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DropboxDownload : WpfListItem
    {
        
        public DropboxDownload(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Dropbox Download";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage DropboxDownloadImage
        {
            get
            {
                if ((this.mDropboxDownloadImage == null))
                {
                    this.mDropboxDownloadImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDropboxDownloadImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Dropbox Download";
                    this.mDropboxDownloadImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDropboxDownloadImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDropboxDownloadImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DropboxUpload : WpfListItem
    {
        
        public DropboxUpload(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Dropbox Upload";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage DropboxUploadImage
        {
            get
            {
                if ((this.mDropboxUploadImage == null))
                {
                    this.mDropboxUploadImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDropboxUploadImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Dropbox Upload";
                    this.mDropboxUploadImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDropboxUploadImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDropboxUploadImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SelectandApply : WpfListItem
    {
        
        public SelectandApply(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Select and apply";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage SelectandApplyImage
        {
            get
            {
                if ((this.mSelectandApplyImage == null))
                {
                    this.mSelectandApplyImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSelectandApplyImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Select and apply";
                    this.mSelectandApplyImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSelectandApplyImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSelectandApplyImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class UtilityTools : WpfGroup
    {
        
        public UtilityTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Utility";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public CreateJSON1 CreateJSON
        {
            get
            {
                if ((this.mCreateJSON == null))
                {
                    this.mCreateJSON = new CreateJSON1(this);
                }
                return this.mCreateJSON;
            }
        }
        
        public Calculate Calculate
        {
            get
            {
                if ((this.mCalculate == null))
                {
                    this.mCalculate = new Calculate(this);
                }
                return this.mCalculate;
            }
        }
        
        public DateTime DateTime
        {
            get
            {
                if ((this.mDateTime == null))
                {
                    this.mDateTime = new DateTime(this);
                }
                return this.mDateTime;
            }
        }
        
        public DateTimeDifference DateTimeDifference
        {
            get
            {
                if ((this.mDateTimeDifference == null))
                {
                    this.mDateTimeDifference = new DateTimeDifference(this);
                }
                return this.mDateTimeDifference;
            }
        }
        
        public SysInfo SysInfo
        {
            get
            {
                if ((this.mSysInfo == null))
                {
                    this.mSysInfo = new SysInfo(this);
                }
                return this.mSysInfo;
            }
        }
        
        public FormatNumber FormatNumber
        {
            get
            {
                if ((this.mFormatNumber == null))
                {
                    this.mFormatNumber = new FormatNumber(this);
                }
                return this.mFormatNumber;
            }
        }
        
        public Random Random
        {
            get
            {
                if ((this.mRandom == null))
                {
                    this.mRandom = new Random(this);
                }
                return this.mRandom;
            }
        }
        
        public Email Email
        {
            get
            {
                if ((this.mEmail == null))
                {
                    this.mEmail = new Email(this);
                }
                return this.mEmail;
            }
        }
        
        public WebRequest WebRequest
        {
            get
            {
                if ((this.mWebRequest == null))
                {
                    this.mWebRequest = new WebRequest(this);
                }
                return this.mWebRequest;
            }
        }
        
        public Comment Comment
        {
            get
            {
                if ((this.mComment == null))
                {
                    this.mComment = new Comment(this);
                }
                return this.mComment;
            }
        }
        
        public XPath1 XPath
        {
            get
            {
                if ((this.mXPath == null))
                {
                    this.mXPath = new XPath1(this);
                }
                return this.mXPath;
            }
        }
        #endregion
        
        #region Fields
        private CreateJSON1 mCreateJSON;
        
        private Calculate mCalculate;
        
        private DateTime mDateTime;
        
        private DateTimeDifference mDateTimeDifference;
        
        private SysInfo mSysInfo;
        
        private FormatNumber mFormatNumber;
        
        private Random mRandom;
        
        private Email mEmail;
        
        private WebRequest mWebRequest;
        
        private Comment mComment;
        
        private XPath1 mXPath;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class CreateJSON1 : WpfListItem
    {
        
        public CreateJSON1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Create JSON";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage CreateJSONImage
        {
            get
            {
                if ((this.mCreateJSONImage == null))
                {
                    this.mCreateJSONImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCreateJSONImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Create JSON";
                    this.mCreateJSONImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCreateJSONImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCreateJSONImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Calculate : WpfListItem
    {
        
        public Calculate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Calculate";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage CalculateImage
        {
            get
            {
                if ((this.mCalculateImage == null))
                {
                    this.mCalculateImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCalculateImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Calculate";
                    this.mCalculateImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCalculateImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCalculateImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DateTime : WpfListItem
    {
        
        public DateTime(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Date Time";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage DateTimeImage
        {
            get
            {
                if ((this.mDateTimeImage == null))
                {
                    this.mDateTimeImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDateTimeImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Date Time";
                    this.mDateTimeImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDateTimeImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDateTimeImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class DateTimeDifference : WpfListItem
    {
        
        public DateTimeDifference(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Date Time Diff";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage DateTimeDifferenceImage
        {
            get
            {
                if ((this.mDateTimeDifferenceImage == null))
                {
                    this.mDateTimeDifferenceImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDateTimeDifferenceImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Date Time Diff";
                    this.mDateTimeDifferenceImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mDateTimeDifferenceImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDateTimeDifferenceImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class SysInfo : WpfListItem
    {
        
        public SysInfo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Sys Info";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage SysInfoImage
        {
            get
            {
                if ((this.mSysInfoImage == null))
                {
                    this.mSysInfoImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSysInfoImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Sys Info";
                    this.mSysInfoImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mSysInfoImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSysInfoImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class FormatNumber : WpfListItem
    {
        
        public FormatNumber(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Format Number";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage FormatNumberImage
        {
            get
            {
                if ((this.mFormatNumberImage == null))
                {
                    this.mFormatNumberImage = new WpfImage(this);
                    #region Search Criteria
                    this.mFormatNumberImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Format Number";
                    this.mFormatNumberImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mFormatNumberImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mFormatNumberImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Random : WpfListItem
    {
        
        public Random(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Random";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage RandomImage
        {
            get
            {
                if ((this.mRandomImage == null))
                {
                    this.mRandomImage = new WpfImage(this);
                    #region Search Criteria
                    this.mRandomImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Random";
                    this.mRandomImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mRandomImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mRandomImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Email : WpfListItem
    {
        
        public Email(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Email";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage EmailImage
        {
            get
            {
                if ((this.mEmailImage == null))
                {
                    this.mEmailImage = new WpfImage(this);
                    #region Search Criteria
                    this.mEmailImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Email";
                    this.mEmailImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mEmailImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mEmailImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class WebRequest : WpfListItem
    {
        
        public WebRequest(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Web Request";
            #endregion
        }
        
        #region Properties
        public WpfImage WebRequestImage
        {
            get
            {
                if ((this.mWebRequestImage == null))
                {
                    this.mWebRequestImage = new WpfImage(this);
                    #region Search Criteria
                    this.mWebRequestImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Web Request";
                    this.mWebRequestImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mWebRequestImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mWebRequestImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class Comment : WpfListItem
    {
        
        public Comment(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Comment";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage CommentImage
        {
            get
            {
                if ((this.mCommentImage == null))
                {
                    this.mCommentImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCommentImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Comment";
                    this.mCommentImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mCommentImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCommentImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class XPath1 : WpfListItem
    {
        
        public XPath1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "XPath";
            this.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
            #endregion
        }
        
        #region Properties
        public WpfImage XPathImage
        {
            get
            {
                if ((this.mXPathImage == null))
                {
                    this.mXPathImage = new WpfImage(this);
                    #region Search Criteria
                    this.mXPathImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "XPath";
                    this.mXPathImage.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mXPathImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mXPathImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class MessageBoxWindow : WpfWindow
    {
        
        public MessageBoxWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "WarewolfMessageBox";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public YesButton YesButton
        {
            get
            {
                if ((this.mYesButton == null))
                {
                    this.mYesButton = new YesButton(this);
                }
                return this.mYesButton;
            }
        }
        
        public NOButton NOButton
        {
            get
            {
                if ((this.mNOButton == null))
                {
                    this.mNOButton = new NOButton(this);
                }
                return this.mNOButton;
            }
        }
        
        public CancelButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new CancelButton(this);
                }
                return this.mCancelButton;
            }
        }
        #endregion
        
        #region Fields
        private YesButton mYesButton;
        
        private NOButton mNOButton;
        
        private CancelButton mCancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class YesButton : WpfButton
    {
        
        public YesButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "Yes";
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public WpfText YesButtonText
        {
            get
            {
                if ((this.mYesButtonText == null))
                {
                    this.mYesButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mYesButtonText.SearchProperties[WpfText.PropertyNames.Name] = "Yes";
                    this.mYesButtonText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mYesButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mYesButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class NOButton : WpfButton
    {
        
        public NOButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "No";
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public WpfText NOButtonText
        {
            get
            {
                if ((this.mNOButtonText == null))
                {
                    this.mNOButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mNOButtonText.SearchProperties[WpfText.PropertyNames.Name] = "No";
                    this.mNOButtonText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mNOButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mNOButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.40629.0")]
    public class CancelButton : WpfButton
    {
        
        public CancelButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "Cancel";
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public WpfText CancelButtonText
        {
            get
            {
                if ((this.mCancelButtonText == null))
                {
                    this.mCancelButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mCancelButtonText.SearchProperties[WpfText.PropertyNames.Name] = "Cancel";
                    this.mCancelButtonText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mCancelButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mCancelButtonText;
        #endregion
    }
}
