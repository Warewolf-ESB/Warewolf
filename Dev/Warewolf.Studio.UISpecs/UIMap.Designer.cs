// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Warewolf.Studio.UISpecs
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Assert_Assign_Large_View_Exists_OnDesignSurface - Use 'Assert_Assign_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Assign_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom multiAssign = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign;
            #endregion

            // Verify that the 'Exists' property of 'DsfMultiAssignActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Assign_Large_View_Exists_OnDesignSurfaceExpectedValues.MultiAssignExists, multiAssign.Exists, "Assign tool large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Assign_Large_View_Row1_Variable_Textbox_Exists - Use 'Assert_Assign_Large_View_Row1_Variable_Textbox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Assign_Large_View_Row1_Variable_Textbox_Exists()
        {
            #region Variable Declarations
            WpfEdit textBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.LargeView.DataGrid.Row1.VariableCell.TextBox;
            #endregion

            // Verify that the 'Exists' property of 'UI__Row1_FieldName_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_Assign_Large_View_Row1_Variable_Textbox_ExistsExpectedValues.TextBoxExists, textBox.Exists, "Assign large view row 1 variable textbox does not exist");
        }
        
        /// <summary>
        /// Assert_Assign_Large_View_Row1_Variable_Textbox_Text_Equals_SomeVariable - Use 'Assert_Assign_Large_View_Row1_Variable_Textbox_Text_Equals_SomeVariableExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Assign_Large_View_Row1_Variable_Textbox_Text_Equals_SomeVariable()
        {
            #region Variable Declarations
            WpfEdit textBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.LargeView.DataGrid.Row1.VariableCell.TextBox;
            #endregion

            // Verify that the 'Text' property of 'UI__Row1_FieldName_AutoID' text box equals '[[SomeVariable]]'
            Assert.AreEqual(this.Assert_Assign_Large_View_Row1_Variable_Textbox_Text_Equals_SomeVariableExpectedValues.TextBoxText, textBox.Text, "Assign large view row1 variable textbox text does not equal \"[[SomeVariable]]\"");
        }
        
        /// <summary>
        /// Assert_Assign_Object_Large_View_on_the_Design_Surface_Add_Row_Message_Exists - Use 'Assert_Assign_Object_Large_View_on_the_Design_Surface_Add_Row_Message_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Assign_Object_Large_View_on_the_Design_Surface_Add_Row_Message_Exists()
        {
            #region Variable Declarations
            WpfText addRowsMessage = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.LargeView.AddRowsMessage;
            #endregion

            // Verify that the 'Exists' property of 'Type in the empty rows to add new rows.' label equals 'True'
            Assert.AreEqual(this.Assert_Assign_Object_Large_View_on_the_Design_Surface_Add_Row_Message_ExistsExpectedValues.AddRowsMessageExists, addRowsMessage.Exists, "Add new rows message does not exist on Assign Object large view on the design sur" +
                    "face");
        }
        
        /// <summary>
        /// Assert_Assign_Object_Large_View_on_the_Design_Surface_Insert_Delete_Row_Message_Exists - Use 'Assert_Assign_Object_Large_View_on_the_Design_Surface_Insert_Delete_Row_Message_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Assign_Object_Large_View_on_the_Design_Surface_Insert_Delete_Row_Message_Exists()
        {
            #region Variable Declarations
            WpfText insertDeleteRowsMessage = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.LargeView.InsertDeleteRowsMessage;
            #endregion

            // Verify that the 'Exists' property of 'Right click to insert or delete rows.' label equals 'True'
            Assert.AreEqual(this.Assert_Assign_Object_Large_View_on_the_Design_Surface_Insert_Delete_Row_Message_ExistsExpectedValues.InsertDeleteRowsMessageExists, insertDeleteRowsMessage.Exists, "Insert or delete rows message on Assign Object large view on the design surface d" +
                    "oes not exist");
        }
        
        /// <summary>
        /// Assert_Assign_Object_Large_View_Row1_Value_Textbox_Exists - Use 'Assert_Assign_Object_Large_View_Row1_Value_Textbox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Assign_Object_Large_View_Row1_Value_Textbox_Exists()
        {
            #region Variable Declarations
            WpfEdit valueTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.LargeView.DataGrid.Row1.ValueCell.ValueTextbox;
            #endregion

            // Verify that the 'Exists' property of 'UI__Row1_FieldValue_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_Assign_Object_Large_View_Row1_Value_Textbox_ExistsExpectedValues.ValueTextboxExists, valueTextbox.Exists, "Row 1 variable textbox does not exist on Assign Object large view on the design s" +
                    "urface");
        }
        
        /// <summary>
        /// Assert_Assign_Object_Large_View_Row1_Variable_Textbox - Use 'Assert_Assign_Object_Large_View_Row1_Variable_TextboxExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Assign_Object_Large_View_Row1_Variable_Textbox()
        {
            #region Variable Declarations
            WpfEdit variableTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.LargeView.DataGrid.Row1.VariableCell.VariableTextbox;
            #endregion

            // Verify that the 'Exists' property of 'UI__Row1_FieldName_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_Assign_Object_Large_View_Row1_Variable_TextboxExpectedValues.VariableTextboxExists, variableTextbox.Exists, "Variable textbox on row 1 of Assign Object large view does not exist");
        }
        
        /// <summary>
        /// Assert_Assign_Object_Large_View_Row2_Value_Textbox_Exists - Use 'Assert_Assign_Object_Large_View_Row2_Value_Textbox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Assign_Object_Large_View_Row2_Value_Textbox_Exists()
        {
            #region Variable Declarations
            WpfEdit valueTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.LargeView.DataGrid.Row2.ValueCell.ValueTextbox;
            #endregion

            // Verify that the 'Exists' property of 'UI__Row2_FieldValue_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_Assign_Object_Large_View_Row2_Value_Textbox_ExistsExpectedValues.ValueTextboxExists, valueTextbox.Exists, "Row 2 value textbox does not exist on Assign Object large view on the design surf" +
                    "ace");
        }
        
        /// <summary>
        /// Assert_Assign_Object_Large_View_Row2_Variable_Textbox_Exists - Use 'Assert_Assign_Object_Large_View_Row2_Variable_Textbox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Assign_Object_Large_View_Row2_Variable_Textbox_Exists()
        {
            #region Variable Declarations
            WpfEdit variableTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.LargeView.DataGrid.Row2.VariableCell.VariableTextbox;
            #endregion

            // Verify that the 'Exists' property of 'UI__Row2_FieldName_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_Assign_Object_Large_View_Row2_Variable_Textbox_ExistsExpectedValues.VariableTextboxExists, variableTextbox.Exists, "Row 2 variable textbox does not exist on Assign Object large view on the design s" +
                    "urface");
        }
        
        /// <summary>
        /// Assert_Assign_Object_Row2_Value_Textbox_Exists - Use 'Assert_Assign_Object_Row2_Value_Textbox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Assign_Object_Row2_Value_Textbox_Exists()
        {
            #region Variable Declarations
            WpfEdit valueTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.SmallView.DataGrid.Row2.ValueCell.ValueTextbox;
            #endregion

            // Verify that the 'Exists' property of 'UI__Row2_FieldValue_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_Assign_Object_Row2_Value_Textbox_ExistsExpectedValues.ValueTextboxExists, valueTextbox.Exists, "Textbox on row 2 of assign object small view on the design surface does not exist" +
                    "");
        }
        
        /// <summary>
        /// Assert_Assign_Object_Row2_Variable_Textbox_Exists - Use 'Assert_Assign_Object_Row2_Variable_Textbox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Assign_Object_Row2_Variable_Textbox_Exists()
        {
            #region Variable Declarations
            WpfEdit variableTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.SmallView.DataGrid.Row2.VariableCell.VariableTextbox;
            #endregion

            // Verify that the 'Exists' property of 'UI_TextBox_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_Assign_Object_Row2_Variable_Textbox_ExistsExpectedValues.VariableTextboxExists, variableTextbox.Exists, "Text box on row 2 of Assign Object small view does not exist");
        }
        
        /// <summary>
        /// Assert_Assign_Object_Small_View_Exists_On_Design_Surface - Use 'Assert_Assign_Object_Small_View_Exists_On_Design_SurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Assign_Object_Small_View_Exists_On_Design_Surface()
        {
            #region Variable Declarations
            WpfCustom assignObject = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject;
            #endregion

            // Verify that the 'Exists' property of 'DsfMultiAssignObjectActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Assign_Object_Small_View_Exists_On_Design_SurfaceExpectedValues.AssignObjectExists, assignObject.Exists);
        }
        
        /// <summary>
        /// Assert_Assign_Object_Small_View_Row1_Value_Textbox - Use 'Assert_Assign_Object_Small_View_Row1_Value_TextboxExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Assign_Object_Small_View_Row1_Value_Textbox()
        {
            #region Variable Declarations
            WpfEdit valueTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.SmallView.DataGrid.Row1.ValueCell.ValueTextbox;
            #endregion

            // Verify that the 'Exists' property of 'UI__Row1_FieldValue_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_Assign_Object_Small_View_Row1_Value_TextboxExpectedValues.ValueTextboxExists, valueTextbox.Exists);
        }
        
        /// <summary>
        /// Assert_Assign_Object_Small_View_Row1_Variable_Textbox_Exists - Use 'Assert_Assign_Object_Small_View_Row1_Variable_Textbox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Assign_Object_Small_View_Row1_Variable_Textbox_Exists()
        {
            #region Variable Declarations
            WpfText variableTextboxFloatingText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.SmallView.DataGrid.Row1.VariableCell.VariableTextbox.VariableTextboxFloatingText;
            #endregion

            // Verify that the 'Exists' property of '[[Variable1]]' label equals 'True'
            Assert.AreEqual(this.Assert_Assign_Object_Small_View_Row1_Variable_Textbox_ExistsExpectedValues.VariableTextboxFloatingTextExists, variableTextboxFloatingText.Exists);
        }
        
        /// <summary>
        /// Assert_Assign_QVI_Large_View_Exists_OnDesignSurface - Use 'Assert_Assign_QVI_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Assign_QVI_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom quickVariableInputContent = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.QuickVariableInputContent;
            #endregion

            // Verify that the 'Exists' property of 'QuickVariableInputContent' custom control equals 'True'
            Assert.AreEqual(this.Assert_Assign_QVI_Large_View_Exists_OnDesignSurfaceExpectedValues.QuickVariableInputContentExists, quickVariableInputContent.Exists, "QVI on assign is not open");
        }
        
        /// <summary>
        /// Assert_Assign_Small_View_Row1_Variable_Textbox_Exists - Use 'Assert_Assign_Small_View_Row1_Variable_Textbox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Assign_Small_View_Row1_Variable_Textbox_Exists()
        {
            #region Variable Declarations
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.SmallView.DataGrid.Row1.VariableCell.Textbox;
            #endregion

            // Verify that the 'Exists' property of 'UI_TextBox_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_Assign_Small_View_Row1_Variable_Textbox_ExistsExpectedValues.TextboxExists, textbox.Exists, "Assign small view row 1 variable textbox does not exist");
        }
        
        /// <summary>
        /// Assert_Assign_Small_View_Row1_Variable_Textbox_Text_is_SomeVariable - Use 'Assert_Assign_Small_View_Row1_Variable_Textbox_Text_is_SomeVariableExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Assign_Small_View_Row1_Variable_Textbox_Text_is_SomeVariable()
        {
            #region Variable Declarations
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.SmallView.DataGrid.Row1.VariableCell.Textbox;
            #endregion

            // Verify that the 'Text' property of 'UI_TextBox_AutoID' text box equals '[[SomeVariable]]'
            Assert.AreEqual(this.Assert_Assign_Small_View_Row1_Variable_Textbox_Text_is_SomeVariableExpectedValues.TextboxText, textbox.Text, "Assign small view row1 variable textbox does not contain text somevariable");
        }
        
        /// <summary>
        /// Assert_Base_Conversion_Exists_OnDesignSurface - Use 'Assert_Base_Conversion_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Base_Conversion_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom baseConvert = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert;
            #endregion

            // Verify that the 'Exists' property of 'DsfBaseConvertActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Base_Conversion_Exists_OnDesignSurfaceExpectedValues.BaseConvertExists, baseConvert.Exists, "Base Conversion on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurface - Use 'Assert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom baseConvert = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert;
            #endregion

            // Verify that the 'Exists' property of 'DsfBaseConvertActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues.BaseConvertExists, baseConvert.Exists, "Base Conversion QVI Window does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_Calculate_Exists_OnDesignSurface - Use 'Assert_Calculate_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Calculate_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom calculate = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate;
            #endregion

            // Verify that the 'Exists' property of 'DsfCalculateActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Calculate_Exists_OnDesignSurfaceExpectedValues.CalculateExists, calculate.Exists, "Calculate tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Case_Conversion_Exists_OnDesignSurface - Use 'Assert_Case_Conversion_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Case_Conversion_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom caseConvert = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CaseConvert;
            #endregion

            // Verify that the 'Exists' property of 'DsfCaseConvertActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Case_Conversion_Exists_OnDesignSurfaceExpectedValues.CaseConvertExists, caseConvert.Exists, "Case Conversion on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurface - Use 'Assert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom caseConvert = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CaseConvert;
            #endregion

            // Verify that the 'Exists' property of 'DsfCaseConvertActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues.CaseConvertExists, caseConvert.Exists, "Case Conversion QVI Window does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_Close_Button_Exists_TopRibbon - Use 'Assert_Close_Button_Exists_TopRibbonExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Close_Button_Exists_TopRibbon()
        {
            #region Variable Declarations
            WpfButton closeStudioButton = this.MainStudioWindow.CloseStudioButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_Close_Button_Exists_TopRibbonExpectedValues.CloseStudioButtonExists, closeStudioButton.Exists, "Close Button does not Exist in the Top Ribbon");
        }
        
        /// <summary>
        /// Assert_Close_Tab_Button_Exists - Use 'Assert_Close_Tab_Button_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Close_Tab_Button_Exists()
        {
            #region Variable Declarations
            WpfButton closeButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.CloseButton;
            #endregion

            // Verify that the 'Exists' property of 'closeBtn' custom control equals 'True'
            Assert.AreEqual(this.Assert_Close_Tab_Button_ExistsExpectedValues.CloseButtonExists, closeButton.Exists, "Close tab button does not exist");
        }
        
        /// <summary>
        /// Assert_CMD_Line_Exists_OnDesignSurface - Use 'Assert_CMD_Line_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_CMD_Line_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom executeCommandLine = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine;
            #endregion

            // Verify that the 'Exists' property of 'DsfExecuteCommandLineActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_CMD_Line_Exists_OnDesignSurfaceExpectedValues.ExecuteCommandLineExists, executeCommandLine.Exists, "CMD Line tool on the design surface tool does not exist");
        }
        
        /// <summary>
        /// Assert_CMD_Line_Large_View_Exists_OnDesignSurface - Use 'Assert_CMD_Line_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_CMD_Line_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom executeCommandLine = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine;
            #endregion

            // Verify that the 'Exists' property of 'DsfExecuteCommandLineActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_CMD_Line_Large_View_Exists_OnDesignSurfaceExpectedValues.ExecuteCommandLineExists, executeCommandLine.Exists, "CMD Line large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Comment_Exists_OnDesignSurface - Use 'Assert_Comment_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Comment_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom comment = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Comment;
            #endregion

            // Verify that the 'Exists' property of 'DsfCommentActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Comment_Exists_OnDesignSurfaceExpectedValues.CommentExists, comment.Exists, "Comment tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Connect_button_Destination_Server_Exists - Use 'Assert_Connect_button_Destination_Server_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Connect_button_Destination_Server_Exists()
        {
            #region Variable Declarations
            WpfButton connectDestinationButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.ConnectDestinationButton;
            #endregion

            // Verify that the 'Exists' property of 'UI_DestinationServerConnectbtn_AutoID' button equals 'True'
            Assert.AreEqual(this.Assert_Connect_button_Destination_Server_ExistsExpectedValues.ConnectDestinationButtonExists, connectDestinationButton.Exists, "Connect Button in Destination server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_Connect_Button_Source_Server_Exists - Use 'Assert_Connect_Button_Source_Server_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Connect_Button_Source_Server_Exists()
        {
            #region Variable Declarations
            WpfButton sourceConnectButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.SourceConnectButton;
            #endregion

            // Verify that the 'Exists' property of 'UI_SourceConnectServerbtn_AutoID' button equals 'True'
            Assert.AreEqual(this.Assert_Connect_Button_Source_Server_ExistsExpectedValues.SourceConnectButtonExists, sourceConnectButton.Exists, "Connect button in the Source server does not exist");
        }
        
        /// <summary>
        /// Assert_Connect_ConnectControl_Button_Exists_InExplorer - Use 'Assert_Connect_ConnectControl_Button_Exists_InExplorerExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Connect_ConnectControl_Button_Exists_InExplorer()
        {
            #region Variable Declarations
            WpfButton connectServerButton = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ConnectControl.ConnectServerButton;
            #endregion

            // Verify that the 'Exists' property of 'UI_ConnectServerBtn_AutoID' button equals 'True'
            Assert.AreEqual(this.Assert_Connect_ConnectControl_Button_Exists_InExplorerExpectedValues.ConnectServerButtonExists, connectServerButton.Exists, "Connect in Explorer does not exist");
        }
        
        /// <summary>
        /// Assert_Connect_Control_DestinationServer_Exists - Use 'Assert_Connect_Control_DestinationServer_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Connect_Control_DestinationServer_Exists()
        {
            #region Variable Declarations
            WpfButton connectControlDestination = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.ConnectControlDestination;
            #endregion

            // Verify that the 'Exists' property of 'ToggleButton' button equals 'True'
            Assert.AreEqual(this.Assert_Connect_Control_DestinationServer_ExistsExpectedValues.ConnectControlDestinationExists, connectControlDestination.Exists, "Destination Server connect control does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_Connect_Control_Exists_InExplorer - Use 'Assert_Connect_Control_Exists_InExplorerExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Connect_Control_Exists_InExplorer()
        {
            #region Variable Declarations
            WpfButton serverListComboBox = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ConnectControl.ServerComboBox.ServerListComboBox;
            #endregion

            // Verify that the 'Exists' property of 'ToggleButton' button equals 'True'
            Assert.AreEqual(this.Assert_Connect_Control_Exists_InExplorerExpectedValues.ServerListComboBoxExists, serverListComboBox.Exists, "Explorer connect control does not exist");
        }
        
        /// <summary>
        /// Assert_Connect_Control_SourceServer_Exists - Use 'Assert_Connect_Control_SourceServer_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Connect_Control_SourceServer_Exists()
        {
            #region Variable Declarations
            WpfCustom sourceConnectControl = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.SourceConnectControl;
            #endregion

            // Verify that the 'Exists' property of 'SourceConnectControl' custom control equals 'True'
            Assert.AreEqual(this.Assert_Connect_Control_SourceServer_ExistsExpectedValues.SourceConnectControlExists, sourceConnectControl.Exists, "Source Server connect control does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_Copy_Exists_OnDesignSurface - Use 'Assert_Copy_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Copy_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathCopy = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCopy;
            #endregion

            // Verify that the 'Exists' property of 'DsfPathCopy' custom control equals 'True'
            Assert.AreEqual(this.Assert_Copy_Exists_OnDesignSurfaceExpectedValues.PathCopyExists, pathCopy.Exists, "Copy on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Copy_Large_View_Exists_OnDesignSurface - Use 'Assert_Copy_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Copy_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathCopy = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCopy;
            #endregion

            // Verify that the 'Exists' property of 'DsfPathCopy' custom control equals 'True'
            Assert.AreEqual(this.Assert_Copy_Large_View_Exists_OnDesignSurfaceExpectedValues.PathCopyExists, pathCopy.Exists, "Copy Tool large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Count_Records_Exists_OnDesignSurface - Use 'Assert_Count_Records_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Count_Records_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom countRecordset = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CountRecordset;
            #endregion

            // Verify that the 'Exists' property of 'DsfCountRecordsetActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Count_Records_Exists_OnDesignSurfaceExpectedValues.CountRecordsetExists, countRecordset.Exists, "Count Records tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Create_Exists_OnDesignSurface - Use 'Assert_Create_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Create_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathCreate = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCreate;
            #endregion

            // Verify that the 'Exists' property of 'DsfPathCreate' custom control equals 'True'
            Assert.AreEqual(this.Assert_Create_Exists_OnDesignSurfaceExpectedValues.PathCreateExists, pathCreate.Exists, "Create tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Create_JSON_Exists_OnDesignSurface - Use 'Assert_Create_JSON_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Create_JSON_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom createJson = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson;
            #endregion

            // Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Create_JSON_Exists_OnDesignSurfaceExpectedValues.CreateJsonExists, createJson.Exists, "Create JSON tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Create_Path_Large_View_Exists_OnDesignSurface - Use 'Assert_Create_Path_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Create_Path_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathCreate = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCreate;
            #endregion

            // Verify that the 'Exists' property of 'DsfPathCreate' custom control equals 'True'
            Assert.AreEqual(this.Assert_Create_Path_Large_View_Exists_OnDesignSurfaceExpectedValues.PathCreateExists, pathCreate.Exists, "Creat Path large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Data_Connector_Exists_OnDesignSurface - Use 'Assert_Data_Connector_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Data_Connector_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom databaseConnector = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DatabaseConnector;
            #endregion

            // Verify that the 'Exists' property of 'DsfDatabaseActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Data_Connector_Exists_OnDesignSurfaceExpectedValues.DatabaseConnectorExists, databaseConnector.Exists, "Data Connector on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Data_Merge_Exists_OnDesignSurface - Use 'Assert_Data_Merge_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Data_Merge_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dataMerge = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge;
            #endregion

            // Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Data_Merge_Exists_OnDesignSurfaceExpectedValues.DataMergeExists, dataMerge.Exists, "Data Merge on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Data_Merge_Large_View_Exists_OnDesignSurface - Use 'Assert_Data_Merge_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Data_Merge_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dataMerge = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge;
            #endregion

            // Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Data_Merge_Large_View_Exists_OnDesignSurfaceExpectedValues.DataMergeExists, dataMerge.Exists, "Data merge large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurface - Use 'Assert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dataMerge = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge;
            #endregion

            // Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues.DataMergeExists, dataMerge.Exists, "Data Merge QVi on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Data_Split_Exists_OnDesignSurface - Use 'Assert_Data_Split_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Data_Split_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dataSplit = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit;
            #endregion

            // Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Data_Split_Exists_OnDesignSurfaceExpectedValues.DataSplitExists, dataSplit.Exists, "Data Split on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Data_Split_Large_View_Exists_OnDesignSurface - Use 'Assert_Data_Split_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Data_Split_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dataSplit = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit;
            #endregion

            // Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Data_Split_Large_View_Exists_OnDesignSurfaceExpectedValues.DataSplitExists, dataSplit.Exists, "Data Split large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Data_Split_Qvi_Large_View_Exists_OnDesignSurface - Use 'Assert_Data_Split_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Data_Split_Qvi_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dataSplit = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit;
            #endregion

            // Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Data_Split_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues.DataSplitExists, dataSplit.Exists, "Data Split Qvi does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_Database_Source_Dropdownlist_Exists - Use 'Assert_Database_Source_Dropdownlist_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Database_Source_Dropdownlist_Exists()
        {
            #region Variable Declarations
            WpfCustom sourcesComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DBConnectorWizardTab.WorkSurfaceContext.SourcesComboBox;
            #endregion

            // Verify that the 'Exists' property of 'SourcesComboBox' custom control equals 'True'
            Assert.AreEqual(this.Assert_Database_Source_Dropdownlist_ExistsExpectedValues.SourcesComboBoxExists, sourcesComboBox.Exists, "Database selector drop down list does not exist");
        }
        
        /// <summary>
        /// Assert_Database_Source_Exists - Use 'Assert_Database_Source_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Database_Source_Exists()
        {
            #region Variable Declarations
            WpfButton databaseSourceButton = this.MainStudioWindow.SideMenuBar.DatabaseSourceButton;
            #endregion

            // Verify that the 'Exists' property of 'Create a new database source' button equals 'True'
            Assert.AreEqual(this.Assert_Database_Source_ExistsExpectedValues.DatabaseSourceButtonExists, databaseSourceButton.Exists, "Database Source does not exist in the side menu");
        }
        
        /// <summary>
        /// Assert_Date_And_Time_Exists_OnDesignSurface - Use 'Assert_Date_And_Time_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Date_And_Time_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dateTime = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTime;
            #endregion

            // Verify that the 'Exists' property of 'DsfDateTimeActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Date_And_Time_Exists_OnDesignSurfaceExpectedValues.DateTimeExists, dateTime.Exists, "Date and Time tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_DateTime_Difference_Conversion_Exists_OnDesignSurface - Use 'Assert_DateTime_Difference_Conversion_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DateTime_Difference_Conversion_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dateTimeDifference = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTimeDifference;
            #endregion

            // Verify that the 'Exists' property of 'DsfDateTimeDifferenceActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_DateTime_Difference_Conversion_Exists_OnDesignSurfaceExpectedValues.DateTimeDifferenceExists, dateTimeDifference.Exists, "Date And Time Difference tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_DebugInput_CancelButton_Exists - Use 'Assert_DebugInput_CancelButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugInput_CancelButton_Exists()
        {
            #region Variable Declarations
            WpfButton cancelButton = this.MainStudioWindow.DebugInputDialog.CancelButton;
            #endregion

            // Verify that the 'Exists' property of 'Cancel' button equals 'True'
            Assert.AreEqual(this.Assert_DebugInput_CancelButton_ExistsExpectedValues.CancelButtonExists, cancelButton.Exists, "Cancel Debug Input Window button does not Exist");
        }
        
        /// <summary>
        /// Assert_DebugInput_DebugButton_Exists - Use 'Assert_DebugInput_DebugButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugInput_DebugButton_Exists()
        {
            #region Variable Declarations
            WpfButton debugF6Button = this.MainStudioWindow.DebugInputDialog.DebugF6Button;
            #endregion

            // Verify that the 'Exists' property of 'Debug (F6)' button equals 'True'
            Assert.AreEqual(this.Assert_DebugInput_DebugButton_ExistsExpectedValues.DebugF6ButtonExists, debugF6Button.Exists, "Debug button in Debug Input window does not Exist");
        }
        
        /// <summary>
        /// Assert_DebugInput_InputData_Field_Exists - Use 'Assert_DebugInput_InputData_Field_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugInput_InputData_Field_Exists()
        {
            #region Variable Declarations
            WpfText uIRec1setText = this.MainStudioWindow.DebugInputDialog.UITabItemsTabList.InputDataTab.DataListInputsTable.UIDescriptionCell.UIRec1setText;
            #endregion

            // Verify that the 'Exists' property of 'rec(1).set' label equals 'True'
            Assert.AreEqual(this.Assert_DebugInput_InputData_Field_ExistsExpectedValues.UIRec1setTextExists, uIRec1setText.Exists, "First Field name does not exist in the Input Data window");
        }
        
        /// <summary>
        /// Assert_DebugInput_InputData_Window_Exists - Use 'Assert_DebugInput_InputData_Window_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugInput_InputData_Window_Exists()
        {
            #region Variable Declarations
            WpfTable dataListInputsTable = this.MainStudioWindow.DebugInputDialog.UITabItemsTabList.InputDataTab.DataListInputsTable;
            #endregion

            // Verify that the 'Exists' property of 'DataListInputs' table equals 'True'
            Assert.AreEqual(this.Assert_DebugInput_InputData_Window_ExistsExpectedValues.DataListInputsTableExists, dataListInputsTable.Exists, "Input Data Window does not exist in Debug Input window");
        }
        
        /// <summary>
        /// Assert_DebugInput_Json_Tab_Exists - Use 'Assert_DebugInput_Json_Tab_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugInput_Json_Tab_Exists()
        {
            #region Variable Declarations
            WpfTabPage jSONTab = this.MainStudioWindow.DebugInputDialog.UITabItemsTabList.JSONTab;
            #endregion

            // Verify that the 'Exists' property of 'JSON' tab equals 'True'
            Assert.AreEqual(this.Assert_DebugInput_Json_Tab_ExistsExpectedValues.JSONTabExists, jSONTab.Exists, "Assert Json tab does not exist in the debug input window");
        }
        
        /// <summary>
        /// Assert_DebugInput_Json_Window_Exists - Use 'Assert_DebugInput_Json_Window_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugInput_Json_Window_Exists()
        {
            #region Variable Declarations
            WpfCustom jSONWindow = this.MainStudioWindow.DebugInputDialog.UITabItemsTabList.JSONTab.JSONWindow;
            #endregion

            // Verify that the 'Exists' property of 'UI_JsonEditor_AutoID' custom control equals 'True'
            Assert.AreEqual(this.Assert_DebugInput_Json_Window_ExistsExpectedValues.JSONWindowExists, jSONWindow.Exists, "Debug Input Json window does not exist");
        }
        
        /// <summary>
        /// Assert_DebugInput_RememberCheckbox_Exists - Use 'Assert_DebugInput_RememberCheckbox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugInput_RememberCheckbox_Exists()
        {
            #region Variable Declarations
            WpfCheckBox rememberDebugInputCheckBox = this.MainStudioWindow.DebugInputDialog.RememberDebugInputCheckBox;
            #endregion

            // Verify that the 'Exists' property of 'Remember Debug Inputs' check box equals 'True'
            Assert.AreEqual(this.Assert_DebugInput_RememberCheckbox_ExistsExpectedValues.RememberDebugInputCheckBoxExists, rememberDebugInputCheckBox.Exists, "Remember Checkbox does not exist in the Debug Input window");
        }
        
        /// <summary>
        /// Assert_DebugInput_ViewInBrowser_Button_Exists - Use 'Assert_DebugInput_ViewInBrowser_Button_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugInput_ViewInBrowser_Button_Exists()
        {
            #region Variable Declarations
            WpfButton viewInBrowserF7Button = this.MainStudioWindow.DebugInputDialog.ViewInBrowserF7Button;
            #endregion

            // Verify that the 'Enabled' property of 'View In Browser (F7)' button equals 'True'
            Assert.AreEqual(this.Assert_DebugInput_ViewInBrowser_Button_ExistsExpectedValues.ViewInBrowserF7ButtonEnabled, viewInBrowserF7Button.Enabled, "View in Browser button does not exist in Debug Input window");
        }
        
        /// <summary>
        /// Assert_DebugInput_Window_Exists - Use 'Assert_DebugInput_Window_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugInput_Window_Exists()
        {
            #region Variable Declarations
            WpfWindow debugInputDialog = this.MainStudioWindow.DebugInputDialog;
            #endregion

            // Verify that the 'Exists' property of 'Wpf' window equals 'True'
            Assert.AreEqual(this.Assert_DebugInput_Window_ExistsExpectedValues.DebugInputDialogExists, debugInputDialog.Exists, "Debug Input window does not exist");
        }
        
        /// <summary>
        /// Assert_DebugInput_Xml_Tab_Exists - Use 'Assert_DebugInput_Xml_Tab_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugInput_Xml_Tab_Exists()
        {
            #region Variable Declarations
            WpfTabPage xMLTab = this.MainStudioWindow.DebugInputDialog.UITabItemsTabList.XMLTab;
            #endregion

            // Verify that the 'Exists' property of 'XML' tab equals 'True'
            Assert.AreEqual(this.Assert_DebugInput_Xml_Tab_ExistsExpectedValues.XMLTabExists, xMLTab.Exists, "Xml tab does not Exist in the Debug Input window");
        }
        
        /// <summary>
        /// Assert_DebugInput_Xml_Window_Exists - Use 'Assert_DebugInput_Xml_Window_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugInput_Xml_Window_Exists()
        {
            #region Variable Declarations
            WpfCustom xMLWindow = this.MainStudioWindow.DebugInputDialog.UITabItemsTabList.XMLTab.XMLWindow;
            #endregion

            // Verify that the 'Exists' property of 'UI_XMLEditor_AutoID' custom control equals 'True'
            Assert.AreEqual(this.Assert_DebugInput_Xml_Window_ExistsExpectedValues.XMLWindowExists, xMLWindow.Exists, "Debug Input Xml window does not exist ");
        }
        
        /// <summary>
        /// Assert_DebugOutput_Contains_SomeVariable - Use 'Assert_DebugOutput_Contains_SomeVariableExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugOutput_Contains_SomeVariable()
        {
            #region Variable Declarations
            WpfText variableTextbox = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree.Step1.VariableTextbox;
            #endregion

            // Verify that the 'DisplayText' property of '[[SomeVariable]]' label equals '[[SomeVariable]]'
            Assert.AreEqual(this.Assert_DebugOutput_Contains_SomeVariableExpectedValues.VariableTextboxDisplayText, variableTextbox.DisplayText, "Wrong variable name in debug output");
        }
        
        /// <summary>
        /// Assert_DebugOutput_Exists - Use 'Assert_DebugOutput_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugOutput_Exists()
        {
            #region Variable Declarations
            WpfCustom debugOutput = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput;
            #endregion

            // Verify that the 'Exists' property of 'OUTPUT' custom control equals 'True'
            Assert.AreEqual(this.Assert_DebugOutput_ExistsExpectedValues.DebugOutputExists, debugOutput.Exists, "Assert_DebugOutput_Exists");

            // Verify that the 'Exists' property of 'OUTPUT' custom control equals 'True'
            Assert.AreEqual(this.Assert_DebugOutput_ExistsExpectedValues.DebugOutputExists1, debugOutput.Exists, "Debug output does not exist");
        }
        
        /// <summary>
        /// Assert_DebugOutput_ExpandCollapseButton_Exists - Use 'Assert_DebugOutput_ExpandCollapseButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugOutput_ExpandCollapseButton_Exists()
        {
            #region Variable Declarations
            WpfButton expandCollapseButton = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.ExpandCollapseButton;
            #endregion

            // Verify that the 'Exists' property of '+' button equals 'True'
            Assert.AreEqual(this.Assert_DebugOutput_ExpandCollapseButton_ExistsExpectedValues.ExpandCollapseButtonExists, expandCollapseButton.Exists, "Debug output expand collapse button does not exist");
        }
        
        /// <summary>
        /// Assert_DebugOutput_FilterTextbox_Exists - Use 'Assert_DebugOutput_FilterTextbox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugOutput_FilterTextbox_Exists()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.SearchTextBox;
            #endregion

            // Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
            Assert.AreEqual(this.Assert_DebugOutput_FilterTextbox_ExistsExpectedValues.SearchTextBoxExists, searchTextBox.Exists, "Debug output filter textbox does not exist");
        }
        
        /// <summary>
        /// Assert_DebugOutput_ResultsTree_Exists - Use 'Assert_DebugOutput_ResultsTree_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugOutput_ResultsTree_Exists()
        {
            #region Variable Declarations
            WpfTree debugOutputTree = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree;
            #endregion

            // Verify that the 'Exists' property of 'DebugOutputTree' tree equals 'True'
            Assert.AreEqual(this.Assert_DebugOutput_ResultsTree_ExistsExpectedValues.DebugOutputTreeExists, debugOutputTree.Exists, "Debug output results tree does not exist");
        }
        
        /// <summary>
        /// Assert_DebugOutput_SettingsButton_Exists - Use 'Assert_DebugOutput_SettingsButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DebugOutput_SettingsButton_Exists()
        {
            #region Variable Declarations
            WpfButton settingsButton = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.SettingsButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_DebugOutput_SettingsButton_ExistsExpectedValues.SettingsButtonExists, settingsButton.Exists, "Debug output settings button does not exist");
        }
        
        /// <summary>
        /// Assert_Decision_Dialog_Done_Button_Exists - Use 'Assert_Decision_Dialog_Done_Button_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Decision_Dialog_Done_Button_Exists()
        {
            #region Variable Declarations
            WpfButton doneButton = this.DecisionDialog.DoneButton;
            #endregion

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Assert_Decision_Dialog_Done_Button_ExistsExpectedValues.DoneButtonExists, doneButton.Exists, "Decision dialog done button does not exist");
        }
        
        /// <summary>
        /// Assert_Decision_Dialog_Exists - Use 'Assert_Decision_Dialog_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Decision_Dialog_Exists()
        {
            #region Variable Declarations
            WpfWindow decisionDialog = this.DecisionDialog;
            #endregion

            // Verify that the 'Exists' property of 'Wpf' window equals 'True'
            Assert.AreEqual(this.Assert_Decision_Dialog_ExistsExpectedValues.DecisionDialogExists, decisionDialog.Exists, "Decision dialog does not exist");
        }
        
        /// <summary>
        /// Assert_Decision_Exists_In_The_Toolbox - Use 'Assert_Decision_Exists_In_The_ToolboxExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Decision_Exists_In_The_Toolbox()
        {
            #region Variable Declarations
            WpfImage decisionImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FlowTools.Decision.DecisionImage;
            #endregion

            // Verify that the 'Exists' property of 'Decision' image equals 'True'
            Assert.AreEqual(this.Assert_Decision_Exists_In_The_ToolboxExpectedValues.DecisionImageExists, decisionImage.Exists, "Decision does not exist in the Toolbox");
        }
        
        /// <summary>
        /// Assert_Decision_Exists_OnDesignSurface - Use 'Assert_Decision_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Decision_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom decision = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Decision;
            #endregion

            // Verify that the 'Exists' property of 'FlowDecision' custom control equals 'True'
            Assert.AreEqual(this.Assert_Decision_Exists_OnDesignSurfaceExpectedValues.DecisionExists, decision.Exists, "Decision on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Delete_Exists_OnDesignSurface - Use 'Assert_Delete_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Delete_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathDelete = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathDelete;
            #endregion

            // Verify that the 'Exists' property of 'DsfPathDelete' custom control equals 'True'
            Assert.AreEqual(this.Assert_Delete_Exists_OnDesignSurfaceExpectedValues.PathDeleteExists, pathDelete.Exists, "Delete tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Delete_Record_Exists_OnDesignSurface - Use 'Assert_Delete_Record_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Delete_Record_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom deleteRecord = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DeleteRecord;
            #endregion

            // Verify that the 'Exists' property of 'DsfDeleteRecordActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Delete_Record_Exists_OnDesignSurfaceExpectedValues.DeleteRecordExists, deleteRecord.Exists, "Delete record tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Deploy_Destination_Server_Edit_Exists - Use 'Assert_Deploy_Destination_Server_Edit_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Deploy_Destination_Server_Edit_Exists()
        {
            #region Variable Declarations
            WpfButton editSourceButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.EditSourceButton;
            #endregion

            // Verify that the 'Exists' property of '...' button equals 'True'
            Assert.AreEqual(this.Assert_Deploy_Destination_Server_Edit_ExistsExpectedValues.EditSourceButtonExists, editSourceButton.Exists, "Edit source server button does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_Deploy_Ribbon_Button_Exists - Use 'Assert_Deploy_Ribbon_Button_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Deploy_Ribbon_Button_Exists()
        {
            #region Variable Declarations
            WpfButton deployButton = this.MainStudioWindow.SideMenuBar.DeployButton;
            #endregion

            // Verify that the 'Exists' property of 'Move resources between Warewolf servers' button equals 'True'
            Assert.AreEqual(this.Assert_Deploy_Ribbon_Button_ExistsExpectedValues.DeployButtonExists, deployButton.Exists, "Deploy ribbon button does not exist");
        }
        
        /// <summary>
        /// Assert_DeployButton_DestinationServer_Exists - Use 'Assert_DeployButton_DestinationServer_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DeployButton_DestinationServer_Exists()
        {
            #region Variable Declarations
            WpfButton deployButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.DeployButton;
            #endregion

            // Verify that the 'Exists' property of 'Deploy' button equals 'True'
            Assert.AreEqual(this.Assert_DeployButton_DestinationServer_ExistsExpectedValues.DeployButtonExists, deployButton.Exists, "Deploy button in Destination server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_Display_Name_Exists_On_Assign_Object_Small_View_On_The_Design_Surface - Use 'Assert_Display_Name_Exists_On_Assign_Object_Small_View_On_The_Design_SurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Display_Name_Exists_On_Assign_Object_Small_View_On_The_Design_Surface()
        {
            #region Variable Declarations
            WpfEdit displayNameTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.DisplayNameTextbox;
            #endregion

            // Verify that the 'Exists' property of 'DisplayName' text box equals 'True'
            Assert.AreEqual(this.Assert_Display_Name_Exists_On_Assign_Object_Small_View_On_The_Design_SurfaceExpectedValues.DisplayNameTextboxExists, displayNameTextbox.Exists, "Display name does not exist on Asign Object small view on the design surface");
        }
        
        /// <summary>
        /// Assert_Display_Name_Exists_On_Data_Merge_Small_View - Use 'Assert_Display_Name_Exists_On_Data_Merge_Small_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Display_Name_Exists_On_Data_Merge_Small_View()
        {
            #region Variable Declarations
            WpfEdit displayName = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.DisplayName;
            #endregion

            // Verify that the 'ControlType' property of 'DisplayName' text box equals 'Edit'
            Assert.AreEqual(this.Assert_Display_Name_Exists_On_Data_Merge_Small_ViewExpectedValues.DisplayNameControlType, displayName.ControlType.ToString(), "Displayname textbox does not exist on Data Merge");
        }
        
        /// <summary>
        /// Assert_Done_Button_Exists_On_Assign_Object_Large_View - Use 'Assert_Done_Button_Exists_On_Assign_Object_Large_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Done_Button_Exists_On_Assign_Object_Large_View()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.DoneButton;
            #endregion

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Assert_Done_Button_Exists_On_Assign_Object_Large_ViewExpectedValues.DoneButtonExists, doneButton.Exists, "Done button does not exist on Assign Object large view");
        }
        
        /// <summary>
        /// Assert_Done_Button_Exists_On_Data_Merge_Large_View - Use 'Assert_Done_Button_Exists_On_Data_Merge_Large_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Done_Button_Exists_On_Data_Merge_Large_View()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.DoneButton;
            #endregion

            // Verify that the 'Exists' property of 'Done' button equals 'True'
            Assert.AreEqual(this.Assert_Done_Button_Exists_On_Data_Merge_Large_ViewExpectedValues.DoneButtonExists, doneButton.Exists, "Done button does not exist on data merge large view");
        }
        
        /// <summary>
        /// Assert_DotNet_DLL_Connector_Exists_OnDesignSurface - Use 'Assert_DotNet_DLL_Connector_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_DotNet_DLL_Connector_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dotNetDll = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll;
            #endregion

            // Verify that the 'Exists' property of 'DsfDotNetDllActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_DotNet_DLL_Connector_Exists_OnDesignSurfaceExpectedValues.DotNetDllExists, dotNetDll.Exists, "DotNet DLL tool does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_Dropbox_Download_Exists_OnDesignSurface - Use 'Assert_Dropbox_Download_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Dropbox_Download_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dropBox_DOWNLOAD = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DropBox_DOWNLOAD;
            #endregion

            // Verify that the 'Exists' property of 'DsfDropBoxFileActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Dropbox_Download_Exists_OnDesignSurfaceExpectedValues.DropBox_DOWNLOADExists, dropBox_DOWNLOAD.Exists, "Dropbox Download tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Dropbox_Upload_Exists_OnDesignSurface - Use 'Assert_Dropbox_Upload_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Dropbox_Upload_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dropBox_UPLOAD = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DropBox_UPLOAD;
            #endregion

            // Verify that the 'Exists' property of 'DsfDropBoxFileActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Dropbox_Upload_Exists_OnDesignSurfaceExpectedValues.DropBox_UPLOADExists, dropBox_UPLOAD.Exists, "Dropbox Upload tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Edit_Button_Destination_Server_Exists - Use 'Assert_Edit_Button_Destination_Server_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Edit_Button_Destination_Server_Exists()
        {
            #region Variable Declarations
            WpfButton editDestinationButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.EditDestinationButton;
            #endregion

            // Verify that the 'Exists' property of '...' button equals 'True'
            Assert.AreEqual(this.Assert_Edit_Button_Destination_Server_ExistsExpectedValues.EditDestinationButtonExists, editDestinationButton.Exists, "Edit Destination Server button does not exist");
        }
        
        /// <summary>
        /// Assert_Email_Exists_OnDesignSurface - Use 'Assert_Email_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Email_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sendEmail = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SendEmail;
            #endregion

            // Verify that the 'Exists' property of 'DsfSendEmailActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Email_Exists_OnDesignSurfaceExpectedValues.SendEmailExists, sendEmail.Exists, "Email tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Email_Large_View_Exists_OnDesignSurface - Use 'Assert_Email_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Email_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sendEmail = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SendEmail;
            #endregion

            // Verify that the 'Exists' property of 'DsfSendEmailActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Email_Large_View_Exists_OnDesignSurfaceExpectedValues.SendEmailExists, sendEmail.Exists, "Email Tool large view does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_end_this_workflow_checkbox_exists_on_Assign_Object_large_view - Use 'Assert_end_this_workflow_checkbox_exists_on_Assign_Object_large_viewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_end_this_workflow_checkbox_exists_on_Assign_Object_large_view()
        {
            #region Variable Declarations
            WpfCheckBox endthisworkflowCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.LargeView.OnError.OnErrorGroup.EndthisworkflowCheckBox;
            #endregion

            // Verify that the 'Exists' property of 'End this workflow' check box equals 'True'
            Assert.AreEqual(this.Assert_end_this_workflow_checkbox_exists_on_Assign_Object_large_viewExpectedValues.EndthisworkflowCheckBoxExists, endthisworkflowCheckBox.Exists, "End this workflow checkbox does not exist on Assign Object large view");
        }
        
        /// <summary>
        /// Assert_Error_Variable_Textbox_Exists_On_Assign_Object_Large_View - Use 'Assert_Error_Variable_Textbox_Exists_On_Assign_Object_Large_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Error_Variable_Textbox_Exists_On_Assign_Object_Large_View()
        {
            #region Variable Declarations
            WpfEdit errorVariable = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.LargeView.OnError.OnErrorGroup.ErrorVariable;
            #endregion

            // Verify that the 'Exists' property of 'UI__Variable_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_Error_Variable_Textbox_Exists_On_Assign_Object_Large_ViewExpectedValues.ErrorVariableExists, errorVariable.Exists, "Error variable text box does not exist on Assign Object large view on the design " +
                    "surface");
        }
        
        /// <summary>
        /// Assert_Explorer_Edit_Connect_Control_Button_Exists - Use 'Assert_Explorer_Edit_Connect_Control_Button_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Explorer_Edit_Connect_Control_Button_Exists()
        {
            #region Variable Declarations
            WpfButton editServerButton = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ConnectControl.EditServerButton;
            #endregion

            // Verify that the 'Exists' property of '...' button equals 'True'
            Assert.AreEqual(this.Assert_Explorer_Edit_Connect_Control_Button_ExistsExpectedValues.EditServerButtonExists, editServerButton.Exists, "Edit Connect control button does not exist");
        }
        
        /// <summary>
        /// Assert_Explorer_Exists - Use 'Assert_Explorer_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Explorer_Exists()
        {
            #region Variable Declarations
            WpfCustom explorer = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer;
            #endregion

            // Verify that the 'Exists' property of 'UI_ExplorerControl_AutoID' custom control equals 'True'
            Assert.AreEqual(this.Assert_Explorer_ExistsExpectedValues.ExplorerExists, explorer.Exists, "Explorer does not exist in the studio");
        }
        
        /// <summary>
        /// Assert_Explorer_Filter_Textbox_Exists - Use 'Assert_Explorer_Filter_Textbox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Explorer_Filter_Textbox_Exists()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.SearchTextBox;
            #endregion

            // Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
            Assert.AreEqual(this.Assert_Explorer_Filter_Textbox_ExistsExpectedValues.SearchTextBoxExists, searchTextBox.Exists, "Explorer Filter does not exist");
        }
        
        /// <summary>
        /// Assert_Explorer_Remote_Server_DropdownList_Contains_NewRemoteServer - Use 'Assert_Explorer_Remote_Server_DropdownList_Contains_NewRemoteServerExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Explorer_Remote_Server_DropdownList_Contains_NewRemoteServer()
        {
            #region Variable Declarations
            WpfCustom newRemoteServerListItem = this.MainStudioWindow.NewRemoteServerListItem;
            #endregion

            // Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
            Assert.AreEqual(this.Assert_Explorer_Remote_Server_DropdownList_Contains_NewRemoteServerExpectedValues.NewRemoteServerListItemExists, newRemoteServerListItem.Exists, "New Remote Server... does not exist in explorer remote server drop down list");
        }
        
        /// <summary>
        /// Assert_Explorer_Remote_Server_DropdownList_Contains_TSTCIREMOTE - Use 'Assert_Explorer_Remote_Server_DropdownList_Contains_TSTCIREMOTEExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Explorer_Remote_Server_DropdownList_Contains_TSTCIREMOTE()
        {
            #region Variable Declarations
            WpfText comboboxListItemAsTSTCIREMOTE = this.MainStudioWindow.ComboboxListItemAsTSTCIREMOTE;
            #endregion

            // Verify that the 'Exists' property of 'TSTCIREMOTE' label equals 'True'
            Assert.AreEqual(this.Assert_Explorer_Remote_Server_DropdownList_Contains_TSTCIREMOTEExpectedValues.ComboboxListItemAsTSTCIREMOTEExists, comboboxListItemAsTSTCIREMOTE.Exists, "TSTCIREMOTE does not exist in explorer remote server drop down list");
        }
        
        /// <summary>
        /// Assert_Explorer_Remote_Server_DropdownList_Does_Not_Contain_TSTCIREMOTE - Use 'Assert_Explorer_Remote_Server_DropdownList_Does_Not_Contain_TSTCIREMOTEExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Explorer_Remote_Server_DropdownList_Does_Not_Contain_TSTCIREMOTE()
        {
            #region Variable Declarations
            WpfText comboboxListItemAsTSTCIREMOTE = this.MainStudioWindow.ComboboxListItemAsTSTCIREMOTE;
            #endregion

            // Verify that the 'Exists' property of 'TSTCIREMOTE' label equals 'False'
            Assert.AreEqual(this.Assert_Explorer_Remote_Server_DropdownList_Does_Not_Contain_TSTCIREMOTEExpectedValues.ComboboxListItemAsTSTCIREMOTEExists, comboboxListItemAsTSTCIREMOTE.Exists, "TSTCIREMOTE does exist in explorer remote server drop down list");
        }
        
        /// <summary>
        /// Assert_Explorer_Remote_Server_DropdownList_Has_localhost_Selected - Use 'Assert_Explorer_Remote_Server_DropdownList_Has_localhost_SelectedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Explorer_Remote_Server_DropdownList_Has_localhost_Selected()
        {
            #region Variable Declarations
            WpfText selectedItemAsLocalhost = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ConnectControl.ServerComboBox.SelectedItemAsLocalhost;
            #endregion

            // Verify that the 'DisplayText' property of 'localhost' label equals 'TSTCIREMOTE'
            Assert.AreEqual(this.Assert_Explorer_Remote_Server_DropdownList_Has_localhost_SelectedExpectedValues.SelectedItemAsLocalhostDisplayText, selectedItemAsLocalhost.DisplayText, "Selected remote server is not localhost");
        }
        
        /// <summary>
        /// Assert_Explorer_Remote_Server_DropdownList_Has_TSTCIREMOTE_Selected - Use 'Assert_Explorer_Remote_Server_DropdownList_Has_TSTCIREMOTE_SelectedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Explorer_Remote_Server_DropdownList_Has_TSTCIREMOTE_Selected()
        {
            #region Variable Declarations
            WpfText selectedItemAsTSTCIREMOTE = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ConnectControl.ServerComboBox.SelectedItemAsTSTCIREMOTE;
            #endregion

            // Verify that the 'DisplayText' property of 'TSTCIREMOTE' label equals 'TSTCIREMOTE'
            Assert.AreEqual(this.Assert_Explorer_Remote_Server_DropdownList_Has_TSTCIREMOTE_SelectedExpectedValues.SelectedItemAsTSTCIREMOTEDisplayText, selectedItemAsTSTCIREMOTE.DisplayText, "Selected remote server is not TSTCIREMOTE");
        }
        
        /// <summary>
        /// Assert_Explorer_ServerName_Exists - Use 'Assert_Explorer_ServerName_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Explorer_ServerName_Exists()
        {
            #region Variable Declarations
            WpfTreeItem explorerTreeItemChild = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.ExplorerTreeItem.ExplorerTreeItemChild;
            #endregion

            // Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
            Assert.AreEqual(this.Assert_Explorer_ServerName_ExistsExpectedValues.ExplorerTreeItemChildExists, explorerTreeItemChild.Exists, "Server Name does not exist in the Explorer");
        }
        
        /// <summary>
        /// Assert_ExplorerContextMenu_Delete_Exists - Use 'Assert_ExplorerContextMenu_Delete_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_ExplorerContextMenu_Delete_Exists()
        {
            #region Variable Declarations
            WpfMenuItem delete = this.MainStudioWindow.ExplorerContextMenu.Delete;
            #endregion

            // Verify that the 'Exists' property of 'Delete' menu item equals 'True'
            Assert.AreEqual(this.Assert_ExplorerContextMenu_Delete_ExistsExpectedValues.DeleteExists, delete.Exists, "Delete does not exist in ExplorerContextMenu");
        }
        
        /// <summary>
        /// Assert_Filter_Source_Server_Exists - Use 'Assert_Filter_Source_Server_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Filter_Source_Server_Exists()
        {
            #region Variable Declarations
            WpfText filterText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.FilterText;
            #endregion

            // Verify that the 'Exists' property of 'Filter' label equals 'True'
            Assert.AreEqual(this.Assert_Filter_Source_Server_ExistsExpectedValues.FilterTextExists, filterText.Exists, "Filter source server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_Find_Index_Exists_OnDesignSurface - Use 'Assert_Find_Index_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Find_Index_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom findIndex = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindIndex;
            #endregion

            // Verify that the 'Exists' property of 'DsfIndexActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Find_Index_Exists_OnDesignSurfaceExpectedValues.FindIndexExists, findIndex.Exists, "Find Index on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Find_Record_Index_Exists_OnDesignSurface - Use 'Assert_Find_Record_Index_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Find_Record_Index_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom findRecordsIndex = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindRecordsIndex;
            #endregion

            // Verify that the 'Exists' property of 'DsfFindRecordsMultipleCriteriaActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Find_Record_Index_Exists_OnDesignSurfaceExpectedValues.FindRecordsIndexExists, findRecordsIndex.Exists, "Find Record Index tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Find_Record_index_Large_View_Exists_OnDesignSurface - Use 'Assert_Find_Record_index_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Find_Record_index_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom findRecordsIndex = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindRecordsIndex;
            #endregion

            // Verify that the 'Exists' property of 'DsfFindRecordsMultipleCriteriaActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Find_Record_index_Large_View_Exists_OnDesignSurfaceExpectedValues.FindRecordsIndexExists, findRecordsIndex.Exists, "Find Record Index large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_For_Each_Exists_OnDesignSurface - Use 'Assert_For_Each_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_For_Each_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom forEach = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach;
            #endregion

            // Verify that the 'Exists' property of 'DsfForEachActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_For_Each_Exists_OnDesignSurfaceExpectedValues.ForEachExists, forEach.Exists, "For Each tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Format_Number_Exists_OnDesignSurface - Use 'Assert_Format_Number_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Format_Number_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom formatNumber = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FormatNumber;
            #endregion

            // Verify that the 'Exists' property of 'DsfNumberFormatActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Format_Number_Exists_OnDesignSurfaceExpectedValues.FormatNumberExists, formatNumber.Exists, "Format Number tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_FullScreen_Button_Exists_TopRibbon - Use 'Assert_FullScreen_Button_Exists_TopRibbonExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_FullScreen_Button_Exists_TopRibbon()
        {
            #region Variable Declarations
            WpfButton maximizeRestoreStudioButton = this.MainStudioWindow.MaximizeRestoreStudioButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_FullScreen_Button_Exists_TopRibbonExpectedValues.MaximizeRestoreStudioButtonExists, maximizeRestoreStudioButton.Exists, "Full Screen Button in the Top Ribbon does not Exist");
        }
        
        /// <summary>
        /// Assert_Generic_Context_Menu_Exists - Use 'Assert_Generic_Context_Menu_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Generic_Context_Menu_Exists()
        {
            #region Variable Declarations
            WpfMenu genericContextMenu = this.MainStudioWindow.GenericContextMenu;
            #endregion

            // Verify that the 'Exists' property of popup menu equals 'True'
            Assert.AreEqual(this.Assert_Generic_Context_Menu_ExistsExpectedValues.GenericContextMenuExists, genericContextMenu.Exists, "Context Menu does not exist on design surface");
        }
        
        /// <summary>
        /// Assert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurface - Use 'Assert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom webGet = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet;
            #endregion

            // Verify that the 'Exists' property of 'DsfWebGetActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues.WebGetExists, webGet.Exists, "Web Get Request Tool does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_GetWeb_RequestTool_small_View_Exists_OnDesignSurface - Use 'Assert_GetWeb_RequestTool_small_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_GetWeb_RequestTool_small_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom webGet = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet;
            #endregion

            // Verify that the 'Exists' property of 'DsfWebGetActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_GetWeb_RequestTool_small_View_Exists_OnDesignSurfaceExpectedValues.WebGetExists, webGet.Exists, "Web Get Request small view does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_InputData_Tab_Exists - Use 'Assert_InputData_Tab_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_InputData_Tab_Exists()
        {
            #region Variable Declarations
            WpfTabPage inputDataTab = this.MainStudioWindow.DebugInputDialog.UITabItemsTabList.InputDataTab;
            #endregion

            // Verify that the 'Exists' property of 'Input Data' tab equals 'True'
            Assert.AreEqual(this.Assert_InputData_Tab_ExistsExpectedValues.InputDataTabExists, inputDataTab.Exists, "Input Data Tab does not exist inside Debug Input Window");
        }
        
        /// <summary>
        /// Assert_Json_Large_View_Exists_OnDesignSurface - Use 'Assert_Json_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Json_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom createJson = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson;
            #endregion

            // Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Json_Large_View_Exists_OnDesignSurfaceExpectedValues.CreateJsonExists, createJson.Exists, "JSON tool large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Json_Qvi_Large_View_Exists_OnDesignSurface - Use 'Assert_Json_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Json_Qvi_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom createJson = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson;
            #endregion

            // Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Json_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues.CreateJsonExists, createJson.Exists, "JSON QVI window does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_Length_Exists_OnDesignSurface - Use 'Assert_Length_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Length_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom length = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Length;
            #endregion

            // Verify that the 'Exists' property of 'DsfRecordsetLengthActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Length_Exists_OnDesignSurfaceExpectedValues.LengthExists, length.Exists, "Length tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_LockAndUnlock_Button_Exists_TopRibbon - Use 'Assert_LockAndUnlock_Button_Exists_TopRibbonExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_LockAndUnlock_Button_Exists_TopRibbon()
        {
            #region Variable Declarations
            WpfButton lockStudioButton = this.MainStudioWindow.LockStudioButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_LockAndUnlock_Button_Exists_TopRibbonExpectedValues.LockStudioButtonExists, lockStudioButton.Exists, "Top Ribbon Lock button does not Exist");
        }
        
        /// <summary>
        /// Assert_MainStudioWindow_Exists - Use 'Assert_MainStudioWindow_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_MainStudioWindow_Exists()
        {
            #region Variable Declarations
            WpfWindow mainStudioWindow = this.MainStudioWindow;
            #endregion

            // Verify that the 'Exists' property of 'Warewolf' window equals 'True'
            Assert.AreEqual(this.Assert_MainStudioWindow_ExistsExpectedValues.MainStudioWindowExists, mainStudioWindow.Exists, "Main Studio Window Does not Exist");
        }
        
        /// <summary>
        /// Assert_Maximize_Button_Exists_TopRibbon - Use 'Assert_Maximize_Button_Exists_TopRibbonExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Maximize_Button_Exists_TopRibbon()
        {
            #region Variable Declarations
            WpfButton maximizeStudioButton = this.MainStudioWindow.MaximizeStudioButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_Maximize_Button_Exists_TopRibbonExpectedValues.MaximizeStudioButtonExists, maximizeStudioButton.Exists, "Maximize Button in the Top Ribbon does not Exist");
        }
        
        /// <summary>
        /// Assert_MessageBox_Does_Not_Exist - Use 'Assert_MessageBox_Does_Not_ExistExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_MessageBox_Does_Not_Exist()
        {
            #region Variable Declarations
            WpfWindow messageBoxWindow = this.MessageBoxWindow;
            #endregion

            // Verify that the 'Exists' property of 'WarewolfMessageBox' window equals 'False'
            Assert.AreEqual(this.Assert_MessageBox_Does_Not_ExistExpectedValues.MessageBoxWindowExists, messageBoxWindow.Exists, "Message box does exist");
        }
        
        /// <summary>
        /// Assert_MessageBox_No_Button_Exists - Use 'Assert_MessageBox_No_Button_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_MessageBox_No_Button_Exists()
        {
            #region Variable Declarations
            WpfButton noButton = this.MessageBoxWindow.NoButton;
            #endregion

            // Verify that the 'Exists' property of 'No' button equals 'True'
            Assert.AreEqual(this.Assert_MessageBox_No_Button_ExistsExpectedValues.NoButtonExists, noButton.Exists, "Message box No button does not exist");
        }
        
        /// <summary>
        /// Assert_MessageBox_Yes_Button_Exists - Use 'Assert_MessageBox_Yes_Button_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_MessageBox_Yes_Button_Exists()
        {
            #region Variable Declarations
            WpfButton yesButton = this.MessageBoxWindow.YesButton;
            #endregion

            // Verify that the 'Exists' property of 'Yes' button equals 'True'
            Assert.AreEqual(this.Assert_MessageBox_Yes_Button_ExistsExpectedValues.YesButtonExists, yesButton.Exists, "Message box Yes button does not exist");
        }
        
        /// <summary>
        /// Assert_Minimize_Button_Exists_TopRibbon - Use 'Assert_Minimize_Button_Exists_TopRibbonExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Minimize_Button_Exists_TopRibbon()
        {
            #region Variable Declarations
            WpfButton minimizeStudioButton = this.MainStudioWindow.MinimizeStudioButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_Minimize_Button_Exists_TopRibbonExpectedValues.MinimizeStudioButtonExists, minimizeStudioButton.Exists, "Minimize Button in the Top Ribbon does not Exist");
        }
        
        /// <summary>
        /// Move tool on the design surface does not exist
        /// </summary>
        public void Assert_Move_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathMove = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathMove;
            #endregion

            // Verify that the 'Exists' property of 'DsfPathMove' custom control equals 'True'
            Assert.AreEqual(this.Assert_Move_Exists_OnDesignSurfaceExpectedValues.PathMoveExists, pathMove.Exists, "Move tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Move_Large_View_Exists_OnDesignSurface - Use 'Assert_Move_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Move_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathMove = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathMove;
            #endregion

            // Verify that the 'Exists' property of 'DsfPathMove' custom control equals 'True'
            Assert.AreEqual(this.Assert_Move_Large_View_Exists_OnDesignSurfaceExpectedValues.PathMoveExists, pathMove.Exists, "Move tool large view does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_MultiAssign_Exists_OnDesignSurface - Use 'Assert_MultiAssign_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_MultiAssign_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom multiAssign = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign;
            #endregion

            // Verify that the 'Exists' property of 'DsfMultiAssignActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_MultiAssign_Exists_OnDesignSurfaceExpectedValues.MultiAssignExists, multiAssign.Exists, "MultiAssign on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Mysql_Database_Large_View_Exists_OnDesignSurface - Use 'Assert_Mysql_Database_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Mysql_Database_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom mySqlDatabase = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MySqlDatabase;
            #endregion

            // Verify that the 'Exists' property of 'DsfMySqlDatabaseActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Mysql_Database_Large_View_Exists_OnDesignSurfaceExpectedValues.MySqlDatabaseExists, mySqlDatabase.Exists, "MySql Database Connector large view does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_New_Workflow_Context_Menu_Exists - Use 'Assert_New_Workflow_Context_Menu_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_New_Workflow_Context_Menu_Exists()
        {
            #region Variable Declarations
            WpfMenu genericContextMenu = this.MainStudioWindow.GenericContextMenu;
            #endregion

            // Verify that the 'Exists' property of popup menu equals 'True'
            Assert.AreEqual(this.Assert_New_Workflow_Context_Menu_ExistsExpectedValues.GenericContextMenuExists, genericContextMenu.Exists, "Assign tool large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_NewResource_Count_Exists - Use 'Assert_NewResource_Count_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_NewResource_Count_Exists()
        {
            #region Variable Declarations
            WpfHyperlink newResourceHyperlink = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.NewResourceHyperlink;
            #endregion

            // Verify that the 'Exists' property of link equals 'True'
            Assert.AreEqual(this.Assert_NewResource_Count_ExistsExpectedValues.NewResourceHyperlinkExists, newResourceHyperlink.Exists, "New Resource count in destination server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_NewResource_Label_Exists - Use 'Assert_NewResource_Label_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_NewResource_Label_Exists()
        {
            #region Variable Declarations
            WpfText newResourcesText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.NewResourcesText;
            #endregion

            // Verify that the 'Exists' property of 'New Resources' label equals 'True'
            Assert.AreEqual(this.Assert_NewResource_Label_ExistsExpectedValues.NewResourcesTextExists, newResourcesText.Exists, "New Resource Label in the destination server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_NewWorkFlow_RibbonButton_Exists - Use 'Assert_NewWorkFlow_RibbonButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_NewWorkFlow_RibbonButton_Exists()
        {
            #region Variable Declarations
            WpfText newWorkflowIcon = this.MainStudioWindow.SideMenuBar.CollapsedSideMenu.NewWorkflowIcon;
            #endregion

            // Verify that the 'Exists' property of '' label equals 'True'
            Assert.AreEqual(this.Assert_NewWorkFlow_RibbonButton_ExistsExpectedValues.NewWorkflowIconExists, newWorkflowIcon.Exists, "New Workflow Ribbon Button Does Not Exist!");
        }
        
        /// <summary>
        /// Assert_OnError_End_this_workflow_Checkbox_Exists_On_Data_Merge_Large_View - Use 'Assert_OnError_End_this_workflow_Checkbox_Exists_On_Data_Merge_Large_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_OnError_End_this_workflow_Checkbox_Exists_On_Data_Merge_Large_View()
        {
            #region Variable Declarations
            WpfCheckBox endthisworkflowCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.LargeView.OnErrorGroup.EndthisworkflowCheckBox;
            #endregion

            // Verify that the 'Exists' property of 'End this workflow' check box equals 'True'
            Assert.AreEqual(this.Assert_OnError_End_this_workflow_Checkbox_Exists_On_Data_Merge_Large_ViewExpectedValues.EndthisworkflowCheckBoxExists, endthisworkflowCheckBox.Exists, "OnError End this workflow checkbox does not exist on Data Merge large view");
        }
        
        /// <summary>
        /// Assert_OnError_Variable_Textbox_Exists_On_Data_Merge_Large_View - Use 'Assert_OnError_Variable_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_OnError_Variable_Textbox_Exists_On_Data_Merge_Large_View()
        {
            #region Variable Declarations
            WpfEdit variableTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.LargeView.OnErrorGroup.VariableTextbox;
            #endregion

            // Verify that the 'Exists' property of 'UI__Variable_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_OnError_Variable_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues.VariableTextboxExists, variableTextbox.Exists, "OnError variable textbox does not exist on Data Merge large view");
        }
        
        /// <summary>
        /// Assert_OnError_WebService_Textbox_Exists_On_Assign_Object_Large_View - Use 'Assert_OnError_WebService_Textbox_Exists_On_Assign_Object_Large_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_OnError_WebService_Textbox_Exists_On_Assign_Object_Large_View()
        {
            #region Variable Declarations
            WpfEdit errorWebservice = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.LargeView.OnError.OnErrorGroup.ErrorWebservice;
            #endregion

            // Verify that the 'Exists' property of 'UI__Workflow_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_OnError_WebService_Textbox_Exists_On_Assign_Object_Large_ViewExpectedValues.ErrorWebserviceExists, errorWebservice.Exists, "OnError web service textbox does not exist on Assign Object large view");
        }
        
        /// <summary>
        /// Assert_Override_Count_Exists - Use 'Assert_Override_Count_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Override_Count_Exists()
        {
            #region Variable Declarations
            WpfHyperlink overrideHyperlink = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.OverrideHyperlink;
            #endregion

            // Verify that the 'Exists' property of link equals 'True'
            Assert.AreEqual(this.Assert_Override_Count_ExistsExpectedValues.OverrideHyperlinkExists, overrideHyperlink.Exists, "Override count in destination server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_Override_Label_DestinationServer_Exists - Use 'Assert_Override_Label_DestinationServer_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Override_Label_DestinationServer_Exists()
        {
            #region Variable Declarations
            WpfText overrideText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.OverrideText;
            #endregion

            // Verify that the 'Exists' property of 'Override' label equals 'True'
            Assert.AreEqual(this.Assert_Override_Label_DestinationServer_ExistsExpectedValues.OverrideTextExists, overrideText.Exists, "Override label on Destination Server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_Plugin_Connector_Exists_OnDesignSurface - Use 'Assert_Plugin_Connector_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Plugin_Connector_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pluginConnector = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PluginConnector;
            #endregion

            // Verify that the 'Exists' property of 'DsfPluginActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Plugin_Connector_Exists_OnDesignSurfaceExpectedValues.PluginConnectorExists, pluginConnector.Exists, "Plugin Connector on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Plugin_Source_Exists - Use 'Assert_Plugin_Source_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Plugin_Source_Exists()
        {
            #region Variable Declarations
            WpfButton pluginSourceButton = this.MainStudioWindow.SideMenuBar.PluginSourceButton;
            #endregion

            // Verify that the 'Exists' property of 'Create a new plugin source' button equals 'True'
            Assert.AreEqual(this.Assert_Plugin_Source_ExistsExpectedValues.PluginSourceButtonExists, pluginSourceButton.Exists, "Plugin Source does not exist in the side menu");
        }
        
        /// <summary>
        /// Assert_Position_Exists - Use 'Assert_Position_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Position_Exists()
        {
            #region Variable Declarations
            WpfMenuItem positionButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.FilesMenu.PositionButton;
            #endregion

            // Verify that the 'Exists' property of 'PART_FilesMenuItem' menu item equals 'True'
            Assert.AreEqual(this.Assert_Position_ExistsExpectedValues.PositionButtonExists, positionButton.Exists, "Option to view all open tabs does not exist");
        }
        
        /// <summary>
        /// Assert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurface - Use 'Assert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom webPost = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebPost;
            #endregion

            // Verify that the 'Exists' property of 'DsfWebPostActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues.WebPostExists, webPost.Exists, "Web Post Request Tool does not exist on the design surface ");
        }
        
        /// <summary>
        /// Assert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurface - Use 'Assert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom webPost = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebPost;
            #endregion

            // Verify that the 'Exists' property of 'DsfWebPostActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurfaceExpectedValues.WebPostExists, webPost.Exists, "Web Post Request small view does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_QVI_Button_Exists_on_Assign_Object_Small_View - Use 'Assert_QVI_Button_Exists_on_Assign_Object_Small_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_QVI_Button_Exists_on_Assign_Object_Small_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInput = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.AssignObject.OpenQuickVariableInput;
            #endregion

            // Verify that the 'Exists' property of 'Open Quick Variable Input' toggle button equals 'True'
            Assert.AreEqual(this.Assert_QVI_Button_Exists_on_Assign_Object_Small_ViewExpectedValues.OpenQuickVariableInputExists, openQuickVariableInput.Exists, "QVI Button does not exist on Assign Object small view");
        }
        
        /// <summary>
        /// Assert_QVI_Toggle_Button_Exists_On_Data_Merge_Small_View - Use 'Assert_QVI_Toggle_Button_Exists_On_Data_Merge_Small_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_QVI_Toggle_Button_Exists_On_Data_Merge_Small_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.OpenQuickVariableInpToggleButton;
            #endregion

            // Verify that the 'Exists' property of 'Open Quick Variable Input' toggle button equals 'True'
            Assert.AreEqual(this.Assert_QVI_Toggle_Button_Exists_On_Data_Merge_Small_ViewExpectedValues.OpenQuickVariableInpToggleButtonExists, openQuickVariableInpToggleButton.Exists, "QVI toggle button does not exist on Data Merge small view");
        }
        
        /// <summary>
        /// Assert_Random_Exists_OnDesignSurface - Use 'Assert_Random_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Random_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom random = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Random;
            #endregion

            // Verify that the 'Exists' property of 'DsfRandomActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Random_Exists_OnDesignSurfaceExpectedValues.RandomExists, random.Exists, "Random tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Read_File_Exists_OnDesignSurface - Use 'Assert_Read_File_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Read_File_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom fileRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileRead;
            #endregion

            // Verify that the 'Exists' property of 'DsfFileRead' custom control equals 'True'
            Assert.AreEqual(this.Assert_Read_File_Exists_OnDesignSurfaceExpectedValues.FileReadExists, fileRead.Exists, "Read File tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Read_File_Large_View_Exists_OnDesignSurface - Use 'Assert_Read_File_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Read_File_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom fileRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileRead;
            #endregion

            // Verify that the 'Exists' property of 'DsfFileRead' custom control equals 'True'
            Assert.AreEqual(this.Assert_Read_File_Large_View_Exists_OnDesignSurfaceExpectedValues.FileReadExists, fileRead.Exists, "Read file large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Read_Folder_Exists_OnDesignSurface - Use 'Assert_Read_Folder_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Read_Folder_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom folderRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FolderRead;
            #endregion

            // Verify that the 'Exists' property of 'DsfFolderRead' custom control equals 'True'
            Assert.AreEqual(this.Assert_Read_Folder_Exists_OnDesignSurfaceExpectedValues.FolderReadExists, folderRead.Exists, "Read folder tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Read_Folder_Large_View_Exists_OnDesignSurface - Use 'Assert_Read_Folder_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Read_Folder_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom folderRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FolderRead;
            #endregion

            // Verify that the 'Exists' property of 'DsfFolderRead' custom control equals 'True'
            Assert.AreEqual(this.Assert_Read_Folder_Large_View_Exists_OnDesignSurfaceExpectedValues.FolderReadExists, folderRead.Exists, "Read Folder large view does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_Refresh_Button_Exists_InExplorer - Use 'Assert_Refresh_Button_Exists_InExplorerExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Refresh_Button_Exists_InExplorer()
        {
            #region Variable Declarations
            WpfButton explorerRefreshButton = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerRefreshButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_Refresh_Button_Exists_InExplorerExpectedValues.ExplorerRefreshButtonExists, explorerRefreshButton.Exists, "Refresh button in the Explorer does not exist");
        }
        
        /// <summary>
        /// Assert_Refresh_Button_Source_Server_Exists - Use 'Assert_Refresh_Button_Source_Server_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Refresh_Button_Source_Server_Exists()
        {
            #region Variable Declarations
            WpfButton refreshSourceServerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.RefreshSourceServerButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_Refresh_Button_Source_Server_ExistsExpectedValues.RefreshSourceServerButtonExists, refreshSourceServerButton.Exists, "Refresh button source server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_Rename_Exists_OnDesignSurface - Use 'Assert_Rename_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Rename_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathRename = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathRename;
            #endregion

            // Verify that the 'Exists' property of 'DsfPathRename' custom control equals 'True'
            Assert.AreEqual(this.Assert_Rename_Exists_OnDesignSurfaceExpectedValues.PathRenameExists, pathRename.Exists, "Rename tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Rename_Large_View_Exists_OnDesignSurface - Use 'Assert_Rename_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Rename_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathRename = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathRename;
            #endregion

            // Verify that the 'Exists' property of 'DsfPathRename' custom control equals 'True'
            Assert.AreEqual(this.Assert_Rename_Large_View_Exists_OnDesignSurfaceExpectedValues.PathRenameExists, pathRename.Exists, "Rename tool large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Replace_Exists_OnDesignSurface - Use 'Assert_Replace_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Replace_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom replace = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Replace;
            #endregion

            // Verify that the 'Exists' property of 'DsfReplaceActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Replace_Exists_OnDesignSurfaceExpectedValues.ReplaceExists, replace.Exists, "Replace on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Result_Textbox_Exists_On_Data_Merge_Large_View - Use 'Assert_Result_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Result_Textbox_Exists_On_Data_Merge_Large_View()
        {
            #region Variable Declarations
            WpfEdit resultTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.LargeView.ResultTextbox;
            #endregion

            // Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_Result_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues.ResultTextboxExists, resultTextbox.Exists, "Result textbox does not exist on Data Merge large view");
        }
        
        /// <summary>
        /// Assert_Result_Textbox_Exists_On_Data_Merge_Small_View - Use 'Assert_Result_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Result_Textbox_Exists_On_Data_Merge_Small_View()
        {
            #region Variable Declarations
            WpfEdit resultTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.SmallView.ResultTextbox;
            #endregion

            // Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_Result_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues.ResultTextboxExists, resultTextbox.Exists, "Result textbox does not exist on Data Merge small view");
        }
        
        /// <summary>
        /// Assert_Row1_Align_Combobox_Exists_On_Data_Merge_Large_View - Use 'Assert_Row1_Align_Combobox_Exists_On_Data_Merge_Large_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Row1_Align_Combobox_Exists_On_Data_Merge_Large_View()
        {
            #region Variable Declarations
            WpfEdit paddingTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.LargeView.DatGrid.Row.PaddingCell.PaddingTextbox;
            WpfComboBox alignCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.LargeView.DatGrid.Row.AlignCell.AlignCombobox;
            #endregion

            // Verify that the 'Exists' property of 'UI__Padding_Row1_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_Row1_Align_Combobox_Exists_On_Data_Merge_Large_ViewExpectedValues.PaddingTextboxExists, paddingTextbox.Exists, "Row 1 padding textbox does not exist on Data Merge large view");

            // Verify that the 'Exists' property of 'UI__Row1_Alignment_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Assert_Row1_Align_Combobox_Exists_On_Data_Merge_Large_ViewExpectedValues.AlignComboboxExists, alignCombobox.Exists, "Row 1 align combobox does not exist on Data Merge large view");
        }
        
        /// <summary>
        /// Assert_Row1_Combobox_Exists_On_Data_Merge_Small_View - Use 'Assert_Row1_Combobox_Exists_On_Data_Merge_Small_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Row1_Combobox_Exists_On_Data_Merge_Small_View()
        {
            #region Variable Declarations
            WpfComboBox row1TypeCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.SmallView.UISmallDataGridTable.Row.TypeCell.Row1TypeCombobox;
            #endregion

            // Verify that the 'Exists' property of 'UI__Row1_MergeType_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Assert_Row1_Combobox_Exists_On_Data_Merge_Small_ViewExpectedValues.Row1TypeComboboxExists, row1TypeCombobox.Exists, "Row1 combo box does not exist on Data Merge small view");
        }
        
        /// <summary>
        /// Assert_Row1_Index_Textbox_Exists_On_Data_Merge_Small_View - Use 'Assert_Row1_Index_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Row1_Index_Textbox_Exists_On_Data_Merge_Small_View()
        {
            #region Variable Declarations
            WpfEdit row1IndexTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.SmallView.UISmallDataGridTable.Row.IndexCell.Row1IndexTextbox;
            #endregion

            // Verify that the 'Exists' property of 'UI__At_Row1_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_Row1_Index_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues.Row1IndexTextboxExists, row1IndexTextbox.Exists, "Row 1 Index Textbox does not exist on Data Merge small view");
        }
        
        /// <summary>
        /// Assert_Row1_Input_Textbox_Exists_On_Data_Merge_Large_View - Use 'Assert_Row1_Input_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Row1_Input_Textbox_Exists_On_Data_Merge_Large_View()
        {
            #region Variable Declarations
            WpfText inputFloatingText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.LargeView.DatGrid.Row.InputCell.InputTextbox.InputFloatingText;
            #endregion

            // Verify that the 'Exists' property of '[[Recordset().F1]]' label equals 'True'
            Assert.AreEqual(this.Assert_Row1_Input_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues.InputFloatingTextExists, inputFloatingText.Exists, "Input textbox does not exist on Data Merge large view");
        }
        
        /// <summary>
        /// Assert_Row1_Recordset_Textbox_Exists_On_Data_Merge_Small_View - Use 'Assert_Row1_Recordset_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Row1_Recordset_Textbox_Exists_On_Data_Merge_Small_View()
        {
            #region Variable Declarations
            WpfText inputFloatingText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.SmallView.UISmallDataGridTable.Row.InputCell.Row1InputTextbox.InputFloatingText;
            #endregion

            // Verify that the 'Exists' property of '[[Recordset().F1]]' label equals 'True'
            Assert.AreEqual(this.Assert_Row1_Recordset_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues.InputFloatingTextExists, inputFloatingText.Exists, "Row 1 textbox on Data Merge small view does not exist");
        }
        
        /// <summary>
        /// Assert_Row1_Using_Textbox_Exists_On_Data_Merge_Large_View - Use 'Assert_Row1_Using_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Row1_Using_Textbox_Exists_On_Data_Merge_Large_View()
        {
            #region Variable Declarations
            WpfEdit usingTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.LargeView.DatGrid.Row.UsingCell.UsingTextbox;
            #endregion

            // Verify that the 'Exists' property of 'UI__At_Row1_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_Row1_Using_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues.UsingTextboxExists, usingTextbox.Exists, "Row 1 using textbox does not exist on Data Merge large view");
        }
        
        /// <summary>
        /// Assert_Row1_With_Combobox_Exists_On_Data_Merge_large_View - Use 'Assert_Row1_With_Combobox_Exists_On_Data_Merge_large_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Row1_With_Combobox_Exists_On_Data_Merge_large_View()
        {
            #region Variable Declarations
            WpfComboBox widthCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.LargeView.DatGrid.Row.WidthCell.WidthCombobox;
            #endregion

            // Verify that the 'Exists' property of 'UI__Row1_MergeType_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Assert_Row1_With_Combobox_Exists_On_Data_Merge_large_ViewExpectedValues.WidthComboboxExists, widthCombobox.Exists, "With combobox does not exist on Data Merge large view");
        }
        
        /// <summary>
        /// Assert_Row2_Combobox_Exists_On_Data_Merge_Small_View - Use 'Assert_Row2_Combobox_Exists_On_Data_Merge_Small_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Row2_Combobox_Exists_On_Data_Merge_Small_View()
        {
            #region Variable Declarations
            WpfComboBox row2TypeCombobox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.SmallView.UISmallDataGridTable.Row.TypeCell.Row2TypeCombobox;
            #endregion

            // Verify that the 'Exists' property of 'UI__Row2_MergeType_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Assert_Row2_Combobox_Exists_On_Data_Merge_Small_ViewExpectedValues.Row2TypeComboboxExists, row2TypeCombobox.Exists, "Row 2 combobox does not exist on Data Merge large view");
        }
        
        /// <summary>
        /// Assert_Row2_Index_Textbox_Exists_On_Data_Merge_Small_View - Use 'Assert_Row2_Index_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Row2_Index_Textbox_Exists_On_Data_Merge_Small_View()
        {
            #region Variable Declarations
            WpfEdit row2IndexTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.SmallView.UISmallDataGridTable.Row.IndexCell.Row2IndexTextbox;
            #endregion

            // Verify that the 'Exists' property of 'UI__At_Row2_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_Row2_Index_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues.Row2IndexTextboxExists, row2IndexTextbox.Exists, "Row 2 index textbox does not exist on Data Merge small view");
        }
        
        /// <summary>
        /// Assert_Row2_Recordset_Textbox_Exists_On_Data_Merge_Small_View - Use 'Assert_Row2_Recordset_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Row2_Recordset_Textbox_Exists_On_Data_Merge_Small_View()
        {
            #region Variable Declarations
            WpfEdit row2InputTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.SmallView.UISmallDataGridTable.Row.InputCell.Row2InputTextbox;
            #endregion

            // Verify that the 'Exists' property of 'UI__Row2_InputVariable_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_Row2_Recordset_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues.Row2InputTextboxExists, row2InputTextbox.Exists, "Row 2 Recordset Textbox does not exist on Data Merge small view");
        }
        
        /// <summary>
        /// Assert_Save_Ribbon_Button_Enabled - Use 'Assert_Save_Ribbon_Button_EnabledExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Save_Ribbon_Button_Enabled()
        {
            #region Variable Declarations
            WpfButton saveButton = this.MainStudioWindow.SideMenuBar.SaveButton;
            #endregion

            // Verify that the 'Enabled' property of 'Save this tab' button equals 'True'
            Assert.AreEqual(this.Assert_Save_Ribbon_Button_EnabledExpectedValues.SaveButtonEnabled, saveButton.Enabled, "Save ribbon button is not enabled");
        }
        
        /// <summary>
        /// Assert_Save_Ribbon_Button_Exists - Use 'Assert_Save_Ribbon_Button_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Save_Ribbon_Button_Exists()
        {
            #region Variable Declarations
            WpfButton saveButton = this.MainStudioWindow.SideMenuBar.SaveButton;
            #endregion

            // Verify that the 'Exists' property of 'Save this tab' button equals 'True'
            Assert.AreEqual(this.Assert_Save_Ribbon_Button_ExistsExpectedValues.SaveButtonExists, saveButton.Exists, "Save ribbon button does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_CancelButton_Exists - Use 'Assert_SaveDialog_CancelButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_CancelButton_Exists()
        {
            #region Variable Declarations
            WpfButton cancelButton = this.SaveDialogWindow.CancelButton;
            #endregion

            // Verify that the 'Exists' property of 'Cancel' button equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_CancelButton_ExistsExpectedValues.CancelButtonExists, cancelButton.Exists, "Save dialog cancel button does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_ErrorLabel_Exists - Use 'Assert_SaveDialog_ErrorLabel_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_ErrorLabel_Exists()
        {
            #region Variable Declarations
            WpfText errorLabel = this.SaveDialogWindow.ErrorLabel;
            #endregion

            // Verify that the 'Exists' property of ''Name' cannot be empty.' label equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_ErrorLabel_ExistsExpectedValues.ErrorLabelExists, errorLabel.Exists, "Save dialog error label does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_Exists - Use 'Assert_SaveDialog_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_Exists()
        {
            #region Variable Declarations
            WpfWindow saveDialogWindow = this.SaveDialogWindow;
            #endregion

            // Verify that the 'Exists' property of 'SaveDialogView' window equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_ExistsExpectedValues.SaveDialogWindowExists, saveDialogWindow.Exists, "Save dialog window does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_ExplorerTree_Exists - Use 'Assert_SaveDialog_ExplorerTree_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_ExplorerTree_Exists()
        {
            #region Variable Declarations
            WpfTree explorerTree = this.SaveDialogWindow.ExplorerView.ExplorerTree;
            #endregion

            // Verify that the 'Exists' property of 'ExplorerTree' tree equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_ExplorerTree_ExistsExpectedValues.ExplorerTreeExists, explorerTree.Exists, "Save dialog explorer tree does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_ExplorerTreeItem_Exists - Use 'Assert_SaveDialog_ExplorerTreeItem_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_ExplorerTreeItem_Exists()
        {
            #region Variable Declarations
            WpfTreeItem explorerTreeItem = this.SaveDialogWindow.ExplorerView.ExplorerTree.ExplorerTreeItem;
            #endregion

            // Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_ExplorerTreeItem_ExistsExpectedValues.ExplorerTreeItemExists, explorerTreeItem.Exists, "Save dialog explorer tree item does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_ExplorerView_Exists - Use 'Assert_SaveDialog_ExplorerView_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_ExplorerView_Exists()
        {
            #region Variable Declarations
            WpfCustom explorerView = this.SaveDialogWindow.ExplorerView;
            #endregion

            // Verify that the 'Exists' property of 'ExplorerView' custom control equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_ExplorerView_ExistsExpectedValues.ExplorerViewExists, explorerView.Exists, "Save dialog explorer view does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_FilterTextbox_Exists - Use 'Assert_SaveDialog_FilterTextbox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_FilterTextbox_Exists()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.SaveDialogWindow.ExplorerView.SearchTextBox;
            #endregion

            // Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_FilterTextbox_ExistsExpectedValues.SearchTextBoxExists, searchTextBox.Exists, "Save dialog filter textbox does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_NameLabel_Exists - Use 'Assert_SaveDialog_NameLabel_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_NameLabel_Exists()
        {
            #region Variable Declarations
            WpfText nameLabel = this.SaveDialogWindow.NameLabel;
            #endregion

            // Verify that the 'Exists' property of 'Name:' label equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_NameLabel_ExistsExpectedValues.NameLabelExists, nameLabel.Exists, "Save dialog name label does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_RefreshButton_Exists - Use 'Assert_SaveDialog_RefreshButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_RefreshButton_Exists()
        {
            #region Variable Declarations
            WpfButton refreshButton = this.SaveDialogWindow.ExplorerView.RefreshButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_RefreshButton_ExistsExpectedValues.RefreshButtonExists, refreshButton.Exists, "Save dialog refresh button does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_SaveButton_Enabled - Use 'Assert_SaveDialog_SaveButton_EnabledExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_SaveButton_Enabled()
        {
            #region Variable Declarations
            WpfButton saveButton = this.SaveDialogWindow.SaveButton;
            #endregion

            // Verify that the 'Enabled' property of 'Save' button equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_SaveButton_EnabledExpectedValues.SaveButtonEnabled, saveButton.Enabled, "Save dialog save button is not enabled. Check workflow name is valid and that ano" +
                    "ther workflow by that name does not already exist.");
        }
        
        /// <summary>
        /// Assert_SaveDialog_SaveButton_Exists - Use 'Assert_SaveDialog_SaveButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_SaveButton_Exists()
        {
            #region Variable Declarations
            WpfButton saveButton = this.SaveDialogWindow.SaveButton;
            #endregion

            // Verify that the 'Exists' property of 'Save' button equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_SaveButton_ExistsExpectedValues.SaveButtonExists, saveButton.Exists, "Save dialog save button does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_ServiceName_Textbox_Exists - Use 'Assert_SaveDialog_ServiceName_Textbox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_ServiceName_Textbox_Exists()
        {
            #region Variable Declarations
            WpfEdit serviceNameTextBox = this.SaveDialogWindow.ServiceNameTextBox;
            #endregion

            // Verify that the 'Exists' property of 'ServiceNameTextBox' text box equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_ServiceName_Textbox_ExistsExpectedValues.ServiceNameTextBoxExists, serviceNameTextBox.Exists, "Save dialog service name textbox does not exist");
        }
        
        /// <summary>
        /// Assert_SaveDialog_WorkspaceName_Exists - Use 'Assert_SaveDialog_WorkspaceName_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SaveDialog_WorkspaceName_Exists()
        {
            #region Variable Declarations
            WpfText workspaceName = this.SaveDialogWindow.WorkspaceName;
            #endregion

            // Verify that the 'Exists' property of 'Unsaved 1' label equals 'True'
            Assert.AreEqual(this.Assert_SaveDialog_WorkspaceName_ExistsExpectedValues.WorkspaceNameExists, workspaceName.Exists, "Save dialog workspace name does not exist");
        }
        
        /// <summary>
        /// Assert_Scheduler_ConncectControl_Exists - Use 'Assert_Scheduler_ConncectControl_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_ConncectControl_Exists()
        {
            #region Variable Declarations
            WpfComboBox serverComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.ConnectControl.ServerComboBox;
            #endregion

            // Verify that the 'Exists' property of 'UI_SettingsServerComboBox_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_ConncectControl_ExistsExpectedValues.ServerComboBoxExists, serverComboBox.Exists, "Connect control in the scheduler does not exist");
        }
        
        /// <summary>
        /// Assert_Scheduler_ConnectButton_Exists - Use 'Assert_Scheduler_ConnectButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_ConnectButton_Exists()
        {
            #region Variable Declarations
            WpfButton connectServerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.ConnectControl.ConnectServerButton;
            #endregion

            // Verify that the 'Exists' property of 'UI_SettingsServerConnectButton_AutoID' button equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_ConnectButton_ExistsExpectedValues.ConnectServerButtonExists, connectServerButton.Exists, "Connect button in the scheduler does not exist");
        }
        
        /// <summary>
        /// Assert_Scheduler_ConnectControl_Edit_Exists - Use 'Assert_Scheduler_ConnectControl_Edit_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_ConnectControl_Edit_Exists()
        {
            #region Variable Declarations
            WpfButton editServerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.ConnectControl.EditServerButton;
            #endregion

            // Verify that the 'Exists' property of '...' button equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_ConnectControl_Edit_ExistsExpectedValues.EditServerButtonExists, editServerButton.Exists, "Edit button in the scheduler does not exist");
        }
        
        /// <summary>
        /// Assert_Scheduler_CreateNewTask_Exists - Use 'Assert_Scheduler_CreateNewTask_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_CreateNewTask_Exists()
        {
            #region Variable Declarations
            WpfButton newTaskButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.SchedulesList.SchedulerListItem.CreateTaskButton.NewTaskButton;
            #endregion

            // Verify that the 'Exists' property of first button next to '' button equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_CreateNewTask_ExistsExpectedValues.NewTaskButtonExists, newTaskButton.Exists, "Create new task button does not exist in the scheduler");
        }
        
        /// <summary>
        /// Assert_Scheduler_DeleteButton_Exists - Use 'Assert_Scheduler_DeleteButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_DeleteButton_Exists()
        {
            #region Variable Declarations
            WpfButton deleteTaskButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.SchedulesList.DeleteTaskButton;
            #endregion

            // Verify that the 'Exists' property of '...' button equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_DeleteButton_ExistsExpectedValues.DeleteTaskButtonExists, deleteTaskButton.Exists, "Delete task button does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_DisabledRadioButton_Exists - Use 'Assert_Scheduler_DisabledRadioButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_DisabledRadioButton_Exists()
        {
            #region Variable Declarations
            WpfRadioButton disabledRadioButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.DisabledRadioButton;
            #endregion

            // Verify that the 'Exists' property of 'Disabled' radio button equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_DisabledRadioButton_ExistsExpectedValues.DisabledRadioButtonExists, disabledRadioButton.Exists, "Disable radio button in the scheduler window does not exist");
        }
        
        /// <summary>
        /// Assert_Scheduler_EditTrigger_Exists - Use 'Assert_Scheduler_EditTrigger_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_EditTrigger_Exists()
        {
            #region Variable Declarations
            WpfButton editTriggerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.EditTriggerButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_EditTrigger_ExistsExpectedValues.EditTriggerButtonExists, editTriggerButton.Exists, "Edit trigger button does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_EnabledRadioButton_Exists - Use 'Assert_Scheduler_EnabledRadioButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_EnabledRadioButton_Exists()
        {
            #region Variable Declarations
            WpfRadioButton enabledRadioButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.EnabledRadioButton;
            #endregion

            // Verify that the 'Exists' property of 'Enabled' radio button equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_EnabledRadioButton_ExistsExpectedValues.EnabledRadioButtonExists, enabledRadioButton.Exists, "Enabled Radio button does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_ErrorMessage_Exists - Use 'Assert_Scheduler_ErrorMessage_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_ErrorMessage_Exists()
        {
            #region Variable Declarations
            WpfText errorMessageText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.ErrorMessageText;
            #endregion

            // Verify that the 'Exists' property of 'Please select a workflow to schedule' label equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_ErrorMessage_ExistsExpectedValues.ErrorMessageTextExists, errorMessageText.Exists, "Scheduler error message does not exist ");
        }
        
        /// <summary>
        /// Assert_Scheduler_HistoryInput_Exists - Use 'Assert_Scheduler_HistoryInput_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_HistoryInput_Exists()
        {
            #region Variable Declarations
            WpfEdit numOfHistoryTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.NumOfHistoryTextBoxEdit;
            #endregion

            // Verify that the 'Exists' property of 'UI_NumOfHisTextBox' text box equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_HistoryInput_ExistsExpectedValues.NumOfHistoryTextBoxEditExists, numOfHistoryTextBoxEdit.Exists, "History Input value does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_HistoryLabel_Exists - Use 'Assert_Scheduler_HistoryLabel_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_HistoryLabel_Exists()
        {
            #region Variable Declarations
            WpfText numberofHistoryText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.NumberofHistoryText;
            #endregion

            // Verify that the 'Exists' property of 'Number of History records to load (0 = all)' label equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_HistoryLabel_ExistsExpectedValues.NumberofHistoryTextExists, numberofHistoryText.Exists, "Number of History records label does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_HistoryTable_Exists - Use 'Assert_Scheduler_HistoryTable_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_HistoryTable_Exists()
        {
            #region Variable Declarations
            WpfTable historyTable = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.HistoryTable;
            #endregion

            // Verify that the 'Exists' property of table equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_HistoryTable_ExistsExpectedValues.HistoryTableExists, historyTable.Exists, "Scheduled task history does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_NameInput_Exists - Use 'Assert_Scheduler_NameInput_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_NameInput_Exists()
        {
            #region Variable Declarations
            WpfEdit nameTextbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.NameTextbox;
            #endregion

            // Verify that the 'Exists' property of 'UI_NameTextbox' text box equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_NameInput_ExistsExpectedValues.NameTextboxExists, nameTextbox.Exists, "Name Input does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_NameLabel_Exists - Use 'Assert_Scheduler_NameLabel_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_NameLabel_Exists()
        {
            #region Variable Declarations
            WpfText nameText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.NameText;
            #endregion

            // Verify that the 'Exists' property of 'Name' label equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_NameLabel_ExistsExpectedValues.NameTextExists, nameText.Exists, "name label does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_PasswordInput_Exists - Use 'Assert_Scheduler_PasswordInput_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_PasswordInput_Exists()
        {
            #region Variable Declarations
            WpfEdit passwordTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.PasswordTextBoxEdit;
            #endregion

            // Verify that the 'Exists' property of 'UI_PasswordBox' text box equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_PasswordInput_ExistsExpectedValues.PasswordTextBoxEditExists, passwordTextBoxEdit.Exists, "Password input does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_PasswordLabel_Exists - Use 'Assert_Scheduler_PasswordLabel_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_PasswordLabel_Exists()
        {
            #region Variable Declarations
            WpfText passwordText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.PasswordText;
            #endregion

            // Verify that the 'Exists' property of 'Password' label equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_PasswordLabel_ExistsExpectedValues.PasswordTextExists, passwordText.Exists, "Password label does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_ResourcePicker_Exists - Use 'Assert_Scheduler_ResourcePicker_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_ResourcePicker_Exists()
        {
            #region Variable Declarations
            WpfButton resourcePickerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.ResourcePickerButton;
            #endregion

            // Verify that the 'Exists' property of '...' button equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_ResourcePicker_ExistsExpectedValues.ResourcePickerButtonExists, resourcePickerButton.Exists, "Resource picker button does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_RunTask_Checkbox_Exists - Use 'Assert_Scheduler_RunTask_Checkbox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_RunTask_Checkbox_Exists()
        {
            #region Variable Declarations
            WpfCheckBox runTaskCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.RunTaskCheckBox;
            #endregion

            // Verify that the 'Exists' property of 'Run task as soon as possible after a scheduled sta...' check box equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_RunTask_Checkbox_ExistsExpectedValues.RunTaskCheckBoxExists, runTaskCheckBox.Exists, "Run task checkbox does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_Status_RadioButton_Exists - Use 'Assert_Scheduler_Status_RadioButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_Status_RadioButton_Exists()
        {
            #region Variable Declarations
            WpfCheckBox statusCheckbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.SchedulesList.NewTask.StatusCheckbox;
            #endregion

            // Verify that the 'Exists' property of check box equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_Status_RadioButton_ExistsExpectedValues.StatusCheckboxExists, statusCheckbox.Exists, "Status radio button does not exist in the scheduler");
        }
        
        /// <summary>
        /// Assert_Scheduler_StatusLabe_Exists - Use 'Assert_Scheduler_StatusLabe_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_StatusLabe_Exists()
        {
            #region Variable Declarations
            WpfText statusText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.StatusText;
            #endregion

            // Verify that the 'Exists' property of 'Status' label equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_StatusLabe_ExistsExpectedValues.StatusTextExists, statusText.Exists, "Status label does not exist in the scheduler");
        }
        
        /// <summary>
        /// Assert_Scheduler_TriggerLabel_Exists - Use 'Assert_Scheduler_TriggerLabel_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_TriggerLabel_Exists()
        {
            #region Variable Declarations
            WpfText triggerText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.TriggerText;
            #endregion

            // Verify that the 'Exists' property of 'Triggered at' label equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_TriggerLabel_ExistsExpectedValues.TriggerTextExists, triggerText.Exists, "Trigger label does not exist in the Scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_TriggerValue_Exists - Use 'Assert_Scheduler_TriggerValue_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_TriggerValue_Exists()
        {
            #region Variable Declarations
            WpfText triggerValueText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.TriggerValueText;
            #endregion

            // Verify that the 'Exists' property of 'At 2:40 PM every day' label equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_TriggerValue_ExistsExpectedValues.TriggerValueTextExists, triggerValueText.Exists, "Trigger value does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_UserAccountLabel_Exists - Use 'Assert_Scheduler_UserAccountLabel_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_UserAccountLabel_Exists()
        {
            #region Variable Declarations
            WpfText uIRunasthefollowinguseText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.UIRunasthefollowinguseText;
            #endregion

            // Verify that the 'Exists' property of 'Run as the following user account' label equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_UserAccountLabel_ExistsExpectedValues.UIRunasthefollowinguseTextExists, uIRunasthefollowinguseText.Exists, "user account label does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_UsernameInput_Exists - Use 'Assert_Scheduler_UsernameInput_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_UsernameInput_Exists()
        {
            #region Variable Declarations
            WpfEdit userNameTextBoxEdit = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.UserNameTextBoxEdit;
            #endregion

            // Verify that the 'Exists' property of 'UI_UserNameTextBox' text box equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_UsernameInput_ExistsExpectedValues.UserNameTextBoxEditExists, userNameTextBoxEdit.Exists, "Username input does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_Usernamelabel_Exists - Use 'Assert_Scheduler_Usernamelabel_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_Usernamelabel_Exists()
        {
            #region Variable Declarations
            WpfText usernameText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.UsernameText;
            #endregion

            // Verify that the 'Exists' property of 'Username' label equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_Usernamelabel_ExistsExpectedValues.UsernameTextExists, usernameText.Exists, "Username label does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_WorkflowInput_Exists - Use 'Assert_Scheduler_WorkflowInput_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_WorkflowInput_Exists()
        {
            #region Variable Declarations
            WpfEdit workflowNameTextBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.WorkflowNameTextBox;
            #endregion

            // Verify that the 'Exists' property of 'UI_WorkflowNameTextBox_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_WorkflowInput_ExistsExpectedValues.WorkflowNameTextBoxExists, workflowNameTextBox.Exists, "Workflow input does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Scheduler_WorkflowLabel_Exists - Use 'Assert_Scheduler_WorkflowLabel_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Scheduler_WorkflowLabel_Exists()
        {
            #region Variable Declarations
            WpfText workflowText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.WorkflowText;
            #endregion

            // Verify that the 'Exists' property of 'Workflow' label equals 'True'
            Assert.AreEqual(this.Assert_Scheduler_WorkflowLabel_ExistsExpectedValues.WorkflowTextExists, workflowText.Exists, "Workflow label does not exist in the scheduler window");
        }
        
        /// <summary>
        /// Assert_Script_Exists_OnDesignSurface - Use 'Assert_Script_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Script_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom scripting = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Scripting;
            #endregion

            // Verify that the 'Exists' property of 'DsfScriptingActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Script_Exists_OnDesignSurfaceExpectedValues.ScriptingExists, scripting.Exists, "Script tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Sequence_Exists_OnDesignSurface - Use 'Assert_Sequence_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sequence_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sequence = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Sequence;
            #endregion

            // Verify that the 'Exists' property of 'DsfSequenceActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sequence_Exists_OnDesignSurfaceExpectedValues.SequenceExists, sequence.Exists, "Sequence on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Server_Source_Wizard_Address_Protocol_Dropdown_Contains_Http - Use 'Assert_Server_Source_Wizard_Address_Protocol_Dropdown_Contains_HttpExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Server_Source_Wizard_Address_Protocol_Dropdown_Contains_Http()
        {
            #region Variable Declarations
            WpfCustom comboboxListItemAsHttp = this.MainStudioWindow.ComboboxListItemAsHttp;
            #endregion

            // Verify that the 'Exists' property of 'http' custom control equals 'True'
            Assert.AreEqual(this.Assert_Server_Source_Wizard_Address_Protocol_Dropdown_Contains_HttpExpectedValues.ComboboxListItemAsHttpExists, comboboxListItemAsHttp.Exists, "Http does not exist in server source wizard address protocol dropdown list.");
        }
        
        /// <summary>
        /// Assert_Server_Source_Wizard_Address_Protocol_Dropdown_Exists - Use 'Assert_Server_Source_Wizard_Address_Protocol_Dropdown_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Server_Source_Wizard_Address_Protocol_Dropdown_Exists()
        {
            #region Variable Declarations
            WpfButton toggleDropdown = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.ProtocolCombobox.ToggleDropdown;
            #endregion

            // Verify that the 'Exists' property of 'ToggleButton' button equals 'True'
            Assert.AreEqual(this.Assert_Server_Source_Wizard_Address_Protocol_Dropdown_ExistsExpectedValues.ToggleDropdownExists, toggleDropdown.Exists, "Server source wizard does not contain protocol dropdown");
        }
        
        /// <summary>
        /// Assert_Server_Source_Wizard_Address_Protocol_Equals_Http - Use 'Assert_Server_Source_Wizard_Address_Protocol_Equals_HttpExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Server_Source_Wizard_Address_Protocol_Equals_Http()
        {
            #region Variable Declarations
            WpfText httpSelectedItemText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.ProtocolCombobox.HttpSelectedItemText;
            #endregion

            // Verify that the 'DisplayText' property of 'http' label equals 'http'
            Assert.AreEqual(this.Assert_Server_Source_Wizard_Address_Protocol_Equals_HttpExpectedValues.HttpSelectedItemTextDisplayText, httpSelectedItemText.DisplayText, "Server source wizard address protocol is not equal to http.");
        }
        
        /// <summary>
        /// Assert_Server_Source_Wizard_Address_Textbox_Exists - Use 'Assert_Server_Source_Wizard_Address_Textbox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Server_Source_Wizard_Address_Textbox_Exists()
        {
            #region Variable Declarations
            WpfEdit addressEditBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.AddressComboBox.AddressEditBox;
            #endregion

            // Verify that the 'Exists' property of 'Text' text box equals 'True'
            Assert.AreEqual(this.Assert_Server_Source_Wizard_Address_Textbox_ExistsExpectedValues.AddressEditBoxExists, addressEditBox.Exists, "Server source wizard address textbox does not exist");
        }
        
        /// <summary>
        /// Assert_Server_Source_Wizard_Address_Textbox_Text_Equals_TSTCIREMOTE - Use 'Assert_Server_Source_Wizard_Address_Textbox_Text_Equals_TSTCIREMOTEExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Server_Source_Wizard_Address_Textbox_Text_Equals_TSTCIREMOTE()
        {
            #region Variable Declarations
            WpfEdit addressEditBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.AddressComboBox.AddressEditBox;
            #endregion

            // Verify that the 'Text' property of 'Text' text box equals 'TST-CI-REMOTE'
            Assert.AreEqual(this.Assert_Server_Source_Wizard_Address_Textbox_Text_Equals_TSTCIREMOTEExpectedValues.AddressEditBoxText, addressEditBox.Text, "Server source address textbox text does not equal TST-CI-REMOTE");
        }
        
        /// <summary>
        /// Assert_Server_Source_Wizard_DropdownList_Contains_TSTCIREMOTE - Use 'Assert_Server_Source_Wizard_DropdownList_Contains_TSTCIREMOTEExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Server_Source_Wizard_DropdownList_Contains_TSTCIREMOTE()
        {
            #region Variable Declarations
            WpfListItem tSTCIREMOTE = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.AddressComboBox.TSTCIREMOTE;
            #endregion

            // Verify that the 'Exists' property of 'TST-CI-REMOTE' list item equals 'True'
            Assert.AreEqual(this.Assert_Server_Source_Wizard_DropdownList_Contains_TSTCIREMOTEExpectedValues.TSTCIREMOTEExists, tSTCIREMOTE.Exists, "TSTCIREMOTE does not exist in server source wizard drop down list");
        }
        
        /// <summary>
        /// Assert_Server_Source_Wizard_Test_Connection_Button_Exists - Use 'Assert_Server_Source_Wizard_Test_Connection_Button_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Server_Source_Wizard_Test_Connection_Button_Exists()
        {
            #region Variable Declarations
            WpfButton testConnectionButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.TestConnectionButton;
            #endregion

            // Verify that the 'Exists' property of 'Test Connection' button equals 'True'
            Assert.AreEqual(this.Assert_Server_Source_Wizard_Test_Connection_Button_ExistsExpectedValues.TestConnectionButtonExists, testConnectionButton.Exists, "Server source wizard does not contain a test connection button");
        }
        
        /// <summary>
        /// Assert_Server_Source_Wizard_Test_Passed - Use 'Assert_Server_Source_Wizard_Test_PassedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Server_Source_Wizard_Test_Passed()
        {
            #region Variable Declarations
            WpfText errorText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.ErrorText;
            #endregion

            // Verify that the 'DisplayText' property of 'TestErrorText' label equals 'Passed'
            Assert.AreEqual(this.Assert_Server_Source_Wizard_Test_PassedExpectedValues.ErrorTextDisplayText, errorText.DisplayText, "Server source wizard test failed to connect to remote Warewolf server");
        }
        
        /// <summary>
        /// Assert_Server_Version_Exists - Use 'Assert_Server_Version_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Server_Version_Exists()
        {
            #region Variable Declarations
            WpfWindow splashPageWindow = this.SplashPageWindow;
            #endregion

            // Verify that the 'Exists' property of 'SplashPage' window equals 'True'
            Assert.AreEqual(this.Assert_Server_Version_ExistsExpectedValues.SplashPageWindowExists, splashPageWindow.Exists, "Server version splash page does not exist");
        }
        
        /// <summary>
        /// Assert_Service_Picker_Cancel_Button_Exists - Use 'Assert_Service_Picker_Cancel_Button_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Service_Picker_Cancel_Button_Exists()
        {
            #region Variable Declarations
            WpfButton cancel = this.MainStudioWindow.ServicePickerDialog.Cancel;
            #endregion

            // Verify that the 'Exists' property of 'Cancel' button equals 'True'
            Assert.AreEqual(this.Assert_Service_Picker_Cancel_Button_ExistsExpectedValues.CancelExists, cancel.Exists, "Service picker dialog cancel button does not exist");
        }
        
        /// <summary>
        /// Assert_Service_Picker_Dialog_Exists - Use 'Assert_Service_Picker_Dialog_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Service_Picker_Dialog_Exists()
        {
            #region Variable Declarations
            WpfWindow servicePickerDialog = this.MainStudioWindow.ServicePickerDialog;
            #endregion

            // Verify that the 'Exists' property of 'Wpf' window equals 'True'
            Assert.AreEqual(this.Assert_Service_Picker_Dialog_ExistsExpectedValues.ServicePickerDialogExists, servicePickerDialog.Exists, "Service picker dialog does not exist");
        }
        
        /// <summary>
        /// Assert_ServiceLabel_DestinationServer_Exists - Use 'Assert_ServiceLabel_DestinationServer_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_ServiceLabel_DestinationServer_Exists()
        {
            #region Variable Declarations
            WpfText servicesText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.ServicesText;
            #endregion

            // Verify that the 'Exists' property of 'Services' label equals 'True'
            Assert.AreEqual(this.Assert_ServiceLabel_DestinationServer_ExistsExpectedValues.ServicesTextExists, servicesText.Exists, "Services Label in destination server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_ServicesCount_Label_Exists - Use 'Assert_ServicesCount_Label_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_ServicesCount_Label_Exists()
        {
            #region Variable Declarations
            WpfText serviceCountText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.ServiceCountText;
            #endregion

            // Verify that the 'Exists' property of '0' label equals 'True'
            Assert.AreEqual(this.Assert_ServicesCount_Label_ExistsExpectedValues.ServiceCountTextExists, serviceCountText.Exists, "Service Count value in destination server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_Settings_ConnectButton_Exists - Use 'Assert_Settings_ConnectButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Settings_ConnectButton_Exists()
        {
            #region Variable Declarations
            WpfButton connectServerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.ConnectControl.ConnectServerButton;
            #endregion

            // Verify that the 'Exists' property of 'UI_SettingsServerConnectButton_AutoID' button equals 'True'
            Assert.AreEqual(this.Assert_Settings_ConnectButton_ExistsExpectedValues.ConnectServerButtonExists, connectServerButton.Exists, "Connect button in the settings window does not exist");
        }
        
        /// <summary>
        /// Assert_Settings_ConnectControl_Edit_Button_Exists - Use 'Assert_Settings_ConnectControl_Edit_Button_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Settings_ConnectControl_Edit_Button_Exists()
        {
            #region Variable Declarations
            WpfButton editServerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.ConnectControl.EditServerButton;
            #endregion

            // Verify that the 'Exists' property of '...' button equals 'True'
            Assert.AreEqual(this.Assert_Settings_ConnectControl_Edit_Button_ExistsExpectedValues.EditServerButtonExists, editServerButton.Exists, "Edit Server button does not exist in the Settings window");
        }
        
        /// <summary>
        /// Assert_Settings_ConnectControl_Exists - Use 'Assert_Settings_ConnectControl_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Settings_ConnectControl_Exists()
        {
            #region Variable Declarations
            WpfComboBox settingsServerComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.ConnectControl.SettingsServerComboBox;
            #endregion

            // Verify that the 'Exists' property of 'UI_SettingsServerComboBox_AutoID' combo box equals 'True'
            Assert.AreEqual(this.Assert_Settings_ConnectControl_ExistsExpectedValues.SettingsServerComboBoxExists, settingsServerComboBox.Exists, "Connect Control in the Settings window does not exist");
        }
        
        /// <summary>
        /// Assert_Settings_LoggingTab_Exists - Use 'Assert_Settings_LoggingTab_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Settings_LoggingTab_Exists()
        {
            #region Variable Declarations
            WpfTabPage loggingTab = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.UIItemTabList.LoggingTab;
            #endregion

            // Verify that the 'Exists' property of 'System.Windows.Controls.TabItem Header: Content:' tab equals 'True'
            Assert.AreEqual(this.Assert_Settings_LoggingTab_ExistsExpectedValues.LoggingTabExists, loggingTab.Exists, "Logging tab does not exist in the settings window");
        }
        
        /// <summary>
        /// Assert_Settings_ResourcePermissions_Exists - Use 'Assert_Settings_ResourcePermissions_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Settings_ResourcePermissions_Exists()
        {
            #region Variable Declarations
            WpfTable resourcePermissions = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.UIItemTabList.SecurityTab.SecurityWindow.ResourcePermissions;
            #endregion

            // Verify that the 'Exists' property of 'ResourcePermissionsDataGrid' table equals 'True'
            Assert.AreEqual(this.Assert_Settings_ResourcePermissions_ExistsExpectedValues.ResourcePermissionsExists, resourcePermissions.Exists, "Resource Permissions does not exist in the settings window");
        }
        
        /// <summary>
        /// Assert_Settings_SecurityTab_Exists - Use 'Assert_Settings_SecurityTab_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Settings_SecurityTab_Exists()
        {
            #region Variable Declarations
            WpfTabPage securityTab = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.UIItemTabList.SecurityTab;
            #endregion

            // Verify that the 'Exists' property of 'System.Windows.Controls.TabItem Header: Content:' tab equals 'True'
            Assert.AreEqual(this.Assert_Settings_SecurityTab_ExistsExpectedValues.SecurityTabExists, securityTab.Exists, "Security tab does not exist in the settings window");
        }
        
        /// <summary>
        /// Assert_Settings_ServerPermissions_Exists - Use 'Assert_Settings_ServerPermissions_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Settings_ServerPermissions_Exists()
        {
            #region Variable Declarations
            WpfTable serverPermissions = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.UIItemTabList.SecurityTab.SecurityWindow.ServerPermissions;
            #endregion

            // Verify that the 'Exists' property of 'ServerPermissionsDataGrid' table equals 'True'
            Assert.AreEqual(this.Assert_Settings_ServerPermissions_ExistsExpectedValues.ServerPermissionsExists, serverPermissions.Exists, "Server Permissions does not exist in the settings window");
        }
        
        /// <summary>
        /// Assert_Sharepoint_Create_Exists_OnDesignSurface - Use 'Assert_Sharepoint_Create_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sharepoint_Create_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointCreate = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCreate;
            #endregion

            // Verify that the 'Exists' property of 'SharepointCreateListItemActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sharepoint_Create_Exists_OnDesignSurfaceExpectedValues.SharepointCreateExists, sharepointCreate.Exists, "Sharepoint create tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Sharepoint_Create_Large_View_Exists_OnDesignSurface - Use 'Assert_Sharepoint_Create_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sharepoint_Create_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointCreate = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCreate;
            #endregion

            // Verify that the 'Exists' property of 'SharepointCreateListItemActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sharepoint_Create_Large_View_Exists_OnDesignSurfaceExpectedValues.SharepointCreateExists, sharepointCreate.Exists, "Sharepoint Create tool large view does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_Sharepoint_Delete_Exists_OnDesignSurface - Use 'Assert_Sharepoint_Delete_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sharepoint_Delete_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointDelete = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointDelete;
            #endregion

            // Verify that the 'Exists' property of 'SharepointDeleteListItemActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sharepoint_Delete_Exists_OnDesignSurfaceExpectedValues.SharepointDeleteExists, sharepointDelete.Exists, "Sharepoint Delete tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Sharepoint_Delete_Large_View_Exists_OnDesignSurface - Use 'Assert_Sharepoint_Delete_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sharepoint_Delete_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointDelete = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointDelete;
            #endregion

            // Verify that the 'Exists' property of 'SharepointDeleteListItemActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sharepoint_Delete_Large_View_Exists_OnDesignSurfaceExpectedValues.SharepointDeleteExists, sharepointDelete.Exists, "Sharepoint Delete tool large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Sharepoint_Read_Exists_OnDesignSurface - Use 'Assert_Sharepoint_Read_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sharepoint_Read_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointRead;
            #endregion

            // Verify that the 'Exists' property of 'SharepointReadListActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sharepoint_Read_Exists_OnDesignSurfaceExpectedValues.SharepointReadExists, sharepointRead.Exists, "Sharepoint Read tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Sharepoint_Read_Large_View_Exists_OnDesignSurface - Use 'Assert_Sharepoint_Read_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sharepoint_Read_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointRead;
            #endregion

            // Verify that the 'Exists' property of 'SharepointReadListActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sharepoint_Read_Large_View_Exists_OnDesignSurfaceExpectedValues.SharepointReadExists, sharepointRead.Exists, "Sharepoint Read large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Sharepoint_Update_Exists_OnDesignSurface - Use 'Assert_Sharepoint_Update_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sharepoint_Update_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointUpdate = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointUpdate;
            #endregion

            // Verify that the 'Exists' property of 'SharepointUpdateListItemActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sharepoint_Update_Exists_OnDesignSurfaceExpectedValues.SharepointUpdateExists, sharepointUpdate.Exists, "Sharepoint update tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Sharepoint_Update_Large_View_Exists_OnDesignSurface - Use 'Assert_Sharepoint_Update_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sharepoint_Update_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointUpdate = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointUpdate;
            #endregion

            // Verify that the 'Exists' property of 'SharepointUpdateListItemActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sharepoint_Update_Large_View_Exists_OnDesignSurfaceExpectedValues.SharepointUpdateExists, sharepointUpdate.Exists, "Sharepoint Update tool large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_ShowDependencies_Button_DestinationServer_Exists - Use 'Assert_ShowDependencies_Button_DestinationServer_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_ShowDependencies_Button_DestinationServer_Exists()
        {
            #region Variable Declarations
            WpfButton showDependenciesButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.ShowDependenciesButton;
            #endregion

            // Verify that the 'Exists' property of 'Select All Dependencies' button equals 'True'
            Assert.AreEqual(this.Assert_ShowDependencies_Button_DestinationServer_ExistsExpectedValues.ShowDependenciesButtonExists, showDependenciesButton.Exists, "Select All Dependencies button Destination Server does not exist");
        }
        
        /// <summary>
        /// Assert_Sort_Records_Exists_OnDesignSurface - Use 'Assert_Sort_Records_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sort_Records_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sortRecords = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SortRecords;
            #endregion

            // Verify that the 'Exists' property of 'DsfSortRecordsActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sort_Records_Exists_OnDesignSurfaceExpectedValues.SortRecordsExists, sortRecords.Exists, "Sort Record tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Source_Server_Name_Exists - Use 'Assert_Source_Server_Name_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Source_Server_Name_Exists()
        {
            #region Variable Declarations
            WpfTreeItem sourceServerName = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.SourceServerName;
            #endregion

            // Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
            Assert.AreEqual(this.Assert_Source_Server_Name_ExistsExpectedValues.SourceServerNameExists, sourceServerName.Exists, "Source server name in deploy window does not exist");
        }
        
        /// <summary>
        /// Assert_SourceCount_DestinationServer_Exists - Use 'Assert_SourceCount_DestinationServer_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SourceCount_DestinationServer_Exists()
        {
            #region Variable Declarations
            WpfText sourceCountText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.SourceCountText;
            #endregion

            // Verify that the 'Exists' property of '0' label equals 'True'
            Assert.AreEqual(this.Assert_SourceCount_DestinationServer_ExistsExpectedValues.SourceCountTextExists, sourceCountText.Exists, "Source Count value in the destination server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_SourceLabel_DestinationServer_Exists - Use 'Assert_SourceLabel_DestinationServer_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SourceLabel_DestinationServer_Exists()
        {
            #region Variable Declarations
            WpfText sourcesText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.SourcesText;
            #endregion

            // Verify that the 'Exists' property of 'Sources' label equals 'True'
            Assert.AreEqual(this.Assert_SourceLabel_DestinationServer_ExistsExpectedValues.SourcesTextExists, sourcesText.Exists, "Source label in destination server does not exist in the deploy window");
        }
        
        /// <summary>
        /// Assert_Sql_Bulk_insert_Exists_OnDesignSurface - Use 'Assert_Sql_Bulk_insert_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sql_Bulk_insert_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sqlBulkInsert = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlBulkInsert;
            #endregion

            // Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sql_Bulk_insert_Exists_OnDesignSurfaceExpectedValues.SqlBulkInsertExists, sqlBulkInsert.Exists, "Sql Bulk Insert tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurface - Use 'Assert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sqlBulkInsert = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlBulkInsert;
            #endregion

            // Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurfaceExpectedValues.SqlBulkInsertExists, sqlBulkInsert.Exists, "Sql Bulk Insert large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurface - Use 'Assert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sqlBulkInsert = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlBulkInsert;
            #endregion

            // Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurfaceExpectedValues.SqlBulkInsertExists, sqlBulkInsert.Exists, "Sql Bulk Insert Qvi window on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_SQL_Server_Database_Large_View_Exists_OnDesignSurface - Use 'Assert_SQL_Server_Database_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SQL_Server_Database_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sqlServerDatabase = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase;
            #endregion

            // Verify that the 'Exists' property of 'DsfSqlServerDatabaseActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_SQL_Server_Database_Large_View_Exists_OnDesignSurfaceExpectedValues.SqlServerDatabaseExists, sqlServerDatabase.Exists, "SQL Server Database does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_StartNode_Exists - Use 'Assert_StartNode_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_StartNode_Exists()
        {
            #region Variable Declarations
            WpfCustom startNode = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.StartNode;
            #endregion

            // Wait for 1 seconds for user delay between actions; Verify that the 'Exists' property of 'StartNode' custom control equals 'True'
            Playback.Wait(1000);
            Assert.AreEqual(this.Assert_StartNode_ExistsExpectedValues.StartNodeExists, startNode.Exists, "Start Node Does Not Exist");
        }
        
        /// <summary>
        /// Assert_SuccessMessage_Label_Exists - Use 'Assert_SuccessMessage_Label_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_SuccessMessage_Label_Exists()
        {
            #region Variable Declarations
            WpfText successMessageText = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DeployTab.DestinationServer.SuccessMessageText;
            #endregion

            // Verify that the 'Exists' property of '1 Resource Deployed Successfully.' label equals 'True'
            Assert.AreEqual(this.Assert_SuccessMessage_Label_ExistsExpectedValues.SuccessMessageTextExists, successMessageText.Exists, "Success message label does not exist in destination server of the deploy window");
        }
        
        /// <summary>
        /// Assert_Switch_Exists_OnDesignSurface - Use 'Assert_Switch_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Switch_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom switch1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Switch;
            #endregion

            // Verify that the 'Exists' property of 'FlowSwitch`1[String]' custom control equals 'True'
            Assert.AreEqual(this.Assert_Switch_Exists_OnDesignSurfaceExpectedValues.SwitchExists, switch1.Exists, "Switch on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Switch_Window_Exists_OnDesignSurface - Use 'Assert_Switch_Window_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Switch_Window_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfWindow decisionDialog = this.DecisionDialog;
            #endregion

            // Verify that the 'Exists' property of 'Wpf' window equals 'True'
            Assert.AreEqual(this.Assert_Switch_Window_Exists_OnDesignSurfaceExpectedValues.DecisionDialogExists, decisionDialog.Exists, "Switch Window does not exist");
        }
        
        /// <summary>
        /// Assert_System_Info_Qvi_Large_View_Exists_OnDesignSurface - Use 'Assert_System_Info_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_System_Info_Qvi_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom gatherSystemInfo = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.GatherSystemInfo;
            #endregion

            // Verify that the 'Exists' property of 'DsfGatherSystemInformationActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_System_Info_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues.GatherSystemInfoExists, gatherSystemInfo.Exists, "System Info QVI window does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_System_information_Exists_OnDesignSurface - Use 'Assert_System_information_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_System_information_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom gatherSystemInfo = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.GatherSystemInfo;
            #endregion

            // Verify that the 'Exists' property of 'DsfGatherSystemInformationActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_System_information_Exists_OnDesignSurfaceExpectedValues.GatherSystemInfoExists, gatherSystemInfo.Exists, "System Info tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_TabHeader_Exists - Use 'Assert_TabHeader_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_TabHeader_Exists()
        {
            #region Variable Declarations
            WpfTabPage helpTab = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.HelpTab;
            #endregion

            // Verify that the 'Exists' property of 'Dev2.Studio.ViewModels.Help.HelpViewModel' tab equals 'True'
            Assert.AreEqual(this.Assert_TabHeader_ExistsExpectedValues.HelpTabExists, helpTab.Exists, "Tab header does not exist");
        }
        
        /// <summary>
        /// Assert_Toolbox_FilterTextbox_Exists - Use 'Assert_Toolbox_FilterTextbox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Toolbox_FilterTextbox_Exists()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.SearchTextBox;
            #endregion

            // Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
            Assert.AreEqual(this.Assert_Toolbox_FilterTextbox_ExistsExpectedValues.SearchTextBoxExists, searchTextBox.Exists, "Toolbox filter textbox does not exist");
        }
        
        /// <summary>
        /// Assert_Toolbox_Multiassign_Exists - Use 'Assert_Toolbox_Multiassign_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Toolbox_Multiassign_Exists()
        {
            #region Variable Declarations
            WpfListItem multiAssign = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.MultiAssign;
            #endregion

            // Verify that the 'Exists' property of 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item equals 'True'
            Assert.AreEqual(this.Assert_Toolbox_Multiassign_ExistsExpectedValues.MultiAssignExists, multiAssign.Exists, "Toolbox Multiassign does not exist");
        }
        
        /// <summary>
        /// Assert_Toolbox_RefreshButton_Exists - Use 'Assert_Toolbox_RefreshButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Toolbox_RefreshButton_Exists()
        {
            #region Variable Declarations
            WpfButton refreshButton = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.RefreshButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_Toolbox_RefreshButton_ExistsExpectedValues.RefreshButtonExists, refreshButton.Exists, "Toolbox refresh button does not exist");
        }
        
        /// <summary>
        /// Assert_Unique_Records_Exists_OnDesignSurface - Use 'Assert_Unique_Records_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Unique_Records_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom unique = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Unique;
            #endregion

            // Verify that the 'Exists' property of 'DsfUniqueActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Unique_Records_Exists_OnDesignSurfaceExpectedValues.UniqueExists, unique.Exists, "Unique Records tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_UnLock_Button_Exists - Use 'Assert_UnLock_Button_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_UnLock_Button_Exists()
        {
            #region Variable Declarations
            WpfButton lockMenuButton = this.MainStudioWindow.SideMenuBar.LockMenuButton;
            #endregion

            // Verify that the 'Exists' property of 'Lock / unlock the menu' button equals 'True'
            Assert.AreEqual(this.Assert_UnLock_Button_ExistsExpectedValues.LockMenuButtonExists, lockMenuButton.Exists, "Assert unlock does not exist on the side menu");
        }
        
        /// <summary>
        /// Assert_Unzip_Exists_OnDesignSurface - Use 'Assert_Unzip_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Unzip_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom unZip = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.UnZip;
            #endregion

            // Verify that the 'Exists' property of 'DsfUnZip' custom control equals 'True'
            Assert.AreEqual(this.Assert_Unzip_Exists_OnDesignSurfaceExpectedValues.UnZipExists, unZip.Exists, "Unzip on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Unzip_Large_View_Exists_OnDesignSurface - Use 'Assert_Unzip_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Unzip_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom unZip = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.UnZip;
            #endregion

            // Verify that the 'Exists' property of 'DsfUnZip' custom control equals 'True'
            Assert.AreEqual(this.Assert_Unzip_Large_View_Exists_OnDesignSurfaceExpectedValues.UnZipExists, unZip.Exists, "Unzip large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_DeleteButton_Exists - Use 'Assert_VariableList_DeleteButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_DeleteButton_Exists()
        {
            #region Variable Declarations
            WpfButton deleteButton = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.DeleteButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_VariableList_DeleteButton_ExistsExpectedValues.DeleteButtonExists, deleteButton.Exists, "Variable list delete button does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_Exists - Use 'Assert_VariableList_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_Exists()
        {
            #region Variable Declarations
            WpfCustom variablesControl = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl;
            #endregion

            // Verify that the 'Exists' property of 'UI_VariablesControl_AutoID' custom control equals 'True'
            Assert.AreEqual(this.Assert_VariableList_ExistsExpectedValues.VariablesControlExists, variablesControl.Exists, "Variable list view does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_Recordset_Row1_Field_IsInputCheckBox_Exists - Use 'Assert_VariableList_Recordset_Row1_Field_IsInputCheckBox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_Recordset_Row1_Field_IsInputCheckBox_Exists()
        {
            #region Variable Declarations
            WpfCheckBox isInputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.RecordsetDataItem.List.ListItem.Table.DataItem1.List.ListItem.Table.DataItem.InputCell.IsInputCheckbox;
            #endregion

            // Verify that the 'Exists' property of 'UI_IsInputCheckbox_AutoID' check box equals 'True'
            Assert.AreEqual(this.Assert_VariableList_Recordset_Row1_Field_IsInputCheckBox_ExistsExpectedValues.IsInputCheckboxExists, isInputCheckbox.Exists, "Variable list recordset child input checkbox does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_Recordset_Row1_Field_IsOutputCheckBox_Exists - Use 'Assert_VariableList_Recordset_Row1_Field_IsOutputCheckBox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_Recordset_Row1_Field_IsOutputCheckBox_Exists()
        {
            #region Variable Declarations
            WpfCheckBox isOutputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.RecordsetDataItem.List.ListItem.Table.DataItem1.List.ListItem.Table.DataItem.OutputCell.IsOutputCheckbox;
            #endregion

            // Verify that the 'Exists' property of 'UI_IsOutputCheckbox_AutoID' check box equals 'True'
            Assert.AreEqual(this.Assert_VariableList_Recordset_Row1_Field_IsOutputCheckBox_ExistsExpectedValues.IsOutputCheckboxExists, isOutputCheckbox.Exists, "Variable list recordset child output checkbox does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_Recordset_Row1_Field_TextBox_Exists - Use 'Assert_VariableList_Recordset_Row1_Field_TextBox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_Recordset_Row1_Field_TextBox_Exists()
        {
            #region Variable Declarations
            WpfEdit textBox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.RecordsetDataItem.List.ListItem.Table.DataItem1.List.ListItem.Table.DataItem.FieldNameCell.ValueEditor.TextBox;
            #endregion

            // Verify that the 'Exists' property of 'UI_NameTextBox_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_VariableList_Recordset_Row1_Field_TextBox_ExistsExpectedValues.TextBoxExists, textBox.Exists, "Variable list recordset row 1 field textbox does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_Recordset_Row1_IsInputCheckBox_Exists - Use 'Assert_VariableList_Recordset_Row1_IsInputCheckBox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_Recordset_Row1_IsInputCheckBox_Exists()
        {
            #region Variable Declarations
            WpfCheckBox isInputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.RecordsetDataItem.List.ListItem.Table.DataItem1.List.ListItem.Table.DataItem.InputCell.IsInputCheckbox;
            #endregion

            // Verify that the 'Exists' property of 'UI_IsInputCheckbox_AutoID' check box equals 'True'
            Assert.AreEqual(this.Assert_VariableList_Recordset_Row1_IsInputCheckBox_ExistsExpectedValues.IsInputCheckboxExists, isInputCheckbox.Exists, "Variable list recordset input checkbox does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_Recordset_Row1_IsOutputCheckBox_Exists - Use 'Assert_VariableList_Recordset_Row1_IsOutputCheckBox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_Recordset_Row1_IsOutputCheckBox_Exists()
        {
            #region Variable Declarations
            WpfCheckBox isOutputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.RecordsetDataItem.List.ListItem.Table.DataItem1.OutputCell.IsOutputCheckbox;
            #endregion

            // Verify that the 'Exists' property of 'UI_IsOutputCheckbox_AutoID' check box equals 'True'
            Assert.AreEqual(this.Assert_VariableList_Recordset_Row1_IsOutputCheckBox_ExistsExpectedValues.IsOutputCheckboxExists, isOutputCheckbox.Exists, "Variable list recordset output checkbox does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_Recordset_Row1_TextBox_Exists - Use 'Assert_VariableList_Recordset_Row1_TextBox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_Recordset_Row1_TextBox_Exists()
        {
            #region Variable Declarations
            WpfEdit textBox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.RecordsetDataItem.List.ListItem.Table.DataItem1.RecordsetNameCell.ValueEditor.TextBox;
            #endregion

            // Verify that the 'Exists' property of 'UI_NameTextBox_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_VariableList_Recordset_Row1_TextBox_ExistsExpectedValues.TextBoxExists, textBox.Exists, "Variable list recordset textbox does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_Scalar_Row1_IsInputCheckBox_Exists - Use 'Assert_VariableList_Scalar_Row1_IsInputCheckBox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_Scalar_Row1_IsInputCheckBox_Exists()
        {
            #region Variable Declarations
            WpfCheckBox isInputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.VariableDataItem.List.ListItem.Table.DataItem1.InputCell.IsInputCheckbox;
            #endregion

            // Verify that the 'Exists' property of 'UI_IsInputCheckbox_AutoID' check box equals 'True'
            Assert.AreEqual(this.Assert_VariableList_Scalar_Row1_IsInputCheckBox_ExistsExpectedValues.IsInputCheckboxExists, isInputCheckbox.Exists, "Variable list variable input checkbox does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_Scalar_Row1_IsOutputCheckBox_Exists - Use 'Assert_VariableList_Scalar_Row1_IsOutputCheckBox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_Scalar_Row1_IsOutputCheckBox_Exists()
        {
            #region Variable Declarations
            WpfCheckBox isOutputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.VariableDataItem.List.ListItem.Table.DataItem1.OutputCell.IsOutputCheckbox;
            #endregion

            // Verify that the 'Exists' property of 'UI_IsOutputCheckbox_AutoID' check box equals 'True'
            Assert.AreEqual(this.Assert_VariableList_Scalar_Row1_IsOutputCheckBox_ExistsExpectedValues.IsOutputCheckboxExists, isOutputCheckbox.Exists, "Variable list variable output checkbox does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_Scalar_Row1_Textbox_Equals_SomeVariable - Use 'Assert_VariableList_Scalar_Row1_Textbox_Equals_SomeVariableExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_Scalar_Row1_Textbox_Equals_SomeVariable()
        {
            #region Variable Declarations
            WpfEdit textBox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.VariableDataItem.List.ListItem.Table.DataItem1.VariableNameCell.ValueEditor.TextBox;
            #endregion

            // Verify that the 'Text' property of 'UI_NameTextBox_AutoID' text box equals 'SomeVariable'
            Assert.AreEqual(this.Assert_VariableList_Scalar_Row1_Textbox_Equals_SomeVariableExpectedValues.TextBoxText, textBox.Text, "Variable list scalar row 1 textbox text does not equal somevariable");
        }
        
        /// <summary>
        /// Assert_VariableList_Scalar_Row1_TextBox_Exists - Use 'Assert_VariableList_Scalar_Row1_TextBox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_Scalar_Row1_TextBox_Exists()
        {
            #region Variable Declarations
            WpfEdit textBox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.VariableDataItem.List.ListItem.Table.DataItem1.VariableNameCell.ValueEditor.TextBox;
            #endregion

            // Verify that the 'Exists' property of 'UI_NameTextBox_AutoID' text box equals 'True'
            Assert.AreEqual(this.Assert_VariableList_Scalar_Row1_TextBox_ExistsExpectedValues.TextBoxExists, textBox.Exists, "Variable list variable textbox does not exist");
        }
        
        /// <summary>
        /// Assert_VariableList_SortButton_Exists - Use 'Assert_VariableList_SortButton_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_VariableList_SortButton_Exists()
        {
            #region Variable Declarations
            WpfButton sortButton = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.SortButton;
            #endregion

            // Verify that the 'Exists' property of '' button equals 'True'
            Assert.AreEqual(this.Assert_VariableList_SortButton_ExistsExpectedValues.SortButtonExists, sortButton.Exists, "Variable list sort button does not exist");
        }
        
        /// <summary>
        /// Assert_Web_Connectors_Exists_OnDesignSurface - Use 'Assert_Web_Connectors_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Web_Connectors_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom webConnector = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebConnector;
            #endregion

            // Verify that the 'Exists' property of 'DsfWebserviceActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Web_Connectors_Exists_OnDesignSurfaceExpectedValues.WebConnectorExists, webConnector.Exists, "Web Connector on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Web_Source_Exists - Use 'Assert_Web_Source_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Web_Source_Exists()
        {
            #region Variable Declarations
            WpfButton webSourceButton = this.MainStudioWindow.SideMenuBar.WebSourceButton;
            #endregion

            // Verify that the 'Exists' property of 'Create a new web source' button equals 'True'
            Assert.AreEqual(this.Assert_Web_Source_ExistsExpectedValues.WebSourceButtonExists, webSourceButton.Exists, "Web Source does not exist in the side menu");
        }
        
        /// <summary>
        /// Assert_WebSource_ReqTypeComboBox_Exists - Use 'Assert_WebSource_ReqTypeComboBox_ExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_WebSource_ReqTypeComboBox_Exists()
        {
            #region Variable Declarations
            WpfComboBox requestTypesComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WebConnectorWizardTab.WorkSurfaceContext.RequestTypesComboBox;
            #endregion

            // Verify that the 'Exists' property of 'RequestTypes' combo box equals 'True'
            Assert.AreEqual(this.Assert_WebSource_ReqTypeComboBox_ExistsExpectedValues.RequestTypesComboBoxExists, requestTypesComboBox.Exists, "Request control not found");
        }
        
        /// <summary>
        /// Assert_Workflow_Exists_OnDesignSurface - Use 'Assert_Workflow_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Workflow_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom subWorkflow = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SubWorkflow;
            #endregion

            // Verify that the 'Exists' property of 'DsfActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Workflow_Exists_OnDesignSurfaceExpectedValues.SubWorkflowExists, subWorkflow.Exists, "Workflow on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Write_File_Exists_OnDesignSurface - Use 'Assert_Write_File_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Write_File_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom fileWrite = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileWrite;
            #endregion

            // Verify that the 'Exists' property of 'DsfFileWrite' custom control equals 'True'
            Assert.AreEqual(this.Assert_Write_File_Exists_OnDesignSurfaceExpectedValues.FileWriteExists, fileWrite.Exists, "Write File tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Write_File_Large_View_Exists_OnDesignSurface - Use 'Assert_Write_File_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Write_File_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom fileWrite = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileWrite;
            #endregion

            // Verify that the 'Exists' property of 'DsfFileWrite' custom control equals 'True'
            Assert.AreEqual(this.Assert_Write_File_Large_View_Exists_OnDesignSurfaceExpectedValues.FileWriteExists, fileWrite.Exists, "Write file large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_XPath_Exists_OnDesignSurface - Use 'Assert_XPath_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_XPath_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom xPath = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath;
            #endregion

            // Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_XPath_Exists_OnDesignSurfaceExpectedValues.XPathExists, xPath.Exists, "XPath tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Xpath_Large_View_Exists_OnDesignSurface - Use 'Assert_Xpath_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Xpath_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom xPath = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath;
            #endregion

            // Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Xpath_Large_View_Exists_OnDesignSurfaceExpectedValues.XPathExists, xPath.Exists, "Xpath large view does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_Xpath_Qvi_Large_View_Exists_OnDesignSurface - Use 'Assert_Xpath_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Xpath_Qvi_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom xPath = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath;
            #endregion

            // Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
            Assert.AreEqual(this.Assert_Xpath_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues.XPathExists, xPath.Exists, "Xpath Qvi does not exist on the design surface");
        }
        
        /// <summary>
        /// Assert_Zip_Exists_OnDesignSurface - Use 'Assert_Zip_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Zip_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom zip = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Zip;
            #endregion

            // Verify that the 'Exists' property of 'DsfZip' custom control equals 'True'
            Assert.AreEqual(this.Assert_Zip_Exists_OnDesignSurfaceExpectedValues.ZipExists, zip.Exists, "Zip tool on the design surface does not exist");
        }
        
        /// <summary>
        /// Assert_Zip_Large_View_Exists_OnDesignSurface - Use 'Assert_Zip_Large_View_Exists_OnDesignSurfaceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_Zip_Large_View_Exists_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom zip = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Zip;
            #endregion

            // Verify that the 'Exists' property of 'DsfZip' custom control equals 'True'
            Assert.AreEqual(this.Assert_Zip_Large_View_Exists_OnDesignSurfaceExpectedValues.ZipExists, zip.Exists, "Zip large view on the design surface does not exist");
        }
        
        /// <summary>
        /// Click_Assign_Small_View_Row1_Variable_Textbox
        /// </summary>
        public void Click_Assign_Small_View_Row1_Variable_Textbox()
        {
            #region Variable Declarations
            WpfEdit textbox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.SmallView.DataGrid.Row1.VariableCell.Textbox;
            #endregion

            // Click 'UI_TextBox_AutoID' text box
            Mouse.Click(textbox, new Point(38, 9));
        }
        
        /// <summary>
        /// Click_Assign_Tool_Large_View_DoneButton
        /// </summary>
        public void Click_Assign_Tool_Large_View_DoneButton()
        {
            #region Variable Declarations
            WpfButton doneButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.DoneButton;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(35, 6));
        }
        
        /// <summary>
        /// Click_Close_FullScreen
        /// </summary>
        public void Click_Close_FullScreen()
        {
            #region Variable Declarations
            WpfHyperlink exitFullScreenF11Hyperlink = this.MainStudioWindow.ExitFullScreenF11Text.ExitFullScreenF11Hyperlink;
            #endregion

            // Click 'Exit Full Screen (F11)' link
            Mouse.Click(exitFullScreenF11Hyperlink, new Point(64, 5));
        }
        
        /// <summary>
        /// Click_Close_Server_Source_Wizard_Tab_Button
        /// </summary>
        public void Click_Close_Server_Source_Wizard_Tab_Button()
        {
            #region Variable Declarations
            WpfButton tabCloseButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.ServerSourceWizardTab.TabCloseButton;
            #endregion

            // Click '' button
            Mouse.Click(tabCloseButton, new Point(5, 5));
        }
        
        /// <summary>
        /// Click_Close_Studio_TopRibbon_Button
        /// </summary>
        public void Click_Close_Studio_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton closeStudioButton = this.MainStudioWindow.CloseStudioButton;
            #endregion

            // Click '' button
            Mouse.Click(closeStudioButton, new Point(23, 1));
        }
        
        /// <summary>
        /// Click_Close_Tab_Button
        /// </summary>
        public void Click_Close_Tab_Button()
        {
            #region Variable Declarations
            WpfButton closeButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.CloseButton;
            #endregion

            // Click 'closeBtn' custom control
            Mouse.Click(closeButton, new Point(5, 5));
        }
        
        /// <summary>
        /// Click_Close_Tab_Context_Menu_Button
        /// </summary>
        public void Click_Close_Tab_Context_Menu_Button()
        {
            #region Variable Declarations
            WpfMenuItem close = this.MainStudioWindow.TabContextMenu.Close;
            #endregion

            // Click 'Close' menu item
            Mouse.Click(close, new Point(27, 13));
        }
        
        /// <summary>
        /// Click_Connect_Control_InExplorer
        /// </summary>
        public void Click_Connect_Control_InExplorer()
        {
            #region Variable Declarations
            WpfButton serverListComboBox = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ConnectControl.ServerComboBox.ServerListComboBox;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(serverListComboBox, new Point(217, 8));
        }
        
        /// <summary>
        /// Click_Debug_Ribbon_Button
        /// </summary>
        public void Click_Debug_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton runAndDebugButton = this.MainStudioWindow.SideMenuBar.RunAndDebugButton;
            #endregion

            // Click 'Run and debug your workflow service' button
            Mouse.Click(runAndDebugButton, new Point(13, 14));
        }
        
        /// <summary>
        /// Click_DebugInput_DebugButton
        /// </summary>
        public void Click_DebugInput_DebugButton()
        {
            #region Variable Declarations
            WpfButton debugF6Button = this.MainStudioWindow.DebugInputDialog.DebugF6Button;
            #endregion

            // Click 'Debug (F6)' button
            Mouse.Click(debugF6Button, new Point(34, 10));
        }
        
        /// <summary>
        /// Click_Decision_Dialog_Done_Button
        /// </summary>
        public void Click_Decision_Dialog_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.DecisionDialog.DoneButton;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(10, 14));
        }
        
        /// <summary>
        /// Click_Deploy_Ribbon_Button
        /// </summary>
        public void Click_Deploy_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton deployButton = this.MainStudioWindow.SideMenuBar.DeployButton;
            #endregion

            // Click 'Move resources between Warewolf servers' button
            Mouse.Click(deployButton, new Point(16, 11));
        }
        
        /// <summary>
        /// Click_ExpandAndStepIn_NestedWorkflow - Use 'Click_ExpandAndStepIn_NestedWorkflowParams' to pass parameters into this method.
        /// </summary>
        public void Click_ExpandAndStepIn_NestedWorkflow()
        {
            #region Variable Declarations
            WpfTreeItem subWorkflow = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree.SubWorkflow;
            #endregion

            // Expand 'Hello World' tree item
            subWorkflow.Expanded = this.Click_ExpandAndStepIn_NestedWorkflowParams.SubWorkflowExpanded;
        }
        
        /// <summary>
        /// Click_Explorer_Filter_Clear_Button
        /// </summary>
        public void Click_Explorer_Filter_Clear_Button()
        {
            #region Variable Declarations
            WpfButton uIClearSearchButtonButton = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.SearchTextBox.UIClearSearchButtonButton;
            #endregion

            // Click 'ClearSearchButton' button
            Mouse.Click(uIClearSearchButtonButton, new Point(6, 8));
        }
        
        /// <summary>
        /// Click_Explorer_Refresh_Button
        /// </summary>
        public void Click_Explorer_Refresh_Button()
        {
            #region Variable Declarations
            WpfButton explorerRefreshButton = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerRefreshButton;
            #endregion

            // Click '' button
            Mouse.Click(explorerRefreshButton, new Point(10, 10));
        }
        
        /// <summary>
        /// Click_Explorer_RemoteServer_Connect_Button
        /// </summary>
        public void Click_Explorer_RemoteServer_Connect_Button()
        {
            #region Variable Declarations
            WpfButton connectServerButton = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ConnectControl.ConnectServerButton;
            #endregion

            // Click 'UI_ConnectServerBtn_AutoID' button
            Mouse.Click(connectServerButton, new Point(11, 10));
        }
        
        /// <summary>
        /// Click_FullScreen_TopRibbon_Button
        /// </summary>
        public void Click_FullScreen_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton maximizeRestoreStudioButton = this.MainStudioWindow.MaximizeRestoreStudioButton;
            #endregion

            // Click '' button
            Mouse.Click(maximizeRestoreStudioButton, new Point(12, 9));
        }
        
        /// <summary>
        /// Click_Knowledge_Ribbon_Button
        /// </summary>
        public void Click_Knowledge_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton knowledgeBaseButton = this.MainStudioWindow.SideMenuBar.KnowledgeBaseButton;
            #endregion

            // Click 'Knowledge Base' button
            Mouse.Click(knowledgeBaseButton, new Point(4, 8));
        }
        
        /// <summary>
        /// Click_Lock_Ribbon_Button
        /// </summary>
        public void Click_Lock_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton lockStudioButton = this.MainStudioWindow.LockStudioButton;
            #endregion

            // Click '' button
            Mouse.Click(lockStudioButton, new Point(14, 5));
        }
        
        /// <summary>
        /// Click_Maximize_Restore_TopRibbon_Button
        /// </summary>
        public void Click_Maximize_Restore_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton maximizeStudioButton = this.MainStudioWindow.MaximizeStudioButton;
            #endregion

            // Click '' button
            Mouse.Click(maximizeStudioButton, new Point(9, 11));
        }
        
        /// <summary>
        /// Click_Maximize_TopRibbon_Button
        /// </summary>
        public void Click_Maximize_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton maximizeStudioButton = this.MainStudioWindow.MaximizeStudioButton;
            #endregion

            // Click '' button
            Mouse.Click(maximizeStudioButton, new Point(14, 14));
        }
        
        /// <summary>
        /// Click_MessageBox_No
        /// </summary>
        public void Click_MessageBox_No()
        {
            #region Variable Declarations
            WpfButton noButton = this.MessageBoxWindow.NoButton;
            #endregion

            // Click 'No' button
            Mouse.Click(noButton, new Point(32, 5));
        }
        
        /// <summary>
        /// Click_MessageBox_Yes
        /// </summary>
        public void Click_MessageBox_Yes()
        {
            #region Variable Declarations
            WpfButton yesButton = this.MessageBoxWindow.YesButton;
            #endregion

            // Click 'Yes' button
            Mouse.Click(yesButton, new Point(32, 5));
        }
        
        /// <summary>
        /// Click_Minimize_TopRibbon_Button
        /// </summary>
        public void Click_Minimize_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton minimizeStudioButton = this.MainStudioWindow.MinimizeStudioButton;
            #endregion

            // Click '' button
            Mouse.Click(minimizeStudioButton, new Point(6, 14));
        }
        
        /// <summary>
        /// Click_Nested_Workflow_Name
        /// </summary>
        public void Click_Nested_Workflow_Name()
        {
            #region Variable Declarations
            WpfButton uIHelloWorldButton = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputTree.SubWorkflow.UIHelloWorldTreeItem1.UIHelloWorldButton;
            #endregion

            // Click 'Hello World' button
            Mouse.Click(uIHelloWorldButton, new Point(37, 10));
        }
        
        /// <summary>
        /// Click_New_DB_Connector_Ribbon_Button
        /// </summary>
        public void Click_New_DB_Connector_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton databaseConnectorButton = this.MainStudioWindow.SideMenuBar.DatabaseConnectorButton;
            #endregion

            // Click 'Create a new database connector' button
            Mouse.Click(databaseConnectorButton, new Point(8, 22));
        }
        
        /// <summary>
        /// Click_New_Plugin_Connector_Ribbon_Button
        /// </summary>
        public void Click_New_Plugin_Connector_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton pluginConnectorButton = this.MainStudioWindow.SideMenuBar.PluginConnectorButton;
            #endregion

            // Click 'Create a new plugin connector' button
            Mouse.Click(pluginConnectorButton, new Point(35, 12));
        }
        
        /// <summary>
        /// Click_New_Workflow_Ribbon_Button
        /// </summary>
        public void Click_New_Workflow_Ribbon_Button()
        {
            #region Variable Declarations
            WpfText newWorkflowIcon = this.MainStudioWindow.SideMenuBar.CollapsedSideMenu.NewWorkflowIcon;
            #endregion

            // Click '' label
            Mouse.Click(newWorkflowIcon, new Point(3, 8));
        }
        
        /// <summary>
        /// Click_NewDatabaseSource_Ribbon_Button
        /// </summary>
        public void Click_NewDatabaseSource_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton uICreateanewdatabasesoButton = this.MainStudioWindow.SideMenuBar.CollapsedSideMenu.UICreateanewdatabasesoButton;
            #endregion

            // Click 'Create a new database source' button
            Mouse.Click(uICreateanewdatabasesoButton, new Point(16, 15));
        }
        
        /// <summary>
        /// Click_NewPluginSource_Ribbon_Button
        /// </summary>
        public void Click_NewPluginSource_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton uICreateanewpluginsourButton = this.MainStudioWindow.SideMenuBar.CollapsedSideMenu.UICreateanewpluginsourButton;
            #endregion

            // Click 'Create a new plugin source' button
            Mouse.Click(uICreateanewpluginsourButton, new Point(22, 13));
        }
        
        /// <summary>
        /// Click_NewWebSource_Ribbon_Button
        /// </summary>
        public void Click_NewWebSource_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton uICreateanewwebsourceButton = this.MainStudioWindow.SideMenuBar.CollapsedSideMenu.UICreateanewwebsourceButton;
            #endregion

            // Click 'Create a new web source' button
            Mouse.Click(uICreateanewwebsourceButton, new Point(13, 18));
        }
        
        /// <summary>
        /// Click_Output_OnRecordset_InVariableList - Use 'Click_Output_OnRecordset_InVariableListParams' to pass parameters into this method.
        /// </summary>
        public void Click_Output_OnRecordset_InVariableList()
        {
            #region Variable Declarations
            WpfCheckBox isOutputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.RecordsetDataItem.List.ListItem.Table.DataItem1.OutputCell.IsOutputCheckbox;
            #endregion

            // Select 'UI_IsOutputCheckbox_AutoID' check box
            isOutputCheckbox.Checked = this.Click_Output_OnRecordset_InVariableListParams.IsOutputCheckboxChecked;
        }
        
        /// <summary>
        /// Click_Output_OnVariable_InVariableList - Use 'Click_Output_OnVariable_InVariableListParams' to pass parameters into this method.
        /// </summary>
        public void Click_Output_OnVariable_InVariableList()
        {
            #region Variable Declarations
            WpfCheckBox isOutputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.VariableDataItem.List.ListItem.Table.DataItem1.OutputCell.IsOutputCheckbox;
            #endregion

            // Select 'UI_IsOutputCheckbox_AutoID' check box
            isOutputCheckbox.Checked = this.Click_Output_OnVariable_InVariableListParams.IsOutputCheckboxChecked;
        }
        
        /// <summary>
        /// Click_Pin_Toggle_DebugOutput
        /// </summary>
        public void Click_Pin_Toggle_DebugOutput()
        {
            #region Variable Declarations
            WpfButton debugOutputUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneRight.DebugOutput.DebugOutputUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(debugOutputUnpinBtn, new Point(11, 10));
        }
        
        /// <summary>
        /// Click_Pin_Toggle_Documentor
        /// </summary>
        public void Click_Pin_Toggle_Documentor()
        {
            #region Variable Declarations
            WpfButton documentorUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneLeft.Help.DocumentorUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(documentorUnpinBtn, new Point(2, 11));
        }
        
        /// <summary>
        /// Click_Pin_Toggle_Explorer
        /// </summary>
        public void Click_Pin_Toggle_Explorer()
        {
            #region Variable Declarations
            WpfButton explorerUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(explorerUnpinBtn, new Point(12, 9));
        }
        
        /// <summary>
        /// Click_Pin_Toggle_Toolbox
        /// </summary>
        public void Click_Pin_Toggle_Toolbox()
        {
            #region Variable Declarations
            WpfButton toolUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(toolUnpinBtn, new Point(10, 8));
        }
        
        /// <summary>
        /// Click_Pin_Toggle_VariableList
        /// </summary>
        public void Click_Pin_Toggle_VariableList()
        {
            #region Variable Declarations
            WpfButton variableUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariableUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(variableUnpinBtn, new Point(10, 14));
        }
        
        /// <summary>
        /// Click_Position_Button
        /// </summary>
        public void Click_Position_Button()
        {
            #region Variable Declarations
            WpfMenuItem positionButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.FilesMenu.PositionButton;
            #endregion

            // Click 'PART_FilesMenuItem' menu item
            Mouse.Click(positionButton, new Point(8, 7));
        }
        
        /// <summary>
        /// Click_Save_Ribbon_Button
        /// </summary>
        public void Click_Save_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton saveButton = this.MainStudioWindow.SideMenuBar.SaveButton;
            #endregion

            // Click 'Save this tab' button
            Mouse.Click(saveButton, new Point(10, 5));
        }
        
        /// <summary>
        /// Click_SaveDialog_CancelButton
        /// </summary>
        public void Click_SaveDialog_CancelButton()
        {
            #region Variable Declarations
            WpfButton cancelButton = this.SaveDialogWindow.CancelButton;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(cancelButton, new Point(6, 7));
        }
        
        /// <summary>
        /// Click_SaveDialog_YesButton
        /// </summary>
        public void Click_SaveDialog_YesButton()
        {
            #region Variable Declarations
            WpfButton saveButton = this.SaveDialogWindow.SaveButton;
            #endregion

            // Click 'Save' button
            Mouse.Click(saveButton, new Point(25, 4));
        }
        
        /// <summary>
        /// Click_Scheduler_Create_New_Task_Ribbon_Button
        /// </summary>
        public void Click_Scheduler_Create_New_Task_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton newTaskButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.SchedulesList.SchedulerListItem.CreateTaskButton.NewTaskButton;
            #endregion

            // Click first button next to '' button
            Mouse.Click(newTaskButton, new Point(151, 13));
        }
        
        /// <summary>
        /// Click_Scheduler_Delete_Task
        /// </summary>
        public void Click_Scheduler_Delete_Task()
        {
            #region Variable Declarations
            WpfButton deleteTaskButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.SchedulesList.DeleteTaskButton;
            #endregion

            // Click '...' button
            Mouse.Click(deleteTaskButton, new Point(3, 17));
        }
        
        /// <summary>
        /// Click_Scheduler_Disable_Task_Radio_Button - Use 'Click_Scheduler_Disable_Task_Radio_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_Scheduler_Disable_Task_Radio_Button()
        {
            #region Variable Declarations
            WpfCheckBox statusCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.SchedulesList.UINameworkflow1ResourcListItem.StatusCheckBox;
            #endregion

            // Clear check box
            statusCheckBox.Checked = this.Click_Scheduler_Disable_Task_Radio_ButtonParams.StatusCheckBoxChecked;
        }
        
        /// <summary>
        /// Click_Scheduler_EditTrigger_Button
        /// </summary>
        public void Click_Scheduler_EditTrigger_Button()
        {
            #region Variable Declarations
            WpfButton editTriggerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.EditTriggerButton;
            #endregion

            // Click '' button
            Mouse.Click(editTriggerButton, new Point(10, 9));
        }
        
        /// <summary>
        /// Click_Scheduler_Enable_Task_Radio_Button - Use 'Click_Scheduler_Enable_Task_Radio_ButtonParams' to pass parameters into this method.
        /// </summary>
        public void Click_Scheduler_Enable_Task_Radio_Button()
        {
            #region Variable Declarations
            WpfCheckBox statusCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.SchedulesList.UINameworkflow1ResourcListItem.StatusCheckBox;
            #endregion

            // Select check box
            statusCheckBox.Checked = this.Click_Scheduler_Enable_Task_Radio_ButtonParams.StatusCheckBoxChecked;
        }
        
        /// <summary>
        /// Click_Scheduler_ResourcePicker
        /// </summary>
        public void Click_Scheduler_ResourcePicker()
        {
            #region Variable Declarations
            WpfButton resourcePickerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.ResourcePickerButton;
            #endregion

            // Click '...' button
            Mouse.Click(resourcePickerButton, new Point(20, 12));
        }
        
        /// <summary>
        /// Click_Scheduler_ResourcePicker_Button
        /// </summary>
        public void Click_Scheduler_ResourcePicker_Button()
        {
            #region Variable Declarations
            WpfButton resourcePickerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.ResourcePickerButton;
            #endregion

            // Click '...' button
            Mouse.Click(resourcePickerButton, new Point(14, 13));
        }
        
        /// <summary>
        /// Click_Scheduler_Ribbon_Button
        /// </summary>
        public void Click_Scheduler_Ribbon_Button()
        {
            #region Variable Declarations
            WpfText newScheduledTaskIcon = this.MainStudioWindow.SideMenuBar.CollapsedSideMenu.NewScheduledTaskIcon;
            #endregion

            // Click '' label
            Mouse.Click(newScheduledTaskIcon, new Point(4, 12));
        }
        
        /// <summary>
        /// Click_Scheduler_RunTask - Use 'Click_Scheduler_RunTaskParams' to pass parameters into this method.
        /// </summary>
        public void Click_Scheduler_RunTask()
        {
            #region Variable Declarations
            WpfCheckBox runTaskCheckBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SchedulerTab.RunTaskCheckBox;
            #endregion

            // Select 'Run task as soon as possible after a scheduled sta...' check box
            runTaskCheckBox.Checked = this.Click_Scheduler_RunTaskParams.RunTaskCheckBoxChecked;
        }
        
        /// <summary>
        /// Click_Server_Source_Wizard_Address_Protocol_Dropdown
        /// </summary>
        public void Click_Server_Source_Wizard_Address_Protocol_Dropdown()
        {
            #region Variable Declarations
            WpfButton toggleDropdown = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.ProtocolCombobox.ToggleDropdown;
            #endregion

            // Click 'ToggleButton' button
            Mouse.Click(toggleDropdown, new Point(54, 8));
        }
        
        /// <summary>
        /// Click_Server_Source_Wizard_Test_Connection_Button
        /// </summary>
        public void Click_Server_Source_Wizard_Test_Connection_Button()
        {
            #region Variable Declarations
            WpfButton testConnectionButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.TestConnectionButton;
            #endregion

            // Click 'Test Connection' button
            Mouse.Click(testConnectionButton, new Point(51, 8));
        }
        
        /// <summary>
        /// Click_Service_Picker_Dialog_Cancel
        /// </summary>
        public void Click_Service_Picker_Dialog_Cancel()
        {
            #region Variable Declarations
            WpfButton cancelButton = this.SaveDialogWindow.CancelButton;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(cancelButton, new Point(57, 6));
        }
        
        /// <summary>
        /// Click_Settings_Admin_ServerPermissions - Use 'Click_Settings_Admin_ServerPermissionsParams' to pass parameters into this method.
        /// </summary>
        public void Click_Settings_Admin_ServerPermissions()
        {
            #region Variable Declarations
            WpfCell uIFalseCell = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.UIItemTabList.SecurityTab.SecurityWindow.ServerPermissions.UIFalseCell;
            #endregion

            // Select 'False' cell
            uIFalseCell.Checked = this.Click_Settings_Admin_ServerPermissionsParams.UIFalseCellChecked;
        }
        
        /// <summary>
        /// Click_Settings_Contribute_ResourcePermissions - Use 'Click_Settings_Contribute_ResourcePermissionsParams' to pass parameters into this method.
        /// </summary>
        public void Click_Settings_Contribute_ResourcePermissions()
        {
            #region Variable Declarations
            WpfCell uIFalseCell = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.UIItemTabList.SecurityTab.SecurityWindow.ResourcePermissions.UIFalseCell;
            #endregion

            // Select 'False' cell
            uIFalseCell.Checked = this.Click_Settings_Contribute_ResourcePermissionsParams.UIFalseCellChecked;
        }
        
        /// <summary>
        /// Click_Settings_Contribute_ServerPermissions - Use 'Click_Settings_Contribute_ServerPermissionsParams' to pass parameters into this method.
        /// </summary>
        public void Click_Settings_Contribute_ServerPermissions()
        {
            #region Variable Declarations
            WpfCell uIFalseCell = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.UIItemTabList.SecurityTab.SecurityWindow.ServerPermissions.UIFalseCell;
            #endregion

            // Select 'False' cell
            uIFalseCell.Checked = this.Click_Settings_Contribute_ServerPermissionsParams.UIFalseCellChecked;
        }
        
        /// <summary>
        /// Click_Settings_Execute_ResourcePermissions - Use 'Click_Settings_Execute_ResourcePermissionsParams' to pass parameters into this method.
        /// </summary>
        public void Click_Settings_Execute_ResourcePermissions()
        {
            #region Variable Declarations
            WpfCell uIFalseCell = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.UIItemTabList.SecurityTab.SecurityWindow.ResourcePermissions.UIFalseCell;
            #endregion

            // Select 'False' cell
            uIFalseCell.Checked = this.Click_Settings_Execute_ResourcePermissionsParams.UIFalseCellChecked;
        }
        
        /// <summary>
        /// Click_Settings_ResourcePermissions_ResourcePicker
        /// </summary>
        public void Click_Settings_ResourcePermissions_ResourcePicker()
        {
            #region Variable Declarations
            WpfButton resourcePickerButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.UIItemTabList.SecurityTab.SecurityWindow.ResourcePermissions.ResourceCell.ResourcePickerButton;
            #endregion

            // Click '...' button
            Mouse.Click(resourcePickerButton, new Point(6, 15));
        }
        
        /// <summary>
        /// Click_Settings_Ribbon_Button
        /// </summary>
        public void Click_Settings_Ribbon_Button()
        {
            #region Variable Declarations
            WpfText settingsIcon = this.MainStudioWindow.SideMenuBar.CollapsedSideMenu.SettingsIcon;
            #endregion

            // Click '' label
            Mouse.Click(settingsIcon, new Point(7, 2));
        }
        
        /// <summary>
        /// Click_Settings_View_ResourcePermissions - Use 'Click_Settings_View_ResourcePermissionsParams' to pass parameters into this method.
        /// </summary>
        public void Click_Settings_View_ResourcePermissions()
        {
            #region Variable Declarations
            WpfCell uIFalseCell = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.SettingsTab.UIItemTabList.SecurityTab.SecurityWindow.ResourcePermissions.UIFalseCell;
            #endregion

            // Select 'False' cell
            uIFalseCell.Checked = this.Click_Settings_View_ResourcePermissionsParams.UIFalseCellChecked;
        }
        
        /// <summary>
        /// Click_Show_Server_Version_Explorer_Context_menu
        /// </summary>
        public void Click_Show_Server_Version_Explorer_Context_menu()
        {
            #region Variable Declarations
            WpfMenuItem showServerVersion = this.MainStudioWindow.ExplorerContextMenu.ShowServerVersion;
            #endregion

            // Click 'Server Version' menu item
            Mouse.Click(showServerVersion, new Point(45, 13));
        }
        
        /// <summary>
        /// Click_Switch_Dialog_Done_Button
        /// </summary>
        public void Click_Switch_Dialog_Done_Button()
        {
            #region Variable Declarations
            WpfButton doneButton = this.DecisionDialog.DoneButton;
            #endregion

            // Click 'Done' button
            Mouse.Click(doneButton, new Point(24, 7));
        }
        
        /// <summary>
        /// Click_Test_Connector_Calculate_Outputs - Use 'Click_Test_Connector_Calculate_OutputsParams' to pass parameters into this method.
        /// </summary>
        public void Click_Test_Connector_Calculate_Outputs()
        {
            #region Variable Declarations
            WpfEdit testData = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DBConnectorWizardTab.WorkSurfaceContext.NewDBConnectorWizard.InputsList.ListItem.TestData;
            WpfButton testActionButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DBConnectorWizardTab.WorkSurfaceContext.TestActionButton;
            #endregion

            // Type 's' in 'Test data' text box
            testData.Text = this.Click_Test_Connector_Calculate_OutputsParams.TestDataText;

            // Click 'Test' button
            Mouse.Click(testActionButton, new Point(47, 18));
        }
        
        /// <summary>
        /// Click_Test_Plugin_Connector
        /// </summary>
        public void Click_Test_Plugin_Connector()
        {
            #region Variable Declarations
            WpfButton testButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.PluginConnectorWizardTab.WorkSurfaceContext.TestButton;
            #endregion

            // Click 'Test' button
            Mouse.Click(testButton, new Point(59, 9));
        }
        
        /// <summary>
        /// Click_UnDock_Explorer
        /// </summary>
        public void Click_UnDock_Explorer()
        {
            #region Variable Declarations
            WpfButton explorerUnpinBtn = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerUnpinBtn;
            #endregion

            // Click 'unpinBtn' button
            Mouse.Click(explorerUnpinBtn, new Point(177, -13));
        }
        
        /// <summary>
        /// Click_Unlock_Ribbon_Button
        /// </summary>
        public void Click_Unlock_Ribbon_Button()
        {
            #region Variable Declarations
            WpfButton lockMenuButton = this.MainStudioWindow.SideMenuBar.LockMenuButton;
            #endregion

            // Click 'Lock / unlock the menu' button
            Mouse.Click(lockMenuButton, new Point(8, 6));
        }
        
        /// <summary>
        /// Click_Unlock_TopRibbon_Button
        /// </summary>
        public void Click_Unlock_TopRibbon_Button()
        {
            #region Variable Declarations
            WpfButton lockStudioButton = this.MainStudioWindow.LockStudioButton;
            #endregion

            // Click '' button
            Mouse.Click(lockStudioButton, new Point(10, 12));
        }
        
        /// <summary>
        /// Click_VariableList_Recordset_Row1_IsInputCheckbox - Use 'Click_VariableList_Recordset_Row1_IsInputCheckboxParams' to pass parameters into this method.
        /// </summary>
        public void Click_VariableList_Recordset_Row1_IsInputCheckbox()
        {
            #region Variable Declarations
            WpfCheckBox isInputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.RecordsetDataItem.List.ListItem.Table.DataItem1.List.ListItem.Table.DataItem.InputCell.IsInputCheckbox;
            #endregion

            // Select 'UI_IsInputCheckbox_AutoID' check box
            isInputCheckbox.Checked = this.Click_VariableList_Recordset_Row1_IsInputCheckboxParams.IsInputCheckboxChecked;
        }
        
        /// <summary>
        /// Click_VariableList_Scalar_Row1_IsInputCheckbox - Use 'Click_VariableList_Scalar_Row1_IsInputCheckboxParams' to pass parameters into this method.
        /// </summary>
        public void Click_VariableList_Scalar_Row1_IsInputCheckbox()
        {
            #region Variable Declarations
            WpfCheckBox isInputCheckbox = this.MainStudioWindow.DockManager.SplitPaneRight.Variables.VariablesControl.XtgDataPresenter.Table.VariableDataItem.List.ListItem.Table.DataItem1.InputCell.IsInputCheckbox;
            #endregion

            // Select 'UI_IsInputCheckbox_AutoID' check box
            isInputCheckbox.Checked = this.Click_VariableList_Scalar_Row1_IsInputCheckboxParams.IsInputCheckboxChecked;
        }
        
        /// <summary>
        /// Drag_DotNet_DLL_Connector_Onto_DesignSurface
        /// </summary>
        public void Drag_DotNet_DLL_Connector_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage dotNetDLLConnectorImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.ResourceTools.DotNetDLLConnector.DotNetDLLConnectorImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'DotNetDLLConnector' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 127));
            Mouse.StartDragging(dotNetDLLConnectorImage, new Point(16, 25));
            Mouse.StopDragging(flowchart, new Point(308, 127));
        }
        
        /// <summary>
        /// Drag_GetWeb_RequestTool_Onto_DesignSurface
        /// </summary>
        public void Drag_GetWeb_RequestTool_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage webRequestImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.WebRequest.WebRequestImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'WebRequest' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 124));
            Mouse.StartDragging(webRequestImage, new Point(12, 3));
            Mouse.StopDragging(flowchart, new Point(305, 124));
        }
        
        /// <summary>
        /// Drag_PostWeb_RequestTool_Onto_DesignSurface
        /// </summary>
        public void Drag_PostWeb_RequestTool_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfCustom webPost = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebPost;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'DsfWebPostActivity' custom control to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 128));
            Mouse.StartDragging(webPost, new Point(20, 35));
            Mouse.StopDragging(flowchart, new Point(306, 128));
        }
        
        /// <summary>
        /// Drag_Toolbox_Base_Conversion_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Base_Conversion_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage baseConvertImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.BaseConvert.BaseConvertImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'BaseConvert' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(303, 128));
            Mouse.StartDragging(baseConvertImage, new Point(12, 12));
            Mouse.StopDragging(flowchart, new Point(303, 128));
        }
        
        /// <summary>
        /// Drag_Toolbox_Calculate_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Calculate_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage calculateImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.Calculate.CalculateImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Calculate' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 131));
            Mouse.StartDragging(calculateImage, new Point(59, -17));
            Mouse.StopDragging(flowchart, new Point(305, 131));
        }
        
        /// <summary>
        /// Drag_Toolbox_Case_Conversion_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Case_Conversion_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage caseConvertImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.CaseConvert.CaseConvertImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'CaseConvert' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(303, 130));
            Mouse.StartDragging(caseConvertImage, new Point(19, 13));
            Mouse.StopDragging(flowchart, new Point(303, 130));
        }
        
        /// <summary>
        /// Drag_Toolbox_CMD_Line_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_CMD_Line_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage cMDScriptImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.ScriptingTools.CMDScript.CMDScriptImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'CMDScript' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 122));
            Mouse.StartDragging(cMDScriptImage, new Point(19, 19));
            Mouse.StopDragging(flowchart, new Point(305, 122));
        }
        
        /// <summary>
        /// Drag_Toolbox_Comment_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Comment_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage commentImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.Comment.CommentImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Comment' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 129));
            Mouse.StartDragging(commentImage, new Point(40, 15));
            Mouse.StopDragging(flowchart, new Point(308, 129));
        }
        
        /// <summary>
        /// Drag_Toolbox_Copy_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Copy_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage copyImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.Copy.CopyImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Copy' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(310, 129));
            Mouse.StartDragging(copyImage, new Point(19, -3));
            Mouse.StopDragging(flowchart, new Point(310, 129));
        }
        
        /// <summary>
        /// Drag_Toolbox_Count_Records_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Count_Records_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage countImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.RecordsetTools.Count.CountImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Count' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 125));
            Mouse.StartDragging(countImage, new Point(13, 18));
            Mouse.StopDragging(flowchart, new Point(307, 125));
        }
        
        /// <summary>
        /// Drag_Toolbox_Create_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Create_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage createImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.Create.CreateImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Create' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 131));
            Mouse.StartDragging(createImage, new Point(9, 16));
            Mouse.StopDragging(flowchart, new Point(308, 131));
        }
        
        /// <summary>
        /// Drag_Toolbox_Data_Merge_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Data_Merge_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage dataMergeImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.DataMerge.DataMergeImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'DataMerge' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 133));
            Mouse.StartDragging(dataMergeImage, new Point(54, 23));
            Mouse.StopDragging(flowchart, new Point(305, 133));
        }
        
        /// <summary>
        /// Drag_Toolbox_Data_Split_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Data_Split_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage dataSplitImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.DataSplit.DataSplitImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'DataSplit' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 129));
            Mouse.StartDragging(dataSplitImage, new Point(3, 8));
            Mouse.StopDragging(flowchart, new Point(308, 129));
        }
        
        /// <summary>
        /// Drag_Toolbox_Date_And_Time_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Date_And_Time_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage dateTimeImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.DateTime.DateTimeImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'DateTime' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 127));
            Mouse.StartDragging(dateTimeImage, new Point(20, -1));
            Mouse.StopDragging(flowchart, new Point(304, 127));
        }
        
        /// <summary>
        /// Drag_Toolbox_DateTime_Difference_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_DateTime_Difference_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage dateTimeDifferenceImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.DateTimeDifference.DateTimeDifferenceImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'DateTimeDifference' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 131));
            Mouse.StartDragging(dateTimeDifferenceImage, new Point(48, 7));
            Mouse.StopDragging(flowchart, new Point(306, 131));
        }
        
        /// <summary>
        /// Drag_Toolbox_Decision_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Decision_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage decisionImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FlowTools.Decision.DecisionImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Decision' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(309, 128));
            Mouse.StartDragging(decisionImage, new Point(16, 11));
            Mouse.StopDragging(flowchart, new Point(309, 128));
        }
        
        /// <summary>
        /// Drag_Toolbox_Delete_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Delete_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage deleteImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.Delete.DeleteImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Delete' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 125));
            Mouse.StartDragging(deleteImage, new Point(13, 9));
            Mouse.StopDragging(flowchart, new Point(306, 125));
        }
        
        /// <summary>
        /// Drag_Toolbox_Delete_Record_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Delete_Record_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage deleteImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.RecordsetTools.Delete.DeleteImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Delete' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(309, 128));
            Mouse.StartDragging(deleteImage, new Point(1, 15));
            Mouse.StopDragging(flowchart, new Point(309, 128));
        }
        
        /// <summary>
        /// Drag_Toolbox_Dropbox_Download_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Dropbox_Download_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage dropboxDownloadImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.StorageTools.DropboxDownload.DropboxDownloadImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'DropboxDownload' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 131));
            Mouse.StartDragging(dropboxDownloadImage, new Point(30, 8));
            Mouse.StopDragging(flowchart, new Point(307, 131));
        }
        
        /// <summary>
        /// Drag_Toolbox_Dropbox_Upload_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Dropbox_Upload_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage dropboxUploadImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.StorageTools.DropboxUpload.DropboxUploadImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'DropboxUpload' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 131));
            Mouse.StartDragging(dropboxUploadImage, new Point(30, 8));
            Mouse.StopDragging(flowchart, new Point(307, 131));
        }
        
        /// <summary>
        /// Drag_Toolbox_Email_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Email_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage emailImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.Email.EmailImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Email' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 129));
            Mouse.StartDragging(emailImage, new Point(16, -39));
            Mouse.StopDragging(flowchart, new Point(308, 129));
        }
        
        /// <summary>
        /// Drag_Toolbox_Find_Index_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Find_Index_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage findIndexImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.FindIndex.FindIndexImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'FindIndex' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 131));
            Mouse.StartDragging(findIndexImage, new Point(9, 5));
            Mouse.StopDragging(flowchart, new Point(305, 131));
        }
        
        /// <summary>
        /// Drag_Toolbox_Find_Record_Index_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Find_Record_Index_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage findRecordsImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.RecordsetTools.FindRecords.FindRecordsImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'FindRecords' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 130));
            Mouse.StartDragging(findRecordsImage, new Point(8, 8));
            Mouse.StopDragging(flowchart, new Point(307, 130));
        }
        
        /// <summary>
        /// Drag_Toolbox_For_Each_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_For_Each_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage forEachImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.LoopTools.ForEach.ForEachImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'ForEach' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 129));
            Mouse.StartDragging(forEachImage, new Point(40, 19));
            Mouse.StopDragging(flowchart, new Point(307, 129));
        }
        
        /// <summary>
        /// Drag_Toolbox_Format_Number_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Format_Number_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage formatNumberImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.FormatNumber.FormatNumberImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'FormatNumber' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 131));
            Mouse.StartDragging(formatNumberImage, new Point(18, 11));
            Mouse.StopDragging(flowchart, new Point(305, 131));
        }
        
        /// <summary>
        /// Drag_Toolbox_JSON_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_JSON_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage createJSONImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.CreateJSON.CreateJSONImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'CreateJSON' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 127));
            Mouse.StartDragging(createJSONImage, new Point(0, 10));
            Mouse.StopDragging(flowchart, new Point(305, 127));
        }
        
        /// <summary>
        /// Drag_Toolbox_Length_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Length_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage lengthImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.RecordsetTools.Length.LengthImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Length' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 125));
            Mouse.StartDragging(lengthImage, new Point(16, 6));
            Mouse.StopDragging(flowchart, new Point(308, 125));
        }
        
        /// <summary>
        /// Drag_Toolbox_Move_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Move_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage moveImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.Move.MoveImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Move' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 129));
            Mouse.StartDragging(moveImage, new Point(32, 4));
            Mouse.StopDragging(flowchart, new Point(306, 129));
        }
        
        /// <summary>
        /// Drag_Toolbox_MultiAssign_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_MultiAssign_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage assignImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.MultiAssign.AssignImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Assign' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 128));
            Mouse.StartDragging(assignImage, new Point(13, 17));
            Mouse.StopDragging(flowchart, new Point(307, 128));
        }
        
        /// <summary>
        /// Drag_Toolbox_MySql_Database_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_MySql_Database_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage mySQLImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.Database.MySQL.MySQLImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'MySQL' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 130));
            Mouse.StartDragging(mySQLImage, new Point(4, 2));
            Mouse.StopDragging(flowchart, new Point(306, 130));
        }
        
        /// <summary>
        /// Drag_Toolbox_Random_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Random_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage randomImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.Random.RandomImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Random' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 127));
            Mouse.StartDragging(randomImage, new Point(9, -21));
            Mouse.StopDragging(flowchart, new Point(308, 127));
        }
        
        /// <summary>
        /// Drag_Toolbox_Read_File_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Read_File_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage readFileImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.ReadFile.ReadFileImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'ReadFile' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 125));
            Mouse.StartDragging(readFileImage, new Point(12, 15));
            Mouse.StopDragging(flowchart, new Point(304, 125));
        }
        
        /// <summary>
        /// Drag_Toolbox_Read_Folder_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Read_Folder_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage readFolderImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.ReadFolder.ReadFolderImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'ReadFolder' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 129));
            Mouse.StartDragging(readFolderImage, new Point(14, 3));
            Mouse.StopDragging(flowchart, new Point(305, 129));
        }
        
        /// <summary>
        /// Drag_Toolbox_Rename_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Rename_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage renameImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.Rename.RenameImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Rename' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 128));
            Mouse.StartDragging(renameImage, new Point(6, 11));
            Mouse.StopDragging(flowchart, new Point(305, 128));
        }
        
        /// <summary>
        /// Drag_Toolbox_Replace_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Replace_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage replaceImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.DataTools.Replace.ReplaceImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Replace' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 121));
            Mouse.StartDragging(replaceImage, new Point(16, 10));
            Mouse.StopDragging(flowchart, new Point(306, 121));
        }
        
        /// <summary>
        /// Drag_Toolbox_Script_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Script_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage scriptImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.ScriptingTools.Script.ScriptImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Script' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 130));
            Mouse.StartDragging(scriptImage, new Point(49, 17));
            Mouse.StopDragging(flowchart, new Point(307, 130));
        }
        
        /// <summary>
        /// Drag_Toolbox_Sequence_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Sequence_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage sequenceImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FlowTools.Sequence.SequenceImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Sequence' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(305, 131));
            Mouse.StartDragging(sequenceImage, new Point(18, -12));
            Mouse.StopDragging(flowchart, new Point(305, 131));
        }
        
        /// <summary>
        /// Drag_Toolbox_Service_Picker_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Service_Picker_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage serviceImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.ResourceTools.Service.ServiceImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Service' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 126));
            Mouse.StartDragging(serviceImage, new Point(50, 5));
            Mouse.StopDragging(flowchart, new Point(304, 126));
        }
        
        /// <summary>
        /// Drag_Toolbox_Sharepoint_Create_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Sharepoint_Create_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage createListItemsImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.SharepointTools.CreateListItems.CreateListItemsImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'CreateListItems' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(311, 128));
            Mouse.StartDragging(createListItemsImage, new Point(10, 16));
            Mouse.StopDragging(flowchart, new Point(311, 128));
        }
        
        /// <summary>
        /// Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Sharepoint_Delete_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage deleteListItemsImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.SharepointTools.DeleteListItems.DeleteListItemsImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'DeleteListItems' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 131));
            Mouse.StartDragging(deleteListItemsImage, new Point(16, 5));
            Mouse.StopDragging(flowchart, new Point(306, 131));
        }
        
        /// <summary>
        /// Drag_Toolbox_Sharepoint_Read_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Sharepoint_Read_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage readListItemsImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.SharepointTools.ReadListItems.ReadListItemsImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'ReadListItems' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(303, 128));
            Mouse.StartDragging(readListItemsImage, new Point(13, 15));
            Mouse.StopDragging(flowchart, new Point(303, 128));
        }
        
        /// <summary>
        /// Drag_Toolbox_Sharepoint_Update_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Sharepoint_Update_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage updateListItemsImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.SharepointTools.UpdateListItems.UpdateListItemsImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'UpdateListItems' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(300, 127));
            Mouse.StartDragging(updateListItemsImage, new Point(17, 9));
            Mouse.StopDragging(flowchart, new Point(300, 127));
        }
        
        /// <summary>
        /// Drag_Toolbox_Sort_Record_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Sort_Record_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage sortImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.RecordsetTools.Sort.SortImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Sort' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(300, 122));
            Mouse.StartDragging(sortImage, new Point(7, 8));
            Mouse.StopDragging(flowchart, new Point(300, 122));
        }
        
        /// <summary>
        /// Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_SQL_Bulk_Insert_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage sQLBulkInsertImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.Database.SQLBulkInsert.SQLBulkInsertImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'SQLBulkInsert' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 129));
            Mouse.StartDragging(sQLBulkInsertImage, new Point(11, 16));
            Mouse.StopDragging(flowchart, new Point(304, 129));
        }
        
        /// <summary>
        /// Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_SQL_Server_Tool_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage sQLServerImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.Database.SQLServer.SQLServerImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'SQLServer' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 127));
            Mouse.StartDragging(sQLServerImage, new Point(10, -7));
            Mouse.StopDragging(flowchart, new Point(304, 127));
        }
        
        /// <summary>
        /// Drag_Toolbox_Switch_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Switch_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage switchImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FlowTools.Switch.SwitchImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Switch' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(303, 126));
            Mouse.StartDragging(switchImage, new Point(22, 30));
            Mouse.StopDragging(flowchart, new Point(303, 126));
        }
        
        /// <summary>
        /// Drag_Toolbox_System_Information_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_System_Information_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage sysInfoImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.SysInfo.SysInfoImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'SysInfo' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 129));
            Mouse.StartDragging(sysInfoImage, new Point(8, 12));
            Mouse.StopDragging(flowchart, new Point(304, 129));
        }
        
        /// <summary>
        /// Drag_Toolbox_Unique_Records_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Unique_Records_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage uniqueRecordsImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.RecordsetTools.UniqueRecords.UniqueRecordsImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'UniqueRecords' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(304, 133));
            Mouse.StartDragging(uniqueRecordsImage, new Point(43, 6));
            Mouse.StopDragging(flowchart, new Point(304, 133));
        }
        
        /// <summary>
        /// Drag_Toolbox_Unzip_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Unzip_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage unZipImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.UnZip.UnZipImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'UnZip' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 128));
            Mouse.StartDragging(unZipImage, new Point(15, 0));
            Mouse.StopDragging(flowchart, new Point(306, 128));
        }
        
        /// <summary>
        /// Drag_Toolbox_Web_Request_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Web_Request_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage webRequestImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.WebRequest.WebRequestImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'WebRequest' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(308, 128));
            Mouse.StartDragging(webRequestImage, new Point(14, 3));
            Mouse.StopDragging(flowchart, new Point(308, 128));
        }
        
        /// <summary>
        /// Drag_Toolbox_Write_File_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Write_File_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage writeFileImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.WriteFile.WriteFileImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'WriteFile' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 132));
            Mouse.StartDragging(writeFileImage, new Point(10, 18));
            Mouse.StopDragging(flowchart, new Point(306, 132));
        }
        
        /// <summary>
        /// Drag_Toolbox_XPath_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_XPath_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage xPathImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.UtilityTools.XPath.XPathImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'XPath' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(307, 123));
            Mouse.StartDragging(xPathImage, new Point(12, -13));
            Mouse.StopDragging(flowchart, new Point(307, 123));
        }
        
        /// <summary>
        /// Drag_Toolbox_Zip_Onto_DesignSurface
        /// </summary>
        public void Drag_Toolbox_Zip_Onto_DesignSurface()
        {
            #region Variable Declarations
            WpfImage zipImage = this.MainStudioWindow.DockManager.SplitPaneLeft.ToolBox.ToolListBox.FileAndFTP.Zip.ZipImage;
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Move 'Zip' image to 'Flowchart' custom control
            flowchart.EnsureClickable(new Point(306, 131));
            Mouse.StartDragging(zipImage, new Point(16, 4));
            Mouse.StopDragging(flowchart, new Point(306, 131));
        }
        
        /// <summary>
        /// Enter_RemoteServerUITestWorkflow_Into_Explorer_Filter - Use 'Enter_RemoteServerUITestWorkflow_Into_Explorer_FilterParams' to pass parameters into this method.
        /// </summary>
        public void Enter_RemoteServerUITestWorkflow_Into_Explorer_Filter()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.SearchTextBox;
            #endregion

            // Type 'RemoteServerUITestWorkflow' in 'SearchTextBox' text box
            searchTextBox.Text = this.Enter_RemoteServerUITestWorkflow_Into_Explorer_FilterParams.SearchTextBoxText;
        }
        
        /// <summary>
        /// Enter_Servicename_As_RemoteServerUITestWorkflow - Use 'Enter_Servicename_As_RemoteServerUITestWorkflowParams' to pass parameters into this method.
        /// </summary>
        public void Enter_Servicename_As_RemoteServerUITestWorkflow()
        {
            #region Variable Declarations
            WpfEdit serviceNameTextBox = this.SaveDialogWindow.ServiceNameTextBox;
            #endregion

            // Type 'RemoteServerUITestWorkflow' in 'ServiceNameTextBox' text box
            serviceNameTextBox.Text = this.Enter_Servicename_As_RemoteServerUITestWorkflowParams.ServiceNameTextBoxText;
        }
        
        /// <summary>
        /// Enter_Servicename_As_SomeWorkflow - Use 'Enter_Servicename_As_SomeWorkflowParams' to pass parameters into this method.
        /// </summary>
        public void Enter_Servicename_As_SomeWorkflow()
        {
            #region Variable Declarations
            WpfEdit serviceNameTextBox = this.SaveDialogWindow.ServiceNameTextBox;
            #endregion

            // Type 'SomeWorkflow' in 'ServiceNameTextBox' text box
            serviceNameTextBox.Text = this.Enter_Servicename_As_SomeWorkflowParams.ServiceNameTextBoxText;
        }
        
        /// <summary>
        /// Enter_Servicename_As_TSTCIREMOTE - Use 'Enter_Servicename_As_TSTCIREMOTEParams' to pass parameters into this method.
        /// </summary>
        public void Enter_Servicename_As_TSTCIREMOTE()
        {
            #region Variable Declarations
            WpfEdit serviceNameTextBox = this.SaveDialogWindow.ServiceNameTextBox;
            #endregion

            // Type 'TSTCIREMOTE' in 'ServiceNameTextBox' text box
            serviceNameTextBox.Text = this.Enter_Servicename_As_TSTCIREMOTEParams.ServiceNameTextBoxText;
        }
        
        /// <summary>
        /// Enter_SomeWorkflow_Into_Explorer_Filter - Use 'Enter_SomeWorkflow_Into_Explorer_FilterParams' to pass parameters into this method.
        /// </summary>
        public void Enter_SomeWorkflow_Into_Explorer_Filter()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.SearchTextBox;
            #endregion

            // Type 'SomeWorkflow' in 'SearchTextBox' text box
            searchTextBox.Text = this.Enter_SomeWorkflow_Into_Explorer_FilterParams.SearchTextBoxText;
        }
        
        /// <summary>
        /// Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariable - Use 'Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams' to pass parameters into this method.
        /// </summary>
        public void Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariable()
        {
            #region Variable Declarations
            WpfEdit textBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.LargeView.DataGrid.Row1.VariableCell.TextBox;
            #endregion

            // Type '[[SomeVariable]]' in 'UI__Row1_FieldName_AutoID' text box
            textBox.Text = this.Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams.TextBoxText;
        }
        
        /// <summary>
        /// Enter_TSTCIREMOTE_Into_Explorer_Filter - Use 'Enter_TSTCIREMOTE_Into_Explorer_FilterParams' to pass parameters into this method.
        /// </summary>
        public void Enter_TSTCIREMOTE_Into_Explorer_Filter()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.SearchTextBox;
            #endregion

            // Type 'TSTCIREMOTE' in 'SearchTextBox' text box
            searchTextBox.Text = this.Enter_TSTCIREMOTE_Into_Explorer_FilterParams.SearchTextBoxText;
        }
        
        /// <summary>
        /// Enter_workflow1_Into_Explorer_Filter - Use 'Enter_workflow1_Into_Explorer_FilterParams' to pass parameters into this method.
        /// </summary>
        public void Enter_workflow1_Into_Explorer_Filter()
        {
            #region Variable Declarations
            WpfEdit searchTextBox = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.SearchTextBox;
            #endregion

            // Type 'workflow1' in 'SearchTextBox' text box
            searchTextBox.Text = this.Enter_workflow1_Into_Explorer_FilterParams.SearchTextBoxText;
        }
        
        /// <summary>
        /// Open_Assign_Tool_Large_View
        /// </summary>
        public void Open_Assign_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom multiAssign = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign;
            #endregion

            // Double-Click 'DsfMultiAssignActivity' custom control
            Mouse.DoubleClick(multiAssign, new Point(145, 5));
        }
        
        /// <summary>
        /// Open_Assign_Tool_Qvi_Large_View - Use 'Open_Assign_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Assign_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign.OpenQuickVariableInpToggleButton;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Assign_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;
        }
        
        /// <summary>
        /// Open_Base_Conversion_Tool_Qvi_Large_View - Use 'Open_Base_Conversion_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Base_Conversion_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert.OpenQuickVariableInpToggleButton;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Base_Conversion_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;
        }
        
        /// <summary>
        /// Open_Case_Conversion_Tool_Qvi_Large_View - Use 'Open_Case_Conversion_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Case_Conversion_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CaseConvert.OpenQuickVariableInpToggleButton;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Case_Conversion_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;
        }
        
        /// <summary>
        /// Open_CMD_Line_Tool_Large_View
        /// </summary>
        public void Open_CMD_Line_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom executeCommandLine = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine;
            #endregion

            // Double-Click 'DsfExecuteCommandLineActivity' custom control
            Mouse.DoubleClick(executeCommandLine, new Point(174, 10));
        }
        
        /// <summary>
        /// Open_Context_Menu_OnDesignSurface
        /// </summary>
        public void Open_Context_Menu_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom flowchart = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart;
            #endregion

            // Right-Click 'Flowchart' custom control
            Mouse.Click(flowchart, MouseButtons.Right, ModifierKeys.None, new Point(304, 286));
        }
        
        /// <summary>
        /// Open_Copy_Tool_Large_View
        /// </summary>
        public void Open_Copy_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom pathCopy = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCopy;
            #endregion

            // Double-Click 'DsfPathCopy' custom control
            Mouse.DoubleClick(pathCopy, new Point(144, 11));
        }
        
        /// <summary>
        /// Open_CountRecords_Large_View
        /// </summary>
        public void Open_CountRecords_Large_View()
        {
            #region Variable Declarations
            WpfCustom countRecordset = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CountRecordset;
            #endregion

            // Double-Click 'DsfCountRecordsetActivity' custom control
            Mouse.DoubleClick(countRecordset, new Point(130, 11));
        }
        
        /// <summary>
        /// Open_Create_JSON_Large_View
        /// </summary>
        public void Open_Create_JSON_Large_View()
        {
            #region Variable Declarations
            WpfCustom createJson = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson;
            #endregion

            // Double-Click 'DsfCreateJsonActivity' custom control
            Mouse.DoubleClick(createJson, new Point(124, 9));
        }
        
        /// <summary>
        /// Open_Create_Tool_Large_View
        /// </summary>
        public void Open_Create_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom pathCreate = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCreate;
            #endregion

            // Double-Click 'DsfPathCreate' custom control
            Mouse.DoubleClick(pathCreate, new Point(118, 13));
        }
        
        /// <summary>
        /// Open_Data_Merge_Large_View
        /// </summary>
        public void Open_Data_Merge_Large_View()
        {
            #region Variable Declarations
            WpfCustom dataMerge = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge;
            #endregion

            // Double-Click 'DsfDataMergeActivity' custom control
            Mouse.DoubleClick(dataMerge, new Point(185, 9));
        }
        
        /// <summary>
        /// Open_Data_Merge_Tool_Qvi_Large_View - Use 'Open_Data_Merge_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Data_Merge_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge.OpenQuickVariableInpToggleButton;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Data_Merge_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;
        }
        
        /// <summary>
        /// Open_Data_Split_Large_View
        /// </summary>
        public void Open_Data_Split_Large_View()
        {
            #region Variable Declarations
            WpfCustom dataSplit = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit;
            #endregion

            // Double-Click 'DsfDataSplitActivity' custom control
            Mouse.DoubleClick(dataSplit, new Point(203, 10));
        }
        
        /// <summary>
        /// Open_Data_Split_Tool_Qvi_Large_View - Use 'Open_Data_Split_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Data_Split_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit.OpenQuickVariableInpToggleButton;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Data_Split_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;
        }
        
        /// <summary>
        /// Open_DotNet_DLL_Connector_Tool_Small_View
        /// </summary>
        public void Open_DotNet_DLL_Connector_Tool_Small_View()
        {
            #region Variable Declarations
            WpfCustom dotNetDll = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll;
            #endregion

            // Double-Click 'DsfDotNetDllActivity' custom control
            Mouse.DoubleClick(dotNetDll, new Point(238, 16));
        }
        
        /// <summary>
        /// Open_DropboxFileOperation_Large_View
        /// </summary>
        public void Open_DropboxFileOperation_Large_View()
        {
            #region Variable Declarations
            WpfCustom dropBox_DOWNLOAD = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DropBox_DOWNLOAD;
            #endregion

            // Double-Click 'DsfDropBoxFileActivity' custom control
            Mouse.DoubleClick(dropBox_DOWNLOAD, new Point(174, 14));
        }
        
        /// <summary>
        /// Open_Email_Tool_Large_View
        /// </summary>
        public void Open_Email_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sendEmail = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SendEmail;
            #endregion

            // Double-Click 'DsfSendEmailActivity' custom control
            Mouse.DoubleClick(sendEmail, new Point(168, 11));
        }
        
        /// <summary>
        /// Open_ExecuteCommandline_LargeView
        /// </summary>
        public void Open_ExecuteCommandline_LargeView()
        {
            #region Variable Declarations
            WpfCustom executeCommandLine = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine;
            #endregion

            // Double-Click 'DsfExecuteCommandLineActivity' custom control
            Mouse.DoubleClick(executeCommandLine, new Point(178, 10));
        }
        
        /// <summary>
        /// Open_Find_Record_Index_Tool_Large_View
        /// </summary>
        public void Open_Find_Record_Index_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom findRecordsIndex = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindRecordsIndex;
            #endregion

            // Double-Click 'DsfFindRecordsMultipleCriteriaActivity' custom control
            Mouse.DoubleClick(findRecordsIndex, new Point(172, 5));
        }
        
        /// <summary>
        /// Open_ForEach_Large_View
        /// </summary>
        public void Open_ForEach_Large_View()
        {
            #region Variable Declarations
            WpfCustom forEach = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach;
            #endregion

            // Double-Click 'DsfForEachActivity' custom control
            Mouse.DoubleClick(forEach, new Point(131, 14));
        }
        
        /// <summary>
        /// Open_GetWeb_RequestTool_small_View
        /// </summary>
        public void Open_GetWeb_RequestTool_small_View()
        {
            #region Variable Declarations
            WpfCustom webGet = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet;
            #endregion

            // Double-Click 'DsfWebGetActivity' custom control
            Mouse.DoubleClick(webGet, new Point(237, 7));
        }
        
        /// <summary>
        /// Open_Json_Tool_Large_View
        /// </summary>
        public void Open_Json_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom createJson = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson;
            #endregion

            // Double-Click 'DsfCreateJsonActivity' custom control
            Mouse.DoubleClick(createJson, new Point(158, 13));
        }
        
        /// <summary>
        /// Open_Json_Tool_Qvi_Large_View - Use 'Open_Json_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Json_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson.OpenQuickVariableInpToggleButton;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Json_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;
        }
        
        /// <summary>
        /// Open_Move_Tool_Large_View
        /// </summary>
        public void Open_Move_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom pathMove = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathMove;
            #endregion

            // Double-Click 'DsfPathMove' custom control
            Mouse.DoubleClick(pathMove, new Point(125, 6));
        }
        
        /// <summary>
        /// Open_MySql_Database_Tool_Small_View
        /// </summary>
        public void Open_MySql_Database_Tool_Small_View()
        {
            #region Variable Declarations
            WpfCustom mySqlDatabase = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MySqlDatabase;
            #endregion

            // Double-Click 'DsfMySqlDatabaseActivity' custom control
            Mouse.DoubleClick(mySqlDatabase, new Point(238, 15));
        }
        
        /// <summary>
        /// Open_PostWeb_RequestTool_small_View
        /// </summary>
        public void Open_PostWeb_RequestTool_small_View()
        {
            #region Variable Declarations
            WpfCustom webPost = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebPost;
            #endregion

            // Double-Click 'DsfWebPostActivity' custom control
            Mouse.DoubleClick(webPost, new Point(255, 8));
        }
        
        /// <summary>
        /// Open_Read_File_Tool_Large_View
        /// </summary>
        public void Open_Read_File_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom fileRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileRead;
            #endregion

            // Double-Click 'DsfFileRead' custom control
            Mouse.DoubleClick(fileRead, new Point(120, 5));
        }
        
        /// <summary>
        /// Open_Read_Folder_Tool_Large_View
        /// </summary>
        public void Open_Read_Folder_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom folderRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FolderRead;
            #endregion

            // Double-Click 'DsfFolderRead' custom control
            Mouse.DoubleClick(folderRead, new Point(138, 14));
        }
        
        /// <summary>
        /// Open_Rename_Tool_Large_View
        /// </summary>
        public void Open_Rename_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom pathRename = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathRename;
            #endregion

            // Double-Click 'DsfPathRename' custom control
            Mouse.DoubleClick(pathRename, new Point(145, 7));
        }
        
        /// <summary>
        /// Open_Sharepoint_Create_Tool_Large_View
        /// </summary>
        public void Open_Sharepoint_Create_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sharepointCreate = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCreate;
            #endregion

            // Double-Click 'SharepointCreateListItemActivity' custom control
            Mouse.DoubleClick(sharepointCreate, new Point(195, 11));
        }
        
        /// <summary>
        /// Open_Sharepoint_Delete_Tool_Large_View
        /// </summary>
        public void Open_Sharepoint_Delete_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sharepointDelete = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointDelete;
            #endregion

            // Double-Click 'SharepointDeleteListItemActivity' custom control
            Mouse.DoubleClick(sharepointDelete, new Point(218, 11));
        }
        
        /// <summary>
        /// Open_Sharepoint_Read_Tool_Large_View
        /// </summary>
        public void Open_Sharepoint_Read_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sharepointRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointRead;
            #endregion

            // Double-Click 'SharepointReadListActivity' custom control
            Mouse.DoubleClick(sharepointRead, new Point(195, 7));
        }
        
        /// <summary>
        /// Open_Sharepoint_Update_Tool_Large_View
        /// </summary>
        public void Open_Sharepoint_Update_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sharepointUpdate = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointUpdate;
            #endregion

            // Double-Click 'SharepointUpdateListItemActivity' custom control
            Mouse.DoubleClick(sharepointUpdate, new Point(230, 11));
        }
        
        /// <summary>
        /// Open_SortRecords_Large_View
        /// </summary>
        public void Open_SortRecords_Large_View()
        {
            #region Variable Declarations
            WpfCustom sortRecords = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SortRecords;
            #endregion

            // Double-Click 'DsfSortRecordsActivity' custom control
            Mouse.DoubleClick(sortRecords, new Point(114, 13));
        }
        
        /// <summary>
        /// Open_SQL_Bulk_Insert_Tool_Large_View
        /// </summary>
        public void Open_SQL_Bulk_Insert_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom sqlBulkInsert = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlBulkInsert;
            #endregion

            // Double-Click 'DsfSqlBulkInsertActivity' custom control
            Mouse.DoubleClick(sqlBulkInsert, new Point(157, 6));
        }
        
        /// <summary>
        /// Open_SQL_Bulk_Insert_Tool_Qvi_Large_View - Use 'Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_SQL_Bulk_Insert_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlBulkInsert.OpenQuickVariableInpToggleButton;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;
        }
        
        /// <summary>
        /// Open_Sql_Server_Tool_small_View
        /// </summary>
        public void Open_Sql_Server_Tool_small_View()
        {
            #region Variable Declarations
            WpfCustom sqlServerDatabase = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase;
            #endregion

            // Double-Click 'DsfSqlServerDatabaseActivity' custom control
            Mouse.DoubleClick(sqlServerDatabase, new Point(253, 18));
        }
        
        /// <summary>
        /// Open_System_Information_Tool_Qvi_Large_View - Use 'Open_System_Information_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_System_Information_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.GatherSystemInfo.OpenQuickVariableInpToggleButton;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_System_Information_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;
        }
        
        /// <summary>
        /// Open_UniqueRecords_Large_View
        /// </summary>
        public void Open_UniqueRecords_Large_View()
        {
            #region Variable Declarations
            WpfCustom unique = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Unique;
            #endregion

            // Double-Click 'DsfUniqueActivity' custom control
            Mouse.DoubleClick(unique, new Point(134, 10));
        }
        
        /// <summary>
        /// Open_Unzip_Tool_Large_View
        /// </summary>
        public void Open_Unzip_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom unZip = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.UnZip;
            #endregion

            // Double-Click 'DsfUnZip' custom control
            Mouse.DoubleClick(unZip, new Point(102, 14));
        }
        
        /// <summary>
        /// Open_WebRequest_LargeView
        /// </summary>
        public void Open_WebRequest_LargeView()
        {
            #region Variable Declarations
            WpfCustom webGet = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet;
            #endregion

            // Double-Click 'DsfWebGetActivity' custom control
            Mouse.DoubleClick(webGet, new Point(126, 13));
        }
        
        /// <summary>
        /// Open_Write_File_Tool_Large_View
        /// </summary>
        public void Open_Write_File_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom fileWrite = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileWrite;
            #endregion

            // Double-Click 'DsfFileWrite' custom control
            Mouse.DoubleClick(fileWrite, new Point(149, 13));
        }
        
        /// <summary>
        /// Open_Xpath_Tool_Large_View
        /// </summary>
        public void Open_Xpath_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom xPath = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath;
            #endregion

            // Double-Click 'DsfXPathActivity' custom control
            Mouse.DoubleClick(xPath, new Point(113, 12));
        }
        
        /// <summary>
        /// Open_Xpath_Tool_Qvi_Large_View - Use 'Open_Xpath_Tool_Qvi_Large_ViewParams' to pass parameters into this method.
        /// </summary>
        public void Open_Xpath_Tool_Qvi_Large_View()
        {
            #region Variable Declarations
            WpfToggleButton openQuickVariableInpToggleButton = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath.OpenQuickVariableInpToggleButton;
            #endregion

            // Set to 'Pressed' state 'Open Quick Variable Input' toggle button
            openQuickVariableInpToggleButton.Pressed = this.Open_Xpath_Tool_Qvi_Large_ViewParams.OpenQuickVariableInpToggleButtonPressed;
        }
        
        /// <summary>
        /// Open_Zip_Tool_Large_View
        /// </summary>
        public void Open_Zip_Tool_Large_View()
        {
            #region Variable Declarations
            WpfCustom zip = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Zip;
            #endregion

            // Double-Click 'DsfZip' custom control
            Mouse.DoubleClick(zip, new Point(124, 12));
        }
        
        /// <summary>
        /// PressF11_EnterFullScreen - Use 'PressF11_EnterFullScreenParams' to pass parameters into this method.
        /// </summary>
        public void PressF11_EnterFullScreen()
        {
            #region Variable Declarations
            WpfWindow mainStudioWindow = this.MainStudioWindow;
            #endregion

            // Type '{F11}' in 'Warewolf' window
            Keyboard.SendKeys(mainStudioWindow, this.PressF11_EnterFullScreenParams.MainStudioWindowSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Right_Click_Context_Menu_InExplorer
        /// </summary>
        public void Right_Click_Context_Menu_InExplorer()
        {
            #region Variable Declarations
            WpfTreeItem explorerTreeItemChild = this.MainStudioWindow.DockManager.SplitPaneLeft.Explorer.ExplorerTree.ExplorerTreeItem.ExplorerTreeItemChild;
            #endregion

            // Right-Click 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item
            Mouse.Click(explorerTreeItemChild, MouseButtons.Right, ModifierKeys.None, new Point(107, 9));
        }
        
        /// <summary>
        /// Right_Click_Help_Tab
        /// </summary>
        public void Right_Click_Help_Tab()
        {
            #region Variable Declarations
            WpfTabPage helpTab = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.HelpTab;
            #endregion

            // Right-Click 'Dev2.Studio.ViewModels.Help.HelpViewModel' tab
            Mouse.Click(helpTab, MouseButtons.Right, ModifierKeys.None, new Point(64, 15));
        }
        
        /// <summary>
        /// RightClick_Assign_OnDesignSurface
        /// </summary>
        public void RightClick_Assign_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom multiAssign = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MultiAssign;
            #endregion

            // Right-Click 'DsfMultiAssignActivity' custom control
            Mouse.Click(multiAssign, MouseButtons.Right, ModifierKeys.None, new Point(115, 10));
        }
        
        /// <summary>
        /// RightClick_BaseConvert_OnDesignSurface
        /// </summary>
        public void RightClick_BaseConvert_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom baseConvert = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.BaseConvert;
            #endregion

            // Right-Click 'DsfBaseConvertActivity' custom control
            Mouse.Click(baseConvert, MouseButtons.Right, ModifierKeys.None, new Point(148, 12));
        }
        
        /// <summary>
        /// RightClick_Calculate_OnDesignSurface
        /// </summary>
        public void RightClick_Calculate_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom calculate = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Calculate;
            #endregion

            // Right-Click 'DsfCalculateActivity' custom control
            Mouse.Click(calculate, MouseButtons.Right, ModifierKeys.None, new Point(144, 10));
        }
        
        /// <summary>
        /// RightClick_CaseConvert_OnDesignSurface
        /// </summary>
        public void RightClick_CaseConvert_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom caseConvert = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CaseConvert;
            #endregion

            // Right-Click 'DsfCaseConvertActivity' custom control
            Mouse.Click(caseConvert, MouseButtons.Right, ModifierKeys.None, new Point(156, 10));
        }
        
        /// <summary>
        /// RightClick_Comment_OnDesignSurface
        /// </summary>
        public void RightClick_Comment_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom comment = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Comment;
            #endregion

            // Right-Click 'DsfCommentActivity' custom control
            Mouse.Click(comment, MouseButtons.Right, ModifierKeys.None, new Point(121, 10));
        }
        
        /// <summary>
        /// RightClick_Copy_OnDesignSurface
        /// </summary>
        public void RightClick_Copy_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathCopy = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCopy;
            #endregion

            // Right-Click 'DsfPathCopy' custom control
            Mouse.Click(pathCopy, MouseButtons.Right, ModifierKeys.None, new Point(104, 10));
        }
        
        /// <summary>
        /// RightClick_CountRecords_OnDesignSurface
        /// </summary>
        public void RightClick_CountRecords_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom countRecordset = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CountRecordset;
            #endregion

            // Right-Click 'DsfCountRecordsetActivity' custom control
            Mouse.Click(countRecordset, MouseButtons.Right, ModifierKeys.None, new Point(131, 10));
        }
        
        /// <summary>
        /// RightClick_CreateJSON_OnDesignSurface
        /// </summary>
        public void RightClick_CreateJSON_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom createJson = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.CreateJson;
            #endregion

            // Right-Click 'DsfCreateJsonActivity' custom control
            Mouse.Click(createJson, MouseButtons.Right, ModifierKeys.None, new Point(128, 9));
        }
        
        /// <summary>
        /// RightClick_CreateTool_OnDesignSurface
        /// </summary>
        public void RightClick_CreateTool_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathCreate = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathCreate;
            #endregion

            // Right-Click 'DsfPathCreate' custom control
            Mouse.Click(pathCreate, MouseButtons.Right, ModifierKeys.None, new Point(108, 14));
        }
        
        /// <summary>
        /// RightClick_DataMerge_OnDesignSurface
        /// </summary>
        public void RightClick_DataMerge_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dataMerge = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataMerge;
            #endregion

            // Right-Click 'DsfDataMergeActivity' custom control
            Mouse.Click(dataMerge, MouseButtons.Right, ModifierKeys.None, new Point(140, 7));
        }
        
        /// <summary>
        /// RightClick_DataSplit_OnDesignSurface
        /// </summary>
        public void RightClick_DataSplit_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dataSplit = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DataSplit;
            #endregion

            // Right-Click 'DsfDataSplitActivity' custom control
            Mouse.Click(dataSplit, MouseButtons.Right, ModifierKeys.None, new Point(153, 6));
        }
        
        /// <summary>
        /// RightClick_DateTime_OnDesignSurface
        /// </summary>
        public void RightClick_DateTime_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dateTime = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTime;
            #endregion

            // Right-Click 'DsfDateTimeActivity' custom control
            Mouse.Click(dateTime, MouseButtons.Right, ModifierKeys.None, new Point(145, 13));
        }
        
        /// <summary>
        /// RightClick_DateTimeDifference_OnDesignSurface
        /// </summary>
        public void RightClick_DateTimeDifference_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dateTimeDifference = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DateTimeDifference;
            #endregion

            // Right-Click 'DsfDateTimeDifferenceActivity' custom control
            Mouse.Click(dateTimeDifference, MouseButtons.Right, ModifierKeys.None, new Point(174, 10));
        }
        
        /// <summary>
        /// RightClick_Decision_OnDesignSurface
        /// </summary>
        public void RightClick_Decision_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom decision = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Decision;
            #endregion

            // Right-Click 'FlowDecision' custom control
            Mouse.Click(decision, MouseButtons.Right, ModifierKeys.None, new Point(28, 22));
        }
        
        /// <summary>
        /// RightClick_Delete_OnDesignSurface
        /// </summary>
        public void RightClick_Delete_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathDelete = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathDelete;
            #endregion

            // Right-Click 'DsfPathDelete' custom control
            Mouse.Click(pathDelete, MouseButtons.Right, ModifierKeys.None, new Point(100, 10));
        }
        
        /// <summary>
        /// RightClick_DeleteRecord_OnDesignSurface
        /// </summary>
        public void RightClick_DeleteRecord_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom deleteRecord = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DeleteRecord;
            #endregion

            // Right-Click 'DsfDeleteRecordActivity' custom control
            Mouse.Click(deleteRecord, MouseButtons.Right, ModifierKeys.None, new Point(116, 9));
        }
        
        /// <summary>
        /// RightClick_DotNetDllConnector_OnDesignSurface
        /// </summary>
        public void RightClick_DotNetDllConnector_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dotNetDll = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DotNetDll;
            #endregion

            // Right-Click 'DsfDotNetDllActivity' custom control
            Mouse.Click(dotNetDll, MouseButtons.Right, ModifierKeys.None, new Point(164, 10));
        }
        
        /// <summary>
        /// RightClick_DropboxFileOperation_OnDesignSurface
        /// </summary>
        public void RightClick_DropboxFileOperation_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom dropBox_DOWNLOAD = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.DropBox_DOWNLOAD;
            #endregion

            // Right-Click 'DsfDropBoxFileActivity' custom control
            Mouse.Click(dropBox_DOWNLOAD, MouseButtons.Right, ModifierKeys.None, new Point(181, 11));
        }
        
        /// <summary>
        /// RightClick_Email_OnDesignSurface
        /// </summary>
        public void RightClick_Email_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sendEmail = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SendEmail;
            #endregion

            // Right-Click 'DsfSendEmailActivity' custom control
            Mouse.Click(sendEmail, MouseButtons.Right, ModifierKeys.None, new Point(129, 11));
        }
        
        /// <summary>
        /// RightClick_ExecuteCommandLine_OnDesignSurface
        /// </summary>
        public void RightClick_ExecuteCommandLine_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom executeCommandLine = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ExecuteCommandLine;
            #endregion

            // Right-Click 'DsfExecuteCommandLineActivity' custom control
            Mouse.Click(executeCommandLine, MouseButtons.Right, ModifierKeys.None, new Point(165, 13));
        }
        
        /// <summary>
        /// RightClick_FindIndex_OnDesignSurface
        /// </summary>
        public void RightClick_FindIndex_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom findIndex = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindIndex;
            #endregion

            // Right-Click 'DsfIndexActivity' custom control
            Mouse.Click(findIndex, MouseButtons.Right, ModifierKeys.None, new Point(113, 8));
        }
        
        /// <summary>
        /// RightClick_FindRecordIndex_OnDesignSurface
        /// </summary>
        public void RightClick_FindRecordIndex_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom findRecordsIndex = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FindRecordsIndex;
            #endregion

            // Right-Click 'DsfFindRecordsMultipleCriteriaActivity' custom control
            Mouse.Click(findRecordsIndex, MouseButtons.Right, ModifierKeys.None, new Point(191, 11));
        }
        
        /// <summary>
        /// RightClick_ForEach_OnDesignSurface
        /// </summary>
        public void RightClick_ForEach_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom forEach = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.ForEach;
            #endregion

            // Right-Click 'DsfForEachActivity' custom control
            Mouse.Click(forEach, MouseButtons.Right, ModifierKeys.None, new Point(137, 9));
        }
        
        /// <summary>
        /// RightClick_FormatNumber_OnDesignSurface
        /// </summary>
        public void RightClick_FormatNumber_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom formatNumber = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FormatNumber;
            #endregion

            // Right-Click 'DsfNumberFormatActivity' custom control
            Mouse.Click(formatNumber, MouseButtons.Right, ModifierKeys.None, new Point(143, 9));
        }
        
        /// <summary>
        /// RightClick_Length_OnDesignSurface
        /// </summary>
        public void RightClick_Length_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom length = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Length;
            #endregion

            // Right-Click 'DsfRecordsetLengthActivity' custom control
            Mouse.Click(length, MouseButtons.Right, ModifierKeys.None, new Point(97, 10));
        }
        
        /// <summary>
        /// RightClick_Move_OnDesignSurface
        /// </summary>
        public void RightClick_Move_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathMove = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathMove;
            #endregion

            // Right-Click 'DsfPathMove' custom control
            Mouse.Click(pathMove, MouseButtons.Right, ModifierKeys.None, new Point(98, 11));
        }
        
        /// <summary>
        /// RightClick_MySQLConnector_OnDesignSurface
        /// </summary>
        public void RightClick_MySQLConnector_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom mySqlDatabase = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.MySqlDatabase;
            #endregion

            // Right-Click 'DsfMySqlDatabaseActivity' custom control
            Mouse.Click(mySqlDatabase, MouseButtons.Right, ModifierKeys.None, new Point(202, 10));
        }
        
        /// <summary>
        /// RightClick_New_Workflow_Tab
        /// </summary>
        public void RightClick_New_Workflow_Tab()
        {
            #region Variable Declarations
            WpfTabPage workflowTab = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab;
            #endregion

            // Right-Click 'Dev2.Studio.ViewModels.Workflow.WorkflowDesignerVi...' tab
            Mouse.Click(workflowTab, MouseButtons.Right, ModifierKeys.None, new Point(63, 18));
        }
        
        /// <summary>
        /// RightClick_Random_OnDesignSurface
        /// </summary>
        public void RightClick_Random_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom random = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Random;
            #endregion

            // Right-Click 'DsfRandomActivity' custom control
            Mouse.Click(random, MouseButtons.Right, ModifierKeys.None, new Point(107, 13));
        }
        
        /// <summary>
        /// RightClick_ReadFile_OnDesignSurface
        /// </summary>
        public void RightClick_ReadFile_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom fileRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileRead;
            #endregion

            // Right-Click 'DsfFileRead' custom control
            Mouse.Click(fileRead, MouseButtons.Right, ModifierKeys.None, new Point(99, 14));
        }
        
        /// <summary>
        /// RightClick_ReadFolder_OnDesignSurface
        /// </summary>
        public void RightClick_ReadFolder_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom folderRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FolderRead;
            #endregion

            // Right-Click 'DsfFolderRead' custom control
            Mouse.Click(folderRead, MouseButtons.Right, ModifierKeys.None, new Point(115, 12));
        }
        
        /// <summary>
        /// RightClick_Rename_OnDesignSurface
        /// </summary>
        public void RightClick_Rename_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom pathRename = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.PathRename;
            #endregion

            // Right-Click 'DsfPathRename' custom control
            Mouse.Click(pathRename, MouseButtons.Right, ModifierKeys.None, new Point(103, 7));
        }
        
        /// <summary>
        /// RightClick_Replace_OnDesignSurface
        /// </summary>
        public void RightClick_Replace_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom replace = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Replace;
            #endregion

            // Right-Click 'DsfReplaceActivity' custom control
            Mouse.Click(replace, MouseButtons.Right, ModifierKeys.None, new Point(100, 7));
        }
        
        /// <summary>
        /// RightClick_ScriptTool_OnDesignSurface
        /// </summary>
        public void RightClick_ScriptTool_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom scripting = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Scripting;
            #endregion

            // Right-Click 'DsfScriptingActivity' custom control
            Mouse.Click(scripting, MouseButtons.Right, ModifierKeys.None, new Point(110, 11));
        }
        
        /// <summary>
        /// RightClick_Sequence_OnDesignSurface
        /// </summary>
        public void RightClick_Sequence_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sequence = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Sequence;
            #endregion

            // Right-Click 'DsfSequenceActivity' custom control
            Mouse.Click(sequence, MouseButtons.Right, ModifierKeys.None, new Point(119, 8));
        }
        
        /// <summary>
        /// RightClick_SharepointCreateListItem_OnDesignSurface
        /// </summary>
        public void RightClick_SharepointCreateListItem_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointCreate = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointCreate;
            #endregion

            // Right-Click 'SharepointCreateListItemActivity' custom control
            Mouse.Click(sharepointCreate, MouseButtons.Right, ModifierKeys.None, new Point(199, 12));
        }
        
        /// <summary>
        /// RightClick_SharepointDelete_OnDesignSurface
        /// </summary>
        public void RightClick_SharepointDelete_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointDelete = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointDelete;
            #endregion

            // Right-Click 'SharepointDeleteListItemActivity' custom control
            Mouse.Click(sharepointDelete, MouseButtons.Right, ModifierKeys.None, new Point(217, 8));
        }
        
        /// <summary>
        /// RightClick_SharepointRead_OnDesignSurface
        /// </summary>
        public void RightClick_SharepointRead_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointRead = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointRead;
            #endregion

            // Right-Click 'SharepointReadListActivity' custom control
            Mouse.Click(sharepointRead, MouseButtons.Right, ModifierKeys.None, new Point(203, 9));
        }
        
        /// <summary>
        /// RightClick_SharepointUpdate_OnDesignSurface
        /// </summary>
        public void RightClick_SharepointUpdate_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sharepointUpdate = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SharepointUpdate;
            #endregion

            // Right-Click 'SharepointUpdateListItemActivity' custom control
            Mouse.Click(sharepointUpdate, MouseButtons.Right, ModifierKeys.None, new Point(210, 5));
        }
        
        /// <summary>
        /// RightClick_SortRecords_OnDesignSurface
        /// </summary>
        public void RightClick_SortRecords_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sortRecords = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SortRecords;
            #endregion

            // Right-Click 'DsfSortRecordsActivity' custom control
            Mouse.Click(sortRecords, MouseButtons.Right, ModifierKeys.None, new Point(118, 8));
        }
        
        /// <summary>
        /// RightClick_SQLConnector_OnDesignSurface
        /// </summary>
        public void RightClick_SQLConnector_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sqlBulkInsert = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlBulkInsert;
            #endregion

            // Right-Click 'DsfSqlBulkInsertActivity' custom control
            Mouse.Click(sqlBulkInsert, MouseButtons.Right, ModifierKeys.None, new Point(143, 6));
        }
        
        /// <summary>
        /// RightClick_SqlServerConnector_OnDesignSurface
        /// </summary>
        public void RightClick_SqlServerConnector_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom sqlServerDatabase = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.SqlServerDatabase;
            #endregion

            // Right-Click 'DsfSqlServerDatabaseActivity' custom control
            Mouse.Click(sqlServerDatabase, MouseButtons.Right, ModifierKeys.None, new Point(198, 8));
        }
        
        /// <summary>
        /// RightClick_Switch_OnDesignSurface
        /// </summary>
        public void RightClick_Switch_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom switch1 = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Switch;
            #endregion

            // Right-Click 'FlowSwitch`1[String]' custom control
            Mouse.Click(switch1, MouseButtons.Right, ModifierKeys.None, new Point(46, 15));
        }
        
        /// <summary>
        /// RightClick_SystemInformation_OnDesignSurface
        /// </summary>
        public void RightClick_SystemInformation_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom gatherSystemInfo = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.GatherSystemInfo;
            #endregion

            // Right-Click 'DsfGatherSystemInformationActivity' custom control
            Mouse.Click(gatherSystemInfo, MouseButtons.Right, ModifierKeys.None, new Point(217, 10));
        }
        
        /// <summary>
        /// RightClick_UniqueRecords_OnDesignSurface
        /// </summary>
        public void RightClick_UniqueRecords_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom unique = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Unique;
            #endregion

            // Right-Click 'DsfUniqueActivity' custom control
            Mouse.Click(unique, MouseButtons.Right, ModifierKeys.None, new Point(133, 11));
        }
        
        /// <summary>
        /// RightClick_Unzip_OnDesignSurface
        /// </summary>
        public void RightClick_Unzip_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom unZip = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.UnZip;
            #endregion

            // Right-Click 'DsfUnZip' custom control
            Mouse.Click(unZip, MouseButtons.Right, ModifierKeys.None, new Point(101, 10));
        }
        
        /// <summary>
        /// RightClick_WebRequest_OnDesignSurface
        /// </summary>
        public void RightClick_WebRequest_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom webGet = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.WebGet;
            #endregion

            // Right-Click 'DsfWebGetActivity' custom control
            Mouse.Click(webGet, MouseButtons.Right, ModifierKeys.None, new Point(165, 8));
        }
        
        /// <summary>
        /// RightClick_WriteFile_OnDesignSurface
        /// </summary>
        public void RightClick_WriteFile_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom fileWrite = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.FileWrite;
            #endregion

            // Right-Click 'DsfFileWrite' custom control
            Mouse.Click(fileWrite, MouseButtons.Right, ModifierKeys.None, new Point(96, 12));
        }
        
        /// <summary>
        /// RightClick_XPath_OnDesignSurface
        /// </summary>
        public void RightClick_XPath_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom xPath = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.XPath;
            #endregion

            // Right-Click 'DsfXPathActivity' custom control
            Mouse.Click(xPath, MouseButtons.Right, ModifierKeys.None, new Point(99, 8));
        }
        
        /// <summary>
        /// RightClick_Zip_OnDesignSurface
        /// </summary>
        public void RightClick_Zip_OnDesignSurface()
        {
            #region Variable Declarations
            WpfCustom zip = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.WorkflowTab.WorkSurfaceContext.WorkflowDesignerView.ScrollViewerPane.ActivityTypeDesigner.WorkflowItemPresenter.Flowchart.Zip;
            #endregion

            // Right-Click 'DsfZip' custom control
            Mouse.Click(zip, MouseButtons.Right, ModifierKeys.None, new Point(95, 12));
        }
        
        /// <summary>
        /// Select_Action_Droplist_DB_Connector
        /// </summary>
        public void Select_Action_Droplist_DB_Connector()
        {
            #region Variable Declarations
            WpfCustom actionsComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DBConnectorWizardTab.WorkSurfaceContext.ActionsComboBox;
            #endregion

            // Click 'ActionsComboBox' custom control
            Mouse.Click(actionsComboBox, new Point(226, 6));
        }
        
        /// <summary>
        /// Select_Copy_FromContextMenu
        /// </summary>
        public void Select_Copy_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem copy = this.MainStudioWindow.GenericContextMenu.Copy;
            #endregion

            // Click 'Copy' menu item
            Mouse.Click(copy, new Point(27, 18));
        }
        
        /// <summary>
        /// Select_CopyAsImage_FromContextMenu
        /// </summary>
        public void Select_CopyAsImage_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem copyasImage = this.MainStudioWindow.GenericContextMenu.CopyasImage;
            #endregion

            // Click 'Copy as Image' menu item
            Mouse.Click(copyasImage, new Point(62, 22));
        }
        
        /// <summary>
        /// Select_Cut_FromContextMenu
        /// </summary>
        public void Select_Cut_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem cut = this.MainStudioWindow.GenericContextMenu.Cut;
            #endregion

            // Click 'Cut' menu item
            Mouse.Click(cut, new Point(53, 16));
        }
        
        /// <summary>
        /// Select_Data_Source_Droplist
        /// </summary>
        public void Select_Data_Source_Droplist()
        {
            #region Variable Declarations
            WpfCustom sourcesComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.DBConnectorWizardTab.WorkSurfaceContext.SourcesComboBox;
            #endregion

            // Click 'SourcesComboBox' custom control
            Mouse.Click(sourcesComboBox, new Point(228, 12));
        }
        
        /// <summary>
        /// Select_Delete_FromExplorerContextMenu
        /// </summary>
        public void Select_Delete_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem delete = this.MainStudioWindow.ExplorerContextMenu.Delete;
            #endregion

            // Click 'Delete' menu item
            Mouse.Click(delete, new Point(87, 12));
        }
        
        /// <summary>
        /// Select_DeleteRow_FromContextMenu
        /// </summary>
        public void Select_DeleteRow_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem deleteRow = this.MainStudioWindow.GenericContextMenu.DeleteRow;
            #endregion

            // Click 'Delete Row' menu item
            Mouse.Click(deleteRow, new Point(74, 9));
        }
        
        /// <summary>
        /// Select_Deploy_FromExplorerContextMenu
        /// </summary>
        public void Select_Deploy_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem deploy = this.MainStudioWindow.ExplorerContextMenu.Deploy;
            #endregion

            // Click 'Deploy' menu item
            Mouse.Click(deploy, new Point(57, 11));
        }
        
        /// <summary>
        /// Select_http_From_Server_Source_Wizard_Address_Protocol_Dropdown
        /// </summary>
        public void Select_http_From_Server_Source_Wizard_Address_Protocol_Dropdown()
        {
            #region Variable Declarations
            WpfCustom comboboxListItemAsHttp = this.MainStudioWindow.ComboboxListItemAsHttp;
            #endregion

            // Click 'http' custom control
            Mouse.Click(comboboxListItemAsHttp, new Point(31, 12));
        }
        
        /// <summary>
        /// Select_InsertRow_FromContextMenu
        /// </summary>
        public void Select_InsertRow_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem insertRow = this.MainStudioWindow.GenericContextMenu.InsertRow;
            #endregion

            // Click 'Insert Row' menu item
            Mouse.Click(insertRow, new Point(66, 19));
        }
        
        /// <summary>
        /// Select_localhost_From_Explorer_Remote_Server_Dropdown_List
        /// </summary>
        public void Select_localhost_From_Explorer_Remote_Server_Dropdown_List()
        {
            #region Variable Declarations
            WpfText comboboxListItemAsLocalhost = this.MainStudioWindow.ComboboxListItemAsLocalhost;
            #endregion

            // Click 'localhost (Connected)' label
            Mouse.Click(comboboxListItemAsLocalhost, new Point(94, 10));
        }
        
        /// <summary>
        /// Select_NewDatabaseSource_FromExplorerContextMenu
        /// </summary>
        public void Select_NewDatabaseSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newDatabaseSource = this.MainStudioWindow.ExplorerContextMenu.NewDatabaseSource;
            #endregion

            // Click 'New Database Source' menu item
            Mouse.Click(newDatabaseSource, new Point(72, 14));
        }
        
        /// <summary>
        /// Select_NewDropboxSource_FromExplorerContextMenu
        /// </summary>
        public void Select_NewDropboxSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newDropboxSource = this.MainStudioWindow.ExplorerContextMenu.NewDropboxSource;
            #endregion

            // Click 'New Dropbox Source' menu item
            Mouse.Click(newDropboxSource, new Point(119, 15));
        }
        
        /// <summary>
        /// Select_NewEmailSource_FromExplorerContextMenu
        /// </summary>
        public void Select_NewEmailSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newEmailSource = this.MainStudioWindow.ExplorerContextMenu.NewEmailSource;
            #endregion

            // Click 'New Email Source' menu item
            Mouse.Click(newEmailSource, new Point(101, 13));
        }
        
        /// <summary>
        /// Select_NewFolder_FromExplorerContextMenu
        /// </summary>
        public void Select_NewFolder_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newFolder = this.MainStudioWindow.ExplorerContextMenu.NewFolder;
            #endregion

            // Click 'New Folder' menu item
            Mouse.Click(newFolder, new Point(87, 14));
        }
        
        /// <summary>
        /// Select_NewPluginSource_FromExplorerContextMenu
        /// </summary>
        public void Select_NewPluginSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newPluginSource = this.MainStudioWindow.ExplorerContextMenu.NewPluginSource;
            #endregion

            // Click 'New Plugin Source' menu item
            Mouse.Click(newPluginSource, new Point(78, 11));
        }
        
        /// <summary>
        /// Select_NewRemoteServer_From_Explorer_Server_Dropdownlist
        /// </summary>
        public void Select_NewRemoteServer_From_Explorer_Server_Dropdownlist()
        {
            #region Variable Declarations
            WpfText newRemoteServerItemText = this.MainStudioWindow.NewRemoteServerListItem.NewRemoteServerItemText;
            #endregion

            // Click 'New Remote Server...' label
            Mouse.Click(newRemoteServerItemText, new Point(114, 10));
        }
        
        /// <summary>
        /// Select_NewServerSource_FromExplorerContextMenu
        /// </summary>
        public void Select_NewServerSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newServerSource = this.MainStudioWindow.ExplorerContextMenu.NewServerSource;
            #endregion

            // Click 'New Server Source' menu item
            Mouse.Click(newServerSource, new Point(44, 13));
        }
        
        /// <summary>
        /// Select_NewSharepointSource_FromExplorerContextMenu
        /// </summary>
        public void Select_NewSharepointSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newSharepointSource = this.MainStudioWindow.ExplorerContextMenu.NewSharepointSource;
            #endregion

            // Click 'New Sharepoint Source' menu item
            Mouse.Click(newSharepointSource, new Point(126, 17));
        }
        
        /// <summary>
        /// Select_NewWebSource_FromExplorerContextMenu
        /// </summary>
        public void Select_NewWebSource_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newWebServiceSource = this.MainStudioWindow.ExplorerContextMenu.NewWebServiceSource;
            #endregion

            // Click 'New Web Service Source' menu item
            Mouse.Click(newWebServiceSource, new Point(82, 20));
        }
        
        /// <summary>
        /// Select_NewWorkflow_FromExplorerContextMenu
        /// </summary>
        public void Select_NewWorkflow_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem newWorkflow = this.MainStudioWindow.ExplorerContextMenu.NewWorkflow;
            #endregion

            // Click 'New Workflow Service' menu item
            Mouse.Click(newWorkflow, new Point(30, 11));
        }
        
        /// <summary>
        /// Select_Paste_FromContextMenu
        /// </summary>
        public void Select_Paste_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem paste = this.MainStudioWindow.GenericContextMenu.Paste;
            #endregion

            // Click 'Paste' menu item
            Mouse.Click(paste, new Point(52, 16));
        }
        
        /// <summary>
        /// Select_Plugin_Connector_Action_Droplist
        /// </summary>
        public void Select_Plugin_Connector_Action_Droplist()
        {
            #region Variable Declarations
            WpfCustom actionsComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.PluginConnectorWizardTab.WorkSurfaceContext.ActionsComboBox;
            #endregion

            // Click 'ActionsComboBox' custom control
            Mouse.Click(actionsComboBox, new Point(233, 6));
        }
        
        /// <summary>
        /// Select_Plugin_Connector_Namespace_Droplist
        /// </summary>
        public void Select_Plugin_Connector_Namespace_Droplist()
        {
            #region Variable Declarations
            WpfCustom namespacesComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.PluginConnectorWizardTab.WorkSurfaceContext.NamespacesComboBox;
            #endregion

            // Click 'NamespaceComboBox' custom control
            Mouse.Click(namespacesComboBox, new Point(233, 8));
        }
        
        /// <summary>
        /// Select_Plugin_Connector_Source_Droplist
        /// </summary>
        public void Select_Plugin_Connector_Source_Droplist()
        {
            #region Variable Declarations
            WpfCustom sourcesComboBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.PluginConnectorWizardTab.WorkSurfaceContext.SourcesComboBox;
            #endregion

            // Click 'SourcesComboBox' custom control
            Mouse.Click(sourcesComboBox, new Point(231, 16));
        }
        
        /// <summary>
        /// Select_Rename_FromExplorerContextMenu
        /// </summary>
        public void Select_Rename_FromExplorerContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem rename = this.MainStudioWindow.ExplorerContextMenu.Rename;
            #endregion

            // Click 'Rename' menu item
            Mouse.Click(rename, new Point(73, 15));
        }
        
        /// <summary>
        /// Select_SaveAsImage_FromContextMenu
        /// </summary>
        public void Select_SaveAsImage_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem saveasImage = this.MainStudioWindow.GenericContextMenu.SaveasImage;
            #endregion

            // Click 'Save as Image' menu item
            Mouse.Click(saveasImage, new Point(38, 15));
        }
        
        /// <summary>
        /// Select_SetAsStartNode_FromContextMenu
        /// </summary>
        public void Select_SetAsStartNode_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem setasStartNode = this.MainStudioWindow.GenericContextMenu.SetasStartNode;
            #endregion

            // Click 'Set as Start Node' menu item
            Mouse.Click(setasStartNode, new Point(67, 16));
        }
        
        /// <summary>
        /// Select_ShowLargeView_FromContextMenu
        /// </summary>
        public void Select_ShowLargeView_FromContextMenu()
        {
            #region Variable Declarations
            WpfMenuItem showLargeView = this.MainStudioWindow.GenericContextMenu.ShowLargeView;
            #endregion

            // Click 'Show Large View' menu item
            Mouse.Click(showLargeView, new Point(43, 15));
        }
        
        /// <summary>
        /// Select_TSTCIREMOTE_From_Explorer_Remote_Server_Dropdown_List
        /// </summary>
        public void Select_TSTCIREMOTE_From_Explorer_Remote_Server_Dropdown_List()
        {
            #region Variable Declarations
            WpfText comboboxListItemAsTSTCIREMOTE = this.MainStudioWindow.ComboboxListItemAsTSTCIREMOTE;
            #endregion

            // Click 'TSTCIREMOTE' label
            Mouse.Click(comboboxListItemAsTSTCIREMOTE, new Point(79, 8));
        }
        
        /// <summary>
        /// Select_TSTCIREMOTE_From_Server_Source_Wizard_Dropdownlist
        /// </summary>
        public void Select_TSTCIREMOTE_From_Server_Source_Wizard_Dropdownlist()
        {
            #region Variable Declarations
            WpfListItem tSTCIREMOTE = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.AddressComboBox.TSTCIREMOTE;
            #endregion

            // Click 'TST-CI-REMOTE' list item
            Mouse.Click(tSTCIREMOTE, new Point(70, 19));
        }
        
        /// <summary>
        /// Select_TSTCIREMOTEConnected_From_Explorer_Remote_Server_Dropdown_List
        /// </summary>
        public void Select_TSTCIREMOTEConnected_From_Explorer_Remote_Server_Dropdown_List()
        {
            #region Variable Declarations
            WpfText comboboxListItemAsTSTCIREMOTEConnected = this.MainStudioWindow.ComboboxListItemAsTSTCIREMOTEConnected;
            #endregion

            // Click 'TSTCIREMOTE (Connected)' label
            Mouse.Click(comboboxListItemAsTSTCIREMOTEConnected, new Point(80, 13));
        }
        
        /// <summary>
        /// Type_S_Into_DebugInput_Row1_InputData - Use 'Type_S_Into_DebugInput_Row1_InputDataParams' to pass parameters into this method.
        /// </summary>
        public void Type_S_Into_DebugInput_Row1_InputData()
        {
            #region Variable Declarations
            WpfCell uIDescriptionCell = this.MainStudioWindow.DebugInputDialog.UITabItemsTabList.InputDataTab.DataListInputsTable.UIDescriptionCell;
            #endregion

            // Type 's' in 'Description' cell
            uIDescriptionCell.Value = this.Type_S_Into_DebugInput_Row1_InputDataParams.UIDescriptionCellValue;
        }
        
        /// <summary>
        /// Type_tstci_into_Server_Source_Wizard_Address_Textbox - Use 'Type_tstci_into_Server_Source_Wizard_Address_TextboxParams' to pass parameters into this method.
        /// </summary>
        public void Type_tstci_into_Server_Source_Wizard_Address_Textbox()
        {
            #region Variable Declarations
            WpfEdit addressEditBox = this.MainStudioWindow.DockManager.SplitPaneMiddle.SplitPaneContent.TabMan.ServerSourceWizardTab.WorkSurfaceContext.NewServerSourceWizard.AddressComboBox.AddressEditBox;
            #endregion

            // Type 'tst-ci-' in 'Text' text box
            addressEditBox.Text = this.Type_tstci_into_Server_Source_Wizard_Address_TextboxParams.AddressEditBoxText;
        }
        
        /// <summary>
        /// Assert_TSTCIREMOTEConnected_Exists_In_ExplorerRemoteServerDropdownList - Use 'Assert_TSTCIREMOTEConnected_Exists_In_ExplorerRemoteServerDropdownListExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assert_TSTCIREMOTEConnected_Exists_In_ExplorerRemoteServerDropdownList()
        {
            #region Variable Declarations
            WpfText comboboxListItemAsTSTCIREMOTEConnected = this.MainStudioWindow.ComboboxListItemAsTSTCIREMOTEConnected;
            #endregion

            // Verify that the 'Exists' property of 'TSTCIREMOTE (Connected)' label equals 'True'
            Assert.AreEqual(this.Assert_TSTCIREMOTEConnected_Exists_In_ExplorerRemoteServerDropdownListExpectedValues.ComboboxListItemAsTSTCIREMOTEConnectedExists, comboboxListItemAsTSTCIREMOTEConnected.Exists, "TSTCIREMOTE (Connected) does not exist in explorer remote server dropdown list.");
        }
        
        #region Properties
        public virtual Assert_Assign_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Assign_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Assign_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Assign_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Assign_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Assign_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Assign_Large_View_Row1_Variable_Textbox_ExistsExpectedValues Assert_Assign_Large_View_Row1_Variable_Textbox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Assign_Large_View_Row1_Variable_Textbox_ExistsExpectedValues == null))
                {
                    this.mAssert_Assign_Large_View_Row1_Variable_Textbox_ExistsExpectedValues = new Assert_Assign_Large_View_Row1_Variable_Textbox_ExistsExpectedValues();
                }
                return this.mAssert_Assign_Large_View_Row1_Variable_Textbox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Assign_Large_View_Row1_Variable_Textbox_Text_Equals_SomeVariableExpectedValues Assert_Assign_Large_View_Row1_Variable_Textbox_Text_Equals_SomeVariableExpectedValues
        {
            get
            {
                if ((this.mAssert_Assign_Large_View_Row1_Variable_Textbox_Text_Equals_SomeVariableExpectedValues == null))
                {
                    this.mAssert_Assign_Large_View_Row1_Variable_Textbox_Text_Equals_SomeVariableExpectedValues = new Assert_Assign_Large_View_Row1_Variable_Textbox_Text_Equals_SomeVariableExpectedValues();
                }
                return this.mAssert_Assign_Large_View_Row1_Variable_Textbox_Text_Equals_SomeVariableExpectedValues;
            }
        }
        
        public virtual Assert_Assign_Object_Large_View_on_the_Design_Surface_Add_Row_Message_ExistsExpectedValues Assert_Assign_Object_Large_View_on_the_Design_Surface_Add_Row_Message_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Assign_Object_Large_View_on_the_Design_Surface_Add_Row_Message_ExistsExpectedValues == null))
                {
                    this.mAssert_Assign_Object_Large_View_on_the_Design_Surface_Add_Row_Message_ExistsExpectedValues = new Assert_Assign_Object_Large_View_on_the_Design_Surface_Add_Row_Message_ExistsExpectedValues();
                }
                return this.mAssert_Assign_Object_Large_View_on_the_Design_Surface_Add_Row_Message_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Assign_Object_Large_View_on_the_Design_Surface_Insert_Delete_Row_Message_ExistsExpectedValues Assert_Assign_Object_Large_View_on_the_Design_Surface_Insert_Delete_Row_Message_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Assign_Object_Large_View_on_the_Design_Surface_Insert_Delete_Row_Message_ExistsExpectedValues == null))
                {
                    this.mAssert_Assign_Object_Large_View_on_the_Design_Surface_Insert_Delete_Row_Message_ExistsExpectedValues = new Assert_Assign_Object_Large_View_on_the_Design_Surface_Insert_Delete_Row_Message_ExistsExpectedValues();
                }
                return this.mAssert_Assign_Object_Large_View_on_the_Design_Surface_Insert_Delete_Row_Message_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Assign_Object_Large_View_Row1_Value_Textbox_ExistsExpectedValues Assert_Assign_Object_Large_View_Row1_Value_Textbox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Assign_Object_Large_View_Row1_Value_Textbox_ExistsExpectedValues == null))
                {
                    this.mAssert_Assign_Object_Large_View_Row1_Value_Textbox_ExistsExpectedValues = new Assert_Assign_Object_Large_View_Row1_Value_Textbox_ExistsExpectedValues();
                }
                return this.mAssert_Assign_Object_Large_View_Row1_Value_Textbox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Assign_Object_Large_View_Row1_Variable_TextboxExpectedValues Assert_Assign_Object_Large_View_Row1_Variable_TextboxExpectedValues
        {
            get
            {
                if ((this.mAssert_Assign_Object_Large_View_Row1_Variable_TextboxExpectedValues == null))
                {
                    this.mAssert_Assign_Object_Large_View_Row1_Variable_TextboxExpectedValues = new Assert_Assign_Object_Large_View_Row1_Variable_TextboxExpectedValues();
                }
                return this.mAssert_Assign_Object_Large_View_Row1_Variable_TextboxExpectedValues;
            }
        }
        
        public virtual Assert_Assign_Object_Large_View_Row2_Value_Textbox_ExistsExpectedValues Assert_Assign_Object_Large_View_Row2_Value_Textbox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Assign_Object_Large_View_Row2_Value_Textbox_ExistsExpectedValues == null))
                {
                    this.mAssert_Assign_Object_Large_View_Row2_Value_Textbox_ExistsExpectedValues = new Assert_Assign_Object_Large_View_Row2_Value_Textbox_ExistsExpectedValues();
                }
                return this.mAssert_Assign_Object_Large_View_Row2_Value_Textbox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Assign_Object_Large_View_Row2_Variable_Textbox_ExistsExpectedValues Assert_Assign_Object_Large_View_Row2_Variable_Textbox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Assign_Object_Large_View_Row2_Variable_Textbox_ExistsExpectedValues == null))
                {
                    this.mAssert_Assign_Object_Large_View_Row2_Variable_Textbox_ExistsExpectedValues = new Assert_Assign_Object_Large_View_Row2_Variable_Textbox_ExistsExpectedValues();
                }
                return this.mAssert_Assign_Object_Large_View_Row2_Variable_Textbox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Assign_Object_Row2_Value_Textbox_ExistsExpectedValues Assert_Assign_Object_Row2_Value_Textbox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Assign_Object_Row2_Value_Textbox_ExistsExpectedValues == null))
                {
                    this.mAssert_Assign_Object_Row2_Value_Textbox_ExistsExpectedValues = new Assert_Assign_Object_Row2_Value_Textbox_ExistsExpectedValues();
                }
                return this.mAssert_Assign_Object_Row2_Value_Textbox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Assign_Object_Row2_Variable_Textbox_ExistsExpectedValues Assert_Assign_Object_Row2_Variable_Textbox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Assign_Object_Row2_Variable_Textbox_ExistsExpectedValues == null))
                {
                    this.mAssert_Assign_Object_Row2_Variable_Textbox_ExistsExpectedValues = new Assert_Assign_Object_Row2_Variable_Textbox_ExistsExpectedValues();
                }
                return this.mAssert_Assign_Object_Row2_Variable_Textbox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Assign_Object_Small_View_Exists_On_Design_SurfaceExpectedValues Assert_Assign_Object_Small_View_Exists_On_Design_SurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Assign_Object_Small_View_Exists_On_Design_SurfaceExpectedValues == null))
                {
                    this.mAssert_Assign_Object_Small_View_Exists_On_Design_SurfaceExpectedValues = new Assert_Assign_Object_Small_View_Exists_On_Design_SurfaceExpectedValues();
                }
                return this.mAssert_Assign_Object_Small_View_Exists_On_Design_SurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Assign_Object_Small_View_Row1_Value_TextboxExpectedValues Assert_Assign_Object_Small_View_Row1_Value_TextboxExpectedValues
        {
            get
            {
                if ((this.mAssert_Assign_Object_Small_View_Row1_Value_TextboxExpectedValues == null))
                {
                    this.mAssert_Assign_Object_Small_View_Row1_Value_TextboxExpectedValues = new Assert_Assign_Object_Small_View_Row1_Value_TextboxExpectedValues();
                }
                return this.mAssert_Assign_Object_Small_View_Row1_Value_TextboxExpectedValues;
            }
        }
        
        public virtual Assert_Assign_Object_Small_View_Row1_Variable_Textbox_ExistsExpectedValues Assert_Assign_Object_Small_View_Row1_Variable_Textbox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Assign_Object_Small_View_Row1_Variable_Textbox_ExistsExpectedValues == null))
                {
                    this.mAssert_Assign_Object_Small_View_Row1_Variable_Textbox_ExistsExpectedValues = new Assert_Assign_Object_Small_View_Row1_Variable_Textbox_ExistsExpectedValues();
                }
                return this.mAssert_Assign_Object_Small_View_Row1_Variable_Textbox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Assign_QVI_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Assign_QVI_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Assign_QVI_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Assign_QVI_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Assign_QVI_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Assign_QVI_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Assign_Small_View_Row1_Variable_Textbox_ExistsExpectedValues Assert_Assign_Small_View_Row1_Variable_Textbox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Assign_Small_View_Row1_Variable_Textbox_ExistsExpectedValues == null))
                {
                    this.mAssert_Assign_Small_View_Row1_Variable_Textbox_ExistsExpectedValues = new Assert_Assign_Small_View_Row1_Variable_Textbox_ExistsExpectedValues();
                }
                return this.mAssert_Assign_Small_View_Row1_Variable_Textbox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Assign_Small_View_Row1_Variable_Textbox_Text_is_SomeVariableExpectedValues Assert_Assign_Small_View_Row1_Variable_Textbox_Text_is_SomeVariableExpectedValues
        {
            get
            {
                if ((this.mAssert_Assign_Small_View_Row1_Variable_Textbox_Text_is_SomeVariableExpectedValues == null))
                {
                    this.mAssert_Assign_Small_View_Row1_Variable_Textbox_Text_is_SomeVariableExpectedValues = new Assert_Assign_Small_View_Row1_Variable_Textbox_Text_is_SomeVariableExpectedValues();
                }
                return this.mAssert_Assign_Small_View_Row1_Variable_Textbox_Text_is_SomeVariableExpectedValues;
            }
        }
        
        public virtual Assert_Base_Conversion_Exists_OnDesignSurfaceExpectedValues Assert_Base_Conversion_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Base_Conversion_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Base_Conversion_Exists_OnDesignSurfaceExpectedValues = new Assert_Base_Conversion_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Base_Conversion_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Calculate_Exists_OnDesignSurfaceExpectedValues Assert_Calculate_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Calculate_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Calculate_Exists_OnDesignSurfaceExpectedValues = new Assert_Calculate_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Calculate_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Case_Conversion_Exists_OnDesignSurfaceExpectedValues Assert_Case_Conversion_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Case_Conversion_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Case_Conversion_Exists_OnDesignSurfaceExpectedValues = new Assert_Case_Conversion_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Case_Conversion_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Close_Button_Exists_TopRibbonExpectedValues Assert_Close_Button_Exists_TopRibbonExpectedValues
        {
            get
            {
                if ((this.mAssert_Close_Button_Exists_TopRibbonExpectedValues == null))
                {
                    this.mAssert_Close_Button_Exists_TopRibbonExpectedValues = new Assert_Close_Button_Exists_TopRibbonExpectedValues();
                }
                return this.mAssert_Close_Button_Exists_TopRibbonExpectedValues;
            }
        }
        
        public virtual Assert_Close_Tab_Button_ExistsExpectedValues Assert_Close_Tab_Button_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Close_Tab_Button_ExistsExpectedValues == null))
                {
                    this.mAssert_Close_Tab_Button_ExistsExpectedValues = new Assert_Close_Tab_Button_ExistsExpectedValues();
                }
                return this.mAssert_Close_Tab_Button_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_CMD_Line_Exists_OnDesignSurfaceExpectedValues Assert_CMD_Line_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_CMD_Line_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_CMD_Line_Exists_OnDesignSurfaceExpectedValues = new Assert_CMD_Line_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_CMD_Line_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_CMD_Line_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_CMD_Line_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_CMD_Line_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_CMD_Line_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_CMD_Line_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_CMD_Line_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Comment_Exists_OnDesignSurfaceExpectedValues Assert_Comment_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Comment_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Comment_Exists_OnDesignSurfaceExpectedValues = new Assert_Comment_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Comment_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Connect_button_Destination_Server_ExistsExpectedValues Assert_Connect_button_Destination_Server_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Connect_button_Destination_Server_ExistsExpectedValues == null))
                {
                    this.mAssert_Connect_button_Destination_Server_ExistsExpectedValues = new Assert_Connect_button_Destination_Server_ExistsExpectedValues();
                }
                return this.mAssert_Connect_button_Destination_Server_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Connect_Button_Source_Server_ExistsExpectedValues Assert_Connect_Button_Source_Server_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Connect_Button_Source_Server_ExistsExpectedValues == null))
                {
                    this.mAssert_Connect_Button_Source_Server_ExistsExpectedValues = new Assert_Connect_Button_Source_Server_ExistsExpectedValues();
                }
                return this.mAssert_Connect_Button_Source_Server_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Connect_ConnectControl_Button_Exists_InExplorerExpectedValues Assert_Connect_ConnectControl_Button_Exists_InExplorerExpectedValues
        {
            get
            {
                if ((this.mAssert_Connect_ConnectControl_Button_Exists_InExplorerExpectedValues == null))
                {
                    this.mAssert_Connect_ConnectControl_Button_Exists_InExplorerExpectedValues = new Assert_Connect_ConnectControl_Button_Exists_InExplorerExpectedValues();
                }
                return this.mAssert_Connect_ConnectControl_Button_Exists_InExplorerExpectedValues;
            }
        }
        
        public virtual Assert_Connect_Control_DestinationServer_ExistsExpectedValues Assert_Connect_Control_DestinationServer_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Connect_Control_DestinationServer_ExistsExpectedValues == null))
                {
                    this.mAssert_Connect_Control_DestinationServer_ExistsExpectedValues = new Assert_Connect_Control_DestinationServer_ExistsExpectedValues();
                }
                return this.mAssert_Connect_Control_DestinationServer_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Connect_Control_Exists_InExplorerExpectedValues Assert_Connect_Control_Exists_InExplorerExpectedValues
        {
            get
            {
                if ((this.mAssert_Connect_Control_Exists_InExplorerExpectedValues == null))
                {
                    this.mAssert_Connect_Control_Exists_InExplorerExpectedValues = new Assert_Connect_Control_Exists_InExplorerExpectedValues();
                }
                return this.mAssert_Connect_Control_Exists_InExplorerExpectedValues;
            }
        }
        
        public virtual Assert_Connect_Control_SourceServer_ExistsExpectedValues Assert_Connect_Control_SourceServer_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Connect_Control_SourceServer_ExistsExpectedValues == null))
                {
                    this.mAssert_Connect_Control_SourceServer_ExistsExpectedValues = new Assert_Connect_Control_SourceServer_ExistsExpectedValues();
                }
                return this.mAssert_Connect_Control_SourceServer_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Copy_Exists_OnDesignSurfaceExpectedValues Assert_Copy_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Copy_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Copy_Exists_OnDesignSurfaceExpectedValues = new Assert_Copy_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Copy_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Copy_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Copy_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Copy_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Copy_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Copy_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Copy_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Count_Records_Exists_OnDesignSurfaceExpectedValues Assert_Count_Records_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Count_Records_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Count_Records_Exists_OnDesignSurfaceExpectedValues = new Assert_Count_Records_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Count_Records_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Create_Exists_OnDesignSurfaceExpectedValues Assert_Create_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Create_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Create_Exists_OnDesignSurfaceExpectedValues = new Assert_Create_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Create_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Create_JSON_Exists_OnDesignSurfaceExpectedValues Assert_Create_JSON_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Create_JSON_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Create_JSON_Exists_OnDesignSurfaceExpectedValues = new Assert_Create_JSON_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Create_JSON_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Create_Path_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Create_Path_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Create_Path_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Create_Path_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Create_Path_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Create_Path_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Data_Connector_Exists_OnDesignSurfaceExpectedValues Assert_Data_Connector_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Data_Connector_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Data_Connector_Exists_OnDesignSurfaceExpectedValues = new Assert_Data_Connector_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Data_Connector_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Data_Merge_Exists_OnDesignSurfaceExpectedValues Assert_Data_Merge_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Data_Merge_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Data_Merge_Exists_OnDesignSurfaceExpectedValues = new Assert_Data_Merge_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Data_Merge_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Data_Merge_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Data_Merge_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Data_Merge_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Data_Merge_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Data_Merge_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Data_Merge_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Data_Split_Exists_OnDesignSurfaceExpectedValues Assert_Data_Split_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Data_Split_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Data_Split_Exists_OnDesignSurfaceExpectedValues = new Assert_Data_Split_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Data_Split_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Data_Split_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Data_Split_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Data_Split_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Data_Split_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Data_Split_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Data_Split_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Data_Split_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Data_Split_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Data_Split_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Data_Split_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Data_Split_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Data_Split_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Database_Source_Dropdownlist_ExistsExpectedValues Assert_Database_Source_Dropdownlist_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Database_Source_Dropdownlist_ExistsExpectedValues == null))
                {
                    this.mAssert_Database_Source_Dropdownlist_ExistsExpectedValues = new Assert_Database_Source_Dropdownlist_ExistsExpectedValues();
                }
                return this.mAssert_Database_Source_Dropdownlist_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Database_Source_ExistsExpectedValues Assert_Database_Source_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Database_Source_ExistsExpectedValues == null))
                {
                    this.mAssert_Database_Source_ExistsExpectedValues = new Assert_Database_Source_ExistsExpectedValues();
                }
                return this.mAssert_Database_Source_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Date_And_Time_Exists_OnDesignSurfaceExpectedValues Assert_Date_And_Time_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Date_And_Time_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Date_And_Time_Exists_OnDesignSurfaceExpectedValues = new Assert_Date_And_Time_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Date_And_Time_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_DateTime_Difference_Conversion_Exists_OnDesignSurfaceExpectedValues Assert_DateTime_Difference_Conversion_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_DateTime_Difference_Conversion_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_DateTime_Difference_Conversion_Exists_OnDesignSurfaceExpectedValues = new Assert_DateTime_Difference_Conversion_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_DateTime_Difference_Conversion_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_DebugInput_CancelButton_ExistsExpectedValues Assert_DebugInput_CancelButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugInput_CancelButton_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugInput_CancelButton_ExistsExpectedValues = new Assert_DebugInput_CancelButton_ExistsExpectedValues();
                }
                return this.mAssert_DebugInput_CancelButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugInput_DebugButton_ExistsExpectedValues Assert_DebugInput_DebugButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugInput_DebugButton_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugInput_DebugButton_ExistsExpectedValues = new Assert_DebugInput_DebugButton_ExistsExpectedValues();
                }
                return this.mAssert_DebugInput_DebugButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugInput_InputData_Field_ExistsExpectedValues Assert_DebugInput_InputData_Field_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugInput_InputData_Field_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugInput_InputData_Field_ExistsExpectedValues = new Assert_DebugInput_InputData_Field_ExistsExpectedValues();
                }
                return this.mAssert_DebugInput_InputData_Field_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugInput_InputData_Window_ExistsExpectedValues Assert_DebugInput_InputData_Window_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugInput_InputData_Window_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugInput_InputData_Window_ExistsExpectedValues = new Assert_DebugInput_InputData_Window_ExistsExpectedValues();
                }
                return this.mAssert_DebugInput_InputData_Window_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugInput_Json_Tab_ExistsExpectedValues Assert_DebugInput_Json_Tab_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugInput_Json_Tab_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugInput_Json_Tab_ExistsExpectedValues = new Assert_DebugInput_Json_Tab_ExistsExpectedValues();
                }
                return this.mAssert_DebugInput_Json_Tab_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugInput_Json_Window_ExistsExpectedValues Assert_DebugInput_Json_Window_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugInput_Json_Window_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugInput_Json_Window_ExistsExpectedValues = new Assert_DebugInput_Json_Window_ExistsExpectedValues();
                }
                return this.mAssert_DebugInput_Json_Window_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugInput_RememberCheckbox_ExistsExpectedValues Assert_DebugInput_RememberCheckbox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugInput_RememberCheckbox_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugInput_RememberCheckbox_ExistsExpectedValues = new Assert_DebugInput_RememberCheckbox_ExistsExpectedValues();
                }
                return this.mAssert_DebugInput_RememberCheckbox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugInput_ViewInBrowser_Button_ExistsExpectedValues Assert_DebugInput_ViewInBrowser_Button_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugInput_ViewInBrowser_Button_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugInput_ViewInBrowser_Button_ExistsExpectedValues = new Assert_DebugInput_ViewInBrowser_Button_ExistsExpectedValues();
                }
                return this.mAssert_DebugInput_ViewInBrowser_Button_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugInput_Window_ExistsExpectedValues Assert_DebugInput_Window_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugInput_Window_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugInput_Window_ExistsExpectedValues = new Assert_DebugInput_Window_ExistsExpectedValues();
                }
                return this.mAssert_DebugInput_Window_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugInput_Xml_Tab_ExistsExpectedValues Assert_DebugInput_Xml_Tab_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugInput_Xml_Tab_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugInput_Xml_Tab_ExistsExpectedValues = new Assert_DebugInput_Xml_Tab_ExistsExpectedValues();
                }
                return this.mAssert_DebugInput_Xml_Tab_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugInput_Xml_Window_ExistsExpectedValues Assert_DebugInput_Xml_Window_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugInput_Xml_Window_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugInput_Xml_Window_ExistsExpectedValues = new Assert_DebugInput_Xml_Window_ExistsExpectedValues();
                }
                return this.mAssert_DebugInput_Xml_Window_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugOutput_Contains_SomeVariableExpectedValues Assert_DebugOutput_Contains_SomeVariableExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugOutput_Contains_SomeVariableExpectedValues == null))
                {
                    this.mAssert_DebugOutput_Contains_SomeVariableExpectedValues = new Assert_DebugOutput_Contains_SomeVariableExpectedValues();
                }
                return this.mAssert_DebugOutput_Contains_SomeVariableExpectedValues;
            }
        }
        
        public virtual Assert_DebugOutput_ExistsExpectedValues Assert_DebugOutput_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugOutput_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugOutput_ExistsExpectedValues = new Assert_DebugOutput_ExistsExpectedValues();
                }
                return this.mAssert_DebugOutput_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugOutput_ExpandCollapseButton_ExistsExpectedValues Assert_DebugOutput_ExpandCollapseButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugOutput_ExpandCollapseButton_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugOutput_ExpandCollapseButton_ExistsExpectedValues = new Assert_DebugOutput_ExpandCollapseButton_ExistsExpectedValues();
                }
                return this.mAssert_DebugOutput_ExpandCollapseButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugOutput_FilterTextbox_ExistsExpectedValues Assert_DebugOutput_FilterTextbox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugOutput_FilterTextbox_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugOutput_FilterTextbox_ExistsExpectedValues = new Assert_DebugOutput_FilterTextbox_ExistsExpectedValues();
                }
                return this.mAssert_DebugOutput_FilterTextbox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugOutput_ResultsTree_ExistsExpectedValues Assert_DebugOutput_ResultsTree_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugOutput_ResultsTree_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugOutput_ResultsTree_ExistsExpectedValues = new Assert_DebugOutput_ResultsTree_ExistsExpectedValues();
                }
                return this.mAssert_DebugOutput_ResultsTree_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DebugOutput_SettingsButton_ExistsExpectedValues Assert_DebugOutput_SettingsButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DebugOutput_SettingsButton_ExistsExpectedValues == null))
                {
                    this.mAssert_DebugOutput_SettingsButton_ExistsExpectedValues = new Assert_DebugOutput_SettingsButton_ExistsExpectedValues();
                }
                return this.mAssert_DebugOutput_SettingsButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Decision_Dialog_Done_Button_ExistsExpectedValues Assert_Decision_Dialog_Done_Button_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Decision_Dialog_Done_Button_ExistsExpectedValues == null))
                {
                    this.mAssert_Decision_Dialog_Done_Button_ExistsExpectedValues = new Assert_Decision_Dialog_Done_Button_ExistsExpectedValues();
                }
                return this.mAssert_Decision_Dialog_Done_Button_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Decision_Dialog_ExistsExpectedValues Assert_Decision_Dialog_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Decision_Dialog_ExistsExpectedValues == null))
                {
                    this.mAssert_Decision_Dialog_ExistsExpectedValues = new Assert_Decision_Dialog_ExistsExpectedValues();
                }
                return this.mAssert_Decision_Dialog_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Decision_Exists_In_The_ToolboxExpectedValues Assert_Decision_Exists_In_The_ToolboxExpectedValues
        {
            get
            {
                if ((this.mAssert_Decision_Exists_In_The_ToolboxExpectedValues == null))
                {
                    this.mAssert_Decision_Exists_In_The_ToolboxExpectedValues = new Assert_Decision_Exists_In_The_ToolboxExpectedValues();
                }
                return this.mAssert_Decision_Exists_In_The_ToolboxExpectedValues;
            }
        }
        
        public virtual Assert_Decision_Exists_OnDesignSurfaceExpectedValues Assert_Decision_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Decision_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Decision_Exists_OnDesignSurfaceExpectedValues = new Assert_Decision_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Decision_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Delete_Exists_OnDesignSurfaceExpectedValues Assert_Delete_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Delete_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Delete_Exists_OnDesignSurfaceExpectedValues = new Assert_Delete_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Delete_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Delete_Record_Exists_OnDesignSurfaceExpectedValues Assert_Delete_Record_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Delete_Record_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Delete_Record_Exists_OnDesignSurfaceExpectedValues = new Assert_Delete_Record_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Delete_Record_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Deploy_Destination_Server_Edit_ExistsExpectedValues Assert_Deploy_Destination_Server_Edit_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Deploy_Destination_Server_Edit_ExistsExpectedValues == null))
                {
                    this.mAssert_Deploy_Destination_Server_Edit_ExistsExpectedValues = new Assert_Deploy_Destination_Server_Edit_ExistsExpectedValues();
                }
                return this.mAssert_Deploy_Destination_Server_Edit_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Deploy_Ribbon_Button_ExistsExpectedValues Assert_Deploy_Ribbon_Button_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Deploy_Ribbon_Button_ExistsExpectedValues == null))
                {
                    this.mAssert_Deploy_Ribbon_Button_ExistsExpectedValues = new Assert_Deploy_Ribbon_Button_ExistsExpectedValues();
                }
                return this.mAssert_Deploy_Ribbon_Button_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_DeployButton_DestinationServer_ExistsExpectedValues Assert_DeployButton_DestinationServer_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_DeployButton_DestinationServer_ExistsExpectedValues == null))
                {
                    this.mAssert_DeployButton_DestinationServer_ExistsExpectedValues = new Assert_DeployButton_DestinationServer_ExistsExpectedValues();
                }
                return this.mAssert_DeployButton_DestinationServer_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Display_Name_Exists_On_Assign_Object_Small_View_On_The_Design_SurfaceExpectedValues Assert_Display_Name_Exists_On_Assign_Object_Small_View_On_The_Design_SurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Display_Name_Exists_On_Assign_Object_Small_View_On_The_Design_SurfaceExpectedValues == null))
                {
                    this.mAssert_Display_Name_Exists_On_Assign_Object_Small_View_On_The_Design_SurfaceExpectedValues = new Assert_Display_Name_Exists_On_Assign_Object_Small_View_On_The_Design_SurfaceExpectedValues();
                }
                return this.mAssert_Display_Name_Exists_On_Assign_Object_Small_View_On_The_Design_SurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Display_Name_Exists_On_Data_Merge_Small_ViewExpectedValues Assert_Display_Name_Exists_On_Data_Merge_Small_ViewExpectedValues
        {
            get
            {
                if ((this.mAssert_Display_Name_Exists_On_Data_Merge_Small_ViewExpectedValues == null))
                {
                    this.mAssert_Display_Name_Exists_On_Data_Merge_Small_ViewExpectedValues = new Assert_Display_Name_Exists_On_Data_Merge_Small_ViewExpectedValues();
                }
                return this.mAssert_Display_Name_Exists_On_Data_Merge_Small_ViewExpectedValues;
            }
        }
        
        public virtual Assert_Done_Button_Exists_On_Assign_Object_Large_ViewExpectedValues Assert_Done_Button_Exists_On_Assign_Object_Large_ViewExpectedValues
        {
            get
            {
                if ((this.mAssert_Done_Button_Exists_On_Assign_Object_Large_ViewExpectedValues == null))
                {
                    this.mAssert_Done_Button_Exists_On_Assign_Object_Large_ViewExpectedValues = new Assert_Done_Button_Exists_On_Assign_Object_Large_ViewExpectedValues();
                }
                return this.mAssert_Done_Button_Exists_On_Assign_Object_Large_ViewExpectedValues;
            }
        }
        
        public virtual Assert_Done_Button_Exists_On_Data_Merge_Large_ViewExpectedValues Assert_Done_Button_Exists_On_Data_Merge_Large_ViewExpectedValues
        {
            get
            {
                if ((this.mAssert_Done_Button_Exists_On_Data_Merge_Large_ViewExpectedValues == null))
                {
                    this.mAssert_Done_Button_Exists_On_Data_Merge_Large_ViewExpectedValues = new Assert_Done_Button_Exists_On_Data_Merge_Large_ViewExpectedValues();
                }
                return this.mAssert_Done_Button_Exists_On_Data_Merge_Large_ViewExpectedValues;
            }
        }
        
        public virtual Assert_DotNet_DLL_Connector_Exists_OnDesignSurfaceExpectedValues Assert_DotNet_DLL_Connector_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_DotNet_DLL_Connector_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_DotNet_DLL_Connector_Exists_OnDesignSurfaceExpectedValues = new Assert_DotNet_DLL_Connector_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_DotNet_DLL_Connector_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Dropbox_Download_Exists_OnDesignSurfaceExpectedValues Assert_Dropbox_Download_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Dropbox_Download_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Dropbox_Download_Exists_OnDesignSurfaceExpectedValues = new Assert_Dropbox_Download_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Dropbox_Download_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Dropbox_Upload_Exists_OnDesignSurfaceExpectedValues Assert_Dropbox_Upload_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Dropbox_Upload_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Dropbox_Upload_Exists_OnDesignSurfaceExpectedValues = new Assert_Dropbox_Upload_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Dropbox_Upload_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Edit_Button_Destination_Server_ExistsExpectedValues Assert_Edit_Button_Destination_Server_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Edit_Button_Destination_Server_ExistsExpectedValues == null))
                {
                    this.mAssert_Edit_Button_Destination_Server_ExistsExpectedValues = new Assert_Edit_Button_Destination_Server_ExistsExpectedValues();
                }
                return this.mAssert_Edit_Button_Destination_Server_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Email_Exists_OnDesignSurfaceExpectedValues Assert_Email_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Email_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Email_Exists_OnDesignSurfaceExpectedValues = new Assert_Email_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Email_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Email_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Email_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Email_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Email_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Email_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Email_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_end_this_workflow_checkbox_exists_on_Assign_Object_large_viewExpectedValues Assert_end_this_workflow_checkbox_exists_on_Assign_Object_large_viewExpectedValues
        {
            get
            {
                if ((this.mAssert_end_this_workflow_checkbox_exists_on_Assign_Object_large_viewExpectedValues == null))
                {
                    this.mAssert_end_this_workflow_checkbox_exists_on_Assign_Object_large_viewExpectedValues = new Assert_end_this_workflow_checkbox_exists_on_Assign_Object_large_viewExpectedValues();
                }
                return this.mAssert_end_this_workflow_checkbox_exists_on_Assign_Object_large_viewExpectedValues;
            }
        }
        
        public virtual Assert_Error_Variable_Textbox_Exists_On_Assign_Object_Large_ViewExpectedValues Assert_Error_Variable_Textbox_Exists_On_Assign_Object_Large_ViewExpectedValues
        {
            get
            {
                if ((this.mAssert_Error_Variable_Textbox_Exists_On_Assign_Object_Large_ViewExpectedValues == null))
                {
                    this.mAssert_Error_Variable_Textbox_Exists_On_Assign_Object_Large_ViewExpectedValues = new Assert_Error_Variable_Textbox_Exists_On_Assign_Object_Large_ViewExpectedValues();
                }
                return this.mAssert_Error_Variable_Textbox_Exists_On_Assign_Object_Large_ViewExpectedValues;
            }
        }
        
        public virtual Assert_Explorer_Edit_Connect_Control_Button_ExistsExpectedValues Assert_Explorer_Edit_Connect_Control_Button_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Explorer_Edit_Connect_Control_Button_ExistsExpectedValues == null))
                {
                    this.mAssert_Explorer_Edit_Connect_Control_Button_ExistsExpectedValues = new Assert_Explorer_Edit_Connect_Control_Button_ExistsExpectedValues();
                }
                return this.mAssert_Explorer_Edit_Connect_Control_Button_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Explorer_ExistsExpectedValues Assert_Explorer_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Explorer_ExistsExpectedValues == null))
                {
                    this.mAssert_Explorer_ExistsExpectedValues = new Assert_Explorer_ExistsExpectedValues();
                }
                return this.mAssert_Explorer_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Explorer_Filter_Textbox_ExistsExpectedValues Assert_Explorer_Filter_Textbox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Explorer_Filter_Textbox_ExistsExpectedValues == null))
                {
                    this.mAssert_Explorer_Filter_Textbox_ExistsExpectedValues = new Assert_Explorer_Filter_Textbox_ExistsExpectedValues();
                }
                return this.mAssert_Explorer_Filter_Textbox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Explorer_Remote_Server_DropdownList_Contains_NewRemoteServerExpectedValues Assert_Explorer_Remote_Server_DropdownList_Contains_NewRemoteServerExpectedValues
        {
            get
            {
                if ((this.mAssert_Explorer_Remote_Server_DropdownList_Contains_NewRemoteServerExpectedValues == null))
                {
                    this.mAssert_Explorer_Remote_Server_DropdownList_Contains_NewRemoteServerExpectedValues = new Assert_Explorer_Remote_Server_DropdownList_Contains_NewRemoteServerExpectedValues();
                }
                return this.mAssert_Explorer_Remote_Server_DropdownList_Contains_NewRemoteServerExpectedValues;
            }
        }
        
        public virtual Assert_Explorer_Remote_Server_DropdownList_Contains_TSTCIREMOTEExpectedValues Assert_Explorer_Remote_Server_DropdownList_Contains_TSTCIREMOTEExpectedValues
        {
            get
            {
                if ((this.mAssert_Explorer_Remote_Server_DropdownList_Contains_TSTCIREMOTEExpectedValues == null))
                {
                    this.mAssert_Explorer_Remote_Server_DropdownList_Contains_TSTCIREMOTEExpectedValues = new Assert_Explorer_Remote_Server_DropdownList_Contains_TSTCIREMOTEExpectedValues();
                }
                return this.mAssert_Explorer_Remote_Server_DropdownList_Contains_TSTCIREMOTEExpectedValues;
            }
        }
        
        public virtual Assert_Explorer_Remote_Server_DropdownList_Does_Not_Contain_TSTCIREMOTEExpectedValues Assert_Explorer_Remote_Server_DropdownList_Does_Not_Contain_TSTCIREMOTEExpectedValues
        {
            get
            {
                if ((this.mAssert_Explorer_Remote_Server_DropdownList_Does_Not_Contain_TSTCIREMOTEExpectedValues == null))
                {
                    this.mAssert_Explorer_Remote_Server_DropdownList_Does_Not_Contain_TSTCIREMOTEExpectedValues = new Assert_Explorer_Remote_Server_DropdownList_Does_Not_Contain_TSTCIREMOTEExpectedValues();
                }
                return this.mAssert_Explorer_Remote_Server_DropdownList_Does_Not_Contain_TSTCIREMOTEExpectedValues;
            }
        }
        
        public virtual Assert_Explorer_Remote_Server_DropdownList_Has_localhost_SelectedExpectedValues Assert_Explorer_Remote_Server_DropdownList_Has_localhost_SelectedExpectedValues
        {
            get
            {
                if ((this.mAssert_Explorer_Remote_Server_DropdownList_Has_localhost_SelectedExpectedValues == null))
                {
                    this.mAssert_Explorer_Remote_Server_DropdownList_Has_localhost_SelectedExpectedValues = new Assert_Explorer_Remote_Server_DropdownList_Has_localhost_SelectedExpectedValues();
                }
                return this.mAssert_Explorer_Remote_Server_DropdownList_Has_localhost_SelectedExpectedValues;
            }
        }
        
        public virtual Assert_Explorer_Remote_Server_DropdownList_Has_TSTCIREMOTE_SelectedExpectedValues Assert_Explorer_Remote_Server_DropdownList_Has_TSTCIREMOTE_SelectedExpectedValues
        {
            get
            {
                if ((this.mAssert_Explorer_Remote_Server_DropdownList_Has_TSTCIREMOTE_SelectedExpectedValues == null))
                {
                    this.mAssert_Explorer_Remote_Server_DropdownList_Has_TSTCIREMOTE_SelectedExpectedValues = new Assert_Explorer_Remote_Server_DropdownList_Has_TSTCIREMOTE_SelectedExpectedValues();
                }
                return this.mAssert_Explorer_Remote_Server_DropdownList_Has_TSTCIREMOTE_SelectedExpectedValues;
            }
        }
        
        public virtual Assert_Explorer_ServerName_ExistsExpectedValues Assert_Explorer_ServerName_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Explorer_ServerName_ExistsExpectedValues == null))
                {
                    this.mAssert_Explorer_ServerName_ExistsExpectedValues = new Assert_Explorer_ServerName_ExistsExpectedValues();
                }
                return this.mAssert_Explorer_ServerName_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_ExplorerContextMenu_Delete_ExistsExpectedValues Assert_ExplorerContextMenu_Delete_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_ExplorerContextMenu_Delete_ExistsExpectedValues == null))
                {
                    this.mAssert_ExplorerContextMenu_Delete_ExistsExpectedValues = new Assert_ExplorerContextMenu_Delete_ExistsExpectedValues();
                }
                return this.mAssert_ExplorerContextMenu_Delete_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Filter_Source_Server_ExistsExpectedValues Assert_Filter_Source_Server_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Filter_Source_Server_ExistsExpectedValues == null))
                {
                    this.mAssert_Filter_Source_Server_ExistsExpectedValues = new Assert_Filter_Source_Server_ExistsExpectedValues();
                }
                return this.mAssert_Filter_Source_Server_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Find_Index_Exists_OnDesignSurfaceExpectedValues Assert_Find_Index_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Find_Index_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Find_Index_Exists_OnDesignSurfaceExpectedValues = new Assert_Find_Index_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Find_Index_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Find_Record_Index_Exists_OnDesignSurfaceExpectedValues Assert_Find_Record_Index_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Find_Record_Index_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Find_Record_Index_Exists_OnDesignSurfaceExpectedValues = new Assert_Find_Record_Index_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Find_Record_Index_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Find_Record_index_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Find_Record_index_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Find_Record_index_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Find_Record_index_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Find_Record_index_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Find_Record_index_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_For_Each_Exists_OnDesignSurfaceExpectedValues Assert_For_Each_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_For_Each_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_For_Each_Exists_OnDesignSurfaceExpectedValues = new Assert_For_Each_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_For_Each_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Format_Number_Exists_OnDesignSurfaceExpectedValues Assert_Format_Number_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Format_Number_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Format_Number_Exists_OnDesignSurfaceExpectedValues = new Assert_Format_Number_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Format_Number_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_FullScreen_Button_Exists_TopRibbonExpectedValues Assert_FullScreen_Button_Exists_TopRibbonExpectedValues
        {
            get
            {
                if ((this.mAssert_FullScreen_Button_Exists_TopRibbonExpectedValues == null))
                {
                    this.mAssert_FullScreen_Button_Exists_TopRibbonExpectedValues = new Assert_FullScreen_Button_Exists_TopRibbonExpectedValues();
                }
                return this.mAssert_FullScreen_Button_Exists_TopRibbonExpectedValues;
            }
        }
        
        public virtual Assert_Generic_Context_Menu_ExistsExpectedValues Assert_Generic_Context_Menu_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Generic_Context_Menu_ExistsExpectedValues == null))
                {
                    this.mAssert_Generic_Context_Menu_ExistsExpectedValues = new Assert_Generic_Context_Menu_ExistsExpectedValues();
                }
                return this.mAssert_Generic_Context_Menu_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_GetWeb_RequestTool_small_View_Exists_OnDesignSurfaceExpectedValues Assert_GetWeb_RequestTool_small_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_GetWeb_RequestTool_small_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_GetWeb_RequestTool_small_View_Exists_OnDesignSurfaceExpectedValues = new Assert_GetWeb_RequestTool_small_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_GetWeb_RequestTool_small_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_InputData_Tab_ExistsExpectedValues Assert_InputData_Tab_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_InputData_Tab_ExistsExpectedValues == null))
                {
                    this.mAssert_InputData_Tab_ExistsExpectedValues = new Assert_InputData_Tab_ExistsExpectedValues();
                }
                return this.mAssert_InputData_Tab_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Json_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Json_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Json_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Json_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Json_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Json_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Json_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Json_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Json_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Json_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Json_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Json_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Length_Exists_OnDesignSurfaceExpectedValues Assert_Length_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Length_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Length_Exists_OnDesignSurfaceExpectedValues = new Assert_Length_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Length_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_LockAndUnlock_Button_Exists_TopRibbonExpectedValues Assert_LockAndUnlock_Button_Exists_TopRibbonExpectedValues
        {
            get
            {
                if ((this.mAssert_LockAndUnlock_Button_Exists_TopRibbonExpectedValues == null))
                {
                    this.mAssert_LockAndUnlock_Button_Exists_TopRibbonExpectedValues = new Assert_LockAndUnlock_Button_Exists_TopRibbonExpectedValues();
                }
                return this.mAssert_LockAndUnlock_Button_Exists_TopRibbonExpectedValues;
            }
        }
        
        public virtual Assert_MainStudioWindow_ExistsExpectedValues Assert_MainStudioWindow_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_MainStudioWindow_ExistsExpectedValues == null))
                {
                    this.mAssert_MainStudioWindow_ExistsExpectedValues = new Assert_MainStudioWindow_ExistsExpectedValues();
                }
                return this.mAssert_MainStudioWindow_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Maximize_Button_Exists_TopRibbonExpectedValues Assert_Maximize_Button_Exists_TopRibbonExpectedValues
        {
            get
            {
                if ((this.mAssert_Maximize_Button_Exists_TopRibbonExpectedValues == null))
                {
                    this.mAssert_Maximize_Button_Exists_TopRibbonExpectedValues = new Assert_Maximize_Button_Exists_TopRibbonExpectedValues();
                }
                return this.mAssert_Maximize_Button_Exists_TopRibbonExpectedValues;
            }
        }
        
        public virtual Assert_MessageBox_Does_Not_ExistExpectedValues Assert_MessageBox_Does_Not_ExistExpectedValues
        {
            get
            {
                if ((this.mAssert_MessageBox_Does_Not_ExistExpectedValues == null))
                {
                    this.mAssert_MessageBox_Does_Not_ExistExpectedValues = new Assert_MessageBox_Does_Not_ExistExpectedValues();
                }
                return this.mAssert_MessageBox_Does_Not_ExistExpectedValues;
            }
        }
        
        public virtual Assert_MessageBox_No_Button_ExistsExpectedValues Assert_MessageBox_No_Button_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_MessageBox_No_Button_ExistsExpectedValues == null))
                {
                    this.mAssert_MessageBox_No_Button_ExistsExpectedValues = new Assert_MessageBox_No_Button_ExistsExpectedValues();
                }
                return this.mAssert_MessageBox_No_Button_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_MessageBox_Yes_Button_ExistsExpectedValues Assert_MessageBox_Yes_Button_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_MessageBox_Yes_Button_ExistsExpectedValues == null))
                {
                    this.mAssert_MessageBox_Yes_Button_ExistsExpectedValues = new Assert_MessageBox_Yes_Button_ExistsExpectedValues();
                }
                return this.mAssert_MessageBox_Yes_Button_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Minimize_Button_Exists_TopRibbonExpectedValues Assert_Minimize_Button_Exists_TopRibbonExpectedValues
        {
            get
            {
                if ((this.mAssert_Minimize_Button_Exists_TopRibbonExpectedValues == null))
                {
                    this.mAssert_Minimize_Button_Exists_TopRibbonExpectedValues = new Assert_Minimize_Button_Exists_TopRibbonExpectedValues();
                }
                return this.mAssert_Minimize_Button_Exists_TopRibbonExpectedValues;
            }
        }
        
        public virtual Assert_Move_Exists_OnDesignSurfaceExpectedValues Assert_Move_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Move_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Move_Exists_OnDesignSurfaceExpectedValues = new Assert_Move_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Move_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Move_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Move_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Move_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Move_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Move_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Move_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_MultiAssign_Exists_OnDesignSurfaceExpectedValues Assert_MultiAssign_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_MultiAssign_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_MultiAssign_Exists_OnDesignSurfaceExpectedValues = new Assert_MultiAssign_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_MultiAssign_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Mysql_Database_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Mysql_Database_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Mysql_Database_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Mysql_Database_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Mysql_Database_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Mysql_Database_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_New_Workflow_Context_Menu_ExistsExpectedValues Assert_New_Workflow_Context_Menu_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_New_Workflow_Context_Menu_ExistsExpectedValues == null))
                {
                    this.mAssert_New_Workflow_Context_Menu_ExistsExpectedValues = new Assert_New_Workflow_Context_Menu_ExistsExpectedValues();
                }
                return this.mAssert_New_Workflow_Context_Menu_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_NewResource_Count_ExistsExpectedValues Assert_NewResource_Count_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_NewResource_Count_ExistsExpectedValues == null))
                {
                    this.mAssert_NewResource_Count_ExistsExpectedValues = new Assert_NewResource_Count_ExistsExpectedValues();
                }
                return this.mAssert_NewResource_Count_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_NewResource_Label_ExistsExpectedValues Assert_NewResource_Label_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_NewResource_Label_ExistsExpectedValues == null))
                {
                    this.mAssert_NewResource_Label_ExistsExpectedValues = new Assert_NewResource_Label_ExistsExpectedValues();
                }
                return this.mAssert_NewResource_Label_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_NewWorkFlow_RibbonButton_ExistsExpectedValues Assert_NewWorkFlow_RibbonButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_NewWorkFlow_RibbonButton_ExistsExpectedValues == null))
                {
                    this.mAssert_NewWorkFlow_RibbonButton_ExistsExpectedValues = new Assert_NewWorkFlow_RibbonButton_ExistsExpectedValues();
                }
                return this.mAssert_NewWorkFlow_RibbonButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_OnError_End_this_workflow_Checkbox_Exists_On_Data_Merge_Large_ViewExpectedValues Assert_OnError_End_this_workflow_Checkbox_Exists_On_Data_Merge_Large_ViewExpectedValues
        {
            get
            {
                if ((this.mAssert_OnError_End_this_workflow_Checkbox_Exists_On_Data_Merge_Large_ViewExpectedValues == null))
                {
                    this.mAssert_OnError_End_this_workflow_Checkbox_Exists_On_Data_Merge_Large_ViewExpectedValues = new Assert_OnError_End_this_workflow_Checkbox_Exists_On_Data_Merge_Large_ViewExpectedValues();
                }
                return this.mAssert_OnError_End_this_workflow_Checkbox_Exists_On_Data_Merge_Large_ViewExpectedValues;
            }
        }
        
        public virtual Assert_OnError_Variable_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues Assert_OnError_Variable_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues
        {
            get
            {
                if ((this.mAssert_OnError_Variable_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues == null))
                {
                    this.mAssert_OnError_Variable_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues = new Assert_OnError_Variable_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues();
                }
                return this.mAssert_OnError_Variable_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues;
            }
        }
        
        public virtual Assert_OnError_WebService_Textbox_Exists_On_Assign_Object_Large_ViewExpectedValues Assert_OnError_WebService_Textbox_Exists_On_Assign_Object_Large_ViewExpectedValues
        {
            get
            {
                if ((this.mAssert_OnError_WebService_Textbox_Exists_On_Assign_Object_Large_ViewExpectedValues == null))
                {
                    this.mAssert_OnError_WebService_Textbox_Exists_On_Assign_Object_Large_ViewExpectedValues = new Assert_OnError_WebService_Textbox_Exists_On_Assign_Object_Large_ViewExpectedValues();
                }
                return this.mAssert_OnError_WebService_Textbox_Exists_On_Assign_Object_Large_ViewExpectedValues;
            }
        }
        
        public virtual Assert_Override_Count_ExistsExpectedValues Assert_Override_Count_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Override_Count_ExistsExpectedValues == null))
                {
                    this.mAssert_Override_Count_ExistsExpectedValues = new Assert_Override_Count_ExistsExpectedValues();
                }
                return this.mAssert_Override_Count_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Override_Label_DestinationServer_ExistsExpectedValues Assert_Override_Label_DestinationServer_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Override_Label_DestinationServer_ExistsExpectedValues == null))
                {
                    this.mAssert_Override_Label_DestinationServer_ExistsExpectedValues = new Assert_Override_Label_DestinationServer_ExistsExpectedValues();
                }
                return this.mAssert_Override_Label_DestinationServer_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Plugin_Connector_Exists_OnDesignSurfaceExpectedValues Assert_Plugin_Connector_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Plugin_Connector_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Plugin_Connector_Exists_OnDesignSurfaceExpectedValues = new Assert_Plugin_Connector_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Plugin_Connector_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Plugin_Source_ExistsExpectedValues Assert_Plugin_Source_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Plugin_Source_ExistsExpectedValues == null))
                {
                    this.mAssert_Plugin_Source_ExistsExpectedValues = new Assert_Plugin_Source_ExistsExpectedValues();
                }
                return this.mAssert_Plugin_Source_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Position_ExistsExpectedValues Assert_Position_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Position_ExistsExpectedValues == null))
                {
                    this.mAssert_Position_ExistsExpectedValues = new Assert_Position_ExistsExpectedValues();
                }
                return this.mAssert_Position_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurfaceExpectedValues Assert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurfaceExpectedValues = new Assert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_QVI_Button_Exists_on_Assign_Object_Small_ViewExpectedValues Assert_QVI_Button_Exists_on_Assign_Object_Small_ViewExpectedValues
        {
            get
            {
                if ((this.mAssert_QVI_Button_Exists_on_Assign_Object_Small_ViewExpectedValues == null))
                {
                    this.mAssert_QVI_Button_Exists_on_Assign_Object_Small_ViewExpectedValues = new Assert_QVI_Button_Exists_on_Assign_Object_Small_ViewExpectedValues();
                }
                return this.mAssert_QVI_Button_Exists_on_Assign_Object_Small_ViewExpectedValues;
            }
        }
        
        public virtual Assert_QVI_Toggle_Button_Exists_On_Data_Merge_Small_ViewExpectedValues Assert_QVI_Toggle_Button_Exists_On_Data_Merge_Small_ViewExpectedValues
        {
            get
            {
                if ((this.mAssert_QVI_Toggle_Button_Exists_On_Data_Merge_Small_ViewExpectedValues == null))
                {
                    this.mAssert_QVI_Toggle_Button_Exists_On_Data_Merge_Small_ViewExpectedValues = new Assert_QVI_Toggle_Button_Exists_On_Data_Merge_Small_ViewExpectedValues();
                }
                return this.mAssert_QVI_Toggle_Button_Exists_On_Data_Merge_Small_ViewExpectedValues;
            }
        }
        
        public virtual Assert_Random_Exists_OnDesignSurfaceExpectedValues Assert_Random_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Random_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Random_Exists_OnDesignSurfaceExpectedValues = new Assert_Random_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Random_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Read_File_Exists_OnDesignSurfaceExpectedValues Assert_Read_File_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Read_File_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Read_File_Exists_OnDesignSurfaceExpectedValues = new Assert_Read_File_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Read_File_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Read_File_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Read_File_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Read_File_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Read_File_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Read_File_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Read_File_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Read_Folder_Exists_OnDesignSurfaceExpectedValues Assert_Read_Folder_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Read_Folder_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Read_Folder_Exists_OnDesignSurfaceExpectedValues = new Assert_Read_Folder_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Read_Folder_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Read_Folder_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Read_Folder_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Read_Folder_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Read_Folder_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Read_Folder_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Read_Folder_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Refresh_Button_Exists_InExplorerExpectedValues Assert_Refresh_Button_Exists_InExplorerExpectedValues
        {
            get
            {
                if ((this.mAssert_Refresh_Button_Exists_InExplorerExpectedValues == null))
                {
                    this.mAssert_Refresh_Button_Exists_InExplorerExpectedValues = new Assert_Refresh_Button_Exists_InExplorerExpectedValues();
                }
                return this.mAssert_Refresh_Button_Exists_InExplorerExpectedValues;
            }
        }
        
        public virtual Assert_Refresh_Button_Source_Server_ExistsExpectedValues Assert_Refresh_Button_Source_Server_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Refresh_Button_Source_Server_ExistsExpectedValues == null))
                {
                    this.mAssert_Refresh_Button_Source_Server_ExistsExpectedValues = new Assert_Refresh_Button_Source_Server_ExistsExpectedValues();
                }
                return this.mAssert_Refresh_Button_Source_Server_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Rename_Exists_OnDesignSurfaceExpectedValues Assert_Rename_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Rename_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Rename_Exists_OnDesignSurfaceExpectedValues = new Assert_Rename_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Rename_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Rename_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Rename_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Rename_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Rename_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Rename_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Rename_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Replace_Exists_OnDesignSurfaceExpectedValues Assert_Replace_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Replace_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Replace_Exists_OnDesignSurfaceExpectedValues = new Assert_Replace_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Replace_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Result_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues Assert_Result_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues
        {
            get
            {
                if ((this.mAssert_Result_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues == null))
                {
                    this.mAssert_Result_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues = new Assert_Result_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues();
                }
                return this.mAssert_Result_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues;
            }
        }
        
        public virtual Assert_Result_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues Assert_Result_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues
        {
            get
            {
                if ((this.mAssert_Result_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues == null))
                {
                    this.mAssert_Result_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues = new Assert_Result_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues();
                }
                return this.mAssert_Result_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues;
            }
        }
        
        public virtual Assert_Row1_Align_Combobox_Exists_On_Data_Merge_Large_ViewExpectedValues Assert_Row1_Align_Combobox_Exists_On_Data_Merge_Large_ViewExpectedValues
        {
            get
            {
                if ((this.mAssert_Row1_Align_Combobox_Exists_On_Data_Merge_Large_ViewExpectedValues == null))
                {
                    this.mAssert_Row1_Align_Combobox_Exists_On_Data_Merge_Large_ViewExpectedValues = new Assert_Row1_Align_Combobox_Exists_On_Data_Merge_Large_ViewExpectedValues();
                }
                return this.mAssert_Row1_Align_Combobox_Exists_On_Data_Merge_Large_ViewExpectedValues;
            }
        }
        
        public virtual Assert_Row1_Combobox_Exists_On_Data_Merge_Small_ViewExpectedValues Assert_Row1_Combobox_Exists_On_Data_Merge_Small_ViewExpectedValues
        {
            get
            {
                if ((this.mAssert_Row1_Combobox_Exists_On_Data_Merge_Small_ViewExpectedValues == null))
                {
                    this.mAssert_Row1_Combobox_Exists_On_Data_Merge_Small_ViewExpectedValues = new Assert_Row1_Combobox_Exists_On_Data_Merge_Small_ViewExpectedValues();
                }
                return this.mAssert_Row1_Combobox_Exists_On_Data_Merge_Small_ViewExpectedValues;
            }
        }
        
        public virtual Assert_Row1_Index_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues Assert_Row1_Index_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues
        {
            get
            {
                if ((this.mAssert_Row1_Index_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues == null))
                {
                    this.mAssert_Row1_Index_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues = new Assert_Row1_Index_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues();
                }
                return this.mAssert_Row1_Index_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues;
            }
        }
        
        public virtual Assert_Row1_Input_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues Assert_Row1_Input_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues
        {
            get
            {
                if ((this.mAssert_Row1_Input_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues == null))
                {
                    this.mAssert_Row1_Input_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues = new Assert_Row1_Input_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues();
                }
                return this.mAssert_Row1_Input_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues;
            }
        }
        
        public virtual Assert_Row1_Recordset_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues Assert_Row1_Recordset_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues
        {
            get
            {
                if ((this.mAssert_Row1_Recordset_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues == null))
                {
                    this.mAssert_Row1_Recordset_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues = new Assert_Row1_Recordset_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues();
                }
                return this.mAssert_Row1_Recordset_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues;
            }
        }
        
        public virtual Assert_Row1_Using_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues Assert_Row1_Using_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues
        {
            get
            {
                if ((this.mAssert_Row1_Using_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues == null))
                {
                    this.mAssert_Row1_Using_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues = new Assert_Row1_Using_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues();
                }
                return this.mAssert_Row1_Using_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues;
            }
        }
        
        public virtual Assert_Row1_With_Combobox_Exists_On_Data_Merge_large_ViewExpectedValues Assert_Row1_With_Combobox_Exists_On_Data_Merge_large_ViewExpectedValues
        {
            get
            {
                if ((this.mAssert_Row1_With_Combobox_Exists_On_Data_Merge_large_ViewExpectedValues == null))
                {
                    this.mAssert_Row1_With_Combobox_Exists_On_Data_Merge_large_ViewExpectedValues = new Assert_Row1_With_Combobox_Exists_On_Data_Merge_large_ViewExpectedValues();
                }
                return this.mAssert_Row1_With_Combobox_Exists_On_Data_Merge_large_ViewExpectedValues;
            }
        }
        
        public virtual Assert_Row2_Combobox_Exists_On_Data_Merge_Small_ViewExpectedValues Assert_Row2_Combobox_Exists_On_Data_Merge_Small_ViewExpectedValues
        {
            get
            {
                if ((this.mAssert_Row2_Combobox_Exists_On_Data_Merge_Small_ViewExpectedValues == null))
                {
                    this.mAssert_Row2_Combobox_Exists_On_Data_Merge_Small_ViewExpectedValues = new Assert_Row2_Combobox_Exists_On_Data_Merge_Small_ViewExpectedValues();
                }
                return this.mAssert_Row2_Combobox_Exists_On_Data_Merge_Small_ViewExpectedValues;
            }
        }
        
        public virtual Assert_Row2_Index_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues Assert_Row2_Index_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues
        {
            get
            {
                if ((this.mAssert_Row2_Index_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues == null))
                {
                    this.mAssert_Row2_Index_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues = new Assert_Row2_Index_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues();
                }
                return this.mAssert_Row2_Index_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues;
            }
        }
        
        public virtual Assert_Row2_Recordset_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues Assert_Row2_Recordset_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues
        {
            get
            {
                if ((this.mAssert_Row2_Recordset_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues == null))
                {
                    this.mAssert_Row2_Recordset_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues = new Assert_Row2_Recordset_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues();
                }
                return this.mAssert_Row2_Recordset_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues;
            }
        }
        
        public virtual Assert_Save_Ribbon_Button_EnabledExpectedValues Assert_Save_Ribbon_Button_EnabledExpectedValues
        {
            get
            {
                if ((this.mAssert_Save_Ribbon_Button_EnabledExpectedValues == null))
                {
                    this.mAssert_Save_Ribbon_Button_EnabledExpectedValues = new Assert_Save_Ribbon_Button_EnabledExpectedValues();
                }
                return this.mAssert_Save_Ribbon_Button_EnabledExpectedValues;
            }
        }
        
        public virtual Assert_Save_Ribbon_Button_ExistsExpectedValues Assert_Save_Ribbon_Button_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Save_Ribbon_Button_ExistsExpectedValues == null))
                {
                    this.mAssert_Save_Ribbon_Button_ExistsExpectedValues = new Assert_Save_Ribbon_Button_ExistsExpectedValues();
                }
                return this.mAssert_Save_Ribbon_Button_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_CancelButton_ExistsExpectedValues Assert_SaveDialog_CancelButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_CancelButton_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_CancelButton_ExistsExpectedValues = new Assert_SaveDialog_CancelButton_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_CancelButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_ErrorLabel_ExistsExpectedValues Assert_SaveDialog_ErrorLabel_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_ErrorLabel_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_ErrorLabel_ExistsExpectedValues = new Assert_SaveDialog_ErrorLabel_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_ErrorLabel_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_ExistsExpectedValues Assert_SaveDialog_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_ExistsExpectedValues = new Assert_SaveDialog_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_ExplorerTree_ExistsExpectedValues Assert_SaveDialog_ExplorerTree_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_ExplorerTree_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_ExplorerTree_ExistsExpectedValues = new Assert_SaveDialog_ExplorerTree_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_ExplorerTree_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_ExplorerTreeItem_ExistsExpectedValues Assert_SaveDialog_ExplorerTreeItem_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_ExplorerTreeItem_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_ExplorerTreeItem_ExistsExpectedValues = new Assert_SaveDialog_ExplorerTreeItem_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_ExplorerTreeItem_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_ExplorerView_ExistsExpectedValues Assert_SaveDialog_ExplorerView_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_ExplorerView_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_ExplorerView_ExistsExpectedValues = new Assert_SaveDialog_ExplorerView_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_ExplorerView_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_FilterTextbox_ExistsExpectedValues Assert_SaveDialog_FilterTextbox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_FilterTextbox_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_FilterTextbox_ExistsExpectedValues = new Assert_SaveDialog_FilterTextbox_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_FilterTextbox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_NameLabel_ExistsExpectedValues Assert_SaveDialog_NameLabel_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_NameLabel_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_NameLabel_ExistsExpectedValues = new Assert_SaveDialog_NameLabel_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_NameLabel_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_RefreshButton_ExistsExpectedValues Assert_SaveDialog_RefreshButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_RefreshButton_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_RefreshButton_ExistsExpectedValues = new Assert_SaveDialog_RefreshButton_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_RefreshButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_SaveButton_EnabledExpectedValues Assert_SaveDialog_SaveButton_EnabledExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_SaveButton_EnabledExpectedValues == null))
                {
                    this.mAssert_SaveDialog_SaveButton_EnabledExpectedValues = new Assert_SaveDialog_SaveButton_EnabledExpectedValues();
                }
                return this.mAssert_SaveDialog_SaveButton_EnabledExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_SaveButton_ExistsExpectedValues Assert_SaveDialog_SaveButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_SaveButton_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_SaveButton_ExistsExpectedValues = new Assert_SaveDialog_SaveButton_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_SaveButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_ServiceName_Textbox_ExistsExpectedValues Assert_SaveDialog_ServiceName_Textbox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_ServiceName_Textbox_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_ServiceName_Textbox_ExistsExpectedValues = new Assert_SaveDialog_ServiceName_Textbox_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_ServiceName_Textbox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SaveDialog_WorkspaceName_ExistsExpectedValues Assert_SaveDialog_WorkspaceName_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SaveDialog_WorkspaceName_ExistsExpectedValues == null))
                {
                    this.mAssert_SaveDialog_WorkspaceName_ExistsExpectedValues = new Assert_SaveDialog_WorkspaceName_ExistsExpectedValues();
                }
                return this.mAssert_SaveDialog_WorkspaceName_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_ConncectControl_ExistsExpectedValues Assert_Scheduler_ConncectControl_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_ConncectControl_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_ConncectControl_ExistsExpectedValues = new Assert_Scheduler_ConncectControl_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_ConncectControl_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_ConnectButton_ExistsExpectedValues Assert_Scheduler_ConnectButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_ConnectButton_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_ConnectButton_ExistsExpectedValues = new Assert_Scheduler_ConnectButton_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_ConnectButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_ConnectControl_Edit_ExistsExpectedValues Assert_Scheduler_ConnectControl_Edit_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_ConnectControl_Edit_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_ConnectControl_Edit_ExistsExpectedValues = new Assert_Scheduler_ConnectControl_Edit_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_ConnectControl_Edit_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_CreateNewTask_ExistsExpectedValues Assert_Scheduler_CreateNewTask_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_CreateNewTask_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_CreateNewTask_ExistsExpectedValues = new Assert_Scheduler_CreateNewTask_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_CreateNewTask_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_DeleteButton_ExistsExpectedValues Assert_Scheduler_DeleteButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_DeleteButton_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_DeleteButton_ExistsExpectedValues = new Assert_Scheduler_DeleteButton_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_DeleteButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_DisabledRadioButton_ExistsExpectedValues Assert_Scheduler_DisabledRadioButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_DisabledRadioButton_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_DisabledRadioButton_ExistsExpectedValues = new Assert_Scheduler_DisabledRadioButton_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_DisabledRadioButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_EditTrigger_ExistsExpectedValues Assert_Scheduler_EditTrigger_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_EditTrigger_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_EditTrigger_ExistsExpectedValues = new Assert_Scheduler_EditTrigger_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_EditTrigger_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_EnabledRadioButton_ExistsExpectedValues Assert_Scheduler_EnabledRadioButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_EnabledRadioButton_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_EnabledRadioButton_ExistsExpectedValues = new Assert_Scheduler_EnabledRadioButton_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_EnabledRadioButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_ErrorMessage_ExistsExpectedValues Assert_Scheduler_ErrorMessage_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_ErrorMessage_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_ErrorMessage_ExistsExpectedValues = new Assert_Scheduler_ErrorMessage_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_ErrorMessage_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_HistoryInput_ExistsExpectedValues Assert_Scheduler_HistoryInput_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_HistoryInput_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_HistoryInput_ExistsExpectedValues = new Assert_Scheduler_HistoryInput_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_HistoryInput_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_HistoryLabel_ExistsExpectedValues Assert_Scheduler_HistoryLabel_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_HistoryLabel_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_HistoryLabel_ExistsExpectedValues = new Assert_Scheduler_HistoryLabel_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_HistoryLabel_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_HistoryTable_ExistsExpectedValues Assert_Scheduler_HistoryTable_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_HistoryTable_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_HistoryTable_ExistsExpectedValues = new Assert_Scheduler_HistoryTable_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_HistoryTable_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_NameInput_ExistsExpectedValues Assert_Scheduler_NameInput_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_NameInput_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_NameInput_ExistsExpectedValues = new Assert_Scheduler_NameInput_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_NameInput_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_NameLabel_ExistsExpectedValues Assert_Scheduler_NameLabel_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_NameLabel_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_NameLabel_ExistsExpectedValues = new Assert_Scheduler_NameLabel_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_NameLabel_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_PasswordInput_ExistsExpectedValues Assert_Scheduler_PasswordInput_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_PasswordInput_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_PasswordInput_ExistsExpectedValues = new Assert_Scheduler_PasswordInput_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_PasswordInput_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_PasswordLabel_ExistsExpectedValues Assert_Scheduler_PasswordLabel_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_PasswordLabel_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_PasswordLabel_ExistsExpectedValues = new Assert_Scheduler_PasswordLabel_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_PasswordLabel_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_ResourcePicker_ExistsExpectedValues Assert_Scheduler_ResourcePicker_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_ResourcePicker_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_ResourcePicker_ExistsExpectedValues = new Assert_Scheduler_ResourcePicker_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_ResourcePicker_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_RunTask_Checkbox_ExistsExpectedValues Assert_Scheduler_RunTask_Checkbox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_RunTask_Checkbox_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_RunTask_Checkbox_ExistsExpectedValues = new Assert_Scheduler_RunTask_Checkbox_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_RunTask_Checkbox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_Status_RadioButton_ExistsExpectedValues Assert_Scheduler_Status_RadioButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_Status_RadioButton_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_Status_RadioButton_ExistsExpectedValues = new Assert_Scheduler_Status_RadioButton_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_Status_RadioButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_StatusLabe_ExistsExpectedValues Assert_Scheduler_StatusLabe_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_StatusLabe_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_StatusLabe_ExistsExpectedValues = new Assert_Scheduler_StatusLabe_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_StatusLabe_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_TriggerLabel_ExistsExpectedValues Assert_Scheduler_TriggerLabel_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_TriggerLabel_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_TriggerLabel_ExistsExpectedValues = new Assert_Scheduler_TriggerLabel_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_TriggerLabel_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_TriggerValue_ExistsExpectedValues Assert_Scheduler_TriggerValue_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_TriggerValue_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_TriggerValue_ExistsExpectedValues = new Assert_Scheduler_TriggerValue_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_TriggerValue_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_UserAccountLabel_ExistsExpectedValues Assert_Scheduler_UserAccountLabel_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_UserAccountLabel_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_UserAccountLabel_ExistsExpectedValues = new Assert_Scheduler_UserAccountLabel_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_UserAccountLabel_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_UsernameInput_ExistsExpectedValues Assert_Scheduler_UsernameInput_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_UsernameInput_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_UsernameInput_ExistsExpectedValues = new Assert_Scheduler_UsernameInput_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_UsernameInput_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_Usernamelabel_ExistsExpectedValues Assert_Scheduler_Usernamelabel_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_Usernamelabel_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_Usernamelabel_ExistsExpectedValues = new Assert_Scheduler_Usernamelabel_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_Usernamelabel_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_WorkflowInput_ExistsExpectedValues Assert_Scheduler_WorkflowInput_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_WorkflowInput_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_WorkflowInput_ExistsExpectedValues = new Assert_Scheduler_WorkflowInput_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_WorkflowInput_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Scheduler_WorkflowLabel_ExistsExpectedValues Assert_Scheduler_WorkflowLabel_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Scheduler_WorkflowLabel_ExistsExpectedValues == null))
                {
                    this.mAssert_Scheduler_WorkflowLabel_ExistsExpectedValues = new Assert_Scheduler_WorkflowLabel_ExistsExpectedValues();
                }
                return this.mAssert_Scheduler_WorkflowLabel_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Script_Exists_OnDesignSurfaceExpectedValues Assert_Script_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Script_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Script_Exists_OnDesignSurfaceExpectedValues = new Assert_Script_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Script_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Sequence_Exists_OnDesignSurfaceExpectedValues Assert_Sequence_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sequence_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sequence_Exists_OnDesignSurfaceExpectedValues = new Assert_Sequence_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sequence_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Server_Source_Wizard_Address_Protocol_Dropdown_Contains_HttpExpectedValues Assert_Server_Source_Wizard_Address_Protocol_Dropdown_Contains_HttpExpectedValues
        {
            get
            {
                if ((this.mAssert_Server_Source_Wizard_Address_Protocol_Dropdown_Contains_HttpExpectedValues == null))
                {
                    this.mAssert_Server_Source_Wizard_Address_Protocol_Dropdown_Contains_HttpExpectedValues = new Assert_Server_Source_Wizard_Address_Protocol_Dropdown_Contains_HttpExpectedValues();
                }
                return this.mAssert_Server_Source_Wizard_Address_Protocol_Dropdown_Contains_HttpExpectedValues;
            }
        }
        
        public virtual Assert_Server_Source_Wizard_Address_Protocol_Dropdown_ExistsExpectedValues Assert_Server_Source_Wizard_Address_Protocol_Dropdown_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Server_Source_Wizard_Address_Protocol_Dropdown_ExistsExpectedValues == null))
                {
                    this.mAssert_Server_Source_Wizard_Address_Protocol_Dropdown_ExistsExpectedValues = new Assert_Server_Source_Wizard_Address_Protocol_Dropdown_ExistsExpectedValues();
                }
                return this.mAssert_Server_Source_Wizard_Address_Protocol_Dropdown_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Server_Source_Wizard_Address_Protocol_Equals_HttpExpectedValues Assert_Server_Source_Wizard_Address_Protocol_Equals_HttpExpectedValues
        {
            get
            {
                if ((this.mAssert_Server_Source_Wizard_Address_Protocol_Equals_HttpExpectedValues == null))
                {
                    this.mAssert_Server_Source_Wizard_Address_Protocol_Equals_HttpExpectedValues = new Assert_Server_Source_Wizard_Address_Protocol_Equals_HttpExpectedValues();
                }
                return this.mAssert_Server_Source_Wizard_Address_Protocol_Equals_HttpExpectedValues;
            }
        }
        
        public virtual Assert_Server_Source_Wizard_Address_Textbox_ExistsExpectedValues Assert_Server_Source_Wizard_Address_Textbox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Server_Source_Wizard_Address_Textbox_ExistsExpectedValues == null))
                {
                    this.mAssert_Server_Source_Wizard_Address_Textbox_ExistsExpectedValues = new Assert_Server_Source_Wizard_Address_Textbox_ExistsExpectedValues();
                }
                return this.mAssert_Server_Source_Wizard_Address_Textbox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Server_Source_Wizard_Address_Textbox_Text_Equals_TSTCIREMOTEExpectedValues Assert_Server_Source_Wizard_Address_Textbox_Text_Equals_TSTCIREMOTEExpectedValues
        {
            get
            {
                if ((this.mAssert_Server_Source_Wizard_Address_Textbox_Text_Equals_TSTCIREMOTEExpectedValues == null))
                {
                    this.mAssert_Server_Source_Wizard_Address_Textbox_Text_Equals_TSTCIREMOTEExpectedValues = new Assert_Server_Source_Wizard_Address_Textbox_Text_Equals_TSTCIREMOTEExpectedValues();
                }
                return this.mAssert_Server_Source_Wizard_Address_Textbox_Text_Equals_TSTCIREMOTEExpectedValues;
            }
        }
        
        public virtual Assert_Server_Source_Wizard_DropdownList_Contains_TSTCIREMOTEExpectedValues Assert_Server_Source_Wizard_DropdownList_Contains_TSTCIREMOTEExpectedValues
        {
            get
            {
                if ((this.mAssert_Server_Source_Wizard_DropdownList_Contains_TSTCIREMOTEExpectedValues == null))
                {
                    this.mAssert_Server_Source_Wizard_DropdownList_Contains_TSTCIREMOTEExpectedValues = new Assert_Server_Source_Wizard_DropdownList_Contains_TSTCIREMOTEExpectedValues();
                }
                return this.mAssert_Server_Source_Wizard_DropdownList_Contains_TSTCIREMOTEExpectedValues;
            }
        }
        
        public virtual Assert_Server_Source_Wizard_Test_Connection_Button_ExistsExpectedValues Assert_Server_Source_Wizard_Test_Connection_Button_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Server_Source_Wizard_Test_Connection_Button_ExistsExpectedValues == null))
                {
                    this.mAssert_Server_Source_Wizard_Test_Connection_Button_ExistsExpectedValues = new Assert_Server_Source_Wizard_Test_Connection_Button_ExistsExpectedValues();
                }
                return this.mAssert_Server_Source_Wizard_Test_Connection_Button_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Server_Source_Wizard_Test_PassedExpectedValues Assert_Server_Source_Wizard_Test_PassedExpectedValues
        {
            get
            {
                if ((this.mAssert_Server_Source_Wizard_Test_PassedExpectedValues == null))
                {
                    this.mAssert_Server_Source_Wizard_Test_PassedExpectedValues = new Assert_Server_Source_Wizard_Test_PassedExpectedValues();
                }
                return this.mAssert_Server_Source_Wizard_Test_PassedExpectedValues;
            }
        }
        
        public virtual Assert_Server_Version_ExistsExpectedValues Assert_Server_Version_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Server_Version_ExistsExpectedValues == null))
                {
                    this.mAssert_Server_Version_ExistsExpectedValues = new Assert_Server_Version_ExistsExpectedValues();
                }
                return this.mAssert_Server_Version_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Service_Picker_Cancel_Button_ExistsExpectedValues Assert_Service_Picker_Cancel_Button_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Service_Picker_Cancel_Button_ExistsExpectedValues == null))
                {
                    this.mAssert_Service_Picker_Cancel_Button_ExistsExpectedValues = new Assert_Service_Picker_Cancel_Button_ExistsExpectedValues();
                }
                return this.mAssert_Service_Picker_Cancel_Button_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Service_Picker_Dialog_ExistsExpectedValues Assert_Service_Picker_Dialog_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Service_Picker_Dialog_ExistsExpectedValues == null))
                {
                    this.mAssert_Service_Picker_Dialog_ExistsExpectedValues = new Assert_Service_Picker_Dialog_ExistsExpectedValues();
                }
                return this.mAssert_Service_Picker_Dialog_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_ServiceLabel_DestinationServer_ExistsExpectedValues Assert_ServiceLabel_DestinationServer_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_ServiceLabel_DestinationServer_ExistsExpectedValues == null))
                {
                    this.mAssert_ServiceLabel_DestinationServer_ExistsExpectedValues = new Assert_ServiceLabel_DestinationServer_ExistsExpectedValues();
                }
                return this.mAssert_ServiceLabel_DestinationServer_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_ServicesCount_Label_ExistsExpectedValues Assert_ServicesCount_Label_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_ServicesCount_Label_ExistsExpectedValues == null))
                {
                    this.mAssert_ServicesCount_Label_ExistsExpectedValues = new Assert_ServicesCount_Label_ExistsExpectedValues();
                }
                return this.mAssert_ServicesCount_Label_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Settings_ConnectButton_ExistsExpectedValues Assert_Settings_ConnectButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Settings_ConnectButton_ExistsExpectedValues == null))
                {
                    this.mAssert_Settings_ConnectButton_ExistsExpectedValues = new Assert_Settings_ConnectButton_ExistsExpectedValues();
                }
                return this.mAssert_Settings_ConnectButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Settings_ConnectControl_Edit_Button_ExistsExpectedValues Assert_Settings_ConnectControl_Edit_Button_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Settings_ConnectControl_Edit_Button_ExistsExpectedValues == null))
                {
                    this.mAssert_Settings_ConnectControl_Edit_Button_ExistsExpectedValues = new Assert_Settings_ConnectControl_Edit_Button_ExistsExpectedValues();
                }
                return this.mAssert_Settings_ConnectControl_Edit_Button_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Settings_ConnectControl_ExistsExpectedValues Assert_Settings_ConnectControl_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Settings_ConnectControl_ExistsExpectedValues == null))
                {
                    this.mAssert_Settings_ConnectControl_ExistsExpectedValues = new Assert_Settings_ConnectControl_ExistsExpectedValues();
                }
                return this.mAssert_Settings_ConnectControl_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Settings_LoggingTab_ExistsExpectedValues Assert_Settings_LoggingTab_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Settings_LoggingTab_ExistsExpectedValues == null))
                {
                    this.mAssert_Settings_LoggingTab_ExistsExpectedValues = new Assert_Settings_LoggingTab_ExistsExpectedValues();
                }
                return this.mAssert_Settings_LoggingTab_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Settings_ResourcePermissions_ExistsExpectedValues Assert_Settings_ResourcePermissions_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Settings_ResourcePermissions_ExistsExpectedValues == null))
                {
                    this.mAssert_Settings_ResourcePermissions_ExistsExpectedValues = new Assert_Settings_ResourcePermissions_ExistsExpectedValues();
                }
                return this.mAssert_Settings_ResourcePermissions_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Settings_SecurityTab_ExistsExpectedValues Assert_Settings_SecurityTab_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Settings_SecurityTab_ExistsExpectedValues == null))
                {
                    this.mAssert_Settings_SecurityTab_ExistsExpectedValues = new Assert_Settings_SecurityTab_ExistsExpectedValues();
                }
                return this.mAssert_Settings_SecurityTab_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Settings_ServerPermissions_ExistsExpectedValues Assert_Settings_ServerPermissions_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Settings_ServerPermissions_ExistsExpectedValues == null))
                {
                    this.mAssert_Settings_ServerPermissions_ExistsExpectedValues = new Assert_Settings_ServerPermissions_ExistsExpectedValues();
                }
                return this.mAssert_Settings_ServerPermissions_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Sharepoint_Create_Exists_OnDesignSurfaceExpectedValues Assert_Sharepoint_Create_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sharepoint_Create_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sharepoint_Create_Exists_OnDesignSurfaceExpectedValues = new Assert_Sharepoint_Create_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sharepoint_Create_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Sharepoint_Create_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Sharepoint_Create_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sharepoint_Create_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sharepoint_Create_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Sharepoint_Create_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sharepoint_Create_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Sharepoint_Delete_Exists_OnDesignSurfaceExpectedValues Assert_Sharepoint_Delete_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sharepoint_Delete_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sharepoint_Delete_Exists_OnDesignSurfaceExpectedValues = new Assert_Sharepoint_Delete_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sharepoint_Delete_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Sharepoint_Delete_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Sharepoint_Delete_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sharepoint_Delete_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sharepoint_Delete_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Sharepoint_Delete_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sharepoint_Delete_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Sharepoint_Read_Exists_OnDesignSurfaceExpectedValues Assert_Sharepoint_Read_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sharepoint_Read_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sharepoint_Read_Exists_OnDesignSurfaceExpectedValues = new Assert_Sharepoint_Read_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sharepoint_Read_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Sharepoint_Read_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Sharepoint_Read_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sharepoint_Read_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sharepoint_Read_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Sharepoint_Read_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sharepoint_Read_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Sharepoint_Update_Exists_OnDesignSurfaceExpectedValues Assert_Sharepoint_Update_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sharepoint_Update_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sharepoint_Update_Exists_OnDesignSurfaceExpectedValues = new Assert_Sharepoint_Update_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sharepoint_Update_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Sharepoint_Update_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Sharepoint_Update_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sharepoint_Update_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sharepoint_Update_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Sharepoint_Update_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sharepoint_Update_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_ShowDependencies_Button_DestinationServer_ExistsExpectedValues Assert_ShowDependencies_Button_DestinationServer_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_ShowDependencies_Button_DestinationServer_ExistsExpectedValues == null))
                {
                    this.mAssert_ShowDependencies_Button_DestinationServer_ExistsExpectedValues = new Assert_ShowDependencies_Button_DestinationServer_ExistsExpectedValues();
                }
                return this.mAssert_ShowDependencies_Button_DestinationServer_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Sort_Records_Exists_OnDesignSurfaceExpectedValues Assert_Sort_Records_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sort_Records_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sort_Records_Exists_OnDesignSurfaceExpectedValues = new Assert_Sort_Records_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sort_Records_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Source_Server_Name_ExistsExpectedValues Assert_Source_Server_Name_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Source_Server_Name_ExistsExpectedValues == null))
                {
                    this.mAssert_Source_Server_Name_ExistsExpectedValues = new Assert_Source_Server_Name_ExistsExpectedValues();
                }
                return this.mAssert_Source_Server_Name_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SourceCount_DestinationServer_ExistsExpectedValues Assert_SourceCount_DestinationServer_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SourceCount_DestinationServer_ExistsExpectedValues == null))
                {
                    this.mAssert_SourceCount_DestinationServer_ExistsExpectedValues = new Assert_SourceCount_DestinationServer_ExistsExpectedValues();
                }
                return this.mAssert_SourceCount_DestinationServer_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SourceLabel_DestinationServer_ExistsExpectedValues Assert_SourceLabel_DestinationServer_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SourceLabel_DestinationServer_ExistsExpectedValues == null))
                {
                    this.mAssert_SourceLabel_DestinationServer_ExistsExpectedValues = new Assert_SourceLabel_DestinationServer_ExistsExpectedValues();
                }
                return this.mAssert_SourceLabel_DestinationServer_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Sql_Bulk_insert_Exists_OnDesignSurfaceExpectedValues Assert_Sql_Bulk_insert_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sql_Bulk_insert_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sql_Bulk_insert_Exists_OnDesignSurfaceExpectedValues = new Assert_Sql_Bulk_insert_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sql_Bulk_insert_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurfaceExpectedValues Assert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurfaceExpectedValues = new Assert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_SQL_Server_Database_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_SQL_Server_Database_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_SQL_Server_Database_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_SQL_Server_Database_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_SQL_Server_Database_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_SQL_Server_Database_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_StartNode_ExistsExpectedValues Assert_StartNode_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_StartNode_ExistsExpectedValues == null))
                {
                    this.mAssert_StartNode_ExistsExpectedValues = new Assert_StartNode_ExistsExpectedValues();
                }
                return this.mAssert_StartNode_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_SuccessMessage_Label_ExistsExpectedValues Assert_SuccessMessage_Label_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_SuccessMessage_Label_ExistsExpectedValues == null))
                {
                    this.mAssert_SuccessMessage_Label_ExistsExpectedValues = new Assert_SuccessMessage_Label_ExistsExpectedValues();
                }
                return this.mAssert_SuccessMessage_Label_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Switch_Exists_OnDesignSurfaceExpectedValues Assert_Switch_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Switch_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Switch_Exists_OnDesignSurfaceExpectedValues = new Assert_Switch_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Switch_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Switch_Window_Exists_OnDesignSurfaceExpectedValues Assert_Switch_Window_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Switch_Window_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Switch_Window_Exists_OnDesignSurfaceExpectedValues = new Assert_Switch_Window_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Switch_Window_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_System_Info_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_System_Info_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_System_Info_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_System_Info_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_System_Info_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_System_Info_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_System_information_Exists_OnDesignSurfaceExpectedValues Assert_System_information_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_System_information_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_System_information_Exists_OnDesignSurfaceExpectedValues = new Assert_System_information_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_System_information_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_TabHeader_ExistsExpectedValues Assert_TabHeader_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_TabHeader_ExistsExpectedValues == null))
                {
                    this.mAssert_TabHeader_ExistsExpectedValues = new Assert_TabHeader_ExistsExpectedValues();
                }
                return this.mAssert_TabHeader_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Toolbox_FilterTextbox_ExistsExpectedValues Assert_Toolbox_FilterTextbox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Toolbox_FilterTextbox_ExistsExpectedValues == null))
                {
                    this.mAssert_Toolbox_FilterTextbox_ExistsExpectedValues = new Assert_Toolbox_FilterTextbox_ExistsExpectedValues();
                }
                return this.mAssert_Toolbox_FilterTextbox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Toolbox_Multiassign_ExistsExpectedValues Assert_Toolbox_Multiassign_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Toolbox_Multiassign_ExistsExpectedValues == null))
                {
                    this.mAssert_Toolbox_Multiassign_ExistsExpectedValues = new Assert_Toolbox_Multiassign_ExistsExpectedValues();
                }
                return this.mAssert_Toolbox_Multiassign_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Toolbox_RefreshButton_ExistsExpectedValues Assert_Toolbox_RefreshButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Toolbox_RefreshButton_ExistsExpectedValues == null))
                {
                    this.mAssert_Toolbox_RefreshButton_ExistsExpectedValues = new Assert_Toolbox_RefreshButton_ExistsExpectedValues();
                }
                return this.mAssert_Toolbox_RefreshButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Unique_Records_Exists_OnDesignSurfaceExpectedValues Assert_Unique_Records_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Unique_Records_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Unique_Records_Exists_OnDesignSurfaceExpectedValues = new Assert_Unique_Records_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Unique_Records_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_UnLock_Button_ExistsExpectedValues Assert_UnLock_Button_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_UnLock_Button_ExistsExpectedValues == null))
                {
                    this.mAssert_UnLock_Button_ExistsExpectedValues = new Assert_UnLock_Button_ExistsExpectedValues();
                }
                return this.mAssert_UnLock_Button_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Unzip_Exists_OnDesignSurfaceExpectedValues Assert_Unzip_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Unzip_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Unzip_Exists_OnDesignSurfaceExpectedValues = new Assert_Unzip_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Unzip_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Unzip_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Unzip_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Unzip_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Unzip_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Unzip_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Unzip_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_DeleteButton_ExistsExpectedValues Assert_VariableList_DeleteButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_DeleteButton_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_DeleteButton_ExistsExpectedValues = new Assert_VariableList_DeleteButton_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_DeleteButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_ExistsExpectedValues Assert_VariableList_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_ExistsExpectedValues = new Assert_VariableList_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_Recordset_Row1_Field_IsInputCheckBox_ExistsExpectedValues Assert_VariableList_Recordset_Row1_Field_IsInputCheckBox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_Recordset_Row1_Field_IsInputCheckBox_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_Recordset_Row1_Field_IsInputCheckBox_ExistsExpectedValues = new Assert_VariableList_Recordset_Row1_Field_IsInputCheckBox_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_Recordset_Row1_Field_IsInputCheckBox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_Recordset_Row1_Field_IsOutputCheckBox_ExistsExpectedValues Assert_VariableList_Recordset_Row1_Field_IsOutputCheckBox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_Recordset_Row1_Field_IsOutputCheckBox_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_Recordset_Row1_Field_IsOutputCheckBox_ExistsExpectedValues = new Assert_VariableList_Recordset_Row1_Field_IsOutputCheckBox_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_Recordset_Row1_Field_IsOutputCheckBox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_Recordset_Row1_Field_TextBox_ExistsExpectedValues Assert_VariableList_Recordset_Row1_Field_TextBox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_Recordset_Row1_Field_TextBox_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_Recordset_Row1_Field_TextBox_ExistsExpectedValues = new Assert_VariableList_Recordset_Row1_Field_TextBox_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_Recordset_Row1_Field_TextBox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_Recordset_Row1_IsInputCheckBox_ExistsExpectedValues Assert_VariableList_Recordset_Row1_IsInputCheckBox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_Recordset_Row1_IsInputCheckBox_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_Recordset_Row1_IsInputCheckBox_ExistsExpectedValues = new Assert_VariableList_Recordset_Row1_IsInputCheckBox_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_Recordset_Row1_IsInputCheckBox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_Recordset_Row1_IsOutputCheckBox_ExistsExpectedValues Assert_VariableList_Recordset_Row1_IsOutputCheckBox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_Recordset_Row1_IsOutputCheckBox_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_Recordset_Row1_IsOutputCheckBox_ExistsExpectedValues = new Assert_VariableList_Recordset_Row1_IsOutputCheckBox_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_Recordset_Row1_IsOutputCheckBox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_Recordset_Row1_TextBox_ExistsExpectedValues Assert_VariableList_Recordset_Row1_TextBox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_Recordset_Row1_TextBox_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_Recordset_Row1_TextBox_ExistsExpectedValues = new Assert_VariableList_Recordset_Row1_TextBox_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_Recordset_Row1_TextBox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_Scalar_Row1_IsInputCheckBox_ExistsExpectedValues Assert_VariableList_Scalar_Row1_IsInputCheckBox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_Scalar_Row1_IsInputCheckBox_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_Scalar_Row1_IsInputCheckBox_ExistsExpectedValues = new Assert_VariableList_Scalar_Row1_IsInputCheckBox_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_Scalar_Row1_IsInputCheckBox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_Scalar_Row1_IsOutputCheckBox_ExistsExpectedValues Assert_VariableList_Scalar_Row1_IsOutputCheckBox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_Scalar_Row1_IsOutputCheckBox_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_Scalar_Row1_IsOutputCheckBox_ExistsExpectedValues = new Assert_VariableList_Scalar_Row1_IsOutputCheckBox_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_Scalar_Row1_IsOutputCheckBox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_Scalar_Row1_Textbox_Equals_SomeVariableExpectedValues Assert_VariableList_Scalar_Row1_Textbox_Equals_SomeVariableExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_Scalar_Row1_Textbox_Equals_SomeVariableExpectedValues == null))
                {
                    this.mAssert_VariableList_Scalar_Row1_Textbox_Equals_SomeVariableExpectedValues = new Assert_VariableList_Scalar_Row1_Textbox_Equals_SomeVariableExpectedValues();
                }
                return this.mAssert_VariableList_Scalar_Row1_Textbox_Equals_SomeVariableExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_Scalar_Row1_TextBox_ExistsExpectedValues Assert_VariableList_Scalar_Row1_TextBox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_Scalar_Row1_TextBox_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_Scalar_Row1_TextBox_ExistsExpectedValues = new Assert_VariableList_Scalar_Row1_TextBox_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_Scalar_Row1_TextBox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_VariableList_SortButton_ExistsExpectedValues Assert_VariableList_SortButton_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_VariableList_SortButton_ExistsExpectedValues == null))
                {
                    this.mAssert_VariableList_SortButton_ExistsExpectedValues = new Assert_VariableList_SortButton_ExistsExpectedValues();
                }
                return this.mAssert_VariableList_SortButton_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Web_Connectors_Exists_OnDesignSurfaceExpectedValues Assert_Web_Connectors_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Web_Connectors_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Web_Connectors_Exists_OnDesignSurfaceExpectedValues = new Assert_Web_Connectors_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Web_Connectors_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Web_Source_ExistsExpectedValues Assert_Web_Source_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_Web_Source_ExistsExpectedValues == null))
                {
                    this.mAssert_Web_Source_ExistsExpectedValues = new Assert_Web_Source_ExistsExpectedValues();
                }
                return this.mAssert_Web_Source_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_WebSource_ReqTypeComboBox_ExistsExpectedValues Assert_WebSource_ReqTypeComboBox_ExistsExpectedValues
        {
            get
            {
                if ((this.mAssert_WebSource_ReqTypeComboBox_ExistsExpectedValues == null))
                {
                    this.mAssert_WebSource_ReqTypeComboBox_ExistsExpectedValues = new Assert_WebSource_ReqTypeComboBox_ExistsExpectedValues();
                }
                return this.mAssert_WebSource_ReqTypeComboBox_ExistsExpectedValues;
            }
        }
        
        public virtual Assert_Workflow_Exists_OnDesignSurfaceExpectedValues Assert_Workflow_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Workflow_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Workflow_Exists_OnDesignSurfaceExpectedValues = new Assert_Workflow_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Workflow_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Write_File_Exists_OnDesignSurfaceExpectedValues Assert_Write_File_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Write_File_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Write_File_Exists_OnDesignSurfaceExpectedValues = new Assert_Write_File_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Write_File_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Write_File_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Write_File_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Write_File_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Write_File_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Write_File_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Write_File_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_XPath_Exists_OnDesignSurfaceExpectedValues Assert_XPath_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_XPath_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_XPath_Exists_OnDesignSurfaceExpectedValues = new Assert_XPath_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_XPath_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Xpath_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Xpath_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Xpath_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Xpath_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Xpath_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Xpath_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Xpath_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Xpath_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Xpath_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Xpath_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Xpath_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Xpath_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Zip_Exists_OnDesignSurfaceExpectedValues Assert_Zip_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Zip_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Zip_Exists_OnDesignSurfaceExpectedValues = new Assert_Zip_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Zip_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Assert_Zip_Large_View_Exists_OnDesignSurfaceExpectedValues Assert_Zip_Large_View_Exists_OnDesignSurfaceExpectedValues
        {
            get
            {
                if ((this.mAssert_Zip_Large_View_Exists_OnDesignSurfaceExpectedValues == null))
                {
                    this.mAssert_Zip_Large_View_Exists_OnDesignSurfaceExpectedValues = new Assert_Zip_Large_View_Exists_OnDesignSurfaceExpectedValues();
                }
                return this.mAssert_Zip_Large_View_Exists_OnDesignSurfaceExpectedValues;
            }
        }
        
        public virtual Click_ExpandAndStepIn_NestedWorkflowParams Click_ExpandAndStepIn_NestedWorkflowParams
        {
            get
            {
                if ((this.mClick_ExpandAndStepIn_NestedWorkflowParams == null))
                {
                    this.mClick_ExpandAndStepIn_NestedWorkflowParams = new Click_ExpandAndStepIn_NestedWorkflowParams();
                }
                return this.mClick_ExpandAndStepIn_NestedWorkflowParams;
            }
        }
        
        public virtual Click_Output_OnRecordset_InVariableListParams Click_Output_OnRecordset_InVariableListParams
        {
            get
            {
                if ((this.mClick_Output_OnRecordset_InVariableListParams == null))
                {
                    this.mClick_Output_OnRecordset_InVariableListParams = new Click_Output_OnRecordset_InVariableListParams();
                }
                return this.mClick_Output_OnRecordset_InVariableListParams;
            }
        }
        
        public virtual Click_Output_OnVariable_InVariableListParams Click_Output_OnVariable_InVariableListParams
        {
            get
            {
                if ((this.mClick_Output_OnVariable_InVariableListParams == null))
                {
                    this.mClick_Output_OnVariable_InVariableListParams = new Click_Output_OnVariable_InVariableListParams();
                }
                return this.mClick_Output_OnVariable_InVariableListParams;
            }
        }
        
        public virtual Click_Scheduler_Disable_Task_Radio_ButtonParams Click_Scheduler_Disable_Task_Radio_ButtonParams
        {
            get
            {
                if ((this.mClick_Scheduler_Disable_Task_Radio_ButtonParams == null))
                {
                    this.mClick_Scheduler_Disable_Task_Radio_ButtonParams = new Click_Scheduler_Disable_Task_Radio_ButtonParams();
                }
                return this.mClick_Scheduler_Disable_Task_Radio_ButtonParams;
            }
        }
        
        public virtual Click_Scheduler_Enable_Task_Radio_ButtonParams Click_Scheduler_Enable_Task_Radio_ButtonParams
        {
            get
            {
                if ((this.mClick_Scheduler_Enable_Task_Radio_ButtonParams == null))
                {
                    this.mClick_Scheduler_Enable_Task_Radio_ButtonParams = new Click_Scheduler_Enable_Task_Radio_ButtonParams();
                }
                return this.mClick_Scheduler_Enable_Task_Radio_ButtonParams;
            }
        }
        
        public virtual Click_Scheduler_RunTaskParams Click_Scheduler_RunTaskParams
        {
            get
            {
                if ((this.mClick_Scheduler_RunTaskParams == null))
                {
                    this.mClick_Scheduler_RunTaskParams = new Click_Scheduler_RunTaskParams();
                }
                return this.mClick_Scheduler_RunTaskParams;
            }
        }
        
        public virtual Click_Settings_Admin_ServerPermissionsParams Click_Settings_Admin_ServerPermissionsParams
        {
            get
            {
                if ((this.mClick_Settings_Admin_ServerPermissionsParams == null))
                {
                    this.mClick_Settings_Admin_ServerPermissionsParams = new Click_Settings_Admin_ServerPermissionsParams();
                }
                return this.mClick_Settings_Admin_ServerPermissionsParams;
            }
        }
        
        public virtual Click_Settings_Contribute_ResourcePermissionsParams Click_Settings_Contribute_ResourcePermissionsParams
        {
            get
            {
                if ((this.mClick_Settings_Contribute_ResourcePermissionsParams == null))
                {
                    this.mClick_Settings_Contribute_ResourcePermissionsParams = new Click_Settings_Contribute_ResourcePermissionsParams();
                }
                return this.mClick_Settings_Contribute_ResourcePermissionsParams;
            }
        }
        
        public virtual Click_Settings_Contribute_ServerPermissionsParams Click_Settings_Contribute_ServerPermissionsParams
        {
            get
            {
                if ((this.mClick_Settings_Contribute_ServerPermissionsParams == null))
                {
                    this.mClick_Settings_Contribute_ServerPermissionsParams = new Click_Settings_Contribute_ServerPermissionsParams();
                }
                return this.mClick_Settings_Contribute_ServerPermissionsParams;
            }
        }
        
        public virtual Click_Settings_Execute_ResourcePermissionsParams Click_Settings_Execute_ResourcePermissionsParams
        {
            get
            {
                if ((this.mClick_Settings_Execute_ResourcePermissionsParams == null))
                {
                    this.mClick_Settings_Execute_ResourcePermissionsParams = new Click_Settings_Execute_ResourcePermissionsParams();
                }
                return this.mClick_Settings_Execute_ResourcePermissionsParams;
            }
        }
        
        public virtual Click_Settings_View_ResourcePermissionsParams Click_Settings_View_ResourcePermissionsParams
        {
            get
            {
                if ((this.mClick_Settings_View_ResourcePermissionsParams == null))
                {
                    this.mClick_Settings_View_ResourcePermissionsParams = new Click_Settings_View_ResourcePermissionsParams();
                }
                return this.mClick_Settings_View_ResourcePermissionsParams;
            }
        }
        
        public virtual Click_Test_Connector_Calculate_OutputsParams Click_Test_Connector_Calculate_OutputsParams
        {
            get
            {
                if ((this.mClick_Test_Connector_Calculate_OutputsParams == null))
                {
                    this.mClick_Test_Connector_Calculate_OutputsParams = new Click_Test_Connector_Calculate_OutputsParams();
                }
                return this.mClick_Test_Connector_Calculate_OutputsParams;
            }
        }
        
        public virtual Click_VariableList_Recordset_Row1_IsInputCheckboxParams Click_VariableList_Recordset_Row1_IsInputCheckboxParams
        {
            get
            {
                if ((this.mClick_VariableList_Recordset_Row1_IsInputCheckboxParams == null))
                {
                    this.mClick_VariableList_Recordset_Row1_IsInputCheckboxParams = new Click_VariableList_Recordset_Row1_IsInputCheckboxParams();
                }
                return this.mClick_VariableList_Recordset_Row1_IsInputCheckboxParams;
            }
        }
        
        public virtual Click_VariableList_Scalar_Row1_IsInputCheckboxParams Click_VariableList_Scalar_Row1_IsInputCheckboxParams
        {
            get
            {
                if ((this.mClick_VariableList_Scalar_Row1_IsInputCheckboxParams == null))
                {
                    this.mClick_VariableList_Scalar_Row1_IsInputCheckboxParams = new Click_VariableList_Scalar_Row1_IsInputCheckboxParams();
                }
                return this.mClick_VariableList_Scalar_Row1_IsInputCheckboxParams;
            }
        }
        
        public virtual Enter_RemoteServerUITestWorkflow_Into_Explorer_FilterParams Enter_RemoteServerUITestWorkflow_Into_Explorer_FilterParams
        {
            get
            {
                if ((this.mEnter_RemoteServerUITestWorkflow_Into_Explorer_FilterParams == null))
                {
                    this.mEnter_RemoteServerUITestWorkflow_Into_Explorer_FilterParams = new Enter_RemoteServerUITestWorkflow_Into_Explorer_FilterParams();
                }
                return this.mEnter_RemoteServerUITestWorkflow_Into_Explorer_FilterParams;
            }
        }
        
        public virtual Enter_Servicename_As_RemoteServerUITestWorkflowParams Enter_Servicename_As_RemoteServerUITestWorkflowParams
        {
            get
            {
                if ((this.mEnter_Servicename_As_RemoteServerUITestWorkflowParams == null))
                {
                    this.mEnter_Servicename_As_RemoteServerUITestWorkflowParams = new Enter_Servicename_As_RemoteServerUITestWorkflowParams();
                }
                return this.mEnter_Servicename_As_RemoteServerUITestWorkflowParams;
            }
        }
        
        public virtual Enter_Servicename_As_SomeWorkflowParams Enter_Servicename_As_SomeWorkflowParams
        {
            get
            {
                if ((this.mEnter_Servicename_As_SomeWorkflowParams == null))
                {
                    this.mEnter_Servicename_As_SomeWorkflowParams = new Enter_Servicename_As_SomeWorkflowParams();
                }
                return this.mEnter_Servicename_As_SomeWorkflowParams;
            }
        }
        
        public virtual Enter_Servicename_As_TSTCIREMOTEParams Enter_Servicename_As_TSTCIREMOTEParams
        {
            get
            {
                if ((this.mEnter_Servicename_As_TSTCIREMOTEParams == null))
                {
                    this.mEnter_Servicename_As_TSTCIREMOTEParams = new Enter_Servicename_As_TSTCIREMOTEParams();
                }
                return this.mEnter_Servicename_As_TSTCIREMOTEParams;
            }
        }
        
        public virtual Enter_SomeWorkflow_Into_Explorer_FilterParams Enter_SomeWorkflow_Into_Explorer_FilterParams
        {
            get
            {
                if ((this.mEnter_SomeWorkflow_Into_Explorer_FilterParams == null))
                {
                    this.mEnter_SomeWorkflow_Into_Explorer_FilterParams = new Enter_SomeWorkflow_Into_Explorer_FilterParams();
                }
                return this.mEnter_SomeWorkflow_Into_Explorer_FilterParams;
            }
        }
        
        public virtual Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams
        {
            get
            {
                if ((this.mEnter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams == null))
                {
                    this.mEnter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams = new Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams();
                }
                return this.mEnter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams;
            }
        }
        
        public virtual Enter_TSTCIREMOTE_Into_Explorer_FilterParams Enter_TSTCIREMOTE_Into_Explorer_FilterParams
        {
            get
            {
                if ((this.mEnter_TSTCIREMOTE_Into_Explorer_FilterParams == null))
                {
                    this.mEnter_TSTCIREMOTE_Into_Explorer_FilterParams = new Enter_TSTCIREMOTE_Into_Explorer_FilterParams();
                }
                return this.mEnter_TSTCIREMOTE_Into_Explorer_FilterParams;
            }
        }
        
        public virtual Enter_workflow1_Into_Explorer_FilterParams Enter_workflow1_Into_Explorer_FilterParams
        {
            get
            {
                if ((this.mEnter_workflow1_Into_Explorer_FilterParams == null))
                {
                    this.mEnter_workflow1_Into_Explorer_FilterParams = new Enter_workflow1_Into_Explorer_FilterParams();
                }
                return this.mEnter_workflow1_Into_Explorer_FilterParams;
            }
        }
        
        public virtual Open_Assign_Tool_Qvi_Large_ViewParams Open_Assign_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Assign_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Assign_Tool_Qvi_Large_ViewParams = new Open_Assign_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Assign_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Base_Conversion_Tool_Qvi_Large_ViewParams Open_Base_Conversion_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Base_Conversion_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Base_Conversion_Tool_Qvi_Large_ViewParams = new Open_Base_Conversion_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Base_Conversion_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Case_Conversion_Tool_Qvi_Large_ViewParams Open_Case_Conversion_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Case_Conversion_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Case_Conversion_Tool_Qvi_Large_ViewParams = new Open_Case_Conversion_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Case_Conversion_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Data_Merge_Tool_Qvi_Large_ViewParams Open_Data_Merge_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Data_Merge_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Data_Merge_Tool_Qvi_Large_ViewParams = new Open_Data_Merge_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Data_Merge_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Data_Split_Tool_Qvi_Large_ViewParams Open_Data_Split_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Data_Split_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Data_Split_Tool_Qvi_Large_ViewParams = new Open_Data_Split_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Data_Split_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Json_Tool_Qvi_Large_ViewParams Open_Json_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Json_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Json_Tool_Qvi_Large_ViewParams = new Open_Json_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Json_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams = new Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_System_Information_Tool_Qvi_Large_ViewParams Open_System_Information_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_System_Information_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_System_Information_Tool_Qvi_Large_ViewParams = new Open_System_Information_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_System_Information_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual Open_Xpath_Tool_Qvi_Large_ViewParams Open_Xpath_Tool_Qvi_Large_ViewParams
        {
            get
            {
                if ((this.mOpen_Xpath_Tool_Qvi_Large_ViewParams == null))
                {
                    this.mOpen_Xpath_Tool_Qvi_Large_ViewParams = new Open_Xpath_Tool_Qvi_Large_ViewParams();
                }
                return this.mOpen_Xpath_Tool_Qvi_Large_ViewParams;
            }
        }
        
        public virtual PressF11_EnterFullScreenParams PressF11_EnterFullScreenParams
        {
            get
            {
                if ((this.mPressF11_EnterFullScreenParams == null))
                {
                    this.mPressF11_EnterFullScreenParams = new PressF11_EnterFullScreenParams();
                }
                return this.mPressF11_EnterFullScreenParams;
            }
        }
        
        public virtual Type_S_Into_DebugInput_Row1_InputDataParams Type_S_Into_DebugInput_Row1_InputDataParams
        {
            get
            {
                if ((this.mType_S_Into_DebugInput_Row1_InputDataParams == null))
                {
                    this.mType_S_Into_DebugInput_Row1_InputDataParams = new Type_S_Into_DebugInput_Row1_InputDataParams();
                }
                return this.mType_S_Into_DebugInput_Row1_InputDataParams;
            }
        }
        
        public virtual Type_tstci_into_Server_Source_Wizard_Address_TextboxParams Type_tstci_into_Server_Source_Wizard_Address_TextboxParams
        {
            get
            {
                if ((this.mType_tstci_into_Server_Source_Wizard_Address_TextboxParams == null))
                {
                    this.mType_tstci_into_Server_Source_Wizard_Address_TextboxParams = new Type_tstci_into_Server_Source_Wizard_Address_TextboxParams();
                }
                return this.mType_tstci_into_Server_Source_Wizard_Address_TextboxParams;
            }
        }
        
        public virtual Assert_TSTCIREMOTEConnected_Exists_In_ExplorerRemoteServerDropdownListExpectedValues Assert_TSTCIREMOTEConnected_Exists_In_ExplorerRemoteServerDropdownListExpectedValues
        {
            get
            {
                if ((this.mAssert_TSTCIREMOTEConnected_Exists_In_ExplorerRemoteServerDropdownListExpectedValues == null))
                {
                    this.mAssert_TSTCIREMOTEConnected_Exists_In_ExplorerRemoteServerDropdownListExpectedValues = new Assert_TSTCIREMOTEConnected_Exists_In_ExplorerRemoteServerDropdownListExpectedValues();
                }
                return this.mAssert_TSTCIREMOTEConnected_Exists_In_ExplorerRemoteServerDropdownListExpectedValues;
            }
        }
        
        public MainStudioWindow MainStudioWindow
        {
            get
            {
                if ((this.mMainStudioWindow == null))
                {
                    this.mMainStudioWindow = new MainStudioWindow();
                }
                return this.mMainStudioWindow;
            }
        }
        
        public MessageBoxWindow MessageBoxWindow
        {
            get
            {
                if ((this.mMessageBoxWindow == null))
                {
                    this.mMessageBoxWindow = new MessageBoxWindow();
                }
                return this.mMessageBoxWindow;
            }
        }
        
        public SaveDialogWindow SaveDialogWindow
        {
            get
            {
                if ((this.mSaveDialogWindow == null))
                {
                    this.mSaveDialogWindow = new SaveDialogWindow();
                }
                return this.mSaveDialogWindow;
            }
        }
        
        public SplashPageWindow SplashPageWindow
        {
            get
            {
                if ((this.mSplashPageWindow == null))
                {
                    this.mSplashPageWindow = new SplashPageWindow();
                }
                return this.mSplashPageWindow;
            }
        }
        
        public DecisionDialog DecisionDialog
        {
            get
            {
                if ((this.mDecisionDialog == null))
                {
                    this.mDecisionDialog = new DecisionDialog();
                }
                return this.mDecisionDialog;
            }
        }
        #endregion
        
        #region Fields
        private Assert_Assign_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Assign_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Assign_Large_View_Row1_Variable_Textbox_ExistsExpectedValues mAssert_Assign_Large_View_Row1_Variable_Textbox_ExistsExpectedValues;
        
        private Assert_Assign_Large_View_Row1_Variable_Textbox_Text_Equals_SomeVariableExpectedValues mAssert_Assign_Large_View_Row1_Variable_Textbox_Text_Equals_SomeVariableExpectedValues;
        
        private Assert_Assign_Object_Large_View_on_the_Design_Surface_Add_Row_Message_ExistsExpectedValues mAssert_Assign_Object_Large_View_on_the_Design_Surface_Add_Row_Message_ExistsExpectedValues;
        
        private Assert_Assign_Object_Large_View_on_the_Design_Surface_Insert_Delete_Row_Message_ExistsExpectedValues mAssert_Assign_Object_Large_View_on_the_Design_Surface_Insert_Delete_Row_Message_ExistsExpectedValues;
        
        private Assert_Assign_Object_Large_View_Row1_Value_Textbox_ExistsExpectedValues mAssert_Assign_Object_Large_View_Row1_Value_Textbox_ExistsExpectedValues;
        
        private Assert_Assign_Object_Large_View_Row1_Variable_TextboxExpectedValues mAssert_Assign_Object_Large_View_Row1_Variable_TextboxExpectedValues;
        
        private Assert_Assign_Object_Large_View_Row2_Value_Textbox_ExistsExpectedValues mAssert_Assign_Object_Large_View_Row2_Value_Textbox_ExistsExpectedValues;
        
        private Assert_Assign_Object_Large_View_Row2_Variable_Textbox_ExistsExpectedValues mAssert_Assign_Object_Large_View_Row2_Variable_Textbox_ExistsExpectedValues;
        
        private Assert_Assign_Object_Row2_Value_Textbox_ExistsExpectedValues mAssert_Assign_Object_Row2_Value_Textbox_ExistsExpectedValues;
        
        private Assert_Assign_Object_Row2_Variable_Textbox_ExistsExpectedValues mAssert_Assign_Object_Row2_Variable_Textbox_ExistsExpectedValues;
        
        private Assert_Assign_Object_Small_View_Exists_On_Design_SurfaceExpectedValues mAssert_Assign_Object_Small_View_Exists_On_Design_SurfaceExpectedValues;
        
        private Assert_Assign_Object_Small_View_Row1_Value_TextboxExpectedValues mAssert_Assign_Object_Small_View_Row1_Value_TextboxExpectedValues;
        
        private Assert_Assign_Object_Small_View_Row1_Variable_Textbox_ExistsExpectedValues mAssert_Assign_Object_Small_View_Row1_Variable_Textbox_ExistsExpectedValues;
        
        private Assert_Assign_QVI_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Assign_QVI_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Assign_Small_View_Row1_Variable_Textbox_ExistsExpectedValues mAssert_Assign_Small_View_Row1_Variable_Textbox_ExistsExpectedValues;
        
        private Assert_Assign_Small_View_Row1_Variable_Textbox_Text_is_SomeVariableExpectedValues mAssert_Assign_Small_View_Row1_Variable_Textbox_Text_is_SomeVariableExpectedValues;
        
        private Assert_Base_Conversion_Exists_OnDesignSurfaceExpectedValues mAssert_Base_Conversion_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Calculate_Exists_OnDesignSurfaceExpectedValues mAssert_Calculate_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Case_Conversion_Exists_OnDesignSurfaceExpectedValues mAssert_Case_Conversion_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Close_Button_Exists_TopRibbonExpectedValues mAssert_Close_Button_Exists_TopRibbonExpectedValues;
        
        private Assert_Close_Tab_Button_ExistsExpectedValues mAssert_Close_Tab_Button_ExistsExpectedValues;
        
        private Assert_CMD_Line_Exists_OnDesignSurfaceExpectedValues mAssert_CMD_Line_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_CMD_Line_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_CMD_Line_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Comment_Exists_OnDesignSurfaceExpectedValues mAssert_Comment_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Connect_button_Destination_Server_ExistsExpectedValues mAssert_Connect_button_Destination_Server_ExistsExpectedValues;
        
        private Assert_Connect_Button_Source_Server_ExistsExpectedValues mAssert_Connect_Button_Source_Server_ExistsExpectedValues;
        
        private Assert_Connect_ConnectControl_Button_Exists_InExplorerExpectedValues mAssert_Connect_ConnectControl_Button_Exists_InExplorerExpectedValues;
        
        private Assert_Connect_Control_DestinationServer_ExistsExpectedValues mAssert_Connect_Control_DestinationServer_ExistsExpectedValues;
        
        private Assert_Connect_Control_Exists_InExplorerExpectedValues mAssert_Connect_Control_Exists_InExplorerExpectedValues;
        
        private Assert_Connect_Control_SourceServer_ExistsExpectedValues mAssert_Connect_Control_SourceServer_ExistsExpectedValues;
        
        private Assert_Copy_Exists_OnDesignSurfaceExpectedValues mAssert_Copy_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Copy_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Copy_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Count_Records_Exists_OnDesignSurfaceExpectedValues mAssert_Count_Records_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Create_Exists_OnDesignSurfaceExpectedValues mAssert_Create_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Create_JSON_Exists_OnDesignSurfaceExpectedValues mAssert_Create_JSON_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Create_Path_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Create_Path_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Data_Connector_Exists_OnDesignSurfaceExpectedValues mAssert_Data_Connector_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Data_Merge_Exists_OnDesignSurfaceExpectedValues mAssert_Data_Merge_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Data_Merge_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Data_Merge_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Data_Split_Exists_OnDesignSurfaceExpectedValues mAssert_Data_Split_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Data_Split_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Data_Split_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Data_Split_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Data_Split_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Database_Source_Dropdownlist_ExistsExpectedValues mAssert_Database_Source_Dropdownlist_ExistsExpectedValues;
        
        private Assert_Database_Source_ExistsExpectedValues mAssert_Database_Source_ExistsExpectedValues;
        
        private Assert_Date_And_Time_Exists_OnDesignSurfaceExpectedValues mAssert_Date_And_Time_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_DateTime_Difference_Conversion_Exists_OnDesignSurfaceExpectedValues mAssert_DateTime_Difference_Conversion_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_DebugInput_CancelButton_ExistsExpectedValues mAssert_DebugInput_CancelButton_ExistsExpectedValues;
        
        private Assert_DebugInput_DebugButton_ExistsExpectedValues mAssert_DebugInput_DebugButton_ExistsExpectedValues;
        
        private Assert_DebugInput_InputData_Field_ExistsExpectedValues mAssert_DebugInput_InputData_Field_ExistsExpectedValues;
        
        private Assert_DebugInput_InputData_Window_ExistsExpectedValues mAssert_DebugInput_InputData_Window_ExistsExpectedValues;
        
        private Assert_DebugInput_Json_Tab_ExistsExpectedValues mAssert_DebugInput_Json_Tab_ExistsExpectedValues;
        
        private Assert_DebugInput_Json_Window_ExistsExpectedValues mAssert_DebugInput_Json_Window_ExistsExpectedValues;
        
        private Assert_DebugInput_RememberCheckbox_ExistsExpectedValues mAssert_DebugInput_RememberCheckbox_ExistsExpectedValues;
        
        private Assert_DebugInput_ViewInBrowser_Button_ExistsExpectedValues mAssert_DebugInput_ViewInBrowser_Button_ExistsExpectedValues;
        
        private Assert_DebugInput_Window_ExistsExpectedValues mAssert_DebugInput_Window_ExistsExpectedValues;
        
        private Assert_DebugInput_Xml_Tab_ExistsExpectedValues mAssert_DebugInput_Xml_Tab_ExistsExpectedValues;
        
        private Assert_DebugInput_Xml_Window_ExistsExpectedValues mAssert_DebugInput_Xml_Window_ExistsExpectedValues;
        
        private Assert_DebugOutput_Contains_SomeVariableExpectedValues mAssert_DebugOutput_Contains_SomeVariableExpectedValues;
        
        private Assert_DebugOutput_ExistsExpectedValues mAssert_DebugOutput_ExistsExpectedValues;
        
        private Assert_DebugOutput_ExpandCollapseButton_ExistsExpectedValues mAssert_DebugOutput_ExpandCollapseButton_ExistsExpectedValues;
        
        private Assert_DebugOutput_FilterTextbox_ExistsExpectedValues mAssert_DebugOutput_FilterTextbox_ExistsExpectedValues;
        
        private Assert_DebugOutput_ResultsTree_ExistsExpectedValues mAssert_DebugOutput_ResultsTree_ExistsExpectedValues;
        
        private Assert_DebugOutput_SettingsButton_ExistsExpectedValues mAssert_DebugOutput_SettingsButton_ExistsExpectedValues;
        
        private Assert_Decision_Dialog_Done_Button_ExistsExpectedValues mAssert_Decision_Dialog_Done_Button_ExistsExpectedValues;
        
        private Assert_Decision_Dialog_ExistsExpectedValues mAssert_Decision_Dialog_ExistsExpectedValues;
        
        private Assert_Decision_Exists_In_The_ToolboxExpectedValues mAssert_Decision_Exists_In_The_ToolboxExpectedValues;
        
        private Assert_Decision_Exists_OnDesignSurfaceExpectedValues mAssert_Decision_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Delete_Exists_OnDesignSurfaceExpectedValues mAssert_Delete_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Delete_Record_Exists_OnDesignSurfaceExpectedValues mAssert_Delete_Record_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Deploy_Destination_Server_Edit_ExistsExpectedValues mAssert_Deploy_Destination_Server_Edit_ExistsExpectedValues;
        
        private Assert_Deploy_Ribbon_Button_ExistsExpectedValues mAssert_Deploy_Ribbon_Button_ExistsExpectedValues;
        
        private Assert_DeployButton_DestinationServer_ExistsExpectedValues mAssert_DeployButton_DestinationServer_ExistsExpectedValues;
        
        private Assert_Display_Name_Exists_On_Assign_Object_Small_View_On_The_Design_SurfaceExpectedValues mAssert_Display_Name_Exists_On_Assign_Object_Small_View_On_The_Design_SurfaceExpectedValues;
        
        private Assert_Display_Name_Exists_On_Data_Merge_Small_ViewExpectedValues mAssert_Display_Name_Exists_On_Data_Merge_Small_ViewExpectedValues;
        
        private Assert_Done_Button_Exists_On_Assign_Object_Large_ViewExpectedValues mAssert_Done_Button_Exists_On_Assign_Object_Large_ViewExpectedValues;
        
        private Assert_Done_Button_Exists_On_Data_Merge_Large_ViewExpectedValues mAssert_Done_Button_Exists_On_Data_Merge_Large_ViewExpectedValues;
        
        private Assert_DotNet_DLL_Connector_Exists_OnDesignSurfaceExpectedValues mAssert_DotNet_DLL_Connector_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Dropbox_Download_Exists_OnDesignSurfaceExpectedValues mAssert_Dropbox_Download_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Dropbox_Upload_Exists_OnDesignSurfaceExpectedValues mAssert_Dropbox_Upload_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Edit_Button_Destination_Server_ExistsExpectedValues mAssert_Edit_Button_Destination_Server_ExistsExpectedValues;
        
        private Assert_Email_Exists_OnDesignSurfaceExpectedValues mAssert_Email_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Email_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Email_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_end_this_workflow_checkbox_exists_on_Assign_Object_large_viewExpectedValues mAssert_end_this_workflow_checkbox_exists_on_Assign_Object_large_viewExpectedValues;
        
        private Assert_Error_Variable_Textbox_Exists_On_Assign_Object_Large_ViewExpectedValues mAssert_Error_Variable_Textbox_Exists_On_Assign_Object_Large_ViewExpectedValues;
        
        private Assert_Explorer_Edit_Connect_Control_Button_ExistsExpectedValues mAssert_Explorer_Edit_Connect_Control_Button_ExistsExpectedValues;
        
        private Assert_Explorer_ExistsExpectedValues mAssert_Explorer_ExistsExpectedValues;
        
        private Assert_Explorer_Filter_Textbox_ExistsExpectedValues mAssert_Explorer_Filter_Textbox_ExistsExpectedValues;
        
        private Assert_Explorer_Remote_Server_DropdownList_Contains_NewRemoteServerExpectedValues mAssert_Explorer_Remote_Server_DropdownList_Contains_NewRemoteServerExpectedValues;
        
        private Assert_Explorer_Remote_Server_DropdownList_Contains_TSTCIREMOTEExpectedValues mAssert_Explorer_Remote_Server_DropdownList_Contains_TSTCIREMOTEExpectedValues;
        
        private Assert_Explorer_Remote_Server_DropdownList_Does_Not_Contain_TSTCIREMOTEExpectedValues mAssert_Explorer_Remote_Server_DropdownList_Does_Not_Contain_TSTCIREMOTEExpectedValues;
        
        private Assert_Explorer_Remote_Server_DropdownList_Has_localhost_SelectedExpectedValues mAssert_Explorer_Remote_Server_DropdownList_Has_localhost_SelectedExpectedValues;
        
        private Assert_Explorer_Remote_Server_DropdownList_Has_TSTCIREMOTE_SelectedExpectedValues mAssert_Explorer_Remote_Server_DropdownList_Has_TSTCIREMOTE_SelectedExpectedValues;
        
        private Assert_Explorer_ServerName_ExistsExpectedValues mAssert_Explorer_ServerName_ExistsExpectedValues;
        
        private Assert_ExplorerContextMenu_Delete_ExistsExpectedValues mAssert_ExplorerContextMenu_Delete_ExistsExpectedValues;
        
        private Assert_Filter_Source_Server_ExistsExpectedValues mAssert_Filter_Source_Server_ExistsExpectedValues;
        
        private Assert_Find_Index_Exists_OnDesignSurfaceExpectedValues mAssert_Find_Index_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Find_Record_Index_Exists_OnDesignSurfaceExpectedValues mAssert_Find_Record_Index_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Find_Record_index_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Find_Record_index_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_For_Each_Exists_OnDesignSurfaceExpectedValues mAssert_For_Each_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Format_Number_Exists_OnDesignSurfaceExpectedValues mAssert_Format_Number_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_FullScreen_Button_Exists_TopRibbonExpectedValues mAssert_FullScreen_Button_Exists_TopRibbonExpectedValues;
        
        private Assert_Generic_Context_Menu_ExistsExpectedValues mAssert_Generic_Context_Menu_ExistsExpectedValues;
        
        private Assert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_GetWeb_RequestTool_small_View_Exists_OnDesignSurfaceExpectedValues mAssert_GetWeb_RequestTool_small_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_InputData_Tab_ExistsExpectedValues mAssert_InputData_Tab_ExistsExpectedValues;
        
        private Assert_Json_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Json_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Json_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Json_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Length_Exists_OnDesignSurfaceExpectedValues mAssert_Length_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_LockAndUnlock_Button_Exists_TopRibbonExpectedValues mAssert_LockAndUnlock_Button_Exists_TopRibbonExpectedValues;
        
        private Assert_MainStudioWindow_ExistsExpectedValues mAssert_MainStudioWindow_ExistsExpectedValues;
        
        private Assert_Maximize_Button_Exists_TopRibbonExpectedValues mAssert_Maximize_Button_Exists_TopRibbonExpectedValues;
        
        private Assert_MessageBox_Does_Not_ExistExpectedValues mAssert_MessageBox_Does_Not_ExistExpectedValues;
        
        private Assert_MessageBox_No_Button_ExistsExpectedValues mAssert_MessageBox_No_Button_ExistsExpectedValues;
        
        private Assert_MessageBox_Yes_Button_ExistsExpectedValues mAssert_MessageBox_Yes_Button_ExistsExpectedValues;
        
        private Assert_Minimize_Button_Exists_TopRibbonExpectedValues mAssert_Minimize_Button_Exists_TopRibbonExpectedValues;
        
        private Assert_Move_Exists_OnDesignSurfaceExpectedValues mAssert_Move_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Move_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Move_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_MultiAssign_Exists_OnDesignSurfaceExpectedValues mAssert_MultiAssign_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Mysql_Database_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Mysql_Database_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_New_Workflow_Context_Menu_ExistsExpectedValues mAssert_New_Workflow_Context_Menu_ExistsExpectedValues;
        
        private Assert_NewResource_Count_ExistsExpectedValues mAssert_NewResource_Count_ExistsExpectedValues;
        
        private Assert_NewResource_Label_ExistsExpectedValues mAssert_NewResource_Label_ExistsExpectedValues;
        
        private Assert_NewWorkFlow_RibbonButton_ExistsExpectedValues mAssert_NewWorkFlow_RibbonButton_ExistsExpectedValues;
        
        private Assert_OnError_End_this_workflow_Checkbox_Exists_On_Data_Merge_Large_ViewExpectedValues mAssert_OnError_End_this_workflow_Checkbox_Exists_On_Data_Merge_Large_ViewExpectedValues;
        
        private Assert_OnError_Variable_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues mAssert_OnError_Variable_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues;
        
        private Assert_OnError_WebService_Textbox_Exists_On_Assign_Object_Large_ViewExpectedValues mAssert_OnError_WebService_Textbox_Exists_On_Assign_Object_Large_ViewExpectedValues;
        
        private Assert_Override_Count_ExistsExpectedValues mAssert_Override_Count_ExistsExpectedValues;
        
        private Assert_Override_Label_DestinationServer_ExistsExpectedValues mAssert_Override_Label_DestinationServer_ExistsExpectedValues;
        
        private Assert_Plugin_Connector_Exists_OnDesignSurfaceExpectedValues mAssert_Plugin_Connector_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Plugin_Source_ExistsExpectedValues mAssert_Plugin_Source_ExistsExpectedValues;
        
        private Assert_Position_ExistsExpectedValues mAssert_Position_ExistsExpectedValues;
        
        private Assert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurfaceExpectedValues mAssert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_QVI_Button_Exists_on_Assign_Object_Small_ViewExpectedValues mAssert_QVI_Button_Exists_on_Assign_Object_Small_ViewExpectedValues;
        
        private Assert_QVI_Toggle_Button_Exists_On_Data_Merge_Small_ViewExpectedValues mAssert_QVI_Toggle_Button_Exists_On_Data_Merge_Small_ViewExpectedValues;
        
        private Assert_Random_Exists_OnDesignSurfaceExpectedValues mAssert_Random_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Read_File_Exists_OnDesignSurfaceExpectedValues mAssert_Read_File_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Read_File_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Read_File_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Read_Folder_Exists_OnDesignSurfaceExpectedValues mAssert_Read_Folder_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Read_Folder_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Read_Folder_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Refresh_Button_Exists_InExplorerExpectedValues mAssert_Refresh_Button_Exists_InExplorerExpectedValues;
        
        private Assert_Refresh_Button_Source_Server_ExistsExpectedValues mAssert_Refresh_Button_Source_Server_ExistsExpectedValues;
        
        private Assert_Rename_Exists_OnDesignSurfaceExpectedValues mAssert_Rename_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Rename_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Rename_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Replace_Exists_OnDesignSurfaceExpectedValues mAssert_Replace_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Result_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues mAssert_Result_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues;
        
        private Assert_Result_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues mAssert_Result_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues;
        
        private Assert_Row1_Align_Combobox_Exists_On_Data_Merge_Large_ViewExpectedValues mAssert_Row1_Align_Combobox_Exists_On_Data_Merge_Large_ViewExpectedValues;
        
        private Assert_Row1_Combobox_Exists_On_Data_Merge_Small_ViewExpectedValues mAssert_Row1_Combobox_Exists_On_Data_Merge_Small_ViewExpectedValues;
        
        private Assert_Row1_Index_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues mAssert_Row1_Index_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues;
        
        private Assert_Row1_Input_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues mAssert_Row1_Input_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues;
        
        private Assert_Row1_Recordset_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues mAssert_Row1_Recordset_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues;
        
        private Assert_Row1_Using_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues mAssert_Row1_Using_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues;
        
        private Assert_Row1_With_Combobox_Exists_On_Data_Merge_large_ViewExpectedValues mAssert_Row1_With_Combobox_Exists_On_Data_Merge_large_ViewExpectedValues;
        
        private Assert_Row2_Combobox_Exists_On_Data_Merge_Small_ViewExpectedValues mAssert_Row2_Combobox_Exists_On_Data_Merge_Small_ViewExpectedValues;
        
        private Assert_Row2_Index_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues mAssert_Row2_Index_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues;
        
        private Assert_Row2_Recordset_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues mAssert_Row2_Recordset_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues;
        
        private Assert_Save_Ribbon_Button_EnabledExpectedValues mAssert_Save_Ribbon_Button_EnabledExpectedValues;
        
        private Assert_Save_Ribbon_Button_ExistsExpectedValues mAssert_Save_Ribbon_Button_ExistsExpectedValues;
        
        private Assert_SaveDialog_CancelButton_ExistsExpectedValues mAssert_SaveDialog_CancelButton_ExistsExpectedValues;
        
        private Assert_SaveDialog_ErrorLabel_ExistsExpectedValues mAssert_SaveDialog_ErrorLabel_ExistsExpectedValues;
        
        private Assert_SaveDialog_ExistsExpectedValues mAssert_SaveDialog_ExistsExpectedValues;
        
        private Assert_SaveDialog_ExplorerTree_ExistsExpectedValues mAssert_SaveDialog_ExplorerTree_ExistsExpectedValues;
        
        private Assert_SaveDialog_ExplorerTreeItem_ExistsExpectedValues mAssert_SaveDialog_ExplorerTreeItem_ExistsExpectedValues;
        
        private Assert_SaveDialog_ExplorerView_ExistsExpectedValues mAssert_SaveDialog_ExplorerView_ExistsExpectedValues;
        
        private Assert_SaveDialog_FilterTextbox_ExistsExpectedValues mAssert_SaveDialog_FilterTextbox_ExistsExpectedValues;
        
        private Assert_SaveDialog_NameLabel_ExistsExpectedValues mAssert_SaveDialog_NameLabel_ExistsExpectedValues;
        
        private Assert_SaveDialog_RefreshButton_ExistsExpectedValues mAssert_SaveDialog_RefreshButton_ExistsExpectedValues;
        
        private Assert_SaveDialog_SaveButton_EnabledExpectedValues mAssert_SaveDialog_SaveButton_EnabledExpectedValues;
        
        private Assert_SaveDialog_SaveButton_ExistsExpectedValues mAssert_SaveDialog_SaveButton_ExistsExpectedValues;
        
        private Assert_SaveDialog_ServiceName_Textbox_ExistsExpectedValues mAssert_SaveDialog_ServiceName_Textbox_ExistsExpectedValues;
        
        private Assert_SaveDialog_WorkspaceName_ExistsExpectedValues mAssert_SaveDialog_WorkspaceName_ExistsExpectedValues;
        
        private Assert_Scheduler_ConncectControl_ExistsExpectedValues mAssert_Scheduler_ConncectControl_ExistsExpectedValues;
        
        private Assert_Scheduler_ConnectButton_ExistsExpectedValues mAssert_Scheduler_ConnectButton_ExistsExpectedValues;
        
        private Assert_Scheduler_ConnectControl_Edit_ExistsExpectedValues mAssert_Scheduler_ConnectControl_Edit_ExistsExpectedValues;
        
        private Assert_Scheduler_CreateNewTask_ExistsExpectedValues mAssert_Scheduler_CreateNewTask_ExistsExpectedValues;
        
        private Assert_Scheduler_DeleteButton_ExistsExpectedValues mAssert_Scheduler_DeleteButton_ExistsExpectedValues;
        
        private Assert_Scheduler_DisabledRadioButton_ExistsExpectedValues mAssert_Scheduler_DisabledRadioButton_ExistsExpectedValues;
        
        private Assert_Scheduler_EditTrigger_ExistsExpectedValues mAssert_Scheduler_EditTrigger_ExistsExpectedValues;
        
        private Assert_Scheduler_EnabledRadioButton_ExistsExpectedValues mAssert_Scheduler_EnabledRadioButton_ExistsExpectedValues;
        
        private Assert_Scheduler_ErrorMessage_ExistsExpectedValues mAssert_Scheduler_ErrorMessage_ExistsExpectedValues;
        
        private Assert_Scheduler_HistoryInput_ExistsExpectedValues mAssert_Scheduler_HistoryInput_ExistsExpectedValues;
        
        private Assert_Scheduler_HistoryLabel_ExistsExpectedValues mAssert_Scheduler_HistoryLabel_ExistsExpectedValues;
        
        private Assert_Scheduler_HistoryTable_ExistsExpectedValues mAssert_Scheduler_HistoryTable_ExistsExpectedValues;
        
        private Assert_Scheduler_NameInput_ExistsExpectedValues mAssert_Scheduler_NameInput_ExistsExpectedValues;
        
        private Assert_Scheduler_NameLabel_ExistsExpectedValues mAssert_Scheduler_NameLabel_ExistsExpectedValues;
        
        private Assert_Scheduler_PasswordInput_ExistsExpectedValues mAssert_Scheduler_PasswordInput_ExistsExpectedValues;
        
        private Assert_Scheduler_PasswordLabel_ExistsExpectedValues mAssert_Scheduler_PasswordLabel_ExistsExpectedValues;
        
        private Assert_Scheduler_ResourcePicker_ExistsExpectedValues mAssert_Scheduler_ResourcePicker_ExistsExpectedValues;
        
        private Assert_Scheduler_RunTask_Checkbox_ExistsExpectedValues mAssert_Scheduler_RunTask_Checkbox_ExistsExpectedValues;
        
        private Assert_Scheduler_Status_RadioButton_ExistsExpectedValues mAssert_Scheduler_Status_RadioButton_ExistsExpectedValues;
        
        private Assert_Scheduler_StatusLabe_ExistsExpectedValues mAssert_Scheduler_StatusLabe_ExistsExpectedValues;
        
        private Assert_Scheduler_TriggerLabel_ExistsExpectedValues mAssert_Scheduler_TriggerLabel_ExistsExpectedValues;
        
        private Assert_Scheduler_TriggerValue_ExistsExpectedValues mAssert_Scheduler_TriggerValue_ExistsExpectedValues;
        
        private Assert_Scheduler_UserAccountLabel_ExistsExpectedValues mAssert_Scheduler_UserAccountLabel_ExistsExpectedValues;
        
        private Assert_Scheduler_UsernameInput_ExistsExpectedValues mAssert_Scheduler_UsernameInput_ExistsExpectedValues;
        
        private Assert_Scheduler_Usernamelabel_ExistsExpectedValues mAssert_Scheduler_Usernamelabel_ExistsExpectedValues;
        
        private Assert_Scheduler_WorkflowInput_ExistsExpectedValues mAssert_Scheduler_WorkflowInput_ExistsExpectedValues;
        
        private Assert_Scheduler_WorkflowLabel_ExistsExpectedValues mAssert_Scheduler_WorkflowLabel_ExistsExpectedValues;
        
        private Assert_Script_Exists_OnDesignSurfaceExpectedValues mAssert_Script_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Sequence_Exists_OnDesignSurfaceExpectedValues mAssert_Sequence_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Server_Source_Wizard_Address_Protocol_Dropdown_Contains_HttpExpectedValues mAssert_Server_Source_Wizard_Address_Protocol_Dropdown_Contains_HttpExpectedValues;
        
        private Assert_Server_Source_Wizard_Address_Protocol_Dropdown_ExistsExpectedValues mAssert_Server_Source_Wizard_Address_Protocol_Dropdown_ExistsExpectedValues;
        
        private Assert_Server_Source_Wizard_Address_Protocol_Equals_HttpExpectedValues mAssert_Server_Source_Wizard_Address_Protocol_Equals_HttpExpectedValues;
        
        private Assert_Server_Source_Wizard_Address_Textbox_ExistsExpectedValues mAssert_Server_Source_Wizard_Address_Textbox_ExistsExpectedValues;
        
        private Assert_Server_Source_Wizard_Address_Textbox_Text_Equals_TSTCIREMOTEExpectedValues mAssert_Server_Source_Wizard_Address_Textbox_Text_Equals_TSTCIREMOTEExpectedValues;
        
        private Assert_Server_Source_Wizard_DropdownList_Contains_TSTCIREMOTEExpectedValues mAssert_Server_Source_Wizard_DropdownList_Contains_TSTCIREMOTEExpectedValues;
        
        private Assert_Server_Source_Wizard_Test_Connection_Button_ExistsExpectedValues mAssert_Server_Source_Wizard_Test_Connection_Button_ExistsExpectedValues;
        
        private Assert_Server_Source_Wizard_Test_PassedExpectedValues mAssert_Server_Source_Wizard_Test_PassedExpectedValues;
        
        private Assert_Server_Version_ExistsExpectedValues mAssert_Server_Version_ExistsExpectedValues;
        
        private Assert_Service_Picker_Cancel_Button_ExistsExpectedValues mAssert_Service_Picker_Cancel_Button_ExistsExpectedValues;
        
        private Assert_Service_Picker_Dialog_ExistsExpectedValues mAssert_Service_Picker_Dialog_ExistsExpectedValues;
        
        private Assert_ServiceLabel_DestinationServer_ExistsExpectedValues mAssert_ServiceLabel_DestinationServer_ExistsExpectedValues;
        
        private Assert_ServicesCount_Label_ExistsExpectedValues mAssert_ServicesCount_Label_ExistsExpectedValues;
        
        private Assert_Settings_ConnectButton_ExistsExpectedValues mAssert_Settings_ConnectButton_ExistsExpectedValues;
        
        private Assert_Settings_ConnectControl_Edit_Button_ExistsExpectedValues mAssert_Settings_ConnectControl_Edit_Button_ExistsExpectedValues;
        
        private Assert_Settings_ConnectControl_ExistsExpectedValues mAssert_Settings_ConnectControl_ExistsExpectedValues;
        
        private Assert_Settings_LoggingTab_ExistsExpectedValues mAssert_Settings_LoggingTab_ExistsExpectedValues;
        
        private Assert_Settings_ResourcePermissions_ExistsExpectedValues mAssert_Settings_ResourcePermissions_ExistsExpectedValues;
        
        private Assert_Settings_SecurityTab_ExistsExpectedValues mAssert_Settings_SecurityTab_ExistsExpectedValues;
        
        private Assert_Settings_ServerPermissions_ExistsExpectedValues mAssert_Settings_ServerPermissions_ExistsExpectedValues;
        
        private Assert_Sharepoint_Create_Exists_OnDesignSurfaceExpectedValues mAssert_Sharepoint_Create_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Sharepoint_Create_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Sharepoint_Create_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Sharepoint_Delete_Exists_OnDesignSurfaceExpectedValues mAssert_Sharepoint_Delete_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Sharepoint_Delete_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Sharepoint_Delete_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Sharepoint_Read_Exists_OnDesignSurfaceExpectedValues mAssert_Sharepoint_Read_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Sharepoint_Read_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Sharepoint_Read_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Sharepoint_Update_Exists_OnDesignSurfaceExpectedValues mAssert_Sharepoint_Update_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Sharepoint_Update_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Sharepoint_Update_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_ShowDependencies_Button_DestinationServer_ExistsExpectedValues mAssert_ShowDependencies_Button_DestinationServer_ExistsExpectedValues;
        
        private Assert_Sort_Records_Exists_OnDesignSurfaceExpectedValues mAssert_Sort_Records_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Source_Server_Name_ExistsExpectedValues mAssert_Source_Server_Name_ExistsExpectedValues;
        
        private Assert_SourceCount_DestinationServer_ExistsExpectedValues mAssert_SourceCount_DestinationServer_ExistsExpectedValues;
        
        private Assert_SourceLabel_DestinationServer_ExistsExpectedValues mAssert_SourceLabel_DestinationServer_ExistsExpectedValues;
        
        private Assert_Sql_Bulk_insert_Exists_OnDesignSurfaceExpectedValues mAssert_Sql_Bulk_insert_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurfaceExpectedValues mAssert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_SQL_Server_Database_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_SQL_Server_Database_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_StartNode_ExistsExpectedValues mAssert_StartNode_ExistsExpectedValues;
        
        private Assert_SuccessMessage_Label_ExistsExpectedValues mAssert_SuccessMessage_Label_ExistsExpectedValues;
        
        private Assert_Switch_Exists_OnDesignSurfaceExpectedValues mAssert_Switch_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Switch_Window_Exists_OnDesignSurfaceExpectedValues mAssert_Switch_Window_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_System_Info_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_System_Info_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_System_information_Exists_OnDesignSurfaceExpectedValues mAssert_System_information_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_TabHeader_ExistsExpectedValues mAssert_TabHeader_ExistsExpectedValues;
        
        private Assert_Toolbox_FilterTextbox_ExistsExpectedValues mAssert_Toolbox_FilterTextbox_ExistsExpectedValues;
        
        private Assert_Toolbox_Multiassign_ExistsExpectedValues mAssert_Toolbox_Multiassign_ExistsExpectedValues;
        
        private Assert_Toolbox_RefreshButton_ExistsExpectedValues mAssert_Toolbox_RefreshButton_ExistsExpectedValues;
        
        private Assert_Unique_Records_Exists_OnDesignSurfaceExpectedValues mAssert_Unique_Records_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_UnLock_Button_ExistsExpectedValues mAssert_UnLock_Button_ExistsExpectedValues;
        
        private Assert_Unzip_Exists_OnDesignSurfaceExpectedValues mAssert_Unzip_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Unzip_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Unzip_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_VariableList_DeleteButton_ExistsExpectedValues mAssert_VariableList_DeleteButton_ExistsExpectedValues;
        
        private Assert_VariableList_ExistsExpectedValues mAssert_VariableList_ExistsExpectedValues;
        
        private Assert_VariableList_Recordset_Row1_Field_IsInputCheckBox_ExistsExpectedValues mAssert_VariableList_Recordset_Row1_Field_IsInputCheckBox_ExistsExpectedValues;
        
        private Assert_VariableList_Recordset_Row1_Field_IsOutputCheckBox_ExistsExpectedValues mAssert_VariableList_Recordset_Row1_Field_IsOutputCheckBox_ExistsExpectedValues;
        
        private Assert_VariableList_Recordset_Row1_Field_TextBox_ExistsExpectedValues mAssert_VariableList_Recordset_Row1_Field_TextBox_ExistsExpectedValues;
        
        private Assert_VariableList_Recordset_Row1_IsInputCheckBox_ExistsExpectedValues mAssert_VariableList_Recordset_Row1_IsInputCheckBox_ExistsExpectedValues;
        
        private Assert_VariableList_Recordset_Row1_IsOutputCheckBox_ExistsExpectedValues mAssert_VariableList_Recordset_Row1_IsOutputCheckBox_ExistsExpectedValues;
        
        private Assert_VariableList_Recordset_Row1_TextBox_ExistsExpectedValues mAssert_VariableList_Recordset_Row1_TextBox_ExistsExpectedValues;
        
        private Assert_VariableList_Scalar_Row1_IsInputCheckBox_ExistsExpectedValues mAssert_VariableList_Scalar_Row1_IsInputCheckBox_ExistsExpectedValues;
        
        private Assert_VariableList_Scalar_Row1_IsOutputCheckBox_ExistsExpectedValues mAssert_VariableList_Scalar_Row1_IsOutputCheckBox_ExistsExpectedValues;
        
        private Assert_VariableList_Scalar_Row1_Textbox_Equals_SomeVariableExpectedValues mAssert_VariableList_Scalar_Row1_Textbox_Equals_SomeVariableExpectedValues;
        
        private Assert_VariableList_Scalar_Row1_TextBox_ExistsExpectedValues mAssert_VariableList_Scalar_Row1_TextBox_ExistsExpectedValues;
        
        private Assert_VariableList_SortButton_ExistsExpectedValues mAssert_VariableList_SortButton_ExistsExpectedValues;
        
        private Assert_Web_Connectors_Exists_OnDesignSurfaceExpectedValues mAssert_Web_Connectors_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Web_Source_ExistsExpectedValues mAssert_Web_Source_ExistsExpectedValues;
        
        private Assert_WebSource_ReqTypeComboBox_ExistsExpectedValues mAssert_WebSource_ReqTypeComboBox_ExistsExpectedValues;
        
        private Assert_Workflow_Exists_OnDesignSurfaceExpectedValues mAssert_Workflow_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Write_File_Exists_OnDesignSurfaceExpectedValues mAssert_Write_File_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Write_File_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Write_File_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_XPath_Exists_OnDesignSurfaceExpectedValues mAssert_XPath_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Xpath_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Xpath_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Xpath_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Xpath_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Zip_Exists_OnDesignSurfaceExpectedValues mAssert_Zip_Exists_OnDesignSurfaceExpectedValues;
        
        private Assert_Zip_Large_View_Exists_OnDesignSurfaceExpectedValues mAssert_Zip_Large_View_Exists_OnDesignSurfaceExpectedValues;
        
        private Click_ExpandAndStepIn_NestedWorkflowParams mClick_ExpandAndStepIn_NestedWorkflowParams;
        
        private Click_Output_OnRecordset_InVariableListParams mClick_Output_OnRecordset_InVariableListParams;
        
        private Click_Output_OnVariable_InVariableListParams mClick_Output_OnVariable_InVariableListParams;
        
        private Click_Scheduler_Disable_Task_Radio_ButtonParams mClick_Scheduler_Disable_Task_Radio_ButtonParams;
        
        private Click_Scheduler_Enable_Task_Radio_ButtonParams mClick_Scheduler_Enable_Task_Radio_ButtonParams;
        
        private Click_Scheduler_RunTaskParams mClick_Scheduler_RunTaskParams;
        
        private Click_Settings_Admin_ServerPermissionsParams mClick_Settings_Admin_ServerPermissionsParams;
        
        private Click_Settings_Contribute_ResourcePermissionsParams mClick_Settings_Contribute_ResourcePermissionsParams;
        
        private Click_Settings_Contribute_ServerPermissionsParams mClick_Settings_Contribute_ServerPermissionsParams;
        
        private Click_Settings_Execute_ResourcePermissionsParams mClick_Settings_Execute_ResourcePermissionsParams;
        
        private Click_Settings_View_ResourcePermissionsParams mClick_Settings_View_ResourcePermissionsParams;
        
        private Click_Test_Connector_Calculate_OutputsParams mClick_Test_Connector_Calculate_OutputsParams;
        
        private Click_VariableList_Recordset_Row1_IsInputCheckboxParams mClick_VariableList_Recordset_Row1_IsInputCheckboxParams;
        
        private Click_VariableList_Scalar_Row1_IsInputCheckboxParams mClick_VariableList_Scalar_Row1_IsInputCheckboxParams;
        
        private Enter_RemoteServerUITestWorkflow_Into_Explorer_FilterParams mEnter_RemoteServerUITestWorkflow_Into_Explorer_FilterParams;
        
        private Enter_Servicename_As_RemoteServerUITestWorkflowParams mEnter_Servicename_As_RemoteServerUITestWorkflowParams;
        
        private Enter_Servicename_As_SomeWorkflowParams mEnter_Servicename_As_SomeWorkflowParams;
        
        private Enter_Servicename_As_TSTCIREMOTEParams mEnter_Servicename_As_TSTCIREMOTEParams;
        
        private Enter_SomeWorkflow_Into_Explorer_FilterParams mEnter_SomeWorkflow_Into_Explorer_FilterParams;
        
        private Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams mEnter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams;
        
        private Enter_TSTCIREMOTE_Into_Explorer_FilterParams mEnter_TSTCIREMOTE_Into_Explorer_FilterParams;
        
        private Enter_workflow1_Into_Explorer_FilterParams mEnter_workflow1_Into_Explorer_FilterParams;
        
        private Open_Assign_Tool_Qvi_Large_ViewParams mOpen_Assign_Tool_Qvi_Large_ViewParams;
        
        private Open_Base_Conversion_Tool_Qvi_Large_ViewParams mOpen_Base_Conversion_Tool_Qvi_Large_ViewParams;
        
        private Open_Case_Conversion_Tool_Qvi_Large_ViewParams mOpen_Case_Conversion_Tool_Qvi_Large_ViewParams;
        
        private Open_Data_Merge_Tool_Qvi_Large_ViewParams mOpen_Data_Merge_Tool_Qvi_Large_ViewParams;
        
        private Open_Data_Split_Tool_Qvi_Large_ViewParams mOpen_Data_Split_Tool_Qvi_Large_ViewParams;
        
        private Open_Json_Tool_Qvi_Large_ViewParams mOpen_Json_Tool_Qvi_Large_ViewParams;
        
        private Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams mOpen_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams;
        
        private Open_System_Information_Tool_Qvi_Large_ViewParams mOpen_System_Information_Tool_Qvi_Large_ViewParams;
        
        private Open_Xpath_Tool_Qvi_Large_ViewParams mOpen_Xpath_Tool_Qvi_Large_ViewParams;
        
        private PressF11_EnterFullScreenParams mPressF11_EnterFullScreenParams;
        
        private Type_S_Into_DebugInput_Row1_InputDataParams mType_S_Into_DebugInput_Row1_InputDataParams;
        
        private Type_tstci_into_Server_Source_Wizard_Address_TextboxParams mType_tstci_into_Server_Source_Wizard_Address_TextboxParams;
        
        private Assert_TSTCIREMOTEConnected_Exists_In_ExplorerRemoteServerDropdownListExpectedValues mAssert_TSTCIREMOTEConnected_Exists_In_ExplorerRemoteServerDropdownListExpectedValues;
        
        private MainStudioWindow mMainStudioWindow;
        
        private MessageBoxWindow mMessageBoxWindow;
        
        private SaveDialogWindow mSaveDialogWindow;
        
        private SplashPageWindow mSplashPageWindow;
        
        private DecisionDialog mDecisionDialog;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Assign_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Assign_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfMultiAssignActivity' custom control equals 'True'
        /// </summary>
        public bool MultiAssignExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Assign_Large_View_Row1_Variable_Textbox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Assign_Large_View_Row1_Variable_Textbox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Row1_FieldName_AutoID' text box equals 'True'
        /// </summary>
        public bool TextBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Assign_Large_View_Row1_Variable_Textbox_Text_Equals_SomeVariable'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Assign_Large_View_Row1_Variable_Textbox_Text_Equals_SomeVariableExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'UI__Row1_FieldName_AutoID' text box equals '[[SomeVariable]]'
        /// </summary>
        public string TextBoxText = "[[SomeVariable]]";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Assign_Object_Large_View_on_the_Design_Surface_Add_Row_Message_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Assign_Object_Large_View_on_the_Design_Surface_Add_Row_Message_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Type in the empty rows to add new rows.' label equals 'True'
        /// </summary>
        public bool AddRowsMessageExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Assign_Object_Large_View_on_the_Design_Surface_Insert_Delete_Row_Message_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Assign_Object_Large_View_on_the_Design_Surface_Insert_Delete_Row_Message_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Right click to insert or delete rows.' label equals 'True'
        /// </summary>
        public bool InsertDeleteRowsMessageExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Assign_Object_Large_View_Row1_Value_Textbox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Assign_Object_Large_View_Row1_Value_Textbox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Row1_FieldValue_AutoID' text box equals 'True'
        /// </summary>
        public bool ValueTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Assign_Object_Large_View_Row1_Variable_Textbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Assign_Object_Large_View_Row1_Variable_TextboxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Row1_FieldName_AutoID' text box equals 'True'
        /// </summary>
        public bool VariableTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Assign_Object_Large_View_Row2_Value_Textbox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Assign_Object_Large_View_Row2_Value_Textbox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Row2_FieldValue_AutoID' text box equals 'True'
        /// </summary>
        public bool ValueTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Assign_Object_Large_View_Row2_Variable_Textbox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Assign_Object_Large_View_Row2_Variable_Textbox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Row2_FieldName_AutoID' text box equals 'True'
        /// </summary>
        public bool VariableTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Assign_Object_Row2_Value_Textbox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Assign_Object_Row2_Value_Textbox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Row2_FieldValue_AutoID' text box equals 'True'
        /// </summary>
        public bool ValueTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Assign_Object_Row2_Variable_Textbox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Assign_Object_Row2_Variable_Textbox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_TextBox_AutoID' text box equals 'True'
        /// </summary>
        public bool VariableTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Assign_Object_Small_View_Exists_On_Design_Surface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Assign_Object_Small_View_Exists_On_Design_SurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfMultiAssignObjectActivity' custom control equals 'True'
        /// </summary>
        public bool AssignObjectExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Assign_Object_Small_View_Row1_Value_Textbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Assign_Object_Small_View_Row1_Value_TextboxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Row1_FieldValue_AutoID' text box equals 'True'
        /// </summary>
        public bool ValueTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Assign_Object_Small_View_Row1_Variable_Textbox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Assign_Object_Small_View_Row1_Variable_Textbox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '[[Variable1]]' label equals 'True'
        /// </summary>
        public bool VariableTextboxFloatingTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Assign_QVI_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Assign_QVI_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'QuickVariableInputContent' custom control equals 'True'
        /// </summary>
        public bool QuickVariableInputContentExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Assign_Small_View_Row1_Variable_Textbox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Assign_Small_View_Row1_Variable_Textbox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_TextBox_AutoID' text box equals 'True'
        /// </summary>
        public bool TextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Assign_Small_View_Row1_Variable_Textbox_Text_is_SomeVariable'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Assign_Small_View_Row1_Variable_Textbox_Text_is_SomeVariableExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'UI_TextBox_AutoID' text box equals '[[SomeVariable]]'
        /// </summary>
        public string TextboxText = "[[SomeVariable]]";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Base_Conversion_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Base_Conversion_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfBaseConvertActivity' custom control equals 'True'
        /// </summary>
        public bool BaseConvertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Base_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfBaseConvertActivity' custom control equals 'True'
        /// </summary>
        public bool BaseConvertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Calculate_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Calculate_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCalculateActivity' custom control equals 'True'
        /// </summary>
        public bool CalculateExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Case_Conversion_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Case_Conversion_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCaseConvertActivity' custom control equals 'True'
        /// </summary>
        public bool CaseConvertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Case_Conversion_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCaseConvertActivity' custom control equals 'True'
        /// </summary>
        public bool CaseConvertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Close_Button_Exists_TopRibbon'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Close_Button_Exists_TopRibbonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool CloseStudioButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Close_Tab_Button_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Close_Tab_Button_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'closeBtn' custom control equals 'True'
        /// </summary>
        public bool CloseButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_CMD_Line_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_CMD_Line_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfExecuteCommandLineActivity' custom control equals 'True'
        /// </summary>
        public bool ExecuteCommandLineExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_CMD_Line_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_CMD_Line_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfExecuteCommandLineActivity' custom control equals 'True'
        /// </summary>
        public bool ExecuteCommandLineExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Comment_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Comment_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCommentActivity' custom control equals 'True'
        /// </summary>
        public bool CommentExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Connect_button_Destination_Server_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Connect_button_Destination_Server_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_DestinationServerConnectbtn_AutoID' button equals 'True'
        /// </summary>
        public bool ConnectDestinationButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Connect_Button_Source_Server_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Connect_Button_Source_Server_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_SourceConnectServerbtn_AutoID' button equals 'True'
        /// </summary>
        public bool SourceConnectButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Connect_ConnectControl_Button_Exists_InExplorer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Connect_ConnectControl_Button_Exists_InExplorerExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_ConnectServerBtn_AutoID' button equals 'True'
        /// </summary>
        public bool ConnectServerButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Connect_Control_DestinationServer_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Connect_Control_DestinationServer_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'ToggleButton' button equals 'True'
        /// </summary>
        public bool ConnectControlDestinationExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Connect_Control_Exists_InExplorer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Connect_Control_Exists_InExplorerExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'ToggleButton' button equals 'True'
        /// </summary>
        public bool ServerListComboBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Connect_Control_SourceServer_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Connect_Control_SourceServer_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SourceConnectControl' custom control equals 'True'
        /// </summary>
        public bool SourceConnectControlExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Copy_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Copy_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathCopy' custom control equals 'True'
        /// </summary>
        public bool PathCopyExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Copy_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Copy_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathCopy' custom control equals 'True'
        /// </summary>
        public bool PathCopyExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Count_Records_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Count_Records_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCountRecordsetActivity' custom control equals 'True'
        /// </summary>
        public bool CountRecordsetExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Create_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Create_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathCreate' custom control equals 'True'
        /// </summary>
        public bool PathCreateExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Create_JSON_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Create_JSON_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
        /// </summary>
        public bool CreateJsonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Create_Path_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Create_Path_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathCreate' custom control equals 'True'
        /// </summary>
        public bool PathCreateExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Data_Connector_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Data_Connector_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDatabaseActivity' custom control equals 'True'
        /// </summary>
        public bool DatabaseConnectorExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Data_Merge_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Data_Merge_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
        /// </summary>
        public bool DataMergeExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Data_Merge_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Data_Merge_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
        /// </summary>
        public bool DataMergeExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Data_Merge_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataMergeActivity' custom control equals 'True'
        /// </summary>
        public bool DataMergeExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Data_Split_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Data_Split_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
        /// </summary>
        public bool DataSplitExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Data_Split_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Data_Split_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
        /// </summary>
        public bool DataSplitExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Data_Split_Qvi_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Data_Split_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDataSplitActivity' custom control equals 'True'
        /// </summary>
        public bool DataSplitExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Database_Source_Dropdownlist_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Database_Source_Dropdownlist_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SourcesComboBox' custom control equals 'True'
        /// </summary>
        public bool SourcesComboBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Database_Source_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Database_Source_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Create a new database source' button equals 'True'
        /// </summary>
        public bool DatabaseSourceButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Date_And_Time_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Date_And_Time_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDateTimeActivity' custom control equals 'True'
        /// </summary>
        public bool DateTimeExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DateTime_Difference_Conversion_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_DateTime_Difference_Conversion_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDateTimeDifferenceActivity' custom control equals 'True'
        /// </summary>
        public bool DateTimeDifferenceExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugInput_CancelButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_DebugInput_CancelButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Cancel' button equals 'True'
        /// </summary>
        public bool CancelButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugInput_DebugButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_DebugInput_DebugButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Debug (F6)' button equals 'True'
        /// </summary>
        public bool DebugF6ButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugInput_InputData_Field_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_DebugInput_InputData_Field_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'rec(1).set' label equals 'True'
        /// </summary>
        public bool UIRec1setTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugInput_InputData_Window_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_DebugInput_InputData_Window_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DataListInputs' table equals 'True'
        /// </summary>
        public bool DataListInputsTableExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugInput_Json_Tab_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_DebugInput_Json_Tab_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'JSON' tab equals 'True'
        /// </summary>
        public bool JSONTabExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugInput_Json_Window_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_DebugInput_Json_Window_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_JsonEditor_AutoID' custom control equals 'True'
        /// </summary>
        public bool JSONWindowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugInput_RememberCheckbox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_DebugInput_RememberCheckbox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Remember Debug Inputs' check box equals 'True'
        /// </summary>
        public bool RememberDebugInputCheckBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugInput_ViewInBrowser_Button_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_DebugInput_ViewInBrowser_Button_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'View In Browser (F7)' button equals 'True'
        /// </summary>
        public bool ViewInBrowserF7ButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugInput_Window_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_DebugInput_Window_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Wpf' window equals 'True'
        /// </summary>
        public bool DebugInputDialogExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugInput_Xml_Tab_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_DebugInput_Xml_Tab_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'XML' tab equals 'True'
        /// </summary>
        public bool XMLTabExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugInput_Xml_Window_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_DebugInput_Xml_Window_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_XMLEditor_AutoID' custom control equals 'True'
        /// </summary>
        public bool XMLWindowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugOutput_Contains_SomeVariable'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_DebugOutput_Contains_SomeVariableExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '[[SomeVariable]]' label equals '[[SomeVariable]]'
        /// </summary>
        public string VariableTextboxDisplayText = "[[SomeVariable]]";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugOutput_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_DebugOutput_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'OUTPUT' custom control equals 'True'
        /// </summary>
        public bool DebugOutputExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'OUTPUT' custom control equals 'True'
        /// </summary>
        public bool DebugOutputExists1 = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugOutput_ExpandCollapseButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_DebugOutput_ExpandCollapseButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '+' button equals 'True'
        /// </summary>
        public bool ExpandCollapseButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugOutput_FilterTextbox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_DebugOutput_FilterTextbox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
        /// </summary>
        public bool SearchTextBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugOutput_ResultsTree_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_DebugOutput_ResultsTree_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DebugOutputTree' tree equals 'True'
        /// </summary>
        public bool DebugOutputTreeExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DebugOutput_SettingsButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_DebugOutput_SettingsButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool SettingsButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Decision_Dialog_Done_Button_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Decision_Dialog_Done_Button_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Decision_Dialog_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Decision_Dialog_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Wpf' window equals 'True'
        /// </summary>
        public bool DecisionDialogExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Decision_Exists_In_The_Toolbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Decision_Exists_In_The_ToolboxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Decision' image equals 'True'
        /// </summary>
        public bool DecisionImageExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Decision_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Decision_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'FlowDecision' custom control equals 'True'
        /// </summary>
        public bool DecisionExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Delete_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Delete_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathDelete' custom control equals 'True'
        /// </summary>
        public bool PathDeleteExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Delete_Record_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Delete_Record_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDeleteRecordActivity' custom control equals 'True'
        /// </summary>
        public bool DeleteRecordExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Deploy_Destination_Server_Edit_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Deploy_Destination_Server_Edit_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '...' button equals 'True'
        /// </summary>
        public bool EditSourceButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Deploy_Ribbon_Button_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Deploy_Ribbon_Button_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Move resources between Warewolf servers' button equals 'True'
        /// </summary>
        public bool DeployButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DeployButton_DestinationServer_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_DeployButton_DestinationServer_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Deploy' button equals 'True'
        /// </summary>
        public bool DeployButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Display_Name_Exists_On_Assign_Object_Small_View_On_The_Design_Surface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Display_Name_Exists_On_Assign_Object_Small_View_On_The_Design_SurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DisplayName' text box equals 'True'
        /// </summary>
        public bool DisplayNameTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Display_Name_Exists_On_Data_Merge_Small_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Display_Name_Exists_On_Data_Merge_Small_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'DisplayName' text box equals 'Edit'
        /// </summary>
        public string DisplayNameControlType = "Edit";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Done_Button_Exists_On_Assign_Object_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Done_Button_Exists_On_Assign_Object_Large_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Done_Button_Exists_On_Data_Merge_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Done_Button_Exists_On_Data_Merge_Large_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Done' button equals 'True'
        /// </summary>
        public bool DoneButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_DotNet_DLL_Connector_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_DotNet_DLL_Connector_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDotNetDllActivity' custom control equals 'True'
        /// </summary>
        public bool DotNetDllExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Dropbox_Download_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Dropbox_Download_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDropBoxFileActivity' custom control equals 'True'
        /// </summary>
        public bool DropBox_DOWNLOADExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Dropbox_Upload_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Dropbox_Upload_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfDropBoxFileActivity' custom control equals 'True'
        /// </summary>
        public bool DropBox_UPLOADExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Edit_Button_Destination_Server_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Edit_Button_Destination_Server_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '...' button equals 'True'
        /// </summary>
        public bool EditDestinationButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Email_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Email_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSendEmailActivity' custom control equals 'True'
        /// </summary>
        public bool SendEmailExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Email_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Email_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSendEmailActivity' custom control equals 'True'
        /// </summary>
        public bool SendEmailExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_end_this_workflow_checkbox_exists_on_Assign_Object_large_view'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_end_this_workflow_checkbox_exists_on_Assign_Object_large_viewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'End this workflow' check box equals 'True'
        /// </summary>
        public bool EndthisworkflowCheckBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Error_Variable_Textbox_Exists_On_Assign_Object_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Error_Variable_Textbox_Exists_On_Assign_Object_Large_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Variable_AutoID' text box equals 'True'
        /// </summary>
        public bool ErrorVariableExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Explorer_Edit_Connect_Control_Button_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Explorer_Edit_Connect_Control_Button_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '...' button equals 'True'
        /// </summary>
        public bool EditServerButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Explorer_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Explorer_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_ExplorerControl_AutoID' custom control equals 'True'
        /// </summary>
        public bool ExplorerExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Explorer_Filter_Textbox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Explorer_Filter_Textbox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
        /// </summary>
        public bool SearchTextBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Explorer_Remote_Server_DropdownList_Contains_NewRemoteServer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Explorer_Remote_Server_DropdownList_Contains_NewRemoteServerExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'New Remote Server...' custom control equals 'True'
        /// </summary>
        public bool NewRemoteServerListItemExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Explorer_Remote_Server_DropdownList_Contains_TSTCIREMOTE'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Explorer_Remote_Server_DropdownList_Contains_TSTCIREMOTEExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'TSTCIREMOTE' label equals 'True'
        /// </summary>
        public bool ComboboxListItemAsTSTCIREMOTEExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Explorer_Remote_Server_DropdownList_Does_Not_Contain_TSTCIREMOTE'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Explorer_Remote_Server_DropdownList_Does_Not_Contain_TSTCIREMOTEExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'TSTCIREMOTE' label equals 'False'
        /// </summary>
        public bool ComboboxListItemAsTSTCIREMOTEExists = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Explorer_Remote_Server_DropdownList_Has_localhost_Selected'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Explorer_Remote_Server_DropdownList_Has_localhost_SelectedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'localhost' label equals 'TSTCIREMOTE'
        /// </summary>
        public string SelectedItemAsLocalhostDisplayText = "TSTCIREMOTE";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Explorer_Remote_Server_DropdownList_Has_TSTCIREMOTE_Selected'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Explorer_Remote_Server_DropdownList_Has_TSTCIREMOTE_SelectedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'TSTCIREMOTE' label equals 'TSTCIREMOTE'
        /// </summary>
        public string SelectedItemAsTSTCIREMOTEDisplayText = "TSTCIREMOTE";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Explorer_ServerName_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Explorer_ServerName_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' -> 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
        /// </summary>
        public bool ExplorerTreeItemChildExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_ExplorerContextMenu_Delete_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_ExplorerContextMenu_Delete_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Delete' menu item equals 'True'
        /// </summary>
        public bool DeleteExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Filter_Source_Server_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Filter_Source_Server_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Filter' label equals 'True'
        /// </summary>
        public bool FilterTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Find_Index_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Find_Index_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfIndexActivity' custom control equals 'True'
        /// </summary>
        public bool FindIndexExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Find_Record_Index_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Find_Record_Index_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFindRecordsMultipleCriteriaActivity' custom control equals 'True'
        /// </summary>
        public bool FindRecordsIndexExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Find_Record_index_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Find_Record_index_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFindRecordsMultipleCriteriaActivity' custom control equals 'True'
        /// </summary>
        public bool FindRecordsIndexExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_For_Each_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_For_Each_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfForEachActivity' custom control equals 'True'
        /// </summary>
        public bool ForEachExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Format_Number_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Format_Number_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfNumberFormatActivity' custom control equals 'True'
        /// </summary>
        public bool FormatNumberExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_FullScreen_Button_Exists_TopRibbon'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_FullScreen_Button_Exists_TopRibbonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool MaximizeRestoreStudioButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Generic_Context_Menu_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Generic_Context_Menu_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of popup menu equals 'True'
        /// </summary>
        public bool GenericContextMenuExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_GetWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfWebGetActivity' custom control equals 'True'
        /// </summary>
        public bool WebGetExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_GetWeb_RequestTool_small_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_GetWeb_RequestTool_small_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfWebGetActivity' custom control equals 'True'
        /// </summary>
        public bool WebGetExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_InputData_Tab_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_InputData_Tab_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Input Data' tab equals 'True'
        /// </summary>
        public bool InputDataTabExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Json_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Json_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
        /// </summary>
        public bool CreateJsonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Json_Qvi_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Json_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfCreateJsonActivity' custom control equals 'True'
        /// </summary>
        public bool CreateJsonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Length_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Length_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfRecordsetLengthActivity' custom control equals 'True'
        /// </summary>
        public bool LengthExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_LockAndUnlock_Button_Exists_TopRibbon'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_LockAndUnlock_Button_Exists_TopRibbonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool LockStudioButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_MainStudioWindow_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_MainStudioWindow_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Warewolf' window equals 'True'
        /// </summary>
        public bool MainStudioWindowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Maximize_Button_Exists_TopRibbon'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Maximize_Button_Exists_TopRibbonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool MaximizeStudioButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_MessageBox_Does_Not_Exist'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_MessageBox_Does_Not_ExistExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'WarewolfMessageBox' window equals 'False'
        /// </summary>
        public bool MessageBoxWindowExists = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_MessageBox_No_Button_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_MessageBox_No_Button_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'No' button equals 'True'
        /// </summary>
        public bool NoButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_MessageBox_Yes_Button_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_MessageBox_Yes_Button_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Yes' button equals 'True'
        /// </summary>
        public bool YesButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Minimize_Button_Exists_TopRibbon'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Minimize_Button_Exists_TopRibbonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool MinimizeStudioButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Move_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Move_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathMove' custom control equals 'True'
        /// </summary>
        public bool PathMoveExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Move_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Move_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathMove' custom control equals 'True'
        /// </summary>
        public bool PathMoveExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_MultiAssign_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_MultiAssign_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfMultiAssignActivity' custom control equals 'True'
        /// </summary>
        public bool MultiAssignExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Mysql_Database_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Mysql_Database_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfMySqlDatabaseActivity' custom control equals 'True'
        /// </summary>
        public bool MySqlDatabaseExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_New_Workflow_Context_Menu_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_New_Workflow_Context_Menu_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of popup menu equals 'True'
        /// </summary>
        public bool GenericContextMenuExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_NewResource_Count_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_NewResource_Count_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of link equals 'True'
        /// </summary>
        public bool NewResourceHyperlinkExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_NewResource_Label_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_NewResource_Label_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'New Resources' label equals 'True'
        /// </summary>
        public bool NewResourcesTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_NewWorkFlow_RibbonButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_NewWorkFlow_RibbonButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' label equals 'True'
        /// </summary>
        public bool NewWorkflowIconExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_OnError_End_this_workflow_Checkbox_Exists_On_Data_Merge_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_OnError_End_this_workflow_Checkbox_Exists_On_Data_Merge_Large_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'End this workflow' check box equals 'True'
        /// </summary>
        public bool EndthisworkflowCheckBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_OnError_Variable_Textbox_Exists_On_Data_Merge_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_OnError_Variable_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Variable_AutoID' text box equals 'True'
        /// </summary>
        public bool VariableTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_OnError_WebService_Textbox_Exists_On_Assign_Object_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_OnError_WebService_Textbox_Exists_On_Assign_Object_Large_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Workflow_AutoID' text box equals 'True'
        /// </summary>
        public bool ErrorWebserviceExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Override_Count_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Override_Count_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of link equals 'True'
        /// </summary>
        public bool OverrideHyperlinkExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Override_Label_DestinationServer_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Override_Label_DestinationServer_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Override' label equals 'True'
        /// </summary>
        public bool OverrideTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Plugin_Connector_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Plugin_Connector_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPluginActivity' custom control equals 'True'
        /// </summary>
        public bool PluginConnectorExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Plugin_Source_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Plugin_Source_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Create a new plugin source' button equals 'True'
        /// </summary>
        public bool PluginSourceButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Position_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Position_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'PART_FilesMenuItem' menu item equals 'True'
        /// </summary>
        public bool PositionButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_PostWeb_RequestTool_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfWebPostActivity' custom control equals 'True'
        /// </summary>
        public bool WebPostExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_PostWeb_RequestTool_Small_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfWebPostActivity' custom control equals 'True'
        /// </summary>
        public bool WebPostExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_QVI_Button_Exists_on_Assign_Object_Small_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_QVI_Button_Exists_on_Assign_Object_Small_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Open Quick Variable Input' toggle button equals 'True'
        /// </summary>
        public bool OpenQuickVariableInputExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_QVI_Toggle_Button_Exists_On_Data_Merge_Small_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_QVI_Toggle_Button_Exists_On_Data_Merge_Small_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Open Quick Variable Input' toggle button equals 'True'
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Random_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Random_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfRandomActivity' custom control equals 'True'
        /// </summary>
        public bool RandomExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Read_File_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Read_File_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFileRead' custom control equals 'True'
        /// </summary>
        public bool FileReadExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Read_File_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Read_File_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFileRead' custom control equals 'True'
        /// </summary>
        public bool FileReadExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Read_Folder_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Read_Folder_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFolderRead' custom control equals 'True'
        /// </summary>
        public bool FolderReadExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Read_Folder_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Read_Folder_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFolderRead' custom control equals 'True'
        /// </summary>
        public bool FolderReadExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Refresh_Button_Exists_InExplorer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Refresh_Button_Exists_InExplorerExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool ExplorerRefreshButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Refresh_Button_Source_Server_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Refresh_Button_Source_Server_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool RefreshSourceServerButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Rename_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Rename_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathRename' custom control equals 'True'
        /// </summary>
        public bool PathRenameExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Rename_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Rename_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfPathRename' custom control equals 'True'
        /// </summary>
        public bool PathRenameExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Replace_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Replace_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfReplaceActivity' custom control equals 'True'
        /// </summary>
        public bool ReplaceExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Result_Textbox_Exists_On_Data_Merge_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Result_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' text box equals 'True'
        /// </summary>
        public bool ResultTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Result_Textbox_Exists_On_Data_Merge_Small_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Result_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Resulttxt_AutoID' text box equals 'True'
        /// </summary>
        public bool ResultTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Row1_Align_Combobox_Exists_On_Data_Merge_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Row1_Align_Combobox_Exists_On_Data_Merge_Large_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Padding_Row1_AutoID' text box equals 'True'
        /// </summary>
        public bool PaddingTextboxExists = true;
        
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Row1_Alignment_AutoID' combo box equals 'True'
        /// </summary>
        public bool AlignComboboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Row1_Combobox_Exists_On_Data_Merge_Small_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Row1_Combobox_Exists_On_Data_Merge_Small_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Row1_MergeType_AutoID' combo box equals 'True'
        /// </summary>
        public bool Row1TypeComboboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Row1_Index_Textbox_Exists_On_Data_Merge_Small_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Row1_Index_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__At_Row1_AutoID' text box equals 'True'
        /// </summary>
        public bool Row1IndexTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Row1_Input_Textbox_Exists_On_Data_Merge_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Row1_Input_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '[[Recordset().F1]]' label equals 'True'
        /// </summary>
        public bool InputFloatingTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Row1_Recordset_Textbox_Exists_On_Data_Merge_Small_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Row1_Recordset_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '[[Recordset().F1]]' label equals 'True'
        /// </summary>
        public bool InputFloatingTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Row1_Using_Textbox_Exists_On_Data_Merge_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Row1_Using_Textbox_Exists_On_Data_Merge_Large_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__At_Row1_AutoID' text box equals 'True'
        /// </summary>
        public bool UsingTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Row1_With_Combobox_Exists_On_Data_Merge_large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Row1_With_Combobox_Exists_On_Data_Merge_large_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Row1_MergeType_AutoID' combo box equals 'True'
        /// </summary>
        public bool WidthComboboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Row2_Combobox_Exists_On_Data_Merge_Small_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Row2_Combobox_Exists_On_Data_Merge_Small_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Row2_MergeType_AutoID' combo box equals 'True'
        /// </summary>
        public bool Row2TypeComboboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Row2_Index_Textbox_Exists_On_Data_Merge_Small_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Row2_Index_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__At_Row2_AutoID' text box equals 'True'
        /// </summary>
        public bool Row2IndexTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Row2_Recordset_Textbox_Exists_On_Data_Merge_Small_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Row2_Recordset_Textbox_Exists_On_Data_Merge_Small_ViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI__Row2_InputVariable_AutoID' text box equals 'True'
        /// </summary>
        public bool Row2InputTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Save_Ribbon_Button_Enabled'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Save_Ribbon_Button_EnabledExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Save this tab' button equals 'True'
        /// </summary>
        public bool SaveButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Save_Ribbon_Button_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Save_Ribbon_Button_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Save this tab' button equals 'True'
        /// </summary>
        public bool SaveButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_CancelButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_SaveDialog_CancelButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Cancel' button equals 'True'
        /// </summary>
        public bool CancelButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_ErrorLabel_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_SaveDialog_ErrorLabel_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of ''Name' cannot be empty.' label equals 'True'
        /// </summary>
        public bool ErrorLabelExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_SaveDialog_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SaveDialogView' window equals 'True'
        /// </summary>
        public bool SaveDialogWindowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_ExplorerTree_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_SaveDialog_ExplorerTree_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'ExplorerTree' tree equals 'True'
        /// </summary>
        public bool ExplorerTreeExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_ExplorerTreeItem_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_SaveDialog_ExplorerTreeItem_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
        /// </summary>
        public bool ExplorerTreeItemExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_ExplorerView_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_SaveDialog_ExplorerView_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'ExplorerView' custom control equals 'True'
        /// </summary>
        public bool ExplorerViewExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_FilterTextbox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_SaveDialog_FilterTextbox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
        /// </summary>
        public bool SearchTextBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_NameLabel_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_SaveDialog_NameLabel_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Name:' label equals 'True'
        /// </summary>
        public bool NameLabelExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_RefreshButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_SaveDialog_RefreshButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool RefreshButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_SaveButton_Enabled'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_SaveDialog_SaveButton_EnabledExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'Save' button equals 'True'
        /// </summary>
        public bool SaveButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_SaveButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_SaveDialog_SaveButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Save' button equals 'True'
        /// </summary>
        public bool SaveButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_ServiceName_Textbox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_SaveDialog_ServiceName_Textbox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'ServiceNameTextBox' text box equals 'True'
        /// </summary>
        public bool ServiceNameTextBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SaveDialog_WorkspaceName_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_SaveDialog_WorkspaceName_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Unsaved 1' label equals 'True'
        /// </summary>
        public bool WorkspaceNameExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_ConncectControl_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_ConncectControl_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_SettingsServerComboBox_AutoID' combo box equals 'True'
        /// </summary>
        public bool ServerComboBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_ConnectButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_ConnectButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_SettingsServerConnectButton_AutoID' button equals 'True'
        /// </summary>
        public bool ConnectServerButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_ConnectControl_Edit_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_ConnectControl_Edit_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '...' button equals 'True'
        /// </summary>
        public bool EditServerButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_CreateNewTask_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_CreateNewTask_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of first button next to '' button equals 'True'
        /// </summary>
        public bool NewTaskButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_DeleteButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_DeleteButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '...' button equals 'True'
        /// </summary>
        public bool DeleteTaskButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_DisabledRadioButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_DisabledRadioButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Disabled' radio button equals 'True'
        /// </summary>
        public bool DisabledRadioButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_EditTrigger_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_EditTrigger_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool EditTriggerButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_EnabledRadioButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_EnabledRadioButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Enabled' radio button equals 'True'
        /// </summary>
        public bool EnabledRadioButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_ErrorMessage_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_ErrorMessage_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Please select a workflow to schedule' label equals 'True'
        /// </summary>
        public bool ErrorMessageTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_HistoryInput_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_HistoryInput_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_NumOfHisTextBox' text box equals 'True'
        /// </summary>
        public bool NumOfHistoryTextBoxEditExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_HistoryLabel_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_HistoryLabel_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Number of History records to load (0 = all)' label equals 'True'
        /// </summary>
        public bool NumberofHistoryTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_HistoryTable_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_HistoryTable_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of table equals 'True'
        /// </summary>
        public bool HistoryTableExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_NameInput_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_NameInput_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_NameTextbox' text box equals 'True'
        /// </summary>
        public bool NameTextboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_NameLabel_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_NameLabel_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Name' label equals 'True'
        /// </summary>
        public bool NameTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_PasswordInput_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_PasswordInput_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_PasswordBox' text box equals 'True'
        /// </summary>
        public bool PasswordTextBoxEditExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_PasswordLabel_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_PasswordLabel_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Password' label equals 'True'
        /// </summary>
        public bool PasswordTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_ResourcePicker_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_ResourcePicker_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '...' button equals 'True'
        /// </summary>
        public bool ResourcePickerButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_RunTask_Checkbox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_RunTask_Checkbox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Run task as soon as possible after a scheduled sta...' check box equals 'True'
        /// </summary>
        public bool RunTaskCheckBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_Status_RadioButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_Status_RadioButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of check box equals 'True'
        /// </summary>
        public bool StatusCheckboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_StatusLabe_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_StatusLabe_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Status' label equals 'True'
        /// </summary>
        public bool StatusTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_TriggerLabel_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_TriggerLabel_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Triggered at' label equals 'True'
        /// </summary>
        public bool TriggerTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_TriggerValue_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_TriggerValue_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'At 2:40 PM every day' label equals 'True'
        /// </summary>
        public bool TriggerValueTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_UserAccountLabel_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_UserAccountLabel_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Run as the following user account' label equals 'True'
        /// </summary>
        public bool UIRunasthefollowinguseTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_UsernameInput_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_UsernameInput_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_UserNameTextBox' text box equals 'True'
        /// </summary>
        public bool UserNameTextBoxEditExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_Usernamelabel_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_Usernamelabel_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Username' label equals 'True'
        /// </summary>
        public bool UsernameTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_WorkflowInput_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_WorkflowInput_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_WorkflowNameTextBox_AutoID' text box equals 'True'
        /// </summary>
        public bool WorkflowNameTextBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Scheduler_WorkflowLabel_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Scheduler_WorkflowLabel_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Workflow' label equals 'True'
        /// </summary>
        public bool WorkflowTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Script_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Script_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfScriptingActivity' custom control equals 'True'
        /// </summary>
        public bool ScriptingExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sequence_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Sequence_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSequenceActivity' custom control equals 'True'
        /// </summary>
        public bool SequenceExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Server_Source_Wizard_Address_Protocol_Dropdown_Contains_Http'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Server_Source_Wizard_Address_Protocol_Dropdown_Contains_HttpExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'http' custom control equals 'True'
        /// </summary>
        public bool ComboboxListItemAsHttpExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Server_Source_Wizard_Address_Protocol_Dropdown_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Server_Source_Wizard_Address_Protocol_Dropdown_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'ToggleButton' button equals 'True'
        /// </summary>
        public bool ToggleDropdownExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Server_Source_Wizard_Address_Protocol_Equals_Http'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Server_Source_Wizard_Address_Protocol_Equals_HttpExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'http' label equals 'http'
        /// </summary>
        public string HttpSelectedItemTextDisplayText = "http";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Server_Source_Wizard_Address_Textbox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Server_Source_Wizard_Address_Textbox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Text' text box equals 'True'
        /// </summary>
        public bool AddressEditBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Server_Source_Wizard_Address_Textbox_Text_Equals_TSTCIREMOTE'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Server_Source_Wizard_Address_Textbox_Text_Equals_TSTCIREMOTEExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Text' text box equals 'TST-CI-REMOTE'
        /// </summary>
        public string AddressEditBoxText = "TST-CI-REMOTE";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Server_Source_Wizard_DropdownList_Contains_TSTCIREMOTE'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Server_Source_Wizard_DropdownList_Contains_TSTCIREMOTEExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'TST-CI-REMOTE' list item equals 'True'
        /// </summary>
        public bool TSTCIREMOTEExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Server_Source_Wizard_Test_Connection_Button_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Server_Source_Wizard_Test_Connection_Button_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Test Connection' button equals 'True'
        /// </summary>
        public bool TestConnectionButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Server_Source_Wizard_Test_Passed'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Server_Source_Wizard_Test_PassedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'TestErrorText' label equals 'Passed'
        /// </summary>
        public string ErrorTextDisplayText = "Passed";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Server_Version_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Server_Version_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SplashPage' window equals 'True'
        /// </summary>
        public bool SplashPageWindowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Service_Picker_Cancel_Button_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Service_Picker_Cancel_Button_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Cancel' button equals 'True'
        /// </summary>
        public bool CancelExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Service_Picker_Dialog_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Service_Picker_Dialog_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Wpf' window equals 'True'
        /// </summary>
        public bool ServicePickerDialogExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_ServiceLabel_DestinationServer_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_ServiceLabel_DestinationServer_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Services' label equals 'True'
        /// </summary>
        public bool ServicesTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_ServicesCount_Label_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_ServicesCount_Label_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '0' label equals 'True'
        /// </summary>
        public bool ServiceCountTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Settings_ConnectButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Settings_ConnectButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_SettingsServerConnectButton_AutoID' button equals 'True'
        /// </summary>
        public bool ConnectServerButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Settings_ConnectControl_Edit_Button_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Settings_ConnectControl_Edit_Button_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '...' button equals 'True'
        /// </summary>
        public bool EditServerButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Settings_ConnectControl_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Settings_ConnectControl_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_SettingsServerComboBox_AutoID' combo box equals 'True'
        /// </summary>
        public bool SettingsServerComboBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Settings_LoggingTab_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Settings_LoggingTab_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'System.Windows.Controls.TabItem Header: Content:' tab equals 'True'
        /// </summary>
        public bool LoggingTabExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Settings_ResourcePermissions_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Settings_ResourcePermissions_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'ResourcePermissionsDataGrid' table equals 'True'
        /// </summary>
        public bool ResourcePermissionsExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Settings_SecurityTab_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Settings_SecurityTab_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'System.Windows.Controls.TabItem Header: Content:' tab equals 'True'
        /// </summary>
        public bool SecurityTabExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Settings_ServerPermissions_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Settings_ServerPermissions_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'ServerPermissionsDataGrid' table equals 'True'
        /// </summary>
        public bool ServerPermissionsExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sharepoint_Create_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Sharepoint_Create_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SharepointCreateListItemActivity' custom control equals 'True'
        /// </summary>
        public bool SharepointCreateExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sharepoint_Create_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Sharepoint_Create_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SharepointCreateListItemActivity' custom control equals 'True'
        /// </summary>
        public bool SharepointCreateExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sharepoint_Delete_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Sharepoint_Delete_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SharepointDeleteListItemActivity' custom control equals 'True'
        /// </summary>
        public bool SharepointDeleteExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sharepoint_Delete_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Sharepoint_Delete_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SharepointDeleteListItemActivity' custom control equals 'True'
        /// </summary>
        public bool SharepointDeleteExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sharepoint_Read_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Sharepoint_Read_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SharepointReadListActivity' custom control equals 'True'
        /// </summary>
        public bool SharepointReadExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sharepoint_Read_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Sharepoint_Read_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SharepointReadListActivity' custom control equals 'True'
        /// </summary>
        public bool SharepointReadExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sharepoint_Update_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Sharepoint_Update_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SharepointUpdateListItemActivity' custom control equals 'True'
        /// </summary>
        public bool SharepointUpdateExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sharepoint_Update_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Sharepoint_Update_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SharepointUpdateListItemActivity' custom control equals 'True'
        /// </summary>
        public bool SharepointUpdateExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_ShowDependencies_Button_DestinationServer_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_ShowDependencies_Button_DestinationServer_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Select All Dependencies' button equals 'True'
        /// </summary>
        public bool ShowDependenciesButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sort_Records_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Sort_Records_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSortRecordsActivity' custom control equals 'True'
        /// </summary>
        public bool SortRecordsExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Source_Server_Name_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Source_Server_Name_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Infragistics.Controls.Menus.XamDataTreeNodeDataCon...' tree item equals 'True'
        /// </summary>
        public bool SourceServerNameExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SourceCount_DestinationServer_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_SourceCount_DestinationServer_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '0' label equals 'True'
        /// </summary>
        public bool SourceCountTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SourceLabel_DestinationServer_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_SourceLabel_DestinationServer_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Sources' label equals 'True'
        /// </summary>
        public bool SourcesTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sql_Bulk_insert_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Sql_Bulk_insert_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
        /// </summary>
        public bool SqlBulkInsertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_SQL_Bulk_Insert_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
        /// </summary>
        public bool SqlBulkInsertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Sql_Bulk_insert_Qvi_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSqlBulkInsertActivity' custom control equals 'True'
        /// </summary>
        public bool SqlBulkInsertExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SQL_Server_Database_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_SQL_Server_Database_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfSqlServerDatabaseActivity' custom control equals 'True'
        /// </summary>
        public bool SqlServerDatabaseExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_StartNode_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_StartNode_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Wait for 1 seconds for user delay between actions; Verify that the 'Exists' property of 'StartNode' custom control equals 'True'
        /// </summary>
        public bool StartNodeExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_SuccessMessage_Label_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_SuccessMessage_Label_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '1 Resource Deployed Successfully.' label equals 'True'
        /// </summary>
        public bool SuccessMessageTextExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Switch_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Switch_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'FlowSwitch`1[String]' custom control equals 'True'
        /// </summary>
        public bool SwitchExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Switch_Window_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Switch_Window_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Wpf' window equals 'True'
        /// </summary>
        public bool DecisionDialogExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_System_Info_Qvi_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_System_Info_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfGatherSystemInformationActivity' custom control equals 'True'
        /// </summary>
        public bool GatherSystemInfoExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_System_information_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_System_information_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfGatherSystemInformationActivity' custom control equals 'True'
        /// </summary>
        public bool GatherSystemInfoExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_TabHeader_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_TabHeader_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Dev2.Studio.ViewModels.Help.HelpViewModel' tab equals 'True'
        /// </summary>
        public bool HelpTabExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Toolbox_FilterTextbox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Toolbox_FilterTextbox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'SearchTextBox' text box equals 'True'
        /// </summary>
        public bool SearchTextBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Toolbox_Multiassign_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Toolbox_Multiassign_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorV...' list item equals 'True'
        /// </summary>
        public bool MultiAssignExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Toolbox_RefreshButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Toolbox_RefreshButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool RefreshButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Unique_Records_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Unique_Records_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfUniqueActivity' custom control equals 'True'
        /// </summary>
        public bool UniqueExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_UnLock_Button_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_UnLock_Button_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Lock / unlock the menu' button equals 'True'
        /// </summary>
        public bool LockMenuButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Unzip_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Unzip_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfUnZip' custom control equals 'True'
        /// </summary>
        public bool UnZipExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Unzip_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Unzip_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfUnZip' custom control equals 'True'
        /// </summary>
        public bool UnZipExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_DeleteButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_VariableList_DeleteButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool DeleteButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_VariableList_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_VariablesControl_AutoID' custom control equals 'True'
        /// </summary>
        public bool VariablesControlExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_Recordset_Row1_Field_IsInputCheckBox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_VariableList_Recordset_Row1_Field_IsInputCheckBox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_IsInputCheckbox_AutoID' check box equals 'True'
        /// </summary>
        public bool IsInputCheckboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_Recordset_Row1_Field_IsOutputCheckBox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_VariableList_Recordset_Row1_Field_IsOutputCheckBox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_IsOutputCheckbox_AutoID' check box equals 'True'
        /// </summary>
        public bool IsOutputCheckboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_Recordset_Row1_Field_TextBox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_VariableList_Recordset_Row1_Field_TextBox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_NameTextBox_AutoID' text box equals 'True'
        /// </summary>
        public bool TextBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_Recordset_Row1_IsInputCheckBox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_VariableList_Recordset_Row1_IsInputCheckBox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_IsInputCheckbox_AutoID' check box equals 'True'
        /// </summary>
        public bool IsInputCheckboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_Recordset_Row1_IsOutputCheckBox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_VariableList_Recordset_Row1_IsOutputCheckBox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_IsOutputCheckbox_AutoID' check box equals 'True'
        /// </summary>
        public bool IsOutputCheckboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_Recordset_Row1_TextBox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_VariableList_Recordset_Row1_TextBox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_NameTextBox_AutoID' text box equals 'True'
        /// </summary>
        public bool TextBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_Scalar_Row1_IsInputCheckBox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_VariableList_Scalar_Row1_IsInputCheckBox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_IsInputCheckbox_AutoID' check box equals 'True'
        /// </summary>
        public bool IsInputCheckboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_Scalar_Row1_IsOutputCheckBox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_VariableList_Scalar_Row1_IsOutputCheckBox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_IsOutputCheckbox_AutoID' check box equals 'True'
        /// </summary>
        public bool IsOutputCheckboxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_Scalar_Row1_Textbox_Equals_SomeVariable'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_VariableList_Scalar_Row1_Textbox_Equals_SomeVariableExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'UI_NameTextBox_AutoID' text box equals 'SomeVariable'
        /// </summary>
        public string TextBoxText = "SomeVariable";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_Scalar_Row1_TextBox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_VariableList_Scalar_Row1_TextBox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'UI_NameTextBox_AutoID' text box equals 'True'
        /// </summary>
        public bool TextBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_VariableList_SortButton_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_VariableList_SortButton_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of '' button equals 'True'
        /// </summary>
        public bool SortButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Web_Connectors_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Web_Connectors_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfWebserviceActivity' custom control equals 'True'
        /// </summary>
        public bool WebConnectorExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Web_Source_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Web_Source_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Create a new web source' button equals 'True'
        /// </summary>
        public bool WebSourceButtonExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_WebSource_ReqTypeComboBox_Exists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_WebSource_ReqTypeComboBox_ExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'RequestTypes' combo box equals 'True'
        /// </summary>
        public bool RequestTypesComboBoxExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Workflow_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Workflow_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfActivity' custom control equals 'True'
        /// </summary>
        public bool SubWorkflowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Write_File_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Write_File_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFileWrite' custom control equals 'True'
        /// </summary>
        public bool FileWriteExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Write_File_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Write_File_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfFileWrite' custom control equals 'True'
        /// </summary>
        public bool FileWriteExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_XPath_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_XPath_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
        /// </summary>
        public bool XPathExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Xpath_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Xpath_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
        /// </summary>
        public bool XPathExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Xpath_Qvi_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Xpath_Qvi_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfXPathActivity' custom control equals 'True'
        /// </summary>
        public bool XPathExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Zip_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Zip_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfZip' custom control equals 'True'
        /// </summary>
        public bool ZipExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Zip_Large_View_Exists_OnDesignSurface'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Zip_Large_View_Exists_OnDesignSurfaceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'DsfZip' custom control equals 'True'
        /// </summary>
        public bool ZipExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_ExpandAndStepIn_NestedWorkflow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_ExpandAndStepIn_NestedWorkflowParams
    {
        
        #region Fields
        /// <summary>
        /// Expand 'Hello World' tree item
        /// </summary>
        public bool SubWorkflowExpanded = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Output_OnRecordset_InVariableList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Output_OnRecordset_InVariableListParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'UI_IsOutputCheckbox_AutoID' check box
        /// </summary>
        public bool IsOutputCheckboxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Output_OnVariable_InVariableList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Output_OnVariable_InVariableListParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'UI_IsOutputCheckbox_AutoID' check box
        /// </summary>
        public bool IsOutputCheckboxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Scheduler_Disable_Task_Radio_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Scheduler_Disable_Task_Radio_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Clear check box
        /// </summary>
        public bool StatusCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Scheduler_Enable_Task_Radio_Button'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Scheduler_Enable_Task_Radio_ButtonParams
    {
        
        #region Fields
        /// <summary>
        /// Select check box
        /// </summary>
        public bool StatusCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Scheduler_RunTask'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Scheduler_RunTaskParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Run task as soon as possible after a scheduled sta...' check box
        /// </summary>
        public bool RunTaskCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Settings_Admin_ServerPermissions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Settings_Admin_ServerPermissionsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'False' cell
        /// </summary>
        public bool UIFalseCellChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Settings_Contribute_ResourcePermissions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Settings_Contribute_ResourcePermissionsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'False' cell
        /// </summary>
        public bool UIFalseCellChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Settings_Contribute_ServerPermissions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Settings_Contribute_ServerPermissionsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'False' cell
        /// </summary>
        public bool UIFalseCellChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Settings_Execute_ResourcePermissions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Settings_Execute_ResourcePermissionsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'False' cell
        /// </summary>
        public bool UIFalseCellChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Settings_View_ResourcePermissions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Settings_View_ResourcePermissionsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'False' cell
        /// </summary>
        public bool UIFalseCellChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_Test_Connector_Calculate_Outputs'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_Test_Connector_Calculate_OutputsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 's' in 'Test data' text box
        /// </summary>
        public string TestDataText = "s";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_VariableList_Recordset_Row1_IsInputCheckbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_VariableList_Recordset_Row1_IsInputCheckboxParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'UI_IsInputCheckbox_AutoID' check box
        /// </summary>
        public bool IsInputCheckboxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Click_VariableList_Scalar_Row1_IsInputCheckbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Click_VariableList_Scalar_Row1_IsInputCheckboxParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'UI_IsInputCheckbox_AutoID' check box
        /// </summary>
        public bool IsInputCheckboxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_RemoteServerUITestWorkflow_Into_Explorer_Filter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_RemoteServerUITestWorkflow_Into_Explorer_FilterParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'RemoteServerUITestWorkflow' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "RemoteServerUITestWorkflow";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Servicename_As_RemoteServerUITestWorkflow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Servicename_As_RemoteServerUITestWorkflowParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'RemoteServerUITestWorkflow' in 'ServiceNameTextBox' text box
        /// </summary>
        public string ServiceNameTextBoxText = "RemoteServerUITestWorkflow";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Servicename_As_SomeWorkflow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Servicename_As_SomeWorkflowParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'SomeWorkflow' in 'ServiceNameTextBox' text box
        /// </summary>
        public string ServiceNameTextBoxText = "SomeWorkflow";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Servicename_As_TSTCIREMOTE'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Servicename_As_TSTCIREMOTEParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'TSTCIREMOTE' in 'ServiceNameTextBox' text box
        /// </summary>
        public string ServiceNameTextBoxText = "TSTCIREMOTE";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_SomeWorkflow_Into_Explorer_Filter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_SomeWorkflow_Into_Explorer_FilterParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'SomeWorkflow' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "SomeWorkflow";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariable'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_Text_Into_Assign_Large_View_Row1_Variable_Textbox_As_SomeVariableParams
    {
        
        #region Fields
        /// <summary>
        /// Type '[[SomeVariable]]' in 'UI__Row1_FieldName_AutoID' text box
        /// </summary>
        public string TextBoxText = "[[SomeVariable]]";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_TSTCIREMOTE_Into_Explorer_Filter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_TSTCIREMOTE_Into_Explorer_FilterParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'TSTCIREMOTE' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "TSTCIREMOTE";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Enter_workflow1_Into_Explorer_Filter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Enter_workflow1_Into_Explorer_FilterParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'workflow1' in 'SearchTextBox' text box
        /// </summary>
        public string SearchTextBoxText = "workflow1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Assign_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Assign_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Base_Conversion_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Base_Conversion_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Case_Conversion_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Case_Conversion_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Data_Merge_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Data_Merge_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Data_Split_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Data_Split_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Json_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Json_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_SQL_Bulk_Insert_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_SQL_Bulk_Insert_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_System_Information_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_System_Information_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_Xpath_Tool_Qvi_Large_View'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Open_Xpath_Tool_Qvi_Large_ViewParams
    {
        
        #region Fields
        /// <summary>
        /// Set to 'Pressed' state 'Open Quick Variable Input' toggle button
        /// </summary>
        public bool OpenQuickVariableInpToggleButtonPressed = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PressF11_EnterFullScreen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PressF11_EnterFullScreenParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{F11}' in 'Warewolf' window
        /// </summary>
        public string MainStudioWindowSendKeys = "{F11}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Type_S_Into_DebugInput_Row1_InputData'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Type_S_Into_DebugInput_Row1_InputDataParams
    {
        
        #region Fields
        /// <summary>
        /// Type 's' in 'Description' cell
        /// </summary>
        public string UIDescriptionCellValue = "s";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Type_tstci_into_Server_Source_Wizard_Address_Textbox'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Type_tstci_into_Server_Source_Wizard_Address_TextboxParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'tst-ci-' in 'Text' text box
        /// </summary>
        public string AddressEditBoxText = "tst-ci-";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_TSTCIREMOTEConnected_Exists_In_ExplorerRemoteServerDropdownList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_TSTCIREMOTEConnected_Exists_In_ExplorerRemoteServerDropdownListExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'TSTCIREMOTE (Connected)' label equals 'True'
        /// </summary>
        public bool ComboboxListItemAsTSTCIREMOTEConnectedExists = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MainStudioWindow : WpfWindow
    {
        
        public MainStudioWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.Name, "Warewolf", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabContextMenu TabContextMenu
        {
            get
            {
                if ((this.mTabContextMenu == null))
                {
                    this.mTabContextMenu = new TabContextMenu(this);
                }
                return this.mTabContextMenu;
            }
        }
        
        public ExplorerContextMenu ExplorerContextMenu
        {
            get
            {
                if ((this.mExplorerContextMenu == null))
                {
                    this.mExplorerContextMenu = new ExplorerContextMenu(this);
                }
                return this.mExplorerContextMenu;
            }
        }
        
        public GenericContextMenu GenericContextMenu
        {
            get
            {
                if ((this.mGenericContextMenu == null))
                {
                    this.mGenericContextMenu = new GenericContextMenu(this);
                }
                return this.mGenericContextMenu;
            }
        }
        
        public ExitFullScreenF11Text ExitFullScreenF11Text
        {
            get
            {
                if ((this.mExitFullScreenF11Text == null))
                {
                    this.mExitFullScreenF11Text = new ExitFullScreenF11Text(this);
                }
                return this.mExitFullScreenF11Text;
            }
        }
        
        public WpfButton LockStudioButton
        {
            get
            {
                if ((this.mLockStudioButton == null))
                {
                    this.mLockStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mLockStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_LOCK";
                    this.mLockStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLockStudioButton;
            }
        }
        
        public WpfButton MinimizeStudioButton
        {
            get
            {
                if ((this.mMinimizeStudioButton == null))
                {
                    this.mMinimizeStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mMinimizeStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_MINIMIZE";
                    this.mMinimizeStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMinimizeStudioButton;
            }
        }
        
        public WpfButton MaximizeRestoreStudioButton
        {
            get
            {
                if ((this.mMaximizeRestoreStudioButton == null))
                {
                    this.mMaximizeRestoreStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mMaximizeRestoreStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_SUPER_MAXIMIZE_RESTORE";
                    this.mMaximizeRestoreStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMaximizeRestoreStudioButton;
            }
        }
        
        public WpfButton MaximizeStudioButton
        {
            get
            {
                if ((this.mMaximizeStudioButton == null))
                {
                    this.mMaximizeStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mMaximizeStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_MAXIMIZE_RESTORE";
                    this.mMaximizeStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMaximizeStudioButton;
            }
        }
        
        public WpfButton CloseStudioButton
        {
            get
            {
                if ((this.mCloseStudioButton == null))
                {
                    this.mCloseStudioButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseStudioButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_CLOSE";
                    this.mCloseStudioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseStudioButton;
            }
        }
        
        public SideMenuBar SideMenuBar
        {
            get
            {
                if ((this.mSideMenuBar == null))
                {
                    this.mSideMenuBar = new SideMenuBar(this);
                }
                return this.mSideMenuBar;
            }
        }
        
        public DockManager DockManager
        {
            get
            {
                if ((this.mDockManager == null))
                {
                    this.mDockManager = new DockManager(this);
                }
                return this.mDockManager;
            }
        }
        
        public ServicePickerDialog ServicePickerDialog
        {
            get
            {
                if ((this.mServicePickerDialog == null))
                {
                    this.mServicePickerDialog = new ServicePickerDialog(this);
                }
                return this.mServicePickerDialog;
            }
        }
        
        public DebugInputDialog DebugInputDialog
        {
            get
            {
                if ((this.mDebugInputDialog == null))
                {
                    this.mDebugInputDialog = new DebugInputDialog(this);
                }
                return this.mDebugInputDialog;
            }
        }
        
        public NewRemoteServerListItem NewRemoteServerListItem
        {
            get
            {
                if ((this.mNewRemoteServerListItem == null))
                {
                    this.mNewRemoteServerListItem = new NewRemoteServerListItem(this);
                }
                return this.mNewRemoteServerListItem;
            }
        }
        
        public WpfText ComboboxListItemAsTSTCIREMOTE
        {
            get
            {
                if ((this.mComboboxListItemAsTSTCIREMOTE == null))
                {
                    this.mComboboxListItemAsTSTCIREMOTE = new WpfText(this);
                    #region Search Criteria
                    this.mComboboxListItemAsTSTCIREMOTE.SearchProperties[WpfText.PropertyNames.Name] = "TSTCIREMOTE";
                    this.mComboboxListItemAsTSTCIREMOTE.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mComboboxListItemAsTSTCIREMOTE;
            }
        }
        
        public WpfText ComboboxListItemAsTSTCIREMOTEConnected
        {
            get
            {
                if ((this.mComboboxListItemAsTSTCIREMOTEConnected == null))
                {
                    this.mComboboxListItemAsTSTCIREMOTEConnected = new WpfText(this);
                    #region Search Criteria
                    this.mComboboxListItemAsTSTCIREMOTEConnected.SearchProperties[WpfText.PropertyNames.Name] = "TSTCIREMOTE (Connected)";
                    this.mComboboxListItemAsTSTCIREMOTEConnected.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mComboboxListItemAsTSTCIREMOTEConnected;
            }
        }
        
        public WpfText ComboboxListItemAsLocalhost
        {
            get
            {
                if ((this.mComboboxListItemAsLocalhost == null))
                {
                    this.mComboboxListItemAsLocalhost = new WpfText(this);
                    #region Search Criteria
                    this.mComboboxListItemAsLocalhost.SearchProperties[WpfText.PropertyNames.Name] = "localhost (Connected)";
                    this.mComboboxListItemAsLocalhost.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mComboboxListItemAsLocalhost;
            }
        }
        
        public WpfCustom ComboboxListItemAsHttp
        {
            get
            {
                if ((this.mComboboxListItemAsHttp == null))
                {
                    this.mComboboxListItemAsHttp = new WpfCustom(this);
                    #region Search Criteria
                    this.mComboboxListItemAsHttp.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
                    this.mComboboxListItemAsHttp.SearchProperties[WpfControl.PropertyNames.Name] = "http";
                    this.mComboboxListItemAsHttp.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComboboxListItemAsHttp;
            }
        }
        #endregion
        
        #region Fields
        private TabContextMenu mTabContextMenu;
        
        private ExplorerContextMenu mExplorerContextMenu;
        
        private GenericContextMenu mGenericContextMenu;
        
        private ExitFullScreenF11Text mExitFullScreenF11Text;
        
        private WpfButton mLockStudioButton;
        
        private WpfButton mMinimizeStudioButton;
        
        private WpfButton mMaximizeRestoreStudioButton;
        
        private WpfButton mMaximizeStudioButton;
        
        private WpfButton mCloseStudioButton;
        
        private SideMenuBar mSideMenuBar;
        
        private DockManager mDockManager;
        
        private ServicePickerDialog mServicePickerDialog;
        
        private DebugInputDialog mDebugInputDialog;
        
        private NewRemoteServerListItem mNewRemoteServerListItem;
        
        private WpfText mComboboxListItemAsTSTCIREMOTE;
        
        private WpfText mComboboxListItemAsTSTCIREMOTEConnected;
        
        private WpfText mComboboxListItemAsLocalhost;
        
        private WpfCustom mComboboxListItemAsHttp;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabContextMenu : WpfMenu
    {
        
        public TabContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem Close
        {
            get
            {
                if ((this.mClose == null))
                {
                    this.mClose = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mClose.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Close";
                    this.mClose.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mClose;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mClose;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerContextMenu : WpfMenu
    {
        
        public ExplorerContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.AutomationId] = "ExplorerMenu";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem ShowServerVersion
        {
            get
            {
                if ((this.mShowServerVersion == null))
                {
                    this.mShowServerVersion = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mShowServerVersion.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "ServerVersion";
                    this.mShowServerVersion.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowServerVersion;
            }
        }
        
        public WpfMenuItem NewWorkflow
        {
            get
            {
                if ((this.mNewWorkflow == null))
                {
                    this.mNewWorkflow = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewWorkflow.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewService";
                    this.mNewWorkflow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWorkflow;
            }
        }
        
        public WpfMenuItem NewServerSource
        {
            get
            {
                if ((this.mNewServerSource == null))
                {
                    this.mNewServerSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewServerSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewServerSource";
                    this.mNewServerSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewServerSource;
            }
        }
        
        public WpfMenuItem NewDatabaseSource
        {
            get
            {
                if ((this.mNewDatabaseSource == null))
                {
                    this.mNewDatabaseSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewDatabaseSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewDataBaseSource";
                    this.mNewDatabaseSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewDatabaseSource;
            }
        }
        
        public WpfMenuItem NewWebServiceSource
        {
            get
            {
                if ((this.mNewWebServiceSource == null))
                {
                    this.mNewWebServiceSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewWebServiceSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewWebSource";
                    this.mNewWebServiceSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWebServiceSource;
            }
        }
        
        public WpfMenuItem NewPluginSource
        {
            get
            {
                if ((this.mNewPluginSource == null))
                {
                    this.mNewPluginSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewPluginSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewPluginSource";
                    this.mNewPluginSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewPluginSource;
            }
        }
        
        public WpfMenuItem NewEmailSource
        {
            get
            {
                if ((this.mNewEmailSource == null))
                {
                    this.mNewEmailSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewEmailSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewEmailSource";
                    this.mNewEmailSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewEmailSource;
            }
        }
        
        public WpfMenuItem NewDropboxSource
        {
            get
            {
                if ((this.mNewDropboxSource == null))
                {
                    this.mNewDropboxSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewDropboxSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewDropboxSource";
                    this.mNewDropboxSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewDropboxSource;
            }
        }
        
        public WpfMenuItem NewSharepointSource
        {
            get
            {
                if ((this.mNewSharepointSource == null))
                {
                    this.mNewSharepointSource = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewSharepointSource.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewSharepointSource";
                    this.mNewSharepointSource.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewSharepointSource;
            }
        }
        
        public WpfMenuItem NewFolder
        {
            get
            {
                if ((this.mNewFolder == null))
                {
                    this.mNewFolder = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mNewFolder.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "NewFolderFromItem";
                    this.mNewFolder.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewFolder;
            }
        }
        
        public WpfMenuItem Rename
        {
            get
            {
                if ((this.mRename == null))
                {
                    this.mRename = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mRename.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Rename";
                    this.mRename.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRename;
            }
        }
        
        public WpfMenuItem Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDelete.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Delete";
                    this.mDelete.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDelete;
            }
        }
        
        public WpfMenuItem Deploy
        {
            get
            {
                if ((this.mDeploy == null))
                {
                    this.mDeploy = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDeploy.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Deploy";
                    this.mDeploy.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeploy;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mShowServerVersion;
        
        private WpfMenuItem mNewWorkflow;
        
        private WpfMenuItem mNewServerSource;
        
        private WpfMenuItem mNewDatabaseSource;
        
        private WpfMenuItem mNewWebServiceSource;
        
        private WpfMenuItem mNewPluginSource;
        
        private WpfMenuItem mNewEmailSource;
        
        private WpfMenuItem mNewDropboxSource;
        
        private WpfMenuItem mNewSharepointSource;
        
        private WpfMenuItem mNewFolder;
        
        private WpfMenuItem mRename;
        
        private WpfMenuItem mDelete;
        
        private WpfMenuItem mDeploy;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class GenericContextMenu : WpfMenu
    {
        
        public GenericContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem Cut
        {
            get
            {
                if ((this.mCut == null))
                {
                    this.mCut = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mCut.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "CutMenuItem";
                    this.mCut.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCut;
            }
        }
        
        public WpfMenuItem Paste
        {
            get
            {
                if ((this.mPaste == null))
                {
                    this.mPaste = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mPaste.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "PasteMenuItem";
                    this.mPaste.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPaste;
            }
        }
        
        public WpfMenuItem Copy
        {
            get
            {
                if ((this.mCopy == null))
                {
                    this.mCopy = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mCopy.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "CopyMenuItem";
                    this.mCopy.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCopy;
            }
        }
        
        public WpfMenuItem CopyasImage
        {
            get
            {
                if ((this.mCopyasImage == null))
                {
                    this.mCopyasImage = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mCopyasImage.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "CopyAsImageMenuItem";
                    this.mCopyasImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCopyasImage;
            }
        }
        
        public WpfMenuItem SaveasImage
        {
            get
            {
                if ((this.mSaveasImage == null))
                {
                    this.mSaveasImage = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mSaveasImage.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "SaveAsImageMenuItem";
                    this.mSaveasImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSaveasImage;
            }
        }
        
        public WpfMenuItem SetasStartNode
        {
            get
            {
                if ((this.mSetasStartNode == null))
                {
                    this.mSetasStartNode = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mSetasStartNode.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "SetAsStartNodeMenuItem";
                    this.mSetasStartNode.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSetasStartNode;
            }
        }
        
        public WpfMenuItem ShowLargeView
        {
            get
            {
                if ((this.mShowLargeView == null))
                {
                    this.mShowLargeView = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mShowLargeView.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "UI_ShowLargeViewMenuItem_AutoID";
                    this.mShowLargeView.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowLargeView;
            }
        }
        
        public WpfMenuItem InsertRow
        {
            get
            {
                if ((this.mInsertRow == null))
                {
                    this.mInsertRow = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mInsertRow.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "UI_InsertRowMenuItem_AutoID";
                    this.mInsertRow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInsertRow;
            }
        }
        
        public WpfMenuItem DeleteRow
        {
            get
            {
                if ((this.mDeleteRow == null))
                {
                    this.mDeleteRow = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mDeleteRow.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "UI_DeleteRowMenuItem_AutoID";
                    this.mDeleteRow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteRow;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mCut;
        
        private WpfMenuItem mPaste;
        
        private WpfMenuItem mCopy;
        
        private WpfMenuItem mCopyasImage;
        
        private WpfMenuItem mSaveasImage;
        
        private WpfMenuItem mSetasStartNode;
        
        private WpfMenuItem mShowLargeView;
        
        private WpfMenuItem mInsertRow;
        
        private WpfMenuItem mDeleteRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExitFullScreenF11Text : WpfText
    {
        
        public ExitFullScreenF11Text(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Exit Full Screen (F11)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink ExitFullScreenF11Hyperlink
        {
            get
            {
                if ((this.mExitFullScreenF11Hyperlink == null))
                {
                    this.mExitFullScreenF11Hyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mExitFullScreenF11Hyperlink.SearchProperties[WpfHyperlink.PropertyNames.Name] = "Exit Full Screen (F11)";
                    this.mExitFullScreenF11Hyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExitFullScreenF11Hyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mExitFullScreenF11Hyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SideMenuBar : WpfCustom
    {
        
        public SideMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MenuView";
            this.WindowTitles.Add("Warewolf");
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DatabaseSourceButton
        {
            get
            {
                if ((this.mDatabaseSourceButton == null))
                {
                    this.mDatabaseSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDatabaseSourceButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Create a new database source", PropertyExpressionOperator.Contains));
                    this.mDatabaseSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDatabaseSourceButton;
            }
        }
        
        public WpfButton PluginSourceButton
        {
            get
            {
                if ((this.mPluginSourceButton == null))
                {
                    this.mPluginSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mPluginSourceButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Create a new plugin source", PropertyExpressionOperator.Contains));
                    this.mPluginSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPluginSourceButton;
            }
        }
        
        public WpfButton DatabaseConnectorButton
        {
            get
            {
                if ((this.mDatabaseConnectorButton == null))
                {
                    this.mDatabaseConnectorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDatabaseConnectorButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Create a new database connector", PropertyExpressionOperator.Contains));
                    this.mDatabaseConnectorButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDatabaseConnectorButton;
            }
        }
        
        public WpfButton PluginConnectorButton
        {
            get
            {
                if ((this.mPluginConnectorButton == null))
                {
                    this.mPluginConnectorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mPluginConnectorButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Create a new plugin connector", PropertyExpressionOperator.Contains));
                    this.mPluginConnectorButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPluginConnectorButton;
            }
        }
        
        public WpfButton WebSourceButton
        {
            get
            {
                if ((this.mWebSourceButton == null))
                {
                    this.mWebSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mWebSourceButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Create a new web source", PropertyExpressionOperator.Contains));
                    this.mWebSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebSourceButton;
            }
        }
        
        public WpfButton NewVersionButton
        {
            get
            {
                if ((this.mNewVersionButton == null))
                {
                    this.mNewVersionButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewVersionButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "VersionButton";
                    this.mNewVersionButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewVersionButton;
            }
        }
        
        public WpfButton ConfigureSettingsButton
        {
            get
            {
                if ((this.mConfigureSettingsButton == null))
                {
                    this.mConfigureSettingsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConfigureSettingsButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Configure settings", PropertyExpressionOperator.Contains));
                    this.mConfigureSettingsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConfigureSettingsButton;
            }
        }
        
        public WpfButton RunAndDebugButton
        {
            get
            {
                if ((this.mRunAndDebugButton == null))
                {
                    this.mRunAndDebugButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRunAndDebugButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Run and debug your workflow service", PropertyExpressionOperator.Contains));
                    this.mRunAndDebugButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunAndDebugButton;
            }
        }
        
        public WpfButton SchedulerButton
        {
            get
            {
                if ((this.mSchedulerButton == null))
                {
                    this.mSchedulerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSchedulerButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Schedule a service to run", PropertyExpressionOperator.Contains));
                    this.mSchedulerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSchedulerButton;
            }
        }
        
        public WpfButton DeployButton
        {
            get
            {
                if ((this.mDeployButton == null))
                {
                    this.mDeployButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeployButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Move resources between Warewolf servers", PropertyExpressionOperator.Contains));
                    this.mDeployButton.WindowTitles.Add("Warewolf");
                    this.mDeployButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeployButton;
            }
        }
        
        public WpfButton SaveButton
        {
            get
            {
                if ((this.mSaveButton == null))
                {
                    this.mSaveButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSaveButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Save this tab", PropertyExpressionOperator.Contains));
                    this.mSaveButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSaveButton;
            }
        }
        
        public CollapsedSideMenu CollapsedSideMenu
        {
            get
            {
                if ((this.mCollapsedSideMenu == null))
                {
                    this.mCollapsedSideMenu = new CollapsedSideMenu(this);
                }
                return this.mCollapsedSideMenu;
            }
        }
        
        public WpfButton NewWorkflowButton
        {
            get
            {
                if ((this.mNewWorkflowButton == null))
                {
                    this.mNewWorkflowButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewWorkflowButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Create a new service", PropertyExpressionOperator.Contains));
                    this.mNewWorkflowButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWorkflowButton;
            }
        }
        
        public WpfButton NewWebServiceButton
        {
            get
            {
                if ((this.mNewWebServiceButton == null))
                {
                    this.mNewWebServiceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewWebServiceButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Create a new web service", PropertyExpressionOperator.Contains));
                    this.mNewWebServiceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWebServiceButton;
            }
        }
        
        public WpfButton KnowledgeBaseButton
        {
            get
            {
                if ((this.mKnowledgeBaseButton == null))
                {
                    this.mKnowledgeBaseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mKnowledgeBaseButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Knowledge Base", PropertyExpressionOperator.Contains));
                    this.mKnowledgeBaseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mKnowledgeBaseButton;
            }
        }
        
        public WpfButton LockMenuButton
        {
            get
            {
                if ((this.mLockMenuButton == null))
                {
                    this.mLockMenuButton = new WpfButton(this);
                    #region Search Criteria
                    this.mLockMenuButton.SearchProperties.Add(new PropertyExpression(WpfButton.PropertyNames.HelpText, "Lock / unlock the menu", PropertyExpressionOperator.Contains));
                    this.mLockMenuButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLockMenuButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDatabaseSourceButton;
        
        private WpfButton mPluginSourceButton;
        
        private WpfButton mDatabaseConnectorButton;
        
        private WpfButton mPluginConnectorButton;
        
        private WpfButton mWebSourceButton;
        
        private WpfButton mNewVersionButton;
        
        private WpfButton mConfigureSettingsButton;
        
        private WpfButton mRunAndDebugButton;
        
        private WpfButton mSchedulerButton;
        
        private WpfButton mDeployButton;
        
        private WpfButton mSaveButton;
        
        private CollapsedSideMenu mCollapsedSideMenu;
        
        private WpfButton mNewWorkflowButton;
        
        private WpfButton mNewWebServiceButton;
        
        private WpfButton mKnowledgeBaseButton;
        
        private WpfButton mLockMenuButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CollapsedSideMenu : WpfText
    {
        
        public CollapsedSideMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = " ";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton UICreateanewdatabasesoButton
        {
            get
            {
                if ((this.mUICreateanewdatabasesoButton == null))
                {
                    this.mUICreateanewdatabasesoButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICreateanewdatabasesoButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Create a new database source";
                    this.mUICreateanewdatabasesoButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUICreateanewdatabasesoButton;
            }
        }
        
        public WpfButton UICreateanewpluginsourButton
        {
            get
            {
                if ((this.mUICreateanewpluginsourButton == null))
                {
                    this.mUICreateanewpluginsourButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICreateanewpluginsourButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Create a new plugin source";
                    this.mUICreateanewpluginsourButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUICreateanewpluginsourButton;
            }
        }
        
        public WpfButton UICreateanewwebsourceButton
        {
            get
            {
                if ((this.mUICreateanewwebsourceButton == null))
                {
                    this.mUICreateanewwebsourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICreateanewwebsourceButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "Create a new web source";
                    this.mUICreateanewwebsourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUICreateanewwebsourceButton;
            }
        }
        
        public WpfText NewWorkflowIcon
        {
            get
            {
                if ((this.mNewWorkflowIcon == null))
                {
                    this.mNewWorkflowIcon = new WpfText(this);
                    #region Search Criteria
                    this.mNewWorkflowIcon.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mNewWorkflowIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWorkflowIcon;
            }
        }
        
        public WpfText DeployIcon
        {
            get
            {
                if ((this.mDeployIcon == null))
                {
                    this.mDeployIcon = new WpfText(this);
                    #region Search Criteria
                    this.mDeployIcon.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mDeployIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeployIcon;
            }
        }
        
        public WpfText NewDatabseConnIcon
        {
            get
            {
                if ((this.mNewDatabseConnIcon == null))
                {
                    this.mNewDatabseConnIcon = new WpfText(this);
                    #region Search Criteria
                    this.mNewDatabseConnIcon.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mNewDatabseConnIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewDatabseConnIcon;
            }
        }
        
        public WpfText NewPluginConnIcon
        {
            get
            {
                if ((this.mNewPluginConnIcon == null))
                {
                    this.mNewPluginConnIcon = new WpfText(this);
                    #region Search Criteria
                    this.mNewPluginConnIcon.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mNewPluginConnIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewPluginConnIcon;
            }
        }
        
        public WpfText NewWebConnIcon
        {
            get
            {
                if ((this.mNewWebConnIcon == null))
                {
                    this.mNewWebConnIcon = new WpfText(this);
                    #region Search Criteria
                    this.mNewWebConnIcon.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mNewWebConnIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewWebConnIcon;
            }
        }
        
        public WpfText NewScheduledTaskIcon
        {
            get
            {
                if ((this.mNewScheduledTaskIcon == null))
                {
                    this.mNewScheduledTaskIcon = new WpfText(this);
                    #region Search Criteria
                    this.mNewScheduledTaskIcon.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mNewScheduledTaskIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewScheduledTaskIcon;
            }
        }
        
        public WpfText SettingsIcon
        {
            get
            {
                if ((this.mSettingsIcon == null))
                {
                    this.mSettingsIcon = new WpfText(this);
                    #region Search Criteria
                    this.mSettingsIcon.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mSettingsIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSettingsIcon;
            }
        }
        
        public WpfText HelpIcon
        {
            get
            {
                if ((this.mHelpIcon == null))
                {
                    this.mHelpIcon = new WpfText(this);
                    #region Search Criteria
                    this.mHelpIcon.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mHelpIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHelpIcon;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUICreateanewdatabasesoButton;
        
        private WpfButton mUICreateanewpluginsourButton;
        
        private WpfButton mUICreateanewwebsourceButton;
        
        private WpfText mNewWorkflowIcon;
        
        private WpfText mDeployIcon;
        
        private WpfText mNewDatabseConnIcon;
        
        private WpfText mNewPluginConnIcon;
        
        private WpfText mNewWebConnIcon;
        
        private WpfText mNewScheduledTaskIcon;
        
        private WpfText mSettingsIcon;
        
        private WpfText mHelpIcon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DockManager : WpfCustom
    {
        
        public DockManager(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamDockManager";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DockManager";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SplitPaneLeft SplitPaneLeft
        {
            get
            {
                if ((this.mSplitPaneLeft == null))
                {
                    this.mSplitPaneLeft = new SplitPaneLeft(this);
                }
                return this.mSplitPaneLeft;
            }
        }
        
        public SplitPaneMiddle SplitPaneMiddle
        {
            get
            {
                if ((this.mSplitPaneMiddle == null))
                {
                    this.mSplitPaneMiddle = new SplitPaneMiddle(this);
                }
                return this.mSplitPaneMiddle;
            }
        }
        
        public SplitPaneRight SplitPaneRight
        {
            get
            {
                if ((this.mSplitPaneRight == null))
                {
                    this.mSplitPaneRight = new SplitPaneRight(this);
                }
                return this.mSplitPaneRight;
            }
        }
        
        public WpfTabList UnpinnedTabAreaTop
        {
            get
            {
                if ((this.mUnpinnedTabAreaTop == null))
                {
                    this.mUnpinnedTabAreaTop = new WpfTabList(this);
                    #region Search Criteria
                    this.mUnpinnedTabAreaTop.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "PART_UnpinnedTabAreaTop";
                    this.mUnpinnedTabAreaTop.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnpinnedTabAreaTop;
            }
        }
        
        public WpfTabList UnpinnedTabAreaBottom
        {
            get
            {
                if ((this.mUnpinnedTabAreaBottom == null))
                {
                    this.mUnpinnedTabAreaBottom = new WpfTabList(this);
                    #region Search Criteria
                    this.mUnpinnedTabAreaBottom.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "PART_UnpinnedTabAreaBottom";
                    this.mUnpinnedTabAreaBottom.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnpinnedTabAreaBottom;
            }
        }
        
        public WpfTabList UnpinnedTabAreaLeft
        {
            get
            {
                if ((this.mUnpinnedTabAreaLeft == null))
                {
                    this.mUnpinnedTabAreaLeft = new WpfTabList(this);
                    #region Search Criteria
                    this.mUnpinnedTabAreaLeft.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "PART_UnpinnedTabAreaLeft";
                    this.mUnpinnedTabAreaLeft.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnpinnedTabAreaLeft;
            }
        }
        
        public WpfTabList UnpinnedTabAreaRight
        {
            get
            {
                if ((this.mUnpinnedTabAreaRight == null))
                {
                    this.mUnpinnedTabAreaRight = new WpfTabList(this);
                    #region Search Criteria
                    this.mUnpinnedTabAreaRight.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "PART_UnpinnedTabAreaRight";
                    this.mUnpinnedTabAreaRight.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnpinnedTabAreaRight;
            }
        }
        #endregion
        
        #region Fields
        private SplitPaneLeft mSplitPaneLeft;
        
        private SplitPaneMiddle mSplitPaneMiddle;
        
        private SplitPaneRight mSplitPaneRight;
        
        private WpfTabList mUnpinnedTabAreaTop;
        
        private WpfTabList mUnpinnedTabAreaBottom;
        
        private WpfTabList mUnpinnedTabAreaLeft;
        
        private WpfTabList mUnpinnedTabAreaRight;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitPaneLeft : WpfCustom
    {
        
        public SplitPaneLeft(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Explorer Explorer
        {
            get
            {
                if ((this.mExplorer == null))
                {
                    this.mExplorer = new Explorer(this);
                }
                return this.mExplorer;
            }
        }
        
        public WpfControl ExplorerToolboxSplitter
        {
            get
            {
                if ((this.mExplorerToolboxSplitter == null))
                {
                    this.mExplorerToolboxSplitter = new WpfControl(this);
                    #region Search Criteria
                    this.mExplorerToolboxSplitter.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mExplorerToolboxSplitter.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mExplorerToolboxSplitter.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExplorerToolboxSplitter;
            }
        }
        
        public ToolBox ToolBox
        {
            get
            {
                if ((this.mToolBox == null))
                {
                    this.mToolBox = new ToolBox(this);
                }
                return this.mToolBox;
            }
        }
        
        public WpfControl ToolboxHelpSplitter
        {
            get
            {
                if ((this.mToolboxHelpSplitter == null))
                {
                    this.mToolboxHelpSplitter = new WpfControl(this);
                    #region Search Criteria
                    this.mToolboxHelpSplitter.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mToolboxHelpSplitter.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
                    this.mToolboxHelpSplitter.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mToolboxHelpSplitter.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToolboxHelpSplitter;
            }
        }
        
        public Help Help
        {
            get
            {
                if ((this.mHelp == null))
                {
                    this.mHelp = new Help(this);
                }
                return this.mHelp;
            }
        }
        #endregion
        
        #region Fields
        private Explorer mExplorer;
        
        private WpfControl mExplorerToolboxSplitter;
        
        private ToolBox mToolBox;
        
        private WpfControl mToolboxHelpSplitter;
        
        private Help mHelp;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Explorer : WpfCustom
    {
        
        public Explorer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ExplorerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_ExplorerControl_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ExplorerUnpinBtn
        {
            get
            {
                if ((this.mExplorerUnpinBtn == null))
                {
                    this.mExplorerUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mExplorerUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mExplorerUnpinBtn.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExplorerUnpinBtn;
            }
        }
        
        public ConnectControl ConnectControl
        {
            get
            {
                if ((this.mConnectControl == null))
                {
                    this.mConnectControl = new ConnectControl(this);
                }
                return this.mConnectControl;
            }
        }
        
        public SearchTextBox SearchTextBox
        {
            get
            {
                if ((this.mSearchTextBox == null))
                {
                    this.mSearchTextBox = new SearchTextBox(this);
                }
                return this.mSearchTextBox;
            }
        }
        
        public WpfButton ExplorerRefreshButton
        {
            get
            {
                if ((this.mExplorerRefreshButton == null))
                {
                    this.mExplorerRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExplorerRefreshButton.SearchProperties[WpfButton.PropertyNames.Name] = "";
                    this.mExplorerRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExplorerRefreshButton;
            }
        }
        
        public ExplorerTree ExplorerTree
        {
            get
            {
                if ((this.mExplorerTree == null))
                {
                    this.mExplorerTree = new ExplorerTree(this);
                }
                return this.mExplorerTree;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mExplorerUnpinBtn;
        
        private ConnectControl mConnectControl;
        
        private SearchTextBox mSearchTextBox;
        
        private WpfButton mExplorerRefreshButton;
        
        private ExplorerTree mExplorerTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConnectControl : WpfCustom
    {
        
        public ConnectControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ConnectControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ServerComboBox ServerComboBox
        {
            get
            {
                if ((this.mServerComboBox == null))
                {
                    this.mServerComboBox = new ServerComboBox(this);
                }
                return this.mServerComboBox;
            }
        }
        
        public WpfButton EditServerButton
        {
            get
            {
                if ((this.mEditServerButton == null))
                {
                    this.mEditServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditServerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_ServerEditBtn_AutoID";
                    this.mEditServerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditServerButton;
            }
        }
        
        public WpfButton ConnectServerButton
        {
            get
            {
                if ((this.mConnectServerButton == null))
                {
                    this.mConnectServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConnectServerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_ConnectServerBtn_AutoID";
                    this.mConnectServerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnectServerButton;
            }
        }
        #endregion
        
        #region Fields
        private ServerComboBox mServerComboBox;
        
        private WpfButton mEditServerButton;
        
        private WpfButton mConnectServerButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerComboBox : WpfCustom
    {
        
        public ServerComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "TheServerComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ServerListComboBox
        {
            get
            {
                if ((this.mServerListComboBox == null))
                {
                    this.mServerListComboBox = new WpfButton(this);
                    #region Search Criteria
                    this.mServerListComboBox.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mServerListComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mServerListComboBox;
            }
        }
        
        public WpfEdit TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TextBoxPresenter";
                    this.mTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextBox;
            }
        }
        
        public WpfText SelectedItemAsTSTCIREMOTE
        {
            get
            {
                if ((this.mSelectedItemAsTSTCIREMOTE == null))
                {
                    this.mSelectedItemAsTSTCIREMOTE = new WpfText(this);
                    #region Search Criteria
                    this.mSelectedItemAsTSTCIREMOTE.SearchProperties[WpfText.PropertyNames.Name] = "TSTCIREMOTE";
                    this.mSelectedItemAsTSTCIREMOTE.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSelectedItemAsTSTCIREMOTE;
            }
        }
        
        public WpfText SelectedItemAsTSTCIREMOTEConnected
        {
            get
            {
                if ((this.mSelectedItemAsTSTCIREMOTEConnected == null))
                {
                    this.mSelectedItemAsTSTCIREMOTEConnected = new WpfText(this);
                    #region Search Criteria
                    this.mSelectedItemAsTSTCIREMOTEConnected.SearchProperties[WpfText.PropertyNames.Name] = "TSTCIREMOTE (Connected)";
                    this.mSelectedItemAsTSTCIREMOTEConnected.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSelectedItemAsTSTCIREMOTEConnected;
            }
        }
        
        public WpfText SelectedItemAsLocalhost
        {
            get
            {
                if ((this.mSelectedItemAsLocalhost == null))
                {
                    this.mSelectedItemAsLocalhost = new WpfText(this);
                    #region Search Criteria
                    this.mSelectedItemAsLocalhost.SearchProperties[WpfText.PropertyNames.Name] = "localhost";
                    this.mSelectedItemAsLocalhost.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSelectedItemAsLocalhost;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mServerListComboBox;
        
        private WpfEdit mTextBox;
        
        private WpfText mSelectedItemAsTSTCIREMOTE;
        
        private WpfText mSelectedItemAsTSTCIREMOTEConnected;
        
        private WpfText mSelectedItemAsLocalhost;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SearchTextBox : WpfEdit
    {
        
        public SearchTextBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText FilterText
        {
            get
            {
                if ((this.mFilterText == null))
                {
                    this.mFilterText = new WpfText(this);
                    #region Search Criteria
                    this.mFilterText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mFilterText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFilterText;
            }
        }
        
        public WpfButton UIClearSearchButtonButton
        {
            get
            {
                if ((this.mUIClearSearchButtonButton == null))
                {
                    this.mUIClearSearchButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIClearSearchButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ClearSearchButton";
                    this.mUIClearSearchButtonButton.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mUIClearSearchButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mFilterText;
        
        private WpfButton mUIClearSearchButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerTree : WpfTree
    {
        
        public ExplorerTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "ExplorerTree";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ExplorerTreeItem ExplorerTreeItem
        {
            get
            {
                if ((this.mExplorerTreeItem == null))
                {
                    this.mExplorerTreeItem = new ExplorerTreeItem(this);
                }
                return this.mExplorerTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private ExplorerTreeItem mExplorerTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerTreeItem : WpfTreeItem
    {
        
        public ExplorerTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfTreeItem ExplorerTreeItemChild
        {
            get
            {
                if ((this.mExplorerTreeItemChild == null))
                {
                    this.mExplorerTreeItemChild = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mExplorerTreeItemChild.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mExplorerTreeItemChild.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mExplorerTreeItemChild.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mExplorerTreeItemChild.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExplorerTreeItemChild;
            }
        }
        
        public WpfTreeItem SomeWorkflow
        {
            get
            {
                if ((this.mSomeWorkflow == null))
                {
                    this.mSomeWorkflow = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mSomeWorkflow.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mSomeWorkflow.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mSomeWorkflow.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mSomeWorkflow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSomeWorkflow;
            }
        }
        #endregion
        
        #region Fields
        private WpfTreeItem mExplorerTreeItemChild;
        
        private WpfTreeItem mSomeWorkflow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ToolBox : WpfCustom
    {
        
        public ToolBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ToolboxView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_ToolboxControl_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ToolUnpinBtn
        {
            get
            {
                if ((this.mToolUnpinBtn == null))
                {
                    this.mToolUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mToolUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mToolUnpinBtn.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToolUnpinBtn;
            }
        }
        
        public WpfEdit SearchTextBox
        {
            get
            {
                if ((this.mSearchTextBox == null))
                {
                    this.mSearchTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mSearchTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
                    this.mSearchTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSearchTextBox;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.Name] = "";
                    this.mRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public ToolListBox ToolListBox
        {
            get
            {
                if ((this.mToolListBox == null))
                {
                    this.mToolListBox = new ToolListBox(this);
                }
                return this.mToolListBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mToolUnpinBtn;
        
        private WpfEdit mSearchTextBox;
        
        private WpfButton mRefreshButton;
        
        private ToolListBox mToolListBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ToolListBox : WpfList
    {
        
        public ToolListBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "ToolListBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public FlowTools FlowTools
        {
            get
            {
                if ((this.mFlowTools == null))
                {
                    this.mFlowTools = new FlowTools(this);
                }
                return this.mFlowTools;
            }
        }
        
        public DataTools DataTools
        {
            get
            {
                if ((this.mDataTools == null))
                {
                    this.mDataTools = new DataTools(this);
                }
                return this.mDataTools;
            }
        }
        
        public Database Database
        {
            get
            {
                if ((this.mDatabase == null))
                {
                    this.mDatabase = new Database(this);
                }
                return this.mDatabase;
            }
        }
        
        public FileAndFTP FileAndFTP
        {
            get
            {
                if ((this.mFileAndFTP == null))
                {
                    this.mFileAndFTP = new FileAndFTP(this);
                }
                return this.mFileAndFTP;
            }
        }
        
        public HTTPWebMethods HTTPWebMethods
        {
            get
            {
                if ((this.mHTTPWebMethods == null))
                {
                    this.mHTTPWebMethods = new HTTPWebMethods(this);
                }
                return this.mHTTPWebMethods;
            }
        }
        
        public LoopTools LoopTools
        {
            get
            {
                if ((this.mLoopTools == null))
                {
                    this.mLoopTools = new LoopTools(this);
                }
                return this.mLoopTools;
            }
        }
        
        public RecordsetTools RecordsetTools
        {
            get
            {
                if ((this.mRecordsetTools == null))
                {
                    this.mRecordsetTools = new RecordsetTools(this);
                }
                return this.mRecordsetTools;
            }
        }
        
        public ResourceTools ResourceTools
        {
            get
            {
                if ((this.mResourceTools == null))
                {
                    this.mResourceTools = new ResourceTools(this);
                }
                return this.mResourceTools;
            }
        }
        
        public ScriptingTools ScriptingTools
        {
            get
            {
                if ((this.mScriptingTools == null))
                {
                    this.mScriptingTools = new ScriptingTools(this);
                }
                return this.mScriptingTools;
            }
        }
        
        public SharepointTools SharepointTools
        {
            get
            {
                if ((this.mSharepointTools == null))
                {
                    this.mSharepointTools = new SharepointTools(this);
                }
                return this.mSharepointTools;
            }
        }
        
        public StorageTools StorageTools
        {
            get
            {
                if ((this.mStorageTools == null))
                {
                    this.mStorageTools = new StorageTools(this);
                }
                return this.mStorageTools;
            }
        }
        
        public UtilityTools UtilityTools
        {
            get
            {
                if ((this.mUtilityTools == null))
                {
                    this.mUtilityTools = new UtilityTools(this);
                }
                return this.mUtilityTools;
            }
        }
        #endregion
        
        #region Fields
        private FlowTools mFlowTools;
        
        private DataTools mDataTools;
        
        private Database mDatabase;
        
        private FileAndFTP mFileAndFTP;
        
        private HTTPWebMethods mHTTPWebMethods;
        
        private LoopTools mLoopTools;
        
        private RecordsetTools mRecordsetTools;
        
        private ResourceTools mResourceTools;
        
        private ScriptingTools mScriptingTools;
        
        private SharepointTools mSharepointTools;
        
        private StorageTools mStorageTools;
        
        private UtilityTools mUtilityTools;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FlowTools : WpfGroup
    {
        
        public FlowTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Control Flow";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Decision Decision
        {
            get
            {
                if ((this.mDecision == null))
                {
                    this.mDecision = new Decision(this);
                }
                return this.mDecision;
            }
        }
        
        public Switch Switch
        {
            get
            {
                if ((this.mSwitch == null))
                {
                    this.mSwitch = new Switch(this);
                }
                return this.mSwitch;
            }
        }
        
        public Sequence Sequence
        {
            get
            {
                if ((this.mSequence == null))
                {
                    this.mSequence = new Sequence(this);
                }
                return this.mSequence;
            }
        }
        #endregion
        
        #region Fields
        private Decision mDecision;
        
        private Switch mSwitch;
        
        private Sequence mSequence;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Decision : WpfListItem
    {
        
        public Decision(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Decision";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DecisionImage
        {
            get
            {
                if ((this.mDecisionImage == null))
                {
                    this.mDecisionImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDecisionImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Decision";
                    this.mDecisionImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDecisionImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDecisionImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Switch : WpfListItem
    {
        
        public Switch(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Switch";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SwitchImage
        {
            get
            {
                if ((this.mSwitchImage == null))
                {
                    this.mSwitchImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSwitchImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Switch";
                    this.mSwitchImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSwitchImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSwitchImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Sequence : WpfListItem
    {
        
        public Sequence(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Sequence";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SequenceImage
        {
            get
            {
                if ((this.mSequenceImage == null))
                {
                    this.mSequenceImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSequenceImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Sequence";
                    this.mSequenceImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSequenceImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSequenceImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataTools : WpfGroup
    {
        
        public DataTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Data";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public MultiAssign MultiAssign
        {
            get
            {
                if ((this.mMultiAssign == null))
                {
                    this.mMultiAssign = new MultiAssign(this);
                }
                return this.mMultiAssign;
            }
        }
        
        public DataMerge DataMerge
        {
            get
            {
                if ((this.mDataMerge == null))
                {
                    this.mDataMerge = new DataMerge(this);
                }
                return this.mDataMerge;
            }
        }
        
        public BaseConvert BaseConvert
        {
            get
            {
                if ((this.mBaseConvert == null))
                {
                    this.mBaseConvert = new BaseConvert(this);
                }
                return this.mBaseConvert;
            }
        }
        
        public CaseConvert CaseConvert
        {
            get
            {
                if ((this.mCaseConvert == null))
                {
                    this.mCaseConvert = new CaseConvert(this);
                }
                return this.mCaseConvert;
            }
        }
        
        public DataSplit DataSplit
        {
            get
            {
                if ((this.mDataSplit == null))
                {
                    this.mDataSplit = new DataSplit(this);
                }
                return this.mDataSplit;
            }
        }
        
        public FindIndex FindIndex
        {
            get
            {
                if ((this.mFindIndex == null))
                {
                    this.mFindIndex = new FindIndex(this);
                }
                return this.mFindIndex;
            }
        }
        
        public Replace Replace
        {
            get
            {
                if ((this.mReplace == null))
                {
                    this.mReplace = new Replace(this);
                }
                return this.mReplace;
            }
        }
        #endregion
        
        #region Fields
        private MultiAssign mMultiAssign;
        
        private DataMerge mDataMerge;
        
        private BaseConvert mBaseConvert;
        
        private CaseConvert mCaseConvert;
        
        private DataSplit mDataSplit;
        
        private FindIndex mFindIndex;
        
        private Replace mReplace;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MultiAssign : WpfListItem
    {
        
        public MultiAssign(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Assign";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage AssignImage
        {
            get
            {
                if ((this.mAssignImage == null))
                {
                    this.mAssignImage = new WpfImage(this);
                    #region Search Criteria
                    this.mAssignImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Assign";
                    this.mAssignImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAssignImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mAssignImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataMerge : WpfListItem
    {
        
        public DataMerge(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Data Merge";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DataMergeImage
        {
            get
            {
                if ((this.mDataMergeImage == null))
                {
                    this.mDataMergeImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDataMergeImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Data Merge";
                    this.mDataMergeImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDataMergeImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDataMergeImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class BaseConvert : WpfListItem
    {
        
        public BaseConvert(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Base Convert";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage BaseConvertImage
        {
            get
            {
                if ((this.mBaseConvertImage == null))
                {
                    this.mBaseConvertImage = new WpfImage(this);
                    #region Search Criteria
                    this.mBaseConvertImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Base Convert";
                    this.mBaseConvertImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mBaseConvertImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mBaseConvertImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CaseConvert : WpfListItem
    {
        
        public CaseConvert(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Case Convert";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CaseConvertImage
        {
            get
            {
                if ((this.mCaseConvertImage == null))
                {
                    this.mCaseConvertImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCaseConvertImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Case Convert";
                    this.mCaseConvertImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCaseConvertImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCaseConvertImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataSplit : WpfListItem
    {
        
        public DataSplit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Data Split";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DataSplitImage
        {
            get
            {
                if ((this.mDataSplitImage == null))
                {
                    this.mDataSplitImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDataSplitImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Data Split";
                    this.mDataSplitImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDataSplitImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDataSplitImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FindIndex : WpfListItem
    {
        
        public FindIndex(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Find Index";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage FindIndexImage
        {
            get
            {
                if ((this.mFindIndexImage == null))
                {
                    this.mFindIndexImage = new WpfImage(this);
                    #region Search Criteria
                    this.mFindIndexImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Find Index";
                    this.mFindIndexImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFindIndexImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mFindIndexImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Replace : WpfListItem
    {
        
        public Replace(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Replace";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ReplaceImage
        {
            get
            {
                if ((this.mReplaceImage == null))
                {
                    this.mReplaceImage = new WpfImage(this);
                    #region Search Criteria
                    this.mReplaceImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Replace";
                    this.mReplaceImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReplaceImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mReplaceImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Database : WpfGroup
    {
        
        public Database(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Database";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public MySQL MySQL
        {
            get
            {
                if ((this.mMySQL == null))
                {
                    this.mMySQL = new MySQL(this);
                }
                return this.mMySQL;
            }
        }
        
        public SQLBulkInsert SQLBulkInsert
        {
            get
            {
                if ((this.mSQLBulkInsert == null))
                {
                    this.mSQLBulkInsert = new SQLBulkInsert(this);
                }
                return this.mSQLBulkInsert;
            }
        }
        
        public SQLServer SQLServer
        {
            get
            {
                if ((this.mSQLServer == null))
                {
                    this.mSQLServer = new SQLServer(this);
                }
                return this.mSQLServer;
            }
        }
        #endregion
        
        #region Fields
        private MySQL mMySQL;
        
        private SQLBulkInsert mSQLBulkInsert;
        
        private SQLServer mSQLServer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MySQL : WpfListItem
    {
        
        public MySQL(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "MySQL";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage MySQLImage
        {
            get
            {
                if ((this.mMySQLImage == null))
                {
                    this.mMySQLImage = new WpfImage(this);
                    #region Search Criteria
                    this.mMySQLImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "MySQL";
                    this.mMySQLImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMySQLImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mMySQLImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SQLBulkInsert : WpfListItem
    {
        
        public SQLBulkInsert(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "SQL Bulk Insert";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SQLBulkInsertImage
        {
            get
            {
                if ((this.mSQLBulkInsertImage == null))
                {
                    this.mSQLBulkInsertImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSQLBulkInsertImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "SQL Bulk Insert";
                    this.mSQLBulkInsertImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSQLBulkInsertImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSQLBulkInsertImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SQLServer : WpfListItem
    {
        
        public SQLServer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "SQL Server";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SQLServerImage
        {
            get
            {
                if ((this.mSQLServerImage == null))
                {
                    this.mSQLServerImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSQLServerImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "SQL Server";
                    this.mSQLServerImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSQLServerImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSQLServerImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FileAndFTP : WpfGroup
    {
        
        public FileAndFTP(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "File, FTP, FTPS & SFTP";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Create Create
        {
            get
            {
                if ((this.mCreate == null))
                {
                    this.mCreate = new Create(this);
                }
                return this.mCreate;
            }
        }
        
        public Copy Copy
        {
            get
            {
                if ((this.mCopy == null))
                {
                    this.mCopy = new Copy(this);
                }
                return this.mCopy;
            }
        }
        
        public Delete Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new Delete(this);
                }
                return this.mDelete;
            }
        }
        
        public Move Move
        {
            get
            {
                if ((this.mMove == null))
                {
                    this.mMove = new Move(this);
                }
                return this.mMove;
            }
        }
        
        public ReadFolder ReadFolder
        {
            get
            {
                if ((this.mReadFolder == null))
                {
                    this.mReadFolder = new ReadFolder(this);
                }
                return this.mReadFolder;
            }
        }
        
        public ReadFile ReadFile
        {
            get
            {
                if ((this.mReadFile == null))
                {
                    this.mReadFile = new ReadFile(this);
                }
                return this.mReadFile;
            }
        }
        
        public WriteFile WriteFile
        {
            get
            {
                if ((this.mWriteFile == null))
                {
                    this.mWriteFile = new WriteFile(this);
                }
                return this.mWriteFile;
            }
        }
        
        public Rename Rename
        {
            get
            {
                if ((this.mRename == null))
                {
                    this.mRename = new Rename(this);
                }
                return this.mRename;
            }
        }
        
        public UnZip UnZip
        {
            get
            {
                if ((this.mUnZip == null))
                {
                    this.mUnZip = new UnZip(this);
                }
                return this.mUnZip;
            }
        }
        
        public Zip Zip
        {
            get
            {
                if ((this.mZip == null))
                {
                    this.mZip = new Zip(this);
                }
                return this.mZip;
            }
        }
        #endregion
        
        #region Fields
        private Create mCreate;
        
        private Copy mCopy;
        
        private Delete mDelete;
        
        private Move mMove;
        
        private ReadFolder mReadFolder;
        
        private ReadFile mReadFile;
        
        private WriteFile mWriteFile;
        
        private Rename mRename;
        
        private UnZip mUnZip;
        
        private Zip mZip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Create : WpfListItem
    {
        
        public Create(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Create";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CreateImage
        {
            get
            {
                if ((this.mCreateImage == null))
                {
                    this.mCreateImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCreateImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Create";
                    this.mCreateImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCreateImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCreateImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Copy : WpfListItem
    {
        
        public Copy(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Copy";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CopyImage
        {
            get
            {
                if ((this.mCopyImage == null))
                {
                    this.mCopyImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCopyImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Copy";
                    this.mCopyImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCopyImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCopyImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Delete : WpfListItem
    {
        
        public Delete(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Delete";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DeleteImage
        {
            get
            {
                if ((this.mDeleteImage == null))
                {
                    this.mDeleteImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Delete";
                    this.mDeleteImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDeleteImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Move : WpfListItem
    {
        
        public Move(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Move";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage MoveImage
        {
            get
            {
                if ((this.mMoveImage == null))
                {
                    this.mMoveImage = new WpfImage(this);
                    #region Search Criteria
                    this.mMoveImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Move";
                    this.mMoveImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMoveImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mMoveImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ReadFolder : WpfListItem
    {
        
        public ReadFolder(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Read Folder";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ReadFolderImage
        {
            get
            {
                if ((this.mReadFolderImage == null))
                {
                    this.mReadFolderImage = new WpfImage(this);
                    #region Search Criteria
                    this.mReadFolderImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Read Folder";
                    this.mReadFolderImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReadFolderImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mReadFolderImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ReadFile : WpfListItem
    {
        
        public ReadFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Read File";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ReadFileImage
        {
            get
            {
                if ((this.mReadFileImage == null))
                {
                    this.mReadFileImage = new WpfImage(this);
                    #region Search Criteria
                    this.mReadFileImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Read File";
                    this.mReadFileImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReadFileImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mReadFileImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WriteFile : WpfListItem
    {
        
        public WriteFile(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Write File";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage WriteFileImage
        {
            get
            {
                if ((this.mWriteFileImage == null))
                {
                    this.mWriteFileImage = new WpfImage(this);
                    #region Search Criteria
                    this.mWriteFileImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Write File";
                    this.mWriteFileImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWriteFileImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mWriteFileImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Rename : WpfListItem
    {
        
        public Rename(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Rename";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage RenameImage
        {
            get
            {
                if ((this.mRenameImage == null))
                {
                    this.mRenameImage = new WpfImage(this);
                    #region Search Criteria
                    this.mRenameImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Rename";
                    this.mRenameImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRenameImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mRenameImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UnZip : WpfListItem
    {
        
        public UnZip(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "UnZip";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage UnZipImage
        {
            get
            {
                if ((this.mUnZipImage == null))
                {
                    this.mUnZipImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUnZipImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "UnZip";
                    this.mUnZipImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnZipImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUnZipImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Zip : WpfListItem
    {
        
        public Zip(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Zip";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ZipImage
        {
            get
            {
                if ((this.mZipImage == null))
                {
                    this.mZipImage = new WpfImage(this);
                    #region Search Criteria
                    this.mZipImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Zip";
                    this.mZipImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mZipImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mZipImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class HTTPWebMethods : WpfGroup
    {
        
        public HTTPWebMethods(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "HTTP Web Methods";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DELETE1 DELETE
        {
            get
            {
                if ((this.mDELETE == null))
                {
                    this.mDELETE = new DELETE1(this);
                }
                return this.mDELETE;
            }
        }
        
        public GET GET
        {
            get
            {
                if ((this.mGET == null))
                {
                    this.mGET = new GET(this);
                }
                return this.mGET;
            }
        }
        
        public POST POST
        {
            get
            {
                if ((this.mPOST == null))
                {
                    this.mPOST = new POST(this);
                }
                return this.mPOST;
            }
        }
        
        public PUT PUT
        {
            get
            {
                if ((this.mPUT == null))
                {
                    this.mPUT = new PUT(this);
                }
                return this.mPUT;
            }
        }
        #endregion
        
        #region Fields
        private DELETE1 mDELETE;
        
        private GET mGET;
        
        private POST mPOST;
        
        private PUT mPUT;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DELETE1 : WpfListItem
    {
        
        public DELETE1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "DELETE";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DELETEImage
        {
            get
            {
                if ((this.mDELETEImage == null))
                {
                    this.mDELETEImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDELETEImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DELETE";
                    this.mDELETEImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDELETEImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDELETEImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class GET : WpfListItem
    {
        
        public GET(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "GET";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage GETImage
        {
            get
            {
                if ((this.mGETImage == null))
                {
                    this.mGETImage = new WpfImage(this);
                    #region Search Criteria
                    this.mGETImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "GET";
                    this.mGETImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mGETImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mGETImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class POST : WpfListItem
    {
        
        public POST(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "POST";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage POSTImage
        {
            get
            {
                if ((this.mPOSTImage == null))
                {
                    this.mPOSTImage = new WpfImage(this);
                    #region Search Criteria
                    this.mPOSTImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "POST";
                    this.mPOSTImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPOSTImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mPOSTImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PUT : WpfListItem
    {
        
        public PUT(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "PUT";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage PUTImage
        {
            get
            {
                if ((this.mPUTImage == null))
                {
                    this.mPUTImage = new WpfImage(this);
                    #region Search Criteria
                    this.mPUTImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "PUT";
                    this.mPUTImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPUTImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mPUTImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LoopTools : WpfGroup
    {
        
        public LoopTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Loop Constructs";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ForEach ForEach
        {
            get
            {
                if ((this.mForEach == null))
                {
                    this.mForEach = new ForEach(this);
                }
                return this.mForEach;
            }
        }
        #endregion
        
        #region Fields
        private ForEach mForEach;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ForEach : WpfListItem
    {
        
        public ForEach(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "ForEach";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ForEachImage
        {
            get
            {
                if ((this.mForEachImage == null))
                {
                    this.mForEachImage = new WpfImage(this);
                    #region Search Criteria
                    this.mForEachImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "ForEach";
                    this.mForEachImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mForEachImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mForEachImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetTools : WpfGroup
    {
        
        public RecordsetTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Recordset";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Length Length
        {
            get
            {
                if ((this.mLength == null))
                {
                    this.mLength = new Length(this);
                }
                return this.mLength;
            }
        }
        
        public FindRecords FindRecords
        {
            get
            {
                if ((this.mFindRecords == null))
                {
                    this.mFindRecords = new FindRecords(this);
                }
                return this.mFindRecords;
            }
        }
        
        public Delete2 Delete
        {
            get
            {
                if ((this.mDelete == null))
                {
                    this.mDelete = new Delete2(this);
                }
                return this.mDelete;
            }
        }
        
        public Sort Sort
        {
            get
            {
                if ((this.mSort == null))
                {
                    this.mSort = new Sort(this);
                }
                return this.mSort;
            }
        }
        
        public Count Count
        {
            get
            {
                if ((this.mCount == null))
                {
                    this.mCount = new Count(this);
                }
                return this.mCount;
            }
        }
        
        public UniqueRecords UniqueRecords
        {
            get
            {
                if ((this.mUniqueRecords == null))
                {
                    this.mUniqueRecords = new UniqueRecords(this);
                }
                return this.mUniqueRecords;
            }
        }
        #endregion
        
        #region Fields
        private Length mLength;
        
        private FindRecords mFindRecords;
        
        private Delete2 mDelete;
        
        private Sort mSort;
        
        private Count mCount;
        
        private UniqueRecords mUniqueRecords;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Length : WpfListItem
    {
        
        public Length(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Length";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage LengthImage
        {
            get
            {
                if ((this.mLengthImage == null))
                {
                    this.mLengthImage = new WpfImage(this);
                    #region Search Criteria
                    this.mLengthImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Length";
                    this.mLengthImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLengthImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mLengthImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FindRecords : WpfListItem
    {
        
        public FindRecords(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Find Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage FindRecordsImage
        {
            get
            {
                if ((this.mFindRecordsImage == null))
                {
                    this.mFindRecordsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mFindRecordsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Find Records";
                    this.mFindRecordsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFindRecordsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mFindRecordsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Delete2 : WpfListItem
    {
        
        public Delete2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Delete";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DeleteImage
        {
            get
            {
                if ((this.mDeleteImage == null))
                {
                    this.mDeleteImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Delete";
                    this.mDeleteImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDeleteImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Sort : WpfListItem
    {
        
        public Sort(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Sort";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SortImage
        {
            get
            {
                if ((this.mSortImage == null))
                {
                    this.mSortImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSortImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Sort";
                    this.mSortImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSortImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSortImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Count : WpfListItem
    {
        
        public Count(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Count";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CountImage
        {
            get
            {
                if ((this.mCountImage == null))
                {
                    this.mCountImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCountImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Count";
                    this.mCountImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCountImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCountImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UniqueRecords : WpfListItem
    {
        
        public UniqueRecords(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Unique Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage UniqueRecordsImage
        {
            get
            {
                if ((this.mUniqueRecordsImage == null))
                {
                    this.mUniqueRecordsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUniqueRecordsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Unique Records";
                    this.mUniqueRecordsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUniqueRecordsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUniqueRecordsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourceTools : WpfGroup
    {
        
        public ResourceTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Resources";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DotNetDLLConnector DotNetDLLConnector
        {
            get
            {
                if ((this.mDotNetDLLConnector == null))
                {
                    this.mDotNetDLLConnector = new DotNetDLLConnector(this);
                }
                return this.mDotNetDLLConnector;
            }
        }
        
        public Service Service
        {
            get
            {
                if ((this.mService == null))
                {
                    this.mService = new Service(this);
                }
                return this.mService;
            }
        }
        #endregion
        
        #region Fields
        private DotNetDLLConnector mDotNetDLLConnector;
        
        private Service mService;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DotNetDLLConnector : WpfListItem
    {
        
        public DotNetDLLConnector(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "DotNet DLL Connector";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DotNetDLLConnectorImage
        {
            get
            {
                if ((this.mDotNetDLLConnectorImage == null))
                {
                    this.mDotNetDLLConnectorImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDotNetDLLConnectorImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DotNet DLL Connector";
                    this.mDotNetDLLConnectorImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDotNetDLLConnectorImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDotNetDLLConnectorImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Service : WpfListItem
    {
        
        public Service(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Service";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ServiceImage
        {
            get
            {
                if ((this.mServiceImage == null))
                {
                    this.mServiceImage = new WpfImage(this);
                    #region Search Criteria
                    this.mServiceImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Service";
                    this.mServiceImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mServiceImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mServiceImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScriptingTools : WpfGroup
    {
        
        public ScriptingTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Scripting";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public CMDScript CMDScript
        {
            get
            {
                if ((this.mCMDScript == null))
                {
                    this.mCMDScript = new CMDScript(this);
                }
                return this.mCMDScript;
            }
        }
        
        public Script Script
        {
            get
            {
                if ((this.mScript == null))
                {
                    this.mScript = new Script(this);
                }
                return this.mScript;
            }
        }
        #endregion
        
        #region Fields
        private CMDScript mCMDScript;
        
        private Script mScript;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CMDScript : WpfListItem
    {
        
        public CMDScript(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "CMD Script";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CMDScriptImage
        {
            get
            {
                if ((this.mCMDScriptImage == null))
                {
                    this.mCMDScriptImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCMDScriptImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "CMD Script";
                    this.mCMDScriptImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCMDScriptImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCMDScriptImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Script : WpfListItem
    {
        
        public Script(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Script";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ScriptImage
        {
            get
            {
                if ((this.mScriptImage == null))
                {
                    this.mScriptImage = new WpfImage(this);
                    #region Search Criteria
                    this.mScriptImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Script";
                    this.mScriptImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mScriptImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mScriptImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SharepointTools : WpfGroup
    {
        
        public SharepointTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Sharepoint";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public CreateListItems CreateListItems
        {
            get
            {
                if ((this.mCreateListItems == null))
                {
                    this.mCreateListItems = new CreateListItems(this);
                }
                return this.mCreateListItems;
            }
        }
        
        public DeleteListItems DeleteListItems
        {
            get
            {
                if ((this.mDeleteListItems == null))
                {
                    this.mDeleteListItems = new DeleteListItems(this);
                }
                return this.mDeleteListItems;
            }
        }
        
        public ReadListItems ReadListItems
        {
            get
            {
                if ((this.mReadListItems == null))
                {
                    this.mReadListItems = new ReadListItems(this);
                }
                return this.mReadListItems;
            }
        }
        
        public UpdateListItems UpdateListItems
        {
            get
            {
                if ((this.mUpdateListItems == null))
                {
                    this.mUpdateListItems = new UpdateListItems(this);
                }
                return this.mUpdateListItems;
            }
        }
        #endregion
        
        #region Fields
        private CreateListItems mCreateListItems;
        
        private DeleteListItems mDeleteListItems;
        
        private ReadListItems mReadListItems;
        
        private UpdateListItems mUpdateListItems;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateListItems : WpfListItem
    {
        
        public CreateListItems(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Create List Item(s)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CreateListItemsImage
        {
            get
            {
                if ((this.mCreateListItemsImage == null))
                {
                    this.mCreateListItemsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCreateListItemsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Create List Item(s)";
                    this.mCreateListItemsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCreateListItemsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCreateListItemsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeleteListItems : WpfListItem
    {
        
        public DeleteListItems(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Delete List Item(s)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DeleteListItemsImage
        {
            get
            {
                if ((this.mDeleteListItemsImage == null))
                {
                    this.mDeleteListItemsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteListItemsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Delete List Item(s)";
                    this.mDeleteListItemsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteListItemsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDeleteListItemsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ReadListItems : WpfListItem
    {
        
        public ReadListItems(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Read List Item(s)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage ReadListItemsImage
        {
            get
            {
                if ((this.mReadListItemsImage == null))
                {
                    this.mReadListItemsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mReadListItemsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Read List Item(s)";
                    this.mReadListItemsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReadListItemsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mReadListItemsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UpdateListItems : WpfListItem
    {
        
        public UpdateListItems(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Update List Item(s)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage UpdateListItemsImage
        {
            get
            {
                if ((this.mUpdateListItemsImage == null))
                {
                    this.mUpdateListItemsImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUpdateListItemsImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Update List Item(s)";
                    this.mUpdateListItemsImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUpdateListItemsImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUpdateListItemsImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StorageTools : WpfGroup
    {
        
        public StorageTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Storage";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DropboxDownload DropboxDownload
        {
            get
            {
                if ((this.mDropboxDownload == null))
                {
                    this.mDropboxDownload = new DropboxDownload(this);
                }
                return this.mDropboxDownload;
            }
        }
        
        public DropboxUpload DropboxUpload
        {
            get
            {
                if ((this.mDropboxUpload == null))
                {
                    this.mDropboxUpload = new DropboxUpload(this);
                }
                return this.mDropboxUpload;
            }
        }
        
        public SelectandApply SelectandApply
        {
            get
            {
                if ((this.mSelectandApply == null))
                {
                    this.mSelectandApply = new SelectandApply(this);
                }
                return this.mSelectandApply;
            }
        }
        #endregion
        
        #region Fields
        private DropboxDownload mDropboxDownload;
        
        private DropboxUpload mDropboxUpload;
        
        private SelectandApply mSelectandApply;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DropboxDownload : WpfListItem
    {
        
        public DropboxDownload(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Dropbox Download";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DropboxDownloadImage
        {
            get
            {
                if ((this.mDropboxDownloadImage == null))
                {
                    this.mDropboxDownloadImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDropboxDownloadImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Dropbox Download";
                    this.mDropboxDownloadImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDropboxDownloadImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDropboxDownloadImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DropboxUpload : WpfListItem
    {
        
        public DropboxUpload(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Dropbox Upload";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DropboxUploadImage
        {
            get
            {
                if ((this.mDropboxUploadImage == null))
                {
                    this.mDropboxUploadImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDropboxUploadImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Dropbox Upload";
                    this.mDropboxUploadImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDropboxUploadImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDropboxUploadImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SelectandApply : WpfListItem
    {
        
        public SelectandApply(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Select and apply";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SelectandApplyImage
        {
            get
            {
                if ((this.mSelectandApplyImage == null))
                {
                    this.mSelectandApplyImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSelectandApplyImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Select and apply";
                    this.mSelectandApplyImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSelectandApplyImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSelectandApplyImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UtilityTools : WpfGroup
    {
        
        public UtilityTools(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Utility";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public CreateJSON CreateJSON
        {
            get
            {
                if ((this.mCreateJSON == null))
                {
                    this.mCreateJSON = new CreateJSON(this);
                }
                return this.mCreateJSON;
            }
        }
        
        public Calculate Calculate
        {
            get
            {
                if ((this.mCalculate == null))
                {
                    this.mCalculate = new Calculate(this);
                }
                return this.mCalculate;
            }
        }
        
        public DateTime DateTime
        {
            get
            {
                if ((this.mDateTime == null))
                {
                    this.mDateTime = new DateTime(this);
                }
                return this.mDateTime;
            }
        }
        
        public DateTimeDifference DateTimeDifference
        {
            get
            {
                if ((this.mDateTimeDifference == null))
                {
                    this.mDateTimeDifference = new DateTimeDifference(this);
                }
                return this.mDateTimeDifference;
            }
        }
        
        public SysInfo SysInfo
        {
            get
            {
                if ((this.mSysInfo == null))
                {
                    this.mSysInfo = new SysInfo(this);
                }
                return this.mSysInfo;
            }
        }
        
        public FormatNumber FormatNumber
        {
            get
            {
                if ((this.mFormatNumber == null))
                {
                    this.mFormatNumber = new FormatNumber(this);
                }
                return this.mFormatNumber;
            }
        }
        
        public Random Random
        {
            get
            {
                if ((this.mRandom == null))
                {
                    this.mRandom = new Random(this);
                }
                return this.mRandom;
            }
        }
        
        public Email Email
        {
            get
            {
                if ((this.mEmail == null))
                {
                    this.mEmail = new Email(this);
                }
                return this.mEmail;
            }
        }
        
        public WebRequest WebRequest
        {
            get
            {
                if ((this.mWebRequest == null))
                {
                    this.mWebRequest = new WebRequest(this);
                }
                return this.mWebRequest;
            }
        }
        
        public Comment Comment
        {
            get
            {
                if ((this.mComment == null))
                {
                    this.mComment = new Comment(this);
                }
                return this.mComment;
            }
        }
        
        public XPath XPath
        {
            get
            {
                if ((this.mXPath == null))
                {
                    this.mXPath = new XPath(this);
                }
                return this.mXPath;
            }
        }
        #endregion
        
        #region Fields
        private CreateJSON mCreateJSON;
        
        private Calculate mCalculate;
        
        private DateTime mDateTime;
        
        private DateTimeDifference mDateTimeDifference;
        
        private SysInfo mSysInfo;
        
        private FormatNumber mFormatNumber;
        
        private Random mRandom;
        
        private Email mEmail;
        
        private WebRequest mWebRequest;
        
        private Comment mComment;
        
        private XPath mXPath;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateJSON : WpfListItem
    {
        
        public CreateJSON(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Create JSON";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CreateJSONImage
        {
            get
            {
                if ((this.mCreateJSONImage == null))
                {
                    this.mCreateJSONImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCreateJSONImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Create JSON";
                    this.mCreateJSONImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCreateJSONImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCreateJSONImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Calculate : WpfListItem
    {
        
        public Calculate(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Calculate";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CalculateImage
        {
            get
            {
                if ((this.mCalculateImage == null))
                {
                    this.mCalculateImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCalculateImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Calculate";
                    this.mCalculateImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCalculateImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCalculateImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DateTime : WpfListItem
    {
        
        public DateTime(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Date Time";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DateTimeImage
        {
            get
            {
                if ((this.mDateTimeImage == null))
                {
                    this.mDateTimeImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDateTimeImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Date Time";
                    this.mDateTimeImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDateTimeImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDateTimeImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DateTimeDifference : WpfListItem
    {
        
        public DateTimeDifference(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Date Time Diff";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage DateTimeDifferenceImage
        {
            get
            {
                if ((this.mDateTimeDifferenceImage == null))
                {
                    this.mDateTimeDifferenceImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDateTimeDifferenceImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Date Time Diff";
                    this.mDateTimeDifferenceImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDateTimeDifferenceImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mDateTimeDifferenceImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SysInfo : WpfListItem
    {
        
        public SysInfo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Sys Info";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage SysInfoImage
        {
            get
            {
                if ((this.mSysInfoImage == null))
                {
                    this.mSysInfoImage = new WpfImage(this);
                    #region Search Criteria
                    this.mSysInfoImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Sys Info";
                    this.mSysInfoImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSysInfoImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mSysInfoImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FormatNumber : WpfListItem
    {
        
        public FormatNumber(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Format Number";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage FormatNumberImage
        {
            get
            {
                if ((this.mFormatNumberImage == null))
                {
                    this.mFormatNumberImage = new WpfImage(this);
                    #region Search Criteria
                    this.mFormatNumberImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Format Number";
                    this.mFormatNumberImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFormatNumberImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mFormatNumberImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Random : WpfListItem
    {
        
        public Random(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Random";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage RandomImage
        {
            get
            {
                if ((this.mRandomImage == null))
                {
                    this.mRandomImage = new WpfImage(this);
                    #region Search Criteria
                    this.mRandomImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Random";
                    this.mRandomImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRandomImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mRandomImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Email : WpfListItem
    {
        
        public Email(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Email";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage EmailImage
        {
            get
            {
                if ((this.mEmailImage == null))
                {
                    this.mEmailImage = new WpfImage(this);
                    #region Search Criteria
                    this.mEmailImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Email";
                    this.mEmailImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEmailImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mEmailImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebRequest : WpfListItem
    {
        
        public WebRequest(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Web Request";
            #endregion
        }
        
        #region Properties
        public WpfImage WebRequestImage
        {
            get
            {
                if ((this.mWebRequestImage == null))
                {
                    this.mWebRequestImage = new WpfImage(this);
                    #region Search Criteria
                    this.mWebRequestImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Web Request";
                    this.mWebRequestImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebRequestImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mWebRequestImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Comment : WpfListItem
    {
        
        public Comment(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "Comment";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage CommentImage
        {
            get
            {
                if ((this.mCommentImage == null))
                {
                    this.mCommentImage = new WpfImage(this);
                    #region Search Criteria
                    this.mCommentImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "Comment";
                    this.mCommentImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCommentImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mCommentImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class XPath : WpfListItem
    {
        
        public XPath(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Studio.ViewModels.ToolBox.ToolDescriptorViewModel";
            this.SearchProperties[WpfListItem.PropertyNames.AutomationId] = "XPath";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage XPathImage
        {
            get
            {
                if ((this.mXPathImage == null))
                {
                    this.mXPathImage = new WpfImage(this);
                    #region Search Criteria
                    this.mXPathImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "XPath";
                    this.mXPathImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mXPathImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mXPathImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Help : WpfCustom
    {
        
        public Help(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Help";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DocumentorUnpinBtn
        {
            get
            {
                if ((this.mDocumentorUnpinBtn == null))
                {
                    this.mDocumentorUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mDocumentorUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mDocumentorUnpinBtn.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDocumentorUnpinBtn;
            }
        }
        
        public WpfControl HelpWindow
        {
            get
            {
                if ((this.mHelpWindow == null))
                {
                    this.mHelpWindow = new WpfControl(this);
                    #region Search Criteria
                    this.mHelpWindow.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mHelpWindow.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mHelpWindow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHelpWindow;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDocumentorUnpinBtn;
        
        private WpfControl mHelpWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitPaneMiddle : WpfCustom
    {
        
        public SplitPaneMiddle(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SplitPaneContent SplitPaneContent
        {
            get
            {
                if ((this.mSplitPaneContent == null))
                {
                    this.mSplitPaneContent = new SplitPaneContent(this);
                }
                return this.mSplitPaneContent;
            }
        }
        #endregion
        
        #region Fields
        private SplitPaneContent mSplitPaneContent;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitPaneContent : WpfCustom
    {
        
        public SplitPaneContent(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TabMan TabMan
        {
            get
            {
                if ((this.mTabMan == null))
                {
                    this.mTabMan = new TabMan(this);
                }
                return this.mTabMan;
            }
        }
        #endregion
        
        #region Fields
        private TabMan mTabMan;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TabMan : WpfTabList
    {
        
        public TabMan(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "UI_TabManager_AutoID";
            this.WindowTitles.Add("Warewolf");
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public StartPage StartPage
        {
            get
            {
                if ((this.mStartPage == null))
                {
                    this.mStartPage = new StartPage(this);
                }
                return this.mStartPage;
            }
        }
        
        public WpfTabPage HelpTab
        {
            get
            {
                if ((this.mHelpTab == null))
                {
                    this.mHelpTab = new WpfTabPage(this);
                    #region Search Criteria
                    this.mHelpTab.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Studio.ViewModels.Help.HelpViewModel";
                    this.mHelpTab.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHelpTab;
            }
        }
        
        public DeployTab DeployTab
        {
            get
            {
                if ((this.mDeployTab == null))
                {
                    this.mDeployTab = new DeployTab(this);
                }
                return this.mDeployTab;
            }
        }
        
        public WebConnectorWizardTab WebConnectorWizardTab
        {
            get
            {
                if ((this.mWebConnectorWizardTab == null))
                {
                    this.mWebConnectorWizardTab = new WebConnectorWizardTab(this);
                }
                return this.mWebConnectorWizardTab;
            }
        }
        
        public ServerSourceWizardTab ServerSourceWizardTab
        {
            get
            {
                if ((this.mServerSourceWizardTab == null))
                {
                    this.mServerSourceWizardTab = new ServerSourceWizardTab(this);
                }
                return this.mServerSourceWizardTab;
            }
        }
        
        public SchedulerTab SchedulerTab
        {
            get
            {
                if ((this.mSchedulerTab == null))
                {
                    this.mSchedulerTab = new SchedulerTab(this);
                }
                return this.mSchedulerTab;
            }
        }
        
        public SettingsTab SettingsTab
        {
            get
            {
                if ((this.mSettingsTab == null))
                {
                    this.mSettingsTab = new SettingsTab(this);
                }
                return this.mSettingsTab;
            }
        }
        
        public WorkflowTab WorkflowTab
        {
            get
            {
                if ((this.mWorkflowTab == null))
                {
                    this.mWorkflowTab = new WorkflowTab(this);
                }
                return this.mWorkflowTab;
            }
        }
        
        public DBConnectorWizardTab DBConnectorWizardTab
        {
            get
            {
                if ((this.mDBConnectorWizardTab == null))
                {
                    this.mDBConnectorWizardTab = new DBConnectorWizardTab(this);
                }
                return this.mDBConnectorWizardTab;
            }
        }
        
        public PluginConnectorWizardTab PluginConnectorWizardTab
        {
            get
            {
                if ((this.mPluginConnectorWizardTab == null))
                {
                    this.mPluginConnectorWizardTab = new PluginConnectorWizardTab(this);
                }
                return this.mPluginConnectorWizardTab;
            }
        }
        
        public FilesMenu FilesMenu
        {
            get
            {
                if ((this.mFilesMenu == null))
                {
                    this.mFilesMenu = new FilesMenu(this);
                }
                return this.mFilesMenu;
            }
        }
        
        public WpfButton NavigatorButton
        {
            get
            {
                if ((this.mNavigatorButton == null))
                {
                    this.mNavigatorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNavigatorButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "showNavigatorButton";
                    this.mNavigatorButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNavigatorButton;
            }
        }
        #endregion
        
        #region Fields
        private StartPage mStartPage;
        
        private WpfTabPage mHelpTab;
        
        private DeployTab mDeployTab;
        
        private WebConnectorWizardTab mWebConnectorWizardTab;
        
        private ServerSourceWizardTab mServerSourceWizardTab;
        
        private SchedulerTab mSchedulerTab;
        
        private SettingsTab mSettingsTab;
        
        private WorkflowTab mWorkflowTab;
        
        private DBConnectorWizardTab mDBConnectorWizardTab;
        
        private PluginConnectorWizardTab mPluginConnectorWizardTab;
        
        private FilesMenu mFilesMenu;
        
        private WpfButton mNavigatorButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class StartPage : WpfTabPage
    {
        
        public StartPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Studio.ViewModels.Help.HelpViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorksurfaceContext WorksurfaceContext
        {
            get
            {
                if ((this.mWorksurfaceContext == null))
                {
                    this.mWorksurfaceContext = new WorksurfaceContext(this);
                }
                return this.mWorksurfaceContext;
            }
        }
        #endregion
        
        #region Fields
        private WorksurfaceContext mWorksurfaceContext;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorksurfaceContext : WpfCustom
    {
        
        public WorksurfaceContext(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public BrowserHostPane BrowserHostPane
        {
            get
            {
                if ((this.mBrowserHostPane == null))
                {
                    this.mBrowserHostPane = new BrowserHostPane(this);
                }
                return this.mBrowserHostPane;
            }
        }
        #endregion
        
        #region Fields
        private BrowserHostPane mBrowserHostPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class BrowserHostPane : WpfPane
    {
        
        public BrowserHostPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.HwndHost";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "WebBrowserHost";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ItemClient ItemClient
        {
            get
            {
                if ((this.mItemClient == null))
                {
                    this.mItemClient = new ItemClient(this);
                }
                return this.mItemClient;
            }
        }
        #endregion
        
        #region Fields
        private ItemClient mItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ItemClient : WinClient
    {
        
        public ItemClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.ClassName] = "Internet Explorer_Server";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public CommunityPage CommunityPage
        {
            get
            {
                if ((this.mCommunityPage == null))
                {
                    this.mCommunityPage = new CommunityPage(this);
                }
                return this.mCommunityPage;
            }
        }
        #endregion
        
        #region Fields
        private CommunityPage mCommunityPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CommunityPage : HtmlDocument
    {
        
        public CommunityPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Community / Warewolf";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://community.warewolf.io/";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WrapPane WrapPane
        {
            get
            {
                if ((this.mWrapPane == null))
                {
                    this.mWrapPane = new WrapPane(this);
                }
                return this.mWrapPane;
            }
        }
        #endregion
        
        #region Fields
        private WrapPane mWrapPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WrapPane : HtmlDiv
    {
        
        public WrapPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "wrap";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "function showSigninPanel(locResult){ par";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"wrap\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public HtmlDiv KnowledgebasePane
        {
            get
            {
                if ((this.mKnowledgebasePane == null))
                {
                    this.mKnowledgebasePane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mKnowledgebasePane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mKnowledgebasePane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mKnowledgebasePane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = @"
                                                            Warewolf

                                                            Knowledge base

                                                            function
                                                          ";
                    this.mKnowledgebasePane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mKnowledgebasePane.FilterProperties[HtmlDiv.PropertyNames.Class] = "container";
                    this.mKnowledgebasePane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"container\"";
                    this.mKnowledgebasePane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
                    this.mKnowledgebasePane.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mKnowledgebasePane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mKnowledgebasePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeployTab : WpfTabPage
    {
        
        public DeployTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.DeployWorksurfaceViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DestinationServer DestinationServer
        {
            get
            {
                if ((this.mDestinationServer == null))
                {
                    this.mDestinationServer = new DestinationServer(this);
                }
                return this.mDestinationServer;
            }
        }
        
        public WpfTreeItem SourceServerName
        {
            get
            {
                if ((this.mSourceServerName == null))
                {
                    this.mSourceServerName = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mSourceServerName.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mSourceServerName.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourceServerName;
            }
        }
        
        public WpfButton TabCloseButton
        {
            get
            {
                if ((this.mTabCloseButton == null))
                {
                    this.mTabCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTabCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mTabCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTabCloseButton;
            }
        }
        #endregion
        
        #region Fields
        private DestinationServer mDestinationServer;
        
        private WpfTreeItem mSourceServerName;
        
        private WpfButton mTabCloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DestinationServer : WpfCustom
    {
        
        public DestinationServer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton RefreshSourceServerButton
        {
            get
            {
                if ((this.mRefreshSourceServerButton == null))
                {
                    this.mRefreshSourceServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshSourceServerButton.SearchProperties[WpfButton.PropertyNames.Name] = "";
                    this.mRefreshSourceServerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshSourceServerButton;
            }
        }
        
        public WpfText FilterText
        {
            get
            {
                if ((this.mFilterText == null))
                {
                    this.mFilterText = new WpfText(this);
                    #region Search Criteria
                    this.mFilterText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mFilterText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFilterText;
            }
        }
        
        public WpfButton ConnectControlDestination
        {
            get
            {
                if ((this.mConnectControlDestination == null))
                {
                    this.mConnectControlDestination = new WpfButton(this);
                    #region Search Criteria
                    this.mConnectControlDestination.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mConnectControlDestination.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnectControlDestination;
            }
        }
        
        public WpfHyperlink OverrideHyperlink
        {
            get
            {
                if ((this.mOverrideHyperlink == null))
                {
                    this.mOverrideHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mOverrideHyperlink.SearchProperties[WpfHyperlink.PropertyNames.AutomationId] = "OverridesCountView";
                    this.mOverrideHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOverrideHyperlink;
            }
        }
        
        public WpfHyperlink NewResourceHyperlink
        {
            get
            {
                if ((this.mNewResourceHyperlink == null))
                {
                    this.mNewResourceHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mNewResourceHyperlink.SearchProperties[WpfHyperlink.PropertyNames.AutomationId] = "NewResourcesView";
                    this.mNewResourceHyperlink.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewResourceHyperlink;
            }
        }
        
        public WpfButton EditSourceButton
        {
            get
            {
                if ((this.mEditSourceButton == null))
                {
                    this.mEditSourceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditSourceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SourceServerEditbtn_AutoID";
                    this.mEditSourceButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditSourceButton;
            }
        }
        
        public WpfButton SourceConnectButton
        {
            get
            {
                if ((this.mSourceConnectButton == null))
                {
                    this.mSourceConnectButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSourceConnectButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SourceConnectServerbtn_AutoID";
                    this.mSourceConnectButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourceConnectButton;
            }
        }
        
        public WpfButton EditDestinationButton
        {
            get
            {
                if ((this.mEditDestinationButton == null))
                {
                    this.mEditDestinationButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditDestinationButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_DestinationServerEditbtn_AutoID";
                    this.mEditDestinationButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditDestinationButton;
            }
        }
        
        public WpfButton ConnectDestinationButton
        {
            get
            {
                if ((this.mConnectDestinationButton == null))
                {
                    this.mConnectDestinationButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConnectDestinationButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_DestinationServerConnectbtn_AutoID";
                    this.mConnectDestinationButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnectDestinationButton;
            }
        }
        
        public WpfCustom SourceConnectControl
        {
            get
            {
                if ((this.mSourceConnectControl == null))
                {
                    this.mSourceConnectControl = new WpfCustom(this);
                    #region Search Criteria
                    this.mSourceConnectControl.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
                    this.mSourceConnectControl.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SourceConnectControl";
                    this.mSourceConnectControl.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourceConnectControl;
            }
        }
        
        public WpfButton ShowDependenciesButton
        {
            get
            {
                if ((this.mShowDependenciesButton == null))
                {
                    this.mShowDependenciesButton = new WpfButton(this);
                    #region Search Criteria
                    this.mShowDependenciesButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SelectDepbtn_AutoID";
                    this.mShowDependenciesButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mShowDependenciesButton;
            }
        }
        
        public WpfText ServicesText
        {
            get
            {
                if ((this.mServicesText == null))
                {
                    this.mServicesText = new WpfText(this);
                    #region Search Criteria
                    this.mServicesText.SearchProperties[WpfText.PropertyNames.Name] = "Services";
                    this.mServicesText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mServicesText;
            }
        }
        
        public WpfText ServiceCountText
        {
            get
            {
                if ((this.mServiceCountText == null))
                {
                    this.mServiceCountText = new WpfText(this);
                    #region Search Criteria
                    this.mServiceCountText.SearchProperties[WpfText.PropertyNames.AutomationId] = "WorkflowsCount";
                    this.mServiceCountText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mServiceCountText;
            }
        }
        
        public WpfText SourcesText
        {
            get
            {
                if ((this.mSourcesText == null))
                {
                    this.mSourcesText = new WpfText(this);
                    #region Search Criteria
                    this.mSourcesText.SearchProperties[WpfText.PropertyNames.Name] = "Sources";
                    this.mSourcesText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourcesText;
            }
        }
        
        public WpfText SourceCountText
        {
            get
            {
                if ((this.mSourceCountText == null))
                {
                    this.mSourceCountText = new WpfText(this);
                    #region Search Criteria
                    this.mSourceCountText.SearchProperties[WpfText.PropertyNames.AutomationId] = "SourcesCount";
                    this.mSourceCountText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourceCountText;
            }
        }
        
        public WpfText NewResourcesText
        {
            get
            {
                if ((this.mNewResourcesText == null))
                {
                    this.mNewResourcesText = new WpfText(this);
                    #region Search Criteria
                    this.mNewResourcesText.SearchProperties[WpfText.PropertyNames.Name] = "New Resources";
                    this.mNewResourcesText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewResourcesText;
            }
        }
        
        public WpfText OverrideText
        {
            get
            {
                if ((this.mOverrideText == null))
                {
                    this.mOverrideText = new WpfText(this);
                    #region Search Criteria
                    this.mOverrideText.SearchProperties[WpfText.PropertyNames.Name] = "Override";
                    this.mOverrideText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOverrideText;
            }
        }
        
        public WpfButton DeployButton
        {
            get
            {
                if ((this.mDeployButton == null))
                {
                    this.mDeployButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeployButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Deploybtn_AutoID";
                    this.mDeployButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeployButton;
            }
        }
        
        public WpfText SuccessMessageText
        {
            get
            {
                if ((this.mSuccessMessageText == null))
                {
                    this.mSuccessMessageText = new WpfText(this);
                    #region Search Criteria
                    this.mSuccessMessageText.SearchProperties[WpfText.PropertyNames.AutomationId] = "UI_DeploySelectTB_AutoID";
                    this.mSuccessMessageText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSuccessMessageText;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mRefreshSourceServerButton;
        
        private WpfText mFilterText;
        
        private WpfButton mConnectControlDestination;
        
        private WpfHyperlink mOverrideHyperlink;
        
        private WpfHyperlink mNewResourceHyperlink;
        
        private WpfButton mEditSourceButton;
        
        private WpfButton mSourceConnectButton;
        
        private WpfButton mEditDestinationButton;
        
        private WpfButton mConnectDestinationButton;
        
        private WpfCustom mSourceConnectControl;
        
        private WpfButton mShowDependenciesButton;
        
        private WpfText mServicesText;
        
        private WpfText mServiceCountText;
        
        private WpfText mSourcesText;
        
        private WpfText mSourceCountText;
        
        private WpfText mNewResourcesText;
        
        private WpfText mOverrideText;
        
        private WpfButton mDeployButton;
        
        private WpfText mSuccessMessageText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WebConnectorWizardTab : WpfTabPage
    {
        
        public WebConnectorWizardTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.WebServices.IWebService]" +
                "";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext1 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext1(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext1 mWorkSurfaceContext;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext1 : WpfCustom
    {
        
        public WorkSurfaceContext1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox RequestTypesComboBox
        {
            get
            {
                if ((this.mRequestTypesComboBox == null))
                {
                    this.mRequestTypesComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mRequestTypesComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "RequestTypes";
                    this.mRequestTypesComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRequestTypesComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mRequestTypesComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerSourceWizardTab : WpfTabPage
    {
        
        public ServerSourceWizardTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.IServerSource]";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext2 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext2(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        
        public WpfButton TabCloseButton
        {
            get
            {
                if ((this.mTabCloseButton == null))
                {
                    this.mTabCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTabCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mTabCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTabCloseButton;
            }
        }
        
        public WpfImage NoAuthMessageText
        {
            get
            {
                if ((this.mNoAuthMessageText == null))
                {
                    this.mNoAuthMessageText = new WpfImage(this);
                    #region Search Criteria
                    this.mNoAuthMessageText.SearchProperties[WpfImage.PropertyNames.HelpText] = "You are not authorized to edit this resource";
                    this.mNoAuthMessageText.SearchProperties[WpfImage.PropertyNames.Instance] = "2";
                    this.mNoAuthMessageText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNoAuthMessageText;
            }
        }
        
        public WpfText NewServerTitleText
        {
            get
            {
                if ((this.mNewServerTitleText == null))
                {
                    this.mNewServerTitleText = new WpfText(this);
                    #region Search Criteria
                    this.mNewServerTitleText.SearchProperties[WpfText.PropertyNames.Name] = "New Server Source";
                    this.mNewServerTitleText.SearchProperties[WpfText.PropertyNames.Instance] = "2";
                    this.mNewServerTitleText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewServerTitleText;
            }
        }
        
        public WpfImage NewServerBackground
        {
            get
            {
                if ((this.mNewServerBackground == null))
                {
                    this.mNewServerBackground = new WpfImage(this);
                    #region Search Criteria
                    this.mNewServerBackground.SearchProperties[WpfImage.PropertyNames.AutomationId] = "New Server Source";
                    this.mNewServerBackground.SearchProperties[WpfImage.PropertyNames.Instance] = "2";
                    this.mNewServerBackground.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewServerBackground;
            }
        }
        
        public WpfImage NoAuthImage
        {
            get
            {
                if ((this.mNoAuthImage == null))
                {
                    this.mNoAuthImage = new WpfImage(this);
                    #region Search Criteria
                    this.mNoAuthImage.SearchProperties[WpfImage.PropertyNames.HelpText] = "You are not authorized to edit this resource";
                    this.mNoAuthImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNoAuthImage;
            }
        }
        
        public WpfText AddressText
        {
            get
            {
                if ((this.mAddressText == null))
                {
                    this.mAddressText = new WpfText(this);
                    #region Search Criteria
                    this.mAddressText.SearchProperties[WpfText.PropertyNames.Name] = "New Server Source";
                    this.mAddressText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddressText;
            }
        }
        
        public WpfImage NewServerTabIcon
        {
            get
            {
                if ((this.mNewServerTabIcon == null))
                {
                    this.mNewServerTabIcon = new WpfImage(this);
                    #region Search Criteria
                    this.mNewServerTabIcon.SearchProperties[WpfImage.PropertyNames.AutomationId] = "New Server Source";
                    this.mNewServerTabIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewServerTabIcon;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext2 mWorkSurfaceContext;
        
        private WpfButton mTabCloseButton;
        
        private WpfImage mNoAuthMessageText;
        
        private WpfText mNewServerTitleText;
        
        private WpfImage mNewServerBackground;
        
        private WpfImage mNoAuthImage;
        
        private WpfText mAddressText;
        
        private WpfImage mNewServerTabIcon;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext2 : WpfCustom
    {
        
        public WorkSurfaceContext2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NewServerSourceWizard NewServerSourceWizard
        {
            get
            {
                if ((this.mNewServerSourceWizard == null))
                {
                    this.mNewServerSourceWizard = new NewServerSourceWizard(this);
                }
                return this.mNewServerSourceWizard;
            }
        }
        #endregion
        
        #region Fields
        private NewServerSourceWizard mNewServerSourceWizard;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewServerSourceWizard : WpfCustom
    {
        
        public NewServerSourceWizard(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ManageServerControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AuthTypeOptions AuthTypeOptions
        {
            get
            {
                if ((this.mAuthTypeOptions == null))
                {
                    this.mAuthTypeOptions = new AuthTypeOptions(this);
                }
                return this.mAuthTypeOptions;
            }
        }
        
        public ProtocolCombobox ProtocolCombobox
        {
            get
            {
                if ((this.mProtocolCombobox == null))
                {
                    this.mProtocolCombobox = new ProtocolCombobox(this);
                }
                return this.mProtocolCombobox;
            }
        }
        
        public AddressComboBox AddressComboBox
        {
            get
            {
                if ((this.mAddressComboBox == null))
                {
                    this.mAddressComboBox = new AddressComboBox(this);
                }
                return this.mAddressComboBox;
            }
        }
        
        public WpfButton TestConnectionButton
        {
            get
            {
                if ((this.mTestConnectionButton == null))
                {
                    this.mTestConnectionButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestConnectionButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestConnectionButton";
                    this.mTestConnectionButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestConnectionButton;
            }
        }
        
        public WpfText ErrorText
        {
            get
            {
                if ((this.mErrorText == null))
                {
                    this.mErrorText = new WpfText(this);
                    #region Search Criteria
                    this.mErrorText.SearchProperties[WpfText.PropertyNames.AutomationId] = "ErrorTextBlock";
                    this.mErrorText.WindowTitles.Add("Warewolf (DEV2\\ASHLEY.LEWIS)");
                    #endregion
                }
                return this.mErrorText;
            }
        }
        #endregion
        
        #region Fields
        private AuthTypeOptions mAuthTypeOptions;
        
        private ProtocolCombobox mProtocolCombobox;
        
        private AddressComboBox mAddressComboBox;
        
        private WpfButton mTestConnectionButton;
        
        private WpfText mErrorText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AuthTypeOptions : WpfCustom
    {
        
        public AuthTypeOptions(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ProtocolItems";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton WindowsAuth
        {
            get
            {
                if ((this.mWindowsAuth == null))
                {
                    this.mWindowsAuth = new WpfButton(this);
                    #region Search Criteria
                    this.mWindowsAuth.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mWindowsAuth.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWindowsAuth;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mWindowsAuth;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ProtocolCombobox : WpfCustom
    {
        
        public ProtocolCombobox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ProtocolItems";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ToggleDropdown
        {
            get
            {
                if ((this.mToggleDropdown == null))
                {
                    this.mToggleDropdown = new WpfButton(this);
                    #region Search Criteria
                    this.mToggleDropdown.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mToggleDropdown.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mToggleDropdown;
            }
        }
        
        public WpfText HttpSelectedItemText
        {
            get
            {
                if ((this.mHttpSelectedItemText == null))
                {
                    this.mHttpSelectedItemText = new WpfText(this);
                    #region Search Criteria
                    this.mHttpSelectedItemText.SearchProperties[WpfText.PropertyNames.Name] = "http";
                    this.mHttpSelectedItemText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHttpSelectedItemText;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mToggleDropdown;
        
        private WpfText mHttpSelectedItemText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddressComboBox : WpfComboBox
    {
        
        public AddressComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "AddressTextBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit AddressEditBox
        {
            get
            {
                if ((this.mAddressEditBox == null))
                {
                    this.mAddressEditBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mAddressEditBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Text";
                    this.mAddressEditBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddressEditBox;
            }
        }
        
        public WpfListItem TSTCIREMOTE
        {
            get
            {
                if ((this.mTSTCIREMOTE == null))
                {
                    this.mTSTCIREMOTE = new WpfListItem(this);
                    #region Search Criteria
                    this.mTSTCIREMOTE.SearchProperties[WpfListItem.PropertyNames.Name] = "TST-CI-REMOTE";
                    this.mTSTCIREMOTE.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTSTCIREMOTE;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mAddressEditBox;
        
        private WpfListItem mTSTCIREMOTE;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SchedulerTab : WpfCustom
    {
        
        public SchedulerTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SchedulerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SchedulerView_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox RunTaskCheckBox
        {
            get
            {
                if ((this.mRunTaskCheckBox == null))
                {
                    this.mRunTaskCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRunTaskCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_RunAsapCheckBox";
                    this.mRunTaskCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRunTaskCheckBox;
            }
        }
        
        public WpfText NumberofHistoryText
        {
            get
            {
                if ((this.mNumberofHistoryText == null))
                {
                    this.mNumberofHistoryText = new WpfText(this);
                    #region Search Criteria
                    this.mNumberofHistoryText.SearchProperties[WpfText.PropertyNames.Name] = "Number of History records to load (0 = all) ";
                    this.mNumberofHistoryText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNumberofHistoryText;
            }
        }
        
        public WpfEdit NumOfHistoryTextBoxEdit
        {
            get
            {
                if ((this.mNumOfHistoryTextBoxEdit == null))
                {
                    this.mNumOfHistoryTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mNumOfHistoryTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NumOfHisTextBox";
                    this.mNumOfHistoryTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNumOfHistoryTextBoxEdit;
            }
        }
        
        public WpfText UIRunasthefollowinguseText
        {
            get
            {
                if ((this.mUIRunasthefollowinguseText == null))
                {
                    this.mUIRunasthefollowinguseText = new WpfText(this);
                    #region Search Criteria
                    this.mUIRunasthefollowinguseText.SearchProperties[WpfText.PropertyNames.Name] = "Run as the following user account ";
                    this.mUIRunasthefollowinguseText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIRunasthefollowinguseText;
            }
        }
        
        public WpfText UsernameText
        {
            get
            {
                if ((this.mUsernameText == null))
                {
                    this.mUsernameText = new WpfText(this);
                    #region Search Criteria
                    this.mUsernameText.SearchProperties[WpfText.PropertyNames.AutomationId] = "UsernameTextBlock";
                    this.mUsernameText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUsernameText;
            }
        }
        
        public WpfEdit UserNameTextBoxEdit
        {
            get
            {
                if ((this.mUserNameTextBoxEdit == null))
                {
                    this.mUserNameTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUserNameTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_UserNameTextBox";
                    this.mUserNameTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUserNameTextBoxEdit;
            }
        }
        
        public WpfText PasswordText
        {
            get
            {
                if ((this.mPasswordText == null))
                {
                    this.mPasswordText = new WpfText(this);
                    #region Search Criteria
                    this.mPasswordText.SearchProperties[WpfText.PropertyNames.Name] = "Password ";
                    this.mPasswordText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasswordText;
            }
        }
        
        public WpfEdit PasswordTextBoxEdit
        {
            get
            {
                if ((this.mPasswordTextBoxEdit == null))
                {
                    this.mPasswordTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mPasswordTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_PasswordBox";
                    this.mPasswordTextBoxEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPasswordTextBoxEdit;
            }
        }
        
        public WpfText ErrorMessageText
        {
            get
            {
                if ((this.mErrorMessageText == null))
                {
                    this.mErrorMessageText = new WpfText(this);
                    #region Search Criteria
                    this.mErrorMessageText.SearchProperties[WpfText.PropertyNames.Name] = "Please select a workflow to schedule";
                    this.mErrorMessageText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mErrorMessageText;
            }
        }
        
        public WpfTable HistoryTable
        {
            get
            {
                if ((this.mHistoryTable == null))
                {
                    this.mHistoryTable = new WpfTable(this);
                    #region Search Criteria
                    this.mHistoryTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHistoryTable;
            }
        }
        
        public ConnectControl1 ConnectControl
        {
            get
            {
                if ((this.mConnectControl == null))
                {
                    this.mConnectControl = new ConnectControl1(this);
                }
                return this.mConnectControl;
            }
        }
        
        public SchedulesList SchedulesList
        {
            get
            {
                if ((this.mSchedulesList == null))
                {
                    this.mSchedulesList = new SchedulesList(this);
                }
                return this.mSchedulesList;
            }
        }
        
        public WpfText TriggerText
        {
            get
            {
                if ((this.mTriggerText == null))
                {
                    this.mTriggerText = new WpfText(this);
                    #region Search Criteria
                    this.mTriggerText.SearchProperties[WpfText.PropertyNames.Name] = "Triggered at ";
                    this.mTriggerText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTriggerText;
            }
        }
        
        public WpfText TriggerValueText
        {
            get
            {
                if ((this.mTriggerValueText == null))
                {
                    this.mTriggerValueText = new WpfText(this);
                    #region Search Criteria
                    this.mTriggerValueText.SearchProperties[WpfText.PropertyNames.Name] = "At 2:40 PM every day";
                    this.mTriggerValueText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTriggerValueText;
            }
        }
        
        public WpfButton EditTriggerButton
        {
            get
            {
                if ((this.mEditTriggerButton == null))
                {
                    this.mEditTriggerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditTriggerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_EditTriggerButton_AutoID";
                    this.mEditTriggerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditTriggerButton;
            }
        }
        
        public WpfText NameText
        {
            get
            {
                if ((this.mNameText == null))
                {
                    this.mNameText = new WpfText(this);
                    #region Search Criteria
                    this.mNameText.SearchProperties[WpfText.PropertyNames.Name] = "Name ";
                    this.mNameText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNameText;
            }
        }
        
        public WpfEdit NameTextbox
        {
            get
            {
                if ((this.mNameTextbox == null))
                {
                    this.mNameTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mNameTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextbox";
                    this.mNameTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNameTextbox;
            }
        }
        
        public WpfText StatusText
        {
            get
            {
                if ((this.mStatusText == null))
                {
                    this.mStatusText = new WpfText(this);
                    #region Search Criteria
                    this.mStatusText.SearchProperties[WpfText.PropertyNames.Name] = "Status ";
                    this.mStatusText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStatusText;
            }
        }
        
        public WpfRadioButton EnabledRadioButton
        {
            get
            {
                if ((this.mEnabledRadioButton == null))
                {
                    this.mEnabledRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mEnabledRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_EnabledRadioButton";
                    this.mEnabledRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEnabledRadioButton;
            }
        }
        
        public WpfRadioButton DisabledRadioButton
        {
            get
            {
                if ((this.mDisabledRadioButton == null))
                {
                    this.mDisabledRadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mDisabledRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "UI_DisabledRadioButton";
                    this.mDisabledRadioButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisabledRadioButton;
            }
        }
        
        public WpfText WorkflowText
        {
            get
            {
                if ((this.mWorkflowText == null))
                {
                    this.mWorkflowText = new WpfText(this);
                    #region Search Criteria
                    this.mWorkflowText.SearchProperties[WpfText.PropertyNames.Name] = "Workflow ";
                    this.mWorkflowText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWorkflowText;
            }
        }
        
        public WpfEdit WorkflowNameTextBox
        {
            get
            {
                if ((this.mWorkflowNameTextBox == null))
                {
                    this.mWorkflowNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mWorkflowNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_WorkflowNameTextBox_AutoID";
                    this.mWorkflowNameTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWorkflowNameTextBox;
            }
        }
        
        public WpfButton ResourcePickerButton
        {
            get
            {
                if ((this.mResourcePickerButton == null))
                {
                    this.mResourcePickerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mResourcePickerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_WorkflowSelectorButton_AutoID";
                    this.mResourcePickerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResourcePickerButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mRunTaskCheckBox;
        
        private WpfText mNumberofHistoryText;
        
        private WpfEdit mNumOfHistoryTextBoxEdit;
        
        private WpfText mUIRunasthefollowinguseText;
        
        private WpfText mUsernameText;
        
        private WpfEdit mUserNameTextBoxEdit;
        
        private WpfText mPasswordText;
        
        private WpfEdit mPasswordTextBoxEdit;
        
        private WpfText mErrorMessageText;
        
        private WpfTable mHistoryTable;
        
        private ConnectControl1 mConnectControl;
        
        private SchedulesList mSchedulesList;
        
        private WpfText mTriggerText;
        
        private WpfText mTriggerValueText;
        
        private WpfButton mEditTriggerButton;
        
        private WpfText mNameText;
        
        private WpfEdit mNameTextbox;
        
        private WpfText mStatusText;
        
        private WpfRadioButton mEnabledRadioButton;
        
        private WpfRadioButton mDisabledRadioButton;
        
        private WpfText mWorkflowText;
        
        private WpfEdit mWorkflowNameTextBox;
        
        private WpfButton mResourcePickerButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConnectControl1 : WpfCustom
    {
        
        public ConnectControl1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ConnectUserControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox ServerComboBox
        {
            get
            {
                if ((this.mServerComboBox == null))
                {
                    this.mServerComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mServerComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_SettingsServerComboBox_AutoID";
                    this.mServerComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mServerComboBox;
            }
        }
        
        public WpfButton EditServerButton
        {
            get
            {
                if ((this.mEditServerButton == null))
                {
                    this.mEditServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditServerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SettingsServerEditButton_AutoID";
                    this.mEditServerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditServerButton;
            }
        }
        
        public WpfButton ConnectServerButton
        {
            get
            {
                if ((this.mConnectServerButton == null))
                {
                    this.mConnectServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConnectServerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SettingsServerConnectButton_AutoID";
                    this.mConnectServerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnectServerButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mServerComboBox;
        
        private WpfButton mEditServerButton;
        
        private WpfButton mConnectServerButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SchedulesList : WpfList
    {
        
        public SchedulesList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "schedules";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UINameworkflow1ResourcListItem UINameworkflow1ResourcListItem
        {
            get
            {
                if ((this.mUINameworkflow1ResourcListItem == null))
                {
                    this.mUINameworkflow1ResourcListItem = new UINameworkflow1ResourcListItem(this);
                }
                return this.mUINameworkflow1ResourcListItem;
            }
        }
        
        public SchedulerListItem SchedulerListItem
        {
            get
            {
                if ((this.mSchedulerListItem == null))
                {
                    this.mSchedulerListItem = new SchedulerListItem(this);
                }
                return this.mSchedulerListItem;
            }
        }
        
        public NewTask NewTask
        {
            get
            {
                if ((this.mNewTask == null))
                {
                    this.mNewTask = new NewTask(this);
                }
                return this.mNewTask;
            }
        }
        
        public WpfButton DeleteTaskButton
        {
            get
            {
                if ((this.mDeleteTaskButton == null))
                {
                    this.mDeleteTaskButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteTaskButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_WorkflowSelectorButton_AutoID";
                    this.mDeleteTaskButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteTaskButton;
            }
        }
        #endregion
        
        #region Fields
        private UINameworkflow1ResourcListItem mUINameworkflow1ResourcListItem;
        
        private SchedulerListItem mSchedulerListItem;
        
        private NewTask mNewTask;
        
        private WpfButton mDeleteTaskButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINameworkflow1ResourcListItem : WpfListItem
    {
        
        public UINameworkflow1ResourcListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Name:workflow1 ResourceId:00000000-0000-0000-0000-000000000000";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox StatusCheckBox
        {
            get
            {
                if ((this.mStatusCheckBox == null))
                {
                    this.mStatusCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mStatusCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStatusCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mStatusCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SchedulerListItem : WpfListItem
    {
        
        public SchedulerListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Dev2.Scheduler.DummyResource";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public CreateTaskButton CreateTaskButton
        {
            get
            {
                if ((this.mCreateTaskButton == null))
                {
                    this.mCreateTaskButton = new CreateTaskButton(this);
                }
                return this.mCreateTaskButton;
            }
        }
        #endregion
        
        #region Fields
        private CreateTaskButton mCreateTaskButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateTaskButton : WpfButton
    {
        
        public CreateTaskButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton NewTaskButton
        {
            get
            {
                if ((this.mNewTaskButton == null))
                {
                    this.mNewTaskButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewTaskButton.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mNewTaskButton.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mNewTaskButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewTaskButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mNewTaskButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewTask : WpfListItem
    {
        
        public NewTask(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Name:New Task1 ResourceId:00000000-0000-0000-0000-000000000000";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox StatusCheckbox
        {
            get
            {
                if ((this.mStatusCheckbox == null))
                {
                    this.mStatusCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mStatusCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStatusCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mStatusCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SettingsTab : WpfCustom
    {
        
        public SettingsTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SettingsView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_SettingsView_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ConnectControl2 ConnectControl
        {
            get
            {
                if ((this.mConnectControl == null))
                {
                    this.mConnectControl = new ConnectControl2(this);
                }
                return this.mConnectControl;
            }
        }
        
        public UIItemTabList UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new UIItemTabList(this);
                }
                return this.mUIItemTabList;
            }
        }
        #endregion
        
        #region Fields
        private ConnectControl2 mConnectControl;
        
        private UIItemTabList mUIItemTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ConnectControl2 : WpfCustom
    {
        
        public ConnectControl2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ConnectControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ConnectUserControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox SettingsServerComboBox
        {
            get
            {
                if ((this.mSettingsServerComboBox == null))
                {
                    this.mSettingsServerComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mSettingsServerComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI_SettingsServerComboBox_AutoID";
                    this.mSettingsServerComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSettingsServerComboBox;
            }
        }
        
        public WpfButton EditServerButton
        {
            get
            {
                if ((this.mEditServerButton == null))
                {
                    this.mEditServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditServerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SettingsServerEditButton_AutoID";
                    this.mEditServerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditServerButton;
            }
        }
        
        public WpfButton ConnectServerButton
        {
            get
            {
                if ((this.mConnectServerButton == null))
                {
                    this.mConnectServerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mConnectServerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SettingsServerConnectButton_AutoID";
                    this.mConnectServerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mConnectServerButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mSettingsServerComboBox;
        
        private WpfButton mEditServerButton;
        
        private WpfButton mConnectServerButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemTabList : WpfTabList
    {
        
        public UIItemTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SecurityTab SecurityTab
        {
            get
            {
                if ((this.mSecurityTab == null))
                {
                    this.mSecurityTab = new SecurityTab(this);
                }
                return this.mSecurityTab;
            }
        }
        
        public WpfTabPage LoggingTab
        {
            get
            {
                if ((this.mLoggingTab == null))
                {
                    this.mLoggingTab = new WpfTabPage(this);
                    #region Search Criteria
                    this.mLoggingTab.SearchProperties[WpfTabPage.PropertyNames.Name] = "System.Windows.Controls.TabItem Header: Content:";
                    this.mLoggingTab.SearchProperties[WpfTabPage.PropertyNames.Instance] = "2";
                    this.mLoggingTab.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLoggingTab;
            }
        }
        #endregion
        
        #region Fields
        private SecurityTab mSecurityTab;
        
        private WpfTabPage mLoggingTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SecurityTab : WpfTabPage
    {
        
        public SecurityTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "System.Windows.Controls.TabItem Header: Content:";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SecurityWindow SecurityWindow
        {
            get
            {
                if ((this.mSecurityWindow == null))
                {
                    this.mSecurityWindow = new SecurityWindow(this);
                }
                return this.mSecurityWindow;
            }
        }
        #endregion
        
        #region Fields
        private SecurityWindow mSecurityWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SecurityWindow : WpfCustom
    {
        
        public SecurityWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SecurityView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SecurityViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ServerPermissions ServerPermissions
        {
            get
            {
                if ((this.mServerPermissions == null))
                {
                    this.mServerPermissions = new ServerPermissions(this);
                }
                return this.mServerPermissions;
            }
        }
        
        public ResourcePermissions ResourcePermissions
        {
            get
            {
                if ((this.mResourcePermissions == null))
                {
                    this.mResourcePermissions = new ResourcePermissions(this);
                }
                return this.mResourcePermissions;
            }
        }
        #endregion
        
        #region Fields
        private ServerPermissions mServerPermissions;
        
        private ResourcePermissions mResourcePermissions;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServerPermissions : WpfTable
    {
        
        public ServerPermissions(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "ServerPermissionsDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WpfCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
                    this.mUIFalseCell.SearchProperties[WpfCell.PropertyNames.Value] = "False";
                    this.mUIFalseCell.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfCell mUIFalseCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourcePermissions : WpfTable
    {
        
        public ResourcePermissions(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "ResourcePermissionsDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ResourceCell ResourceCell
        {
            get
            {
                if ((this.mResourceCell == null))
                {
                    this.mResourceCell = new ResourceCell(this);
                }
                return this.mResourceCell;
            }
        }
        
        public WpfCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new WpfCell(this);
                    #region Search Criteria
                    this.mUIFalseCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
                    this.mUIFalseCell.SearchProperties[WpfCell.PropertyNames.Value] = "False";
                    this.mUIFalseCell.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIFalseCell;
            }
        }
        #endregion
        
        #region Fields
        private ResourceCell mResourceCell;
        
        private WpfCell mUIFalseCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResourceCell : WpfCell
    {
        
        public ResourceCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ResourcePickerButton
        {
            get
            {
                if ((this.mResourcePickerButton == null))
                {
                    this.mResourcePickerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mResourcePickerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI__AddResourceButton_AutoID";
                    this.mResourcePickerButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResourcePickerButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mResourcePickerButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowTab : WpfTabPage
    {
        
        public WorkflowTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.Studio.ViewModels.Workflow.WorkflowDesignerViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton CloseButton
        {
            get
            {
                if ((this.mCloseButton == null))
                {
                    this.mCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCloseButton;
            }
        }
        
        public WorkSurfaceContext3 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext3(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mCloseButton;
        
        private WorkSurfaceContext3 mWorkSurfaceContext;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext3 : WpfCustom
    {
        
        public WorkSurfaceContext3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkflowDesignerView WorkflowDesignerView
        {
            get
            {
                if ((this.mWorkflowDesignerView == null))
                {
                    this.mWorkflowDesignerView = new WorkflowDesignerView(this);
                }
                return this.mWorkflowDesignerView;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowDesignerView mWorkflowDesignerView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowDesignerView : WpfCustom
    {
        
        public WorkflowDesignerView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DesignerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UserControl_1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ScrollViewerPane ScrollViewerPane
        {
            get
            {
                if ((this.mScrollViewerPane == null))
                {
                    this.mScrollViewerPane = new ScrollViewerPane(this);
                }
                return this.mScrollViewerPane;
            }
        }
        #endregion
        
        #region Fields
        private ScrollViewerPane mScrollViewerPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ScrollViewerPane : WpfPane
    {
        
        public ScrollViewerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "scrollViewer";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ActivityTypeDesigner ActivityTypeDesigner
        {
            get
            {
                if ((this.mActivityTypeDesigner == null))
                {
                    this.mActivityTypeDesigner = new ActivityTypeDesigner(this);
                }
                return this.mActivityTypeDesigner;
            }
        }
        #endregion
        
        #region Fields
        private ActivityTypeDesigner mActivityTypeDesigner;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ActivityTypeDesigner : WpfCustom
    {
        
        public ActivityTypeDesigner(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ActivityTypeDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActivityTypeDesigner";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkflowItemPresenter WorkflowItemPresenter
        {
            get
            {
                if ((this.mWorkflowItemPresenter == null))
                {
                    this.mWorkflowItemPresenter = new WorkflowItemPresenter(this);
                }
                return this.mWorkflowItemPresenter;
            }
        }
        #endregion
        
        #region Fields
        private WorkflowItemPresenter mWorkflowItemPresenter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkflowItemPresenter : WpfCustom
    {
        
        public WorkflowItemPresenter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WorkflowItemPresenter";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "WorkflowItemPresenter";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Flowchart Flowchart
        {
            get
            {
                if ((this.mFlowchart == null))
                {
                    this.mFlowchart = new Flowchart(this);
                }
                return this.mFlowchart;
            }
        }
        #endregion
        
        #region Fields
        private Flowchart mFlowchart;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Flowchart : WpfCustom
    {
        
        public Flowchart(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowchartDesigner";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public AssignObject AssignObject
        {
            get
            {
                if ((this.mAssignObject == null))
                {
                    this.mAssignObject = new AssignObject(this);
                }
                return this.mAssignObject;
            }
        }
        
        public WpfCustom WebGet
        {
            get
            {
                if ((this.mWebGet == null))
                {
                    this.mWebGet = new WpfCustom(this);
                    #region Search Criteria
                    this.mWebGet.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.GetWebRequestWithTimeOutDesigner";
                    this.mWebGet.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Web Request(GetWebRequestWithTimeOutDesigner)";
                    this.mWebGet.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebGet;
            }
        }
        
        public WpfCustom WebPost
        {
            get
            {
                if ((this.mWebPost == null))
                {
                    this.mWebPost = new WpfCustom(this);
                    #region Search Criteria
                    this.mWebPost.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WebServicePostDesigner";
                    this.mWebPost.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Web Post Request Connector(WebServicePostDesigner)";
                    this.mWebPost.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebPost;
            }
        }
        
        public WpfCustom DotNetDll
        {
            get
            {
                if ((this.mDotNetDll == null))
                {
                    this.mDotNetDll = new WpfCustom(this);
                    #region Search Criteria
                    this.mDotNetDll.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DotNetDllDesigner";
                    this.mDotNetDll.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DotNet DLL Connector(DotNetDllDesigner)";
                    this.mDotNetDll.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDotNetDll;
            }
        }
        
        public DataMerge1 DataMerge
        {
            get
            {
                if ((this.mDataMerge == null))
                {
                    this.mDataMerge = new DataMerge1(this);
                }
                return this.mDataMerge;
            }
        }
        
        public DataSplit1 DataSplit
        {
            get
            {
                if ((this.mDataSplit == null))
                {
                    this.mDataSplit = new DataSplit1(this);
                }
                return this.mDataSplit;
            }
        }
        
        public WpfCustom MySqlDatabase
        {
            get
            {
                if ((this.mMySqlDatabase == null))
                {
                    this.mMySqlDatabase = new WpfCustom(this);
                    #region Search Criteria
                    this.mMySqlDatabase.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MySqlDatabaseDesigner";
                    this.mMySqlDatabase.SearchProperties[WpfControl.PropertyNames.AutomationId] = "MySql Database(MySqlDatabaseDesigner)";
                    this.mMySqlDatabase.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMySqlDatabase;
            }
        }
        
        public WpfCustom SqlServerDatabase
        {
            get
            {
                if ((this.mSqlServerDatabase == null))
                {
                    this.mSqlServerDatabase = new WpfCustom(this);
                    #region Search Criteria
                    this.mSqlServerDatabase.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SqlServerDatabaseDesigner";
                    this.mSqlServerDatabase.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SQL Server Database(SqlServerDatabaseDesigner)";
                    this.mSqlServerDatabase.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSqlServerDatabase;
            }
        }
        
        public BaseConvert1 BaseConvert
        {
            get
            {
                if ((this.mBaseConvert == null))
                {
                    this.mBaseConvert = new BaseConvert1(this);
                }
                return this.mBaseConvert;
            }
        }
        
        public CaseConvert1 CaseConvert
        {
            get
            {
                if ((this.mCaseConvert == null))
                {
                    this.mCaseConvert = new CaseConvert1(this);
                }
                return this.mCaseConvert;
            }
        }
        
        public WpfCustom SubWorkflow
        {
            get
            {
                if ((this.mSubWorkflow == null))
                {
                    this.mSubWorkflow = new WpfCustom(this);
                    #region Search Criteria
                    this.mSubWorkflow.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceDesigner";
                    this.mSubWorkflow.SearchProperties.Add(new PropertyExpression(WpfControl.PropertyNames.AutomationId, "workflow", PropertyExpressionOperator.Contains));
                    this.mSubWorkflow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSubWorkflow;
            }
        }
        
        public WpfCustom PluginConnector
        {
            get
            {
                if ((this.mPluginConnector == null))
                {
                    this.mPluginConnector = new WpfCustom(this);
                    #region Search Criteria
                    this.mPluginConnector.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceDesigner";
                    this.mPluginConnector.SearchProperties[WpfControl.PropertyNames.AutomationId] = "wolf-829(ServiceDesigner)";
                    this.mPluginConnector.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPluginConnector;
            }
        }
        
        public WpfCustom WebConnector
        {
            get
            {
                if ((this.mWebConnector == null))
                {
                    this.mWebConnector = new WpfCustom(this);
                    #region Search Criteria
                    this.mWebConnector.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceDesigner";
                    this.mWebConnector.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Alert(ServiceDesigner)";
                    this.mWebConnector.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWebConnector;
            }
        }
        
        public WpfCustom DatabaseConnector
        {
            get
            {
                if ((this.mDatabaseConnector == null))
                {
                    this.mDatabaseConnector = new WpfCustom(this);
                    #region Search Criteria
                    this.mDatabaseConnector.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ServiceDesigner";
                    this.mDatabaseConnector.SearchProperties[WpfControl.PropertyNames.AutomationId] = "MyDataCon(ServiceDesigner)";
                    this.mDatabaseConnector.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDatabaseConnector;
            }
        }
        
        public WpfCustom ForEach
        {
            get
            {
                if ((this.mForEach == null))
                {
                    this.mForEach = new WpfCustom(this);
                    #region Search Criteria
                    this.mForEach.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ForeachDesigner";
                    this.mForEach.SearchProperties[WpfControl.PropertyNames.AutomationId] = "For Each(ForeachDesigner)";
                    this.mForEach.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mForEach;
            }
        }
        
        public WpfCustom Length
        {
            get
            {
                if ((this.mLength == null))
                {
                    this.mLength = new WpfCustom(this);
                    #region Search Criteria
                    this.mLength.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.RecordsLengthDesigner";
                    this.mLength.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Length(RecordsLengthDesigner)";
                    this.mLength.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mLength;
            }
        }
        
        public WpfCustom FindRecordsIndex
        {
            get
            {
                if ((this.mFindRecordsIndex == null))
                {
                    this.mFindRecordsIndex = new WpfCustom(this);
                    #region Search Criteria
                    this.mFindRecordsIndex.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FindRecordsMultipleCriteriaDesigner";
                    this.mFindRecordsIndex.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Find Record Index (1)(FindRecordsMultipleCriteriaDesigner)";
                    this.mFindRecordsIndex.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFindRecordsIndex;
            }
        }
        
        public WpfCustom DeleteRecord
        {
            get
            {
                if ((this.mDeleteRecord == null))
                {
                    this.mDeleteRecord = new WpfCustom(this);
                    #region Search Criteria
                    this.mDeleteRecord.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DeleteRecordsDesigner";
                    this.mDeleteRecord.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Delete Record(DeleteRecordsDesigner)";
                    this.mDeleteRecord.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteRecord;
            }
        }
        
        public WpfCustom SortRecords
        {
            get
            {
                if ((this.mSortRecords == null))
                {
                    this.mSortRecords = new WpfCustom(this);
                    #region Search Criteria
                    this.mSortRecords.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SortRecordsDesigner";
                    this.mSortRecords.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sort Records(SortRecordsDesigner)";
                    this.mSortRecords.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSortRecords;
            }
        }
        
        public WpfCustom CountRecordset
        {
            get
            {
                if ((this.mCountRecordset == null))
                {
                    this.mCountRecordset = new WpfCustom(this);
                    #region Search Criteria
                    this.mCountRecordset.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CountRecordsDesigner";
                    this.mCountRecordset.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Count Records(CountRecordsDesigner)";
                    this.mCountRecordset.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCountRecordset;
            }
        }
        
        public SqlBulkInsert1 SqlBulkInsert
        {
            get
            {
                if ((this.mSqlBulkInsert == null))
                {
                    this.mSqlBulkInsert = new SqlBulkInsert1(this);
                }
                return this.mSqlBulkInsert;
            }
        }
        
        public WpfCustom Unique
        {
            get
            {
                if ((this.mUnique == null))
                {
                    this.mUnique = new WpfCustom(this);
                    #region Search Criteria
                    this.mUnique.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UniqueRecordsDesigner";
                    this.mUnique.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Unique Records(UniqueRecordsDesigner)";
                    this.mUnique.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnique;
            }
        }
        
        public CreateJson1 CreateJson
        {
            get
            {
                if ((this.mCreateJson == null))
                {
                    this.mCreateJson = new CreateJson1(this);
                }
                return this.mCreateJson;
            }
        }
        
        public WpfCustom ExecuteCommandLine
        {
            get
            {
                if ((this.mExecuteCommandLine == null))
                {
                    this.mExecuteCommandLine = new WpfCustom(this);
                    #region Search Criteria
                    this.mExecuteCommandLine.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CommandLineDesigner";
                    this.mExecuteCommandLine.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Execute Command Line(CommandLineDesigner)";
                    this.mExecuteCommandLine.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExecuteCommandLine;
            }
        }
        
        public WpfCustom Scripting
        {
            get
            {
                if ((this.mScripting == null))
                {
                    this.mScripting = new WpfCustom(this);
                    #region Search Criteria
                    this.mScripting.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ScriptDesigner";
                    this.mScripting.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Script(ScriptDesigner)";
                    this.mScripting.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mScripting;
            }
        }
        
        public WpfCustom SharepointCreate
        {
            get
            {
                if ((this.mSharepointCreate == null))
                {
                    this.mSharepointCreate = new WpfCustom(this);
                    #region Search Criteria
                    this.mSharepointCreate.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharepointListCreateDesigner";
                    this.mSharepointCreate.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sharepoint Create List Item(SharepointListCreateDesigner)";
                    this.mSharepointCreate.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointCreate;
            }
        }
        
        public WpfCustom SharepointDelete
        {
            get
            {
                if ((this.mSharepointDelete == null))
                {
                    this.mSharepointDelete = new WpfCustom(this);
                    #region Search Criteria
                    this.mSharepointDelete.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharepointListDeleteDesigner";
                    this.mSharepointDelete.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sharepoint Delete List Item (1)(SharepointListDeleteDesigner)";
                    this.mSharepointDelete.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointDelete;
            }
        }
        
        public WpfCustom SharepointRead
        {
            get
            {
                if ((this.mSharepointRead == null))
                {
                    this.mSharepointRead = new WpfCustom(this);
                    #region Search Criteria
                    this.mSharepointRead.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharepointListReadDesigner";
                    this.mSharepointRead.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sharepoint Read List Item (1)(SharepointListReadDesigner)";
                    this.mSharepointRead.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointRead;
            }
        }
        
        public WpfCustom SharepointUpdate
        {
            get
            {
                if ((this.mSharepointUpdate == null))
                {
                    this.mSharepointUpdate = new WpfCustom(this);
                    #region Search Criteria
                    this.mSharepointUpdate.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SharepointListUpdateDesigner";
                    this.mSharepointUpdate.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sharepoint Update List Item (1)(SharepointListUpdateDesigner)";
                    this.mSharepointUpdate.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSharepointUpdate;
            }
        }
        
        public WpfCustom Calculate
        {
            get
            {
                if ((this.mCalculate == null))
                {
                    this.mCalculate = new WpfCustom(this);
                    #region Search Criteria
                    this.mCalculate.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CalculateDesigner";
                    this.mCalculate.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Calculate(CalculateDesigner)";
                    this.mCalculate.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCalculate;
            }
        }
        
        public WpfCustom DateTime
        {
            get
            {
                if ((this.mDateTime == null))
                {
                    this.mDateTime = new WpfCustom(this);
                    #region Search Criteria
                    this.mDateTime.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DateTimeDesigner";
                    this.mDateTime.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Date and Time(DateTimeDesigner)";
                    this.mDateTime.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDateTime;
            }
        }
        
        public WpfCustom DateTimeDifference
        {
            get
            {
                if ((this.mDateTimeDifference == null))
                {
                    this.mDateTimeDifference = new WpfCustom(this);
                    #region Search Criteria
                    this.mDateTimeDifference.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DateTimeDifferenceDesigner";
                    this.mDateTimeDifference.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Date and Time Difference(DateTimeDifferenceDesigner)";
                    this.mDateTimeDifference.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDateTimeDifference;
            }
        }
        
        public GatherSystemInfo GatherSystemInfo
        {
            get
            {
                if ((this.mGatherSystemInfo == null))
                {
                    this.mGatherSystemInfo = new GatherSystemInfo(this);
                }
                return this.mGatherSystemInfo;
            }
        }
        
        public WpfCustom FormatNumber
        {
            get
            {
                if ((this.mFormatNumber == null))
                {
                    this.mFormatNumber = new WpfCustom(this);
                    #region Search Criteria
                    this.mFormatNumber.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FormatNumberDesigner";
                    this.mFormatNumber.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Format Number(FormatNumberDesigner)";
                    this.mFormatNumber.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFormatNumber;
            }
        }
        
        public WpfCustom Random
        {
            get
            {
                if ((this.mRandom == null))
                {
                    this.mRandom = new WpfCustom(this);
                    #region Search Criteria
                    this.mRandom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.RandomDesigner";
                    this.mRandom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Random(RandomDesigner)";
                    this.mRandom.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRandom;
            }
        }
        
        public WpfCustom SendEmail
        {
            get
            {
                if ((this.mSendEmail == null))
                {
                    this.mSendEmail = new WpfCustom(this);
                    #region Search Criteria
                    this.mSendEmail.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.EmailDesigner";
                    this.mSendEmail.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Email(EmailDesigner)";
                    this.mSendEmail.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSendEmail;
            }
        }
        
        public WpfCustom Comment
        {
            get
            {
                if ((this.mComment == null))
                {
                    this.mComment = new WpfCustom(this);
                    #region Search Criteria
                    this.mComment.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CommentDesigner";
                    this.mComment.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Comment(CommentDesigner)";
                    this.mComment.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mComment;
            }
        }
        
        public XPath1 XPath
        {
            get
            {
                if ((this.mXPath == null))
                {
                    this.mXPath = new XPath1(this);
                }
                return this.mXPath;
            }
        }
        
        public WpfCustom DropBox_DOWNLOAD
        {
            get
            {
                if ((this.mDropBox_DOWNLOAD == null))
                {
                    this.mDropBox_DOWNLOAD = new WpfCustom(this);
                    #region Search Criteria
                    this.mDropBox_DOWNLOAD.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DropBoxDownloadDesigner";
                    this.mDropBox_DOWNLOAD.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DOWNLOAD from Dropbox(DropBoxDownloadDesigner)";
                    this.mDropBox_DOWNLOAD.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDropBox_DOWNLOAD;
            }
        }
        
        public WpfCustom DropBox_UPLOAD
        {
            get
            {
                if ((this.mDropBox_UPLOAD == null))
                {
                    this.mDropBox_UPLOAD = new WpfCustom(this);
                    #region Search Criteria
                    this.mDropBox_UPLOAD.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DropBoxUploadDesigner";
                    this.mDropBox_UPLOAD.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Upload to Dropbox(DropBoxUploadDesigner)";
                    this.mDropBox_UPLOAD.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDropBox_UPLOAD;
            }
        }
        
        public WpfCustom PathCreate
        {
            get
            {
                if ((this.mPathCreate == null))
                {
                    this.mPathCreate = new WpfCustom(this);
                    #region Search Criteria
                    this.mPathCreate.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CreateDesigner";
                    this.mPathCreate.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Create(CreateDesigner)";
                    this.mPathCreate.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPathCreate;
            }
        }
        
        public WpfCustom PathCopy
        {
            get
            {
                if ((this.mPathCopy == null))
                {
                    this.mPathCopy = new WpfCustom(this);
                    #region Search Criteria
                    this.mPathCopy.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CopyDesigner";
                    this.mPathCopy.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Copy(CopyDesigner)";
                    this.mPathCopy.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPathCopy;
            }
        }
        
        public WpfCustom PathDelete
        {
            get
            {
                if ((this.mPathDelete == null))
                {
                    this.mPathDelete = new WpfCustom(this);
                    #region Search Criteria
                    this.mPathDelete.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DeleteDesigner";
                    this.mPathDelete.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Delete(DeleteDesigner)";
                    this.mPathDelete.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPathDelete;
            }
        }
        
        public WpfCustom PathMove
        {
            get
            {
                if ((this.mPathMove == null))
                {
                    this.mPathMove = new WpfCustom(this);
                    #region Search Criteria
                    this.mPathMove.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MoveDesigner";
                    this.mPathMove.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Move(MoveDesigner)";
                    this.mPathMove.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPathMove;
            }
        }
        
        public WpfCustom FolderRead
        {
            get
            {
                if ((this.mFolderRead == null))
                {
                    this.mFolderRead = new WpfCustom(this);
                    #region Search Criteria
                    this.mFolderRead.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ReadFolderDesigner";
                    this.mFolderRead.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Read Folder(ReadFolderDesigner)";
                    this.mFolderRead.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFolderRead;
            }
        }
        
        public WpfCustom FileRead
        {
            get
            {
                if ((this.mFileRead == null))
                {
                    this.mFileRead = new WpfCustom(this);
                    #region Search Criteria
                    this.mFileRead.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ReadFileDesigner";
                    this.mFileRead.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Read File(ReadFileDesigner)";
                    this.mFileRead.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFileRead;
            }
        }
        
        public WpfCustom FileWrite
        {
            get
            {
                if ((this.mFileWrite == null))
                {
                    this.mFileWrite = new WpfCustom(this);
                    #region Search Criteria
                    this.mFileWrite.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WriteFileDesigner";
                    this.mFileWrite.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Write File(WriteFileDesigner)";
                    this.mFileWrite.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFileWrite;
            }
        }
        
        public WpfCustom PathRename
        {
            get
            {
                if ((this.mPathRename == null))
                {
                    this.mPathRename = new WpfCustom(this);
                    #region Search Criteria
                    this.mPathRename.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.RenameDesigner";
                    this.mPathRename.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Rename(RenameDesigner)";
                    this.mPathRename.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPathRename;
            }
        }
        
        public WpfCustom UnZip
        {
            get
            {
                if ((this.mUnZip == null))
                {
                    this.mUnZip = new WpfCustom(this);
                    #region Search Criteria
                    this.mUnZip.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.UnzipDesigner";
                    this.mUnZip.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Unzip(UnzipDesigner)";
                    this.mUnZip.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnZip;
            }
        }
        
        public WpfCustom Zip
        {
            get
            {
                if ((this.mZip == null))
                {
                    this.mZip = new WpfCustom(this);
                    #region Search Criteria
                    this.mZip.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ZipDesigner";
                    this.mZip.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Zip(ZipDesigner)";
                    this.mZip.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mZip;
            }
        }
        
        public WpfCustom FindIndex
        {
            get
            {
                if ((this.mFindIndex == null))
                {
                    this.mFindIndex = new WpfCustom(this);
                    #region Search Criteria
                    this.mFindIndex.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FindIndexDesigner";
                    this.mFindIndex.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Find Index(FindIndexDesigner)";
                    this.mFindIndex.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFindIndex;
            }
        }
        
        public WpfCustom Replace
        {
            get
            {
                if ((this.mReplace == null))
                {
                    this.mReplace = new WpfCustom(this);
                    #region Search Criteria
                    this.mReplace.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ReplaceDesigner";
                    this.mReplace.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Replace(ReplaceDesigner)";
                    this.mReplace.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mReplace;
            }
        }
        
        public WpfCustom Switch
        {
            get
            {
                if ((this.mSwitch == null))
                {
                    this.mSwitch = new WpfCustom(this);
                    #region Search Criteria
                    this.mSwitch.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowSwitchDesigner";
                    this.mSwitch.SearchProperties[WpfControl.PropertyNames.AutomationId] = "FlowSwitchDesigner";
                    this.mSwitch.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSwitch;
            }
        }
        
        public WpfCustom Sequence
        {
            get
            {
                if ((this.mSequence == null))
                {
                    this.mSequence = new WpfCustom(this);
                    #region Search Criteria
                    this.mSequence.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SequenceDesigner";
                    this.mSequence.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sequence(SequenceDesigner)";
                    this.mSequence.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSequence;
            }
        }
        
        public WpfCustom Decision
        {
            get
            {
                if ((this.mDecision == null))
                {
                    this.mDecision = new WpfCustom(this);
                    #region Search Criteria
                    this.mDecision.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.FlowDecisionDesigner";
                    this.mDecision.SearchProperties[WpfControl.PropertyNames.AutomationId] = "FlowDecisionDesigner";
                    this.mDecision.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDecision;
            }
        }
        
        public MultiAssign1 MultiAssign
        {
            get
            {
                if ((this.mMultiAssign == null))
                {
                    this.mMultiAssign = new MultiAssign1(this);
                }
                return this.mMultiAssign;
            }
        }
        
        public WpfCustom StartNode
        {
            get
            {
                if ((this.mStartNode == null))
                {
                    this.mStartNode = new WpfCustom(this);
                    #region Search Criteria
                    this.mStartNode.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.StartSymbol";
                    this.mStartNode.SearchProperties[WpfControl.PropertyNames.AutomationId] = "StartSymbol";
                    this.mStartNode.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStartNode;
            }
        }
        #endregion
        
        #region Fields
        private AssignObject mAssignObject;
        
        private WpfCustom mWebGet;
        
        private WpfCustom mWebPost;
        
        private WpfCustom mDotNetDll;
        
        private DataMerge1 mDataMerge;
        
        private DataSplit1 mDataSplit;
        
        private WpfCustom mMySqlDatabase;
        
        private WpfCustom mSqlServerDatabase;
        
        private BaseConvert1 mBaseConvert;
        
        private CaseConvert1 mCaseConvert;
        
        private WpfCustom mSubWorkflow;
        
        private WpfCustom mPluginConnector;
        
        private WpfCustom mWebConnector;
        
        private WpfCustom mDatabaseConnector;
        
        private WpfCustom mForEach;
        
        private WpfCustom mLength;
        
        private WpfCustom mFindRecordsIndex;
        
        private WpfCustom mDeleteRecord;
        
        private WpfCustom mSortRecords;
        
        private WpfCustom mCountRecordset;
        
        private SqlBulkInsert1 mSqlBulkInsert;
        
        private WpfCustom mUnique;
        
        private CreateJson1 mCreateJson;
        
        private WpfCustom mExecuteCommandLine;
        
        private WpfCustom mScripting;
        
        private WpfCustom mSharepointCreate;
        
        private WpfCustom mSharepointDelete;
        
        private WpfCustom mSharepointRead;
        
        private WpfCustom mSharepointUpdate;
        
        private WpfCustom mCalculate;
        
        private WpfCustom mDateTime;
        
        private WpfCustom mDateTimeDifference;
        
        private GatherSystemInfo mGatherSystemInfo;
        
        private WpfCustom mFormatNumber;
        
        private WpfCustom mRandom;
        
        private WpfCustom mSendEmail;
        
        private WpfCustom mComment;
        
        private XPath1 mXPath;
        
        private WpfCustom mDropBox_DOWNLOAD;
        
        private WpfCustom mDropBox_UPLOAD;
        
        private WpfCustom mPathCreate;
        
        private WpfCustom mPathCopy;
        
        private WpfCustom mPathDelete;
        
        private WpfCustom mPathMove;
        
        private WpfCustom mFolderRead;
        
        private WpfCustom mFileRead;
        
        private WpfCustom mFileWrite;
        
        private WpfCustom mPathRename;
        
        private WpfCustom mUnZip;
        
        private WpfCustom mZip;
        
        private WpfCustom mFindIndex;
        
        private WpfCustom mReplace;
        
        private WpfCustom mSwitch;
        
        private WpfCustom mSequence;
        
        private WpfCustom mDecision;
        
        private MultiAssign1 mMultiAssign;
        
        private WpfCustom mStartNode;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssignObject : WpfCustom
    {
        
        public AssignObject(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MultiAssignObjectDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Assign Object (1)(MultiAssignObjectDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInput
        {
            get
            {
                if ((this.mOpenQuickVariableInput == null))
                {
                    this.mOpenQuickVariableInput = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInput.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInput.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInput;
            }
        }
        
        public WpfEdit DisplayNameTextbox
        {
            get
            {
                if ((this.mDisplayNameTextbox == null))
                {
                    this.mDisplayNameTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mDisplayNameTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "DisplayNameBox";
                    this.mDisplayNameTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisplayNameTextbox;
            }
        }
        
        public SmallView SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView(this);
                }
                return this.mSmallView;
            }
        }
        
        public LargeView LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInput;
        
        private WpfEdit mDisplayNameTextbox;
        
        private SmallView mSmallView;
        
        private LargeView mLargeView;
        
        private WpfButton mDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView : WpfCustom
    {
        
        public SmallView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataGrid DataGrid
        {
            get
            {
                if ((this.mDataGrid == null))
                {
                    this.mDataGrid = new DataGrid(this);
                }
                return this.mDataGrid;
            }
        }
        #endregion
        
        #region Fields
        private DataGrid mDataGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGrid : WpfTable
    {
        
        public DataGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row1 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row1(this);
                }
                return this.mRow1;
            }
        }
        
        public Row2 Row2
        {
            get
            {
                if ((this.mRow2 == null))
                {
                    this.mRow2 = new Row2(this);
                }
                return this.mRow2;
            }
        }
        #endregion
        
        #region Fields
        private Row1 mRow1;
        
        private Row2 mRow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row1 : WpfRow
    {
        
        public Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_0_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell mVariableCell;
        
        private ValueCell mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell : WpfCell
    {
        
        public VariableCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableTextbox VariableTextbox
        {
            get
            {
                if ((this.mVariableTextbox == null))
                {
                    this.mVariableTextbox = new VariableTextbox(this);
                }
                return this.mVariableTextbox;
            }
        }
        #endregion
        
        #region Fields
        private VariableTextbox mVariableTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableTextbox : WpfEdit
    {
        
        public VariableTextbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_TextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText VariableTextboxFloatingText
        {
            get
            {
                if ((this.mVariableTextboxFloatingText == null))
                {
                    this.mVariableTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mVariableTextboxFloatingText.SearchProperties[WpfText.PropertyNames.Name] = "[[Variable1]]";
                    this.mVariableTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableTextboxFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mVariableTextboxFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell : WpfCell
    {
        
        public ValueCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "3";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ValueTextbox
        {
            get
            {
                if ((this.mValueTextbox == null))
                {
                    this.mValueTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mValueTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row1_FieldValue_AutoID";
                    this.mValueTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mValueTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row2 : WpfRow
    {
        
        public Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_1_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell1 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell1(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell1 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell1(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell1 mVariableCell;
        
        private ValueCell1 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell1 : WpfCell
    {
        
        public VariableCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit VariableTextbox
        {
            get
            {
                if ((this.mVariableTextbox == null))
                {
                    this.mVariableTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mVariableTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_TextBox_AutoID";
                    this.mVariableTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mVariableTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell1 : WpfCell
    {
        
        public ValueCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "3";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ValueTextbox
        {
            get
            {
                if ((this.mValueTextbox == null))
                {
                    this.mValueTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mValueTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row2_FieldValue_AutoID";
                    this.mValueTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mValueTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView : WpfCustom
    {
        
        public LargeView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataGrid1 DataGrid
        {
            get
            {
                if ((this.mDataGrid == null))
                {
                    this.mDataGrid = new DataGrid1(this);
                }
                return this.mDataGrid;
            }
        }
        
        public WpfText AddRowsMessage
        {
            get
            {
                if ((this.mAddRowsMessage == null))
                {
                    this.mAddRowsMessage = new WpfText(this);
                    #region Search Criteria
                    this.mAddRowsMessage.SearchProperties[WpfText.PropertyNames.Name] = "Type in the empty rows to add new rows.";
                    this.mAddRowsMessage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAddRowsMessage;
            }
        }
        
        public WpfText InsertDeleteRowsMessage
        {
            get
            {
                if ((this.mInsertDeleteRowsMessage == null))
                {
                    this.mInsertDeleteRowsMessage = new WpfText(this);
                    #region Search Criteria
                    this.mInsertDeleteRowsMessage.SearchProperties[WpfText.PropertyNames.Name] = "Right click to insert or delete rows.";
                    this.mInsertDeleteRowsMessage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInsertDeleteRowsMessage;
            }
        }
        
        public OnError OnError
        {
            get
            {
                if ((this.mOnError == null))
                {
                    this.mOnError = new OnError(this);
                }
                return this.mOnError;
            }
        }
        #endregion
        
        #region Fields
        private DataGrid1 mDataGrid;
        
        private WpfText mAddRowsMessage;
        
        private WpfText mInsertDeleteRowsMessage;
        
        private OnError mOnError;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGrid1 : WpfTable
    {
        
        public DataGrid1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row11 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row11(this);
                }
                return this.mRow1;
            }
        }
        
        public Row21 Row2
        {
            get
            {
                if ((this.mRow2 == null))
                {
                    this.mRow2 = new Row21(this);
                }
                return this.mRow2;
            }
        }
        #endregion
        
        #region Fields
        private Row11 mRow1;
        
        private Row21 mRow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row11 : WpfRow
    {
        
        public Row11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_0_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell2 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell2(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell2 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell2(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell2 mVariableCell;
        
        private ValueCell2 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell2 : WpfCell
    {
        
        public VariableCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Variable";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit VariableTextbox
        {
            get
            {
                if ((this.mVariableTextbox == null))
                {
                    this.mVariableTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mVariableTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row1_FieldName_AutoID";
                    this.mVariableTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mVariableTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell2 : WpfCell
    {
        
        public ValueCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "New Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ValueTextbox
        {
            get
            {
                if ((this.mValueTextbox == null))
                {
                    this.mValueTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mValueTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row1_FieldValue_AutoID";
                    this.mValueTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mValueTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row21 : WpfRow
    {
        
        public Row21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_1_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell3 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell3(this);
                }
                return this.mVariableCell;
            }
        }
        
        public ValueCell3 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell3(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell3 mVariableCell;
        
        private ValueCell3 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell3 : WpfCell
    {
        
        public VariableCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Variable";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit VariableTextbox
        {
            get
            {
                if ((this.mVariableTextbox == null))
                {
                    this.mVariableTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mVariableTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row2_FieldName_AutoID";
                    this.mVariableTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mVariableTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell3 : WpfCell
    {
        
        public ValueCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "New Value";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ValueTextbox
        {
            get
            {
                if ((this.mValueTextbox == null))
                {
                    this.mValueTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mValueTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row2_FieldValue_AutoID";
                    this.mValueTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mValueTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnError : WpfCustom
    {
        
        public OnError(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.OnError";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "On Error";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public OnErrorGroup OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private OnErrorGroup mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup : WpfGroup
    {
        
        public OnErrorGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ErrorVariable
        {
            get
            {
                if ((this.mErrorVariable == null))
                {
                    this.mErrorVariable = new WpfEdit(this);
                    #region Search Criteria
                    this.mErrorVariable.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Variable_AutoID";
                    this.mErrorVariable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mErrorVariable;
            }
        }
        
        public WpfEdit ErrorWebservice
        {
            get
            {
                if ((this.mErrorWebservice == null))
                {
                    this.mErrorWebservice = new WpfEdit(this);
                    #region Search Criteria
                    this.mErrorWebservice.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Workflow_AutoID";
                    this.mErrorWebservice.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mErrorWebservice;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mErrorVariable;
        
        private WpfEdit mErrorWebservice;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataMerge1 : WpfCustom
    {
        
        public DataMerge1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DataMergeDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Data Merge (1)(DataMergeDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        
        public WpfEdit DisplayName
        {
            get
            {
                if ((this.mDisplayName == null))
                {
                    this.mDisplayName = new WpfEdit(this);
                    #region Search Criteria
                    this.mDisplayName.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "DisplayNameBox";
                    this.mDisplayName.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDisplayName;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public SmallView1 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView1(this);
                }
                return this.mSmallView;
            }
        }
        
        public LargeView1 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView1(this);
                }
                return this.mLargeView;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        
        private WpfEdit mDisplayName;
        
        private WpfButton mDoneButton;
        
        private SmallView1 mSmallView;
        
        private LargeView1 mLargeView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView1 : WpfCustom
    {
        
        public SmallView1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UISmallDataGridTable UISmallDataGridTable
        {
            get
            {
                if ((this.mUISmallDataGridTable == null))
                {
                    this.mUISmallDataGridTable = new UISmallDataGridTable(this);
                }
                return this.mUISmallDataGridTable;
            }
        }
        
        public WpfEdit ResultTextbox
        {
            get
            {
                if ((this.mResultTextbox == null))
                {
                    this.mResultTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mResultTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
                    this.mResultTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResultTextbox;
            }
        }
        #endregion
        
        #region Fields
        private UISmallDataGridTable mUISmallDataGridTable;
        
        private WpfEdit mResultTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISmallDataGridTable : WpfTable
    {
        
        public UISmallDataGridTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row Row
        {
            get
            {
                if ((this.mRow == null))
                {
                    this.mRow = new Row(this);
                }
                return this.mRow;
            }
        }
        #endregion
        
        #region Fields
        private Row mRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row : WpfRow
    {
        
        public Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputCell InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell(this);
                }
                return this.mInputCell;
            }
        }
        
        public TypeCell TypeCell
        {
            get
            {
                if ((this.mTypeCell == null))
                {
                    this.mTypeCell = new TypeCell(this);
                }
                return this.mTypeCell;
            }
        }
        
        public IndexCell IndexCell
        {
            get
            {
                if ((this.mIndexCell == null))
                {
                    this.mIndexCell = new IndexCell(this);
                }
                return this.mIndexCell;
            }
        }
        #endregion
        
        #region Fields
        private InputCell mInputCell;
        
        private TypeCell mTypeCell;
        
        private IndexCell mIndexCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell : WpfCell
    {
        
        public InputCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row1InputTextbox Row1InputTextbox
        {
            get
            {
                if ((this.mRow1InputTextbox == null))
                {
                    this.mRow1InputTextbox = new Row1InputTextbox(this);
                }
                return this.mRow1InputTextbox;
            }
        }
        
        public WpfEdit Row2InputTextbox
        {
            get
            {
                if ((this.mRow2InputTextbox == null))
                {
                    this.mRow2InputTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRow2InputTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row2_InputVariable_AutoID";
                    this.mRow2InputTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRow2InputTextbox;
            }
        }
        #endregion
        
        #region Fields
        private Row1InputTextbox mRow1InputTextbox;
        
        private WpfEdit mRow2InputTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row1InputTextbox : WpfEdit
    {
        
        public Row1InputTextbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row1_InputVariable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText InputFloatingText
        {
            get
            {
                if ((this.mInputFloatingText == null))
                {
                    this.mInputFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mInputFloatingText.SearchProperties[WpfText.PropertyNames.Name] = "[[Recordset().F1]]";
                    this.mInputFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mInputFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TypeCell : WpfCell
    {
        
        public TypeCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "2";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox Row1TypeCombobox
        {
            get
            {
                if ((this.mRow1TypeCombobox == null))
                {
                    this.mRow1TypeCombobox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mRow1TypeCombobox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_MergeType_AutoID";
                    this.mRow1TypeCombobox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRow1TypeCombobox;
            }
        }
        
        public WpfComboBox Row2TypeCombobox
        {
            get
            {
                if ((this.mRow2TypeCombobox == null))
                {
                    this.mRow2TypeCombobox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mRow2TypeCombobox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row2_MergeType_AutoID";
                    this.mRow2TypeCombobox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRow2TypeCombobox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mRow1TypeCombobox;
        
        private WpfComboBox mRow2TypeCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class IndexCell : WpfCell
    {
        
        public IndexCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "3";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Row1IndexTextbox
        {
            get
            {
                if ((this.mRow1IndexTextbox == null))
                {
                    this.mRow1IndexTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRow1IndexTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__At_Row1_AutoID";
                    this.mRow1IndexTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRow1IndexTextbox;
            }
        }
        
        public WpfEdit Row2IndexTextbox
        {
            get
            {
                if ((this.mRow2IndexTextbox == null))
                {
                    this.mRow2IndexTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRow2IndexTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__At_Row2_AutoID";
                    this.mRow2IndexTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRow2IndexTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mRow1IndexTextbox;
        
        private WpfEdit mRow2IndexTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView1 : WpfCustom
    {
        
        public LargeView1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DatGrid DatGrid
        {
            get
            {
                if ((this.mDatGrid == null))
                {
                    this.mDatGrid = new DatGrid(this);
                }
                return this.mDatGrid;
            }
        }
        
        public WpfEdit ResultTextbox
        {
            get
            {
                if ((this.mResultTextbox == null))
                {
                    this.mResultTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mResultTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Resulttxt_AutoID";
                    this.mResultTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mResultTextbox;
            }
        }
        
        public OnErrorGroup1 OnErrorGroup
        {
            get
            {
                if ((this.mOnErrorGroup == null))
                {
                    this.mOnErrorGroup = new OnErrorGroup1(this);
                }
                return this.mOnErrorGroup;
            }
        }
        #endregion
        
        #region Fields
        private DatGrid mDatGrid;
        
        private WpfEdit mResultTextbox;
        
        private OnErrorGroup1 mOnErrorGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DatGrid : WpfTable
    {
        
        public DatGrid(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row3 Row
        {
            get
            {
                if ((this.mRow == null))
                {
                    this.mRow = new Row3(this);
                }
                return this.mRow;
            }
        }
        #endregion
        
        #region Fields
        private Row3 mRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row3 : WpfRow
    {
        
        public Row3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputCell1 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell1(this);
                }
                return this.mInputCell;
            }
        }
        
        public WidthCell WidthCell
        {
            get
            {
                if ((this.mWidthCell == null))
                {
                    this.mWidthCell = new WidthCell(this);
                }
                return this.mWidthCell;
            }
        }
        
        public UsingCell UsingCell
        {
            get
            {
                if ((this.mUsingCell == null))
                {
                    this.mUsingCell = new UsingCell(this);
                }
                return this.mUsingCell;
            }
        }
        
        public PaddingCell PaddingCell
        {
            get
            {
                if ((this.mPaddingCell == null))
                {
                    this.mPaddingCell = new PaddingCell(this);
                }
                return this.mPaddingCell;
            }
        }
        
        public AlignCell AlignCell
        {
            get
            {
                if ((this.mAlignCell == null))
                {
                    this.mAlignCell = new AlignCell(this);
                }
                return this.mAlignCell;
            }
        }
        #endregion
        
        #region Fields
        private InputCell1 mInputCell;
        
        private WidthCell mWidthCell;
        
        private UsingCell mUsingCell;
        
        private PaddingCell mPaddingCell;
        
        private AlignCell mAlignCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell1 : WpfCell
    {
        
        public InputCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputTextbox InputTextbox
        {
            get
            {
                if ((this.mInputTextbox == null))
                {
                    this.mInputTextbox = new InputTextbox(this);
                }
                return this.mInputTextbox;
            }
        }
        #endregion
        
        #region Fields
        private InputTextbox mInputTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputTextbox : WpfEdit
    {
        
        public InputTextbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row1_InputVariable_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText InputFloatingText
        {
            get
            {
                if ((this.mInputFloatingText == null))
                {
                    this.mInputFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mInputFloatingText.SearchProperties[WpfText.PropertyNames.Name] = "[[Recordset().F1]]";
                    this.mInputFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mInputFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WidthCell : WpfCell
    {
        
        public WidthCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "With";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox WidthCombobox
        {
            get
            {
                if ((this.mWidthCombobox == null))
                {
                    this.mWidthCombobox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mWidthCombobox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_MergeType_AutoID";
                    this.mWidthCombobox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mWidthCombobox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mWidthCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UsingCell : WpfCell
    {
        
        public UsingCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Using";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit UsingTextbox
        {
            get
            {
                if ((this.mUsingTextbox == null))
                {
                    this.mUsingTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mUsingTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__At_Row1_AutoID";
                    this.mUsingTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUsingTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUsingTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PaddingCell : WpfCell
    {
        
        public PaddingCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Padding";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit PaddingTextbox
        {
            get
            {
                if ((this.mPaddingTextbox == null))
                {
                    this.mPaddingTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mPaddingTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Padding_Row1_AutoID";
                    this.mPaddingTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPaddingTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mPaddingTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AlignCell : WpfCell
    {
        
        public AlignCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Align";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfComboBox AlignCombobox
        {
            get
            {
                if ((this.mAlignCombobox == null))
                {
                    this.mAlignCombobox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mAlignCombobox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "UI__Row1_Alignment_AutoID";
                    this.mAlignCombobox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mAlignCombobox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mAlignCombobox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OnErrorGroup1 : WpfGroup
    {
        
        public OnErrorGroup1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "OnErrorGroupBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit VariableTextbox
        {
            get
            {
                if ((this.mVariableTextbox == null))
                {
                    this.mVariableTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mVariableTextbox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Variable_AutoID";
                    this.mVariableTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableTextbox;
            }
        }
        
        public WpfCheckBox EndthisworkflowCheckBox
        {
            get
            {
                if ((this.mEndthisworkflowCheckBox == null))
                {
                    this.mEndthisworkflowCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEndthisworkflowCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI__IsEnded_AutoID";
                    this.mEndthisworkflowCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEndthisworkflowCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mVariableTextbox;
        
        private WpfCheckBox mEndthisworkflowCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataSplit1 : WpfCustom
    {
        
        public DataSplit1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DataSplitDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Data Split (1)(DataSplitDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class BaseConvert1 : WpfCustom
    {
        
        public BaseConvert1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.BaseConvertDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Base Conversion (1)(BaseConvertDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CaseConvert1 : WpfCustom
    {
        
        public CaseConvert1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CaseConvertDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Case Conversion (1)(CaseConvertDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SqlBulkInsert1 : WpfCustom
    {
        
        public SqlBulkInsert1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SqlBulkInsertDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SQL Bulk Insert(SqlBulkInsertDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CreateJson1 : WpfCustom
    {
        
        public CreateJson1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CreateJsonDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Create JSON (1)(CreateJsonDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class GatherSystemInfo : WpfCustom
    {
        
        public GatherSystemInfo(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.GatherSystemInformationDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Gather System Information (1)(GatherSystemInformationDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class XPath1 : WpfCustom
    {
        
        public XPath1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XPathDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "XPath (1)(XPathDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MultiAssign1 : WpfCustom
    {
        
        public MultiAssign1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MultiAssignDesigner";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Assign (1)(MultiAssignDesigner)";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SmallView2 SmallView
        {
            get
            {
                if ((this.mSmallView == null))
                {
                    this.mSmallView = new SmallView2(this);
                }
                return this.mSmallView;
            }
        }
        
        public LargeView2 LargeView
        {
            get
            {
                if ((this.mLargeView == null))
                {
                    this.mLargeView = new LargeView2(this);
                }
                return this.mLargeView;
            }
        }
        
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    this.mDoneButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        
        public WpfToggleButton OpenQuickVariableInpToggleButton
        {
            get
            {
                if ((this.mOpenQuickVariableInpToggleButton == null))
                {
                    this.mOpenQuickVariableInpToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mOpenQuickVariableInpToggleButton.SearchProperties[WpfToggleButton.PropertyNames.HelpText] = "Open Quick Variable Input";
                    this.mOpenQuickVariableInpToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOpenQuickVariableInpToggleButton;
            }
        }
        
        public WpfCustom QuickVariableInputContent
        {
            get
            {
                if ((this.mQuickVariableInputContent == null))
                {
                    this.mQuickVariableInputContent = new WpfCustom(this);
                    #region Search Criteria
                    this.mQuickVariableInputContent.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.QuickVariableInputView";
                    this.mQuickVariableInputContent.SearchProperties[WpfControl.PropertyNames.AutomationId] = "QuickVariableInputContent";
                    this.mQuickVariableInputContent.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mQuickVariableInputContent;
            }
        }
        #endregion
        
        #region Fields
        private SmallView2 mSmallView;
        
        private LargeView2 mLargeView;
        
        private WpfButton mDoneButton;
        
        private WpfToggleButton mOpenQuickVariableInpToggleButton;
        
        private WpfCustom mQuickVariableInputContent;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SmallView2 : WpfCustom
    {
        
        public SmallView2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Small";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SmallViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataGrid2 DataGrid
        {
            get
            {
                if ((this.mDataGrid == null))
                {
                    this.mDataGrid = new DataGrid2(this);
                }
                return this.mDataGrid;
            }
        }
        #endregion
        
        #region Fields
        private DataGrid2 mDataGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGrid2 : WpfTable
    {
        
        public DataGrid2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "SmallDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row12 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row12(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row12 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row12 : WpfRow
    {
        
        public Row12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_0_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell4 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell4(this);
                }
                return this.mVariableCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell4 mVariableCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell4 : WpfCell
    {
        
        public VariableCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.ColumnIndex] = "1";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Textbox Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new Textbox(this);
                }
                return this.mTextbox;
            }
        }
        #endregion
        
        #region Fields
        private Textbox mTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Textbox : WpfEdit
    {
        
        public Textbox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_TextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TextboxFloatingText
        {
            get
            {
                if ((this.mTextboxFloatingText == null))
                {
                    this.mTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mTextboxFloatingText.SearchProperties[WpfText.PropertyNames.Name] = "[[Variable1]]";
                    this.mTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextboxFloatingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextboxFloatingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LargeView2 : WpfCustom
    {
        
        public LargeView2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Large";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LargeViewContent";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataGrid3 DataGrid
        {
            get
            {
                if ((this.mDataGrid == null))
                {
                    this.mDataGrid = new DataGrid3(this);
                }
                return this.mDataGrid;
            }
        }
        #endregion
        
        #region Fields
        private DataGrid3 mDataGrid;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataGrid3 : WpfTable
    {
        
        public DataGrid3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "LargeDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Row13 Row1
        {
            get
            {
                if ((this.mRow1 == null))
                {
                    this.mRow1 = new Row13(this);
                }
                return this.mRow1;
            }
        }
        #endregion
        
        #region Fields
        private Row13 mRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Row13 : WpfRow
    {
        
        public Row13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "UI_ActivityGridRow_0_AutoID";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableCell5 VariableCell
        {
            get
            {
                if ((this.mVariableCell == null))
                {
                    this.mVariableCell = new VariableCell5(this);
                }
                return this.mVariableCell;
            }
        }
        #endregion
        
        #region Fields
        private VariableCell5 mVariableCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableCell5 : WpfCell
    {
        
        public VariableCell5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Variable";
            this.SearchProperties[WpfCell.PropertyNames.AutomationId] = "UI_DataGridCell_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI__Row1_FieldName_AutoID";
                    this.mTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DBConnectorWizardTab : WpfTabPage
    {
        
        public DBConnectorWizardTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.ServerProxyLayer.IDbSour" +
                "ce]";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WorkSurfaceContext4 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext4(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        
        public WpfScrollBar VerticalScrollBar
        {
            get
            {
                if ((this.mVerticalScrollBar == null))
                {
                    this.mVerticalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mVerticalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "VerticalScrollBar";
                    this.mVerticalScrollBar.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVerticalScrollBar;
            }
        }
        
        public WpfScrollBar HorizontalScrollBar
        {
            get
            {
                if ((this.mHorizontalScrollBar == null))
                {
                    this.mHorizontalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mHorizontalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "HorizontalScrollBar";
                    this.mHorizontalScrollBar.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHorizontalScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WorkSurfaceContext4 mWorkSurfaceContext;
        
        private WpfScrollBar mVerticalScrollBar;
        
        private WpfScrollBar mHorizontalScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext4 : WpfCustom
    {
        
        public WorkSurfaceContext4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SourcesComboBox SourcesComboBox
        {
            get
            {
                if ((this.mSourcesComboBox == null))
                {
                    this.mSourcesComboBox = new SourcesComboBox(this);
                }
                return this.mSourcesComboBox;
            }
        }
        
        public NewDBConnectorWizard NewDBConnectorWizard
        {
            get
            {
                if ((this.mNewDBConnectorWizard == null))
                {
                    this.mNewDBConnectorWizard = new NewDBConnectorWizard(this);
                }
                return this.mNewDBConnectorWizard;
            }
        }
        
        public WpfText Step1Text
        {
            get
            {
                if ((this.mStep1Text == null))
                {
                    this.mStep1Text = new WpfText(this);
                    #region Search Criteria
                    this.mStep1Text.SearchProperties[WpfText.PropertyNames.Name] = "1";
                    this.mStep1Text.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStep1Text;
            }
        }
        
        public WpfText TitleText
        {
            get
            {
                if ((this.mTitleText == null))
                {
                    this.mTitleText = new WpfText(this);
                    #region Search Criteria
                    this.mTitleText.SearchProperties[WpfText.PropertyNames.Name] = "Data Source";
                    this.mTitleText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTitleText;
            }
        }
        
        public WpfButton EditButton
        {
            get
            {
                if ((this.mEditButton == null))
                {
                    this.mEditButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditButton.SearchProperties[WpfButton.PropertyNames.Name] = " ... ";
                    this.mEditButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditButton;
            }
        }
        
        public WpfText OrText
        {
            get
            {
                if ((this.mOrText == null))
                {
                    this.mOrText = new WpfText(this);
                    #region Search Criteria
                    this.mOrText.SearchProperties[WpfText.PropertyNames.Name] = "or";
                    this.mOrText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOrText;
            }
        }
        
        public WpfButton NewButton
        {
            get
            {
                if ((this.mNewButton == null))
                {
                    this.mNewButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewButton.SearchProperties[WpfButton.PropertyNames.Name] = "New";
                    this.mNewButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewButton;
            }
        }
        
        public WpfText Step2Text
        {
            get
            {
                if ((this.mStep2Text == null))
                {
                    this.mStep2Text = new WpfText(this);
                    #region Search Criteria
                    this.mStep2Text.SearchProperties[WpfText.PropertyNames.Name] = "2";
                    this.mStep2Text.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStep2Text;
            }
        }
        
        public WpfText SelectanActionText
        {
            get
            {
                if ((this.mSelectanActionText == null))
                {
                    this.mSelectanActionText = new WpfText(this);
                    #region Search Criteria
                    this.mSelectanActionText.SearchProperties[WpfText.PropertyNames.Name] = "Select an Action";
                    this.mSelectanActionText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSelectanActionText;
            }
        }
        
        public WpfCustom ActionsComboBox
        {
            get
            {
                if ((this.mActionsComboBox == null))
                {
                    this.mActionsComboBox = new WpfCustom(this);
                    #region Search Criteria
                    this.mActionsComboBox.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
                    this.mActionsComboBox.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActionsComboBox";
                    this.mActionsComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mActionsComboBox;
            }
        }
        
        public RefreshButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new RefreshButton(this);
                }
                return this.mRefreshButton;
            }
        }
        
        public WpfText Step3Text
        {
            get
            {
                if ((this.mStep3Text == null))
                {
                    this.mStep3Text = new WpfText(this);
                    #region Search Criteria
                    this.mStep3Text.SearchProperties[WpfText.PropertyNames.Name] = "3";
                    this.mStep3Text.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStep3Text;
            }
        }
        
        public WpfText TestActionTitleText
        {
            get
            {
                if ((this.mTestActionTitleText == null))
                {
                    this.mTestActionTitleText = new WpfText(this);
                    #region Search Criteria
                    this.mTestActionTitleText.SearchProperties[WpfText.PropertyNames.Name] = "Test Connector and Calculate Outputs";
                    this.mTestActionTitleText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestActionTitleText;
            }
        }
        
        public WpfText InputsText
        {
            get
            {
                if ((this.mInputsText == null))
                {
                    this.mInputsText = new WpfText(this);
                    #region Search Criteria
                    this.mInputsText.SearchProperties[WpfText.PropertyNames.Name] = "Inputs";
                    this.mInputsText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputsText;
            }
        }
        
        public WpfList InputsList
        {
            get
            {
                if ((this.mInputsList == null))
                {
                    this.mInputsList = new WpfList(this);
                    #region Search Criteria
                    this.mInputsList.SearchProperties[WpfList.PropertyNames.AutomationId] = "InputsList";
                    this.mInputsList.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputsList;
            }
        }
        
        public TestActionButton TestActionButton
        {
            get
            {
                if ((this.mTestActionButton == null))
                {
                    this.mTestActionButton = new TestActionButton(this);
                }
                return this.mTestActionButton;
            }
        }
        
        public OutputsTitleText OutputsTitleText
        {
            get
            {
                if ((this.mOutputsTitleText == null))
                {
                    this.mOutputsTitleText = new OutputsTitleText(this);
                }
                return this.mOutputsTitleText;
            }
        }
        
        public WpfText NoneText
        {
            get
            {
                if ((this.mNoneText == null))
                {
                    this.mNoneText = new WpfText(this);
                    #region Search Criteria
                    this.mNoneText.SearchProperties[WpfText.PropertyNames.Name] = "None";
                    this.mNoneText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNoneText;
            }
        }
        
        public WpfText Step4Text
        {
            get
            {
                if ((this.mStep4Text == null))
                {
                    this.mStep4Text = new WpfText(this);
                    #region Search Criteria
                    this.mStep4Text.SearchProperties[WpfText.PropertyNames.Name] = "4";
                    this.mStep4Text.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStep4Text;
            }
        }
        
        public WpfText DefaultsandMappingText
        {
            get
            {
                if ((this.mDefaultsandMappingText == null))
                {
                    this.mDefaultsandMappingText = new WpfText(this);
                    #region Search Criteria
                    this.mDefaultsandMappingText.SearchProperties[WpfText.PropertyNames.Name] = "Defaults and Mapping";
                    this.mDefaultsandMappingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDefaultsandMappingText;
            }
        }
        
        public WpfCustom MappingsView
        {
            get
            {
                if ((this.mMappingsView == null))
                {
                    this.mMappingsView = new WpfCustom(this);
                    #region Search Criteria
                    this.mMappingsView.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MappingsView";
                    this.mMappingsView.SearchProperties[WpfControl.PropertyNames.AutomationId] = "MappingsView";
                    this.mMappingsView.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMappingsView;
            }
        }
        
        public WpfText ErrorText
        {
            get
            {
                if ((this.mErrorText == null))
                {
                    this.mErrorText = new WpfText(this);
                    #region Search Criteria
                    this.mErrorText.SearchProperties[WpfText.PropertyNames.AutomationId] = "ErrorTextBlock";
                    this.mErrorText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mErrorText;
            }
        }
        
        public WpfTable OutputsTable
        {
            get
            {
                if ((this.mOutputsTable == null))
                {
                    this.mOutputsTable = new WpfTable(this);
                    #region Search Criteria
                    this.mOutputsTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "OutputsDataGrid";
                    this.mOutputsTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputsTable;
            }
        }
        #endregion
        
        #region Fields
        private SourcesComboBox mSourcesComboBox;
        
        private NewDBConnectorWizard mNewDBConnectorWizard;
        
        private WpfText mStep1Text;
        
        private WpfText mTitleText;
        
        private WpfButton mEditButton;
        
        private WpfText mOrText;
        
        private WpfButton mNewButton;
        
        private WpfText mStep2Text;
        
        private WpfText mSelectanActionText;
        
        private WpfCustom mActionsComboBox;
        
        private RefreshButton mRefreshButton;
        
        private WpfText mStep3Text;
        
        private WpfText mTestActionTitleText;
        
        private WpfText mInputsText;
        
        private WpfList mInputsList;
        
        private TestActionButton mTestActionButton;
        
        private OutputsTitleText mOutputsTitleText;
        
        private WpfText mNoneText;
        
        private WpfText mStep4Text;
        
        private WpfText mDefaultsandMappingText;
        
        private WpfCustom mMappingsView;
        
        private WpfText mErrorText;
        
        private WpfTable mOutputsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourcesComboBox : WpfCustom
    {
        
        public SourcesComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SourcesComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton SourceComboBoxDropdownButton
        {
            get
            {
                if ((this.mSourceComboBoxDropdownButton == null))
                {
                    this.mSourceComboBoxDropdownButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSourceComboBoxDropdownButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mSourceComboBoxDropdownButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourceComboBoxDropdownButton;
            }
        }
        
        public WpfEdit SourceTextBox
        {
            get
            {
                if ((this.mSourceTextBox == null))
                {
                    this.mSourceTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mSourceTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TextBoxPresenter";
                    this.mSourceTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourceTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mSourceComboBoxDropdownButton;
        
        private WpfEdit mSourceTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewDBConnectorWizard : WpfCustom
    {
        
        public NewDBConnectorWizard(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ManageDatabaseServiceControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputsList InputsList
        {
            get
            {
                if ((this.mInputsList == null))
                {
                    this.mInputsList = new InputsList(this);
                }
                return this.mInputsList;
            }
        }
        
        public EditButton EditButton
        {
            get
            {
                if ((this.mEditButton == null))
                {
                    this.mEditButton = new EditButton(this);
                }
                return this.mEditButton;
            }
        }
        
        public NewButton NewButton
        {
            get
            {
                if ((this.mNewButton == null))
                {
                    this.mNewButton = new NewButton(this);
                }
                return this.mNewButton;
            }
        }
        
        public ActionsComboBox ActionsComboBox
        {
            get
            {
                if ((this.mActionsComboBox == null))
                {
                    this.mActionsComboBox = new ActionsComboBox(this);
                }
                return this.mActionsComboBox;
            }
        }
        
        public MappingsView MappingsView
        {
            get
            {
                if ((this.mMappingsView == null))
                {
                    this.mMappingsView = new MappingsView(this);
                }
                return this.mMappingsView;
            }
        }
        #endregion
        
        #region Fields
        private InputsList mInputsList;
        
        private EditButton mEditButton;
        
        private NewButton mNewButton;
        
        private ActionsComboBox mActionsComboBox;
        
        private MappingsView mMappingsView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputsList : WpfList
    {
        
        public InputsList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "InputsList";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ListItem ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new ListItem(this);
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private ListItem mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ListItem : WpfListItem
    {
        
        public ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Warewolf.Core.ServiceInput";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TestData
        {
            get
            {
                if ((this.mTestData == null))
                {
                    this.mTestData = new WpfEdit(this);
                    #region Search Criteria
                    this.mTestData.SearchProperties[WpfEdit.PropertyNames.HelpText] = "Test data";
                    this.mTestData.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestData;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTestData;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EditButton : WpfButton
    {
        
        public EditButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = " ... ";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText EditButtonText
        {
            get
            {
                if ((this.mEditButtonText == null))
                {
                    this.mEditButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mEditButtonText.SearchProperties[WpfText.PropertyNames.Name] = " ... ";
                    this.mEditButtonText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mEditButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewButton : WpfButton
    {
        
        public NewButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "New";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText UINewText
        {
            get
            {
                if ((this.mUINewText == null))
                {
                    this.mUINewText = new WpfText(this);
                    #region Search Criteria
                    this.mUINewText.SearchProperties[WpfText.PropertyNames.Name] = "New";
                    this.mUINewText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUINewText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUINewText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ActionsComboBox : WpfCustom
    {
        
        public ActionsComboBox(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActionsComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton UIToggleButtonButton
        {
            get
            {
                if ((this.mUIToggleButtonButton == null))
                {
                    this.mUIToggleButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIToggleButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mUIToggleButtonButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIToggleButtonButton;
            }
        }
        
        public WpfEdit UITextBoxPresenterEdit
        {
            get
            {
                if ((this.mUITextBoxPresenterEdit == null))
                {
                    this.mUITextBoxPresenterEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBoxPresenterEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TextBoxPresenter";
                    this.mUITextBoxPresenterEdit.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUITextBoxPresenterEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIToggleButtonButton;
        
        private WpfEdit mUITextBoxPresenterEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MappingsView : WpfCustom
    {
        
        public MappingsView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MappingsView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "MappingsView";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfPane MappingsPane
        {
            get
            {
                if ((this.mMappingsPane == null))
                {
                    this.mMappingsPane = new WpfPane(this);
                    #region Search Criteria
                    this.mMappingsPane.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
                    this.mMappingsPane.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMappingsPane;
            }
        }
        
        public NoneText NoneText
        {
            get
            {
                if ((this.mNoneText == null))
                {
                    this.mNoneText = new NoneText(this);
                }
                return this.mNoneText;
            }
        }
        
        public WpfTable OutputsMappingsTable
        {
            get
            {
                if ((this.mOutputsMappingsTable == null))
                {
                    this.mOutputsMappingsTable = new WpfTable(this);
                    #region Search Criteria
                    this.mOutputsMappingsTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "OutputsMappingDataGrid";
                    this.mOutputsMappingsTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputsMappingsTable;
            }
        }
        
        public RecordsetNameText RecordsetNameText
        {
            get
            {
                if ((this.mRecordsetNameText == null))
                {
                    this.mRecordsetNameText = new RecordsetNameText(this);
                }
                return this.mRecordsetNameText;
            }
        }
        
        public WpfText NoneText1
        {
            get
            {
                if ((this.mNoneText1 == null))
                {
                    this.mNoneText1 = new WpfText(this);
                    #region Search Criteria
                    this.mNoneText1.SearchProperties[WpfText.PropertyNames.Name] = "None";
                    this.mNoneText1.SearchProperties[WpfText.PropertyNames.Instance] = "2";
                    this.mNoneText1.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNoneText1;
            }
        }
        #endregion
        
        #region Fields
        private WpfPane mMappingsPane;
        
        private NoneText mNoneText;
        
        private WpfTable mOutputsMappingsTable;
        
        private RecordsetNameText mRecordsetNameText;
        
        private WpfText mNoneText1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NoneText : WpfText
    {
        
        public NoneText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "None";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfPane NonePane
        {
            get
            {
                if ((this.mNonePane == null))
                {
                    this.mNonePane = new WpfPane(this);
                    #region Search Criteria
                    this.mNonePane.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
                    this.mNonePane.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mNonePane.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNonePane;
            }
        }
        #endregion
        
        #region Fields
        private WpfPane mNonePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetNameText : WpfText
    {
        
        public RecordsetNameText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Recordset Name";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit RecordsetNameTextBox
        {
            get
            {
                if ((this.mRecordsetNameTextBox == null))
                {
                    this.mRecordsetNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordsetNameTextBox.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mRecordsetNameTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRecordsetNameTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mRecordsetNameTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RefreshButton : WpfButton
    {
        
        public RefreshButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "RefreshButton";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom CircularProgressBar
        {
            get
            {
                if ((this.mCircularProgressBar == null))
                {
                    this.mCircularProgressBar = new WpfCustom(this);
                    #region Search Criteria
                    this.mCircularProgressBar.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mCircularProgressBar.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mCircularProgressBar.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCircularProgressBar;
            }
        }
        
        public WpfText RefreshingText
        {
            get
            {
                if ((this.mRefreshingText == null))
                {
                    this.mRefreshingText = new WpfText(this);
                    #region Search Criteria
                    this.mRefreshingText.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mRefreshingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshingText;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mCircularProgressBar;
        
        private WpfText mRefreshingText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestActionButton : WpfButton
    {
        
        public TestActionButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestActionButton";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom CircularProgressBar
        {
            get
            {
                if ((this.mCircularProgressBar == null))
                {
                    this.mCircularProgressBar = new WpfCustom(this);
                    #region Search Criteria
                    this.mCircularProgressBar.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mCircularProgressBar.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mCircularProgressBar.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCircularProgressBar;
            }
        }
        
        public WpfText TestText
        {
            get
            {
                if ((this.mTestText == null))
                {
                    this.mTestText = new WpfText(this);
                    #region Search Criteria
                    this.mTestText.SearchProperties[WpfText.PropertyNames.Name] = "Test";
                    this.mTestText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestText;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mCircularProgressBar;
        
        private WpfText mTestText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputsTitleText : WpfText
    {
        
        public OutputsTitleText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Outputs";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfPane OutputsScrollViewer
        {
            get
            {
                if ((this.mOutputsScrollViewer == null))
                {
                    this.mOutputsScrollViewer = new WpfPane(this);
                    #region Search Criteria
                    this.mOutputsScrollViewer.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
                    this.mOutputsScrollViewer.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mOutputsScrollViewer.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputsScrollViewer;
            }
        }
        #endregion
        
        #region Fields
        private WpfPane mOutputsScrollViewer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PluginConnectorWizardTab : WpfTabPage
    {
        
        public PluginConnectorWizardTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Dev2.ViewModels.SourceViewModel`1[Dev2.Common.Interfaces.IPluginService]";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfImage UnknownItemImage
        {
            get
            {
                if ((this.mUnknownItemImage == null))
                {
                    this.mUnknownItemImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUnknownItemImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUnknownItemImage;
            }
        }
        
        public WpfImage NewPluginConnectorTabIcon
        {
            get
            {
                if ((this.mNewPluginConnectorTabIcon == null))
                {
                    this.mNewPluginConnectorTabIcon = new WpfImage(this);
                    #region Search Criteria
                    this.mNewPluginConnectorTabIcon.SearchProperties[WpfImage.PropertyNames.AutomationId] = "New Plugin Connector *";
                    this.mNewPluginConnectorTabIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewPluginConnectorTabIcon;
            }
        }
        
        public WpfText NewPluginConnectorTabText
        {
            get
            {
                if ((this.mNewPluginConnectorTabText == null))
                {
                    this.mNewPluginConnectorTabText = new WpfText(this);
                    #region Search Criteria
                    this.mNewPluginConnectorTabText.SearchProperties[WpfText.PropertyNames.Name] = "New Plugin Connector *";
                    this.mNewPluginConnectorTabText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewPluginConnectorTabText;
            }
        }
        
        public WpfImage NoAuthIcon
        {
            get
            {
                if ((this.mNoAuthIcon == null))
                {
                    this.mNoAuthIcon = new WpfImage(this);
                    #region Search Criteria
                    this.mNoAuthIcon.SearchProperties[WpfImage.PropertyNames.HelpText] = "You are not authorized to edit this resource";
                    this.mNoAuthIcon.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNoAuthIcon;
            }
        }
        
        public WpfImage NewPluginConnectorTabIcon1
        {
            get
            {
                if ((this.mNewPluginConnectorTabIcon1 == null))
                {
                    this.mNewPluginConnectorTabIcon1 = new WpfImage(this);
                    #region Search Criteria
                    this.mNewPluginConnectorTabIcon1.SearchProperties[WpfImage.PropertyNames.AutomationId] = "New Plugin Connector *";
                    this.mNewPluginConnectorTabIcon1.SearchProperties[WpfImage.PropertyNames.Instance] = "2";
                    this.mNewPluginConnectorTabIcon1.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewPluginConnectorTabIcon1;
            }
        }
        
        public WpfText NewPluginConnectorTabText1
        {
            get
            {
                if ((this.mNewPluginConnectorTabText1 == null))
                {
                    this.mNewPluginConnectorTabText1 = new WpfText(this);
                    #region Search Criteria
                    this.mNewPluginConnectorTabText1.SearchProperties[WpfText.PropertyNames.Name] = "New Plugin Connector *";
                    this.mNewPluginConnectorTabText1.SearchProperties[WpfText.PropertyNames.Instance] = "2";
                    this.mNewPluginConnectorTabText1.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewPluginConnectorTabText1;
            }
        }
        
        public WpfImage NoAuthIcon1
        {
            get
            {
                if ((this.mNoAuthIcon1 == null))
                {
                    this.mNoAuthIcon1 = new WpfImage(this);
                    #region Search Criteria
                    this.mNoAuthIcon1.SearchProperties[WpfImage.PropertyNames.HelpText] = "You are not authorized to edit this resource";
                    this.mNoAuthIcon1.SearchProperties[WpfImage.PropertyNames.Instance] = "2";
                    this.mNoAuthIcon1.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNoAuthIcon1;
            }
        }
        
        public WpfButton NewPluginConnectorTabCloseButton
        {
            get
            {
                if ((this.mNewPluginConnectorTabCloseButton == null))
                {
                    this.mNewPluginConnectorTabCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewPluginConnectorTabCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "closeBtn";
                    this.mNewPluginConnectorTabCloseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewPluginConnectorTabCloseButton;
            }
        }
        
        public WorkSurfaceContext5 WorkSurfaceContext
        {
            get
            {
                if ((this.mWorkSurfaceContext == null))
                {
                    this.mWorkSurfaceContext = new WorkSurfaceContext5(this);
                }
                return this.mWorkSurfaceContext;
            }
        }
        
        public WpfScrollBar VerticalScrollBar
        {
            get
            {
                if ((this.mVerticalScrollBar == null))
                {
                    this.mVerticalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mVerticalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "VerticalScrollBar";
                    this.mVerticalScrollBar.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVerticalScrollBar;
            }
        }
        
        public WpfScrollBar HorizontalScrollBar
        {
            get
            {
                if ((this.mHorizontalScrollBar == null))
                {
                    this.mHorizontalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mHorizontalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "HorizontalScrollBar";
                    this.mHorizontalScrollBar.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHorizontalScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUnknownItemImage;
        
        private WpfImage mNewPluginConnectorTabIcon;
        
        private WpfText mNewPluginConnectorTabText;
        
        private WpfImage mNoAuthIcon;
        
        private WpfImage mNewPluginConnectorTabIcon1;
        
        private WpfText mNewPluginConnectorTabText1;
        
        private WpfImage mNoAuthIcon1;
        
        private WpfButton mNewPluginConnectorTabCloseButton;
        
        private WorkSurfaceContext5 mWorkSurfaceContext;
        
        private WpfScrollBar mVerticalScrollBar;
        
        private WpfScrollBar mHorizontalScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class WorkSurfaceContext5 : WpfCustom
    {
        
        public WorkSurfaceContext5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Dev2.Studio.ViewModels.WorkSurface.WorkSurfaceContextViewModel";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public NewPluginConnectorWizard NewPluginConnectorWizard
        {
            get
            {
                if ((this.mNewPluginConnectorWizard == null))
                {
                    this.mNewPluginConnectorWizard = new NewPluginConnectorWizard(this);
                }
                return this.mNewPluginConnectorWizard;
            }
        }
        
        public WpfCustom NewPluginConnectorWizard1
        {
            get
            {
                if ((this.mNewPluginConnectorWizard1 == null))
                {
                    this.mNewPluginConnectorWizard1 = new WpfCustom(this);
                    #region Search Criteria
                    this.mNewPluginConnectorWizard1.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ManagePluginServiceControl";
                    this.mNewPluginConnectorWizard1.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewPluginConnectorWizard1;
            }
        }
        
        public WpfText SelectaNamespaceTitleText
        {
            get
            {
                if ((this.mSelectaNamespaceTitleText == null))
                {
                    this.mSelectaNamespaceTitleText = new WpfText(this);
                    #region Search Criteria
                    this.mSelectaNamespaceTitleText.SearchProperties[WpfText.PropertyNames.Name] = "Select a Namespace";
                    this.mSelectaNamespaceTitleText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSelectaNamespaceTitleText;
            }
        }
        
        public WpfCustom NamespacesComboBox
        {
            get
            {
                if ((this.mNamespacesComboBox == null))
                {
                    this.mNamespacesComboBox = new WpfCustom(this);
                    #region Search Criteria
                    this.mNamespacesComboBox.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
                    this.mNamespacesComboBox.SearchProperties[WpfControl.PropertyNames.AutomationId] = "NamespaceComboBox";
                    this.mNamespacesComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNamespacesComboBox;
            }
        }
        
        public WpfText Step3Title
        {
            get
            {
                if ((this.mStep3Title == null))
                {
                    this.mStep3Title = new WpfText(this);
                    #region Search Criteria
                    this.mStep3Title.SearchProperties[WpfText.PropertyNames.Name] = "3";
                    this.mStep3Title.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStep3Title;
            }
        }
        
        public WpfText SelectanActionTitle
        {
            get
            {
                if ((this.mSelectanActionTitle == null))
                {
                    this.mSelectanActionTitle = new WpfText(this);
                    #region Search Criteria
                    this.mSelectanActionTitle.SearchProperties[WpfText.PropertyNames.Name] = "Select an Action";
                    this.mSelectanActionTitle.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSelectanActionTitle;
            }
        }
        
        public WpfCustom ActionsComboBox
        {
            get
            {
                if ((this.mActionsComboBox == null))
                {
                    this.mActionsComboBox = new WpfCustom(this);
                    #region Search Criteria
                    this.mActionsComboBox.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
                    this.mActionsComboBox.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActionsComboBox";
                    this.mActionsComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mActionsComboBox;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "RefreshButton";
                    this.mRefreshButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public WpfText Step4Title
        {
            get
            {
                if ((this.mStep4Title == null))
                {
                    this.mStep4Title = new WpfText(this);
                    #region Search Criteria
                    this.mStep4Title.SearchProperties[WpfText.PropertyNames.Name] = "4";
                    this.mStep4Title.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStep4Title;
            }
        }
        
        public WpfText TestConnectorTitleText
        {
            get
            {
                if ((this.mTestConnectorTitleText == null))
                {
                    this.mTestConnectorTitleText = new WpfText(this);
                    #region Search Criteria
                    this.mTestConnectorTitleText.SearchProperties[WpfText.PropertyNames.Name] = "Test Connector and Calculate Outputs";
                    this.mTestConnectorTitleText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestConnectorTitleText;
            }
        }
        
        public WpfButton TestButton
        {
            get
            {
                if ((this.mTestButton == null))
                {
                    this.mTestButton = new WpfButton(this);
                    #region Search Criteria
                    this.mTestButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestButton";
                    this.mTestButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestButton;
            }
        }
        
        public WpfTable InputTable
        {
            get
            {
                if ((this.mInputTable == null))
                {
                    this.mInputTable = new WpfTable(this);
                    #region Search Criteria
                    this.mInputTable.SearchProperties[WpfTable.PropertyNames.AutomationId] = "InputGrid";
                    this.mInputTable.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputTable;
            }
        }
        
        public TestResultsText TestResultsText
        {
            get
            {
                if ((this.mTestResultsText == null))
                {
                    this.mTestResultsText = new TestResultsText(this);
                }
                return this.mTestResultsText;
            }
        }
        
        public WpfText CalculatedOutputsText
        {
            get
            {
                if ((this.mCalculatedOutputsText == null))
                {
                    this.mCalculatedOutputsText = new WpfText(this);
                    #region Search Criteria
                    this.mCalculatedOutputsText.SearchProperties[WpfText.PropertyNames.Name] = @"[{""$type"":""Dev2.Runtime.ServiceModel.Data.Recordset, Dev2.Runtime.Services"",""Name"":"""",""HasErrors"":false,""ErrorMessage"":null,""Fields"":[{""$type"":""Dev2.Runtime.ServiceModel.Data.RecordsetField, Dev2.Runtime.Services"",""Name"":""PrimitiveReturnValue"",""Alias"":""PrimitiveReturnValue"",""RecordsetAlias"":"""",""Path"":{""$type"":""Unlimited.Framework.Converters.Graph.String.Xml.XmlPath, Dev2.Core"",""ActualPath"":""PrimitiveReturnValue"",""DisplayPath"":""PrimitiveReturnValue"",""SampleData"":""value"",""OutputExpression"":""""}}],""Records"":[{""$type"":""Dev2.Runtime.ServiceModel.Data.RecordsetRecord, Dev2.Runtime.Services"",""Label"":""(1)"",""Name"":"""",""Count"":1,""Cells"":[{""$type"":""Dev2.Runtime.ServiceModel.Data.RecordsetCell, Dev2.Runtime.Services"",""Name"":""(1).PrimitiveReturnValue"",""Label"":""PrimitiveReturnValue"",""Value"":""value""}]}]}]";
                    this.mCalculatedOutputsText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCalculatedOutputsText;
            }
        }
        
        public WpfText Step5Title
        {
            get
            {
                if ((this.mStep5Title == null))
                {
                    this.mStep5Title = new WpfText(this);
                    #region Search Criteria
                    this.mStep5Title.SearchProperties[WpfText.PropertyNames.Name] = "5";
                    this.mStep5Title.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStep5Title;
            }
        }
        
        public WpfText DefaultsAndMappingText
        {
            get
            {
                if ((this.mDefaultsAndMappingText == null))
                {
                    this.mDefaultsAndMappingText = new WpfText(this);
                    #region Search Criteria
                    this.mDefaultsAndMappingText.SearchProperties[WpfText.PropertyNames.Name] = "Defaults and Mapping";
                    this.mDefaultsAndMappingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDefaultsAndMappingText;
            }
        }
        
        public WpfCustom MappingsView
        {
            get
            {
                if ((this.mMappingsView == null))
                {
                    this.mMappingsView = new WpfCustom(this);
                    #region Search Criteria
                    this.mMappingsView.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MappingsView";
                    this.mMappingsView.SearchProperties[WpfControl.PropertyNames.AutomationId] = "MappingsView";
                    this.mMappingsView.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mMappingsView;
            }
        }
        
        public WpfText ErrorText
        {
            get
            {
                if ((this.mErrorText == null))
                {
                    this.mErrorText = new WpfText(this);
                    #region Search Criteria
                    this.mErrorText.SearchProperties[WpfText.PropertyNames.AutomationId] = "ErrorTextBlock";
                    this.mErrorText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mErrorText;
            }
        }
        
        public WpfText Step2Title
        {
            get
            {
                if ((this.mStep2Title == null))
                {
                    this.mStep2Title = new WpfText(this);
                    #region Search Criteria
                    this.mStep2Title.SearchProperties[WpfText.PropertyNames.Name] = "2";
                    this.mStep2Title.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStep2Title;
            }
        }
        
        public WpfButton NewButton
        {
            get
            {
                if ((this.mNewButton == null))
                {
                    this.mNewButton = new WpfButton(this);
                    #region Search Criteria
                    this.mNewButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "NewButton";
                    this.mNewButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewButton;
            }
        }
        
        public WpfText ORText
        {
            get
            {
                if ((this.mORText == null))
                {
                    this.mORText = new WpfText(this);
                    #region Search Criteria
                    this.mORText.SearchProperties[WpfText.PropertyNames.Name] = "or";
                    this.mORText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mORText;
            }
        }
        
        public WpfButton EditButton
        {
            get
            {
                if ((this.mEditButton == null))
                {
                    this.mEditButton = new WpfButton(this);
                    #region Search Criteria
                    this.mEditButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "EditButton";
                    this.mEditButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEditButton;
            }
        }
        
        public WpfCustom SourcesComboBox
        {
            get
            {
                if ((this.mSourcesComboBox == null))
                {
                    this.mSourcesComboBox = new WpfCustom(this);
                    #region Search Criteria
                    this.mSourcesComboBox.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
                    this.mSourcesComboBox.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SourcesComboBox";
                    this.mSourcesComboBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourcesComboBox;
            }
        }
        
        public WpfText SelectSourceTitleText
        {
            get
            {
                if ((this.mSelectSourceTitleText == null))
                {
                    this.mSelectSourceTitleText = new WpfText(this);
                    #region Search Criteria
                    this.mSelectSourceTitleText.SearchProperties[WpfText.PropertyNames.Name] = "Select a Source";
                    this.mSelectSourceTitleText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSelectSourceTitleText;
            }
        }
        
        public WpfText Step1Title
        {
            get
            {
                if ((this.mStep1Title == null))
                {
                    this.mStep1Title = new WpfText(this);
                    #region Search Criteria
                    this.mStep1Title.SearchProperties[WpfText.PropertyNames.Name] = "1";
                    this.mStep1Title.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mStep1Title;
            }
        }
        
        public WpfPane NewPluginConnectorPane
        {
            get
            {
                if ((this.mNewPluginConnectorPane == null))
                {
                    this.mNewPluginConnectorPane = new WpfPane(this);
                    #region Search Criteria
                    this.mNewPluginConnectorPane.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
                    this.mNewPluginConnectorPane.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewPluginConnectorPane;
            }
        }
        #endregion
        
        #region Fields
        private NewPluginConnectorWizard mNewPluginConnectorWizard;
        
        private WpfCustom mNewPluginConnectorWizard1;
        
        private WpfText mSelectaNamespaceTitleText;
        
        private WpfCustom mNamespacesComboBox;
        
        private WpfText mStep3Title;
        
        private WpfText mSelectanActionTitle;
        
        private WpfCustom mActionsComboBox;
        
        private WpfButton mRefreshButton;
        
        private WpfText mStep4Title;
        
        private WpfText mTestConnectorTitleText;
        
        private WpfButton mTestButton;
        
        private WpfTable mInputTable;
        
        private TestResultsText mTestResultsText;
        
        private WpfText mCalculatedOutputsText;
        
        private WpfText mStep5Title;
        
        private WpfText mDefaultsAndMappingText;
        
        private WpfCustom mMappingsView;
        
        private WpfText mErrorText;
        
        private WpfText mStep2Title;
        
        private WpfButton mNewButton;
        
        private WpfText mORText;
        
        private WpfButton mEditButton;
        
        private WpfCustom mSourcesComboBox;
        
        private WpfText mSelectSourceTitleText;
        
        private WpfText mStep1Title;
        
        private WpfPane mNewPluginConnectorPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewPluginConnectorWizard : WpfCustom
    {
        
        public NewPluginConnectorWizard(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ManagePluginServiceControl";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public SourcesComboBox1 SourcesComboBox
        {
            get
            {
                if ((this.mSourcesComboBox == null))
                {
                    this.mSourcesComboBox = new SourcesComboBox1(this);
                }
                return this.mSourcesComboBox;
            }
        }
        
        public SourcesEditButton SourcesEditButton
        {
            get
            {
                if ((this.mSourcesEditButton == null))
                {
                    this.mSourcesEditButton = new SourcesEditButton(this);
                }
                return this.mSourcesEditButton;
            }
        }
        
        public NewButton1 NewButton
        {
            get
            {
                if ((this.mNewButton == null))
                {
                    this.mNewButton = new NewButton1(this);
                }
                return this.mNewButton;
            }
        }
        
        public ActionsComboBox1 ActionsComboBox
        {
            get
            {
                if ((this.mActionsComboBox == null))
                {
                    this.mActionsComboBox = new ActionsComboBox1(this);
                }
                return this.mActionsComboBox;
            }
        }
        
        public RefreshButton1 RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new RefreshButton1(this);
                }
                return this.mRefreshButton;
            }
        }
        
        public TestActionButton1 TestActionButton
        {
            get
            {
                if ((this.mTestActionButton == null))
                {
                    this.mTestActionButton = new TestActionButton1(this);
                }
                return this.mTestActionButton;
            }
        }
        
        public InputTable InputTable
        {
            get
            {
                if ((this.mInputTable == null))
                {
                    this.mInputTable = new InputTable(this);
                }
                return this.mInputTable;
            }
        }
        
        public MappingsView1 MappingsView
        {
            get
            {
                if ((this.mMappingsView == null))
                {
                    this.mMappingsView = new MappingsView1(this);
                }
                return this.mMappingsView;
            }
        }
        #endregion
        
        #region Fields
        private SourcesComboBox1 mSourcesComboBox;
        
        private SourcesEditButton mSourcesEditButton;
        
        private NewButton1 mNewButton;
        
        private ActionsComboBox1 mActionsComboBox;
        
        private RefreshButton1 mRefreshButton;
        
        private TestActionButton1 mTestActionButton;
        
        private InputTable mInputTable;
        
        private MappingsView1 mMappingsView;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourcesComboBox1 : WpfCustom
    {
        
        public SourcesComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SourcesComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton SourcesComboBoxDropDownButton
        {
            get
            {
                if ((this.mSourcesComboBoxDropDownButton == null))
                {
                    this.mSourcesComboBoxDropDownButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSourcesComboBoxDropDownButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mSourcesComboBoxDropDownButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourcesComboBoxDropDownButton;
            }
        }
        
        public WpfEdit SourcesTextBox
        {
            get
            {
                if ((this.mSourcesTextBox == null))
                {
                    this.mSourcesTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mSourcesTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TextBoxPresenter";
                    this.mSourcesTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourcesTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mSourcesComboBoxDropDownButton;
        
        private WpfEdit mSourcesTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SourcesEditButton : WpfButton
    {
        
        public SourcesEditButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "EditButton";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText SourcesEditButtonText
        {
            get
            {
                if ((this.mSourcesEditButtonText == null))
                {
                    this.mSourcesEditButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mSourcesEditButtonText.SearchProperties[WpfText.PropertyNames.Name] = " ... ";
                    this.mSourcesEditButtonText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSourcesEditButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mSourcesEditButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewButton1 : WpfButton
    {
        
        public NewButton1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "NewButton";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText NewButtonText
        {
            get
            {
                if ((this.mNewButtonText == null))
                {
                    this.mNewButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mNewButtonText.SearchProperties[WpfText.PropertyNames.Name] = "New";
                    this.mNewButtonText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mNewButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ActionsComboBox1 : WpfCustom
    {
        
        public ActionsComboBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.XamComboEditor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ActionsComboBox";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ActionsComboBoxDropDownButton
        {
            get
            {
                if ((this.mActionsComboBoxDropDownButton == null))
                {
                    this.mActionsComboBoxDropDownButton = new WpfButton(this);
                    #region Search Criteria
                    this.mActionsComboBoxDropDownButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ToggleButton";
                    this.mActionsComboBoxDropDownButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mActionsComboBoxDropDownButton;
            }
        }
        
        public WpfEdit ActionsTextBox
        {
            get
            {
                if ((this.mActionsTextBox == null))
                {
                    this.mActionsTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mActionsTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TextBoxPresenter";
                    this.mActionsTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mActionsTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mActionsComboBoxDropDownButton;
        
        private WpfEdit mActionsTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RefreshButton1 : WpfButton
    {
        
        public RefreshButton1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "RefreshButton";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText RefreshingText
        {
            get
            {
                if ((this.mRefreshingText == null))
                {
                    this.mRefreshingText = new WpfText(this);
                    #region Search Criteria
                    this.mRefreshingText.SearchProperties[WpfText.PropertyNames.Name] = "";
                    this.mRefreshingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRefreshingText;
            }
        }
        
        public WpfCustom CircularProgressBar
        {
            get
            {
                if ((this.mCircularProgressBar == null))
                {
                    this.mCircularProgressBar = new WpfCustom(this);
                    #region Search Criteria
                    this.mCircularProgressBar.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mCircularProgressBar.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mCircularProgressBar.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCircularProgressBar;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mRefreshingText;
        
        private WpfCustom mCircularProgressBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestActionButton1 : WpfButton
    {
        
        public TestActionButton1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TestButton";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TestActionButtonText
        {
            get
            {
                if ((this.mTestActionButtonText == null))
                {
                    this.mTestActionButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mTestActionButtonText.SearchProperties[WpfText.PropertyNames.Name] = "Test";
                    this.mTestActionButtonText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestActionButtonText;
            }
        }
        
        public WpfCustom CircularProgressBar
        {
            get
            {
                if ((this.mCircularProgressBar == null))
                {
                    this.mCircularProgressBar = new WpfCustom(this);
                    #region Search Criteria
                    this.mCircularProgressBar.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.CircularProgressBar";
                    this.mCircularProgressBar.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mCircularProgressBar.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCircularProgressBar;
            }
        }
        
        public WpfPane ScrollViewer
        {
            get
            {
                if ((this.mScrollViewer == null))
                {
                    this.mScrollViewer = new WpfPane(this);
                    #region Search Criteria
                    this.mScrollViewer.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
                    this.mScrollViewer.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mScrollViewer.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mScrollViewer;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTestActionButtonText;
        
        private WpfCustom mCircularProgressBar;
        
        private WpfPane mScrollViewer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputTable : WpfTable
    {
        
        public InputTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "InputGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfPane InputPane
        {
            get
            {
                if ((this.mInputPane == null))
                {
                    this.mInputPane = new WpfPane(this);
                    #region Search Criteria
                    this.mInputPane.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
                    this.mInputPane.SearchProperties[WpfPane.PropertyNames.Name] = "0";
                    this.mInputPane.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputPane;
            }
        }
        
        public DataCell DataCell
        {
            get
            {
                if ((this.mDataCell == null))
                {
                    this.mDataCell = new DataCell(this);
                }
                return this.mDataCell;
            }
        }
        
        public ValueCell4 ValueCell
        {
            get
            {
                if ((this.mValueCell == null))
                {
                    this.mValueCell = new ValueCell4(this);
                }
                return this.mValueCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfPane mInputPane;
        
        private DataCell mDataCell;
        
        private ValueCell4 mValueCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataCell : WpfCell
    {
        
        public DataCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "data";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText DataText
        {
            get
            {
                if ((this.mDataText == null))
                {
                    this.mDataText = new WpfText(this);
                    #region Search Criteria
                    this.mDataText.SearchProperties[WpfText.PropertyNames.Name] = "data";
                    this.mDataText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDataText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mDataText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueCell4 : WpfCell
    {
        
        public ValueCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "value";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit ValueTextBox
        {
            get
            {
                if ((this.mValueTextBox == null))
                {
                    this.mValueTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mValueTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueTextBox;
            }
        }
        
        public WpfScrollBar VerticalScrollBar
        {
            get
            {
                if ((this.mVerticalScrollBar == null))
                {
                    this.mVerticalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mVerticalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "VerticalScrollBar";
                    this.mVerticalScrollBar.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVerticalScrollBar;
            }
        }
        
        public WpfScrollBar HorizontalScrollBar
        {
            get
            {
                if ((this.mHorizontalScrollBar == null))
                {
                    this.mHorizontalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mHorizontalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "HorizontalScrollBar";
                    this.mHorizontalScrollBar.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHorizontalScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mValueTextBox;
        
        private WpfScrollBar mVerticalScrollBar;
        
        private WpfScrollBar mHorizontalScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MappingsView1 : WpfCustom
    {
        
        public MappingsView1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MappingsView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "MappingsView";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfPane InputMappingsPane
        {
            get
            {
                if ((this.mInputMappingsPane == null))
                {
                    this.mInputMappingsPane = new WpfPane(this);
                    #region Search Criteria
                    this.mInputMappingsPane.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
                    this.mInputMappingsPane.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputMappingsPane;
            }
        }
        
        public InputMappingTable InputMappingTable
        {
            get
            {
                if ((this.mInputMappingTable == null))
                {
                    this.mInputMappingTable = new InputMappingTable(this);
                }
                return this.mInputMappingTable;
            }
        }
        
        public WpfText DefaultValueText
        {
            get
            {
                if ((this.mDefaultValueText == null))
                {
                    this.mDefaultValueText = new WpfText(this);
                    #region Search Criteria
                    this.mDefaultValueText.SearchProperties[WpfText.PropertyNames.Name] = "Default Value";
                    this.mDefaultValueText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDefaultValueText;
            }
        }
        
        public NoneText1 NoneText
        {
            get
            {
                if ((this.mNoneText == null))
                {
                    this.mNoneText = new NoneText1(this);
                }
                return this.mNoneText;
            }
        }
        
        public OutputsMappingTable OutputsMappingTable
        {
            get
            {
                if ((this.mOutputsMappingTable == null))
                {
                    this.mOutputsMappingTable = new OutputsMappingTable(this);
                }
                return this.mOutputsMappingTable;
            }
        }
        
        public WpfText NoneText1
        {
            get
            {
                if ((this.mNoneText1 == null))
                {
                    this.mNoneText1 = new WpfText(this);
                    #region Search Criteria
                    this.mNoneText1.SearchProperties[WpfText.PropertyNames.Name] = "None";
                    this.mNoneText1.SearchProperties[WpfText.PropertyNames.Instance] = "2";
                    this.mNoneText1.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNoneText1;
            }
        }
        
        public RecordsetNameText1 RecordsetNameText
        {
            get
            {
                if ((this.mRecordsetNameText == null))
                {
                    this.mRecordsetNameText = new RecordsetNameText1(this);
                }
                return this.mRecordsetNameText;
            }
        }
        #endregion
        
        #region Fields
        private WpfPane mInputMappingsPane;
        
        private InputMappingTable mInputMappingTable;
        
        private WpfText mDefaultValueText;
        
        private NoneText1 mNoneText;
        
        private OutputsMappingTable mOutputsMappingTable;
        
        private WpfText mNoneText1;
        
        private RecordsetNameText1 mRecordsetNameText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputMappingTable : WpfTable
    {
        
        public InputMappingTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "InputsMappingDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfPane InputMappingsPane
        {
            get
            {
                if ((this.mInputMappingsPane == null))
                {
                    this.mInputMappingsPane = new WpfPane(this);
                    #region Search Criteria
                    this.mInputMappingsPane.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
                    this.mInputMappingsPane.SearchProperties[WpfPane.PropertyNames.Name] = "0";
                    this.mInputMappingsPane.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputMappingsPane;
            }
        }
        
        public DataCell1 DataCell
        {
            get
            {
                if ((this.mDataCell == null))
                {
                    this.mDataCell = new DataCell1(this);
                }
                return this.mDataCell;
            }
        }
        
        public DefaultValueCell DefaultValueCell
        {
            get
            {
                if ((this.mDefaultValueCell == null))
                {
                    this.mDefaultValueCell = new DefaultValueCell(this);
                }
                return this.mDefaultValueCell;
            }
        }
        
        public RequiredCell RequiredCell
        {
            get
            {
                if ((this.mRequiredCell == null))
                {
                    this.mRequiredCell = new RequiredCell(this);
                }
                return this.mRequiredCell;
            }
        }
        
        public EmptyIsNullCell EmptyIsNullCell
        {
            get
            {
                if ((this.mEmptyIsNullCell == null))
                {
                    this.mEmptyIsNullCell = new EmptyIsNullCell(this);
                }
                return this.mEmptyIsNullCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfPane mInputMappingsPane;
        
        private DataCell1 mDataCell;
        
        private DefaultValueCell mDefaultValueCell;
        
        private RequiredCell mRequiredCell;
        
        private EmptyIsNullCell mEmptyIsNullCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataCell1 : WpfCell
    {
        
        public DataCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "data";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText DataText
        {
            get
            {
                if ((this.mDataText == null))
                {
                    this.mDataText = new WpfText(this);
                    #region Search Criteria
                    this.mDataText.SearchProperties[WpfText.PropertyNames.Name] = "data";
                    this.mDataText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDataText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mDataText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DefaultValueCell : WpfCell
    {
        
        public DefaultValueCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit DefaultValueTextBox
        {
            get
            {
                if ((this.mDefaultValueTextBox == null))
                {
                    this.mDefaultValueTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mDefaultValueTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDefaultValueTextBox;
            }
        }
        
        public WpfScrollBar VerticalScrollBar
        {
            get
            {
                if ((this.mVerticalScrollBar == null))
                {
                    this.mVerticalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mVerticalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "VerticalScrollBar";
                    this.mVerticalScrollBar.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVerticalScrollBar;
            }
        }
        
        public WpfScrollBar HorizontalScrollBar
        {
            get
            {
                if ((this.mHorizontalScrollBar == null))
                {
                    this.mHorizontalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mHorizontalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "HorizontalScrollBar";
                    this.mHorizontalScrollBar.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHorizontalScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mDefaultValueTextBox;
        
        private WpfScrollBar mVerticalScrollBar;
        
        private WpfScrollBar mHorizontalScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RequiredCell : WpfCell
    {
        
        public RequiredCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "True";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox RequiredCheckBox
        {
            get
            {
                if ((this.mRequiredCheckBox == null))
                {
                    this.mRequiredCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRequiredCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRequiredCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mRequiredCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EmptyIsNullCell : WpfCell
    {
        
        public EmptyIsNullCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "False";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox EmptyIsNullCheckBox
        {
            get
            {
                if ((this.mEmptyIsNullCheckBox == null))
                {
                    this.mEmptyIsNullCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mEmptyIsNullCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mEmptyIsNullCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mEmptyIsNullCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NoneText1 : WpfText
    {
        
        public NoneText1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "None";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfPane OutputMappingPane
        {
            get
            {
                if ((this.mOutputMappingPane == null))
                {
                    this.mOutputMappingPane = new WpfPane(this);
                    #region Search Criteria
                    this.mOutputMappingPane.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
                    this.mOutputMappingPane.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mOutputMappingPane.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputMappingPane;
            }
        }
        #endregion
        
        #region Fields
        private WpfPane mOutputMappingPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputsMappingTable : WpfTable
    {
        
        public OutputsMappingTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "OutputsMappingDataGrid";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfPane OutputMappingsPane
        {
            get
            {
                if ((this.mOutputMappingsPane == null))
                {
                    this.mOutputMappingsPane = new WpfPane(this);
                    #region Search Criteria
                    this.mOutputMappingsPane.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.CellsPanel";
                    this.mOutputMappingsPane.SearchProperties[WpfPane.PropertyNames.Name] = "0";
                    this.mOutputMappingsPane.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputMappingsPane;
            }
        }
        
        public TextCell TextCell
        {
            get
            {
                if ((this.mTextCell == null))
                {
                    this.mTextCell = new TextCell(this);
                }
                return this.mTextCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfPane mOutputMappingsPane;
        
        private TextCell mTextCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TextCell : WpfCell
    {
        
        public TextCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.SearchProperties[WpfCell.PropertyNames.Value] = "PrimitiveReturnValue";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TextCellText
        {
            get
            {
                if ((this.mTextCellText == null))
                {
                    this.mTextCellText = new WpfText(this);
                    #region Search Criteria
                    this.mTextCellText.SearchProperties[WpfText.PropertyNames.Name] = "PrimitiveReturnValue";
                    this.mTextCellText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextCellText;
            }
        }
        
        public WpfScrollBar VerticalScrollBar
        {
            get
            {
                if ((this.mVerticalScrollBar == null))
                {
                    this.mVerticalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mVerticalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "VerticalScrollBar";
                    this.mVerticalScrollBar.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVerticalScrollBar;
            }
        }
        
        public WpfScrollBar HorizontalScrollBar
        {
            get
            {
                if ((this.mHorizontalScrollBar == null))
                {
                    this.mHorizontalScrollBar = new WpfScrollBar(this);
                    #region Search Criteria
                    this.mHorizontalScrollBar.SearchProperties[WpfScrollBar.PropertyNames.AutomationId] = "HorizontalScrollBar";
                    this.mHorizontalScrollBar.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mHorizontalScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextCellText;
        
        private WpfScrollBar mVerticalScrollBar;
        
        private WpfScrollBar mHorizontalScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetNameText1 : WpfText
    {
        
        public RecordsetNameText1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Recordset Name";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit RecordsetTextBox
        {
            get
            {
                if ((this.mRecordsetTextBox == null))
                {
                    this.mRecordsetTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mRecordsetTextBox.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mRecordsetTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRecordsetTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mRecordsetTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestResultsText : WpfText
    {
        
        public TestResultsText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Test Results";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfPane TestResultsPane
        {
            get
            {
                if ((this.mTestResultsPane == null))
                {
                    this.mTestResultsPane = new WpfPane(this);
                    #region Search Criteria
                    this.mTestResultsPane.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
                    this.mTestResultsPane.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mTestResultsPane.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTestResultsPane;
            }
        }
        #endregion
        
        #region Fields
        private WpfPane mTestResultsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FilesMenu : WpfMenu
    {
        
        public FilesMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.AutomationId] = "filesMenu";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem PositionButton
        {
            get
            {
                if ((this.mPositionButton == null))
                {
                    this.mPositionButton = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mPositionButton.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "PART_FilesMenuItem";
                    this.mPositionButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mPositionButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mPositionButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplitPaneRight : WpfCustom
    {
        
        public SplitPaneRight(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.SplitPane";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Variables Variables
        {
            get
            {
                if ((this.mVariables == null))
                {
                    this.mVariables = new Variables(this);
                }
                return this.mVariables;
            }
        }
        
        public DebugOutput DebugOutput
        {
            get
            {
                if ((this.mDebugOutput == null))
                {
                    this.mDebugOutput = new DebugOutput(this);
                }
                return this.mDebugOutput;
            }
        }
        #endregion
        
        #region Fields
        private Variables mVariables;
        
        private DebugOutput mDebugOutput;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Variables : WpfCustom
    {
        
        public Variables(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ContentPane";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Variables";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton VariableUnpinBtn
        {
            get
            {
                if ((this.mVariableUnpinBtn == null))
                {
                    this.mVariableUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mVariableUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mVariableUnpinBtn.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableUnpinBtn;
            }
        }
        
        public VariablesControl VariablesControl
        {
            get
            {
                if ((this.mVariablesControl == null))
                {
                    this.mVariablesControl = new VariablesControl(this);
                }
                return this.mVariablesControl;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mVariableUnpinBtn;
        
        private VariablesControl mVariablesControl;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariablesControl : WpfCustom
    {
        
        public VariablesControl(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DataListView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_VariablesControl_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_AddRemovebtn_AutoID";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        
        public WpfButton SortButton
        {
            get
            {
                if ((this.mSortButton == null))
                {
                    this.mSortButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSortButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Sortbtn_AutoID";
                    this.mSortButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSortButton;
            }
        }
        
        public XtgDataPresenter XtgDataPresenter
        {
            get
            {
                if ((this.mXtgDataPresenter == null))
                {
                    this.mXtgDataPresenter = new XtgDataPresenter(this);
                }
                return this.mXtgDataPresenter;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDeleteButton;
        
        private WpfButton mSortButton;
        
        private XtgDataPresenter mXtgDataPresenter;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class XtgDataPresenter : WpfCustom
    {
        
        public XtgDataPresenter(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DataPresenterBase";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Xtg";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Table Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table(this);
                }
                return this.mTable;
            }
        }
        #endregion
        
        #region Fields
        private Table mTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table : WpfTable
    {
        
        public Table(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public VariableDataItem VariableDataItem
        {
            get
            {
                if ((this.mVariableDataItem == null))
                {
                    this.mVariableDataItem = new VariableDataItem(this);
                }
                return this.mVariableDataItem;
            }
        }
        
        public RecordsetDataItem RecordsetDataItem
        {
            get
            {
                if ((this.mRecordsetDataItem == null))
                {
                    this.mRecordsetDataItem = new RecordsetDataItem(this);
                }
                return this.mRecordsetDataItem;
            }
        }
        
        public ObjectDataItem ObjectDataItem
        {
            get
            {
                if ((this.mObjectDataItem == null))
                {
                    this.mObjectDataItem = new ObjectDataItem(this);
                }
                return this.mObjectDataItem;
            }
        }
        #endregion
        
        #region Fields
        private VariableDataItem mVariableDataItem;
        
        private RecordsetDataItem mRecordsetDataItem;
        
        private ObjectDataItem mObjectDataItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableDataItem : WpfControl
    {
        
        public VariableDataItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Variable";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DisplayNameHeaderCell DisplayNameHeaderCell
        {
            get
            {
                if ((this.mDisplayNameHeaderCell == null))
                {
                    this.mDisplayNameHeaderCell = new DisplayNameHeaderCell(this);
                }
                return this.mDisplayNameHeaderCell;
            }
        }
        
        public InputHeaderCell InputHeaderCell
        {
            get
            {
                if ((this.mInputHeaderCell == null))
                {
                    this.mInputHeaderCell = new InputHeaderCell(this);
                }
                return this.mInputHeaderCell;
            }
        }
        
        public OutputHeaderCell OutputHeaderCell
        {
            get
            {
                if ((this.mOutputHeaderCell == null))
                {
                    this.mOutputHeaderCell = new OutputHeaderCell(this);
                }
                return this.mOutputHeaderCell;
            }
        }
        
        public List List
        {
            get
            {
                if ((this.mList == null))
                {
                    this.mList = new List(this);
                }
                return this.mList;
            }
        }
        #endregion
        
        #region Fields
        private DisplayNameHeaderCell mDisplayNameHeaderCell;
        
        private InputHeaderCell mInputHeaderCell;
        
        private OutputHeaderCell mOutputHeaderCell;
        
        private List mList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DisplayNameHeaderCell : WpfCell
    {
        
        public DisplayNameHeaderCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = " Display Name";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText VariableText
        {
            get
            {
                if ((this.mVariableText == null))
                {
                    this.mVariableText = new WpfText(this);
                    #region Search Criteria
                    this.mVariableText.SearchProperties[WpfText.PropertyNames.Name] = "Variable";
                    this.mVariableText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableText;
            }
        }
        
        public WpfCustom ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new WpfCustom(this);
                    #region Search Criteria
                    this.mValueEditor.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
                    this.mValueEditor.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueEditor;
            }
        }
        
        public WpfToggleButton ExpanderToggleButton
        {
            get
            {
                if ((this.mExpanderToggleButton == null))
                {
                    this.mExpanderToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mExpanderToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "PART_Expander";
                    this.mExpanderToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpanderToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mVariableText;
        
        private WpfCustom mValueEditor;
        
        private WpfToggleButton mExpanderToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputHeaderCell : WpfCell
    {
        
        public InputHeaderCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.AutomationId] = "TextBlock";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputHeaderCell : WpfCell
    {
        
        public OutputHeaderCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.AutomationId] = "TextBlock";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class List : WpfList
    {
        
        public List(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ListItem1 ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new ListItem1(this);
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private ListItem1 mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ListItem1 : WpfListItem
    {
        
        public ListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Children";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Table1 Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table1(this);
                }
                return this.mTable;
            }
        }
        #endregion
        
        #region Fields
        private Table1 mTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table1 : WpfTable
    {
        
        public Table1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataItem1 DataItem1
        {
            get
            {
                if ((this.mDataItem1 == null))
                {
                    this.mDataItem1 = new DataItem1(this);
                }
                return this.mDataItem1;
            }
        }
        
        public DataItem2 DataItem2
        {
            get
            {
                if ((this.mDataItem2 == null))
                {
                    this.mDataItem2 = new DataItem2(this);
                }
                return this.mDataItem2;
            }
        }
        
        public DataItem3 DataItem3
        {
            get
            {
                if ((this.mDataItem3 == null))
                {
                    this.mDataItem3 = new DataItem3(this);
                }
                return this.mDataItem3;
            }
        }
        
        public DataItem4 DataItem4
        {
            get
            {
                if ((this.mDataItem4 == null))
                {
                    this.mDataItem4 = new DataItem4(this);
                }
                return this.mDataItem4;
            }
        }
        
        public DataItem5 DataItem5
        {
            get
            {
                if ((this.mDataItem5 == null))
                {
                    this.mDataItem5 = new DataItem5(this);
                }
                return this.mDataItem5;
            }
        }
        #endregion
        
        #region Fields
        private DataItem1 mDataItem1;
        
        private DataItem2 mDataItem2;
        
        private DataItem3 mDataItem3;
        
        private DataItem4 mDataItem4;
        
        private DataItem5 mDataItem5;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem1 : WpfControl
    {
        
        public DataItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputCell2 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell2(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell(this);
                }
                return this.mOutputCell;
            }
        }
        
        public VariableNameCell VariableNameCell
        {
            get
            {
                if ((this.mVariableNameCell == null))
                {
                    this.mVariableNameCell = new VariableNameCell(this);
                }
                return this.mVariableNameCell;
            }
        }
        #endregion
        
        #region Fields
        private InputCell2 mInputCell;
        
        private OutputCell mOutputCell;
        
        private VariableNameCell mVariableNameCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell2 : WpfCell
    {
        
        public InputCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell : WpfCell
    {
        
        public OutputCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableNameCell : WpfCell
    {
        
        public VariableNameCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueEditor ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new ValueEditor(this);
                }
                return this.mValueEditor;
            }
        }
        #endregion
        
        #region Fields
        private ValueEditor mValueEditor;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueEditor : WpfCustom
    {
        
        public ValueEditor(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TextBox1 TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new TextBox1(this);
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private TextBox1 mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TextBox1 : WpfEdit
    {
        
        public TextBox1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TextboxFloatingText
        {
            get
            {
                if ((this.mTextboxFloatingText == null))
                {
                    this.mTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mTextboxFloatingText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextboxFloatingText;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextboxFloatingText;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem2 : WpfControl
    {
        
        public DataItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputCell3 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell3(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell1 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell1(this);
                }
                return this.mOutputCell;
            }
        }
        
        public VariableNameCell1 VariableNameCell
        {
            get
            {
                if ((this.mVariableNameCell == null))
                {
                    this.mVariableNameCell = new VariableNameCell1(this);
                }
                return this.mVariableNameCell;
            }
        }
        #endregion
        
        #region Fields
        private InputCell3 mInputCell;
        
        private OutputCell1 mOutputCell;
        
        private VariableNameCell1 mVariableNameCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell3 : WpfCell
    {
        
        public InputCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell1 : WpfCell
    {
        
        public OutputCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableNameCell1 : WpfCell
    {
        
        public VariableNameCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueEditor1 ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new ValueEditor1(this);
                }
                return this.mValueEditor;
            }
        }
        #endregion
        
        #region Fields
        private ValueEditor1 mValueEditor;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueEditor1 : WpfCustom
    {
        
        public ValueEditor1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TextBox2 TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new TextBox2(this);
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private TextBox2 mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TextBox2 : WpfEdit
    {
        
        public TextBox2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TextboxFloatingText
        {
            get
            {
                if ((this.mTextboxFloatingText == null))
                {
                    this.mTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mTextboxFloatingText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextboxFloatingText;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextboxFloatingText;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem3 : WpfControl
    {
        
        public DataItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputCell4 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell4(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell2 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell2(this);
                }
                return this.mOutputCell;
            }
        }
        
        public VariableNameCell2 VariableNameCell
        {
            get
            {
                if ((this.mVariableNameCell == null))
                {
                    this.mVariableNameCell = new VariableNameCell2(this);
                }
                return this.mVariableNameCell;
            }
        }
        #endregion
        
        #region Fields
        private InputCell4 mInputCell;
        
        private OutputCell2 mOutputCell;
        
        private VariableNameCell2 mVariableNameCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell4 : WpfCell
    {
        
        public InputCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell2 : WpfCell
    {
        
        public OutputCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableNameCell2 : WpfCell
    {
        
        public VariableNameCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueEditor2 ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new ValueEditor2(this);
                }
                return this.mValueEditor;
            }
        }
        #endregion
        
        #region Fields
        private ValueEditor2 mValueEditor;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueEditor2 : WpfCustom
    {
        
        public ValueEditor2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TextBox3 TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new TextBox3(this);
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private TextBox3 mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TextBox3 : WpfEdit
    {
        
        public TextBox3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TextboxFloatingText
        {
            get
            {
                if ((this.mTextboxFloatingText == null))
                {
                    this.mTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mTextboxFloatingText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextboxFloatingText;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextboxFloatingText;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem4 : WpfControl
    {
        
        public DataItem4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputCell5 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell5(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell3 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell3(this);
                }
                return this.mOutputCell;
            }
        }
        
        public VariableNameCell3 VariableNameCell
        {
            get
            {
                if ((this.mVariableNameCell == null))
                {
                    this.mVariableNameCell = new VariableNameCell3(this);
                }
                return this.mVariableNameCell;
            }
        }
        #endregion
        
        #region Fields
        private InputCell5 mInputCell;
        
        private OutputCell3 mOutputCell;
        
        private VariableNameCell3 mVariableNameCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell5 : WpfCell
    {
        
        public InputCell5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell3 : WpfCell
    {
        
        public OutputCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableNameCell3 : WpfCell
    {
        
        public VariableNameCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueEditor3 ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new ValueEditor3(this);
                }
                return this.mValueEditor;
            }
        }
        #endregion
        
        #region Fields
        private ValueEditor3 mValueEditor;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueEditor3 : WpfCustom
    {
        
        public ValueEditor3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TextBox4 TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new TextBox4(this);
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private TextBox4 mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TextBox4 : WpfEdit
    {
        
        public TextBox4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TextboxFloatingText
        {
            get
            {
                if ((this.mTextboxFloatingText == null))
                {
                    this.mTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mTextboxFloatingText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextboxFloatingText;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextboxFloatingText;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem5 : WpfControl
    {
        
        public DataItem5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputCell6 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell6(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell4 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell4(this);
                }
                return this.mOutputCell;
            }
        }
        
        public VariableNameCell4 VariableNameCell
        {
            get
            {
                if ((this.mVariableNameCell == null))
                {
                    this.mVariableNameCell = new VariableNameCell4(this);
                }
                return this.mVariableNameCell;
            }
        }
        #endregion
        
        #region Fields
        private InputCell6 mInputCell;
        
        private OutputCell4 mOutputCell;
        
        private VariableNameCell4 mVariableNameCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell6 : WpfCell
    {
        
        public InputCell6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell4 : WpfCell
    {
        
        public OutputCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class VariableNameCell4 : WpfCell
    {
        
        public VariableNameCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueEditor4 ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new ValueEditor4(this);
                }
                return this.mValueEditor;
            }
        }
        #endregion
        
        #region Fields
        private ValueEditor4 mValueEditor;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueEditor4 : WpfCustom
    {
        
        public ValueEditor4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public TextBox5 TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new TextBox5(this);
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private TextBox5 mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TextBox5 : WpfEdit
    {
        
        public TextBox5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText TextboxFloatingText
        {
            get
            {
                if ((this.mTextboxFloatingText == null))
                {
                    this.mTextboxFloatingText = new WpfText(this);
                    #region Search Criteria
                    this.mTextboxFloatingText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LabelText";
                    this.mTextboxFloatingText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextboxFloatingText;
            }
        }
        
        public WpfImage DeleteDisabledImage
        {
            get
            {
                if ((this.mDeleteDisabledImage == null))
                {
                    this.mDeleteDisabledImage = new WpfImage(this);
                    #region Search Criteria
                    this.mDeleteDisabledImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "DeleteDisabled";
                    this.mDeleteDisabledImage.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteDisabledImage;
            }
        }
        
        public WpfButton DeleteButton
        {
            get
            {
                if ((this.mDeleteButton == null))
                {
                    this.mDeleteButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDeleteButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteButton";
                    this.mDeleteButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mTextboxFloatingText;
        
        private WpfImage mDeleteDisabledImage;
        
        private WpfButton mDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetDataItem : WpfControl
    {
        
        public RecordsetDataItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Recordset";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DisplayNameHeaderCell1 DisplayNameHeaderCell
        {
            get
            {
                if ((this.mDisplayNameHeaderCell == null))
                {
                    this.mDisplayNameHeaderCell = new DisplayNameHeaderCell1(this);
                }
                return this.mDisplayNameHeaderCell;
            }
        }
        
        public InputHeaderCell1 InputHeaderCell
        {
            get
            {
                if ((this.mInputHeaderCell == null))
                {
                    this.mInputHeaderCell = new InputHeaderCell1(this);
                }
                return this.mInputHeaderCell;
            }
        }
        
        public OutputHeaderCell1 OutputHeaderCell
        {
            get
            {
                if ((this.mOutputHeaderCell == null))
                {
                    this.mOutputHeaderCell = new OutputHeaderCell1(this);
                }
                return this.mOutputHeaderCell;
            }
        }
        
        public List1 List
        {
            get
            {
                if ((this.mList == null))
                {
                    this.mList = new List1(this);
                }
                return this.mList;
            }
        }
        #endregion
        
        #region Fields
        private DisplayNameHeaderCell1 mDisplayNameHeaderCell;
        
        private InputHeaderCell1 mInputHeaderCell;
        
        private OutputHeaderCell1 mOutputHeaderCell;
        
        private List1 mList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DisplayNameHeaderCell1 : WpfCell
    {
        
        public DisplayNameHeaderCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = " Display Name";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText RecordsetText
        {
            get
            {
                if ((this.mRecordsetText == null))
                {
                    this.mRecordsetText = new WpfText(this);
                    #region Search Criteria
                    this.mRecordsetText.SearchProperties[WpfText.PropertyNames.Name] = "Recordset";
                    this.mRecordsetText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRecordsetText;
            }
        }
        
        public WpfCustom ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new WpfCustom(this);
                    #region Search Criteria
                    this.mValueEditor.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
                    this.mValueEditor.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueEditor;
            }
        }
        
        public WpfToggleButton ExpanderToggleButton
        {
            get
            {
                if ((this.mExpanderToggleButton == null))
                {
                    this.mExpanderToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mExpanderToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "PART_Expander";
                    this.mExpanderToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpanderToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mRecordsetText;
        
        private WpfCustom mValueEditor;
        
        private WpfToggleButton mExpanderToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputHeaderCell1 : WpfCell
    {
        
        public InputHeaderCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.AutomationId] = "TextBlock";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputHeaderCell1 : WpfCell
    {
        
        public OutputHeaderCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit Textbox
        {
            get
            {
                if ((this.mTextbox == null))
                {
                    this.mTextbox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextbox;
            }
        }
        
        public WpfText Text
        {
            get
            {
                if ((this.mText == null))
                {
                    this.mText = new WpfText(this);
                    #region Search Criteria
                    this.mText.SearchProperties[WpfText.PropertyNames.AutomationId] = "TextBlock";
                    this.mText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextbox;
        
        private WpfText mText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class List1 : WpfList
    {
        
        public List1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ListItem2 ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new ListItem2(this);
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private ListItem2 mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ListItem2 : WpfListItem
    {
        
        public ListItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Children";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Table2 Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table2(this);
                }
                return this.mTable;
            }
        }
        #endregion
        
        #region Fields
        private Table2 mTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table2 : WpfTable
    {
        
        public Table2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataItem11 DataItem1
        {
            get
            {
                if ((this.mDataItem1 == null))
                {
                    this.mDataItem1 = new DataItem11(this);
                }
                return this.mDataItem1;
            }
        }
        
        public DataItem21 DataItem2
        {
            get
            {
                if ((this.mDataItem2 == null))
                {
                    this.mDataItem2 = new DataItem21(this);
                }
                return this.mDataItem2;
            }
        }
        
        public DataItem31 DataItem3
        {
            get
            {
                if ((this.mDataItem3 == null))
                {
                    this.mDataItem3 = new DataItem31(this);
                }
                return this.mDataItem3;
            }
        }
        
        public DataItem41 DataItem4
        {
            get
            {
                if ((this.mDataItem4 == null))
                {
                    this.mDataItem4 = new DataItem41(this);
                }
                return this.mDataItem4;
            }
        }
        
        public DataItem51 DataItem5
        {
            get
            {
                if ((this.mDataItem5 == null))
                {
                    this.mDataItem5 = new DataItem51(this);
                }
                return this.mDataItem5;
            }
        }
        #endregion
        
        #region Fields
        private DataItem11 mDataItem1;
        
        private DataItem21 mDataItem2;
        
        private DataItem31 mDataItem3;
        
        private DataItem41 mDataItem4;
        
        private DataItem51 mDataItem5;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem11 : WpfControl
    {
        
        public DataItem11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public RecordsetNameCell RecordsetNameCell
        {
            get
            {
                if ((this.mRecordsetNameCell == null))
                {
                    this.mRecordsetNameCell = new RecordsetNameCell(this);
                }
                return this.mRecordsetNameCell;
            }
        }
        
        public InputCell7 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell7(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell5 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell5(this);
                }
                return this.mOutputCell;
            }
        }
        
        public List2 List
        {
            get
            {
                if ((this.mList == null))
                {
                    this.mList = new List2(this);
                }
                return this.mList;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetNameCell mRecordsetNameCell;
        
        private InputCell7 mInputCell;
        
        private OutputCell5 mOutputCell;
        
        private List2 mList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetNameCell : WpfCell
    {
        
        public RecordsetNameCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueEditor5 ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new ValueEditor5(this);
                }
                return this.mValueEditor;
            }
        }
        
        public WpfToggleButton ExpanderToggleButton
        {
            get
            {
                if ((this.mExpanderToggleButton == null))
                {
                    this.mExpanderToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mExpanderToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "PART_Expander";
                    this.mExpanderToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpanderToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private ValueEditor5 mValueEditor;
        
        private WpfToggleButton mExpanderToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueEditor5 : WpfCustom
    {
        
        public ValueEditor5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell7 : WpfCell
    {
        
        public InputCell7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell5 : WpfCell
    {
        
        public OutputCell5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new WpfCustom(this);
                    #region Search Criteria
                    this.mValueEditor.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
                    this.mValueEditor.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueEditor;
            }
        }
        
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mValueEditor;
        
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class List2 : WpfList
    {
        
        public List2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ListItem3 ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new ListItem3(this);
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private ListItem3 mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ListItem3 : WpfListItem
    {
        
        public ListItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Children";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Table3 Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table3(this);
                }
                return this.mTable;
            }
        }
        #endregion
        
        #region Fields
        private Table3 mTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table3 : WpfTable
    {
        
        public Table3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataItem DataItem
        {
            get
            {
                if ((this.mDataItem == null))
                {
                    this.mDataItem = new DataItem(this);
                }
                return this.mDataItem;
            }
        }
        #endregion
        
        #region Fields
        private DataItem mDataItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem : WpfControl
    {
        
        public DataItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ExpansionIndicatorButton
        {
            get
            {
                if ((this.mExpansionIndicatorButton == null))
                {
                    this.mExpansionIndicatorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpansionIndicatorButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ExpansionIndicator";
                    this.mExpansionIndicatorButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpansionIndicatorButton;
            }
        }
        
        public FieldNameCell FieldNameCell
        {
            get
            {
                if ((this.mFieldNameCell == null))
                {
                    this.mFieldNameCell = new FieldNameCell(this);
                }
                return this.mFieldNameCell;
            }
        }
        
        public InputCell8 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell8(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell6 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell6(this);
                }
                return this.mOutputCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mExpansionIndicatorButton;
        
        private FieldNameCell mFieldNameCell;
        
        private InputCell8 mInputCell;
        
        private OutputCell6 mOutputCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FieldNameCell : WpfCell
    {
        
        public FieldNameCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueEditor6 ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new ValueEditor6(this);
                }
                return this.mValueEditor;
            }
        }
        #endregion
        
        #region Fields
        private ValueEditor6 mValueEditor;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueEditor6 : WpfCustom
    {
        
        public ValueEditor6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell8 : WpfCell
    {
        
        public InputCell8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell6 : WpfCell
    {
        
        public OutputCell6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem21 : WpfControl
    {
        
        public DataItem21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public RecordsetNameCell1 RecordsetNameCell
        {
            get
            {
                if ((this.mRecordsetNameCell == null))
                {
                    this.mRecordsetNameCell = new RecordsetNameCell1(this);
                }
                return this.mRecordsetNameCell;
            }
        }
        
        public InputCell9 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell9(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell7 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell7(this);
                }
                return this.mOutputCell;
            }
        }
        
        public List3 List
        {
            get
            {
                if ((this.mList == null))
                {
                    this.mList = new List3(this);
                }
                return this.mList;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetNameCell1 mRecordsetNameCell;
        
        private InputCell9 mInputCell;
        
        private OutputCell7 mOutputCell;
        
        private List3 mList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetNameCell1 : WpfCell
    {
        
        public RecordsetNameCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueEditor7 ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new ValueEditor7(this);
                }
                return this.mValueEditor;
            }
        }
        
        public WpfToggleButton UIPART_ExpanderToggleButton
        {
            get
            {
                if ((this.mUIPART_ExpanderToggleButton == null))
                {
                    this.mUIPART_ExpanderToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mUIPART_ExpanderToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "PART_Expander";
                    this.mUIPART_ExpanderToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIPART_ExpanderToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private ValueEditor7 mValueEditor;
        
        private WpfToggleButton mUIPART_ExpanderToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueEditor7 : WpfCustom
    {
        
        public ValueEditor7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell9 : WpfCell
    {
        
        public InputCell9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell7 : WpfCell
    {
        
        public OutputCell7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new WpfCustom(this);
                    #region Search Criteria
                    this.mValueEditor.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
                    this.mValueEditor.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueEditor;
            }
        }
        
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mValueEditor;
        
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class List3 : WpfList
    {
        
        public List3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ListItem4 ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new ListItem4(this);
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private ListItem4 mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ListItem4 : WpfListItem
    {
        
        public ListItem4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Children";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Table4 Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table4(this);
                }
                return this.mTable;
            }
        }
        #endregion
        
        #region Fields
        private Table4 mTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table4 : WpfTable
    {
        
        public Table4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataItem6 DataItem
        {
            get
            {
                if ((this.mDataItem == null))
                {
                    this.mDataItem = new DataItem6(this);
                }
                return this.mDataItem;
            }
        }
        #endregion
        
        #region Fields
        private DataItem6 mDataItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem6 : WpfControl
    {
        
        public DataItem6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ExpansionIndicatorButton
        {
            get
            {
                if ((this.mExpansionIndicatorButton == null))
                {
                    this.mExpansionIndicatorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpansionIndicatorButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ExpansionIndicator";
                    this.mExpansionIndicatorButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpansionIndicatorButton;
            }
        }
        
        public WpfCell FieldNameCell
        {
            get
            {
                if ((this.mFieldNameCell == null))
                {
                    this.mFieldNameCell = new WpfCell(this);
                    #region Search Criteria
                    this.mFieldNameCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
                    this.mFieldNameCell.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFieldNameCell;
            }
        }
        
        public InputCell10 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell10(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell8 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell8(this);
                }
                return this.mOutputCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mExpansionIndicatorButton;
        
        private WpfCell mFieldNameCell;
        
        private InputCell10 mInputCell;
        
        private OutputCell8 mOutputCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell10 : WpfCell
    {
        
        public InputCell10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell8 : WpfCell
    {
        
        public OutputCell8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem31 : WpfControl
    {
        
        public DataItem31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public RecordsetNameCell2 RecordsetNameCell
        {
            get
            {
                if ((this.mRecordsetNameCell == null))
                {
                    this.mRecordsetNameCell = new RecordsetNameCell2(this);
                }
                return this.mRecordsetNameCell;
            }
        }
        
        public InputCell11 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell11(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell9 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell9(this);
                }
                return this.mOutputCell;
            }
        }
        
        public List4 List
        {
            get
            {
                if ((this.mList == null))
                {
                    this.mList = new List4(this);
                }
                return this.mList;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetNameCell2 mRecordsetNameCell;
        
        private InputCell11 mInputCell;
        
        private OutputCell9 mOutputCell;
        
        private List4 mList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetNameCell2 : WpfCell
    {
        
        public RecordsetNameCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueEditor8 ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new ValueEditor8(this);
                }
                return this.mValueEditor;
            }
        }
        
        public WpfToggleButton UIPART_ExpanderToggleButton
        {
            get
            {
                if ((this.mUIPART_ExpanderToggleButton == null))
                {
                    this.mUIPART_ExpanderToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mUIPART_ExpanderToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "PART_Expander";
                    this.mUIPART_ExpanderToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIPART_ExpanderToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private ValueEditor8 mValueEditor;
        
        private WpfToggleButton mUIPART_ExpanderToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueEditor8 : WpfCustom
    {
        
        public ValueEditor8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell11 : WpfCell
    {
        
        public InputCell11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell9 : WpfCell
    {
        
        public OutputCell9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new WpfCustom(this);
                    #region Search Criteria
                    this.mValueEditor.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
                    this.mValueEditor.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueEditor;
            }
        }
        
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mValueEditor;
        
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class List4 : WpfList
    {
        
        public List4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ListItem5 ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new ListItem5(this);
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private ListItem5 mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ListItem5 : WpfListItem
    {
        
        public ListItem5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Children";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Table5 Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table5(this);
                }
                return this.mTable;
            }
        }
        #endregion
        
        #region Fields
        private Table5 mTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table5 : WpfTable
    {
        
        public Table5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataItem7 DataItem
        {
            get
            {
                if ((this.mDataItem == null))
                {
                    this.mDataItem = new DataItem7(this);
                }
                return this.mDataItem;
            }
        }
        #endregion
        
        #region Fields
        private DataItem7 mDataItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem7 : WpfControl
    {
        
        public DataItem7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ExpansionIndicatorButton
        {
            get
            {
                if ((this.mExpansionIndicatorButton == null))
                {
                    this.mExpansionIndicatorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpansionIndicatorButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ExpansionIndicator";
                    this.mExpansionIndicatorButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpansionIndicatorButton;
            }
        }
        
        public WpfCell FieldNameCell
        {
            get
            {
                if ((this.mFieldNameCell == null))
                {
                    this.mFieldNameCell = new WpfCell(this);
                    #region Search Criteria
                    this.mFieldNameCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
                    this.mFieldNameCell.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFieldNameCell;
            }
        }
        
        public InputCell12 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell12(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell10 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell10(this);
                }
                return this.mOutputCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mExpansionIndicatorButton;
        
        private WpfCell mFieldNameCell;
        
        private InputCell12 mInputCell;
        
        private OutputCell10 mOutputCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell12 : WpfCell
    {
        
        public InputCell12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell10 : WpfCell
    {
        
        public OutputCell10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem41 : WpfControl
    {
        
        public DataItem41(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public RecordsetNameCell3 RecordsetNameCell
        {
            get
            {
                if ((this.mRecordsetNameCell == null))
                {
                    this.mRecordsetNameCell = new RecordsetNameCell3(this);
                }
                return this.mRecordsetNameCell;
            }
        }
        
        public InputCell13 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell13(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell11 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell11(this);
                }
                return this.mOutputCell;
            }
        }
        
        public List5 List
        {
            get
            {
                if ((this.mList == null))
                {
                    this.mList = new List5(this);
                }
                return this.mList;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetNameCell3 mRecordsetNameCell;
        
        private InputCell13 mInputCell;
        
        private OutputCell11 mOutputCell;
        
        private List5 mList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetNameCell3 : WpfCell
    {
        
        public RecordsetNameCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueEditor9 ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new ValueEditor9(this);
                }
                return this.mValueEditor;
            }
        }
        
        public WpfToggleButton UIPART_ExpanderToggleButton
        {
            get
            {
                if ((this.mUIPART_ExpanderToggleButton == null))
                {
                    this.mUIPART_ExpanderToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mUIPART_ExpanderToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "PART_Expander";
                    this.mUIPART_ExpanderToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIPART_ExpanderToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private ValueEditor9 mValueEditor;
        
        private WpfToggleButton mUIPART_ExpanderToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueEditor9 : WpfCustom
    {
        
        public ValueEditor9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell13 : WpfCell
    {
        
        public InputCell13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell11 : WpfCell
    {
        
        public OutputCell11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new WpfCustom(this);
                    #region Search Criteria
                    this.mValueEditor.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
                    this.mValueEditor.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueEditor;
            }
        }
        
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mValueEditor;
        
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class List5 : WpfList
    {
        
        public List5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ListItem6 ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new ListItem6(this);
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private ListItem6 mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ListItem6 : WpfListItem
    {
        
        public ListItem6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Children";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Table6 Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table6(this);
                }
                return this.mTable;
            }
        }
        #endregion
        
        #region Fields
        private Table6 mTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table6 : WpfTable
    {
        
        public Table6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataItem8 DataItem
        {
            get
            {
                if ((this.mDataItem == null))
                {
                    this.mDataItem = new DataItem8(this);
                }
                return this.mDataItem;
            }
        }
        #endregion
        
        #region Fields
        private DataItem8 mDataItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem8 : WpfControl
    {
        
        public DataItem8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ExpansionIndicatorButton
        {
            get
            {
                if ((this.mExpansionIndicatorButton == null))
                {
                    this.mExpansionIndicatorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpansionIndicatorButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ExpansionIndicator";
                    this.mExpansionIndicatorButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpansionIndicatorButton;
            }
        }
        
        public WpfCell FieldNameCell
        {
            get
            {
                if ((this.mFieldNameCell == null))
                {
                    this.mFieldNameCell = new WpfCell(this);
                    #region Search Criteria
                    this.mFieldNameCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
                    this.mFieldNameCell.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFieldNameCell;
            }
        }
        
        public InputCell14 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell14(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell12 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell12(this);
                }
                return this.mOutputCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mExpansionIndicatorButton;
        
        private WpfCell mFieldNameCell;
        
        private InputCell14 mInputCell;
        
        private OutputCell12 mOutputCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell14 : WpfCell
    {
        
        public InputCell14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell12 : WpfCell
    {
        
        public OutputCell12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem51 : WpfControl
    {
        
        public DataItem51(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Instance] = "5";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public RecordsetNameCell4 RecordsetNameCell
        {
            get
            {
                if ((this.mRecordsetNameCell == null))
                {
                    this.mRecordsetNameCell = new RecordsetNameCell4(this);
                }
                return this.mRecordsetNameCell;
            }
        }
        
        public InputCell15 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell15(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell13 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell13(this);
                }
                return this.mOutputCell;
            }
        }
        
        public List6 List
        {
            get
            {
                if ((this.mList == null))
                {
                    this.mList = new List6(this);
                }
                return this.mList;
            }
        }
        #endregion
        
        #region Fields
        private RecordsetNameCell4 mRecordsetNameCell;
        
        private InputCell15 mInputCell;
        
        private OutputCell13 mOutputCell;
        
        private List6 mList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordsetNameCell4 : WpfCell
    {
        
        public RecordsetNameCell4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ValueEditor10 ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new ValueEditor10(this);
                }
                return this.mValueEditor;
            }
        }
        
        public WpfToggleButton UIPART_ExpanderToggleButton
        {
            get
            {
                if ((this.mUIPART_ExpanderToggleButton == null))
                {
                    this.mUIPART_ExpanderToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mUIPART_ExpanderToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "PART_Expander";
                    this.mUIPART_ExpanderToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIPART_ExpanderToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private ValueEditor10 mValueEditor;
        
        private WpfToggleButton mUIPART_ExpanderToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ValueEditor10 : WpfCustom
    {
        
        public ValueEditor10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfEdit TextBox
        {
            get
            {
                if ((this.mTextBox == null))
                {
                    this.mTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UI_NameTextBox_AutoID";
                    this.mTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mTextBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mTextBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell15 : WpfCell
    {
        
        public InputCell15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell13 : WpfCell
    {
        
        public OutputCell13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new WpfCustom(this);
                    #region Search Criteria
                    this.mValueEditor.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
                    this.mValueEditor.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueEditor;
            }
        }
        
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mValueEditor;
        
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class List6 : WpfList
    {
        
        public List6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public ListItem7 ListItem
        {
            get
            {
                if ((this.mListItem == null))
                {
                    this.mListItem = new ListItem7(this);
                }
                return this.mListItem;
            }
        }
        #endregion
        
        #region Fields
        private ListItem7 mListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ListItem7 : WpfListItem
    {
        
        public ListItem7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfListItem.PropertyNames.Name] = "Children";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Table7 Table
        {
            get
            {
                if ((this.mTable == null))
                {
                    this.mTable = new Table7(this);
                }
                return this.mTable;
            }
        }
        #endregion
        
        #region Fields
        private Table7 mTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Table7 : WpfTable
    {
        
        public Table7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.Name] = "Records";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataItem9 DataItem
        {
            get
            {
                if ((this.mDataItem == null))
                {
                    this.mDataItem = new DataItem9(this);
                }
                return this.mDataItem;
            }
        }
        #endregion
        
        #region Fields
        private DataItem9 mDataItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataItem9 : WpfControl
    {
        
        public DataItem9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton ExpansionIndicatorButton
        {
            get
            {
                if ((this.mExpansionIndicatorButton == null))
                {
                    this.mExpansionIndicatorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpansionIndicatorButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ExpansionIndicator";
                    this.mExpansionIndicatorButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpansionIndicatorButton;
            }
        }
        
        public WpfCell FieldNameCell
        {
            get
            {
                if ((this.mFieldNameCell == null))
                {
                    this.mFieldNameCell = new WpfCell(this);
                    #region Search Criteria
                    this.mFieldNameCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "DisplayName";
                    this.mFieldNameCell.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mFieldNameCell;
            }
        }
        
        public InputCell16 InputCell
        {
            get
            {
                if ((this.mInputCell == null))
                {
                    this.mInputCell = new InputCell16(this);
                }
                return this.mInputCell;
            }
        }
        
        public OutputCell14 OutputCell
        {
            get
            {
                if ((this.mOutputCell == null))
                {
                    this.mOutputCell = new OutputCell14(this);
                }
                return this.mOutputCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mExpansionIndicatorButton;
        
        private WpfCell mFieldNameCell;
        
        private InputCell16 mInputCell;
        
        private OutputCell14 mOutputCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputCell16 : WpfCell
    {
        
        public InputCell16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsInputCheckbox
        {
            get
            {
                if ((this.mIsInputCheckbox == null))
                {
                    this.mIsInputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsInputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsInputCheckbox_AutoID";
                    this.mIsInputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsInputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsInputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OutputCell14 : WpfCell
    {
        
        public OutputCell14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox IsOutputCheckbox
        {
            get
            {
                if ((this.mIsOutputCheckbox == null))
                {
                    this.mIsOutputCheckbox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mIsOutputCheckbox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_IsOutputCheckbox_AutoID";
                    this.mIsOutputCheckbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mIsOutputCheckbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mIsOutputCheckbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ObjectDataItem : WpfControl
    {
        
        public ObjectDataItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "DataItem";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Object";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DisplayNameHeaderCell2 DisplayNameHeaderCell
        {
            get
            {
                if ((this.mDisplayNameHeaderCell == null))
                {
                    this.mDisplayNameHeaderCell = new DisplayNameHeaderCell2(this);
                }
                return this.mDisplayNameHeaderCell;
            }
        }
        
        public WpfCell InputHeaderCell
        {
            get
            {
                if ((this.mInputHeaderCell == null))
                {
                    this.mInputHeaderCell = new WpfCell(this);
                    #region Search Criteria
                    this.mInputHeaderCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Input";
                    this.mInputHeaderCell.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mInputHeaderCell;
            }
        }
        
        public WpfCell OutputHeaderCell
        {
            get
            {
                if ((this.mOutputHeaderCell == null))
                {
                    this.mOutputHeaderCell = new WpfCell(this);
                    #region Search Criteria
                    this.mOutputHeaderCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Output";
                    this.mOutputHeaderCell.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mOutputHeaderCell;
            }
        }
        #endregion
        
        #region Fields
        private DisplayNameHeaderCell2 mDisplayNameHeaderCell;
        
        private WpfCell mInputHeaderCell;
        
        private WpfCell mOutputHeaderCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DisplayNameHeaderCell2 : WpfCell
    {
        
        public DisplayNameHeaderCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = " Display Name";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText ObjectText
        {
            get
            {
                if ((this.mObjectText == null))
                {
                    this.mObjectText = new WpfText(this);
                    #region Search Criteria
                    this.mObjectText.SearchProperties[WpfText.PropertyNames.Name] = "Object";
                    this.mObjectText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mObjectText;
            }
        }
        
        public WpfCustom ValueEditor
        {
            get
            {
                if ((this.mValueEditor == null))
                {
                    this.mValueEditor = new WpfCustom(this);
                    #region Search Criteria
                    this.mValueEditor.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ValueEditor";
                    this.mValueEditor.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mValueEditor;
            }
        }
        
        public WpfToggleButton ExpanderToggleButton
        {
            get
            {
                if ((this.mExpanderToggleButton == null))
                {
                    this.mExpanderToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mExpanderToggleButton.SearchProperties[WpfToggleButton.PropertyNames.AutomationId] = "PART_Expander";
                    this.mExpanderToggleButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpanderToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mObjectText;
        
        private WpfCustom mValueEditor;
        
        private WpfToggleButton mExpanderToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DebugOutput : WpfCustom
    {
        
        public DebugOutput(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DebugOutputView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "DebugOutput";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton DebugOutputUnpinBtn
        {
            get
            {
                if ((this.mDebugOutputUnpinBtn == null))
                {
                    this.mDebugOutputUnpinBtn = new WpfButton(this);
                    #region Search Criteria
                    this.mDebugOutputUnpinBtn.SearchProperties[WpfButton.PropertyNames.AutomationId] = "unpinBtn";
                    this.mDebugOutputUnpinBtn.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDebugOutputUnpinBtn;
            }
        }
        
        public WpfEdit SearchTextBox
        {
            get
            {
                if ((this.mSearchTextBox == null))
                {
                    this.mSearchTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mSearchTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
                    this.mSearchTextBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSearchTextBox;
            }
        }
        
        public WpfButton SettingsButton
        {
            get
            {
                if ((this.mSettingsButton == null))
                {
                    this.mSettingsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSettingsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_DebugOutputOptionsButton_AutoID";
                    this.mSettingsButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mSettingsButton;
            }
        }
        
        public WpfButton ExpandCollapseButton
        {
            get
            {
                if ((this.mExpandCollapseButton == null))
                {
                    this.mExpandCollapseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mExpandCollapseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_DebugOutputExpandAllMode_AutoID";
                    this.mExpandCollapseButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mExpandCollapseButton;
            }
        }
        
        public DebugOutputTree DebugOutputTree
        {
            get
            {
                if ((this.mDebugOutputTree == null))
                {
                    this.mDebugOutputTree = new DebugOutputTree(this);
                }
                return this.mDebugOutputTree;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDebugOutputUnpinBtn;
        
        private WpfEdit mSearchTextBox;
        
        private WpfButton mSettingsButton;
        
        private WpfButton mExpandCollapseButton;
        
        private DebugOutputTree mDebugOutputTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DebugOutputTree : WpfTree
    {
        
        public DebugOutputTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "DebugOutputTree";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public Step1 Step1
        {
            get
            {
                if ((this.mStep1 == null))
                {
                    this.mStep1 = new Step1(this);
                }
                return this.mStep1;
            }
        }
        
        public SubWorkflow SubWorkflow
        {
            get
            {
                if ((this.mSubWorkflow == null))
                {
                    this.mSubWorkflow = new SubWorkflow(this);
                }
                return this.mSubWorkflow;
            }
        }
        #endregion
        
        #region Fields
        private Step1 mStep1;
        
        private SubWorkflow mSubWorkflow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Step1 : WpfTreeItem
    {
        
        public Step1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "Step";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "1";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText VariableTextbox
        {
            get
            {
                if ((this.mVariableTextbox == null))
                {
                    this.mVariableTextbox = new WpfText(this);
                    #region Search Criteria
                    this.mVariableTextbox.SearchProperties[WpfText.PropertyNames.AutomationId] = "UI_DebugOutputVariableTextBlock_AutoID";
                    this.mVariableTextbox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mVariableTextbox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mVariableTextbox;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mVariableTextbox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SubWorkflow : WpfTreeItem
    {
        
        public SubWorkflow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "Service";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UIHelloWorldTreeItem1 UIHelloWorldTreeItem1
        {
            get
            {
                if ((this.mUIHelloWorldTreeItem1 == null))
                {
                    this.mUIHelloWorldTreeItem1 = new UIHelloWorldTreeItem1(this);
                }
                return this.mUIHelloWorldTreeItem1;
            }
        }
        #endregion
        
        #region Fields
        private UIHelloWorldTreeItem1 mUIHelloWorldTreeItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelloWorldTreeItem1 : WpfTreeItem
    {
        
        public UIHelloWorldTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.AutomationId] = "Start";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton UIHelloWorldButton
        {
            get
            {
                if ((this.mUIHelloWorldButton == null))
                {
                    this.mUIHelloWorldButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIHelloWorldButton.SearchProperties[WpfButton.PropertyNames.Name] = "Hello World";
                    this.mUIHelloWorldButton.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIHelloWorldButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIHelloWorldButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIHelloWorldButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ServicePickerDialog : WpfWindow
    {
        
        public ServicePickerDialog(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Select A Service";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.SearchProperties[WpfWindow.PropertyNames.AutomationId] = "UI_SelectServiceWindow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfButton Cancel
        {
            get
            {
                if ((this.mCancel == null))
                {
                    this.mCancel = new WpfButton(this);
                    #region Search Criteria
                    this.mCancel.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_SelectServiceCancelButton_AutoID";
                    this.mCancel.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCancel;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mCancel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DebugInputDialog : WpfWindow
    {
        
        public DebugInputDialog(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Debug input data";
            this.SearchProperties[WpfWindow.PropertyNames.ClassName] = "Uia.Window";
            this.SearchProperties[WpfWindow.PropertyNames.AutomationId] = "UI_DebugInputWindow_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UITabItemsTabList UITabItemsTabList
        {
            get
            {
                if ((this.mUITabItemsTabList == null))
                {
                    this.mUITabItemsTabList = new UITabItemsTabList(this);
                }
                return this.mUITabItemsTabList;
            }
        }
        
        public WpfCheckBox RememberDebugInputCheckBox
        {
            get
            {
                if ((this.mRememberDebugInputCheckBox == null))
                {
                    this.mRememberDebugInputCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mRememberDebugInputCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "UI_RememberInputsCb_AutoID";
                    this.mRememberDebugInputCheckBox.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mRememberDebugInputCheckBox;
            }
        }
        
        public WpfButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Cancelbtn_AutoID";
                    this.mCancelButton.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        
        public WpfButton DebugF6Button
        {
            get
            {
                if ((this.mDebugF6Button == null))
                {
                    this.mDebugF6Button = new WpfButton(this);
                    #region Search Criteria
                    this.mDebugF6Button.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Executebtn_AutoID";
                    this.mDebugF6Button.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mDebugF6Button;
            }
        }
        
        public WpfButton ViewInBrowserF7Button
        {
            get
            {
                if ((this.mViewInBrowserF7Button == null))
                {
                    this.mViewInBrowserF7Button = new WpfButton(this);
                    #region Search Criteria
                    this.mViewInBrowserF7Button.SearchProperties[WpfButton.PropertyNames.AutomationId] = "UI_Browserbtn_AutoID";
                    this.mViewInBrowserF7Button.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mViewInBrowserF7Button;
            }
        }
        #endregion
        
        #region Fields
        private UITabItemsTabList mUITabItemsTabList;
        
        private WpfCheckBox mRememberDebugInputCheckBox;
        
        private WpfButton mCancelButton;
        
        private WpfButton mDebugF6Button;
        
        private WpfButton mViewInBrowserF7Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITabItemsTabList : WpfTabList
    {
        
        public UITabItemsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "TabItems";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public InputDataTab InputDataTab
        {
            get
            {
                if ((this.mInputDataTab == null))
                {
                    this.mInputDataTab = new InputDataTab(this);
                }
                return this.mInputDataTab;
            }
        }
        
        public XMLTab XMLTab
        {
            get
            {
                if ((this.mXMLTab == null))
                {
                    this.mXMLTab = new XMLTab(this);
                }
                return this.mXMLTab;
            }
        }
        
        public JSONTab JSONTab
        {
            get
            {
                if ((this.mJSONTab == null))
                {
                    this.mJSONTab = new JSONTab(this);
                }
                return this.mJSONTab;
            }
        }
        #endregion
        
        #region Fields
        private InputDataTab mInputDataTab;
        
        private XMLTab mXMLTab;
        
        private JSONTab mJSONTab;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputDataTab : WpfTabPage
    {
        
        public InputDataTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.AutomationId] = "UI_InputDataTab_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public DataListInputsTable DataListInputsTable
        {
            get
            {
                if ((this.mDataListInputsTable == null))
                {
                    this.mDataListInputsTable = new DataListInputsTable(this);
                }
                return this.mDataListInputsTable;
            }
        }
        #endregion
        
        #region Fields
        private DataListInputsTable mDataListInputsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DataListInputsTable : WpfTable
    {
        
        public DataListInputsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "DataListInputs";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public UIDescriptionCell UIDescriptionCell
        {
            get
            {
                if ((this.mUIDescriptionCell == null))
                {
                    this.mUIDescriptionCell = new UIDescriptionCell(this);
                }
                return this.mUIDescriptionCell;
            }
        }
        #endregion
        
        #region Fields
        private UIDescriptionCell mUIDescriptionCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDescriptionCell : WpfCell
    {
        
        public UIDescriptionCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = null;
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText UIRec1setText
        {
            get
            {
                if ((this.mUIRec1setText == null))
                {
                    this.mUIRec1setText = new WpfText(this);
                    #region Search Criteria
                    this.mUIRec1setText.SearchProperties[WpfText.PropertyNames.Name] = "rec(1).set";
                    this.mUIRec1setText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mUIRec1setText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIRec1setText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class XMLTab : WpfTabPage
    {
        
        public XMLTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.AutomationId] = "UI_XMLTab_AutoID";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom XMLWindow
        {
            get
            {
                if ((this.mXMLWindow == null))
                {
                    this.mXMLWindow = new WpfCustom(this);
                    #region Search Criteria
                    this.mXMLWindow.SearchProperties[WpfControl.PropertyNames.ClassName] = null;
                    this.mXMLWindow.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_XMLEditor_AutoID";
                    this.mXMLWindow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mXMLWindow;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mXMLWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class JSONTab : WpfTabPage
    {
        
        public JSONTab(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.AutomationId] = "UI_XMLTab_AutoID";
            this.SearchProperties[WpfTabPage.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfCustom JSONWindow
        {
            get
            {
                if ((this.mJSONWindow == null))
                {
                    this.mJSONWindow = new WpfCustom(this);
                    #region Search Criteria
                    this.mJSONWindow.SearchProperties[WpfControl.PropertyNames.ClassName] = null;
                    this.mJSONWindow.SearchProperties[WpfControl.PropertyNames.AutomationId] = "UI_JsonEditor_AutoID";
                    this.mJSONWindow.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mJSONWindow;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mJSONWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NewRemoteServerListItem : WpfCustom
    {
        
        public NewRemoteServerListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ComboEditorItemControl";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "New Remote Server...";
            this.WindowTitles.Add("Warewolf");
            #endregion
        }
        
        #region Properties
        public WpfText NewRemoteServerItemText
        {
            get
            {
                if ((this.mNewRemoteServerItemText == null))
                {
                    this.mNewRemoteServerItemText = new WpfText(this);
                    #region Search Criteria
                    this.mNewRemoteServerItemText.SearchProperties[WpfText.PropertyNames.Name] = "New Remote Server...";
                    this.mNewRemoteServerItemText.WindowTitles.Add("Warewolf");
                    #endregion
                }
                return this.mNewRemoteServerItemText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mNewRemoteServerItemText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class MessageBoxWindow : WpfWindow
    {
        
        public MessageBoxWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "WarewolfMessageBox";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public YesButton YesButton
        {
            get
            {
                if ((this.mYesButton == null))
                {
                    this.mYesButton = new YesButton(this);
                }
                return this.mYesButton;
            }
        }
        
        public NoButton NoButton
        {
            get
            {
                if ((this.mNoButton == null))
                {
                    this.mNoButton = new NoButton(this);
                }
                return this.mNoButton;
            }
        }
        
        public CancelButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new CancelButton(this);
                }
                return this.mCancelButton;
            }
        }
        #endregion
        
        #region Fields
        private YesButton mYesButton;
        
        private NoButton mNoButton;
        
        private CancelButton mCancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class YesButton : WpfButton
    {
        
        public YesButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "Yes";
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public WpfText YesButtonText
        {
            get
            {
                if ((this.mYesButtonText == null))
                {
                    this.mYesButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mYesButtonText.SearchProperties[WpfText.PropertyNames.Name] = "Yes";
                    this.mYesButtonText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mYesButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mYesButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class NoButton : WpfButton
    {
        
        public NoButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "No";
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public WpfText NOButtonText
        {
            get
            {
                if ((this.mNOButtonText == null))
                {
                    this.mNOButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mNOButtonText.SearchProperties[WpfText.PropertyNames.Name] = "No";
                    this.mNOButtonText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mNOButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mNOButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CancelButton : WpfButton
    {
        
        public CancelButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "Cancel";
            this.WindowTitles.Add("WarewolfMessageBox");
            #endregion
        }
        
        #region Properties
        public WpfText CancelButtonText
        {
            get
            {
                if ((this.mCancelButtonText == null))
                {
                    this.mCancelButtonText = new WpfText(this);
                    #region Search Criteria
                    this.mCancelButtonText.SearchProperties[WpfText.PropertyNames.Name] = "Cancel";
                    this.mCancelButtonText.WindowTitles.Add("WarewolfMessageBox");
                    #endregion
                }
                return this.mCancelButtonText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mCancelButtonText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SaveDialogWindow : WpfWindow
    {
        
        public SaveDialogWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "SaveDialogView";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SaveDialogView");
            #endregion
        }
        
        #region Properties
        public WpfText WorkspaceName
        {
            get
            {
                if ((this.mWorkspaceName == null))
                {
                    this.mWorkspaceName = new WpfText(this);
                    #region Search Criteria
                    this.mWorkspaceName.SearchProperties.Add(new PropertyExpression(WpfText.PropertyNames.Name, "Unsaved", PropertyExpressionOperator.Contains));
                    this.mWorkspaceName.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mWorkspaceName;
            }
        }
        
        public ExplorerView ExplorerView
        {
            get
            {
                if ((this.mExplorerView == null))
                {
                    this.mExplorerView = new ExplorerView(this);
                }
                return this.mExplorerView;
            }
        }
        
        public WpfText NameLabel
        {
            get
            {
                if ((this.mNameLabel == null))
                {
                    this.mNameLabel = new WpfText(this);
                    #region Search Criteria
                    this.mNameLabel.SearchProperties[WpfText.PropertyNames.Name] = "Name:";
                    this.mNameLabel.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mNameLabel;
            }
        }
        
        public WpfEdit ServiceNameTextBox
        {
            get
            {
                if ((this.mServiceNameTextBox == null))
                {
                    this.mServiceNameTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mServiceNameTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "ServiceNameTextBox";
                    this.mServiceNameTextBox.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mServiceNameTextBox;
            }
        }
        
        public WpfText ErrorLabel
        {
            get
            {
                if ((this.mErrorLabel == null))
                {
                    this.mErrorLabel = new WpfText(this);
                    #region Search Criteria
                    this.mErrorLabel.SearchProperties[WpfText.PropertyNames.AutomationId] = "ErrorMessageTextBlock";
                    this.mErrorLabel.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mErrorLabel;
            }
        }
        
        public WpfButton SaveButton
        {
            get
            {
                if ((this.mSaveButton == null))
                {
                    this.mSaveButton = new WpfButton(this);
                    #region Search Criteria
                    this.mSaveButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "OkButton";
                    this.mSaveButton.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mSaveButton;
            }
        }
        
        public WpfButton CancelButton
        {
            get
            {
                if ((this.mCancelButton == null))
                {
                    this.mCancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mCancelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CancelButton";
                    this.mCancelButton.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mCancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mWorkspaceName;
        
        private ExplorerView mExplorerView;
        
        private WpfText mNameLabel;
        
        private WpfEdit mServiceNameTextBox;
        
        private WpfText mErrorLabel;
        
        private WpfButton mSaveButton;
        
        private WpfButton mCancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerView : WpfCustom
    {
        
        public ExplorerView(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ExplorerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "ExplorerView";
            this.WindowTitles.Add("SaveDialogView");
            #endregion
        }
        
        #region Properties
        public WpfEdit SearchTextBox
        {
            get
            {
                if ((this.mSearchTextBox == null))
                {
                    this.mSearchTextBox = new WpfEdit(this);
                    #region Search Criteria
                    this.mSearchTextBox.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SearchTextBox";
                    this.mSearchTextBox.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mSearchTextBox;
            }
        }
        
        public WpfButton RefreshButton
        {
            get
            {
                if ((this.mRefreshButton == null))
                {
                    this.mRefreshButton = new WpfButton(this);
                    #region Search Criteria
                    this.mRefreshButton.SearchProperties[WpfButton.PropertyNames.Name] = "";
                    this.mRefreshButton.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mRefreshButton;
            }
        }
        
        public ExplorerTree1 ExplorerTree
        {
            get
            {
                if ((this.mExplorerTree == null))
                {
                    this.mExplorerTree = new ExplorerTree1(this);
                }
                return this.mExplorerTree;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mSearchTextBox;
        
        private WpfButton mRefreshButton;
        
        private ExplorerTree1 mExplorerTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ExplorerTree1 : WpfTree
    {
        
        public ExplorerTree1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "ExplorerTree";
            this.WindowTitles.Add("SaveDialogView");
            #endregion
        }
        
        #region Properties
        public WpfTreeItem ExplorerTreeItem
        {
            get
            {
                if ((this.mExplorerTreeItem == null))
                {
                    this.mExplorerTreeItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mExplorerTreeItem.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Infragistics.Controls.Menus.XamDataTreeNodeDataContext";
                    this.mExplorerTreeItem.WindowTitles.Add("SaveDialogView");
                    #endregion
                }
                return this.mExplorerTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfTreeItem mExplorerTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SplashPageWindow : WpfWindow
    {
        
        public SplashPageWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "SplashPage";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SplashPage");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DecisionDialog : WpfWindow
    {
        
        public DecisionDialog()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WpfButton DoneButton
        {
            get
            {
                if ((this.mDoneButton == null))
                {
                    this.mDoneButton = new WpfButton(this);
                    #region Search Criteria
                    this.mDoneButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DoneButton";
                    #endregion
                }
                return this.mDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mDoneButton;
        #endregion
    }
}
