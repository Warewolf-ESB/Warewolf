<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:bdsm="clr-namespace:Dev2.Studio.Core.Models;assembly=Dev2.Studio.Core"
                    xmlns:customControls="clr-namespace:Dev2.CustomControls;assembly=Dev2.CustomControls"
                    xmlns:fa="http://schemas.fontawesome.io/icons/">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Warewolf Studio;component/Themes/DataTemplatesIntellisense.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Warewolf.Studio.Themes.Luna;component/Theme.xaml"></ResourceDictionary>
        <ResourceDictionary Source="pack://application:,,,/Warewolf Studio;component/Resources/Icons.xaml" />
        <!--<ResourceDictionary Source="pack://application:,,,/Warewolf Studio;component/Resources/Converters.xaml"/>-->
    </ResourceDictionary.MergedDictionaries>

    <!--Fix For the annoying binding issue that would cause studio to hang in debug, it has to be here to apply to menu items globally-->
    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <SolidColorBrush x:Key="DebugItemLabelBrush" Color="Black" />
    <SolidColorBrush x:Key="DebugItemValueBrush" Color="#05C47C" />
    <SolidColorBrush x:Key="DebugItemVariableBrush" Color="#7F1769" />

    <Storyboard x:Key="FlashingAnimationStoryBoard">
        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                         From="0"
                         To="1"
                         RepeatBehavior="Forever"
                         AutoReverse="True"
                         Duration="0:0:1" />
    </Storyboard>

    <Style x:Key="FlashingFrameworkElement" TargetType="{x:Type FrameworkElement}">
        <Style.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                <BeginStoryboard Storyboard="{StaticResource FlashingAnimationStoryBoard}" />
            </EventTrigger>
        </Style.Triggers>
    </Style>

    

    <ControlTemplate x:Key="DefaultErrorTemplate">
        <DockPanel DataContext="{Binding AdornedElement.(Validation.Errors)/ErrorContent, ElementName=adorner}">
            <Ellipse x:Name="Ellipse"
                     DockPanel.Dock="Right"
                     Margin="2,0,2,0"
                     Width="14"
                     Height="14"
                     VerticalAlignment="Center"
                     Stroke="#40000000"
                     StrokeThickness="2"
                     Fill="Red">
                <Ellipse.ToolTip>
                    <Border MaxWidth="350">
                        <ContentControl FontSize="{StaticResource DefaultFontSize}" Content="{Binding}" />
                    </Border>
                </Ellipse.ToolTip>
            </Ellipse>
            <Border BorderBrush="#40FFAF00" BorderThickness="2" IsHitTestVisible="False">
                <Border.Background>
                    <SolidColorBrush Color="Red" Opacity="0.2" />
                </Border.Background>
                <AdornedElementPlaceholder Margin="-2" x:Name="adorner" />
            </Border>
        </DockPanel>
    </ControlTemplate>

    <Style x:Key="DebugStateStyle" TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource DebugTreeStyle}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Padding" Value="0,2,0,2" />
        <Setter Property="Panel.Background" Value="White" />
        <Setter Property="Border.BorderThickness" Value="2" />
        <Setter Property="Border.Background" Value="{StaticResource TransparentBrush}" />
        <Setter Property="AutomationProperties.AutomationId" Value="{Binding Content.Name}" />
        <Setter Property="Visibility">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource IntInRangeToVisibilityConverter}">
                    <Binding Path="Depth" />
                    <Binding Path="DataContext.DepthMin" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=TreeView}" />
                    <Binding Path="DataContext.DepthMax" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=TreeView}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding DataContext.HighlightError, ElementName=DebugOutput}" Value="True" />
                    <Condition Binding="{Binding Content.HasError}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Border.BorderBrush" Value="{StaticResource ValidationErrorElement}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ContextMenuItemStyle">
        <Setter Property="HeaderedItemsControl.Header" Value="{Binding Text}" />
        <Setter Property="MenuItem.Command" Value="{Binding Command}" />
    </Style>

    <Style TargetType="{x:Type Image}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Opacity" Value="1.0" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TextFontResizeAnimation">
        <Style.Triggers>
            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="FontSize" To="22" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="Mouse.MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="FontSize" To="{StaticResource DefaultFontSize}" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="IconResizeAnimation">
        <Style.Triggers>
            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="Width" To="50" Duration="0:0:5" />
                        <DoubleAnimation Storyboard.TargetProperty="Height" To="50" Duration="0:0:5" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="Width" To="16" Duration="0:0:5" />
                        <DoubleAnimation Storyboard.TargetProperty="Height" To="16" Duration="0:0:5" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>

    </Style>

    <VisualBrush x:Key="SearchHint" TileMode="None" Stretch="None" AlignmentX="Left">
        <VisualBrush.Transform>
            <TranslateTransform X="5" Y="0" />
        </VisualBrush.Transform>
        <VisualBrush.Visual>
            <Grid>
                <TextBlock Grid.Column="0"
                           HorizontalAlignment="Center"
                           FontStyle="Italic"
                           Foreground="Black"
                           Opacity="0.3"
                           Text="Filter" />
            </Grid>
        </VisualBrush.Visual>
    </VisualBrush>

    <VisualBrush x:Key="DataListItemName" TileMode="None" Stretch="None" AlignmentX="Left">
        <VisualBrush.Transform>
            <TranslateTransform X="5" Y="0" />
        </VisualBrush.Transform>
        <VisualBrush.Visual>
            <Grid>
                <TextBlock Grid.Column="0"
                           HorizontalAlignment="Center"
                           FontStyle="Italic"
                           Foreground="Black"
                           Opacity="0.3"
                           Text="Name" />
            </Grid>
        </VisualBrush.Visual>
    </VisualBrush>

    <VisualBrush x:Key="MultiAssignVariableName" TileMode="None" Stretch="None" AlignmentX="Left">
        <VisualBrush.Transform>
            <TranslateTransform X="5" Y="0" />
        </VisualBrush.Transform>
        <VisualBrush.Visual>
            <Grid>
                <TextBlock Grid.Column="0"
                           HorizontalAlignment="Center"
                           FontStyle="Italic"
                           Foreground="Black"
                           Opacity="0.3"
                           Text="[[Variable]]" />
            </Grid>
        </VisualBrush.Visual>
    </VisualBrush>

    <VisualBrush x:Key="MultiAssignValue" TileMode="None" Stretch="None" AlignmentX="Left">
        <VisualBrush.Transform>
            <TranslateTransform X="5" Y="0" />
        </VisualBrush.Transform>
        <VisualBrush.Visual>
            <Grid>
                <TextBlock Grid.Column="0"
                           HorizontalAlignment="Center"
                           FontStyle="Italic"
                           Foreground="Black"
                           Opacity="0.3"
                           Text="Value" />
            </Grid>
        </VisualBrush.Visual>
    </VisualBrush>

    <VisualBrush x:Key="DataListItemDescription" TileMode="None" Stretch="None" AlignmentX="Left">
        <VisualBrush.Transform>
            <TranslateTransform X="5" Y="0" />
        </VisualBrush.Transform>
        <VisualBrush.Visual>
            <Grid>
                <TextBlock Grid.Column="0"
                           HorizontalAlignment="Center"
                           FontStyle="Italic"
                           Foreground="Black"
                           Opacity="0.3"
                           Text="Notes" />
            </Grid>
        </VisualBrush.Visual>
    </VisualBrush>

    <!-- Expander Style -->
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0"
                                   SnapsToDevicePixels="true"
                                   Stroke="Black"
                                   StrokeThickness="1"
                                   StrokeDashArray="1 2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="15" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <fa:FontAwesome x:Name="arrow" Margin="-14,3,0,0" Icon="PlusSquareOutline" Width="12" />
                            <ContentPresenter Grid.Column="1"
                                              HorizontalAlignment="Left"
                                              Margin="-10,-3,0,0"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="True"
                                              VerticalAlignment="Center" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" TargetName="arrow" Value="{StaticResource ButtonHoverBackgroundBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true" />
                                <Condition Property="IsMouseOver" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Icon" TargetName="arrow" Value="MinusSquareOutline" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true" />
                                <Condition Property="IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Icon" TargetName="arrow" Value="MinusSquareOutline" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="false" />
                                <Condition Property="IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Icon" TargetName="arrow" Value="PlusSquareOutline" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PlusMinusExpander" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            CornerRadius="3"
                            SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite"
                                          ContentTemplate="{TemplateBinding HeaderTemplate}"
                                          ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                          Content="{TemplateBinding Header}"
                                          DockPanel.Dock="Top"
                                          Foreground="{TemplateBinding Foreground}"
                                          FontWeight="{TemplateBinding FontWeight}"
                                          FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}"
                                          FontStyle="{TemplateBinding FontStyle}"
                                          FontStretch="{TemplateBinding FontStretch}"
                                          FontSize="{TemplateBinding FontSize}"
                                          FontFamily="{TemplateBinding FontFamily}"
                                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          
                                          MinWidth="0"
                                          MinHeight="0"
                                          Padding="{TemplateBinding Padding}"
                                          Style="{StaticResource ExpanderDownHeaderStyle}" />
                            <ContentPresenter x:Name="ExpandSite"
                                              DockPanel.Dock="Bottom"
                                              Focusable="false"
                                              Margin="{TemplateBinding Padding}"
                                              Visibility="Collapsed" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
