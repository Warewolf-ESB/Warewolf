<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="//netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css">
    <link href="dev2-debug.css" rel="stylesheet" />
    <title></title>
</head>

<body>
    <div>
        <input style="width: 90%" data-bind="value: URL" />
        <input style="width: 5%" type="button" name="Update" data-bind="click:GetData" value="Update" />
    </div>
    <div id="nav-bar" data-bind="template: { name: 'tree-template', data: treeData }"></div>

    <script type="text/html" id="tree-template">
        <ul class="list-group" data-bind="foreach: Children">
            <li class="list-group-item" data-bind="template: { name: 'node-name-template' , data: $data }">
            </li>
        </ul>
    </script>

    <script type="text/html" id="folder-template">
        <ul data-bind="foreach: Children">
            <li>
                <div data-bind="template: { name: 'node-template', data: $data }"></div>
            </li>
        </ul>
    </script>

    <script type="text/html" id="node-template">
        <div data-bind="template: { name: 'node-name-template' , data: $data}">
        </div>
        <div data-bind="template: { name: 'folder-template', data: $data }"></div>
    </script>

    <script type="text/html" id="node-name-template">
        <div class="panel panel-primary">
            <div class="panel-heading">
                <h4 data-bind="text: Name,attr: { 'title': DisplayName },tooltip: { delay: { show: 500, hide: 10 } }"></h4>
            </div>
            <div class="panel-body">
                <div>
                    <div>
                        DisplayName: <span class="dev2-values" data-bind="text: DisplayName"></span>
                    </div>
                    <div>
                        Server: <span data-bind="text: Server"></span>
                    </div>
                    <div>
                        Type: <span data-bind="text: StateType"></span>
                    </div>
                    <div>
                        StartTime: <span data-bind="text: StartTime"></span>
                    </div>
                    <div>
                        EndTime: <span data-bind="text: EndTime"></span>
                    </div>
                    <div>
                        Inputs= <ul class="list-group" data-bind="foreach: { data: Inputs, as: 'input' }">
                            <li class="list-group-item">
                                <ul data-bind="foreach: { data: ResultsList, as: 'result' }">
                                    <li>
                                        <span class="dev2-input-variable" data-bind="text: result.Variable"></span>
                                        <span class="dev2-input-operator" data-bind="text: result.Operator"></span>
                                        <span class="dev2-input-value" data-bind="text: result.Value"></span>
                                    </li>
                                </ul>
                            </li>
                        </ul>
                    </div>
                    <div>
                        Outputs= <ul class="list-group" data-bind="foreach: { data: Outputs, as: 'input' }">
                            <li class="list-group-item">
                                <ul data-bind="foreach: { data: ResultsList, as: 'result' }">
                                    <li>
                                        <span data-bind="text: result.Variable"></span>
                                        <span data-bind="text: result.Operator"></span>
                                        <span data-bind="text: result.Value"></span>
                                    </li>
                                </ul>
                            </li>
                        </ul>
                    </div>
                    <div data-bind="if: Children().length > 0">
                        <div class="panel panel-success">
                            <div class="panel-heading">
                                <h4>Children</h4>
                            </div>
                            <div class="panel-body">
                                <div data-bind="foreach: Children">
                                    <div data-bind="template: { name: 'node-template', data: $data }"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div>
                        Duration: <span data-bind="text: Duration"></span><br />
                    </div>
                    <div>
                        Origin: <span data-bind="text: Origin"></span><br />
                    </div>
                </div>
            </div>
        </div>
    </script>
    <script type="text/javascript" src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.0.0/knockout-debug.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/knockout.mapping/2.4.1/knockout.mapping.js"></script>

<script type='text/javascript'>
    window.onload = function() {
        ko.bindingHandlers.tooltip = {
            init: function(element, valueAccessor) {
                var local = ko.utils.unwrapObservable(valueAccessor()),
                    options = {};

                ko.utils.extend(options, local);

                $(element).tooltip(options);

                ko.utils.domNodeDisposal.addDisposeCallback(element, function() {
                    $(element).tooltip("destroy");
                });
            }
        };

        var NodeModel = function(data) {
            var self = this;
            self.Name = ko.observable('');
            self.WorkspaceID = ko.observable('');
            self.ID = ko.observable('');
            self.DisconnectedID = ko.observable('');
            self.ParentID = ko.observable('');
            self.SourceResourceID = ko.observable('');
            self.StateType = ko.observable('');
            self.DisplayName = ko.observable('');
            self.ActivityType = ko.observable('');
            self.Version = ko.observable('');
            self.IsSimulation = ko.observable('');
            self.HasError = ko.observable('');
            self.ErrorMessage = ko.observable('');
            self.Server = ko.observable('');
            self.ServerID = ko.observable('');
            self.EnvironmentID = ko.observable('');
            self.ClientID = ko.observable('');
            self.OriginatingResourceID = ko.observable('');
            self.Inputs = ko.observableArray([]);
            self.Outputs = ko.observableArray();
            self.AssertResultList = ko.observableArray([]);
            self.StartTime = ko.observable([]);
            self.EndTime = ko.observable('');
            self.Duration = ko.observable('');
            self.Message = ko.observable('');
            self.OriginalInstanceID = ko.observable('');
            self.NumberOfSteps = ko.observable('');
            self.ExecutionOrigin = ko.observable('');
            self.ExecutionOriginDescription = ko.observable('');
            self.ExecutingUser = ko.observable('');
            self.Origin = ko.observable('');
            self.SessionID = ko.observable('');
            self.WorkSurfaceMappingId = ko.observable('');
            self.IsDurationVisible = ko.observable('');
            self.ActualType = ko.observable('');
            self.Children = ko.observableArray([]);
            ko.mapping.fromJS(data, self.mapOptions, self);
        };

        NodeModel.prototype.mapOptions = {
            Children: {
                create: function(args) {
                    return new NodeModel(args.data);
                }
            }
        };

        var PageModel = function() {

            var self = this;
            self.URL = ko.observable();

            self.treeData = ko.observable({
                Childern: []
            });

            self.GetData = function() {
                $.ajax({
                    type: "GET",
                    dataType: "json",
                    url: self.URL(),
                    cache: false,
                    xhrFields:
                    {
                        withCredentials: true
                    },
                    success: function(data) {
                        self.loadData(data);
                    }
                });
            }

            self.loadData = function(data) {
                var children = [];
                data.forEach(function(child) {
                    var toAdd = new NodeModel(child);
                    children.push(toAdd);
                });
                self.treeData().Children = children;
            };
        };
        var pageModel = new PageModel();
        
        pageModel.URL("http://localhost:3142/secure/ForEachWithHelloWorldTest.debug?Name=nnn&wid=5f895e8d-07a3-4f87-869f-7c03d86f330b");
        ////pageModel.URL("http://rsaklfnkosinath:3142/secure/DownloadedFromSharepoint/Hello%20World.debug?Name=&wid=8331c574-296b-44de-ae7d-6e56e6b9f338");
        //self.debugUrl = ko.observable("http://rsaklfnkosinath:3142/secure/Hello%20World.debug?Name=&wid=540beccb-b4f5-4b34-bc37-aa24b26370e2");

        $.ajax({
            type: "GET",
            dataType: "json",
            url: pageModel.URL(),
            cache: false,
            xhrFields:
            {
                withCredentials: true
            },
            success: function(data) {
                pageModel.loadData(data);
                ko.applyBindings(pageModel);
            }
        });
    }
</script>
</body>

</html>
