// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.ToolsSpecs.Toolbox.Utility.DateandTime
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DateandTimeFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DateandTime.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DateandTime", "\tIn order to work with date and time\r\n\tAs a Warewolf user\r\n\tI want a tool that wi" +
                    "ll allow me to do date time calcuations", ProgrammingLanguage.CSharp, new string[] {
                        "Utils"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "DateandTime")))
            {
                Warewolf.ToolsSpecs.Toolbox.Utility.DateandTime.DateandTimeFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add weeks to a given date")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DateandTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void AddWeeksToAGivenDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add weeks to a given date", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have a date \"2013-11-29\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("the input format as \"yyyy-mm-dd\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("I selected Add time as \"Weeks\" with a value of 52", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("the output format as \"yyyy-mm-dd\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.When("the datetime tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
 testRunner.Then("the datetime result should be \"2014-11-28\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 14
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1815 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table1815.AddRow(new string[] {
                        "2013-11-29",
                        "yyyy-mm-dd",
                        "Weeks",
                        "52",
                        "yyyy-mm-dd"});
#line 15
 testRunner.And("the debug inputs as", ((string)(null)), table1815, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1816 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1816.AddRow(new string[] {
                        "[[result]] = 2014-11-28"});
#line 18
 testRunner.And("the debug output as", ((string)(null)), table1816, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Date and Time with Everything blank")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DateandTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void DateAndTimeWithEverythingBlank()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Date and Time with Everything blank", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("I have a date \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
 testRunner.And("the input format as \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.And("I selected Add time as \"None\" with a value of 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.And("the output format as \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.When("the datetime tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("the datetime result should be a \"System.DateTime\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 30
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1817 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "=",
                        "Input Format",
                        "=",
                        "Add Time",
                        "",
                        "Output Format",
                        "="});
            table1817.AddRow(new string[] {
                        "System Date Time",
                        "DateTime",
                        "System Date Time Format",
                        "yyyy/MM/dd hh:mm:ss tt",
                        "None",
                        "0",
                        "System Date Time Format",
                        "yyyy/MM/dd hh:mm:ss tt"});
#line 31
 testRunner.And("the debug inputs as", ((string)(null)), table1817, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1818 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1818.AddRow(new string[] {
                        "[[result]] = DateTime"});
#line 34
 testRunner.And("the debug output as", ((string)(null)), table1818, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Date and Time with input blank and incorrect format")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DateandTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void DateAndTimeWithInputBlankAndIncorrectFormat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Date and Time with input blank and incorrect format", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given("I have a date \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
 testRunner.And("the input format as \"asdf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.And("I selected Add time as \"None\" with a value of 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.And("the output format as \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.When("the datetime tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.Then("the datetime result should be \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 45
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1819 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "=",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format",
                        "="});
            table1819.AddRow(new string[] {
                        "System Date Time",
                        "DateTime",
                        "asdf",
                        "None",
                        "0",
                        "System Date Time Format",
                        "yyyy/MM/dd hh:mm:ss tt"});
#line 46
 testRunner.And("the debug inputs as", ((string)(null)), table1819, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1820 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1820.AddRow(new string[] {
                        "[[result]] ="});
#line 49
 testRunner.And("the debug output as", ((string)(null)), table1820, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Date and Time with no seconds and add 1 second")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DateandTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void DateAndTimeWithNoSecondsAndAdd1Second()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Date and Time with no seconds and add 1 second", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line 54
 testRunner.Given("I have a date \"12:30\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 55
 testRunner.And("the input format as \"24h:min\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
 testRunner.And("I selected Add time as \"Seconds\" with a value of 61", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.And("the output format as \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
 testRunner.When("the datetime tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
 testRunner.Then("the datetime result should be \"12:31\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 60
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1821 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format",
                        "="});
            table1821.AddRow(new string[] {
                        "12:30",
                        "24h:min",
                        "Seconds",
                        "61",
                        "System Date Time Format",
                        "yyyy/MM/dd hh:mm:ss tt"});
#line 61
 testRunner.And("the debug inputs as", ((string)(null)), table1821, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1822 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1822.AddRow(new string[] {
                        "[[result]] = 12:31"});
#line 64
 testRunner.And("the debug output as", ((string)(null)), table1822, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Date and Time with badly formed inputs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DateandTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void DateAndTimeWithBadlyFormedInputs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Date and Time with badly formed inputs", ((string[])(null)));
#line 68
this.ScenarioSetup(scenarioInfo);
#line 69
 testRunner.Given("I have a date \"asdf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 70
 testRunner.And("the input format as \"asdf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
 testRunner.And("I selected Add time as \"None\" with a value of 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.And("the output format as \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
 testRunner.When("the datetime tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 74
 testRunner.Then("the datetime result should be \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 75
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1823 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format",
                        "="});
            table1823.AddRow(new string[] {
                        "asdf",
                        "asdf",
                        "None",
                        "0",
                        "System Date Time Format",
                        "yyyy/MM/dd hh:mm:ss tt"});
#line 76
 testRunner.And("the debug inputs as", ((string)(null)), table1823, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1824 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1824.AddRow(new string[] {
                        "[[result]] ="});
#line 79
 testRunner.And("the debug output as", ((string)(null)), table1824, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Date and Time with badly formed output format")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DateandTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void DateAndTimeWithBadlyFormedOutputFormat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Date and Time with badly formed output format", ((string[])(null)));
#line 83
this.ScenarioSetup(scenarioInfo);
#line 84
 testRunner.Given("I have a date \"12:30\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 85
 testRunner.And("the input format as \"24h:min\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.And("I selected Add time as \"Seconds\" with a value of 61", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
 testRunner.And("the output format as \"asdf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
 testRunner.When("the datetime tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 89
 testRunner.Then("the datetime result should be \"as1f\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 90
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1825 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table1825.AddRow(new string[] {
                        "12:30",
                        "24h:min",
                        "Seconds",
                        "61",
                        "asdf"});
#line 91
 testRunner.And("the debug inputs as", ((string)(null)), table1825, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1826 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1826.AddRow(new string[] {
                        "[[result]] = as1f"});
#line 94
 testRunner.And("the debug output as", ((string)(null)), table1826, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Date and Time with characters for time to add")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DateandTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void DateAndTimeWithCharactersForTimeToAdd()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Date and Time with characters for time to add", ((string[])(null)));
#line 98
this.ScenarioSetup(scenarioInfo);
#line 99
 testRunner.Given("I have a date \"12:30\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 100
 testRunner.And("the input format as \"24h:min\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
 testRunner.And("I selected Add time as \"Seconds\" with a value of \"asdf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
 testRunner.And("the output format as \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
 testRunner.When("the datetime tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 104
 testRunner.Then("the datetime result should be \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 105
   testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1827 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format",
                        "="});
            table1827.AddRow(new string[] {
                        "12:30",
                        "24h:min",
                        "Seconds",
                        "asdf",
                        "System Date Time Format",
                        "yyyy/MM/dd hh:mm:ss tt"});
#line 106
   testRunner.And("the debug inputs as", ((string)(null)), table1827, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1828 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1828.AddRow(new string[] {
                        "[[result]] ="});
#line 109
 testRunner.And("the debug output as", ((string)(null)), table1828, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Date and Time with output format - 12h:dd:DW:mm:MM:min:ss:sp:yyyy:yy:Z:am/pm:24h:" +
            "d:dw:DW:dy:m:M:w:ZZ:w:ZZZ:Era")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DateandTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void DateAndTimeWithOutputFormat_12HDdDWMmMMMinSsSpYyyyYyZAmPm24HDDwDWDyMMWZZWZZZEra()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Date and Time with output format - 12h:dd:DW:mm:MM:min:ss:sp:yyyy:yy:Z:am/pm:24h:" +
                    "d:dw:DW:dy:m:M:w:ZZ:w:ZZZ:Era", ((string[])(null)));
#line 113
this.ScenarioSetup(scenarioInfo);
#line 114
 testRunner.Given("I have a date \"2013/12/05 04:18:51 PM\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 115
 testRunner.And("the input format as \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 116
 testRunner.And("I selected Add time as \"None\" with a value of 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
 testRunner.And("the output format as \"12h:dd:DW:mm:MM:min:ss:sp:yyyy:yy:Z:am/pm:24h:d:dw:DW:dy:m:" +
                    "M:w:ZZ:w:ZZZ:Era\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 118
 testRunner.When("the datetime tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 119
 testRunner.Then("the datetime result should be \"04:05:Thursday:12:December:18:51:0:2013:13:South A" +
                    "frica Standard Time:PM:16:5:4:Thursday:339:12:Dec:49:South Africa Standard Time:" +
                    "49:(UTC+02:00) Harare, Pretoria:A.D.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 120
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1829 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "=",
                        "Add Time",
                        "",
                        "Output Format"});
            table1829.AddRow(new string[] {
                        "2013/12/05 04:18:51 PM",
                        "System Date Time Format",
                        "yyyy/MM/dd hh:mm:ss tt",
                        "None",
                        "0",
                        "12h:dd:DW:mm:MM:min:ss:sp:yyyy:yy:Z:am/pm:24h:d:dw:DW:dy:m:M:w:ZZ:w:ZZZ:Era"});
#line 121
  testRunner.And("the debug inputs as", ((string)(null)), table1829, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1830 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1830.AddRow(new string[] {
                        "[[result]] = 04:05:Thursday:12:December:18:51:0:2013:13:South Africa Standard Tim" +
                            "e:PM:16:5:4:Thursday:339:12:Dec:"});
#line 124
 testRunner.And("the debug output as", ((string)(null)), table1830, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Date and Time with input format - 12h:dd:DW:ERA:mm:MM:min:ss:sp:yyyy:yy:Z:am/pm:2" +
            "4h:d:dw:DW:dy:m:M:w:ZZ:w:ZZZ with A.D.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DateandTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void DateAndTimeWithInputFormat_12HDdDWERAMmMMMinSsSpYyyyYyZAmPm24HDDwDWDyMMWZZWZZZWithA_D_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Date and Time with input format - 12h:dd:DW:ERA:mm:MM:min:ss:sp:yyyy:yy:Z:am/pm:2" +
                    "4h:d:dw:DW:dy:m:M:w:ZZ:w:ZZZ with A.D.", ((string[])(null)));
#line 128
this.ScenarioSetup(scenarioInfo);
#line 129
 testRunner.Given("I have a date \"04:05:Thursday:A.D.:12:December:18:51:0:2013:13:South Africa Stand" +
                    "ard Time:PM:16:5:4:Thursday:339:12:Dec:49:South Africa Standard Time:49:(UTC+02:" +
                    "00) Harare, Pretoria\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 130
 testRunner.And("the input format as \"12h:dd:DW:ERA:mm:MM:min:ss:sp:yyyy:yy:Z:am/pm:24h:d:dw:DW:dy" +
                    ":m:M:w:ZZ:w:ZZZ\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
 testRunner.And("I selected Add time as \"None\" with a value of 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 132
 testRunner.And("the output format as \"yyyy/mm/dd 12h:min:ss am/pm\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 133
 testRunner.When("the datetime tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 134
 testRunner.Then("the datetime result should be \"2013/12/05 04:18:51 PM\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 135
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1831 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table1831.AddRow(new string[] {
                        "04:05:Thursday:A.D.:12:December:18:51:0:2013:13:South Africa Standard Time:PM:16:" +
                            "5:4:Thursday:339:12",
                        "12h:dd:DW:ERA:mm:MM:min:ss:sp:yyyy:yy:Z:am/pm:24h:d:dw:DW:dy:m:M:w:ZZ:w:ZZZ",
                        "None",
                        "0",
                        "yyyy/mm/dd 12h:min:ss am/pm"});
#line 136
 testRunner.And("the debug inputs as", ((string)(null)), table1831, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1832 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1832.AddRow(new string[] {
                        "[[result]] = 2013/12/05 04:18:51 PM"});
#line 139
 testRunner.And("the debug output as", ((string)(null)), table1832, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Date and Time with input format - 12h:dd:DW:era:mm:MM:min:ss:sp:yyyy:yy:Z:am/pm:2" +
            "4h:d:dw:DW:dy:m:M:w:ZZ:w:ZZZ with AD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DateandTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void DateAndTimeWithInputFormat_12HDdDWEraMmMMMinSsSpYyyyYyZAmPm24HDDwDWDyMMWZZWZZZWithAD()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Date and Time with input format - 12h:dd:DW:era:mm:MM:min:ss:sp:yyyy:yy:Z:am/pm:2" +
                    "4h:d:dw:DW:dy:m:M:w:ZZ:w:ZZZ with AD", ((string[])(null)));
#line 143
this.ScenarioSetup(scenarioInfo);
#line 144
 testRunner.Given("I have a date \"04:05:Thursday:AD:12:December:18:51:0:2013:13:South Africa Standar" +
                    "d Time:PM:16:5:4:Thursday:339:12:Dec:49:South Africa Standard Time:49:(UTC+02:00" +
                    ") Harare, Pretoria\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 145
 testRunner.And("the input format as \"12h:dd:DW:era:mm:MM:min:ss:sp:yyyy:yy:Z:am/pm:24h:d:dw:DW:dy" +
                    ":m:M:w:ZZ:w:ZZZ\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
 testRunner.And("I selected Add time as \"None\" with a value of 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
 testRunner.And("the output format as \"yyyy/mm/dd 12h:min:ss am/pm\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
 testRunner.When("the datetime tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 149
 testRunner.Then("the datetime result should be \"2013/12/05 04:18:51 PM\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 150
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1833 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table1833.AddRow(new string[] {
                        "04:05:Thursday:AD:12:December:18:51:0:2013:13:South Africa Standard Time:PM:16:5:" +
                            "4:Thursday:339:12:D",
                        "12h:dd:DW:era:mm:MM:min:ss:sp:yyyy:yy:Z:am/pm:24h:d:dw:DW:dy:m:M:w:ZZ:w:ZZZ",
                        "None",
                        "0",
                        "yyyy/mm/dd 12h:min:ss am/pm"});
#line 151
  testRunner.And("the debug inputs as", ((string)(null)), table1833, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1834 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1834.AddRow(new string[] {
                        "[[result]] = 2013/12/05 04:18:51 PM"});
#line 154
 testRunner.And("the debug output as", ((string)(null)), table1834, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Date and Time with input format - 12h:dd:DW:Era:mm:MM:min:ss:sp:yyyy:yy:Z:am/pm:2" +
            "4h:d:dw:DW:dy:m:M:w:ZZ:w:ZZZ with A.D")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DateandTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void DateAndTimeWithInputFormat_12HDdDWEraMmMMMinSsSpYyyyYyZAmPm24HDDwDWDyMMWZZWZZZWithA_D()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Date and Time with input format - 12h:dd:DW:Era:mm:MM:min:ss:sp:yyyy:yy:Z:am/pm:2" +
                    "4h:d:dw:DW:dy:m:M:w:ZZ:w:ZZZ with A.D", ((string[])(null)));
#line 159
this.ScenarioSetup(scenarioInfo);
#line 160
 testRunner.Given("I have a date \"04:05:Thursday:A.D:12:December:18:51:0:2013:13:South Africa Standa" +
                    "rd Time:PM:16:5:4:Thursday:339:12:Dec:49:South Africa Standard Time:49:(UTC+02:0" +
                    "0) Harare, Pretoria\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 161
 testRunner.And("the input format as \"12h:dd:DW:Era:mm:MM:min:ss:sp:yyyy:yy:Z:am/pm:24h:d:dw:DW:dy" +
                    ":m:M:w:ZZ:w:ZZZ\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 162
 testRunner.And("I selected Add time as \"None\" with a value of 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
 testRunner.And("the output format as \"yyyy/mm/dd 12h:min:ss am/pm\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
 testRunner.When("the datetime tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 165
 testRunner.Then("the datetime result should be \"2013/12/05 04:18:51 PM\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 166
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1835 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table1835.AddRow(new string[] {
                        "04:05:Thursday:A.D:12:December:18:51:0:2013:13:South Africa Standard Time:PM:16:5" +
                            ":4:Thursday:339:12:",
                        "12h:dd:DW:Era:mm:MM:min:ss:sp:yyyy:yy:Z:am/pm:24h:d:dw:DW:dy:m:M:w:ZZ:w:ZZZ",
                        "None",
                        "0",
                        "yyyy/mm/dd 12h:min:ss am/pm"});
#line 167
  testRunner.And("the debug inputs as", ((string)(null)), table1835, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1836 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1836.AddRow(new string[] {
                        "[[result]] = 2013/12/05 04:18:51 PM"});
#line 170
 testRunner.And("the debug output as", ((string)(null)), table1836, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Date and time input date with a negative index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DateandTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void DateAndTimeInputDateWithANegativeIndex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Date and time input date with a negative index", ((string[])(null)));
#line 174
this.ScenarioSetup(scenarioInfo);
#line 175
 testRunner.Given("I have a date \"[[my(-1).date]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 176
 testRunner.And("the input format as \"yyyy-mm-dd\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
 testRunner.And("I selected Add time as \"Weeks\" with a value of 52", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
 testRunner.And("the output format as \"yyyy-mm-dd\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
 testRunner.When("the datetime tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 180
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1837 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table1837.AddRow(new string[] {
                        "[[my(-1).date]] =",
                        "yyyy-mm-dd",
                        "Weeks",
                        "52",
                        "yyyy-mm-dd"});
#line 181
  testRunner.And("the debug inputs as", ((string)(null)), table1837, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1838 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1838.AddRow(new string[] {
                        "[[result]] ="});
#line 184
 testRunner.And("the debug output as", ((string)(null)), table1838, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Date and time input format with a negative index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DateandTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void DateAndTimeInputFormatWithANegativeIndex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Date and time input format with a negative index", ((string[])(null)));
#line 188
this.ScenarioSetup(scenarioInfo);
#line 189
 testRunner.Given("I have a date \"2013-11-29\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 190
 testRunner.And("the input format as \"[[my(-1).format]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 191
 testRunner.And("I selected Add time as \"Weeks\" with a value of 52", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 192
 testRunner.And("the output format as \"yyyy-mm-dd\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 193
 testRunner.When("the datetime tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 194
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1839 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table1839.AddRow(new string[] {
                        "2013-11-29",
                        "[[my(-1).format]] =",
                        "Weeks",
                        "52",
                        "yyyy-mm-dd"});
#line 195
 testRunner.And("the debug inputs as", ((string)(null)), table1839, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1840 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1840.AddRow(new string[] {
                        "[[result]] ="});
#line 198
 testRunner.And("the debug output as", ((string)(null)), table1840, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Date and Time add weeks with a negative index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DateandTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void DateAndTimeAddWeeksWithANegativeIndex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Date and Time add weeks with a negative index", ((string[])(null)));
#line 202
this.ScenarioSetup(scenarioInfo);
#line 203
 testRunner.Given("I have a date \"2013-11-29\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 204
 testRunner.And("the input format as \"yyyy-mm-dd\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 205
 testRunner.And("I selected Add time as \"Weeks\" with a value of \"[[my(-1).int]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 206
 testRunner.And("the output format as \"yyyy-mm-dd\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 207
 testRunner.When("the datetime tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 208
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1841 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table1841.AddRow(new string[] {
                        "2013-11-29",
                        "yyyy-mm-dd",
                        "Weeks",
                        "[[my(-1).int]] =",
                        "yyyy-mm-dd"});
#line 209
 testRunner.And("the debug inputs as", ((string)(null)), table1841, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1842 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1842.AddRow(new string[] {
                        "[[result]] ="});
#line 212
 testRunner.And("the debug output as", ((string)(null)), table1842, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Date and Time output format with a negative index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DateandTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void DateAndTimeOutputFormatWithANegativeIndex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Date and Time output format with a negative index", ((string[])(null)));
#line 216
this.ScenarioSetup(scenarioInfo);
#line 217
 testRunner.Given("I have a date \"2013-11-29\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 218
 testRunner.And("the input format as \"yyyy-mm-dd\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 219
 testRunner.And("I selected Add time as \"Weeks\" with a value of 52", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 220
 testRunner.And("the output format as \"[[my(-1).format]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 221
 testRunner.When("the datetime tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 222
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1843 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table1843.AddRow(new string[] {
                        "2013-11-29",
                        "yyyy-mm-dd",
                        "Weeks",
                        "52",
                        "[[my(-1).format]] ="});
#line 223
 testRunner.And("the debug inputs as", ((string)(null)), table1843, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1844 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1844.AddRow(new string[] {
                        "[[result]] ="});
#line 226
 testRunner.And("the debug output as", ((string)(null)), table1844, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Default outputs for dateparts not present")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DateandTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void DefaultOutputsForDatepartsNotPresent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Default outputs for dateparts not present", ((string[])(null)));
#line 231
this.ScenarioSetup(scenarioInfo);
#line 232
 testRunner.Given("I have a date \"0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 233
 testRunner.And("the input format as \"sp\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 234
 testRunner.And("I selected Add time as \"None\" with a value of 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 235
 testRunner.And("the output format as \"yyyy-mm-dd 24hr:min:ss am/pm Era\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
 testRunner.When("the datetime tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 237
 testRunner.Then("the datetime result should be \"0001-01-01 00r:00:00 AM AD\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 238
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1845 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table1845.AddRow(new string[] {
                        "0",
                        "sp",
                        "None",
                        "0",
                        "yyyy-mm-dd 24hr:min:ss am/pm Era"});
#line 239
 testRunner.And("the debug inputs as", ((string)(null)), table1845, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1846 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1846.AddRow(new string[] {
                        "[[result]] = 0001-01-01 00r:00:00 AM A.D."});
#line 242
 testRunner.And("the debug output as", ((string)(null)), table1846, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Date and Time output format with quoted strings")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DateandTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void DateAndTimeOutputFormatWithQuotedStrings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Date and Time output format with quoted strings", ((string[])(null)));
#line 246
this.ScenarioSetup(scenarioInfo);
#line 247
       testRunner.Given("I have a date \" 2013 March 29\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 248
       testRunner.And("the input format as \" yyyy MM dd\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 249
       testRunner.And("I selected Add time as \"Years\" with a value of 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 250
       testRunner.And("the output format as \"yyyy-mm-dd \"wrong date\"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 251
       testRunner.When("the datetime tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 252
       testRunner.Then("the datetime result should be \"2014-03-29 \"13rong 29ate\"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 253
       testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1847 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table1847.AddRow(new string[] {
                        "2013 March 29",
                        "yyyy MM dd",
                        "Years",
                        "1",
                        "yyyy-mm-dd \"wrong date\""});
#line 254
       testRunner.And("the debug inputs as", ((string)(null)), table1847, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1848 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1848.AddRow(new string[] {
                        "[[result]] = 2014-03-29 \"13rong 29ate\""});
#line 257
       testRunner.And("the debug output as", ((string)(null)), table1848, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Date and Time output format without inputs must return correct format")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DateandTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void DateAndTimeOutputFormatWithoutInputsMustReturnCorrectFormat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Date and Time output format without inputs must return correct format", ((string[])(null)));
#line 261
this.ScenarioSetup(scenarioInfo);
#line 262
 testRunner.Given("I have a date \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 263
 testRunner.And("the input format as \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 264
 testRunner.And("the output format as \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 265
 testRunner.And("I selected Add time as \"Years\" with a value of 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 266
 testRunner.When("the datetime tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 267
 testRunner.Then("the datetime result should contain milliseconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 268
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Date and Time output format with NULL inputs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DateandTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void DateAndTimeOutputFormatWithNULLInputs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Date and Time output format with NULL inputs", ((string[])(null)));
#line 271
this.ScenarioSetup(scenarioInfo);
#line 272
       testRunner.Given("I have a Date time variable \"[[a]]\" with value \"NULL\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 273
    testRunner.And("I have a date \"[[a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 274
       testRunner.And("the input format as \"dd-MM-yy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 275
       testRunner.And("the output format as \"dd-MM-yy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 276
   testRunner.And("I selected Add time as \"Years\" with a value of 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 277
       testRunner.When("the datetime tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 278
       testRunner.Then("the execution has \"An\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
