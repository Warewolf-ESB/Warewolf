// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.ToolsSpecs.Toolbox.Utility.XPath
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class XPathFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "XPath.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "XPath", "\tIn order to run a query against xml\r\n\tAs a Warewolf user\r\n\tI want a tool that I " +
                    "can use to execute xpath queries", ProgrammingLanguage.CSharp, new string[] {
                        "Utils"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "XPath")))
            {
                Warewolf.ToolsSpecs.Toolbox.Utility.XPath.XPathFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Use XPath to get data off XML - Id = 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "XPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void UseXPathToGetDataOffXML_Id1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use XPath to get data off XML - Id = 1", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have this xml \"<root><number id=\"1\">One</number><number id=\"2\">Two</number><num" +
                    "ber id=\"3\">Three</number></root>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I have a variable \"[[firstNum]]\" output with xpath \"//root/number[@id=\"1\"]/text()" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.When("the xpath tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("the variable \"[[firstNum]]\" should have a value \"One\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 12
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1990 = new TechTalk.SpecFlow.Table(new string[] {
                        "XML",
                        "#",
                        ""});
            table1990.AddRow(new string[] {
                        "<root><number id=\"1\">One</number><number id=\"2\">Two</number><number id=\"3\">Three<" +
                            "/number></root>",
                        "1",
                        "[[firstNum]] = //root/number[@id=\"1\"]/text()"});
#line 13
 testRunner.And("the debug inputs as", ((string)(null)), table1990, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1991 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1991.AddRow(new string[] {
                        "1",
                        "[[firstNum]] = One"});
#line 16
 testRunner.And("the debug output as", ((string)(null)), table1991, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Use XPath to get data off XML - Id = 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "XPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void UseXPathToGetDataOffXML_Id2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use XPath to get data off XML - Id = 2", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("I have this xml \"<root><number id=\"1\">One</number><number id=\"2\">Two</number><num" +
                    "ber id=\"3\">Three</number></root>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.And("I have a variable \"[[firstNum]]\" output with xpath \"//root/number[@id=\"2\"]/text()" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.When("the xpath tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then("the variable \"[[firstNum]]\" should have a value \"Two\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1992 = new TechTalk.SpecFlow.Table(new string[] {
                        "XML",
                        "#",
                        ""});
            table1992.AddRow(new string[] {
                        "<root><number id=\"1\">One</number><number id=\"2\">Two</number><number id=\"3\">Three<" +
                            "/number></root>",
                        "1",
                        "[[firstNum]] = //root/number[@id=\"2\"]/text()"});
#line 26
 testRunner.And("the debug inputs as", ((string)(null)), table1992, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1993 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1993.AddRow(new string[] {
                        "1",
                        "[[firstNum]] = Two"});
#line 29
 testRunner.And("the debug output as", ((string)(null)), table1993, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Use XPath to build a recordset with 2 fields")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "XPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void UseXPathToBuildARecordsetWith2Fields()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use XPath to build a recordset with 2 fields", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
 testRunner.Given("I have this xml \"<root><number id=\"1\">One</number><number id=\"2\">Two</number><num" +
                    "ber id=\"3\">Three</number></root>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 35
 testRunner.And("I have a variable \"[[rec(*).id]]\" output with xpath \"//root/number/@id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.And("I have a variable \"[[rec2(*).text]]\" output with xpath \"//root/number/text()\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.When("the xpath tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1994 = new TechTalk.SpecFlow.Table(new string[] {
                        "rec().id"});
            table1994.AddRow(new string[] {
                        "1"});
            table1994.AddRow(new string[] {
                        "2"});
            table1994.AddRow(new string[] {
                        "3"});
#line 38
 testRunner.Then("the xpath result for this varibale \"[[rec(*).id]]\" will be", ((string)(null)), table1994, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1995 = new TechTalk.SpecFlow.Table(new string[] {
                        "rec().text"});
            table1995.AddRow(new string[] {
                        "One"});
            table1995.AddRow(new string[] {
                        "Two"});
            table1995.AddRow(new string[] {
                        "Three"});
#line 43
 testRunner.Then("the xpath result for this varibale \"[[rec2(*).text]]\" will be", ((string)(null)), table1995, "Then ");
#line 48
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1996 = new TechTalk.SpecFlow.Table(new string[] {
                        "XML",
                        "#",
                        ""});
            table1996.AddRow(new string[] {
                        "<root><number id=\"1\">One</number><number id=\"2\">Two</number><number id=\"3\">Three<" +
                            "/number></root>",
                        "1",
                        "[[rec(*).id]] = //root/number/@id"});
            table1996.AddRow(new string[] {
                        "",
                        "2",
                        "[[rec2(*).text]] = //root/number/text()"});
#line 49
 testRunner.And("the debug inputs as", ((string)(null)), table1996, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1997 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1997.AddRow(new string[] {
                        "1",
                        "[[rec(1).id]] = 1"});
            table1997.AddRow(new string[] {
                        "",
                        "[[rec(2).id]] = 2"});
            table1997.AddRow(new string[] {
                        "",
                        "[[rec(3).id]] = 3"});
            table1997.AddRow(new string[] {
                        "2",
                        "[[rec2(1).text]] = One"});
            table1997.AddRow(new string[] {
                        "",
                        "[[rec2(2).text]] = Two"});
            table1997.AddRow(new string[] {
                        "",
                        "[[rec2(3).text]] = Three"});
#line 53
 testRunner.And("the debug output as", ((string)(null)), table1997, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Use XPath that does not exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "XPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void UseXPathThatDoesNotExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use XPath that does not exist", ((string[])(null)));
#line 62
this.ScenarioSetup(scenarioInfo);
#line 63
 testRunner.Given("I have this xml \"<root><number id=\"1\">One</number><number id=\"2\">Two</number><num" +
                    "ber id=\"3\">Three</number></root>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 64
 testRunner.And("I have a variable \"[[ids]]\" output with xpath \"//root/num/@id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.When("the xpath tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
 testRunner.Then("the variable \"[[ids]]\" should have a value \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 67
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1998 = new TechTalk.SpecFlow.Table(new string[] {
                        "XML",
                        "#",
                        ""});
            table1998.AddRow(new string[] {
                        "<root><number id=\"1\">One</number><number id=\"2\">Two</number><number id=\"3\">Three<" +
                            "/number></root>",
                        "1",
                        "[[ids]] = //root/num/@id"});
#line 68
 testRunner.And("the debug inputs as", ((string)(null)), table1998, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1999 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1999.AddRow(new string[] {
                        "1",
                        "[[ids]] ="});
#line 71
 testRunner.And("the debug output as", ((string)(null)), table1999, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Use invalid xpath query")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "XPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void UseInvalidXpathQuery()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use invalid xpath query", ((string[])(null)));
#line 75
this.ScenarioSetup(scenarioInfo);
#line 76
 testRunner.Given("I have this xml \"<root><number id=\"1\">One</number><number id=\"2\">Two</number><num" +
                    "ber id=\"3\">Three</number></root>\" in a variable \'[[myxml]]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 77
 testRunner.And("I assign the variable \"[[myxml]]\" as xml input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
 testRunner.And("I have a variable \"[[ids]]\" output with xpath \"@@#$\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
 testRunner.When("the xpath tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
 testRunner.Then("the variable \"[[ids]]\" should have a value \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 81
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2000 = new TechTalk.SpecFlow.Table(new string[] {
                        "XML",
                        "#",
                        ""});
            table2000.AddRow(new string[] {
                        "[[myxml]] = <root><number id=\"1\">One</number><number id=\"2\">Two</number><number i" +
                            "d=\"3\">Three</number></root>",
                        "1",
                        "[[ids]] = @@#$"});
#line 82
 testRunner.And("the debug inputs as", ((string)(null)), table2000, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2001 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table2001.AddRow(new string[] {
                        "1",
                        "[[ids]] ="});
#line 85
 testRunner.And("the debug output as", ((string)(null)), table2001, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Use XPath with append notation should add")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "XPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void UseXPathWithAppendNotationShouldAdd()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use XPath with append notation should add", ((string[])(null)));
#line 89
this.ScenarioSetup(scenarioInfo);
#line 90
 testRunner.Given("I have this xml \"<root><number id=\"1\">One</number><number id=\"2\">Two</number><num" +
                    "ber id=\"3\">Three</number></root>\" in a variable \'[[rec().set]]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 91
 testRunner.And("I assign the variable \"[[rec().set]]\" as xml input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
 testRunner.And("I have a variable \"[[rec().set]]\" output with xpath \"//root/number/@id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
 testRunner.When("the xpath tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2002 = new TechTalk.SpecFlow.Table(new string[] {
                        "rec().set"});
            table2002.AddRow(new string[] {
                        "<root><number id=\"1\">One</number><number id=\"2\">Two</number><number id=\"3\">Three<" +
                            "/number></root>"});
            table2002.AddRow(new string[] {
                        "1"});
            table2002.AddRow(new string[] {
                        "2"});
            table2002.AddRow(new string[] {
                        "3"});
#line 94
 testRunner.Then("the xpath result for this varibale \"[[rec().set]]\" will be", ((string)(null)), table2002, "Then ");
#line 100
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2003 = new TechTalk.SpecFlow.Table(new string[] {
                        "XML",
                        "#",
                        ""});
            table2003.AddRow(new string[] {
                        "[[rec(1).set]] = <root><number id=\"1\">One</number><number id=\"2\">Two</number><num" +
                            "ber id=\"3\">Three</number></root>",
                        "1",
                        "[[rec().set]] = //root/number/@id"});
#line 101
 testRunner.And("the debug inputs as", ((string)(null)), table2003, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2004 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table2004.AddRow(new string[] {
                        "1",
                        "[[rec(1).set]] = <root><number id=\"1\">One</number><number id=\"2\">Two</number><num" +
                            "ber id=\"3\">Three</number></root>"});
            table2004.AddRow(new string[] {
                        "",
                        "[[rec(2).set]] = 1"});
            table2004.AddRow(new string[] {
                        "",
                        "[[rec(3).set]] = 2"});
            table2004.AddRow(new string[] {
                        "",
                        "[[rec(4).set]] = 3"});
#line 104
 testRunner.And("the debug output as", ((string)(null)), table2004, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Use XPath with invalid XML as input inside a")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "XPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void UseXPathWithInvalidXMLAsInputInsideA()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use XPath with invalid XML as input inside a", ((string[])(null)));
#line 111
this.ScenarioSetup(scenarioInfo);
#line 112
 testRunner.Given("I have this xml \"<start></end>\" in a variable \'[[myxml]]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 113
 testRunner.And("I assign the variable \"[[myxml]]\" as xml input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
 testRunner.And("I have a variable \"[[ids]]\" output with xpath \"//root\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
 testRunner.When("the xpath tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 116
 testRunner.Then("the variable \"[[ids]]\" should have a value \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 117
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2005 = new TechTalk.SpecFlow.Table(new string[] {
                        "XML",
                        "#",
                        ""});
            table2005.AddRow(new string[] {
                        "[[myxml]] = <start></end>",
                        "1",
                        "[[ids]] = //root"});
#line 118
 testRunner.And("the debug inputs as", ((string)(null)), table2005, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2006 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table2006.AddRow(new string[] {
                        "1",
                        "[[ids]] ="});
#line 121
 testRunner.And("the debug output as", ((string)(null)), table2006, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Use XPath with no  result but valid xpath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "XPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void UseXPathWithNoResultButValidXpath()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use XPath with no  result but valid xpath", ((string[])(null)));
#line 125
this.ScenarioSetup(scenarioInfo);
#line 126
 testRunner.Given("I have this xml \"<root><number id=\"1\">One</number><number id=\"2\">Two</number><num" +
                    "ber id=\"3\">Three</number></root>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 127
 testRunner.And("I have a variable \"\" output with xpath \"//root/number/@id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 128
 testRunner.When("the xpath tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 129
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2007 = new TechTalk.SpecFlow.Table(new string[] {
                        "XML",
                        "#",
                        ""});
            table2007.AddRow(new string[] {
                        "<root><number id=\"1\">One</number><number id=\"2\">Two</number><number id=\"3\">Three<" +
                            "/number></root>",
                        "",
                        ""});
#line 130
 testRunner.And("the debug inputs as", ((string)(null)), table2007, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Use XPath to get multiple results into a scalar is last result")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "XPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void UseXPathToGetMultipleResultsIntoAScalarIsLastResult()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use XPath to get multiple results into a scalar is last result", ((string[])(null)));
#line 134
this.ScenarioSetup(scenarioInfo);
#line 135
 testRunner.Given("I have this xml \"<root><number id=\"1\">One</number><number id=\"2\">Two</number><num" +
                    "ber id=\"3\">Three</number></root>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 136
 testRunner.And("I have a variable \"[[ids]]\" output with xpath \"//root/number/@id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 137
 testRunner.When("the xpath tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 138
 testRunner.Then("the variable \"[[ids]]\" should have a value \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 139
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2008 = new TechTalk.SpecFlow.Table(new string[] {
                        "XML",
                        "#",
                        ""});
            table2008.AddRow(new string[] {
                        "<root><number id=\"1\">One</number><number id=\"2\">Two</number><number id=\"3\">Three<" +
                            "/number></root>",
                        "1",
                        "[[ids]] = //root/number/@id"});
#line 140
 testRunner.And("the debug inputs as", ((string)(null)), table2008, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2009 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table2009.AddRow(new string[] {
                        "1",
                        "[[ids]] = 3"});
#line 143
 testRunner.And("the debug output as", ((string)(null)), table2009, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Use the XPath to process blank XML")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "XPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void UseTheXPathToProcessBlankXML()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use the XPath to process blank XML", ((string[])(null)));
#line 147
this.ScenarioSetup(scenarioInfo);
#line 148
 testRunner.Given("I have this xml \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 149
 testRunner.And("I have a variable \"[[ids]]\" output with xpath \"//root/number/@id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.When("the xpath tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 151
 testRunner.Then("the variable \"[[ids]]\" should have a value \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 152
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2010 = new TechTalk.SpecFlow.Table(new string[] {
                        "XML",
                        "#",
                        ""});
            table2010.AddRow(new string[] {
                        "\"\"",
                        "1",
                        "[[ids]] =  //root/number/@id"});
#line 153
 testRunner.And("the debug inputs as", ((string)(null)), table2010, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2011 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table2011.AddRow(new string[] {
                        "1",
                        "[[ids]] ="});
#line 156
 testRunner.And("the debug output as", ((string)(null)), table2011, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Use the XPath without any xpath query")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "XPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void UseTheXPathWithoutAnyXpathQuery()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use the XPath without any xpath query", ((string[])(null)));
#line 160
this.ScenarioSetup(scenarioInfo);
#line 161
 testRunner.Given("I have this xml \"<root><number id=\"1\">One</number><number id=\"2\">Two</number><num" +
                    "ber id=\"3\">Three</number></root>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 162
 testRunner.And("I have a variable \"[[ids]]\" output with xpath \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
 testRunner.When("the xpath tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 164
 testRunner.Then("the variable \"[[ids]]\" should have a value \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 165
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2012 = new TechTalk.SpecFlow.Table(new string[] {
                        "XML",
                        "#",
                        ""});
            table2012.AddRow(new string[] {
                        "<root><number id=\"1\">One</number><number id=\"2\">Two</number><number id=\"3\">Three<" +
                            "/number></root>",
                        "1",
                        "[[ids]] ="});
#line 166
 testRunner.And("the debug inputs as", ((string)(null)), table2012, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2013 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table2013.AddRow(new string[] {
                        "1",
                        "[[ids]] ="});
#line 169
 testRunner.And("the debug output as", ((string)(null)), table2013, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Use XPath with blank  as XML input")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "XPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void UseXPathWithBlankAsXMLInput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use XPath with blank  as XML input", ((string[])(null)));
#line 173
this.ScenarioSetup(scenarioInfo);
#line 174
 testRunner.Given("I have this xml \"\" in a variable \'[[myxml]]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 175
 testRunner.And("I assign the variable \"[[myxml]]\" as xml input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
 testRunner.And("I have a variable \"[[ids]]\" output with xpath \"//root/num/@id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
 testRunner.When("the xpath tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 178
 testRunner.Then("the variable \"[[ids]]\" should have a value \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 179
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2014 = new TechTalk.SpecFlow.Table(new string[] {
                        "XML",
                        "#",
                        ""});
            table2014.AddRow(new string[] {
                        "[[myxml]] =",
                        "1",
                        "[[ids]] = //root/num/@id"});
#line 180
 testRunner.And("the debug inputs as", ((string)(null)), table2014, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2015 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table2015.AddRow(new string[] {
                        "1",
                        "[[ids]] ="});
#line 183
 testRunner.And("the debug output as", ((string)(null)), table2015, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Use XPath with negative recordset index as output")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "XPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void UseXPathWithNegativeRecordsetIndexAsOutput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use XPath with negative recordset index as output", ((string[])(null)));
#line 188
this.ScenarioSetup(scenarioInfo);
#line 189
 testRunner.Given("I have this xml \"<root><number id=\"1\">One</number><number id=\"2\">Two</number><num" +
                    "ber id=\"3\">Three</number></root>\" in a variable \'[[xml]]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 190
 testRunner.And("I assign the variable \"[[xml]]\" as xml input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 191
 testRunner.And("I have a variable \"[[rec(-1).ids]]\" output with xpath \"//root/number[@id=\"2\"]/tex" +
                    "t()\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 192
 testRunner.When("the xpath tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 193
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2016 = new TechTalk.SpecFlow.Table(new string[] {
                        "XML",
                        "#",
                        ""});
            table2016.AddRow(new string[] {
                        "[[xml]] = <root><number id=\"1\">One</number><number id=\"2\">Two</number><number id=" +
                            "\"3\">Three</number></root>",
                        "1",
                        "[[rec(-1).ids]] = //root/number[@id=\"2\"]/text()"});
#line 194
 testRunner.And("the debug inputs as", ((string)(null)), table2016, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2017 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table2017.AddRow(new string[] {
                        "1",
                        "[[rec(-1).ids]] ="});
#line 197
 testRunner.And("the debug output as", ((string)(null)), table2017, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Use XPath to with a comment in it")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "XPath")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utils")]
        public virtual void UseXPathToWithACommentInIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use XPath to with a comment in it", ((string[])(null)));
#line 201
this.ScenarioSetup(scenarioInfo);
#line 202
 testRunner.Given("I have this xml \"<?xml version=\"1.0\" encoding=\"utf-8\"?><!-- Generated by Warewolf" +
                    " --><root><number id=\"1\">One</number><number id=\"2\">Two</number><number id=\"3\">T" +
                    "hree</number></root>\" in a variable \'[[xml]]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 203
 testRunner.And("I assign the variable \"[[xml]]\" as xml input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 204
 testRunner.And("I have a variable \"[[rec(*).id]]\" output with xpath \"//root/number/@id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 205
 testRunner.When("the xpath tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2018 = new TechTalk.SpecFlow.Table(new string[] {
                        "rec().id"});
            table2018.AddRow(new string[] {
                        "1"});
            table2018.AddRow(new string[] {
                        "2"});
            table2018.AddRow(new string[] {
                        "3"});
#line 206
 testRunner.Then("the xpath result for this varibale \"[[rec(*).id]]\" will be", ((string)(null)), table2018, "Then ");
#line 211
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2019 = new TechTalk.SpecFlow.Table(new string[] {
                        "XML",
                        "#",
                        ""});
            table2019.AddRow(new string[] {
                        "[[xml]] = <?xml version=\"1.0\" encoding=\"utf-8\"?><!-- Generated by Warewolf --><ro" +
                            "ot><number id=\"1\">One</number",
                        "1",
                        "[[rec(*).id]] = //root/number/@id"});
#line 212
 testRunner.And("the debug inputs as", ((string)(null)), table2019, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2020 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table2020.AddRow(new string[] {
                        "1",
                        "[[rec(1).id]] = 1"});
            table2020.AddRow(new string[] {
                        "",
                        "[[rec(2).id]] = 2"});
            table2020.AddRow(new string[] {
                        "",
                        "[[rec(3).id]] = 3"});
#line 215
 testRunner.And("the debug output as", ((string)(null)), table2020, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
