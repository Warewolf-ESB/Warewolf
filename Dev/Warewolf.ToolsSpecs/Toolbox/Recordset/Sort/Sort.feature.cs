// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.ToolsSpecs.Toolbox.Recordset.Sort
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SortFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Sort.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Sort", "\tIn order to sort a recordset\r\n\tAs a Warewolf user\r\n\tI want a tool I can use to a" +
                    "rrange records in either ascending or descending order ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Sort")))
            {
                Warewolf.ToolsSpecs.Toolbox.Recordset.Sort.SortFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset forwards using star notation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        public virtual void SortARecordsetForwardsUsingStarNotation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset forwards using star notation", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1369 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1369.AddRow(new string[] {
                        "rs().row",
                        "You"});
            table1369.AddRow(new string[] {
                        "rs().row",
                        "are"});
            table1369.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table1369.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table1369.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table1369.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table1369.AddRow(new string[] {
                        "rs().row",
                        "so far"});
#line 7
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1369, "Given ");
#line 16
 testRunner.And("I sort a record \"[[rs(*).row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.And("my sort order is \"Forward\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1370 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1370.AddRow(new string[] {
                        "rs().row",
                        "are"});
            table1370.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table1370.AddRow(new string[] {
                        "rs().row",
                        "so far"});
            table1370.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table1370.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table1370.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table1370.AddRow(new string[] {
                        "rs().row",
                        "You"});
#line 19
 testRunner.Then("the sorted recordset \"[[rs(*).row]]\"  will be", ((string)(null)), table1370, "Then ");
#line 28
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1371 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table1371.AddRow(new string[] {
                        "[[rs(1).row]] = You",
                        ""});
            table1371.AddRow(new string[] {
                        "[[rs(2).row]] = are",
                        ""});
            table1371.AddRow(new string[] {
                        "[[rs(3).row]] = the",
                        ""});
            table1371.AddRow(new string[] {
                        "[[rs(4).row]] = best",
                        ""});
            table1371.AddRow(new string[] {
                        "[[rs(5).row]] = Warewolf",
                        ""});
            table1371.AddRow(new string[] {
                        "[[rs(6).row]] = user",
                        ""});
            table1371.AddRow(new string[] {
                        "[[rs(7).row]] = so far",
                        "Forward"});
#line 29
 testRunner.And("the debug inputs as", ((string)(null)), table1371, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1372 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1372.AddRow(new string[] {
                        "[[rs(1).row]] = are"});
            table1372.AddRow(new string[] {
                        "[[rs(2).row]] = best"});
            table1372.AddRow(new string[] {
                        "[[rs(3).row]] = so far"});
            table1372.AddRow(new string[] {
                        "[[rs(4).row]] = the"});
            table1372.AddRow(new string[] {
                        "[[rs(5).row]] = user"});
            table1372.AddRow(new string[] {
                        "[[rs(6).row]] = Warewolf"});
            table1372.AddRow(new string[] {
                        "[[rs(7).row]] = You"});
#line 38
 testRunner.And("the debug output as", ((string)(null)), table1372, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset backwards using star notation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        public virtual void SortARecordsetBackwardsUsingStarNotation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset backwards using star notation", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1373 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1373.AddRow(new string[] {
                        "rs().row",
                        "You"});
            table1373.AddRow(new string[] {
                        "rs().row",
                        "are"});
            table1373.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table1373.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table1373.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table1373.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table1373.AddRow(new string[] {
                        "rs().row",
                        "so far"});
#line 49
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1373, "Given ");
#line 58
 testRunner.And("I sort a record \"[[rs(*).row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
 testRunner.And("my sort order is \"Backwards\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1374 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1374.AddRow(new string[] {
                        "rs().row",
                        "You"});
            table1374.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table1374.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table1374.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table1374.AddRow(new string[] {
                        "rs().row",
                        "so far"});
            table1374.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table1374.AddRow(new string[] {
                        "rs().row",
                        "are"});
#line 61
 testRunner.Then("the sorted recordset \"[[rs(*).row]]\"  will be", ((string)(null)), table1374, "Then ");
#line 70
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1375 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table1375.AddRow(new string[] {
                        "[[rs(1).row]] = You",
                        ""});
            table1375.AddRow(new string[] {
                        "[[rs(2).row]] = are",
                        ""});
            table1375.AddRow(new string[] {
                        "[[rs(3).row]] = the",
                        ""});
            table1375.AddRow(new string[] {
                        "[[rs(4).row]] = best",
                        ""});
            table1375.AddRow(new string[] {
                        "[[rs(5).row]] = Warewolf",
                        ""});
            table1375.AddRow(new string[] {
                        "[[rs(6).row]] = user",
                        ""});
            table1375.AddRow(new string[] {
                        "[[rs(7).row]] = so far",
                        "Backwards"});
#line 71
 testRunner.And("the debug inputs as", ((string)(null)), table1375, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1376 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1376.AddRow(new string[] {
                        "[[rs(1).row]] = You"});
            table1376.AddRow(new string[] {
                        "[[rs(2).row]] = Warewolf"});
            table1376.AddRow(new string[] {
                        "[[rs(3).row]] = user"});
            table1376.AddRow(new string[] {
                        "[[rs(4).row]] = the"});
            table1376.AddRow(new string[] {
                        "[[rs(5).row]] = so far"});
            table1376.AddRow(new string[] {
                        "[[rs(6).row]] = best"});
            table1376.AddRow(new string[] {
                        "[[rs(7).row]] = are"});
#line 80
 testRunner.And("the debug output as", ((string)(null)), table1376, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset forwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        public virtual void SortARecordsetForwards()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset forwards", ((string[])(null)));
#line 90
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1377 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1377.AddRow(new string[] {
                        "rs().row",
                        "You"});
            table1377.AddRow(new string[] {
                        "rs().row",
                        "are"});
            table1377.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table1377.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table1377.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table1377.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table1377.AddRow(new string[] {
                        "rs().row",
                        "so far"});
#line 91
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1377, "Given ");
#line 100
 testRunner.And("I sort a record \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
 testRunner.And("my sort order is \"Forward\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1378 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1378.AddRow(new string[] {
                        "rs().row",
                        "are"});
            table1378.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table1378.AddRow(new string[] {
                        "rs().row",
                        "so far"});
            table1378.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table1378.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table1378.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table1378.AddRow(new string[] {
                        "rs().row",
                        "You"});
#line 103
 testRunner.Then("the sorted recordset \"[[rs(*).row]]\"  will be", ((string)(null)), table1378, "Then ");
#line 112
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1379 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table1379.AddRow(new string[] {
                        "[[rs(1).row]] = You",
                        ""});
            table1379.AddRow(new string[] {
                        "[[rs(2).row]] = are",
                        ""});
            table1379.AddRow(new string[] {
                        "[[rs(3).row]] = the",
                        ""});
            table1379.AddRow(new string[] {
                        "[[rs(4).row]] = best",
                        ""});
            table1379.AddRow(new string[] {
                        "[[rs(5).row]] = Warewolf",
                        ""});
            table1379.AddRow(new string[] {
                        "[[rs(6).row]] = user",
                        ""});
            table1379.AddRow(new string[] {
                        "[[rs(7).row]] = so far",
                        "Forward"});
#line 113
 testRunner.And("the debug inputs as", ((string)(null)), table1379, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1380 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1380.AddRow(new string[] {
                        "[[rs(1).row]] = are"});
            table1380.AddRow(new string[] {
                        "[[rs(2).row]] = best"});
            table1380.AddRow(new string[] {
                        "[[rs(3).row]] = so far"});
            table1380.AddRow(new string[] {
                        "[[rs(4).row]] = the"});
            table1380.AddRow(new string[] {
                        "[[rs(5).row]] = user"});
            table1380.AddRow(new string[] {
                        "[[rs(6).row]] = Warewolf"});
            table1380.AddRow(new string[] {
                        "[[rs(7).row]] = You"});
#line 122
 testRunner.And("the debug output as", ((string)(null)), table1380, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset backwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        public virtual void SortARecordsetBackwards()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset backwards", ((string[])(null)));
#line 132
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1381 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1381.AddRow(new string[] {
                        "rs().row",
                        "You"});
            table1381.AddRow(new string[] {
                        "rs().row",
                        "are"});
            table1381.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table1381.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table1381.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table1381.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table1381.AddRow(new string[] {
                        "rs().row",
                        "so far"});
#line 133
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1381, "Given ");
#line 142
 testRunner.And("I sort a record \"[[rs(*).row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 143
 testRunner.And("my sort order is \"Backwards\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1382 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1382.AddRow(new string[] {
                        "rs().row",
                        "You"});
            table1382.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table1382.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table1382.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table1382.AddRow(new string[] {
                        "rs().row",
                        "so far"});
            table1382.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table1382.AddRow(new string[] {
                        "rs().row",
                        "are"});
#line 145
 testRunner.Then("the sorted recordset \"[[rs(*).row]]\"  will be", ((string)(null)), table1382, "Then ");
#line 154
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1383 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table1383.AddRow(new string[] {
                        "[[rs(1).row]] = You",
                        ""});
            table1383.AddRow(new string[] {
                        "[[rs(2).row]] = are",
                        ""});
            table1383.AddRow(new string[] {
                        "[[rs(3).row]] = the",
                        ""});
            table1383.AddRow(new string[] {
                        "[[rs(4).row]] = best",
                        ""});
            table1383.AddRow(new string[] {
                        "[[rs(5).row]] = Warewolf",
                        ""});
            table1383.AddRow(new string[] {
                        "[[rs(6).row]] = user",
                        ""});
            table1383.AddRow(new string[] {
                        "[[rs(7).row]] = so far",
                        "Backwards"});
#line 155
 testRunner.And("the debug inputs as", ((string)(null)), table1383, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1384 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1384.AddRow(new string[] {
                        "[[rs(1).row]] = You"});
            table1384.AddRow(new string[] {
                        "[[rs(2).row]] = Warewolf"});
            table1384.AddRow(new string[] {
                        "[[rs(3).row]] = user"});
            table1384.AddRow(new string[] {
                        "[[rs(4).row]] = the"});
            table1384.AddRow(new string[] {
                        "[[rs(5).row]] = so far"});
            table1384.AddRow(new string[] {
                        "[[rs(6).row]] = best"});
            table1384.AddRow(new string[] {
                        "[[rs(7).row]] = are"});
#line 164
 testRunner.And("the debug output as", ((string)(null)), table1384, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset forwards empty recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        public virtual void SortARecordsetForwardsEmptyRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset forwards empty recordset", ((string[])(null)));
#line 174
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1385 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
#line 175
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1385, "Given ");
#line 177
 testRunner.And("I sort a record \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
 testRunner.And("my sort order is \"Forward\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 180
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset backwards empty recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        public virtual void SortARecordsetBackwardsEmptyRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset backwards empty recordset", ((string[])(null)));
#line 183
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1386 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
#line 184
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1386, "Given ");
#line 186
 testRunner.And("I sort a record \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 187
 testRunner.And("my sort order is \"Backwards\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 188
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 189
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset forwards with one row")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        public virtual void SortARecordsetForwardsWithOneRow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset forwards with one row", ((string[])(null)));
#line 191
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1387 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1387.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
#line 192
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1387, "Given ");
#line 195
 testRunner.And("I sort a record \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 196
 testRunner.And("my sort order is \"Forward\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 197
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1388 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1388.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
#line 198
 testRunner.Then("the sorted recordset \"[[rs(*).row]]\"  will be", ((string)(null)), table1388, "Then ");
#line 201
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1389 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table1389.AddRow(new string[] {
                        "[[rs(1).row]] = Warewolf",
                        "Forward"});
#line 202
 testRunner.And("the debug inputs as", ((string)(null)), table1389, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1390 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1390.AddRow(new string[] {
                        "[[rs(1).row]] = Warewolf"});
#line 205
 testRunner.And("the debug output as", ((string)(null)), table1390, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset backwards recordset  with one row")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        public virtual void SortARecordsetBackwardsRecordsetWithOneRow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset backwards recordset  with one row", ((string[])(null)));
#line 209
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1391 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1391.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
#line 210
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1391, "Given ");
#line 213
 testRunner.And("I sort a record \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 214
 testRunner.And("my sort order is \"Backwards\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 215
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1392 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1392.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
#line 216
 testRunner.Then("the sorted recordset \"[[rs(*).row]]\"  will be", ((string)(null)), table1392, "Then ");
#line 219
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1393 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table1393.AddRow(new string[] {
                        "[[rs(1).row]] = Warewolf",
                        "Backwards"});
#line 220
 testRunner.And("the debug inputs as", ((string)(null)), table1393, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1394 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1394.AddRow(new string[] {
                        "[[rs(1).row]] = Warewolf"});
#line 223
 testRunner.And("the debug output as", ((string)(null)), table1394, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void Sort2ColumnsBackwards(string input, string direction, string error, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort 2 columns backwards", exampleTags);
#line 227
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1395 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1395.AddRow(new string[] {
                        "rs().a",
                        "Zambia"});
            table1395.AddRow(new string[] {
                        "rs().a",
                        "Mangolia"});
            table1395.AddRow(new string[] {
                        "rs().a",
                        "America"});
            table1395.AddRow(new string[] {
                        "rs().a",
                        "Australia"});
#line 228
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1395, "Given ");
#line 234
 testRunner.And(string.Format("I sort a record \"{0}\"", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 235
 testRunner.And(string.Format("my sort order is \"{0}\"", direction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 237
 testRunner.Then(string.Format("the execution has \"{0}\" error", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards: Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[rs(*).a]],[[rs(*).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Backwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant0()
        {
            this.Sort2ColumnsBackwards("[[rs(*).a]],[[rs(*).a]]", "Backwards", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards: Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[rs(*).a]],[[rs(*).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant1()
        {
            this.Sort2ColumnsBackwards("[[rs(*).a]],[[rs(*).a]]", "Forward", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards: Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[rs(*)]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Backwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant2()
        {
            this.Sort2ColumnsBackwards("[[rs(*)]]", "Backwards", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards: Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[rs(*)]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant3()
        {
            this.Sort2ColumnsBackwards("[[rs(*)]]", "Forward", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards: Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[va]] = tree")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant4()
        {
            this.Sort2ColumnsBackwards("[[va]] = tree", "Forward", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards: Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant5()
        {
            this.Sort2ColumnsBackwards("\"\"", "Forward", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards: Variant 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "asdas")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant6()
        {
            this.Sort2ColumnsBackwards("asdas", "Forward", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards: Variant 7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "99")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant7()
        {
            this.Sort2ColumnsBackwards("99", "Forward", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards: Variant 8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant8()
        {
            this.Sort2ColumnsBackwards("[[a]]", "Forward", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
#line hidden
        }
        
        public virtual void SortRecordset(string input, string direction, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort recordset", exampleTags);
#line 250
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1396 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1396.AddRow(new string[] {
                        "rs().a",
                        "Zambia"});
            table1396.AddRow(new string[] {
                        "rs().a",
                        "Mangolia"});
            table1396.AddRow(new string[] {
                        "rs().a",
                        "America"});
            table1396.AddRow(new string[] {
                        "rs().a",
                        "Australia"});
#line 251
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1396, "Given ");
#line 257
 testRunner.And(string.Format("I sort a record \"{0}\"", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 258
 testRunner.And(string.Format("my sort order is \"{0}\"", direction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 259
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 260
 testRunner.Then("the execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort recordset: [[rs(1).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "[[rs(1).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[rs(1).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:result", "Mongolia,Zambia")]
        public virtual void SortRecordset_Rs1_A()
        {
            this.SortRecordset("[[rs(1).a]]", "Forward", "Mongolia,Zambia", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort Recordset without field Forwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        public virtual void SortRecordsetWithoutFieldForwards()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort Recordset without field Forwards", ((string[])(null)));
#line 265
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1397 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1397.AddRow(new string[] {
                        "rs(1).a",
                        "Zambia"});
            table1397.AddRow(new string[] {
                        "rec(1).a",
                        "Mangolia"});
            table1397.AddRow(new string[] {
                        "rs(2).a",
                        "America"});
            table1397.AddRow(new string[] {
                        "rec(2).a",
                        "Australia"});
#line 266
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1397, "Given ");
#line 272
 testRunner.And("I sort a record \"[[rs(*)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 273
 testRunner.And("my sort order is \"Forward\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 274
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 275
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort Null Recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        public virtual void SortNullRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort Null Recordset", ((string[])(null)));
#line 278
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1398 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1398.AddRow(new string[] {
                        "[[rs().a]]",
                        "NULL"});
#line 279
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table1398, "Given ");
#line 282
 testRunner.And("I sort a record \"[[rs(*).a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 283
 testRunner.And("my sort order is \"Backwards\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 284
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 285
 testRunner.Then("the execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort non existent Recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        public virtual void SortNonExistentRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort non existent Recordset", ((string[])(null)));
#line 288
 this.ScenarioSetup(scenarioInfo);
#line 289
 testRunner.Given("I sort a record \"[[rs(*)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 290
 testRunner.And("my sort order is \"Backwards\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 291
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 292
 testRunner.Then("the execution has \"An\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
