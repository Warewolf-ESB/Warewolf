// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.ToolsSpecs.Toolbox.Recordset.DeleteNullHandler
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DeleteFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Delete.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Delete", "\tIn order to delete records\r\n\tAs a Warewolf user\r\n\tI want a tool that takes a rec" +
                    "ord set and deletes it", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Delete")))
            {
                Warewolf.ToolsSpecs.Toolbox.Recordset.DeleteNullHandler.DeleteFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("this feature", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.Then("activity is DsfCountRecordsetNullHandlerActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete last record in a recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Delete")]
        public virtual void DeleteLastRecordInARecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete last record in a recordset", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table948 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table948.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table948.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table948.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 11
 testRunner.Given("I have the following recordset", ((string)(null)), table948, "Given ");
#line 16
 testRunner.And("I delete a record \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.When("the delete tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then("the delete result should be \"Success\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table949 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table949.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table949.AddRow(new string[] {
                        "rs().row",
                        "2"});
#line 19
 testRunner.And("the recordset \"[[rs(*).row]]\" will be as follows", ((string)(null)), table949, "And ");
#line 23
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table950 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table950.AddRow(new string[] {
                        "[[rs(3).row]] = 3"});
#line 24
 testRunner.And("the debug inputs as", ((string)(null)), table950, "And ");
#line hidden
            TechTalk.SpecFlow.Table table951 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table951.AddRow(new string[] {
                        "[[result]] = Success"});
#line 27
 testRunner.And("the debug output as", ((string)(null)), table951, "And ");
#line hidden
            TechTalk.SpecFlow.Table table952 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table952.AddRow(new string[] {
                        "[[result]] = Success"});
#line 30
 testRunner.And("the debug output as", ((string)(null)), table952, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete an invalid recordset (recordset with no fields declared)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Delete")]
        public virtual void DeleteAnInvalidRecordsetRecordsetWithNoFieldsDeclared()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete an invalid recordset (recordset with no fields declared)", ((string[])(null)));
#line 34
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table953 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table953.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table953.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table953.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 35
 testRunner.Given("I have the following recordset", ((string)(null)), table953, "Given ");
#line 40
 testRunner.And("I delete a record \"[[GG()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.When("the delete tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
 testRunner.Then("the delete result should be \"Failure\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 43
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table954 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table954.AddRow(new string[] {
                        "[[GG()]] ="});
#line 44
 testRunner.And("the debug inputs as", ((string)(null)), table954, "And ");
#line hidden
            TechTalk.SpecFlow.Table table955 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table955.AddRow(new string[] {
                        "[[result]] = Failure"});
#line 47
 testRunner.And("the debug output as", ((string)(null)), table955, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete the first record in a recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Delete")]
        public virtual void DeleteTheFirstRecordInARecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete the first record in a recordset", ((string[])(null)));
#line 51
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table956 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table956.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table956.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table956.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 52
 testRunner.Given("I have the following recordset", ((string)(null)), table956, "Given ");
#line 57
 testRunner.And("I delete a record \"[[rs(1)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
 testRunner.When("the delete tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
 testRunner.Then("the delete result should be \"Success\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table957 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table957.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table957.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 60
 testRunner.And("the recordset \"[[rs(*).row]]\" will be as follows", ((string)(null)), table957, "And ");
#line 64
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table958 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table958.AddRow(new string[] {
                        "[[rs(1).row]] = 1"});
#line 65
 testRunner.And("the debug inputs as", ((string)(null)), table958, "And ");
#line hidden
            TechTalk.SpecFlow.Table table959 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table959.AddRow(new string[] {
                        "[[result]] = Success"});
#line 68
 testRunner.And("the debug output as", ((string)(null)), table959, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete a record using an index from a variable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Delete")]
        public virtual void DeleteARecordUsingAnIndexFromAVariable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a record using an index from a variable", ((string[])(null)));
#line 72
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table960 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table960.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table960.AddRow(new string[] {
                        "rs().row",
                        "6"});
            table960.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 73
 testRunner.Given("I have the following recordset", ((string)(null)), table960, "Given ");
#line 78
 testRunner.And("an index \"[[index]]\" exists with a value \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
 testRunner.And("I delete a record \"[[rs([[index]])]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
 testRunner.When("the delete tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 81
 testRunner.Then("the delete result should be \"Success\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table961 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table961.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table961.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 82
 testRunner.And("the recordset \"[[rs(*).row]]\" will be as follows", ((string)(null)), table961, "And ");
#line 86
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table962 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table962.AddRow(new string[] {
                        "[[rs(2).row]] = 6"});
#line 87
 testRunner.And("the debug inputs as", ((string)(null)), table962, "And ");
#line hidden
            TechTalk.SpecFlow.Table table963 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table963.AddRow(new string[] {
                        "[[result]] = Success"});
#line 90
 testRunner.And("the debug output as", ((string)(null)), table963, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete a record using a star notation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Delete")]
        public virtual void DeleteARecordUsingAStarNotation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a record using a star notation", ((string[])(null)));
#line 94
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table964 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table964.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table964.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table964.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 95
 testRunner.Given("I have the following recordset", ((string)(null)), table964, "Given ");
#line 100
 testRunner.And("I delete a record \"[[rs(*)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
 testRunner.When("the delete tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 102
 testRunner.Then("the delete result should be \"Success\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table965 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
#line 103
 testRunner.And("the recordset \"[[rs(*).row]]\" will be as follows", ((string)(null)), table965, "And ");
#line 105
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table966 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table966.AddRow(new string[] {
                        "[[rs(1).row]] = 1"});
            table966.AddRow(new string[] {
                        "[[rs(2).row]] = 2"});
            table966.AddRow(new string[] {
                        "[[rs(3).row]] = 3"});
#line 106
 testRunner.And("the debug inputs as", ((string)(null)), table966, "And ");
#line hidden
            TechTalk.SpecFlow.Table table967 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table967.AddRow(new string[] {
                        "[[result]] = Success"});
#line 111
 testRunner.And("the debug output as", ((string)(null)), table967, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete a record using a negative integer -1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Delete")]
        public virtual void DeleteARecordUsingANegativeInteger_1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a record using a negative integer -1", ((string[])(null)));
#line 115
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table968 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table968.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table968.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table968.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 116
 testRunner.Given("I have the following recordset", ((string)(null)), table968, "Given ");
#line 121
 testRunner.And("I delete a record \"[[rs(-1)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.When("the delete tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 123
 testRunner.Then("the delete result should be \"Failure\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table969 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table969.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table969.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table969.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 124
 testRunner.And("the recordset \"[[rs(*).row]]\" will be as follows", ((string)(null)), table969, "And ");
#line 129
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table970 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table970.AddRow(new string[] {
                        "[[rs(-1)]]  ="});
#line 130
 testRunner.And("the debug inputs as", ((string)(null)), table970, "And ");
#line hidden
            TechTalk.SpecFlow.Table table971 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table971.AddRow(new string[] {
                        "[[result]] = Failure"});
#line 133
 testRunner.And("the debug output as", ((string)(null)), table971, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete a record that does not exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Delete")]
        public virtual void DeleteARecordThatDoesNotExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a record that does not exist", ((string[])(null)));
#line 137
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table972 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table972.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table972.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table972.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 138
 testRunner.Given("I have the following recordset", ((string)(null)), table972, "Given ");
#line 143
 testRunner.And("I delete a record \"[[rs(5)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
 testRunner.When("the delete tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 145
 testRunner.Then("the delete result should be \"Failure\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table973 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table973.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table973.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table973.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 146
 testRunner.And("the recordset \"[[rs(*).row]]\" will be as follows", ((string)(null)), table973, "And ");
#line 151
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table974 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table974.AddRow(new string[] {
                        "[[rs(5)]]  ="});
#line 152
 testRunner.And("the debug inputs as", ((string)(null)), table974, "And ");
#line hidden
            TechTalk.SpecFlow.Table table975 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table975.AddRow(new string[] {
                        "[[result]] = Failure"});
#line 155
 testRunner.And("the debug output as", ((string)(null)), table975, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete a record an empty recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Delete")]
        public virtual void DeleteARecordAnEmptyRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a record an empty recordset", ((string[])(null)));
#line 159
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table976 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "row"});
#line 160
 testRunner.Given("I have the following recordset", ((string)(null)), table976, "Given ");
#line 162
 testRunner.And("delete treat null as Empty Recordset is not selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
 testRunner.And("I delete a record \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
 testRunner.When("the delete tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 165
 testRunner.Then("the delete result should be \"Failure\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 166
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table977 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table977.AddRow(new string[] {
                        "[[rs()]]  ="});
#line 167
 testRunner.And("the debug inputs as", ((string)(null)), table977, "And ");
#line hidden
            TechTalk.SpecFlow.Table table978 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table978.AddRow(new string[] {
                        "[[result]] = Failure"});
#line 170
 testRunner.And("the debug output as", ((string)(null)), table978, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete a record With An Empty Recordset And Null Check Selected")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Delete")]
        public virtual void DeleteARecordWithAnEmptyRecordsetAndNullCheckSelected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a record With An Empty Recordset And Null Check Selected", ((string[])(null)));
#line 174
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table979 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "row"});
#line 175
 testRunner.Given("I have the following recordset", ((string)(null)), table979, "Given ");
#line 177
 testRunner.And("I delete a record \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
 testRunner.And("Treat Null as Empty Recordset is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
 testRunner.When("the delete tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 180
 testRunner.Then("the delete result should be \"Success\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 181
 testRunner.And("the execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table980 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table980.AddRow(new string[] {
                        "[[rs()]]  ="});
#line 182
 testRunner.And("the debug inputs as", ((string)(null)), table980, "And ");
#line hidden
            TechTalk.SpecFlow.Table table981 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table981.AddRow(new string[] {
                        "[[result]] = Success"});
#line 185
 testRunner.And("the debug output as", ((string)(null)), table981, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete a scalar insted of a recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Delete")]
        public virtual void DeleteAScalarInstedOfARecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a scalar insted of a recordset", ((string[])(null)));
#line 189
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 190
 testRunner.Given("I have a delete variable \"[[var]]\" equal to \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 191
 testRunner.And("I delete a record \"[[var]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 192
 testRunner.When("the delete tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 193
 testRunner.Then("the delete result should be \"Failure\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 194
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table982 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
#line 195
 testRunner.And("the debug inputs as", ((string)(null)), table982, "And ");
#line hidden
            TechTalk.SpecFlow.Table table983 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table983.AddRow(new string[] {
                        "[[result]] = Failure"});
#line 197
 testRunner.And("the debug output as", ((string)(null)), table983, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete two recordset data.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Delete")]
        public virtual void DeleteTwoRecordsetData_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete two recordset data.", ((string[])(null)));
#line 201
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table984 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table984.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table984.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table984.AddRow(new string[] {
                        "ws().row",
                        "3"});
            table984.AddRow(new string[] {
                        "ws().row",
                        "4"});
#line 202
 testRunner.Given("I have the following recordset", ((string)(null)), table984, "Given ");
#line 208
 testRunner.And("I delete a record \"[[rs(*)]],[[ws(*)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 209
 testRunner.When("the delete tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 210
 testRunner.Then("the delete result should be \"Failure\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table985 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "row"});
            table985.AddRow(new string[] {
                        "[[rs(1).row]]",
                        "1"});
            table985.AddRow(new string[] {
                        "[[rs(1).row]]",
                        "2"});
#line 211
 testRunner.And("the recordset \"[[rs(*).row]]\" will be as follows", ((string)(null)), table985, "And ");
#line hidden
            TechTalk.SpecFlow.Table table986 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "row"});
            table986.AddRow(new string[] {
                        "[[ws(1).row]]",
                        "3"});
            table986.AddRow(new string[] {
                        "[[ws(2).row]]",
                        "4"});
#line 215
 testRunner.And("the recordset \"[[ws(*).row]]\" will be as follows", ((string)(null)), table986, "And ");
#line 219
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table987 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
#line 220
 testRunner.And("the debug inputs as", ((string)(null)), table987, "And ");
#line hidden
            TechTalk.SpecFlow.Table table988 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table988.AddRow(new string[] {
                        "[[result]] = Failure"});
#line 222
 testRunner.And("the debug output as", ((string)(null)), table988, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete two specific recordset data.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Delete")]
        public virtual void DeleteTwoSpecificRecordsetData_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete two specific recordset data.", ((string[])(null)));
#line 226
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table989 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table989.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table989.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table989.AddRow(new string[] {
                        "rs().row",
                        "3"});
            table989.AddRow(new string[] {
                        "rs().row",
                        "4"});
#line 227
 testRunner.Given("I have the following recordset", ((string)(null)), table989, "Given ");
#line 233
 testRunner.And("I delete a record \"[[rs(1).a]],[[rs(4).a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 234
 testRunner.When("the delete tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 235
 testRunner.Then("the delete result should be \"Failure\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table990 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "row"});
            table990.AddRow(new string[] {
                        "[[rs().row]]",
                        "1"});
            table990.AddRow(new string[] {
                        "[[rs().row]]",
                        "2"});
            table990.AddRow(new string[] {
                        "[[rs().row]]",
                        "3"});
            table990.AddRow(new string[] {
                        "[[rs().row]]",
                        "4"});
#line 236
 testRunner.And("the recordset \"[[rs(*).row]]\" will be as follows", ((string)(null)), table990, "And ");
#line 242
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table991 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
#line 243
 testRunner.And("the debug inputs as", ((string)(null)), table991, "And ");
#line hidden
            TechTalk.SpecFlow.Table table992 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table992.AddRow(new string[] {
                        "[[result]] = Failure"});
#line 245
 testRunner.And("the debug output as", ((string)(null)), table992, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void EnsureDeleteVariablesOfDifferentTypesProduceDesiredResults(string variable, string value, string error, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ensure delete variables of different types produce desired results", exampleTags);
#line 250
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 251
 testRunner.Given(string.Format("I have a delete variable \"{0}\" equal to \"{1}\"", variable, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 252
 testRunner.And(string.Format("I delete a record \"{0}\"", variable), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 253
 testRunner.When("the delete tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 254
 testRunner.Then(string.Format("the delete result should be \"{0}\"", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table993 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
#line 255
 testRunner.And("the debug inputs as", ((string)(null)), table993, "And ");
#line hidden
            TechTalk.SpecFlow.Table table994 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table994.AddRow(new string[] {
                        "[[result]] = Failure"});
#line 257
 testRunner.And("the debug output as", ((string)(null)), table994, "And ");
#line 260
 testRunner.And(string.Format("the execution has \"{0}\" error", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure delete variables of different types produce desired results: \"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Delete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:variable", "\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Error", "An")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Message", "Failure")]
        public virtual void EnsureDeleteVariablesOfDifferentTypesProduceDesiredResults_()
        {
            this.EnsureDeleteVariablesOfDifferentTypesProduceDesiredResults("\"\"", "\"\"", "An", "Failure", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure delete variables of different types produce desired results: 99")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Delete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "99")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:variable", "99")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "99")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Error", "An")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Message", "Failure")]
        public virtual void EnsureDeleteVariablesOfDifferentTypesProduceDesiredResults_99()
        {
            this.EnsureDeleteVariablesOfDifferentTypesProduceDesiredResults("99", "99", "An", "Failure", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure delete variables of different types produce desired results: [[q]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Delete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "[[q]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:variable", "[[q]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Error", "An")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Message", "Failure")]
        public virtual void EnsureDeleteVariablesOfDifferentTypesProduceDesiredResults_Q()
        {
            this.EnsureDeleteVariablesOfDifferentTypesProduceDesiredResults("[[q]]", "", "An", "Failure", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure delete variables of different types produce desired results: Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Delete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:variable", "Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Error", "An")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Message", "Failure")]
        public virtual void EnsureDeleteVariablesOfDifferentTypesProduceDesiredResults_Test()
        {
            this.EnsureDeleteVariablesOfDifferentTypesProduceDesiredResults("Test", "Test", "An", "Failure", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure delete variables of different types produce desired results: [[Rec([[var]]" +
            ").set]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Delete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "[[Rec([[var]]).set]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:variable", "[[Rec([[var]]).set]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Error", "An")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Message", "Failure")]
        public virtual void EnsureDeleteVariablesOfDifferentTypesProduceDesiredResults_RecVar_Set()
        {
            this.EnsureDeleteVariablesOfDifferentTypesProduceDesiredResults("[[Rec([[var]]).set]]", "", "An", "Failure", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
