// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.ToolsSpecs.Toolbox.Recordset.FindRecordIndexMultiple
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class FindRecordsetIndexMultipleFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "FindRecordsetIndexMultiple.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FindRecordsetIndexMultiple", "\tIn order to search for pieces of data in a recordset\r\n\tAs a Warewolf user\r\n\tI wa" +
                    "nt a tool I can use to find an index ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "FindRecordsetIndexMultiple")))
            {
                Warewolf.ToolsSpecs.Toolbox.Recordset.FindRecordIndexMultiple.FindRecordsetIndexMultipleFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Is Between numeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetWithIsBetweenNumeric()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Is Between numeric", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1039 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1039.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table1039.AddRow(new string[] {
                        "rs().field",
                        "15"});
            table1039.AddRow(new string[] {
                        "rs().field",
                        "20"});
            table1039.AddRow(new string[] {
                        "rs().field",
                        "34"});
#line 7
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1039, "Given ");
#line 13
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"16\" and \"" +
                    "33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("the find records index multiple result should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 17
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1040 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1040.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1040.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 15",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1040.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 20",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1040.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 34",
                        "1",
                        "Is Between",
                        "",
                        "16",
                        "33",
                        "NO",
                        "NO"});
#line 18
 testRunner.And("the debug inputs as", ((string)(null)), table1040, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1041 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1041.AddRow(new string[] {
                        "[[result]] = 3"});
#line 24
 testRunner.And("the debug output as", ((string)(null)), table1041, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in an empty recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInAnEmptyRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in an empty recordset", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1042 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1042.AddRow(new string[] {
                        "",
                        ""});
#line 29
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1042, "Given ");
#line 32
 testRunner.And("field to search is \"[[rs().value]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"16\" and \"" +
                    "33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
 testRunner.Then("the find records index multiple result should be \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 36
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1043 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1043.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(*).value]] =",
                        "1",
                        "Is Between",
                        "",
                        "16",
                        "33",
                        "NO",
                        "NO"});
#line 37
 testRunner.And("the debug inputs as", ((string)(null)), table1043, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1044 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1044.AddRow(new string[] {
                        "[[result]] = -1"});
#line 40
 testRunner.And("the debug output as", ((string)(null)), table1044, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with a blank from")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetWithABlankFrom()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with a blank from", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1045 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1045.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table1045.AddRow(new string[] {
                        "rs().field",
                        "15"});
            table1045.AddRow(new string[] {
                        "rs().field",
                        "20"});
            table1045.AddRow(new string[] {
                        "rs().field",
                        "34"});
#line 45
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1045, "Given ");
#line 51
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"\" and \"33" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
 testRunner.Then("the find records index multiple result should be \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 55
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1046 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1046.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1046.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 15",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1046.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 20",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1046.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 34",
                        "1",
                        "Is Between",
                        "",
                        "\" \"",
                        "33",
                        "NO",
                        "NO"});
#line 56
 testRunner.And("the debug inputs as", ((string)(null)), table1046, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1047 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1047.AddRow(new string[] {
                        "[[result]] = -1"});
#line 62
 testRunner.And("the debug output as", ((string)(null)), table1047, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with blank to")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetWithBlankTo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with blank to", ((string[])(null)));
#line 66
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1048 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1048.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table1048.AddRow(new string[] {
                        "rs().field",
                        "15"});
            table1048.AddRow(new string[] {
                        "rs().field",
                        "20"});
            table1048.AddRow(new string[] {
                        "rs().field",
                        "34"});
#line 67
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1048, "Given ");
#line 73
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"16\" and \"" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
 testRunner.Then("the find records index multiple result should be \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 77
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1049 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1049.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1049.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 15",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1049.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 20",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1049.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 34",
                        "1",
                        "Is Between",
                        "",
                        "16",
                        "\" \"",
                        "NO",
                        "NO"});
#line 78
 testRunner.And("the debug inputs as", ((string)(null)), table1049, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1050 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1050.AddRow(new string[] {
                        "[[result]] = -1"});
#line 84
 testRunner.And("the debug output as", ((string)(null)), table1050, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Is Between DateTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetWithIsBetweenDateTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Is Between DateTime", ((string[])(null)));
#line 88
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1051 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1051.AddRow(new string[] {
                        "rs().field",
                        "5/3/2013"});
            table1051.AddRow(new string[] {
                        "rs().field",
                        "2/3/2013"});
            table1051.AddRow(new string[] {
                        "rs().field",
                        "7/4/2013"});
            table1051.AddRow(new string[] {
                        "rs().field",
                        "11/11/2012"});
#line 89
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1051, "Given ");
#line 95
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"1/3/2013\"" +
                    " and \"3/3/2013\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 98
 testRunner.Then("the find records index multiple result should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 99
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1052 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1052.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 5/3/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1052.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 2/3/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1052.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 7/4/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1052.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 11/11/2012",
                        "1",
                        "Is Between",
                        "",
                        "1/3/2013",
                        "3/3/2013",
                        "NO",
                        "NO"});
#line 100
 testRunner.And("the debug inputs as", ((string)(null)), table1052, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1053 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1053.AddRow(new string[] {
                        "[[result]] = 2"});
#line 106
 testRunner.And("the debug output as", ((string)(null)), table1053, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Is Base64")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetWithIsBase64()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Is Base64", ((string[])(null)));
#line 110
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1054 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1054.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1054.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1054.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1054.AddRow(new string[] {
                        "rs().field",
                        "d2FyZXdvbGY="});
#line 111
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1054, "Given ");
#line 117
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 118
 testRunner.And("search the recordset with type \"Is Base64\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 119
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 120
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 121
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1055 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1055.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1055.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1055.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1055.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = d2FyZXdvbGY=",
                        "1",
                        "Is Base64",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 122
 testRunner.And("the debug inputs as", ((string)(null)), table1055, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1056 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1056.AddRow(new string[] {
                        "[[result]] = 4"});
#line 128
 testRunner.And("the debug output as", ((string)(null)), table1056, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Is Binary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetWithIsBinary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Is Binary", ((string[])(null)));
#line 132
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1057 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1057.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1057.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1057.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1057.AddRow(new string[] {
                        "rs().field",
                        "101011110010"});
#line 133
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1057, "Given ");
#line 139
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
 testRunner.And("search the recordset with type \"Is Binary\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 142
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 143
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1058 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1058.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1058.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1058.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1058.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 101011110010",
                        "1",
                        "Is Binary",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 144
 testRunner.And("the debug inputs as", ((string)(null)), table1058, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1059 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1059.AddRow(new string[] {
                        "[[result]] = 4"});
#line 150
 testRunner.And("the debug output as", ((string)(null)), table1059, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Is Hex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetWithIsHex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Is Hex", ((string[])(null)));
#line 154
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1060 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1060.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1060.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1060.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1060.AddRow(new string[] {
                        "rs().field",
                        "77617265776f6c66"});
#line 155
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1060, "Given ");
#line 161
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 162
 testRunner.And("search the recordset with type \"Is Hex\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 164
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 165
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1061 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1061.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1061.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1061.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1061.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 77617265776f6c66",
                        "1",
                        "Is Hex",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 166
 testRunner.And("the debug inputs as", ((string)(null)), table1061, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1062 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1062.AddRow(new string[] {
                        "[[result]] = 4"});
#line 172
 testRunner.And("the debug output as", ((string)(null)), table1062, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Base64")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotBase64()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Base64", ((string[])(null)));
#line 176
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1063 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1063.AddRow(new string[] {
                        "rs().field",
                        "d2FyZXdvbGY="});
            table1063.AddRow(new string[] {
                        "rs().field",
                        "d2FyZXdvbGY="});
            table1063.AddRow(new string[] {
                        "rs().field",
                        "d2FyZXdvbGY="});
            table1063.AddRow(new string[] {
                        "rs().field",
                        "You"});
#line 177
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1063, "Given ");
#line 183
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 184
 testRunner.And("search the recordset with type \"Not Base64\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 185
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 186
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 187
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1064 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1064.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = d2FyZXdvbGY=",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1064.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = d2FyZXdvbGY=",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1064.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = d2FyZXdvbGY=",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1064.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = You",
                        "1",
                        "Not Base64",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 188
 testRunner.And("the debug inputs as", ((string)(null)), table1064, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1065 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1065.AddRow(new string[] {
                        "[[result]] = 4"});
#line 194
 testRunner.And("the debug output as", ((string)(null)), table1065, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Between DateTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotBetweenDateTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Between DateTime", ((string[])(null)));
#line 198
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1066 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1066.AddRow(new string[] {
                        "rs().field",
                        "2/3/2013"});
            table1066.AddRow(new string[] {
                        "rs().field",
                        "7/3/2013"});
            table1066.AddRow(new string[] {
                        "rs().field",
                        "2/3/2013"});
            table1066.AddRow(new string[] {
                        "rs().field",
                        "2/3/2013"});
#line 199
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1066, "Given ");
#line 205
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 206
 testRunner.And("is between search the recordset with type \"Not Between\" and criteria is \"1/3/2013" +
                    "\" and \"3/3/2013\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 207
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 208
 testRunner.Then("the find records index multiple result should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 209
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1067 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1067.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 2/3/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1067.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 7/3/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1067.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 2/3/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1067.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 2/3/2013",
                        "1",
                        "Not Between",
                        "",
                        "1/3/2013",
                        "3/3/2013",
                        "NO",
                        "NO"});
#line 210
 testRunner.And("the debug inputs as", ((string)(null)), table1067, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1068 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1068.AddRow(new string[] {
                        "[[result]] = 2"});
#line 216
 testRunner.And("the debug output as", ((string)(null)), table1068, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Between numeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotBetweenNumeric()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Between numeric", ((string[])(null)));
#line 220
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1069 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1069.AddRow(new string[] {
                        "rs().field",
                        "17"});
            table1069.AddRow(new string[] {
                        "rs().field",
                        "22"});
            table1069.AddRow(new string[] {
                        "rs().field",
                        "400"});
            table1069.AddRow(new string[] {
                        "rs().field",
                        "31"});
#line 221
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1069, "Given ");
#line 227
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 228
 testRunner.And("is between search the recordset with type \"Not Between\" and criteria is \"16\" and " +
                    "\"33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 229
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 230
 testRunner.Then("the find records index multiple result should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 231
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1070 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1070.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 17",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1070.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 22",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1070.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 400",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1070.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 31",
                        "1",
                        "Not Between",
                        "",
                        "16",
                        "33",
                        "NO",
                        "NO"});
#line 232
 testRunner.And("the debug inputs as", ((string)(null)), table1070, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1071 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1071.AddRow(new string[] {
                        "[[result]] = 3"});
#line 238
 testRunner.And("the debug output as", ((string)(null)), table1071, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Binary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotBinary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Binary", ((string[])(null)));
#line 242
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1072 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1072.AddRow(new string[] {
                        "rs().field",
                        "101011110010"});
            table1072.AddRow(new string[] {
                        "rs().field",
                        "101011110010"});
            table1072.AddRow(new string[] {
                        "rs().field",
                        "101011110010"});
            table1072.AddRow(new string[] {
                        "rs().field",
                        "warewolf"});
#line 243
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1072, "Given ");
#line 249
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 250
 testRunner.And("search the recordset with type \"Not Binary\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 251
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 252
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 253
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1073 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1073.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 101011110010",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1073.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 101011110010",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1073.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 101011110010",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1073.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = warewolf",
                        "1",
                        "Not Binary",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 254
 testRunner.And("the debug inputs as", ((string)(null)), table1073, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1074 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1074.AddRow(new string[] {
                        "[[result]] = 4"});
#line 260
 testRunner.And("the debug output as", ((string)(null)), table1074, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Hex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotHex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Hex", ((string[])(null)));
#line 264
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1075 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1075.AddRow(new string[] {
                        "rs().field",
                        "77617265776f6c66"});
            table1075.AddRow(new string[] {
                        "rs().field",
                        "77617265776f6c66"});
            table1075.AddRow(new string[] {
                        "rs().field",
                        "77617265776f6c66"});
            table1075.AddRow(new string[] {
                        "rs().field",
                        "warewolf"});
#line 265
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1075, "Given ");
#line 271
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 272
 testRunner.And("search the recordset with type \"Not Hex\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 273
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 274
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 275
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1076 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1076.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 77617265776f6c66",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1076.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 77617265776f6c66",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1076.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 77617265776f6c66",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1076.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = warewolf",
                        "1",
                        "Not Hex",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 276
 testRunner.And("the debug inputs as", ((string)(null)), table1076, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1077 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1077.AddRow(new string[] {
                        "[[result]] = 4"});
#line 282
 testRunner.And("the debug output as", ((string)(null)), table1077, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Not Regex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetWithNotRegex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Not Regex", ((string[])(null)));
#line 286
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1078 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1078.AddRow(new string[] {
                        "rs().field",
                        "999.999.999.999"});
            table1078.AddRow(new string[] {
                        "rs().field",
                        "999.999.999.999"});
            table1078.AddRow(new string[] {
                        "rs().field",
                        "999.999.999.999"});
            table1078.AddRow(new string[] {
                        "rs().field",
                        "warewolf"});
#line 287
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1078, "Given ");
#line 293
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 294
 testRunner.And("search the recordset with type \"Not Regex\" and criteria is \"\\b\\d{1,3}\\.\\d{1,3}\\.\\" +
                    "d{1,3}\\.\\d{1,3}\\b\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 295
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 296
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 297
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1079 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1079.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 999.999.999.999",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1079.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 999.999.999.999",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1079.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 999.999.999.999",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1079.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = warewolf",
                        "1",
                        "Not Regex",
                        "\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 298
 testRunner.And("the debug inputs as", ((string)(null)), table1079, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1080 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1080.AddRow(new string[] {
                        "[[result]] = 4"});
#line 304
 testRunner.And("the debug output as", ((string)(null)), table1080, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Doesn\"t Start With")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetWithDoesnTStartWith()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Doesn\"t Start With", ((string[])(null)));
#line 308
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1081 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1081.AddRow(new string[] {
                        "rs().field",
                        "what"});
            table1081.AddRow(new string[] {
                        "rs().field",
                        "why"});
            table1081.AddRow(new string[] {
                        "rs().field",
                        "yay"});
#line 309
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1081, "Given ");
#line 314
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 315
 testRunner.And("search the recordset with type \"Doesn\'t Start With\" and criteria is \"w\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 316
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 317
 testRunner.Then("the find records index multiple result should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 318
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1082 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1082.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = what",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1082.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = why",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1082.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = yay",
                        "1",
                        "Doesn\'t Start With",
                        "w",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 319
 testRunner.And("the debug inputs as", ((string)(null)), table1082, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1083 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1083.AddRow(new string[] {
                        "[[result]] = 3"});
#line 324
 testRunner.And("the debug output as", ((string)(null)), table1083, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset with Doesn\"t End With")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetWithDoesnTEndWith()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset with Doesn\"t End With", ((string[])(null)));
#line 328
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1084 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1084.AddRow(new string[] {
                        "rs().field",
                        "arev"});
            table1084.AddRow(new string[] {
                        "rs().field",
                        "v"});
            table1084.AddRow(new string[] {
                        "rs().field",
                        "modev"});
            table1084.AddRow(new string[] {
                        "rs().field",
                        "yay"});
#line 329
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1084, "Given ");
#line 335
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 336
 testRunner.And("search the recordset with type \"Doesn\'t End With\" and criteria is \"v\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 337
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 338
 testRunner.Then("the find records index multiple result should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 339
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1085 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1085.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = arev",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1085.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = v",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1085.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = modev",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1085.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = yay",
                        "1",
                        "Doesn\'t End With",
                        "v",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 340
 testRunner.And("the debug inputs as", ((string)(null)), table1085, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1086 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1086.AddRow(new string[] {
                        "[[result]] = 4"});
#line 346
 testRunner.And("the debug output as", ((string)(null)), table1086, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Equal To")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEqualTo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Equal To", ((string[])(null)));
#line 350
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1087 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1087.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1087.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1087.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1087.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1087.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1087.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 351
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1087, "Given ");
#line 359
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 360
 testRunner.And("search the recordset with type \"=\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 361
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 362
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 363
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1088 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1088.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1088.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1088.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1088.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1088.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1088.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "=",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 364
 testRunner.And("the debug inputs as", ((string)(null)), table1088, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1089 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1089.AddRow(new string[] {
                        "[[result]] = 5"});
#line 372
 testRunner.And("the debug output as", ((string)(null)), table1089, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Equal To multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEqualToMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Equal To multiple results", ((string[])(null)));
#line 376
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1090 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1090.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1090.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1090.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1090.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1090.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1090.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1090.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 377
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1090, "Given ");
#line 386
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 387
 testRunner.And("search the recordset with type \"=\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 388
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 389
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 390
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1091 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1091.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1091.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1091.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1091.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1091.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1091.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1091.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "=",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 391
 testRunner.And("the debug inputs as", ((string)(null)), table1091, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1092 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1092.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 400
 testRunner.And("the debug output as", ((string)(null)), table1092, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Equal To result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEqualToResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Equal To result doesnt exist", ((string[])(null)));
#line 404
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1093 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1093.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1093.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1093.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1093.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1093.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1093.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 405
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1093, "Given ");
#line 413
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 414
 testRunner.And("search the recordset with type \"=\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 415
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 416
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 417
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1094 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1094.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1094.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1094.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1094.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1094.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1094.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "=",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 418
 testRunner.And("the debug inputs as", ((string)(null)), table1094, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1095 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1095.AddRow(new string[] {
                        "[[result]] = -1"});
#line 426
 testRunner.And("the debug output as", ((string)(null)), table1095, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Than")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterThan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Than", ((string[])(null)));
#line 430
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1096 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1096.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table1096.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1096.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1096.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1096.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1096.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 431
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1096, "Given ");
#line 439
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 440
 testRunner.And("search the recordset with type \">\" and criteria is \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 441
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 442
 testRunner.Then("the find records index multiple result should be 1,2,3,5,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 443
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1097 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1097.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1097.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1097.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1097.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1097.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1097.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        ">",
                        "3",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 444
 testRunner.And("the debug inputs as", ((string)(null)), table1097, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1098 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1098.AddRow(new string[] {
                        "[[result]] = 1,2,3,5,6"});
#line 452
 testRunner.And("the debug output as", ((string)(null)), table1098, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Than multiple results" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterThanMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Than multiple results" +
                    "", ((string[])(null)));
#line 456
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1099 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1099.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table1099.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1099.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1099.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1099.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1099.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1099.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 457
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1099, "Given ");
#line 466
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 467
 testRunner.And("search the recordset with type \">\" and criteria is \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 468
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 469
 testRunner.Then("the find records index multiple result should be 1,2,3,4,5,7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 470
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1100 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1100.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1100.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1100.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1100.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1100.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1100.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1100.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        ">",
                        "3",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 471
 testRunner.And("the debug inputs as", ((string)(null)), table1100, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1101 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1101.AddRow(new string[] {
                        "[[result]] = 1,2,3,4,5,7"});
#line 480
 testRunner.And("the debug output as", ((string)(null)), table1101, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Than result doesnt ex" +
            "ist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterThanResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Than result doesnt ex" +
                    "ist", ((string[])(null)));
#line 484
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1102 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1102.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table1102.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1102.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1102.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1102.AddRow(new string[] {
                        "rs().field",
                        "8"});
            table1102.AddRow(new string[] {
                        "rs().field",
                        "2"});
#line 485
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1102, "Given ");
#line 493
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 494
 testRunner.And("search the recordset with type \">\" and criteria is \"50\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 495
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 496
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 497
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1103 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1103.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1103.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1103.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1103.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1103.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 8",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1103.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 2",
                        "1",
                        ">",
                        "50",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 498
 testRunner.And("the debug inputs as", ((string)(null)), table1103, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1104 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1104.AddRow(new string[] {
                        "[[result]] = -1"});
#line 506
 testRunner.And("the debug output as", ((string)(null)), table1104, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Than")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessThan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Than", ((string[])(null)));
#line 510
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1105 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1105.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table1105.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1105.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1105.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1105.AddRow(new string[] {
                        "rs().field",
                        "8"});
            table1105.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 511
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1105, "Given ");
#line 519
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 520
 testRunner.And("search the recordset with type \"<\" and criteria is \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 521
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 522
 testRunner.Then("the find records index multiple result should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 523
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1106 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1106.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1106.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1106.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1106.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1106.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 8",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1106.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "<",
                        "5",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 524
 testRunner.And("the debug inputs as", ((string)(null)), table1106, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1107 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1107.AddRow(new string[] {
                        "[[result]] = 1"});
#line 532
 testRunner.And("the debug output as", ((string)(null)), table1107, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Than multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessThanMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Than multiple results", ((string[])(null)));
#line 536
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1108 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1108.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table1108.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1108.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1108.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1108.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1108.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1108.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 537
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1108, "Given ");
#line 546
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 547
 testRunner.And("search the recordset with type \"<\" and criteria is \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 548
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 549
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 550
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1109 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1109.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1109.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1109.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1109.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1109.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1109.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1109.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "<",
                        "5",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 551
 testRunner.And("the debug inputs as", ((string)(null)), table1109, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1110 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1110.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 560
 testRunner.And("the debug output as", ((string)(null)), table1110, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Than result doesnt exist" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessThanResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Than result doesnt exist" +
                    "", ((string[])(null)));
#line 564
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1111 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1111.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1111.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1111.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1111.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1111.AddRow(new string[] {
                        "rs().field",
                        "5"});
            table1111.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 565
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1111, "Given ");
#line 573
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 574
 testRunner.And("search the recordset with type \"<\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 575
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 576
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 577
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1112 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1112.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1112.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1112.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1112.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1112.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 5",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1112.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "<",
                        "1",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 578
 testRunner.And("the debug inputs as", ((string)(null)), table1112, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1113 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1113.AddRow(new string[] {
                        "[[result]] = -1"});
#line 586
 testRunner.And("the debug output as", ((string)(null)), table1113, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Equal To")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEqualTo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Equal To", ((string[])(null)));
#line 590
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1114 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1114.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1114.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1114.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1114.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1114.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1114.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
#line 591
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1114, "Given ");
#line 599
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 600
 testRunner.And("search the recordset with type \"<> (Not Equal)\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 601
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 602
 testRunner.Then("the find records index multiple result should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 603
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1115 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1115.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1115.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1115.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1115.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1115.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1115.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "1",
                        "<> (Not Equal)",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 604
 testRunner.And("the debug inputs as", ((string)(null)), table1115, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1116 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1116.AddRow(new string[] {
                        "[[result]] =  1"});
#line 612
 testRunner.And("the debug output as", ((string)(null)), table1116, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Equal To multiple results" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEqualToMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Equal To multiple results" +
                    "", ((string[])(null)));
#line 616
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1117 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1117.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1117.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1117.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1117.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1117.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1117.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 617
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1117, "Given ");
#line 625
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 626
 testRunner.And("search the recordset with type \"<> (Not Equal)\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 627
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 628
 testRunner.Then("the find records index multiple result should be 1,2,3,4,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 629
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1118 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1118.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1118.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1118.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1118.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1118.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1118.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "<> (Not Equal)",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 630
 testRunner.And("the debug inputs as", ((string)(null)), table1118, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1119 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1119.AddRow(new string[] {
                        "[[result]] = 1,2,3,4,6"});
#line 638
 testRunner.And("the debug output as", ((string)(null)), table1119, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Equal To result doesnt ex" +
            "ist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEqualToResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Equal To result doesnt ex" +
                    "ist", ((string[])(null)));
#line 642
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1120 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1120.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table1120.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table1120.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table1120.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table1120.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table1120.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
#line 643
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1120, "Given ");
#line 651
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 652
 testRunner.And("search the recordset with type \"<> (Not Equal)\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 653
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 654
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 655
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1121 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1121.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1121.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1121.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1121.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1121.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1121.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Mars",
                        "1",
                        "<> (Not Equal)",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 656
 testRunner.And("the debug inputs as", ((string)(null)), table1121, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1122 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1122.AddRow(new string[] {
                        "[[result]] = -1"});
#line 664
 testRunner.And("the debug output as", ((string)(null)), table1122, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Or Equal To")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterOrEqualTo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Or Equal To", ((string[])(null)));
#line 668
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1123 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1123.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1123.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1123.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1123.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1123.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table1123.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 669
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1123, "Given ");
#line 677
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 678
 testRunner.And("search the recordset with type \">=\" and criteria is \"4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 679
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 680
 testRunner.Then("the find records index multiple result should be 2,3,4,5,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 681
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1124 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1124.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1124.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1124.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1124.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1124.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1124.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        ">=",
                        "4",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 682
 testRunner.And("the debug inputs as", ((string)(null)), table1124, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1125 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1125.AddRow(new string[] {
                        "[[result]] = 2,3,4,5,6"});
#line 690
 testRunner.And("the debug output as", ((string)(null)), table1125, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Or Equal To multiple " +
            "results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterOrEqualToMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Or Equal To multiple " +
                    "results", ((string[])(null)));
#line 694
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1126 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1126.AddRow(new string[] {
                        "rs().field",
                        "50"});
            table1126.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1126.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1126.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1126.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1126.AddRow(new string[] {
                        "rs().field",
                        "4"});
#line 695
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1126, "Given ");
#line 703
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 704
 testRunner.And("search the recordset with type \">=\" and criteria is \"4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 705
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 706
 testRunner.Then("the find records index multiple result should be 1,2,3,4,5,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 707
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1127 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1127.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 50",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1127.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1127.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1127.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1127.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1127.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 4",
                        "1",
                        ">=",
                        "4",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 708
 testRunner.And("the debug inputs as", ((string)(null)), table1127, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1128 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1128.AddRow(new string[] {
                        "[[result]] = 1,2,3,4,5,6"});
#line 716
 testRunner.And("the debug output as", ((string)(null)), table1128, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Greater Or Equal To result do" +
            "esnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsGreaterOrEqualToResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Greater Or Equal To result do" +
                    "esnt exist", ((string[])(null)));
#line 720
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1129 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1129.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table1129.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1129.AddRow(new string[] {
                        "rs().field",
                        "3"});
            table1129.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table1129.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1129.AddRow(new string[] {
                        "rs().field",
                        "3"});
#line 721
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1129, "Given ");
#line 729
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 730
 testRunner.And("search the recordset with type \">=\" and criteria is \"4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 731
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 732
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 733
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1130 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1130.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1130.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1130.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 3",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1130.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1130.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1130.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 3",
                        "1",
                        ">=",
                        "4",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 734
 testRunner.And("the debug inputs as", ((string)(null)), table1130, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1131 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1131.AddRow(new string[] {
                        "[[result]] = -1"});
#line 742
 testRunner.And("the debug output as", ((string)(null)), table1131, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Or Equal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessOrEqual()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Or Equal", ((string[])(null)));
#line 746
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1132 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1132.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1132.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1132.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1132.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1132.AddRow(new string[] {
                        "rs().field",
                        "aaa"});
            table1132.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 747
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1132, "Given ");
#line 755
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 756
 testRunner.And("search the recordset with type \"<=\" and criteria is \"aaa\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 757
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 758
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 759
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1133 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1133.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1133.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1133.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1133.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1133.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = aaa",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1133.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "<=",
                        "aaa",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 760
 testRunner.And("the debug inputs as", ((string)(null)), table1133, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1134 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1134.AddRow(new string[] {
                        "[[result]] = 5"});
#line 768
 testRunner.And("the debug output as", ((string)(null)), table1134, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Or Equal multiple result" +
            "s")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessOrEqualMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Or Equal multiple result" +
                    "s", ((string[])(null)));
#line 772
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1135 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1135.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table1135.AddRow(new string[] {
                        "rs().field",
                        "7"});
            table1135.AddRow(new string[] {
                        "rs().field",
                        "8"});
            table1135.AddRow(new string[] {
                        "rs().field",
                        "9"});
            table1135.AddRow(new string[] {
                        "rs().field",
                        "10"});
            table1135.AddRow(new string[] {
                        "rs().field",
                        "5"});
#line 773
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1135, "Given ");
#line 781
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 782
 testRunner.And("search the recordset with type \"<=\" and criteria is \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 783
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 784
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 785
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1136 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1136.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1136.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 7",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1136.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 8",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1136.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 9",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1136.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 10",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1136.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 5",
                        "1",
                        "<=",
                        "5",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 786
 testRunner.And("the debug inputs as", ((string)(null)), table1136, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1137 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1137.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 794
 testRunner.And("the debug output as", ((string)(null)), table1137, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Less Or Equal result doesnt e" +
            "xist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsLessOrEqualResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Less Or Equal result doesnt e" +
                    "xist", ((string[])(null)));
#line 798
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1138 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1138.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1138.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1138.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1138.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1138.AddRow(new string[] {
                        "rs().field",
                        "5"});
            table1138.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 799
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1138, "Given ");
#line 807
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 808
 testRunner.And("search the recordset with type \"<=\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 809
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 810
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 811
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1139 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1139.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1139.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1139.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1139.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1139.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 5",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1139.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "<=",
                        "1",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 812
 testRunner.And("the debug inputs as", ((string)(null)), table1139, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1140 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1140.AddRow(new string[] {
                        "[[result]] = -1"});
#line 820
 testRunner.And("the debug output as", ((string)(null)), table1140, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Starts With")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsStartsWith()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Starts With", ((string[])(null)));
#line 824
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1141 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1141.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1141.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1141.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1141.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1141.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1141.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 825
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1141, "Given ");
#line 833
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 834
 testRunner.And("search the recordset with type \"Starts With\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 835
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 836
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 837
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1142 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1142.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1142.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1142.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1142.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1142.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1142.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Starts With",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 838
 testRunner.And("the debug inputs as", ((string)(null)), table1142, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1143 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1143.AddRow(new string[] {
                        "[[result]] = 5"});
#line 846
 testRunner.And("the debug output as", ((string)(null)), table1143, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Starts With multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsStartsWithMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Starts With multiple results", ((string[])(null)));
#line 850
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1144 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1144.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1144.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1144.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1144.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1144.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1144.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1144.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 851
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1144, "Given ");
#line 860
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 861
 testRunner.And("search the recordset with type \"Starts With\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 862
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 863
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 864
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1145 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1145.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1145.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1145.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1145.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1145.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1145.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1145.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Starts With",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 865
 testRunner.And("the debug inputs as", ((string)(null)), table1145, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1146 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1146.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 874
 testRunner.And("the debug output as", ((string)(null)), table1146, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Starts With result doesnt exi" +
            "st")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsStartsWithResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Starts With result doesnt exi" +
                    "st", ((string[])(null)));
#line 878
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1147 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1147.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1147.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1147.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1147.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1147.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1147.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 879
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1147, "Given ");
#line 887
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 888
 testRunner.And("search the recordset with type \"Starts With\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 889
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 890
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 891
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1148 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1148.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1148.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1148.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1148.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1148.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1148.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Starts With",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 892
 testRunner.And("the debug inputs as", ((string)(null)), table1148, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1149 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1149.AddRow(new string[] {
                        "[[result]] = -1"});
#line 900
 testRunner.And("the debug output as", ((string)(null)), table1149, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Ends With")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEndsWith()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Ends With", ((string[])(null)));
#line 904
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1150 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1150.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1150.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1150.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1150.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1150.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1150.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 905
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1150, "Given ");
#line 913
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 914
 testRunner.And("search the recordset with type \"Ends With\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 915
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 916
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 917
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1151 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1151.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1151.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1151.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1151.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1151.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1151.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Ends With",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 918
 testRunner.And("the debug inputs as", ((string)(null)), table1151, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1152 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1152.AddRow(new string[] {
                        "[[result]] = 5"});
#line 926
 testRunner.And("the debug output as", ((string)(null)), table1152, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Ends With multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEndsWithMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Ends With multiple results", ((string[])(null)));
#line 930
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1153 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1153.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1153.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1153.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1153.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1153.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1153.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1153.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 931
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1153, "Given ");
#line 940
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 941
 testRunner.And("search the recordset with type \"Ends With\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 942
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 943
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 944
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1154 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1154.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1154.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1154.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1154.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1154.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1154.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1154.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Ends With",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 945
 testRunner.And("the debug inputs as", ((string)(null)), table1154, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1155 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1155.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 954
 testRunner.And("the debug output as", ((string)(null)), table1155, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Ends With result doesnt exist" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsEndsWithResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Ends With result doesnt exist" +
                    "", ((string[])(null)));
#line 958
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1156 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1156.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1156.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1156.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1156.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1156.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1156.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 959
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1156, "Given ");
#line 967
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 968
 testRunner.And("search the recordset with type \"Ends With\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 969
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 970
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 971
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1157 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1157.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1157.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1157.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1157.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1157.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1157.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Ends With",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 972
 testRunner.And("the debug inputs as", ((string)(null)), table1157, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1158 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1158.AddRow(new string[] {
                        "[[result]] = -1"});
#line 980
 testRunner.And("the debug output as", ((string)(null)), table1158, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Contains")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsContains()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Contains", ((string[])(null)));
#line 984
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1159 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1159.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1159.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1159.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1159.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1159.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1159.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 985
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1159, "Given ");
#line 993
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 994
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 995
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 996
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 997
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1160 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1160.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1160.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1160.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1160.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1160.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1160.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Contains",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 998
 testRunner.And("the debug inputs as", ((string)(null)), table1160, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1161 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1161.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1006
 testRunner.And("the debug output as", ((string)(null)), table1161, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Contains multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsContainsMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Contains multiple results", ((string[])(null)));
#line 1010
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1162 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1162.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1162.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1162.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1162.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1162.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1162.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1162.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1011
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1162, "Given ");
#line 1020
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1021
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1022
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1023
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1024
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1163 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1163.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1163.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1163.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1163.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1163.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1163.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1163.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Contains",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1025
 testRunner.And("the debug inputs as", ((string)(null)), table1163, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1164 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1164.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1034
 testRunner.And("the debug output as", ((string)(null)), table1164, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Contains result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsContainsResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Contains result doesnt exist", ((string[])(null)));
#line 1038
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1165 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1165.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1165.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1165.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1165.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1165.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1165.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1039
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1165, "Given ");
#line 1047
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1048
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1049
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1050
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1051
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1166 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1166.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1166.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1166.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1166.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1166.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1166.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Contains",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1052
 testRunner.And("the debug inputs as", ((string)(null)), table1166, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1167 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1167.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1060
 testRunner.And("the debug output as", ((string)(null)), table1167, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Doesn\"t Contain")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsDoesnTContain()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Doesn\"t Contain", ((string[])(null)));
#line 1064
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1168 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1168.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1168.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1168.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1168.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1168.AddRow(new string[] {
                        "rs().field",
                        "user"});
            table1168.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
#line 1065
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1168, "Given ");
#line 1073
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1074
 testRunner.And("search the recordset with type \"Doesn\'t Contain\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1075
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1076
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1077
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1169 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1169.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1169.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1169.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1169.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1169.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = user",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1169.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "1",
                        "Doesn\'t Contain",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1078
 testRunner.And("the debug inputs as", ((string)(null)), table1169, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1170 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1170.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1086
 testRunner.And("the debug output as", ((string)(null)), table1170, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Doesn\"t Contain multiple resu" +
            "lts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsDoesnTContainMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Doesn\"t Contain multiple resu" +
                    "lts", ((string[])(null)));
#line 1090
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1171 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1171.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1171.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1171.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1171.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1171.AddRow(new string[] {
                        "rs().field",
                        "user"});
            table1171.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
#line 1091
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1171, "Given ");
#line 1099
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1100
 testRunner.And("search the recordset with type \"Doesn\'t Contain\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1101
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1102
 testRunner.Then("the find records index multiple result should be 1,5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1103
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1172 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1172.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1172.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1172.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1172.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1172.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = user",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1172.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "1",
                        "Doesn\'t Contain",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1104
 testRunner.And("the debug inputs as", ((string)(null)), table1172, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1173 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1173.AddRow(new string[] {
                        "[[result]] = 1,5"});
#line 1112
 testRunner.And("the debug output as", ((string)(null)), table1173, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Doesn\"t Contain result doesnt" +
            " exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsDoesnTContainResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Doesn\"t Contain result doesnt" +
                    " exist", ((string[])(null)));
#line 1116
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1174 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1174.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table1174.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table1174.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table1174.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table1174.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
            table1174.AddRow(new string[] {
                        "rs().field",
                        "Mars"});
#line 1117
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1174, "Given ");
#line 1125
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1126
 testRunner.And("search the recordset with type \"Doesn\'t Contain\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1127
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1128
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1129
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1175 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1175.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1175.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1175.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1175.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1175.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Mars",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1175.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Mars",
                        "1",
                        "Doesn\'t Contain",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1130
 testRunner.And("the debug inputs as", ((string)(null)), table1175, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1176 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1176.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1138
 testRunner.And("the debug output as", ((string)(null)), table1176, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Alphanumeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsAlphanumeric()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Alphanumeric", ((string[])(null)));
#line 1142
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1177 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1177.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table1177.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table1177.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table1177.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table1177.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1177.AddRow(new string[] {
                        "rs().field",
                        "$$"});
#line 1143
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1177, "Given ");
#line 1151
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1152
 testRunner.And("search the recordset with type \"Is Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1153
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1154
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1155
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1178 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1178.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1178.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1178.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1178.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1178.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1178.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = $$",
                        "1",
                        "Is Alphanumeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1156
 testRunner.And("the debug inputs as", ((string)(null)), table1178, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1179 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1179.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1164
 testRunner.And("the debug output as", ((string)(null)), table1179, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Alphanumeric multiple resu" +
            "lts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsAlphanumericMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Alphanumeric multiple resu" +
                    "lts", ((string[])(null)));
#line 1168
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1180 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1180.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1180.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table1180.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table1180.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table1180.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table1180.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1180.AddRow(new string[] {
                        "rs().field",
                        "$$"});
#line 1169
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1180, "Given ");
#line 1178
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1179
 testRunner.And("search the recordset with type \"Is Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1180
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1181
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1182
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1181 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1181.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1181.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1181.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1181.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1181.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1181.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1181.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = $$",
                        "1",
                        "Is Alphanumeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1183
 testRunner.And("the debug inputs as", ((string)(null)), table1181, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1182 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1182.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1192
 testRunner.And("the debug output as", ((string)(null)), table1182, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Alphanumeric result doesnt" +
            " exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsAlphanumericResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Alphanumeric result doesnt" +
                    " exist", ((string[])(null)));
#line 1196
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1183 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1183.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table1183.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table1183.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table1183.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table1183.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table1183.AddRow(new string[] {
                        "rs().field",
                        "$$"});
#line 1197
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1183, "Given ");
#line 1205
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1206
 testRunner.And("search the recordset with type \"Is Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1207
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1208
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1209
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1184 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1184.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1184.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1184.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1184.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1184.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1184.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = $$",
                        "1",
                        "Is Alphanumeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1210
 testRunner.And("the debug inputs as", ((string)(null)), table1184, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1185 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1185.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1218
 testRunner.And("the debug output as", ((string)(null)), table1185, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Base64")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsBase64()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Base64", ((string[])(null)));
#line 1222
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1186 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1186.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1186.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1186.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1186.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1186.AddRow(new string[] {
                        "rs().field",
                        "d2FyZXdvbGY="});
            table1186.AddRow(new string[] {
                        "rs().field",
                        "You"});
#line 1223
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1186, "Given ");
#line 1231
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1232
 testRunner.And("search the recordset with type \"Is Base64\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1233
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1234
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1235
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1187 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1187.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1187.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1187.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1187.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1187.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = d2FyZXdvbGY=",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1187.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = You",
                        "1",
                        "Is Base64",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1236
 testRunner.And("the debug inputs as", ((string)(null)), table1187, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1188 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1188.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1244
 testRunner.And("the debug output as", ((string)(null)), table1188, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Base64 multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsBase64MultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Base64 multiple results", ((string[])(null)));
#line 1248
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1189 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1189.AddRow(new string[] {
                        "rs().field",
                        "d2FyZXdvbGY="});
            table1189.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1189.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1189.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1189.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1189.AddRow(new string[] {
                        "rs().field",
                        "d2FyZXdvbGY="});
            table1189.AddRow(new string[] {
                        "rs().field",
                        "You"});
#line 1249
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1189, "Given ");
#line 1258
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1259
 testRunner.And("search the recordset with type \"Is Base64\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1260
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1261
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1262
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1190 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1190.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = d2FyZXdvbGY=",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1190.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1190.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1190.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1190.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1190.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = d2FyZXdvbGY=",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1190.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = You",
                        "1",
                        "Is Base64",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1263
 testRunner.And("the debug inputs as", ((string)(null)), table1190, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1191 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1191.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1272
 testRunner.And("the debug output as", ((string)(null)), table1191, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Base64 result doesnt exist" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsBase64ResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Base64 result doesnt exist" +
                    "", ((string[])(null)));
#line 1276
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1192 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1192.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1192.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1192.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1192.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1192.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1192.AddRow(new string[] {
                        "rs().field",
                        "You"});
#line 1277
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1192, "Given ");
#line 1285
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1286
 testRunner.And("search the recordset with type \"Is Base64\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1287
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1288
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1289
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1193 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1193.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1193.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1193.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1193.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1193.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1193.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = You",
                        "1",
                        "Is Base64",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1290
 testRunner.And("the debug inputs as", ((string)(null)), table1193, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1194 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1194.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1298
 testRunner.And("the debug output as", ((string)(null)), table1194, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Date")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Date", ((string[])(null)));
#line 1302
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1195 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1195.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1195.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1195.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1195.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1195.AddRow(new string[] {
                        "rs().field",
                        "12/10/2013"});
            table1195.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1303
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1195, "Given ");
#line 1311
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1312
 testRunner.And("search the recordset with type \"Is Date\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1313
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1314
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1315
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1196 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1196.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1196.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1196.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1196.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1196.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 12/10/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1196.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is Date",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1316
 testRunner.And("the debug inputs as", ((string)(null)), table1196, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1197 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1197.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1324
 testRunner.And("the debug output as", ((string)(null)), table1197, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Date multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsDateMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Date multiple results", ((string[])(null)));
#line 1328
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1198 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1198.AddRow(new string[] {
                        "rs().field",
                        "12/10/2013"});
            table1198.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1198.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1198.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1198.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1198.AddRow(new string[] {
                        "rs().field",
                        "12/10/2013"});
            table1198.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1329
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1198, "Given ");
#line 1338
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1339
 testRunner.And("search the recordset with type \"Is Date\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1340
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1341
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1342
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1199 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1199.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 12/10/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1199.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1199.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1199.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1199.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1199.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 12/10/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1199.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Is Date",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1343
 testRunner.And("the debug inputs as", ((string)(null)), table1199, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1200 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1200.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1352
 testRunner.And("the debug output as", ((string)(null)), table1200, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Date result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsDateResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Date result doesnt exist", ((string[])(null)));
#line 1356
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1201 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1201.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1201.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1201.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1201.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1201.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1201.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1357
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1201, "Given ");
#line 1365
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1366
 testRunner.And("search the recordset with type \"Is Date\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1367
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1368
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1369
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1202 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1202.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1202.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1202.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1202.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1202.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1202.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is Date",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1370
 testRunner.And("the debug inputs as", ((string)(null)), table1202, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1203 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1203.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1378
 testRunner.And("the debug output as", ((string)(null)), table1203, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Email")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsEmail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Email", ((string[])(null)));
#line 1382
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1204 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1204.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1204.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1204.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1204.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1204.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table1204.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1383
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1204, "Given ");
#line 1391
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1392
 testRunner.And("search the recordset with type \"Is Email\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1393
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1394
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1395
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1205 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1205.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1205.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1205.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1205.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1205.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1205.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is Email",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1396
 testRunner.And("the debug inputs as", ((string)(null)), table1205, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1206 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1206.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1404
 testRunner.And("the debug output as", ((string)(null)), table1206, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Email multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsEmailMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Email multiple results", ((string[])(null)));
#line 1408
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1207 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1207.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table1207.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1207.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1207.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1207.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1207.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table1207.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1409
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1207, "Given ");
#line 1418
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1419
 testRunner.And("search the recordset with type \"Is Email\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1420
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1421
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1422
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1208 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1208.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1208.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1208.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1208.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1208.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1208.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1208.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Is Email",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1423
 testRunner.And("the debug inputs as", ((string)(null)), table1208, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1209 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1209.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1432
 testRunner.And("the debug output as", ((string)(null)), table1209, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Email result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsEmailResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Email result doesnt exist", ((string[])(null)));
#line 1436
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1210 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1210.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1210.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1210.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1210.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1210.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1210.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1437
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1210, "Given ");
#line 1445
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1446
 testRunner.And("search the recordset with type \"Is Email\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1447
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1448
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1449
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1211 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1211.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1211.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1211.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1211.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1211.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1211.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is Email",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1450
 testRunner.And("the debug inputs as", ((string)(null)), table1211, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1212 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1212.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1458
 testRunner.And("the debug output as", ((string)(null)), table1212, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Numeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsNumeric()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Numeric", ((string[])(null)));
#line 1462
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1213 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1213.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1213.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1213.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1213.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1213.AddRow(new string[] {
                        "rs().field",
                        "45"});
            table1213.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1463
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1213, "Given ");
#line 1471
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1472
 testRunner.And("search the recordset with type \"Is Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1473
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1474
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1475
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1214 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1214.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1214.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1214.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1214.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1214.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 45",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1214.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is Numeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1476
 testRunner.And("the debug inputs as", ((string)(null)), table1214, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1215 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1215.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1484
 testRunner.And("the debug output as", ((string)(null)), table1215, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Numeric multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsNumericMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Numeric multiple results", ((string[])(null)));
#line 1488
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1216 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1216.AddRow(new string[] {
                        "rs().field",
                        "41"});
            table1216.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1216.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1216.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1216.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1216.AddRow(new string[] {
                        "rs().field",
                        "54"});
            table1216.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1489
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1216, "Given ");
#line 1498
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1499
 testRunner.And("search the recordset with type \"Is Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1500
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1501
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1502
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1217 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1217.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 41",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1217.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1217.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1217.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1217.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1217.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 54",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1217.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Is Numeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1503
 testRunner.And("the debug inputs as", ((string)(null)), table1217, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1218 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1218.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1512
 testRunner.And("the debug output as", ((string)(null)), table1218, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Numeric result doesnt exis" +
            "t")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsNumericResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Numeric result doesnt exis" +
                    "t", ((string[])(null)));
#line 1516
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1219 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1219.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1219.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1219.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1219.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1219.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1219.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1517
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1219, "Given ");
#line 1525
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1526
 testRunner.And("search the recordset with type \"Is Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1527
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1528
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1529
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1220 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1220.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1220.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1220.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1220.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1220.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1220.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "",
                        "Is Numeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1530
 testRunner.And("the debug inputs as", ((string)(null)), table1220, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1221 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1221.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1538
 testRunner.And("the debug output as", ((string)(null)), table1221, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Regex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsRegex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Regex", ((string[])(null)));
#line 1542
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1222 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1222.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1222.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1222.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1222.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1222.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1222.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1543
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1222, "Given ");
#line 1551
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1552
 testRunner.And("search the recordset with type \"Is Regex\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1553
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1554
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1555
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1223 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1223.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1223.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1223.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1223.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1223.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1223.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is Regex",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1556
 testRunner.And("the debug inputs as", ((string)(null)), table1223, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1224 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1224.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1564
 testRunner.And("the debug output as", ((string)(null)), table1224, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Regex multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsRegexMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Regex multiple results", ((string[])(null)));
#line 1568
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1225 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1225.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1225.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1225.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1225.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1225.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1225.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1225.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1569
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1225, "Given ");
#line 1578
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1579
 testRunner.And("search the recordset with type \"Is Regex\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1580
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1581
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1582
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1226 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1226.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1226.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1226.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1226.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1226.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1226.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1226.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Is Regex",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1583
 testRunner.And("the debug inputs as", ((string)(null)), table1226, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1227 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1227.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1592
 testRunner.And("the debug output as", ((string)(null)), table1227, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Regex result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsRegexResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Regex result doesnt exist", ((string[])(null)));
#line 1596
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1228 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1228.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1228.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1228.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1228.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1228.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1228.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1597
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1228, "Given ");
#line 1605
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1606
 testRunner.And("search the recordset with type \"Is Regex\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1607
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1608
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1609
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1229 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1229.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1229.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1229.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1229.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1229.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1229.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is Regex",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1610
 testRunner.And("the debug inputs as", ((string)(null)), table1229, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1230 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1230.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1618
 testRunner.And("the debug output as", ((string)(null)), table1230, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Text")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsText()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Text", ((string[])(null)));
#line 1622
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1231 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1231.AddRow(new string[] {
                        "rs().field",
                        "15"});
            table1231.AddRow(new string[] {
                        "rs().field",
                        "56"});
            table1231.AddRow(new string[] {
                        "rs().field",
                        "45"});
            table1231.AddRow(new string[] {
                        "rs().field",
                        "7"});
            table1231.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1231.AddRow(new string[] {
                        "rs().field",
                        "16"});
#line 1623
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1231, "Given ");
#line 1631
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1632
 testRunner.And("search the recordset with type \"Is Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1633
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1634
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1635
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1232 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1232.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 15",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1232.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 56",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1232.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 45",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1232.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 7",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1232.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1232.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 16",
                        "1",
                        "Is Text",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1636
 testRunner.And("the debug inputs as", ((string)(null)), table1232, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1233 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1233.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1644
 testRunner.And("the debug output as", ((string)(null)), table1233, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Text multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsTextMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Text multiple results", ((string[])(null)));
#line 1648
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1234 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1234.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1234.AddRow(new string[] {
                        "rs().field",
                        "45"});
            table1234.AddRow(new string[] {
                        "rs().field",
                        "54"});
            table1234.AddRow(new string[] {
                        "rs().field",
                        "51"});
            table1234.AddRow(new string[] {
                        "rs().field",
                        "86"});
            table1234.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1234.AddRow(new string[] {
                        "rs().field",
                        "8"});
#line 1649
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1234, "Given ");
#line 1658
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1659
 testRunner.And("search the recordset with type \"Is Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1660
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1661
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1662
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1235 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1235.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1235.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 45",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1235.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 54",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1235.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 51",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1235.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 86",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1235.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1235.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = 8",
                        "1",
                        "Is Text",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1663
 testRunner.And("the debug inputs as", ((string)(null)), table1235, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1236 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1236.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1672
 testRunner.And("the debug output as", ((string)(null)), table1236, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is Text result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsTextResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is Text result doesnt exist", ((string[])(null)));
#line 1676
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1237 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1237.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table1237.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1237.AddRow(new string[] {
                        "rs().field",
                        "3"});
            table1237.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table1237.AddRow(new string[] {
                        "rs().field",
                        "6"});
            table1237.AddRow(new string[] {
                        "rs().field",
                        "5"});
#line 1677
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1237, "Given ");
#line 1685
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1686
 testRunner.And("search the recordset with type \"Is Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1687
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1688
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1689
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1238 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1238.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1238.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1238.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 3",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1238.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1238.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 6",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1238.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 5",
                        "1",
                        "Is Text",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1690
 testRunner.And("the debug inputs as", ((string)(null)), table1238, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1239 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1239.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1698
 testRunner.And("the debug output as", ((string)(null)), table1239, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is XML")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsXML()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is XML", ((string[])(null)));
#line 1702
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1240 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1240.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1240.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1240.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1240.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1240.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table1240.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1703
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1240, "Given ");
#line 1711
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1712
 testRunner.And("search the recordset with type \"Is XML\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1713
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1714
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1715
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1241 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1241.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1241.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1241.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1241.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1241.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1241.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is XML",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1716
 testRunner.And("the debug inputs as", ((string)(null)), table1241, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1242 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1242.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1724
 testRunner.And("the debug output as", ((string)(null)), table1242, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is XML multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsXMLMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is XML multiple results", ((string[])(null)));
#line 1728
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1243 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1243.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table1243.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1243.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1243.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1243.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1243.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table1243.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1729
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1243, "Given ");
#line 1738
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1739
 testRunner.And("search the recordset with type \"Is XML\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1740
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1741
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1742
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1244 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1244.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1244.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1244.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1244.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1244.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1244.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1244.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Is XML",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1743
 testRunner.And("the debug inputs as", ((string)(null)), table1244, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1245 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1245.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1752
 testRunner.And("the debug output as", ((string)(null)), table1245, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Is XML result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsIsXMLResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Is XML result doesnt exist", ((string[])(null)));
#line 1756
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1246 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1246.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1246.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1246.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1246.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1246.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1246.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1757
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1246, "Given ");
#line 1765
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1766
 testRunner.And("search the recordset with type \"Is XML\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1767
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1768
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1769
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1247 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1247.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1247.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1247.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1247.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1247.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1247.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Is XML",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1770
 testRunner.And("the debug inputs as", ((string)(null)), table1247, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1248 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1248.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1778
 testRunner.And("the debug output as", ((string)(null)), table1248, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Alphanumeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotAlphanumeric()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Alphanumeric", ((string[])(null)));
#line 1782
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1249 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1249.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1249.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1249.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1249.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1249.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table1249.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1783
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1249, "Given ");
#line 1791
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1792
 testRunner.And("search the recordset with type \"Not Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1793
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1794
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1795
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1250 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1250.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1250.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1250.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1250.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1250.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1250.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Not Alphanumeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1796
 testRunner.And("the debug inputs as", ((string)(null)), table1250, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1251 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1251.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1804
 testRunner.And("the debug output as", ((string)(null)), table1251, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Alphanumeric multiple res" +
            "ults")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotAlphanumericMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Alphanumeric multiple res" +
                    "ults", ((string[])(null)));
#line 1808
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1252 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1252.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table1252.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1252.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1252.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1252.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1252.AddRow(new string[] {
                        "rs().field",
                        "$$"});
            table1252.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1809
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1252, "Given ");
#line 1818
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1819
 testRunner.And("search the recordset with type \"Not Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1820
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1821
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1822
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1253 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1253.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1253.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1253.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1253.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1253.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1253.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = $$",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1253.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Not Alphanumeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1823
 testRunner.And("the debug inputs as", ((string)(null)), table1253, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1254 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1254.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1832
 testRunner.And("the debug output as", ((string)(null)), table1254, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Alphanumeric result doesn" +
            "t exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotAlphanumericResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Alphanumeric result doesn" +
                    "t exist", ((string[])(null)));
#line 1836
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1255 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1255.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1255.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1255.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1255.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1255.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1255.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 1837
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1255, "Given ");
#line 1845
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1846
 testRunner.And("search the recordset with type \"Not Alphanumeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1847
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1848
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1849
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1256 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1256.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1256.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1256.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1256.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1256.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1256.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Not Alphanumeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1850
 testRunner.And("the debug inputs as", ((string)(null)), table1256, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1257 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1257.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1858
 testRunner.And("the debug output as", ((string)(null)), table1257, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Date")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Date", ((string[])(null)));
#line 1862
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1258 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1258.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table1258.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table1258.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table1258.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table1258.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1258.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
#line 1863
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1258, "Given ");
#line 1871
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1872
 testRunner.And("search the recordset with type \"Not Date\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1873
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1874
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1875
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1259 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1259.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1259.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1259.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1259.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1259.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1259.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 12/11/2013",
                        "1",
                        "Not Date",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1876
 testRunner.And("the debug inputs as", ((string)(null)), table1259, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1260 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1260.AddRow(new string[] {
                        "[[result]] = 5"});
#line 1884
 testRunner.And("the debug output as", ((string)(null)), table1260, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Date multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotDateMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Date multiple results", ((string[])(null)));
#line 1888
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1261 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1261.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1261.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table1261.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table1261.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table1261.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table1261.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1261.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
#line 1889
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1261, "Given ");
#line 1898
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1899
 testRunner.And("search the recordset with type \"Not Date\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1900
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1901
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1902
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1262 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1262.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1262.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1262.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1262.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1262.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1262.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1262.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = 12/11/2013",
                        "1",
                        "Not Date",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1903
 testRunner.And("the debug inputs as", ((string)(null)), table1262, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1263 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1263.AddRow(new string[] {
                        "[[result]] = 1,6"});
#line 1912
 testRunner.And("the debug output as", ((string)(null)), table1263, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Date result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotDateResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Date result doesnt exist", ((string[])(null)));
#line 1916
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1264 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1264.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table1264.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table1264.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table1264.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table1264.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
            table1264.AddRow(new string[] {
                        "rs().field",
                        "12/11/2013"});
#line 1917
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1264, "Given ");
#line 1925
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1926
 testRunner.And("search the recordset with type \"Not Date\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1927
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1928
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1929
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1265 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1265.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1265.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1265.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1265.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1265.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 12/11/2013",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1265.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 12/11/2013",
                        "1",
                        "Not Date",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1930
 testRunner.And("the debug inputs as", ((string)(null)), table1265, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1266 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1266.AddRow(new string[] {
                        "[[result]] = -1"});
#line 1938
 testRunner.And("the debug output as", ((string)(null)), table1266, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Email")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEmail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Email", ((string[])(null)));
#line 1942
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1267 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1267.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table1267.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table1267.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table1267.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table1267.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1267.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
#line 1943
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1267, "Given ");
#line 1951
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1952
 testRunner.And("search the recordset with type \"Not Email\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1953
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1954
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1955
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1268 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1268.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1268.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1268.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1268.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1268.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1268.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = test@testEmail.co.za",
                        "1",
                        "Not Email",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1956
 testRunner.And("the debug inputs as", ((string)(null)), table1268, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1269 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1269.AddRow(new string[] {
                        "[[result]] =  5"});
#line 1964
 testRunner.And("the debug output as", ((string)(null)), table1269, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Email multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEmailMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Email multiple results", ((string[])(null)));
#line 1968
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1270 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1270.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1270.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table1270.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table1270.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table1270.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table1270.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1270.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
#line 1969
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1270, "Given ");
#line 1978
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1979
 testRunner.And("search the recordset with type \"Not Email\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1980
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1981
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1982
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1271 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1271.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1271.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1271.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1271.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1271.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1271.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1271.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = test@testEmail.co.za",
                        "1",
                        "Not Email",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 1983
 testRunner.And("the debug inputs as", ((string)(null)), table1271, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1272 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1272.AddRow(new string[] {
                        "[[result]] =  1,6"});
#line 1992
 testRunner.And("the debug output as", ((string)(null)), table1272, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Email result doesnt exist" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotEmailResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Email result doesnt exist" +
                    "", ((string[])(null)));
#line 1996
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1273 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1273.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table1273.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table1273.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table1273.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table1273.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
            table1273.AddRow(new string[] {
                        "rs().field",
                        "test@testEmail.co.za"});
#line 1997
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1273, "Given ");
#line 2005
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2006
 testRunner.And("search the recordset with type \"Not Email\" and criteria is \"Mars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2007
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2008
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2009
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1274 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1274.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1274.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1274.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1274.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1274.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = test@testEmail.co.za",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1274.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = test@testEmail.co.za",
                        "1",
                        "Not Email",
                        "Mars",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2010
 testRunner.And("the debug inputs as", ((string)(null)), table1274, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1275 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1275.AddRow(new string[] {
                        "[[result]] =  -1"});
#line 2018
 testRunner.And("the debug output as", ((string)(null)), table1275, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Numeric")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotNumeric()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Numeric", ((string[])(null)));
#line 2022
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1276 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1276.AddRow(new string[] {
                        "rs().field",
                        "152"});
            table1276.AddRow(new string[] {
                        "rs().field",
                        "5"});
            table1276.AddRow(new string[] {
                        "rs().field",
                        "6"});
            table1276.AddRow(new string[] {
                        "rs().field",
                        "7"});
            table1276.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1276.AddRow(new string[] {
                        "rs().field",
                        "5"});
#line 2023
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1276, "Given ");
#line 2031
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2032
 testRunner.And("search the recordset with type \"Not Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2033
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2034
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2035
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1277 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1277.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 152",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1277.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 5",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1277.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 6",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1277.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 7",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1277.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1277.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 5",
                        "1",
                        "Not Numeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2036
 testRunner.And("the debug inputs as", ((string)(null)), table1277, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1278 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1278.AddRow(new string[] {
                        "[[result]] =  5"});
#line 2044
 testRunner.And("the debug output as", ((string)(null)), table1278, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Numeric multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotNumericMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Numeric multiple results", ((string[])(null)));
#line 2048
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1279 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1279.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1279.AddRow(new string[] {
                        "rs().field",
                        "45"});
            table1279.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1279.AddRow(new string[] {
                        "rs().field",
                        "4"});
            table1279.AddRow(new string[] {
                        "rs().field",
                        "5"});
            table1279.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1279.AddRow(new string[] {
                        "rs().field",
                        "5"});
#line 2049
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1279, "Given ");
#line 2058
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2059
 testRunner.And("search the recordset with type \"Not Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2060
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2061
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2062
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1280 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1280.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1280.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 45",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1280.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1280.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 4",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1280.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 5",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1280.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1280.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = 5",
                        "1",
                        "Not Numeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2063
 testRunner.And("the debug inputs as", ((string)(null)), table1280, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1281 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1281.AddRow(new string[] {
                        "[[result]] =  1,6"});
#line 2072
 testRunner.And("the debug output as", ((string)(null)), table1281, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Numeric result doesnt exi" +
            "st")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotNumericResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Numeric result doesnt exi" +
                    "st", ((string[])(null)));
#line 2076
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1282 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1282.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table1282.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table1282.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1282.AddRow(new string[] {
                        "rs().field",
                        "2"});
            table1282.AddRow(new string[] {
                        "rs().field",
                        "3"});
            table1282.AddRow(new string[] {
                        "rs().field",
                        "3"});
#line 2077
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1282, "Given ");
#line 2085
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2086
 testRunner.And("search the recordset with type \"Not Numeric\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2087
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2088
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2089
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1283 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1283.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1283.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1283.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1283.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1283.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 3",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1283.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 3",
                        "1",
                        "Not Numeric",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2090
 testRunner.And("the debug inputs as", ((string)(null)), table1283, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1284 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1284.AddRow(new string[] {
                        "[[result]] =  -1"});
#line 2098
  testRunner.And("the debug output as", ((string)(null)), table1284, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Text")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotText()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Text", ((string[])(null)));
#line 2102
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1285 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1285.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1285.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1285.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1285.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1285.AddRow(new string[] {
                        "rs().field",
                        "52"});
            table1285.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 2103
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1285, "Given ");
#line 2111
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2112
 testRunner.And("search the recordset with type \"Not Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2113
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2114
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2115
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1286 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1286.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1286.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1286.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1286.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1286.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = 52",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1286.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Not Text",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2116
 testRunner.And("the debug inputs as", ((string)(null)), table1286, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1287 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1287.AddRow(new string[] {
                        "[[result]] =  5"});
#line 2124
 testRunner.And("the debug output as", ((string)(null)), table1287, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Text multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotTextMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Text multiple results", ((string[])(null)));
#line 2128
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1288 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1288.AddRow(new string[] {
                        "rs().field",
                        "45"});
            table1288.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1288.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1288.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1288.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1288.AddRow(new string[] {
                        "rs().field",
                        "741"});
            table1288.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 2129
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1288, "Given ");
#line 2138
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2139
 testRunner.And("search the recordset with type \"Not Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2140
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2141
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2142
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1289 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1289.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 45",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1289.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1289.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1289.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1289.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1289.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 741",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1289.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Not Text",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2143
 testRunner.And("the debug inputs as", ((string)(null)), table1289, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1290 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1290.AddRow(new string[] {
                        "[[result]] =  1,6"});
#line 2152
 testRunner.And("the debug output as", ((string)(null)), table1290, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Text result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotTextResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Text result doesnt exist", ((string[])(null)));
#line 2156
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1291 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1291.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1291.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1291.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1291.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1291.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1291.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 2157
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1291, "Given ");
#line 2165
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2166
 testRunner.And("search the recordset with type \"Not Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2167
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2168
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2169
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1292 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1292.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1292.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1292.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1292.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1292.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1292.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = user",
                        "1",
                        "Not Text",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2170
 testRunner.And("the debug inputs as", ((string)(null)), table1292, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1293 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1293.AddRow(new string[] {
                        "[[result]] =  -1"});
#line 2178
  testRunner.And("the debug output as", ((string)(null)), table1293, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not XML")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotXML()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not XML", ((string[])(null)));
#line 2182
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1294 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1294.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table1294.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table1294.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table1294.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table1294.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1294.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
#line 2183
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1294, "Given ");
#line 2191
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2192
 testRunner.And("search the recordset with type \"Not XML\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2193
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2194
 testRunner.Then("the find records index multiple result should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2195
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1295 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1295.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1295.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1295.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1295.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1295.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1295.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = <test></test>",
                        "1",
                        "Not XML",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2196
 testRunner.And("the debug inputs as", ((string)(null)), table1295, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1296 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1296.AddRow(new string[] {
                        "[[result]] =  5"});
#line 2204
 testRunner.And("the debug output as", ((string)(null)), table1296, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not XML multiple results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotXMLMultipleResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not XML multiple results", ((string[])(null)));
#line 2208
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1297 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1297.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1297.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table1297.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table1297.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table1297.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table1297.AddRow(new string[] {
                        "rs().field",
                        "Warewolf"});
            table1297.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
#line 2209
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1297, "Given ");
#line 2218
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2219
 testRunner.And("search the recordset with type \"Not XML\" and criteria is \"Warewolf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2220
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2221
 testRunner.Then("the find records index multiple result should be 1,6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2222
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1298 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1298.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1298.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1298.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1298.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1298.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1298.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1298.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = <test></test>",
                        "1",
                        "Not XML",
                        "Warewolf",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2223
 testRunner.And("the debug inputs as", ((string)(null)), table1298, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1299 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1299.AddRow(new string[] {
                        "[[result]] =  1,6"});
#line 2232
 testRunner.And("the debug output as", ((string)(null)), table1299, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not XML result doesnt exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotXMLResultDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not XML result doesnt exist", ((string[])(null)));
#line 2236
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1300 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1300.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table1300.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table1300.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table1300.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table1300.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
            table1300.AddRow(new string[] {
                        "rs().field",
                        "<test></test>"});
#line 2237
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1300, "Given ");
#line 2245
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2246
 testRunner.And("search the recordset with type \"Not XML\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2247
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2248
 testRunner.Then("the find records index multiple result should be -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2249
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1301 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1301.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1301.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1301.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1301.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1301.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = <test></test>",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1301.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = <test></test>",
                        "1",
                        "Not XML",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2250
 testRunner.And("the debug inputs as", ((string)(null)), table1301, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1302 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1302.AddRow(new string[] {
                        "[[result]] =  -1"});
#line 2258
 testRunner.And("the debug output as", ((string)(null)), table1302, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type Contains and requires all fields" +
            " to match true and match all rows true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeContainsAndRequiresAllFieldsToMatchTrueAndMatchAllRowsTrue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type Contains and requires all fields" +
                    " to match true and match all rows true", ((string[])(null)));
#line 2262
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1303 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1303.AddRow(new string[] {
                        "rs(1).field1",
                        "123"});
            table1303.AddRow(new string[] {
                        "rs(2).field1",
                        "2"});
            table1303.AddRow(new string[] {
                        "rs(3).field1",
                        "5"});
#line 2263
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1303, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1304 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1304.AddRow(new string[] {
                        "rs1(1).field2",
                        "214"});
            table1304.AddRow(new string[] {
                        "rs1(2).field2",
                        "51"});
            table1304.AddRow(new string[] {
                        "rs1(3).field2",
                        "56"});
#line 2268
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1304, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1305 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1305.AddRow(new string[] {
                        "rs2(1).field3",
                        "512"});
            table1305.AddRow(new string[] {
                        "rs2(2).field3",
                        "84"});
            table1305.AddRow(new string[] {
                        "rs2(3).field3",
                        "12"});
#line 2273
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1305, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1306 = new TechTalk.SpecFlow.Table(new string[] {
                        "field"});
            table1306.AddRow(new string[] {
                        "[[rs().field1]]"});
            table1306.AddRow(new string[] {
                        "[[rs1().field2]]"});
            table1306.AddRow(new string[] {
                        "[[rs2().field3]]"});
#line 2278
 testRunner.And("the fields to search is", ((string)(null)), table1306, "And ");
#line 2283
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2284
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2285
 testRunner.And("when match all search criteria is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2286
 testRunner.And("when requires all fields to match is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2287
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2288
 testRunner.Then("the find records index multiple result should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2289
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type Contains and requires all fields" +
            " to match false and match all rows true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeContainsAndRequiresAllFieldsToMatchFalseAndMatchAllRowsTrue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type Contains and requires all fields" +
                    " to match false and match all rows true", ((string[])(null)));
#line 2291
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1307 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1307.AddRow(new string[] {
                        "rs(1).field1",
                        "123"});
            table1307.AddRow(new string[] {
                        "rs(2).field1",
                        "2"});
            table1307.AddRow(new string[] {
                        "rs(3).field1",
                        "5"});
#line 2292
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1307, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1308 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1308.AddRow(new string[] {
                        "rs1(1).field2",
                        "214"});
            table1308.AddRow(new string[] {
                        "rs1(2).field2",
                        "51"});
            table1308.AddRow(new string[] {
                        "rs1(3).field2",
                        "56"});
#line 2297
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1308, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1309 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1309.AddRow(new string[] {
                        "rs2(1).field3",
                        "512"});
            table1309.AddRow(new string[] {
                        "rs2(2).field3",
                        "84"});
            table1309.AddRow(new string[] {
                        "rs2(3).field3",
                        "12"});
#line 2302
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1309, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1310 = new TechTalk.SpecFlow.Table(new string[] {
                        "field"});
            table1310.AddRow(new string[] {
                        "[[rs().field1]]"});
            table1310.AddRow(new string[] {
                        "[[rs1().field2]]"});
            table1310.AddRow(new string[] {
                        "[[rs2().field3]]"});
#line 2307
 testRunner.And("the fields to search is", ((string)(null)), table1310, "And ");
#line 2312
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2313
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2314
 testRunner.And("when match all search criteria is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2315
 testRunner.And("when requires all fields to match is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2316
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2317
 testRunner.Then("the find records index multiple result should be 1,3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2318
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type Contains and requires all fields" +
            " to match false and match all rows false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeContainsAndRequiresAllFieldsToMatchFalseAndMatchAllRowsFalse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type Contains and requires all fields" +
                    " to match false and match all rows false", ((string[])(null)));
#line 2320
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1311 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1311.AddRow(new string[] {
                        "AB(1).f1",
                        "123"});
            table1311.AddRow(new string[] {
                        "AB(2).f1",
                        "2"});
            table1311.AddRow(new string[] {
                        "AB(3).f1",
                        "5"});
#line 2321
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1311, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1312 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1312.AddRow(new string[] {
                        "CD(1).f2",
                        "214"});
            table1312.AddRow(new string[] {
                        "CD(2).f2",
                        "51"});
            table1312.AddRow(new string[] {
                        "CD(3).f2",
                        "56"});
#line 2326
 testRunner.And("I have the following recordset to search for multiple criteria", ((string)(null)), table1312, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1313 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1313.AddRow(new string[] {
                        "EF(1).f3",
                        "512"});
            table1313.AddRow(new string[] {
                        "EF(2).f3",
                        "84"});
            table1313.AddRow(new string[] {
                        "EF(3).f3",
                        "12"});
#line 2331
 testRunner.And("I have the following recordset to search for multiple criteria", ((string)(null)), table1313, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1314 = new TechTalk.SpecFlow.Table(new string[] {
                        "field"});
            table1314.AddRow(new string[] {
                        "[[AB().f1]]"});
            table1314.AddRow(new string[] {
                        "[[CD().f2]]"});
            table1314.AddRow(new string[] {
                        "[[EF().f3]]"});
#line 2336
 testRunner.And("the fields to search is", ((string)(null)), table1314, "And ");
#line 2341
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2342
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2343
 testRunner.And("when match all search criteria is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2344
 testRunner.And("when requires all fields to match is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2345
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2346
 testRunner.Then("the find records index multiple result should be 1,2,3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2347
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type Contains and requires all fields" +
            " to match true and match all rows false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeContainsAndRequiresAllFieldsToMatchTrueAndMatchAllRowsFalse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type Contains and requires all fields" +
                    " to match true and match all rows false", ((string[])(null)));
#line 2349
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1315 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1315.AddRow(new string[] {
                        "rs(1).field1",
                        "123"});
            table1315.AddRow(new string[] {
                        "rs(2).field1",
                        "2"});
            table1315.AddRow(new string[] {
                        "rs(3).field1",
                        "5"});
#line 2350
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1315, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1316 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1316.AddRow(new string[] {
                        "rs1(1).field2",
                        "214"});
            table1316.AddRow(new string[] {
                        "rs1(2).field2",
                        "52"});
            table1316.AddRow(new string[] {
                        "rs1(3).field2",
                        "56"});
#line 2355
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1316, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1317 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1317.AddRow(new string[] {
                        "rs2(1).field3",
                        "512"});
            table1317.AddRow(new string[] {
                        "rs2(2).field3",
                        "82"});
            table1317.AddRow(new string[] {
                        "rs2(3).field3",
                        "12"});
#line 2360
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1317, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1318 = new TechTalk.SpecFlow.Table(new string[] {
                        "field"});
            table1318.AddRow(new string[] {
                        "[[rs().field1]]"});
            table1318.AddRow(new string[] {
                        "[[rs1().field2]]"});
            table1318.AddRow(new string[] {
                        "[[rs2().field3]]"});
#line 2365
 testRunner.And("the fields to search is", ((string)(null)), table1318, "And ");
#line 2370
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2371
 testRunner.And("search the recordset with type \"Contains\" and criteria is \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2372
 testRunner.And("when match all search criteria is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2373
 testRunner.And("when requires all fields to match is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2374
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2375
 testRunner.Then("the find records index multiple result should be 1,2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2376
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Search using a negative index recordset criteria")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void SearchUsingANegativeIndexRecordsetCriteria()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search using a negative index recordset criteria", ((string[])(null)));
#line 2378
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1319 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1319.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table1319.AddRow(new string[] {
                        "rs().row",
                        "User"});
#line 2379
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1319, "Given ");
#line 2383
 testRunner.And("field to search is \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2384
 testRunner.And("search the recordset with type \"Not XML\" and criteria is \"[[my(-1).set]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2385
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2386
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1320 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1320.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).row]] = Warewolf",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1320.AddRow(new string[] {
                        "",
                        "[[rs(2).row]] = User",
                        "1",
                        "Not XML",
                        "[[my(-1).set]] =",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2387
 testRunner.And("the debug inputs as", ((string)(null)), table1320, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index", ((string[])(null)));
#line 2392
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1321 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1321.AddRow(new string[] {
                        "rs().field",
                        "1"});
            table1321.AddRow(new string[] {
                        "rs().field",
                        "15"});
            table1321.AddRow(new string[] {
                        "rs().field",
                        "20"});
            table1321.AddRow(new string[] {
                        "rs().field",
                        "34"});
#line 2393
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1321, "Given ");
#line 2399
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2400
 testRunner.And("is between search the recordset with type \"Is Between\" and criteria is \"16\" and \"" +
                    "33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2401
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2402
 testRunner.Then("the find records index multiple result should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2403
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1322 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1322.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1322.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = 15",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1322.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = 20",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1322.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = 34",
                        "1",
                        "Is Between",
                        "",
                        "16",
                        "33",
                        "NO",
                        "NO"});
#line 2404
 testRunner.And("the debug inputs as", ((string)(null)), table1322, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1323 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1323.AddRow(new string[] {
                        "[[result]] = 3"});
#line 2410
 testRunner.And("the debug output as", ((string)(null)), table1323, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find Record using match type as is Null")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindRecordUsingMatchTypeAsIsNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find Record using match type as is Null", ((string[])(null)));
#line 2415
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1324 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1324.AddRow(new string[] {
                        "[[rs().row]]",
                        "NULL"});
#line 2416
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1324, "Given ");
#line 2419
 testRunner.And("field to search is \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2420
 testRunner.And("search the recordset with type \"Is NULL\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2421
 testRunner.And("when match all search criteria is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2422
 testRunner.And("when requires all fields to match is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2423
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2424
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find Record using match type as is not Null")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindRecordUsingMatchTypeAsIsNotNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find Record using match type as is not Null", ((string[])(null)));
#line 2426
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1325 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1325.AddRow(new string[] {
                        "[[rs().row]]",
                        "NULL"});
#line 2427
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1325, "Given ");
#line 2430
 testRunner.And("field to search is \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2431
 testRunner.And("search the recordset with type \"Is Not NULL\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2432
 testRunner.And("when match all search criteria is \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2433
 testRunner.And("when requires all fields to match is \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2434
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2435
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find an index of data in a recordset search type is Not Text multiple results usi" +
            "ng recordset result")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FindRecordsetIndexMultiple")]
        public virtual void FindAnIndexOfDataInARecordsetSearchTypeIsNotTextMultipleResultsUsingRecordsetResult()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find an index of data in a recordset search type is Not Text multiple results usi" +
                    "ng recordset result", ((string[])(null)));
#line 2437
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1326 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table1326.AddRow(new string[] {
                        "rs().field",
                        "45"});
            table1326.AddRow(new string[] {
                        "rs().field",
                        "You"});
            table1326.AddRow(new string[] {
                        "rs().field",
                        "are"});
            table1326.AddRow(new string[] {
                        "rs().field",
                        "the"});
            table1326.AddRow(new string[] {
                        "rs().field",
                        "best"});
            table1326.AddRow(new string[] {
                        "rs().field",
                        "741"});
            table1326.AddRow(new string[] {
                        "rs().field",
                        "user"});
#line 2438
 testRunner.Given("I have the following recordset to search for multiple criteria", ((string)(null)), table1326, "Given ");
#line 2447
 testRunner.And("field to search is \"[[rs().field]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2448
 testRunner.And("search the recordset with type \"Not Text\" and criteria is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2449
 testRunner.Then("the find records index multiple result should is \"[[res().val]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2450
 testRunner.When("the find records index multiple tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2451
 testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1327 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1327.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).field]] = 45",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1327.AddRow(new string[] {
                        "",
                        "[[rs(2).field]] = You",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1327.AddRow(new string[] {
                        "",
                        "[[rs(3).field]] = are",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1327.AddRow(new string[] {
                        "",
                        "[[rs(4).field]] = the",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1327.AddRow(new string[] {
                        "",
                        "[[rs(5).field]] = best",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1327.AddRow(new string[] {
                        "",
                        "[[rs(6).field]] = 741",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1327.AddRow(new string[] {
                        "",
                        "[[rs(7).field]] = user",
                        "1",
                        "Not Text",
                        "",
                        "",
                        "",
                        "NO",
                        "NO"});
#line 2452
 testRunner.And("the debug inputs as", ((string)(null)), table1327, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1328 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1328.AddRow(new string[] {
                        "[[res(1).val]] =  1"});
            table1328.AddRow(new string[] {
                        "[[res(2).val]] =  6"});
#line 2461
 testRunner.And("the debug output as", ((string)(null)), table1328, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
