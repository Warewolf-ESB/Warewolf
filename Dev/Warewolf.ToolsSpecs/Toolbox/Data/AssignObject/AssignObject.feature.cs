// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.ToolsSpecs.Toolbox.Data.AssignObject
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AssignObjectFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AssignObject.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AssignObject", "\tIn order to use json \r\n\tAs a Warewolf user\r\n\tI want a tool that assigns data to " +
                    "json objects", ProgrammingLanguage.CSharp, new string[] {
                        "Data"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "AssignObject")))
            {
                Warewolf.ToolsSpecs.Toolbox.Data.AssignObject.AssignObjectFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to a json object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAValueToAJsonObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a value to a json object", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I assign the value \"Bob\" to a json object \"[[@Person.Name]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("the json object \"[[@Person.Name]]\" equals \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table294 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table294.AddRow(new string[] {
                        "1",
                        "[[@Person.Name]] =",
                        "Bob"});
#line 12
 testRunner.And("the debug inputs as", ((string)(null)), table294, "And ");
#line hidden
            TechTalk.SpecFlow.Table table295 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table295.AddRow(new string[] {
                        "1",
                        "[[@Person.Name]] = Bob"});
#line 15
 testRunner.And("the debug output as", ((string)(null)), table295, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign values to json objects")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignValuesToJsonObjects()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign values to json objects", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I assign the value \"Bob\" to a json object \"[[@Person.FirstName]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.And("I assign the value \"Smith\" to a json object \"[[@Person.Surname]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("the json object \"[[@Person.FirstName]]\" equals \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 24
 testRunner.And("the json object \"[[@Person.Surname]]\" equals \"Smith\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table296 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table296.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] =",
                        "Bob"});
            table296.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] =",
                        "Smith"});
#line 26
 testRunner.And("the debug inputs as", ((string)(null)), table296, "And ");
#line hidden
            TechTalk.SpecFlow.Table table297 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table297.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] = Bob"});
            table297.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] = Smith"});
#line 30
 testRunner.And("the debug output as", ((string)(null)), table297, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign values with different types to json objects")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignValuesWithDifferentTypesToJsonObjects()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign values with different types to json objects", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.Given("I assign the value \"Bob\" to a json object \"[[@Person.FirstName]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
 testRunner.And("I assign the value \"Smith\" to a json object \"[[@Person.Surname]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.And("I assign the value 21 to a json object \"[[@Person.Age]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("the json object \"[[@Person.FirstName]]\" equals \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
 testRunner.And("the json object \"[[@Person.Surname]]\" equals \"Smith\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.And("the json object \"[[@Person.Age]]\" equals \"21\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table298 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table298.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] =",
                        "Bob"});
            table298.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] =",
                        "Smith"});
            table298.AddRow(new string[] {
                        "3",
                        "[[@Person.Age]] =",
                        "21"});
#line 44
 testRunner.And("the debug inputs as", ((string)(null)), table298, "And ");
#line hidden
            TechTalk.SpecFlow.Table table299 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table299.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] = Bob"});
            table299.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] = Smith"});
            table299.AddRow(new string[] {
                        "3",
                        "[[@Person.Age]] = 21"});
#line 49
 testRunner.And("the debug output as", ((string)(null)), table299, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value with plus in it to a json object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAValueWithPlusInItToAJsonObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a value with plus in it to a json object", ((string[])(null)));
#line 55
this.ScenarioSetup(scenarioInfo);
#line 56
 testRunner.Given("I assign the value \"+10\" to a json object \"[[@Person.Score]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 57
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.Then("the json object \"[[@Person.Score]]\" equals \"+10\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 59
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table300 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table300.AddRow(new string[] {
                        "1",
                        "[[@Person.Score]] =",
                        "+10"});
#line 60
 testRunner.And("the debug inputs as", ((string)(null)), table300, "And ");
#line hidden
            TechTalk.SpecFlow.Table table301 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table301.AddRow(new string[] {
                        "1",
                        "[[@Person.Score]] = +10"});
#line 63
 testRunner.And("the debug output as", ((string)(null)), table301, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value with minus in it to a json object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAValueWithMinusInItToAJsonObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a value with minus in it to a json object", ((string[])(null)));
#line 67
this.ScenarioSetup(scenarioInfo);
#line 68
 testRunner.Given("I assign the value \"-10\" to a json object \"[[@Person.Score]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 69
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then("the json object \"[[@Person.Score]]\" equals \"-10\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 71
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table302 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table302.AddRow(new string[] {
                        "1",
                        "[[@Person.Score]] =",
                        "-10"});
#line 72
 testRunner.And("the debug inputs as", ((string)(null)), table302, "And ");
#line hidden
            TechTalk.SpecFlow.Table table303 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table303.AddRow(new string[] {
                        "1",
                        "[[@Person.Score]] = -10"});
#line 75
 testRunner.And("the debug output as", ((string)(null)), table303, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a json object value to a json object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAJsonObjectValueToAJsonObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a json object value to a json object", ((string[])(null)));
#line 79
this.ScenarioSetup(scenarioInfo);
#line 80
 testRunner.Given("I assign the value \"Bob\" to a json object \"[[@Person.FirstName]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 81
 testRunner.And("I assign the value \"[[@Person.FirstName]]\" to a json object \"[[@Person.Surname]]\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 83
 testRunner.Then("the json object \"[[@Person.FirstName]]\" equals \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 84
 testRunner.And("the json object \"[[@Person.Surname]]\" equals \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table304 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table304.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] =",
                        "Bob"});
            table304.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] =",
                        "[[@Person.FirstName]] = Bob"});
#line 86
 testRunner.And("the debug inputs as", ((string)(null)), table304, "And ");
#line hidden
            TechTalk.SpecFlow.Table table305 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table305.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] = Bob"});
            table305.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] = Bob"});
#line 90
 testRunner.And("the debug output as", ((string)(null)), table305, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a json object value to a json object overwriting the existing value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAJsonObjectValueToAJsonObjectOverwritingTheExistingValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a json object value to a json object overwriting the existing value", ((string[])(null)));
#line 95
this.ScenarioSetup(scenarioInfo);
#line 96
 testRunner.Given("I assign the value \"Bob\" to a json object \"[[@Person.FirstName]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 97
 testRunner.And("I assign the value \"Smith\" to a json object \"[[@Person.Surname]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.And("I assign the value \"[[@Person.FirstName]]\" to a json object \"[[@Person.Surname]]\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 100
 testRunner.Then("the json object \"[[@Person.FirstName]]\" equals \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 101
 testRunner.And("the json object \"[[@Person.Surname]]\" equals \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table306 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table306.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] =",
                        "Bob"});
            table306.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] =",
                        "Smith"});
            table306.AddRow(new string[] {
                        "3",
                        "[[@Person.Surname]] = Smith",
                        "[[@Person.FirstName]] = Bob"});
#line 103
 testRunner.And("the debug inputs as", ((string)(null)), table306, "And ");
#line hidden
            TechTalk.SpecFlow.Table table307 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table307.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] = Bob"});
            table307.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] = Smith"});
            table307.AddRow(new string[] {
                        "3",
                        "[[@Person.Surname]] = Bob"});
#line 108
 testRunner.And("the debug output as", ((string)(null)), table307, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to an invalid json object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAValueToAnInvalidJsonObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a value to an invalid json object", ((string[])(null)));
#line 114
this.ScenarioSetup(scenarioInfo);
#line 115
 testRunner.Given("I assign the value \"[[@Person.Score]]\" to a json object \"[[@Person..Score]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 116
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 117
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 118
 testRunner.And("the execution has \"parse error\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign an invalid value to a json object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAnInvalidValueToAJsonObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign an invalid value to a json object", ((string[])(null)));
#line 120
this.ScenarioSetup(scenarioInfo);
#line 121
 testRunner.Given("I assign the value \"[[@Person..Score]]\" to a json object \"[[@Person..Score]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 122
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 123
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 124
 testRunner.And("the execution has \"parse error\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign multiple json variables to a json object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignMultipleJsonVariablesToAJsonObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign multiple json variables to a json object", ((string[])(null)));
#line 126
this.ScenarioSetup(scenarioInfo);
#line 127
 testRunner.Given("I assign the value \"Bob\" to a json object \"[[@Person.FirstName]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 128
 testRunner.And("I assign the value \"Smith\" to a json object \"[[@Person.Surname]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 129
 testRunner.And("I assign the value \"[[@Person.FirstName]][[@Person.Surname]]\" to a json object \"[" +
                    "[@Person.FullName]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 130
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 131
 testRunner.Then("the json object \"[[@Person.FirstName]]\" equals \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 132
 testRunner.And("the json object \"[[@Person.Surname]]\" equals \"Smith\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 133
 testRunner.And("the value of \"[[@Person.FullName]]\" equals BobSmith", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 134
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table308 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table308.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] =",
                        "Bob"});
            table308.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] =",
                        "Smith"});
            table308.AddRow(new string[] {
                        "3",
                        "[[@Person.FullName]] =",
                        "[[@Person.FirstName]][[@Person.Surname]] = BobSmith"});
#line 135
 testRunner.And("the debug inputs as", ((string)(null)), table308, "And ");
#line hidden
            TechTalk.SpecFlow.Table table309 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table309.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] = Bob"});
            table309.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] = Smith"});
            table309.AddRow(new string[] {
                        "3",
                        "[[@Person.FullName]]  = BobSmith"});
#line 140
 testRunner.And("the debug output as", ((string)(null)), table309, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign multiple json variables to a json object with a literal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignMultipleJsonVariablesToAJsonObjectWithALiteral()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign multiple json variables to a json object with a literal", ((string[])(null)));
#line 146
this.ScenarioSetup(scenarioInfo);
#line 147
 testRunner.Given("I assign the value \"Bob\" to a json object \"[[@Person.FirstName]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 148
 testRunner.And("I assign the value \"Smith\" to a json object \"[[@Person.Surname]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
 testRunner.And("I assign the value \"[[@Person.FirstName]] the killa [[@Person.Surname]]\" to a jso" +
                    "n object \"[[@Person.FullName]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 151
 testRunner.Then("the json object \"[[@Person.FirstName]]\" equals \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 152
 testRunner.And("the json object \"[[@Person.Surname]]\" equals \"Smith\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 153
 testRunner.And("the value of \"[[@Person.FullName]]\" equals Bob the killa Smith", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 154
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table310 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table310.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] =",
                        "Bob"});
            table310.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] =",
                        "Smith"});
            table310.AddRow(new string[] {
                        "3",
                        "[[@Person.FullName]] =",
                        "[[@Person.FirstName]] the killa [[@Person.Surname]] = Bob the killa Smith"});
#line 155
 testRunner.And("the debug inputs as", ((string)(null)), table310, "And ");
#line hidden
            TechTalk.SpecFlow.Table table311 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table311.AddRow(new string[] {
                        "1",
                        "[[@Person.FirstName]] = Bob"});
            table311.AddRow(new string[] {
                        "2",
                        "[[@Person.Surname]] = Smith"});
            table311.AddRow(new string[] {
                        "3",
                        "[[@Person.FullName]]  = Bob the killa Smith"});
#line 160
 testRunner.And("the debug output as", ((string)(null)), table311, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign values to a json object array within a json object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignValuesToAJsonObjectArrayWithinAJsonObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign values to a json object array within a json object", ((string[])(null)));
#line 166
this.ScenarioSetup(scenarioInfo);
#line 167
 testRunner.Given("I assign the value \"11\" to a json object \"[[@Person.Score(1)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 168
 testRunner.And("I assign the value \"22\" to a json object \"[[@Person.Score(2)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 169
 testRunner.And("I assign the value \"33\" to a json object \"[[@Person.Score(3)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 170
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 171
 testRunner.Then("the json object \"[[@Person.Score(1)]]\" equals \"11\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 172
 testRunner.And("the json object \"[[@Person.Score(2)]]\" equals \"22\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 173
 testRunner.And("the json object \"[[@Person.Score(3)]]\" equals \"33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 174
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table312 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table312.AddRow(new string[] {
                        "1",
                        "[[@Person.Score(1)]] =",
                        "11"});
            table312.AddRow(new string[] {
                        "2",
                        "[[@Person.Score(2)]] =",
                        "22"});
            table312.AddRow(new string[] {
                        "3",
                        "[[@Person.Score(3)]] =",
                        "33"});
#line 175
 testRunner.And("the debug inputs as", ((string)(null)), table312, "And ");
#line hidden
            TechTalk.SpecFlow.Table table313 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table313.AddRow(new string[] {
                        "1",
                        "[[@Person.Score(1)]] = 11"});
            table313.AddRow(new string[] {
                        "2",
                        "[[@Person.Score(2)]] = 22"});
            table313.AddRow(new string[] {
                        "3",
                        "[[@Person.Score(3)]] = 33"});
#line 180
 testRunner.And("the debug output as", ((string)(null)), table313, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign values to a json object array")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignValuesToAJsonObjectArray()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign values to a json object array", ((string[])(null)));
#line 186
this.ScenarioSetup(scenarioInfo);
#line 187
 testRunner.Given("I assign the value \"11\" to a json object \"[[@Score(1)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 188
 testRunner.And("I assign the value \"22\" to a json object \"[[@Score(2)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 189
 testRunner.And("I assign the value \"33\" to a json object \"[[@Score(3)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 190
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 191
 testRunner.Then("the json object \"[[@Score(1)]]\" equals \"11\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 192
 testRunner.And("the json object \"[[@Score(2)]]\" equals \"22\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 193
 testRunner.And("the json object \"[[@Score(3)]]\" equals \"33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 194
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table314 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table314.AddRow(new string[] {
                        "1",
                        "[[@Score(1)]] =",
                        "11"});
            table314.AddRow(new string[] {
                        "2",
                        "[[@Score(2)]] =",
                        "22"});
            table314.AddRow(new string[] {
                        "3",
                        "[[@Score(3)]] =",
                        "33"});
#line 195
 testRunner.And("the debug inputs as", ((string)(null)), table314, "And ");
#line hidden
            TechTalk.SpecFlow.Table table315 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table315.AddRow(new string[] {
                        "1",
                        "[[@Score(1)]] = 11"});
            table315.AddRow(new string[] {
                        "2",
                        "[[@Score(2)]] = 22"});
            table315.AddRow(new string[] {
                        "3",
                        "[[@Score(3)]] = 33"});
#line 200
 testRunner.And("the debug output as", ((string)(null)), table315, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to all elements of a json object array within a json object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAValueToAllElementsOfAJsonObjectArrayWithinAJsonObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a value to all elements of a json object array within a json object", ((string[])(null)));
#line 206
this.ScenarioSetup(scenarioInfo);
#line 207
 testRunner.Given("I assign the value \"11\" to a json object \"[[@Person.Score(1)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 208
 testRunner.And("I assign the value \"22\" to a json object \"[[@Person.Score(2)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 209
 testRunner.And("I assign the value \"33\" to a json object \"[[@Person.Score(3)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 210
 testRunner.And("I assign the value \"44\" to a json object \"[[@Person.Score(*)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 211
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 212
 testRunner.Then("the json object \"[[@Person.Score(1)]]\" equals \"44\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 213
 testRunner.And("the json object \"[[@Person.Score(2)]]\" equals \"44\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 214
 testRunner.And("the json object \"[[@Person.Score(3)]]\" equals \"44\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 215
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table316 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table316.AddRow(new string[] {
                        "1",
                        "[[@Person.Score(1)]] =",
                        "11"});
            table316.AddRow(new string[] {
                        "2",
                        "[[@Person.Score(2)]] =",
                        "22"});
            table316.AddRow(new string[] {
                        "3",
                        "[[@Person.Score(3)]] =",
                        "33"});
            table316.AddRow(new string[] {
                        "4",
                        "[[@Person.Score(*)]] =",
                        "44"});
#line 216
 testRunner.And("the debug inputs as", ((string)(null)), table316, "And ");
#line hidden
            TechTalk.SpecFlow.Table table317 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table317.AddRow(new string[] {
                        "1",
                        "[[@Person.Score(1)]] = 11"});
            table317.AddRow(new string[] {
                        "2",
                        "[[@Person.Score(2)]] = 22"});
            table317.AddRow(new string[] {
                        "3",
                        "[[@Person.Score(3)]] = 33"});
            table317.AddRow(new string[] {
                        "4",
                        "[[@Person.Score(*)]] = 44"});
            table317.AddRow(new string[] {
                        "",
                        "[[@Person.Score(*)]] = 44"});
            table317.AddRow(new string[] {
                        "",
                        "[[@Person.Score(*)]] = 44"});
#line 222
 testRunner.And("the debug output as", ((string)(null)), table317, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to all elements of a json object array")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAValueToAllElementsOfAJsonObjectArray()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a value to all elements of a json object array", ((string[])(null)));
#line 231
this.ScenarioSetup(scenarioInfo);
#line 232
 testRunner.Given("I assign the value \"11\" to a json object \"[[@Score(1)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 233
 testRunner.And("I assign the value \"22\" to a json object \"[[@Score(2)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 234
 testRunner.And("I assign the value \"33\" to a json object \"[[@Score(3)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 235
 testRunner.And("I assign the value \"44\" to a json object \"[[@Score(*)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 237
 testRunner.Then("the json object \"[[@Score(1)]]\" equals \"44\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 238
 testRunner.And("the json object \"[[@Score(2)]]\" equals \"44\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 239
 testRunner.And("the json object \"[[@Score(3)]]\" equals \"44\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 240
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table318 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table318.AddRow(new string[] {
                        "1",
                        "[[@Score(1)]] =",
                        "11"});
            table318.AddRow(new string[] {
                        "2",
                        "[[@Score(2)]] =",
                        "22"});
            table318.AddRow(new string[] {
                        "3",
                        "[[@Score(3)]] =",
                        "33"});
            table318.AddRow(new string[] {
                        "4",
                        "[[@Score(*)]] =",
                        "44"});
#line 241
 testRunner.And("the debug inputs as", ((string)(null)), table318, "And ");
#line hidden
            TechTalk.SpecFlow.Table table319 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table319.AddRow(new string[] {
                        "1",
                        "[[@Score(1)]] = 11"});
            table319.AddRow(new string[] {
                        "2",
                        "[[@Score(2)]] = 22"});
            table319.AddRow(new string[] {
                        "3",
                        "[[@Score(3)]] = 33"});
            table319.AddRow(new string[] {
                        "4",
                        "[[@Score(*)]] = 44"});
            table319.AddRow(new string[] {
                        "",
                        "[[@Score(*)]] = 44"});
            table319.AddRow(new string[] {
                        "",
                        "[[@Score(*)]] = 44"});
#line 247
 testRunner.And("the debug output as", ((string)(null)), table319, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to the end of a json object array within a json object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAValueToTheEndOfAJsonObjectArrayWithinAJsonObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a value to the end of a json object array within a json object", ((string[])(null)));
#line 256
this.ScenarioSetup(scenarioInfo);
#line 257
 testRunner.Given("I assign the value \"11\" to a json object \"[[@Person.Score()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 258
 testRunner.And("I assign the value \"22\" to a json object \"[[@Person.Score()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 259
 testRunner.And("I assign the value \"33\" to a json object \"[[@Person.Score()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 260
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 261
 testRunner.Then("the json object \"[[@Person.Score(1)]]\" equals \"11\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 262
 testRunner.And("the json object \"[[@Person.Score(2)]]\" equals \"22\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 263
 testRunner.And("the json object \"[[@Person.Score(3)]]\" equals \"33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 264
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table320 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table320.AddRow(new string[] {
                        "1",
                        "[[@Person.Score()]] =",
                        "11"});
            table320.AddRow(new string[] {
                        "2",
                        "[[@Person.Score()]] =",
                        "22"});
            table320.AddRow(new string[] {
                        "3",
                        "[[@Person.Score()]] =",
                        "33"});
#line 265
 testRunner.And("the debug inputs as", ((string)(null)), table320, "And ");
#line hidden
            TechTalk.SpecFlow.Table table321 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table321.AddRow(new string[] {
                        "1",
                        "[[@Person.Score()]] = 11"});
            table321.AddRow(new string[] {
                        "2",
                        "[[@Person.Score()]] = 22"});
            table321.AddRow(new string[] {
                        "3",
                        "[[@Person.Score()]] = 33"});
#line 270
 testRunner.And("the debug output as", ((string)(null)), table321, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a value to a new json object array within a json object")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAValueToANewJsonObjectArrayWithinAJsonObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a value to a new json object array within a json object", ((string[])(null)));
#line 276
this.ScenarioSetup(scenarioInfo);
#line 277
 testRunner.Given("I assign the value \"11\" to a json object \"[[@Person.Score1()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 278
 testRunner.And("I assign the value \"22\" to a json object \"[[@Person.Score2()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 279
 testRunner.And("I assign the value \"33\" to a json object \"[[@Person.Score3()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 280
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 281
 testRunner.Then("the json object \"[[@Person.Score1(1)]]\" equals \"11\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 282
 testRunner.And("the json object \"[[@Person.Score2(1)]]\" equals \"22\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 283
 testRunner.And("the json object \"[[@Person.Score3(1)]]\" equals \"33\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 284
    testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table322 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table322.AddRow(new string[] {
                        "1",
                        "[[@Person.Score1()]] =",
                        "11"});
            table322.AddRow(new string[] {
                        "2",
                        "[[@Person.Score2()]] =",
                        "22"});
            table322.AddRow(new string[] {
                        "3",
                        "[[@Person.Score3()]] =",
                        "33"});
#line 285
    testRunner.And("the debug inputs as", ((string)(null)), table322, "And ");
#line hidden
            TechTalk.SpecFlow.Table table323 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table323.AddRow(new string[] {
                        "1",
                        "[[@Person.Score1()]] = 11"});
            table323.AddRow(new string[] {
                        "2",
                        "[[@Person.Score2()]] = 22"});
            table323.AddRow(new string[] {
                        "3",
                        "[[@Person.Score3()]] = 33"});
#line 290
    testRunner.And("the debug output as", ((string)(null)), table323, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a json variable with a calculate expression")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAJsonVariableWithACalculateExpression()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a json variable with a calculate expression", ((string[])(null)));
#line 296
this.ScenarioSetup(scenarioInfo);
#line 297
 testRunner.Given("I assign the value \"=SUM(1,2,3)+1\" to a json object \"[[@Person.Score]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 298
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 299
 testRunner.Then("the json object \"[[@Person.Score]]\" equals \"7\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 300
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table324 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table324.AddRow(new string[] {
                        "1",
                        "[[@Person.Score]] =",
                        "SUM(1,2,3)+1"});
#line 301
 testRunner.And("the debug inputs as", ((string)(null)), table324, "And ");
#line hidden
            TechTalk.SpecFlow.Table table325 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table325.AddRow(new string[] {
                        "1",
                        "[[@Person.Score]] = 7"});
#line 304
 testRunner.And("the debug output as", ((string)(null)), table325, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a json variable with a calculate expression using json objects")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAJsonVariableWithACalculateExpressionUsingJsonObjects()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a json variable with a calculate expression using json objects", ((string[])(null)));
#line 308
this.ScenarioSetup(scenarioInfo);
#line 309
 testRunner.Given("I assign the value \"1\" to a json object \"[[@Person.Score(1)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 310
 testRunner.And("I assign the value \"2\" to a json object \"[[@Person.Score(2)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 311
 testRunner.And("I assign the value \"3\" to a json object \"[[@Person.Score(3)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 312
 testRunner.And("I assign the value \"=SUM([[@Person.Score(*)]])+1\" to a json object \"[[@Person.Tot" +
                    "alScore]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 313
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 314
 testRunner.Then("the json object \"[[@Person.TotalScore]]\" equals \"4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 315
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table326 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table326.AddRow(new string[] {
                        "1",
                        "[[@Person.Score(1)]] =",
                        "1"});
            table326.AddRow(new string[] {
                        "2",
                        "[[@Person.Score(2)]] =",
                        "2"});
            table326.AddRow(new string[] {
                        "3",
                        "[[@Person.Score(3)]] =",
                        "3"});
            table326.AddRow(new string[] {
                        "4",
                        "[[@Person.TotalScore]] =",
                        "SUM([[@Person.Score(*)]])+1 =SUM(1)+1"});
            table326.AddRow(new string[] {
                        "",
                        "",
                        "SUM([[@Person.Score(*)]])+1 =SUM(2)+1"});
            table326.AddRow(new string[] {
                        "",
                        "",
                        "SUM([[@Person.Score(*)]])+1 =SUM(3)+1"});
#line 316
 testRunner.And("the debug inputs as", ((string)(null)), table326, "And ");
#line hidden
            TechTalk.SpecFlow.Table table327 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table327.AddRow(new string[] {
                        "1",
                        "[[@Person.Score(1)]] = 1"});
            table327.AddRow(new string[] {
                        "2",
                        "[[@Person.Score(2)]] = 2"});
            table327.AddRow(new string[] {
                        "3",
                        "[[@Person.Score(3)]] = 3"});
            table327.AddRow(new string[] {
                        "4",
                        "[[@Person.TotalScore]] = 4"});
#line 324
 testRunner.And("the debug output as", ((string)(null)), table327, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a json variable with a calculate expression using json array")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAJsonVariableWithACalculateExpressionUsingJsonArray()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a json variable with a calculate expression using json array", ((string[])(null)));
#line 331
this.ScenarioSetup(scenarioInfo);
#line 332
 testRunner.Given("I assign the value \"1\" to a json object \"[[@Person.Score(1).val]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 333
 testRunner.And("I assign the value \"2\" to a json object \"[[@Person.Score(2).val]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 334
 testRunner.And("I assign the value \"3\" to a json object \"[[@Person.Score(3).val]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 335
 testRunner.And("I assign the value \"=SUM([[@Person.Score(*).val]])+1\" to a json object \"[[@Person" +
                    ".TotalScore]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 336
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 337
 testRunner.Then("the json object \"[[@Person.TotalScore]]\" equals \"4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 338
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table328 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table328.AddRow(new string[] {
                        "1",
                        "[[@Person.Score(1).val]] =",
                        "1"});
            table328.AddRow(new string[] {
                        "2",
                        "[[@Person.Score(2).val]] =",
                        "2"});
            table328.AddRow(new string[] {
                        "3",
                        "[[@Person.Score(3).val]] =",
                        "3"});
            table328.AddRow(new string[] {
                        "4",
                        "[[@Person.TotalScore]] =",
                        "SUM([[@Person.Score(1).val]])+1 =SUM(1)+1"});
            table328.AddRow(new string[] {
                        "",
                        "",
                        "SUM([[@Person.Score(2).val]])+1 =SUM(2)+1"});
            table328.AddRow(new string[] {
                        "",
                        "",
                        "SUM([[@Person.Score(3).val]])+1 =SUM(3)+1"});
#line 339
 testRunner.And("the debug inputs as", ((string)(null)), table328, "And ");
#line hidden
            TechTalk.SpecFlow.Table table329 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table329.AddRow(new string[] {
                        "1",
                        "[[@Person.Score(1).val]] = 1"});
            table329.AddRow(new string[] {
                        "2",
                        "[[@Person.Score(2).val]] = 2"});
            table329.AddRow(new string[] {
                        "3",
                        "[[@Person.Score(3).val]] = 3"});
            table329.AddRow(new string[] {
                        "4",
                        "[[@Person.TotalScore]] = 4"});
#line 347
 testRunner.And("the debug output as", ((string)(null)), table329, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign two json and data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignTwoJsonAndData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign two json and data", ((string[])(null)));
#line 354
this.ScenarioSetup(scenarioInfo);
#line 355
 testRunner.Given("I assign the value 1 to a json object \"[[@rec.a(1)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 356
 testRunner.And("I assign the value 2 to a json object \"[[@rec.a(2)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 357
 testRunner.And("I assign the value \"Test[[@rec.a(1)]].Warewolf[[@rec.a(2)]]\" to a json object \"[[" +
                    "@Lr.a(1)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 358
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 359
 testRunner.Then("the value of \"[[@Lr.a(1)]]\" equals \"Test1.Warewolf2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 360
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table330 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table330.AddRow(new string[] {
                        "1",
                        "[[@rec.a(1)]] =",
                        "1"});
            table330.AddRow(new string[] {
                        "2",
                        "[[@rec.a(2)]] =",
                        "2"});
            table330.AddRow(new string[] {
                        "3",
                        "[[@Lr.a(1)]] =",
                        "Test[[@rec.a(1)]].Warewolf[[@rec.a(2)]] = Test1.Warewolf2"});
#line 361
 testRunner.And("the debug inputs as", ((string)(null)), table330, "And ");
#line hidden
            TechTalk.SpecFlow.Table table331 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table331.AddRow(new string[] {
                        "1",
                        "[[@rec.a(1)]] = 1"});
            table331.AddRow(new string[] {
                        "2",
                        "[[@rec.a(2)]] = 2"});
            table331.AddRow(new string[] {
                        "3",
                        "[[@Lr.a(1)]]  = Test1.Warewolf2"});
#line 366
 testRunner.And("the debug output as", ((string)(null)), table331, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign the value of a negative json index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignTheValueOfANegativeJsonIndex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign the value of a negative json index", ((string[])(null)));
#line 372
this.ScenarioSetup(scenarioInfo);
#line 373
 testRunner.Given("I assign the value 10 to a json object \"[[@rec.set()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 374
 testRunner.And("I assign the value \"[[@rec.set(-1)]]\" to a json object \"[[var]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 375
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 376
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a record set variable equal to a group calculation (sum)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignARecordSetVariableEqualToAGroupCalculationSum()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a record set variable equal to a group calculation (sum)", ((string[])(null)));
#line 378
this.ScenarioSetup(scenarioInfo);
#line 379
 testRunner.Given("I assign the value 30 to a json object \"[[@rec(1).a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 380
 testRunner.And("I assign the value 30 to a json object \"[[@rec(1).b]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 381
 testRunner.And("I assign the value \"=SUM([[@rec(1).a]],[[@rec(1).b]])\" to a json object \"[[@Resul" +
                    "t.a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 382
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 383
 testRunner.Then("the value of \"[[@Result.a]]\" equals \"60\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 384
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table332 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table332.AddRow(new string[] {
                        "1",
                        "[[@rec(1).a]]   =",
                        "30"});
            table332.AddRow(new string[] {
                        "2",
                        "[[@rec(1).b]]   =",
                        "30"});
            table332.AddRow(new string[] {
                        "3",
                        "[[@Result.a]] =",
                        "SUM([[@rec(1).a]],[[@rec(1).b]]) = SUM(30,30)"});
#line 385
 testRunner.And("the debug inputs as", ((string)(null)), table332, "And ");
#line hidden
            TechTalk.SpecFlow.Table table333 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table333.AddRow(new string[] {
                        "1",
                        "[[@rec(1).a]] = 30"});
            table333.AddRow(new string[] {
                        "2",
                        "[[@rec(1).b]] = 30"});
            table333.AddRow(new string[] {
                        "3",
                        "[[@Result.a]] = 60"});
#line 390
 testRunner.And("the debug output as", ((string)(null)), table333, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Assign a variable equal to a group calculation with scalar and recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void AssignAVariableEqualToAGroupCalculationWithScalarAndRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a variable equal to a group calculation with scalar and recordset", ((string[])(null)));
#line 397
this.ScenarioSetup(scenarioInfo);
#line 398
 testRunner.Given("I assign the value 1 to a json object \"[[@a.b]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 399
 testRunner.And("I assign the value 2 to a json object \"[[@b.a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 400
 testRunner.And("I assign the value \"[[@a.b]]\" to a json object \"[[@rec(1).a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 401
 testRunner.And("I assign the value \"[[@b.a]]\" to a json object \"[[@rec(1).b]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 402
 testRunner.And("I assign the value \"=SUM([[@rec(1).a]],[[@rec(1).b]])\" to a json object \"[[@Resul" +
                    "t.a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 403
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 404
 testRunner.Then("the value of \"[[@Result.a]]\" equals \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 405
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table334 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table334.AddRow(new string[] {
                        "1",
                        "[[@a.b]]          =",
                        "1"});
            table334.AddRow(new string[] {
                        "2",
                        "[[@b.a]]          =",
                        "2"});
            table334.AddRow(new string[] {
                        "3",
                        "[[@rec(1).a]]   =",
                        "[[@a.b]] = 1"});
            table334.AddRow(new string[] {
                        "4",
                        "[[@rec(1).b]]   =",
                        "[[@b.a]] = 2"});
            table334.AddRow(new string[] {
                        "5",
                        "[[@Result.a]] =",
                        "SUM([[@rec(1).a]],[[@rec(1).b]]) = SUM(1,2)"});
#line 406
 testRunner.And("the debug inputs as", ((string)(null)), table334, "And ");
#line hidden
            TechTalk.SpecFlow.Table table335 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table335.AddRow(new string[] {
                        "1",
                        "[[@a.b]] = 1"});
            table335.AddRow(new string[] {
                        "2",
                        "[[@b.a]] = 2"});
            table335.AddRow(new string[] {
                        "3",
                        "[[@rec(1).a]] = 1"});
            table335.AddRow(new string[] {
                        "4",
                        "[[@rec(1).b]] = 2"});
            table335.AddRow(new string[] {
                        "5",
                        "[[@Result.a]] = 3"});
#line 413
 testRunner.And("the debug output as", ((string)(null)), table335, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Evaluating recursive recordset variable in a group calculation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void EvaluatingRecursiveRecordsetVariableInAGroupCalculation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Evaluating recursive recordset variable in a group calculation", ((string[])(null)));
#line 423
this.ScenarioSetup(scenarioInfo);
#line 424
 testRunner.Given("I assign the value 1 to a json object \"[[@rec(1).a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 425
 testRunner.And("I assign the value \"rec(1).a\" to a json object \"[[@rec(1).b]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 426
 testRunner.And("I assign the value \"=sum(1+1)\" to a json object \"[[@Result.a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 427
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 428
 testRunner.Then("the value of \"[[@Result.a]]\" equals \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 429
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table336 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table336.AddRow(new string[] {
                        "1",
                        "[[@rec(1).a]]   =",
                        "1"});
            table336.AddRow(new string[] {
                        "2",
                        "[[@rec(1).b]]   =",
                        "rec(1).a"});
            table336.AddRow(new string[] {
                        "3",
                        "[[@Result.a]] =",
                        "sum(1+1)"});
#line 430
 testRunner.And("the debug inputs as", ((string)(null)), table336, "And ");
#line hidden
            TechTalk.SpecFlow.Table table337 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table337.AddRow(new string[] {
                        "1",
                        "[[@rec(1).a]] = 1"});
            table337.AddRow(new string[] {
                        "2",
                        "[[@rec(1).b]] = rec(1).a"});
            table337.AddRow(new string[] {
                        "3",
                        "[[@Result.a]] =  2"});
#line 435
 testRunner.And("the debug output as", ((string)(null)), table337, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Evaluating recursive invalid recordset variable in a group calculation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Data")]
        public virtual void EvaluatingRecursiveInvalidRecordsetVariableInAGroupCalculation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Evaluating recursive invalid recordset variable in a group calculation", ((string[])(null)));
#line 442
this.ScenarioSetup(scenarioInfo);
#line 443
 testRunner.Given("I assign the value 1 to a json object \"[[@rec(1).a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 444
 testRunner.And("I assign the value \"rec(1).a*\" to a json object \"[[@rec(1).b]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 445
 testRunner.And("I assign the value \"=[[[[@rec(1).b]]]]+1\" to a json object \"[[@Result.c]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 446
 testRunner.When("the assign object tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 447
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
