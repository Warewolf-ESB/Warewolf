// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.AcceptanceTesting.Interactions
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DesignTestsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DesignTests.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DesignTests", "In order to avoid silly mistakes\r\nAs a math idiot\r\nI want to be told the sum of t" +
                    "wo numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "DesignTests")))
            {
                Warewolf.AcceptanceTesting.Interactions.DesignTestsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Change mappings of Recordset and expect dependencies popup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DesignTests")]
        public virtual void ChangeMappingsOfRecordsetAndExpectDependenciesPopup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change mappings of Recordset and expect dependencies popup", new string[] {
                        "DesignTests"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have a workflow \"MappingWF\" is opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I have \"Unsaved 1\" is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("I have \"MappingsWF\" on \"Unsaved 1\" design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("I focus at \"MappingWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset Name",
                        "Delete Visible",
                        "Note Visible",
                        "Note Highlighted",
                        "Input",
                        "Output"});
            table1.AddRow(new string[] {
                        "rec()",
                        "NO",
                        "Yes",
                        "Yes",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "rec().a",
                        "NO",
                        "Yes",
                        "Yes",
                        "Yes",
                        ""});
            table1.AddRow(new string[] {
                        "mr()",
                        "NO",
                        "Yes",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "mr().a",
                        "NO",
                        "Yes",
                        "",
                        "Yes",
                        ""});
            table1.AddRow(new string[] {
                        "",
                        "No",
                        "No",
                        "",
                        "",
                        ""});
#line 12
 testRunner.And("the \"MappingWF\" Recordset Variable mappings has", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset Name",
                        "Delete Visible",
                        "Note Visible",
                        "Note Highlighted",
                        "Input",
                        "Output"});
            table2.AddRow(new string[] {
                        "rec()",
                        "NO",
                        "Yes",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "rec().a",
                        "NO",
                        "Yes",
                        "Yes",
                        "",
                        "Yes"});
            table2.AddRow(new string[] {
                        "mr()",
                        "NO",
                        "Yes",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "mr().a",
                        "NO",
                        "Yes",
                        "",
                        "",
                        "Yes"});
            table2.AddRow(new string[] {
                        "",
                        "No",
                        "No",
                        "",
                        "",
                        ""});
#line 19
 testRunner.When("I edit \"MappingWF\" Recordset Variable mappings as", ((string)(null)), table2, "When ");
#line 26
 testRunner.And("I click on save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.Then("\"Inputs/Outputs Changed\" popup is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Change mappings of scalar and expect dependencies popup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void ChangeMappingsOfScalarAndExpectDependenciesPopup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change mappings of scalar and expect dependencies popup", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("I have a workflow \"MappingWF\" is opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.And("I have \"Unsaved 1\" is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.And("I have \"MappingsWF\" on \"Unsaved 1\" design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.And("I focus at \"MappingWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable Name",
                        "Delete Visible",
                        "Note Visible",
                        "Note Highlighted",
                        "Input",
                        "Output"});
            table3.AddRow(new string[] {
                        "Var",
                        "NO",
                        "Yes",
                        "No",
                        "",
                        "Yes"});
            table3.AddRow(new string[] {
                        "",
                        "NO",
                        "NO",
                        "NO",
                        "",
                        ""});
#line 36
 testRunner.And("the \"MappingWF\" Variable mappings has", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable Name",
                        "Delete Visible",
                        "Note Visible",
                        "Note Highlighted",
                        "Input",
                        "Output"});
            table4.AddRow(new string[] {
                        "Var",
                        "NO",
                        "Yes",
                        "No",
                        "Yes",
                        ""});
            table4.AddRow(new string[] {
                        "",
                        "NO",
                        "NO",
                        "NO",
                        "",
                        ""});
#line 40
 testRunner.When("I edit \"MappingWF\" Variable mappings as", ((string)(null)), table4, "When ");
#line 44
 testRunner.When("I click on save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.Then("\"Inputs/Outputs Changed\" popup is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Mappings out of date mark is visible on workflow service proc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void MappingsOutOfDateMarkIsVisibleOnWorkflowServiceProc()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mappings out of date mark is visible on workflow service proc", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
 testRunner.Given("I have a workflow \"MappingWF\" is opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
    testRunner.Given("I have \"Unsaved 1\" is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
 testRunner.And("I have \"MappingsWF\" on \"Unsaved 1\" design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Inpuy Data or [[Varaible]]",
                        "To Service"});
            table5.AddRow(new string[] {
                        "",
                        "rec(*).a"});
            table5.AddRow(new string[] {
                        "",
                        "mr(*).a"});
#line 53
 testRunner.And("Input mappings of \"MappingsWF\" are", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Output From Service",
                        "To [[Variable]]"});
            table6.AddRow(new string[] {
                        "var",
                        ""});
#line 57
 testRunner.And("Output mappings of \"MappingsWF\" are", ((string)(null)), table6, "And ");
#line 60
 testRunner.And("Edit button is \"Visible\" on \"MappingsWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.And("Done button is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.When("I have focus on tab \"MappingWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
 testRunner.Then("the \"Assign\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable Name",
                        "Delete Visible",
                        "Note Visible",
                        "Note Highlighted",
                        "Input",
                        "Output"});
            table7.AddRow(new string[] {
                        "Var",
                        "NO",
                        "Yes",
                        "No",
                        "",
                        ""});
            table7.AddRow(new string[] {
                        "",
                        "NO",
                        "NO",
                        "NO",
                        "",
                        ""});
#line 64
 testRunner.When("I edit mappings", ((string)(null)), table7, "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset Name",
                        "Delete Visible",
                        "Note Visible",
                        "Note Highlighted",
                        "Input",
                        "Output"});
            table8.AddRow(new string[] {
                        "rec()",
                        "NO",
                        "Yes",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "rec().a",
                        "NO",
                        "Yes",
                        "Yes",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "mr()",
                        "NO",
                        "Yes",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "mr().a",
                        "NO",
                        "Yes",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "",
                        "No",
                        "No",
                        "",
                        "",
                        ""});
#line 68
 testRunner.And("I edit the Recordset Names are", ((string)(null)), table8, "And ");
#line 75
 testRunner.And("I click on save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.Then("\"Inputs/Outputs Changed\" popup is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 77
 testRunner.And("I have focus on tab \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
 testRunner.And("I have \"MappingsWF\" on \"Unsaved 1\" design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
 testRunner.And("\"MappingsWF\" proc Mappings out of date is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
 testRunner.When("I open \"MappingsWF\" large view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 81
 testRunner.Then("Input mappings of \"MappingsWF\" are \"Invisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 82
 testRunner.And("Output mappings of \"MappingsWF\" are \"Invisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
 testRunner.And("Fix button is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
 testRunner.And("Done button is \"Invisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
 testRunner.When("I close \"MappingsWF\" large view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 86
 testRunner.Then("\"MappingsWF\" proc Mappings out of date is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 87
 testRunner.When("I open \"MappingsWF\" large view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 88
 testRunner.And("click on \"Fix\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
 testRunner.Then("Done button is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 90
 testRunner.When("I click on \"Done\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 91
 testRunner.Then("\"MappingsWF\" small view is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Edit button on service proc is opening workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void EditButtonOnServiceProcIsOpeningWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit button on service proc is opening workflow", ((string[])(null)));
#line 94
this.ScenarioSetup(scenarioInfo);
#line 95
 testRunner.Given("I have \"Unsaved 1\" is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 96
 testRunner.And("I have \"MappingsWF\" on \"Unsaved 1\" design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.And("Edit button is \"Visible\" on \"MappingsWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.When("click on \"Edit\" on \"MappingsWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
 testRunner.Then("workflow \"MappingWF\" is opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 100
 testRunner.And("Focus is at \"MappingWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow hyper link in Debug output is opening service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void WorkflowHyperLinkInDebugOutputIsOpeningService()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow hyper link in Debug output is opening service", ((string[])(null)));
#line 102
this.ScenarioSetup(scenarioInfo);
#line 103
 testRunner.Given("I have \"Unsaved 1\" is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 104
 testRunner.And("I have \"MappingsWF\" on \"Unsaved 1\" design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
 testRunner.When("I Debug \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 106
 testRunner.Then("Workflow \"MappingsWF\" hyperlink is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 107
 testRunner.When("I click on hyperlink of \"Workflow: MappingsWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
 testRunner.Then("workflow \"MappingWF\" is opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Service hyper link in Debug output is opening service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void ServiceHyperLinkInDebugOutputIsOpeningService()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Service hyper link in Debug output is opening service", ((string[])(null)));
#line 110
this.ScenarioSetup(scenarioInfo);
#line 111
 testRunner.Given("I have \"Unsaved 1\" is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 112
 testRunner.And("I have \"Service\" on \"Unsaved 1\" design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
 testRunner.When("I Debug \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 114
 testRunner.Then("Workflow \"Service\" hyperlink is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 115
 testRunner.When("I click on hyperlink of \"Service: Service\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 116
 testRunner.Then("workflow \"Service\" is opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Opening remote wflw From design surface")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void OpeningRemoteWflwFromDesignSurface()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Opening remote wflw From design surface", ((string[])(null)));
#line 118
this.ScenarioSetup(scenarioInfo);
#line 119
 testRunner.Given("I have \"Unsaved 1\" is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 120
 testRunner.And("I have connected to remote \"Sandbox-1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 121
 testRunner.And("I have \"RemoteWf\" on \"Unsaved 1\" design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.When("I Debug \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 123
 testRunner.Then("Workflow \"Service\" hyperlink is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 124
 testRunner.When("I click on hyperlink of \"Workflow: RemoteWf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 125
 testRunner.Then("workflow \"Service\" is opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 126
 testRunner.And("\"Create connection\" popup is \"Not Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Opening remote wflw on design surface prompts user to make connection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void OpeningRemoteWflwOnDesignSurfacePromptsUserToMakeConnection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Opening remote wflw on design surface prompts user to make connection", ((string[])(null)));
#line 128
this.ScenarioSetup(scenarioInfo);
#line 129
 testRunner.Given("I have \"Unsaved 1\" is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 130
 testRunner.And("I have not connected to remote \"Sandbox-1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
 testRunner.And("I have \"RemoteWf\" on \"Unsaved 1\" design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 132
 testRunner.When("I Debug \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 133
 testRunner.Then("Workflow \"Service\" hyperlink is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 134
 testRunner.When("I click on hyperlink of \"Workflow: RemoteWf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 135
 testRunner.Then("workflow \"Service\" is not opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 136
 testRunner.And("\"Create connection\" popup is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing Services which has dependencies is throwing popup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void EditingServicesWhichHasDependenciesIsThrowingPopup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Editing Services which has dependencies is throwing popup", ((string[])(null)));
#line 138
this.ScenarioSetup(scenarioInfo);
#line 139
    testRunner.Given("DB Services \"Testsrv\" is opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Default Value",
                        "Required Field",
                        "Empty is Null"});
            table9.AddRow(new string[] {
                        "CountryName",
                        "",
                        "Yes",
                        ""});
            table9.AddRow(new string[] {
                        "Prefix",
                        "",
                        "Yes",
                        ""});
#line 140
 testRunner.When("I edit \"Testsrv\" mappings", ((string)(null)), table9, "When ");
#line 144
 testRunner.Then("\"Inputs/Outputs Changed\" popup is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DBService edit option opens dbservice")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void DBServiceEditOptionOpensDbservice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DBService edit option opens dbservice", ((string[])(null)));
#line 147
this.ScenarioSetup(scenarioInfo);
#line 148
    testRunner.Given("I have \"Unsaved 1\" is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 149
 testRunner.And("I have \"Testsrv\" on \"Unsaved 1\" design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.And("Edit button is \"Visible\" on \"MappingsWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 151
 testRunner.When("click on \"Edit\" on \"Testsrv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 152
 testRunner.Then("DB Services \"Testsrv\" is opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 153
 testRunner.And("Focus is at \"Testsrv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Service update option is visible on the proc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void ServiceUpdateOptionIsVisibleOnTheProc()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Service update option is visible on the proc", ((string[])(null)));
#line 155
this.ScenarioSetup(scenarioInfo);
#line 156
    testRunner.Given("I have \"Unsaved 1\" is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 157
 testRunner.And("I have \"Testsrv\" on \"Unsaved 1\" design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
 testRunner.When("I open \"Testsrv\" large view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Inpuy Data or [[Varaible]]",
                        "To Service"});
            table10.AddRow(new string[] {
                        "[[CountryName]]",
                        "CountryName"});
            table10.AddRow(new string[] {
                        "[[Prefix]]",
                        "Prefix"});
#line 159
 testRunner.Then("Input mappings of \"Testsrv\" are", ((string)(null)), table10, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Output From Service",
                        "To [[Variable]]"});
            table11.AddRow(new string[] {
                        "[[dbo_Pr_CitiesGetByCountry().CityID]]",
                        "[[dbo_Pr_CitiesGetByCountry().CityID]]"});
            table11.AddRow(new string[] {
                        "[[dbo_Pr_CitiesGetByCountry().City]]",
                        "[[dbo_Pr_CitiesGetByCountry().City]]"});
#line 163
 testRunner.And("Output mappings of \"Testsrv\" are", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Default Value",
                        "Required Field",
                        "Empty is Null"});
            table12.AddRow(new string[] {
                        "CountryName",
                        "Test",
                        "Yes",
                        ""});
            table12.AddRow(new string[] {
                        "Prefix",
                        "Warewolf",
                        "Yes",
                        ""});
#line 167
 testRunner.When("I edit \"Testsrv\" mappings", ((string)(null)), table12, "When ");
#line 171
 testRunner.And("I click on save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
 testRunner.Then("\"Inputs/Outputs Changed\" popup is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 173
 testRunner.When("I have focus on tab \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 174
 testRunner.Then("I have \"Testsrv\" on \"Unsaved 1\" design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 175
 testRunner.And("\"Testsrv\" proc Mappings out of date is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
 testRunner.When("I open \"Testsrv\" large view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 177
 testRunner.Then("Input mappings of \"MappingsWF\" are \"Invisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 178
 testRunner.And("Output mappings of \"MappingsWF\" are \"Invisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
 testRunner.And("Fix button is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 180
 testRunner.And("Done button is \"Invisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 181
 testRunner.When("I close \"MappingsWF\" large view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 182
 testRunner.Then("\"MappingsWF\" proc Mappings out of date is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 183
 testRunner.When("I open \"MappingsWF\" large view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 184
 testRunner.And("click on \"Fix\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 185
 testRunner.Then("Done button is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Inpuy Data or [[Varaible]]",
                        "To Service"});
            table13.AddRow(new string[] {
                        "Test",
                        "CountryName"});
            table13.AddRow(new string[] {
                        "Warewolf",
                        "Prefix"});
#line 186
 testRunner.Then("Input mappings of \"Testsrv\" are", ((string)(null)), table13, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Output From Service",
                        "To [[Variable]]"});
            table14.AddRow(new string[] {
                        "[[dbo_Pr_CitiesGetByCountry().CityID]]",
                        "[[dbo_Pr_CitiesGetByCountry().CityID]]"});
            table14.AddRow(new string[] {
                        "[[dbo_Pr_CitiesGetByCountry().City]]",
                        "[[dbo_Pr_CitiesGetByCountry().City]]"});
#line 190
 testRunner.And("Output mappings of \"Testsrv\" are", ((string)(null)), table14, "And ");
#line 194
 testRunner.When("I click on \"Done\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 195
 testRunner.Then("\"MappingsWF\" small view is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Saving a workflow is updaing name of design surface")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void SavingAWorkflowIsUpdaingNameOfDesignSurface()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Saving a workflow is updaing name of design surface", ((string[])(null)));
#line 199
this.ScenarioSetup(scenarioInfo);
#line 200
    testRunner.Given("I have \"Unsaved 1\" is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 201
 testRunner.And("tab is opened as \"Unsaved 1\" with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 202
 testRunner.And("Design surface name is \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 203
 testRunner.And("I save Unsaved 1 as \"Workflow\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 204
 testRunner.Then("tab is opened as \"Workflow\" with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 205
 testRunner.And("Design surface name is \"Workflow\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Renaming a saved workflow is updaing name on design surface")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void RenamingASavedWorkflowIsUpdaingNameOnDesignSurface()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Renaming a saved workflow is updaing name on design surface", ((string[])(null)));
#line 208
this.ScenarioSetup(scenarioInfo);
#line 209
    testRunner.Given("I have \"Workflow\" is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 210
 testRunner.And("tab is opened as \"Workflow\" with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 211
 testRunner.And("Design surface name is \"Workflow\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 212
 testRunner.And("I Rename \"Workflow\" as \"RenamedWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 213
 testRunner.Then("tab is opened as \"RenamedWF\" with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 214
 testRunner.And("Design surface name is \"RenamedWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("While workflow is debuging tools are highligting by showing the flow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void WhileWorkflowIsDebugingToolsAreHighligtingByShowingTheFlow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("While workflow is debuging tools are highligting by showing the flow", ((string[])(null)));
#line 216
this.ScenarioSetup(scenarioInfo);
#line 217
   testRunner.Given("I have \"Unsave 1\" is opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 218
   testRunner.And("I have \"Assign\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 219
   testRunner.And("I have \"Base Conversion\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 220
   testRunner.And("I have \"Case Conversion\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 221
   testRunner.And("I have \"Data Merge\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 222
   testRunner.And("I have \"Data Split\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 223
   testRunner.And("I have \"Find Index\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 224
   testRunner.And("I have \"Replace\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 225
   testRunner.And("I have \"Unique\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 226
   testRunner.And("I have \"Sort\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 227
   testRunner.When("I Debug \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Assign"});
            table15.AddRow(new string[] {
                        "Base Conversion"});
            table15.AddRow(new string[] {
                        "Case Conversion"});
            table15.AddRow(new string[] {
                        "Data Merge"});
            table15.AddRow(new string[] {
                        "Data Split"});
            table15.AddRow(new string[] {
                        "Find Index"});
            table15.AddRow(new string[] {
                        "Replace"});
            table15.AddRow(new string[] {
                        "Unique"});
            table15.AddRow(new string[] {
                        "Sort"});
#line 228
   testRunner.Then("design surface tools are highlighted as", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService(string select, string assign, string baseConversion, string caseConversion, string dataMerge, string dataSplit, string findIndex, string replace, string unique, string sort, string testsrv, string workflow, string webservice, string remoteWorkflow, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("By Selecting each Debug Output is highlighting related tool or service", exampleTags);
#line 240
this.ScenarioSetup(scenarioInfo);
#line 241
   testRunner.Given("I have \"Unsave 1\" is opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 242
   testRunner.And("I have \"Assign\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 243
   testRunner.And("I have \"Base Conversion\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 244
   testRunner.And("I have \"Case Conversion\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 245
   testRunner.And("I have \"Data Merge\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 246
   testRunner.And("I have \"Data Split\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 247
   testRunner.And("I have \"Find Index\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 248
   testRunner.And("I have \"Replace\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 249
   testRunner.And("I have \"Unique\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 250
   testRunner.And("I have \"Sort\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 251
   testRunner.And("I have \"Testsrv\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 252
   testRunner.And("I have \"Workflow\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 253
   testRunner.And("I have \"Webservice\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 254
   testRunner.And("I have \"RemoteWorkflow\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 255
   testRunner.When("I Debug \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 256
   testRunner.Then("debug output is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 257
   testRunner.When(string.Format("I select \"{0}\"", select), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 258
   testRunner.Then(string.Format("\"Assign\" on design is \"{0}\"", assign), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 259
   testRunner.Then(string.Format("\"Base Conversion\" on design is \"{0}\"", baseConversion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 260
   testRunner.Then(string.Format("\"Case Conversion\" on design is \"{0}\"", caseConversion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 261
   testRunner.Then(string.Format("\"Data Merge\" on design is \"{0}\"", dataMerge), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 262
   testRunner.Then(string.Format("\"Data Split\" on design is \"{0}\"", dataSplit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 263
   testRunner.Then(string.Format("\"Find Index\" on design is \"{0}\"", findIndex), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 264
   testRunner.Then(string.Format("\"Replace\" on design is \"{0}\"", replace), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 265
   testRunner.Then(string.Format("\"Unique\" on design is \"{0}\"", unique), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 266
   testRunner.Then(string.Format("\"Sort\" on design is \"{0}\"", sort), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 267
   testRunner.Then(string.Format("\"Testsrv\" on design is \"{0}\"", testsrv), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 268
   testRunner.Then(string.Format("\"Workflow\" on design is \"{0}\"", workflow), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 269
   testRunner.Then(string.Format("\"Webservice\" on design is \"{0}\"", webservice), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 270
   testRunner.Then(string.Format("\"RemoteWorkflow\" on design is \"{0}\"", remoteWorkflow), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Step: Assign")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Step: Assign")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Not Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_StepAssign()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Step: Assign", "Highlight", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Step: Base Conversion")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Step: Base Conversion")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Not Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Not Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_StepBaseConversion()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Step: Base Conversion", "Not Highlight", "Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Step: Case Conversion")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Step: Case Conversion")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Not Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Not Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_StepCaseConversion()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Step: Case Conversion", "Not Highlight", "Not Highlighted", "Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Step: Data Merge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Step: Data Merge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Not Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Not Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_StepDataMerge()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Step: Data Merge", "Not Highlight", "Not Highlighted", "Not Highlighted", "Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Step: Data Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Step: Data Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Not Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Not Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_StepDataSplit()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Step: Data Split", "Not Highlight", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Step: Find Index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Step: Find Index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Not Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Not Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_StepFindIndex()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Step: Find Index", "Not Highlight", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Step: Replace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Step: Replace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Not Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Not Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_StepReplace()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Step: Replace", "Not Highlight", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Step: Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Step: Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Not Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Not Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_StepSort()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Step: Sort", "Not Highlight", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Step: Testsrv")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Step: Testsrv")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Not Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Not Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_StepTestsrv()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Step: Testsrv", "Not Highlight", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Workflow: Workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Workflow: Workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Not Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Not Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_WorkflowWorkflow()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Workflow: Workflow", "Not Highlight", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Highlighted", "Not Highlighted", "Not Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Service: Webservice")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Service: Webservice")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Not Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Not Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_ServiceWebservice()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Service: Webservice", "Not Highlight", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Highlighted", "Not Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Workflow: RemoteWorkflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Workflow: RemoteWorkflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Not Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_WorkflowRemoteWorkflow()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Workflow: RemoteWorkflow", "Not Highlight", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Input data hyper link has max 3 lines and for bigger data scroll bar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void InputDataHyperLinkHasMax3LinesAndForBiggerDataScrollBar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Input data hyper link has max 3 lines and for bigger data scroll bar", ((string[])(null)));
#line 289
this.ScenarioSetup(scenarioInfo);
#line 290
    testRunner.Given("I have \"Unsave 1\" is opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 291
  testRunner.And("I have \"Assign\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable Name",
                        "Delete Visible",
                        "Note Visible",
                        "Note Highlighted",
                        "Input",
                        "Output"});
            table16.AddRow(new string[] {
                        "Var",
                        "NO",
                        "Yes",
                        "No",
                        "Yes",
                        ""});
            table16.AddRow(new string[] {
                        "",
                        "NO",
                        "NO",
                        "NO",
                        "",
                        ""});
#line 292
  testRunner.And("the Variable Names are", ((string)(null)), table16, "And ");
#line 296
  testRunner.And("Input hyper link contains \"http://rsaklf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 297
  testRunner.And("Input hyper link has No scroll bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 298
  testRunner.When("I Debug \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 299
  testRunner.Then("\"Debug input data\" dialogbox is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 300
  testRunner.And(@"I enter ""Var"" value as ""Input data hyper link has max 3 lines and for bigger data scroll bar Input data hyper link has max 3 lines and for bigger data scroll bar Input data hyper link has max 3 lines and for bigger data scroll bar Input data hyper link has max 3 lines and for bigger data scroll barInput data hyper link has max 3 lines and for bigger data scroll bar Input data hyper link has max 3 lines and for bigger data scroll bar Input data hyper link has max 3 lines and for bigger data scroll bar Input data hyper link has max 3 lines and for bigger data scroll bar Input data hyper link has max 3 lines and for bigger data scroll barInput data hyper link has max 3 lines and for bigger data scroll bar""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 301
  testRunner.And("Input hyper link has No scroll bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 302
  testRunner.When("I Debug \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 303
  testRunner.Then(@"I enter ""Var"" value as ""Input data hyper link has max 3 lines and for bigger data scroll bar Input data hyper link has max 3 lines and for bigger data scroll bar Input data hyper link has max 3 lines and for bigger data scroll bar Input data hyper link has max 3 lines and for bigger data scroll barInput data hyper link has max 3 lines and for bigger data scroll bar Input data hyper link has max 3 lines and for bigger data scroll bar Input data hyper link has max 3 lines and for bigger data scroll bar Input data hyper link has max 3 lines and for bigger data scroll bar Input data hyper link has max 3 lines and for bigger data scroll barInput data hyper link has max 3 lines and for bigger data scroll bar lines and for bigger data scroll barInput data hyper link has max 3 lines and for bigger data scroll bar lines and for bigger data scroll barInput data hyper link has max 3 lines and for bigger data scroll bar""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 304
  testRunner.And("Input hyper link has scroll bar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Dragging local wf to remote design surface throws an error")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void DraggingLocalWfToRemoteDesignSurfaceThrowsAnError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dragging local wf to remote design surface throws an error", ((string[])(null)));
#line 307
this.ScenarioSetup(scenarioInfo);
#line 308
  testRunner.Given("I have \"Unsave 1\" is opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 309
  testRunner.And("I connected to remote server \"Remote\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 310
  testRunner.When("I open remore design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 311
  testRunner.Then("\"Unsaves 1 - Remote\" is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 312
  testRunner.When("I have local workflow \"Workflow\" on \"Unsaves 1 - Remote\" design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 313
  testRunner.Then("\"Invalid Designer Operation\" popup is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Opening and closing ten unsaved workflows is prompting to save")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void OpeningAndClosingTenUnsavedWorkflowsIsPromptingToSave()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Opening and closing ten unsaved workflows is prompting to save", ((string[])(null)));
#line 316
this.ScenarioSetup(scenarioInfo);
#line 317
     testRunner.Given("I have \"Unsaved 1\" is opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 318
  testRunner.And("I have \"Unsaved 2\" is opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 319
  testRunner.And("I have \"Unsaved 3\" is opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 320
  testRunner.And("I have \"Unsaved 4\" is opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 321
  testRunner.And("I have \"Unsaved 5\" is opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 322
  testRunner.And("I have \"Unsaved 6\" is opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 323
  testRunner.And("I have \"Unsaved 7\" is opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 324
  testRunner.And("I have \"Unsaved 8\" is opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 325
  testRunner.And("I have \"Unsaved 9\" is opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 326
  testRunner.And("I have \"Unsaved 10\" is opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 327
  testRunner.When("I close all but this at \"Unsaved 10\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 328
  testRunner.Then("Save popup is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("When I swap servers in Settings prompts to save unchanged settings")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void WhenISwapServersInSettingsPromptsToSaveUnchangedSettings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When I swap servers in Settings prompts to save unchanged settings", ((string[])(null)));
#line 331
this.ScenarioSetup(scenarioInfo);
#line 332
     testRunner.Given("I have \"settings\" tab opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 333
  testRunner.And("I have connected to remote \"Sandbox-1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 334
  testRunner.And("I select \"localhost(Connected)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 335
  testRunner.And("I have \"Save\" button \"Enabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 336
  testRunner.When("I select \"Sandbox-1\" in settings tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 337
  testRunner.Then("\"Settings have changed\" popup is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("When I swap servers in Scheduler prompts to save unchanged settings")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void WhenISwapServersInSchedulerPromptsToSaveUnchangedSettings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When I swap servers in Scheduler prompts to save unchanged settings", ((string[])(null)));
#line 340
this.ScenarioSetup(scenarioInfo);
#line 341
     testRunner.Given("I have \"Scheduler\" tab opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 342
  testRunner.And("I have connected to remote \"Sandbox-1 (Connected)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 343
  testRunner.And("I select \"localhost(Connected)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 344
  testRunner.And("I have \"Save\" button \"Enabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 345
  testRunner.When("I select \"Sandbox-1 (Connected)\" in Scheduler tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 346
  testRunner.Then("\"Scheduler Task has changes\" popup is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Studio closes when unsaved designs surfaces are open prompts to save")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void StudioClosesWhenUnsavedDesignsSurfacesAreOpenPromptsToSave()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Studio closes when unsaved designs surfaces are open prompts to save", ((string[])(null)));
#line 349
this.ScenarioSetup(scenarioInfo);
#line 350
     testRunner.Given("I have \"Unsavd 1\" opened in design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 351
  testRunner.And("I have \"Unsaved 2\" is opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 352
  testRunner.And("I have \"Unsaved 3\" is opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 353
  testRunner.And("I have \"Unsaved 4\" is opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 354
  testRunner.And("I have \"Unsaved 5\" is opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 355
  testRunner.When("i close the studio", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 356
  testRunner.Then("\"Save\" popup is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Studio Resumes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void StudioResumes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Studio Resumes", ((string[])(null)));
#line 359
this.ScenarioSetup(scenarioInfo);
#line 360
     testRunner.Given("I have \"workflow\" opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 361
  testRunner.And("I have \"SDBervice\" opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 362
  testRunner.And("I have \"Settings\" opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 363
  testRunner.And("I have \"Scheduler\" opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 364
  testRunner.And("I have \"WebService\" opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 365
  testRunner.And("i have \"Unsaved 1 \" is opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 366
  testRunner.When("i restart the studio", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 367
  testRunner.Then("I have \"workflow\" opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 368
  testRunner.And("I have \"SDBervice\" opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 369
  testRunner.And("I have \"Settings\" opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 370
  testRunner.And("I have \"Scheduler\" opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 371
  testRunner.And("I have \"WebService\" opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 372
  testRunner.And("i have \"Unsaved 1 \" is opened with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Floating the unsaved design surface and click on save")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void FloatingTheUnsavedDesignSurfaceAndClickOnSave()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Floating the unsaved design surface and click on save", ((string[])(null)));
#line 376
this.ScenarioSetup(scenarioInfo);
#line 377
      testRunner.Given("I have \"Unbsaved 1\" opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 378
   testRunner.And("I have \"Assign\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 379
   testRunner.And("I have \"Data Merge\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 380
   testRunner.When("I Float the \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 381
   testRunner.Then("focus is at \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 382
   testRunner.And("Design surface name is \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 383
   testRunner.And("I have \"Assign\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 384
   testRunner.And("I have \"Data Merge\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 385
   testRunner.When("I Debug \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 386
   testRunner.And("variable list is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 387
   testRunner.Then("debug output is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 388
   testRunner.And("Save is \"Enabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 389
   testRunner.When("I click on \"Save\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 390
   testRunner.Then("\"save\" dialogbox is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 391
   testRunner.When("I save as \"Floating\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 392
   testRunner.Then("the \"Unsaved 1\" is updated as \"Floating\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Save enables depends on focus when Floating design surface and settings")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void SaveEnablesDependsOnFocusWhenFloatingDesignSurfaceAndSettings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Save enables depends on focus when Floating design surface and settings", ((string[])(null)));
#line 395
this.ScenarioSetup(scenarioInfo);
#line 396
     testRunner.Given("I have \"Unsave 1\" is opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 397
     testRunner.And("I have \"Assign\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 398
     testRunner.And("I have \"Settings\" opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 399
     testRunner.When("I Float the \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 400
     testRunner.And("I Float the \"Settings\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 401
     testRunner.When("I have focus at \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 402
  testRunner.Then("Save is \"Enabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 403
  testRunner.When("I have focus at \"Settings\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 404
  testRunner.Then("Save is \"Disabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Floating all the screens and minimizing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void FloatingAllTheScreensAndMinimizing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Floating all the screens and minimizing", ((string[])(null)));
#line 408
this.ScenarioSetup(scenarioInfo);
#line 409
    testRunner.Given("I have studio running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 410
 testRunner.And("I have \"Settings\" opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 411
 testRunner.And("Explorer is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 412
 testRunner.And("Variable list is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 413
 testRunner.And("Toolbox is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 414
 testRunner.When("I float \"Explorer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 415
 testRunner.Then("explorer has \"Mininize\" option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 416
 testRunner.And("explorer has \"Maximize\" option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 417
 testRunner.When("i click on explorer \"Mininize\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 418
 testRunner.Then("explorer is \"Mininmized\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 419
 testRunner.When("I float \"Toolbox\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 420
 testRunner.Then("Toolbox has \"Mininize\" option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 421
 testRunner.And("Toolbox has \"Maximize\" option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 422
 testRunner.When("I click on Toolbox \"Mininize\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 423
 testRunner.Then("Toolbox is \"Mininmized\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 424
 testRunner.When("I click on toolbox \"Maximize\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 425
 testRunner.Then("toolbox is \"Maximized\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 426
 testRunner.When("I click on explorer \"Maximize\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 427
 testRunner.Then("explorer is \"Maximized\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Floating output is generating debug output")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void FloatingOutputIsGeneratingDebugOutput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Floating output is generating debug output", ((string[])(null)));
#line 431
this.ScenarioSetup(scenarioInfo);
#line 432
    testRunner.Given("I have \"Unsaved 1\" opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 433
 testRunner.And("I have \"Assign\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 434
 testRunner.And("I have \"Data Merge\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 435
 testRunner.And("I float \"Debug Output\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 436
 testRunner.And("I focused at \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 437
 testRunner.When("I debug", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 438
 testRunner.Then("debug output is generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 439
 testRunner.And("\"Assign\" is visible in debug output", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 440
 testRunner.And("\"Data Merge\" is visible in debug output", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
