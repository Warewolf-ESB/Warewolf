/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Input, ChangeDetectionStrategy, Output, EventEmitter } from '@angular/core';
import { fromEvent } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { ScriptLoaderService } from '../script-loader/script-loader.service';
import { GoogleChartPackagesHelper } from '../helpers/google-chart-packages.helper';
var GoogleChartComponent = /** @class */ (function () {
    function GoogleChartComponent(element, loaderService) {
        this.element = element;
        this.loaderService = loaderService;
        this.roles = new Array();
        this.width = undefined;
        this.height = undefined;
        this.dynamicResize = false;
        this.options = {};
        this.error = new EventEmitter();
        this.ready = new EventEmitter();
        this.select = new EventEmitter();
        this.mouseenter = new EventEmitter();
        this.mouseleave = new EventEmitter();
    }
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.type == null) {
            throw new Error('Can\'t create a Google Chart without specifying a type!');
        }
        if (this.data == null) {
            throw new Error('Can\'t create a Google Chart without data!');
        }
        this.loaderService.onReady.subscribe(function () {
            _this.createChart();
        });
    };
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.addResizeListener();
    };
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (this.wrapper) {
            this.updateChart();
        }
    };
    Object.defineProperty(GoogleChartComponent.prototype, "parsedOptions", {
        get: /**
         * @return {?}
         */
        function () {
            return tslib_1.__assign({ title: this.title, width: this.width, height: this.height }, this.options);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.getChartElement = /**
     * @return {?}
     */
    function () {
        return this.element.nativeElement.firstElementChild;
    };
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.createChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.loadNeededPackages().subscribe(function () {
            _this.wrapper = new google.visualization.ChartWrapper();
            _this.updateChart();
        });
    };
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.loadNeededPackages = /**
     * @return {?}
     */
    function () {
        return this.loaderService.loadChartPackages([GoogleChartPackagesHelper.getPackageForChartName(this.type)]);
    };
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.updateChart = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ dataTable = this.getDataTable();
        this.formatData(dataTable);
        this.wrapper.setChartType(this.type);
        this.wrapper.setDataTable(dataTable);
        this.wrapper.setOptions(this.parsedOptions);
        this.removeChartEvents();
        this.registerChartEvents();
        this.wrapper.draw(this.element.nativeElement);
    };
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.getDataTable = /**
     * @return {?}
     */
    function () {
        if (this.columnNames) {
            return google.visualization.arrayToDataTable(tslib_1.__spread([
                tslib_1.__spread(this.columnNames, this.roles)
            ], this.data), false);
        }
        else {
            return google.visualization.arrayToDataTable(this.data, true);
        }
    };
    /**
     * @param {?} dataTable
     * @return {?}
     */
    GoogleChartComponent.prototype.formatData = /**
     * @param {?} dataTable
     * @return {?}
     */
    function (dataTable) {
        if (!this.formatter) {
            return;
        }
        if (this.formatter instanceof Array) {
            this.formatter.forEach(function (value) {
                value.formatter.format(dataTable, value.colIndex);
            });
        }
        else {
            for (var /** @type {?} */ i = 0; i < dataTable.getNumberOfColumns(); i++) {
                this.formatter.format(dataTable, i);
            }
        }
    };
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.addResizeListener = /**
     * @return {?}
     */
    function () {
        var _this = this;
        fromEvent(window, 'resize')
            .pipe(debounceTime(100))
            .subscribe(function () {
            _this.ngOnChanges();
        });
    };
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.removeChartEvents = /**
     * @return {?}
     */
    function () {
        google.visualization.events.removeAllListeners(this.wrapper);
    };
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.registerChartEvents = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.registerChartEvent('ready', function () { return _this.ready.emit('Chart Ready'); });
        this.registerChartEvent('error', function (error) { return _this.error.emit(error); });
        this.registerChartEvent('select', function () {
            var /** @type {?} */ selection = _this.wrapper.getChart().getSelection();
            _this.select.emit(selection);
        });
        this.registerChartEvent('onmouseover', function (event) { return _this.mouseenter.emit(event); });
        this.registerChartEvent('onmouseout', function (event) { return _this.mouseleave.emit(event); });
    };
    /**
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    GoogleChartComponent.prototype.registerChartEvent = /**
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    function (eventName, callback) {
        google.visualization.events.addListener(this.wrapper, eventName, callback);
    };
    GoogleChartComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'google-chart',
                    template: '',
                    styles: [':host { width: fit-content; display: block; }'],
                    exportAs: 'google-chart',
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    GoogleChartComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ScriptLoaderService }
    ]; };
    GoogleChartComponent.propDecorators = {
        data: [{ type: Input }],
        columnNames: [{ type: Input }],
        roles: [{ type: Input }],
        title: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        dynamicResize: [{ type: Input }],
        options: [{ type: Input }],
        type: [{ type: Input }],
        formatter: [{ type: Input }],
        error: [{ type: Output }],
        ready: [{ type: Output }],
        select: [{ type: Output }],
        mouseenter: [{ type: Output }],
        mouseleave: [{ type: Output }]
    };
    return GoogleChartComponent;
}());
export { GoogleChartComponent };
function GoogleChartComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    GoogleChartComponent.prototype.data;
    /** @type {?} */
    GoogleChartComponent.prototype.columnNames;
    /** @type {?} */
    GoogleChartComponent.prototype.roles;
    /** @type {?} */
    GoogleChartComponent.prototype.title;
    /** @type {?} */
    GoogleChartComponent.prototype.width;
    /** @type {?} */
    GoogleChartComponent.prototype.height;
    /** @type {?} */
    GoogleChartComponent.prototype.dynamicResize;
    /** @type {?} */
    GoogleChartComponent.prototype.options;
    /** @type {?} */
    GoogleChartComponent.prototype.type;
    /** @type {?} */
    GoogleChartComponent.prototype.formatter;
    /** @type {?} */
    GoogleChartComponent.prototype.error;
    /** @type {?} */
    GoogleChartComponent.prototype.ready;
    /** @type {?} */
    GoogleChartComponent.prototype.select;
    /** @type {?} */
    GoogleChartComponent.prototype.mouseenter;
    /** @type {?} */
    GoogleChartComponent.prototype.mouseleave;
    /** @type {?} */
    GoogleChartComponent.prototype.wrapper;
    /** @type {?} */
    GoogleChartComponent.prototype.element;
    /** @type {?} */
    GoogleChartComponent.prototype.loaderService;
}

//# sourceMappingURL=data:application/json;base64,