(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('angular-google-charts', ['exports', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global['angular-google-charts'] = {}),global.ng.core,global.rxjs,global.rxjs.operators));
}(this, (function (exports,core,rxjs,operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ScriptLoaderService = (function () {
        function ScriptLoaderService(localeId) {
            this.localeId = localeId;
            this.scriptSource = 'https://www.gstatic.com/charts/loader.js';
            this.onLoadSubject = new rxjs.Subject();
            this.initialize();
        }
        Object.defineProperty(ScriptLoaderService.prototype, "onReady", {
            get: /**
             * @return {?}
             */ function () {
                if (this.doneLoading) {
                    return rxjs.Observable.create(function (observer) {
                        observer.next(true);
                        observer.complete();
                    });
                }
                return this.onLoadSubject.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScriptLoaderService.prototype, "doneLoading", {
            get: /**
             * @return {?}
             */ function () {
                if (typeof (google) !== 'undefined') {
                    return true;
                }
                return false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScriptLoaderService.prototype, "isLoading", {
            get: /**
             * @return {?}
             */ function () {
                var _this = this;
                if (typeof (google) === 'undefined') {
                    var /** @type {?} */ pageScripts = Array.from(document.getElementsByTagName('script'));
                    return pageScripts.findIndex(function (script) { return script.src === _this.scriptSource; }) >= 0;
                }
                return false;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} packages
         * @return {?}
         */
        ScriptLoaderService.prototype.loadChartPackages = /**
         * @param {?} packages
         * @return {?}
         */
            function (packages) {
                var _this = this;
                return rxjs.Observable.create(function (observer) {
                    var /** @type {?} */ config = {
                        packages: packages,
                        language: _this.localeId
                    };
                    google.charts.load('45.2', config);
                    google.charts.setOnLoadCallback(function () {
                        observer.next();
                        observer.complete();
                    });
                });
            };
        /**
         * @return {?}
         */
        ScriptLoaderService.prototype.initialize = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.doneLoading && !this.isLoading) {
                    var /** @type {?} */ script = this.createScriptElement();
                    script.onload = function () {
                        _this.onLoadSubject.next(true);
                        _this.onLoadSubject.complete();
                    };
                    script.onerror = function () {
                        console.error('Failed to load the google chart script!');
                        _this.onLoadSubject.error('Failed to load the google chart script!');
                        _this.onLoadSubject.complete();
                    };
                }
            };
        /**
         * @return {?}
         */
        ScriptLoaderService.prototype.createScriptElement = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = this.scriptSource;
                script.async = true;
                document.getElementsByTagName('head')[0].appendChild(script);
                return script;
            };
        ScriptLoaderService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        ScriptLoaderService.ctorParameters = function () {
            return [
                { type: String, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] }] }
            ];
        };
        return ScriptLoaderService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GoogleChartPackagesHelper = (function () {
        function GoogleChartPackagesHelper() {
        }
        /**
         * @param {?} chartName
         * @return {?}
         */
        GoogleChartPackagesHelper.getPackageForChartName = /**
         * @param {?} chartName
         * @return {?}
         */
            function (chartName) {
                return GoogleChartPackagesHelper.ChartTypesToPackages[chartName];
            };
        GoogleChartPackagesHelper.ChartTypesToPackages = {
            AnnotationChart: 'annotationchart',
            AreaChart: 'corechart',
            Bar: 'bar',
            BarChart: 'corechart',
            BubbleChart: 'corechart',
            Calendar: 'calendar',
            CandlestickChart: 'corechart',
            ColumnChart: 'corechart',
            ComboChart: 'corechart',
            PieChart: 'corechart',
            Gantt: 'gantt',
            Gauge: 'gauge',
            GeoChart: 'geochart',
            Histogram: 'corechart',
            Line: 'line',
            LineChart: 'corechart',
            Map: 'map',
            OrgChart: 'orgchart',
            Sankey: 'sankey',
            Scatter: 'scatter',
            ScatterChart: 'corechart',
            SteppedAreaChart: 'corechart',
            Table: 'table',
            Timeline: 'timeline',
            TreeMap: 'treemap',
            WordTree: 'wordtree'
        };
        return GoogleChartPackagesHelper;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GoogleChartComponent = (function () {
        function GoogleChartComponent(element, loaderService) {
            this.element = element;
            this.loaderService = loaderService;
            this.roles = new Array();
            this.width = undefined;
            this.height = undefined;
            this.dynamicResize = false;
            this.options = {};
            this.error = new core.EventEmitter();
            this.ready = new core.EventEmitter();
            this.select = new core.EventEmitter();
            this.mouseenter = new core.EventEmitter();
            this.mouseleave = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        GoogleChartComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.type == null) {
                    throw new Error('Can\'t create a Google Chart without specifying a type!');
                }
                if (this.data == null) {
                    throw new Error('Can\'t create a Google Chart without data!');
                }
                this.loaderService.onReady.subscribe(function () {
                    _this.createChart();
                });
            };
        /**
         * @return {?}
         */
        GoogleChartComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.addResizeListener();
            };
        /**
         * @return {?}
         */
        GoogleChartComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                if (this.wrapper) {
                    this.updateChart();
                }
            };
        Object.defineProperty(GoogleChartComponent.prototype, "parsedOptions", {
            get: /**
             * @return {?}
             */ function () {
                return __assign({ title: this.title, width: this.width, height: this.height }, this.options);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        GoogleChartComponent.prototype.getChartElement = /**
         * @return {?}
         */
            function () {
                return this.element.nativeElement.firstElementChild;
            };
        /**
         * @return {?}
         */
        GoogleChartComponent.prototype.createChart = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.loadNeededPackages().subscribe(function () {
                    _this.wrapper = new google.visualization.ChartWrapper();
                    _this.updateChart();
                });
            };
        /**
         * @return {?}
         */
        GoogleChartComponent.prototype.loadNeededPackages = /**
         * @return {?}
         */
            function () {
                return this.loaderService.loadChartPackages([GoogleChartPackagesHelper.getPackageForChartName(this.type)]);
            };
        /**
         * @return {?}
         */
        GoogleChartComponent.prototype.updateChart = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ dataTable = this.getDataTable();
                this.formatData(dataTable);
                this.wrapper.setChartType(this.type);
                this.wrapper.setDataTable(dataTable);
                this.wrapper.setOptions(this.parsedOptions);
                this.removeChartEvents();
                this.registerChartEvents();
                this.wrapper.draw(this.element.nativeElement);
            };
        /**
         * @return {?}
         */
        GoogleChartComponent.prototype.getDataTable = /**
         * @return {?}
         */
            function () {
                if (this.columnNames) {
                    return google.visualization.arrayToDataTable(__spread([
                        __spread(this.columnNames, this.roles)
                    ], this.data), false);
                }
                else {
                    return google.visualization.arrayToDataTable(this.data, true);
                }
            };
        /**
         * @param {?} dataTable
         * @return {?}
         */
        GoogleChartComponent.prototype.formatData = /**
         * @param {?} dataTable
         * @return {?}
         */
            function (dataTable) {
                if (!this.formatter) {
                    return;
                }
                if (this.formatter instanceof Array) {
                    this.formatter.forEach(function (value) {
                        value.formatter.format(dataTable, value.colIndex);
                    });
                }
                else {
                    for (var /** @type {?} */ i = 0; i < dataTable.getNumberOfColumns(); i++) {
                        this.formatter.format(dataTable, i);
                    }
                }
            };
        /**
         * @return {?}
         */
        GoogleChartComponent.prototype.addResizeListener = /**
         * @return {?}
         */
            function () {
                var _this = this;
                rxjs.fromEvent(window, 'resize')
                    .pipe(operators.debounceTime(100))
                    .subscribe(function () {
                    _this.ngOnChanges();
                });
            };
        /**
         * @return {?}
         */
        GoogleChartComponent.prototype.removeChartEvents = /**
         * @return {?}
         */
            function () {
                google.visualization.events.removeAllListeners(this.wrapper);
            };
        /**
         * @return {?}
         */
        GoogleChartComponent.prototype.registerChartEvents = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.registerChartEvent('ready', function () { return _this.ready.emit('Chart Ready'); });
                this.registerChartEvent('error', function (error) { return _this.error.emit(error); });
                this.registerChartEvent('select', function () {
                    var /** @type {?} */ selection = _this.wrapper.getChart().getSelection();
                    _this.select.emit(selection);
                });
                this.registerChartEvent('onmouseover', function (event) { return _this.mouseenter.emit(event); });
                this.registerChartEvent('onmouseout', function (event) { return _this.mouseleave.emit(event); });
            };
        /**
         * @param {?} eventName
         * @param {?} callback
         * @return {?}
         */
        GoogleChartComponent.prototype.registerChartEvent = /**
         * @param {?} eventName
         * @param {?} callback
         * @return {?}
         */
            function (eventName, callback) {
                google.visualization.events.addListener(this.wrapper, eventName, callback);
            };
        GoogleChartComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'google-chart',
                        template: '',
                        styles: [':host { width: fit-content; display: block; }'],
                        exportAs: 'google-chart',
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    },] },
        ];
        /** @nocollapse */
        GoogleChartComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: ScriptLoaderService }
            ];
        };
        GoogleChartComponent.propDecorators = {
            data: [{ type: core.Input }],
            columnNames: [{ type: core.Input }],
            roles: [{ type: core.Input }],
            title: [{ type: core.Input }],
            width: [{ type: core.Input }],
            height: [{ type: core.Input }],
            dynamicResize: [{ type: core.Input }],
            options: [{ type: core.Input }],
            type: [{ type: core.Input }],
            formatter: [{ type: core.Input }],
            error: [{ type: core.Output }],
            ready: [{ type: core.Output }],
            select: [{ type: core.Output }],
            mouseenter: [{ type: core.Output }],
            mouseleave: [{ type: core.Output }]
        };
        return GoogleChartComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GoogleChartsModule = (function () {
        function GoogleChartsModule() {
        }
        GoogleChartsModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [
                            ScriptLoaderService
                        ],
                        declarations: [
                            GoogleChartComponent
                        ],
                        exports: [
                            GoogleChartComponent
                        ]
                    },] },
        ];
        return GoogleChartsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.GoogleChartComponent = GoogleChartComponent;
    exports.GoogleChartsModule = GoogleChartsModule;
    exports.ScriptLoaderService = ScriptLoaderService;
    exports.GoogleChartPackagesHelper = GoogleChartPackagesHelper;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,