import { Injectable, Inject, LOCALE_ID, Component, ElementRef, Input, ChangeDetectionStrategy, Output, EventEmitter, NgModule } from '@angular/core';
import { Observable, Subject, fromEvent } from 'rxjs';
import { __assign, __spread } from 'tslib';
import { debounceTime } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ScriptLoaderService = /** @class */ (function () {
    function ScriptLoaderService(localeId) {
        this.localeId = localeId;
        this.scriptSource = 'https://www.gstatic.com/charts/loader.js';
        this.onLoadSubject = new Subject();
        this.initialize();
    }
    Object.defineProperty(ScriptLoaderService.prototype, "onReady", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.doneLoading) {
                return Observable.create(function (observer) {
                    observer.next(true);
                    observer.complete();
                });
            }
            return this.onLoadSubject.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScriptLoaderService.prototype, "doneLoading", {
        get: /**
         * @return {?}
         */
        function () {
            if (typeof (google) !== 'undefined') {
                return true;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScriptLoaderService.prototype, "isLoading", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (typeof (google) === 'undefined') {
                var /** @type {?} */ pageScripts = Array.from(document.getElementsByTagName('script'));
                return pageScripts.findIndex(function (script) { return script.src === _this.scriptSource; }) >= 0;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} packages
     * @return {?}
     */
    ScriptLoaderService.prototype.loadChartPackages = /**
     * @param {?} packages
     * @return {?}
     */
    function (packages) {
        var _this = this;
        return Observable.create(function (observer) {
            var /** @type {?} */ config = {
                packages: packages,
                language: _this.localeId
            };
            google.charts.load('45.2', config);
            google.charts.setOnLoadCallback(function () {
                observer.next();
                observer.complete();
            });
        });
    };
    /**
     * @return {?}
     */
    ScriptLoaderService.prototype.initialize = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.doneLoading && !this.isLoading) {
            var /** @type {?} */ script = this.createScriptElement();
            script.onload = function () {
                _this.onLoadSubject.next(true);
                _this.onLoadSubject.complete();
            };
            script.onerror = function () {
                console.error('Failed to load the google chart script!');
                _this.onLoadSubject.error('Failed to load the google chart script!');
                _this.onLoadSubject.complete();
            };
        }
    };
    /**
     * @return {?}
     */
    ScriptLoaderService.prototype.createScriptElement = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = this.scriptSource;
        script.async = true;
        document.getElementsByTagName('head')[0].appendChild(script);
        return script;
    };
    ScriptLoaderService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ScriptLoaderService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return ScriptLoaderService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GoogleChartPackagesHelper = /** @class */ (function () {
    function GoogleChartPackagesHelper() {
    }
    /**
     * @param {?} chartName
     * @return {?}
     */
    GoogleChartPackagesHelper.getPackageForChartName = /**
     * @param {?} chartName
     * @return {?}
     */
    function (chartName) {
        return GoogleChartPackagesHelper.ChartTypesToPackages[chartName];
    };
    GoogleChartPackagesHelper.ChartTypesToPackages = {
        AnnotationChart: 'annotationchart',
        AreaChart: 'corechart',
        Bar: 'bar',
        BarChart: 'corechart',
        BubbleChart: 'corechart',
        Calendar: 'calendar',
        CandlestickChart: 'corechart',
        ColumnChart: 'corechart',
        ComboChart: 'corechart',
        PieChart: 'corechart',
        Gantt: 'gantt',
        Gauge: 'gauge',
        GeoChart: 'geochart',
        Histogram: 'corechart',
        Line: 'line',
        LineChart: 'corechart',
        Map: 'map',
        OrgChart: 'orgchart',
        Sankey: 'sankey',
        Scatter: 'scatter',
        ScatterChart: 'corechart',
        SteppedAreaChart: 'corechart',
        Table: 'table',
        Timeline: 'timeline',
        TreeMap: 'treemap',
        WordTree: 'wordtree'
    };
    return GoogleChartPackagesHelper;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GoogleChartComponent = /** @class */ (function () {
    function GoogleChartComponent(element, loaderService) {
        this.element = element;
        this.loaderService = loaderService;
        this.roles = new Array();
        this.width = undefined;
        this.height = undefined;
        this.dynamicResize = false;
        this.options = {};
        this.error = new EventEmitter();
        this.ready = new EventEmitter();
        this.select = new EventEmitter();
        this.mouseenter = new EventEmitter();
        this.mouseleave = new EventEmitter();
    }
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.type == null) {
            throw new Error('Can\'t create a Google Chart without specifying a type!');
        }
        if (this.data == null) {
            throw new Error('Can\'t create a Google Chart without data!');
        }
        this.loaderService.onReady.subscribe(function () {
            _this.createChart();
        });
    };
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.addResizeListener();
    };
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (this.wrapper) {
            this.updateChart();
        }
    };
    Object.defineProperty(GoogleChartComponent.prototype, "parsedOptions", {
        get: /**
         * @return {?}
         */
        function () {
            return __assign({ title: this.title, width: this.width, height: this.height }, this.options);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.getChartElement = /**
     * @return {?}
     */
    function () {
        return this.element.nativeElement.firstElementChild;
    };
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.createChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.loadNeededPackages().subscribe(function () {
            _this.wrapper = new google.visualization.ChartWrapper();
            _this.updateChart();
        });
    };
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.loadNeededPackages = /**
     * @return {?}
     */
    function () {
        return this.loaderService.loadChartPackages([GoogleChartPackagesHelper.getPackageForChartName(this.type)]);
    };
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.updateChart = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ dataTable = this.getDataTable();
        this.formatData(dataTable);
        this.wrapper.setChartType(this.type);
        this.wrapper.setDataTable(dataTable);
        this.wrapper.setOptions(this.parsedOptions);
        this.removeChartEvents();
        this.registerChartEvents();
        this.wrapper.draw(this.element.nativeElement);
    };
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.getDataTable = /**
     * @return {?}
     */
    function () {
        if (this.columnNames) {
            return google.visualization.arrayToDataTable(__spread([
                __spread(this.columnNames, this.roles)
            ], this.data), false);
        }
        else {
            return google.visualization.arrayToDataTable(this.data, true);
        }
    };
    /**
     * @param {?} dataTable
     * @return {?}
     */
    GoogleChartComponent.prototype.formatData = /**
     * @param {?} dataTable
     * @return {?}
     */
    function (dataTable) {
        if (!this.formatter) {
            return;
        }
        if (this.formatter instanceof Array) {
            this.formatter.forEach(function (value) {
                value.formatter.format(dataTable, value.colIndex);
            });
        }
        else {
            for (var /** @type {?} */ i = 0; i < dataTable.getNumberOfColumns(); i++) {
                this.formatter.format(dataTable, i);
            }
        }
    };
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.addResizeListener = /**
     * @return {?}
     */
    function () {
        var _this = this;
        fromEvent(window, 'resize')
            .pipe(debounceTime(100))
            .subscribe(function () {
            _this.ngOnChanges();
        });
    };
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.removeChartEvents = /**
     * @return {?}
     */
    function () {
        google.visualization.events.removeAllListeners(this.wrapper);
    };
    /**
     * @return {?}
     */
    GoogleChartComponent.prototype.registerChartEvents = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.registerChartEvent('ready', function () { return _this.ready.emit('Chart Ready'); });
        this.registerChartEvent('error', function (error) { return _this.error.emit(error); });
        this.registerChartEvent('select', function () {
            var /** @type {?} */ selection = _this.wrapper.getChart().getSelection();
            _this.select.emit(selection);
        });
        this.registerChartEvent('onmouseover', function (event) { return _this.mouseenter.emit(event); });
        this.registerChartEvent('onmouseout', function (event) { return _this.mouseleave.emit(event); });
    };
    /**
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    GoogleChartComponent.prototype.registerChartEvent = /**
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    function (eventName, callback) {
        google.visualization.events.addListener(this.wrapper, eventName, callback);
    };
    GoogleChartComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'google-chart',
                    template: '',
                    styles: [':host { width: fit-content; display: block; }'],
                    exportAs: 'google-chart',
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    GoogleChartComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ScriptLoaderService }
    ]; };
    GoogleChartComponent.propDecorators = {
        data: [{ type: Input }],
        columnNames: [{ type: Input }],
        roles: [{ type: Input }],
        title: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        dynamicResize: [{ type: Input }],
        options: [{ type: Input }],
        type: [{ type: Input }],
        formatter: [{ type: Input }],
        error: [{ type: Output }],
        ready: [{ type: Output }],
        select: [{ type: Output }],
        mouseenter: [{ type: Output }],
        mouseleave: [{ type: Output }]
    };
    return GoogleChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GoogleChartsModule = /** @class */ (function () {
    function GoogleChartsModule() {
    }
    GoogleChartsModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        ScriptLoaderService
                    ],
                    declarations: [
                        GoogleChartComponent
                    ],
                    exports: [
                        GoogleChartComponent
                    ]
                },] },
    ];
    return GoogleChartsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { GoogleChartComponent, GoogleChartsModule, ScriptLoaderService, GoogleChartPackagesHelper };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,