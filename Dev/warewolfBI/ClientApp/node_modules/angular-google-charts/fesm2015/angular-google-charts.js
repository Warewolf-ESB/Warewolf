import { Injectable, Inject, LOCALE_ID, Component, ElementRef, Input, ChangeDetectionStrategy, Output, EventEmitter, NgModule } from '@angular/core';
import { Observable, Subject, fromEvent } from 'rxjs';
import { debounceTime } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ScriptLoaderService {
    /**
     * @param {?} localeId
     */
    constructor(localeId) {
        this.localeId = localeId;
        this.scriptSource = 'https://www.gstatic.com/charts/loader.js';
        this.onLoadSubject = new Subject();
        this.initialize();
    }
    /**
     * @return {?}
     */
    get onReady() {
        if (this.doneLoading) {
            return Observable.create(observer => {
                observer.next(true);
                observer.complete();
            });
        }
        return this.onLoadSubject.asObservable();
    }
    /**
     * @return {?}
     */
    get doneLoading() {
        if (typeof (google) !== 'undefined') {
            return true;
        }
        return false;
    }
    /**
     * @return {?}
     */
    get isLoading() {
        if (typeof (google) === 'undefined') {
            const /** @type {?} */ pageScripts = Array.from(document.getElementsByTagName('script'));
            return pageScripts.findIndex(script => script.src === this.scriptSource) >= 0;
        }
        return false;
    }
    /**
     * @param {?} packages
     * @return {?}
     */
    loadChartPackages(packages) {
        return Observable.create(observer => {
            const /** @type {?} */ config = {
                packages: packages,
                language: this.localeId
            };
            google.charts.load('45.2', config);
            google.charts.setOnLoadCallback(() => {
                observer.next();
                observer.complete();
            });
        });
    }
    /**
     * @return {?}
     */
    initialize() {
        if (!this.doneLoading && !this.isLoading) {
            const /** @type {?} */ script = this.createScriptElement();
            script.onload = () => {
                this.onLoadSubject.next(true);
                this.onLoadSubject.complete();
            };
            script.onerror = () => {
                console.error('Failed to load the google chart script!');
                this.onLoadSubject.error('Failed to load the google chart script!');
                this.onLoadSubject.complete();
            };
        }
    }
    /**
     * @return {?}
     */
    createScriptElement() {
        const /** @type {?} */ script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = this.scriptSource;
        script.async = true;
        document.getElementsByTagName('head')[0].appendChild(script);
        return script;
    }
}
ScriptLoaderService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ScriptLoaderService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class GoogleChartPackagesHelper {
    /**
     * @param {?} chartName
     * @return {?}
     */
    static getPackageForChartName(chartName) {
        return GoogleChartPackagesHelper.ChartTypesToPackages[chartName];
    }
}
GoogleChartPackagesHelper.ChartTypesToPackages = {
    AnnotationChart: 'annotationchart',
    AreaChart: 'corechart',
    Bar: 'bar',
    BarChart: 'corechart',
    BubbleChart: 'corechart',
    Calendar: 'calendar',
    CandlestickChart: 'corechart',
    ColumnChart: 'corechart',
    ComboChart: 'corechart',
    PieChart: 'corechart',
    Gantt: 'gantt',
    Gauge: 'gauge',
    GeoChart: 'geochart',
    Histogram: 'corechart',
    Line: 'line',
    LineChart: 'corechart',
    Map: 'map',
    OrgChart: 'orgchart',
    Sankey: 'sankey',
    Scatter: 'scatter',
    ScatterChart: 'corechart',
    SteppedAreaChart: 'corechart',
    Table: 'table',
    Timeline: 'timeline',
    TreeMap: 'treemap',
    WordTree: 'wordtree'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class GoogleChartComponent {
    /**
     * @param {?} element
     * @param {?} loaderService
     */
    constructor(element, loaderService) {
        this.element = element;
        this.loaderService = loaderService;
        this.roles = new Array();
        this.width = undefined;
        this.height = undefined;
        this.dynamicResize = false;
        this.options = {};
        this.error = new EventEmitter();
        this.ready = new EventEmitter();
        this.select = new EventEmitter();
        this.mouseenter = new EventEmitter();
        this.mouseleave = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.type == null) {
            throw new Error('Can\'t create a Google Chart without specifying a type!');
        }
        if (this.data == null) {
            throw new Error('Can\'t create a Google Chart without data!');
        }
        this.loaderService.onReady.subscribe(() => {
            this.createChart();
        });
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.addResizeListener();
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.wrapper) {
            this.updateChart();
        }
    }
    /**
     * @return {?}
     */
    get parsedOptions() {
        return Object.assign({ title: this.title, width: this.width, height: this.height }, this.options);
    }
    /**
     * @return {?}
     */
    getChartElement() {
        return this.element.nativeElement.firstElementChild;
    }
    /**
     * @return {?}
     */
    createChart() {
        this.loadNeededPackages().subscribe(() => {
            this.wrapper = new google.visualization.ChartWrapper();
            this.updateChart();
        });
    }
    /**
     * @return {?}
     */
    loadNeededPackages() {
        return this.loaderService.loadChartPackages([GoogleChartPackagesHelper.getPackageForChartName(this.type)]);
    }
    /**
     * @return {?}
     */
    updateChart() {
        const /** @type {?} */ dataTable = this.getDataTable();
        this.formatData(dataTable);
        this.wrapper.setChartType(this.type);
        this.wrapper.setDataTable(dataTable);
        this.wrapper.setOptions(this.parsedOptions);
        this.removeChartEvents();
        this.registerChartEvents();
        this.wrapper.draw(this.element.nativeElement);
    }
    /**
     * @return {?}
     */
    getDataTable() {
        if (this.columnNames) {
            return google.visualization.arrayToDataTable([
                [...this.columnNames, ...this.roles],
                ...this.data
            ], false);
        }
        else {
            return google.visualization.arrayToDataTable(this.data, true);
        }
    }
    /**
     * @param {?} dataTable
     * @return {?}
     */
    formatData(dataTable) {
        if (!this.formatter) {
            return;
        }
        if (this.formatter instanceof Array) {
            this.formatter.forEach((value) => {
                value.formatter.format(dataTable, value.colIndex);
            });
        }
        else {
            for (let /** @type {?} */ i = 0; i < dataTable.getNumberOfColumns(); i++) {
                this.formatter.format(dataTable, i);
            }
        }
    }
    /**
     * @return {?}
     */
    addResizeListener() {
        fromEvent(window, 'resize')
            .pipe(debounceTime(100))
            .subscribe(() => {
            this.ngOnChanges();
        });
    }
    /**
     * @return {?}
     */
    removeChartEvents() {
        google.visualization.events.removeAllListeners(this.wrapper);
    }
    /**
     * @return {?}
     */
    registerChartEvents() {
        this.registerChartEvent('ready', () => this.ready.emit('Chart Ready'));
        this.registerChartEvent('error', (error) => this.error.emit(error));
        this.registerChartEvent('select', () => {
            const /** @type {?} */ selection = this.wrapper.getChart().getSelection();
            this.select.emit(selection);
        });
        this.registerChartEvent('onmouseover', (event) => this.mouseenter.emit(event));
        this.registerChartEvent('onmouseout', (event) => this.mouseleave.emit(event));
    }
    /**
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    registerChartEvent(eventName, callback) {
        google.visualization.events.addListener(this.wrapper, eventName, callback);
    }
}
GoogleChartComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'google-chart',
                template: '',
                styles: [':host { width: fit-content; display: block; }'],
                exportAs: 'google-chart',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
GoogleChartComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ScriptLoaderService }
];
GoogleChartComponent.propDecorators = {
    data: [{ type: Input }],
    columnNames: [{ type: Input }],
    roles: [{ type: Input }],
    title: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    dynamicResize: [{ type: Input }],
    options: [{ type: Input }],
    type: [{ type: Input }],
    formatter: [{ type: Input }],
    error: [{ type: Output }],
    ready: [{ type: Output }],
    select: [{ type: Output }],
    mouseenter: [{ type: Output }],
    mouseleave: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class GoogleChartsModule {
}
GoogleChartsModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    ScriptLoaderService
                ],
                declarations: [
                    GoogleChartComponent
                ],
                exports: [
                    GoogleChartComponent
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { GoogleChartComponent, GoogleChartsModule, ScriptLoaderService, GoogleChartPackagesHelper };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,