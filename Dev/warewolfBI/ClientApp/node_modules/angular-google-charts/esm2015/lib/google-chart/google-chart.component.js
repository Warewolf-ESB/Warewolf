/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ElementRef, Input, ChangeDetectionStrategy, Output, EventEmitter } from '@angular/core';
import { fromEvent } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { ScriptLoaderService } from '../script-loader/script-loader.service';
import { GoogleChartPackagesHelper } from '../helpers/google-chart-packages.helper';
export class GoogleChartComponent {
    /**
     * @param {?} element
     * @param {?} loaderService
     */
    constructor(element, loaderService) {
        this.element = element;
        this.loaderService = loaderService;
        this.roles = new Array();
        this.width = undefined;
        this.height = undefined;
        this.dynamicResize = false;
        this.options = {};
        this.error = new EventEmitter();
        this.ready = new EventEmitter();
        this.select = new EventEmitter();
        this.mouseenter = new EventEmitter();
        this.mouseleave = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.type == null) {
            throw new Error('Can\'t create a Google Chart without specifying a type!');
        }
        if (this.data == null) {
            throw new Error('Can\'t create a Google Chart without data!');
        }
        this.loaderService.onReady.subscribe(() => {
            this.createChart();
        });
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.addResizeListener();
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.wrapper) {
            this.updateChart();
        }
    }
    /**
     * @return {?}
     */
    get parsedOptions() {
        return Object.assign({ title: this.title, width: this.width, height: this.height }, this.options);
    }
    /**
     * @return {?}
     */
    getChartElement() {
        return this.element.nativeElement.firstElementChild;
    }
    /**
     * @return {?}
     */
    createChart() {
        this.loadNeededPackages().subscribe(() => {
            this.wrapper = new google.visualization.ChartWrapper();
            this.updateChart();
        });
    }
    /**
     * @return {?}
     */
    loadNeededPackages() {
        return this.loaderService.loadChartPackages([GoogleChartPackagesHelper.getPackageForChartName(this.type)]);
    }
    /**
     * @return {?}
     */
    updateChart() {
        const /** @type {?} */ dataTable = this.getDataTable();
        this.formatData(dataTable);
        this.wrapper.setChartType(this.type);
        this.wrapper.setDataTable(dataTable);
        this.wrapper.setOptions(this.parsedOptions);
        this.removeChartEvents();
        this.registerChartEvents();
        this.wrapper.draw(this.element.nativeElement);
    }
    /**
     * @return {?}
     */
    getDataTable() {
        if (this.columnNames) {
            return google.visualization.arrayToDataTable([
                [...this.columnNames, ...this.roles],
                ...this.data
            ], false);
        }
        else {
            return google.visualization.arrayToDataTable(this.data, true);
        }
    }
    /**
     * @param {?} dataTable
     * @return {?}
     */
    formatData(dataTable) {
        if (!this.formatter) {
            return;
        }
        if (this.formatter instanceof Array) {
            this.formatter.forEach((value) => {
                value.formatter.format(dataTable, value.colIndex);
            });
        }
        else {
            for (let /** @type {?} */ i = 0; i < dataTable.getNumberOfColumns(); i++) {
                this.formatter.format(dataTable, i);
            }
        }
    }
    /**
     * @return {?}
     */
    addResizeListener() {
        fromEvent(window, 'resize')
            .pipe(debounceTime(100))
            .subscribe(() => {
            this.ngOnChanges();
        });
    }
    /**
     * @return {?}
     */
    removeChartEvents() {
        google.visualization.events.removeAllListeners(this.wrapper);
    }
    /**
     * @return {?}
     */
    registerChartEvents() {
        this.registerChartEvent('ready', () => this.ready.emit('Chart Ready'));
        this.registerChartEvent('error', (error) => this.error.emit(error));
        this.registerChartEvent('select', () => {
            const /** @type {?} */ selection = this.wrapper.getChart().getSelection();
            this.select.emit(selection);
        });
        this.registerChartEvent('onmouseover', (event) => this.mouseenter.emit(event));
        this.registerChartEvent('onmouseout', (event) => this.mouseleave.emit(event));
    }
    /**
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    registerChartEvent(eventName, callback) {
        google.visualization.events.addListener(this.wrapper, eventName, callback);
    }
}
GoogleChartComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'google-chart',
                template: '',
                styles: [':host { width: fit-content; display: block; }'],
                exportAs: 'google-chart',
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
GoogleChartComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ScriptLoaderService }
];
GoogleChartComponent.propDecorators = {
    data: [{ type: Input }],
    columnNames: [{ type: Input }],
    roles: [{ type: Input }],
    title: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    dynamicResize: [{ type: Input }],
    options: [{ type: Input }],
    type: [{ type: Input }],
    formatter: [{ type: Input }],
    error: [{ type: Output }],
    ready: [{ type: Output }],
    select: [{ type: Output }],
    mouseenter: [{ type: Output }],
    mouseleave: [{ type: Output }]
};
function GoogleChartComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    GoogleChartComponent.prototype.data;
    /** @type {?} */
    GoogleChartComponent.prototype.columnNames;
    /** @type {?} */
    GoogleChartComponent.prototype.roles;
    /** @type {?} */
    GoogleChartComponent.prototype.title;
    /** @type {?} */
    GoogleChartComponent.prototype.width;
    /** @type {?} */
    GoogleChartComponent.prototype.height;
    /** @type {?} */
    GoogleChartComponent.prototype.dynamicResize;
    /** @type {?} */
    GoogleChartComponent.prototype.options;
    /** @type {?} */
    GoogleChartComponent.prototype.type;
    /** @type {?} */
    GoogleChartComponent.prototype.formatter;
    /** @type {?} */
    GoogleChartComponent.prototype.error;
    /** @type {?} */
    GoogleChartComponent.prototype.ready;
    /** @type {?} */
    GoogleChartComponent.prototype.select;
    /** @type {?} */
    GoogleChartComponent.prototype.mouseenter;
    /** @type {?} */
    GoogleChartComponent.prototype.mouseleave;
    /** @type {?} */
    GoogleChartComponent.prototype.wrapper;
    /** @type {?} */
    GoogleChartComponent.prototype.element;
    /** @type {?} */
    GoogleChartComponent.prototype.loaderService;
}

//# sourceMappingURL=data:application/json;base64,