"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const core_1 = require("@angular-devkit/core");
const node_1 = require("@angular-devkit/core/node");
const path_1 = require("path");
const ts = require("typescript");
const dev = Math.floor(Math.random() * 10000);
class VirtualStats {
    constructor(_path) {
        this._path = _path;
        this._ctime = new Date();
        this._mtime = new Date();
        this._atime = new Date();
        this._btime = new Date();
        this._dev = dev;
        this._ino = Math.floor(Math.random() * 100000);
        this._mode = parseInt('777', 8); // RWX for everyone.
        this._uid = Number(process.env['UID']) || 0;
        this._gid = Number(process.env['GID']) || 0;
    }
    isFile() { return false; }
    isDirectory() { return false; }
    isBlockDevice() { return false; }
    isCharacterDevice() { return false; }
    isSymbolicLink() { return false; }
    isFIFO() { return false; }
    isSocket() { return false; }
    get dev() { return this._dev; }
    get ino() { return this._ino; }
    get mode() { return this._mode; }
    get nlink() { return 1; } // Default to 1 hard link.
    get uid() { return this._uid; }
    get gid() { return this._gid; }
    get rdev() { return 0; }
    get size() { return 0; }
    get blksize() { return 512; }
    get blocks() { return Math.ceil(this.size / this.blksize); }
    get atime() { return this._atime; }
    get atimeMs() { return this._atime.getTime(); }
    get mtime() { return this._mtime; }
    get mtimeMs() { return this._mtime.getTime(); }
    get ctime() { return this._ctime; }
    get ctimeMs() { return this._ctime.getTime(); }
    get birthtime() { return this._btime; }
    get birthtimeMs() { return this._btime.getTime(); }
}
exports.VirtualStats = VirtualStats;
class VirtualDirStats extends VirtualStats {
    constructor(_fileName) {
        super(_fileName);
    }
    isDirectory() { return true; }
    get size() { return 1024; }
}
exports.VirtualDirStats = VirtualDirStats;
class VirtualFileStats extends VirtualStats {
    constructor(_fileName) {
        super(_fileName);
    }
    static createFromString(_fileName, _content) {
        const stats = new VirtualFileStats(_fileName);
        stats.content = _content;
        return stats;
    }
    static createFromBuffer(_fileName, _buffer) {
        const stats = new VirtualFileStats(_fileName);
        stats.bufferContent = _buffer;
        return stats;
    }
    get content() {
        if (!this._content && this.bufferContent) {
            this._content = core_1.virtualFs.fileBufferToString(this.bufferContent);
        }
        return this._content || '';
    }
    set content(v) {
        this._content = v;
        this._bufferContent = null;
        this.resetMetadata();
    }
    get bufferContent() {
        if (!this._bufferContent && this._content) {
            this._bufferContent = core_1.virtualFs.stringToFileBuffer(this._content);
        }
        return this._bufferContent || core_1.virtualFs.stringToFileBuffer('');
    }
    set bufferContent(buf) {
        this._bufferContent = buf;
        this._content = null;
        this.resetMetadata();
    }
    setSourceFile(sourceFile) {
        this._sourceFile = sourceFile;
    }
    getSourceFile(languageVersion, setParentNodes) {
        if (!this._sourceFile) {
            this._sourceFile = ts.createSourceFile(workaroundResolve(this._path), this.content, languageVersion, setParentNodes);
        }
        return this._sourceFile;
    }
    resetMetadata() {
        this._mtime = new Date();
        this._sourceFile = null;
    }
    isFile() { return true; }
    get size() { return this.content.length; }
}
exports.VirtualFileStats = VirtualFileStats;
class WebpackCompilerHost {
    constructor(_options, basePath, _host = new node_1.NodeJsSyncHost()) {
        this._options = _options;
        this._host = _host;
        this._files = Object.create(null);
        this._directories = Object.create(null);
        this._changedFiles = Object.create(null);
        this._changedDirs = Object.create(null);
        this._cache = false;
        this._syncHost = new core_1.virtualFs.SyncDelegateHost(_host);
        this._setParentNodes = true;
        this._basePath = this._normalizePath(basePath);
    }
    _normalizePath(path) {
        return core_1.normalize(path);
    }
    denormalizePath(path) {
        return core_1.getSystemPath(core_1.normalize(path));
    }
    resolve(path) {
        const p = this._normalizePath(path);
        if (p[0] == '.') {
            return this._normalizePath(path_1.join(this.getCurrentDirectory(), p));
        }
        else if (p[0] == '/' || p.match(/^\w:\//)) {
            return p;
        }
        else {
            return this._normalizePath(path_1.join(this._basePath, p));
        }
    }
    _cacheFile(fileName, stats) {
        this._files[fileName] = stats;
        let p = path_1.dirname(fileName);
        while (p && !this._directories[p]) {
            this._directories[p] = new VirtualDirStats(p);
            this._changedDirs[p] = true;
            p = path_1.dirname(p);
        }
        this._changedFiles[fileName] = true;
    }
    get dirty() {
        return Object.keys(this._changedFiles).length > 0;
    }
    enableCaching() {
        this._cache = true;
    }
    resetChangedFileTracker() {
        this._changedFiles = Object.create(null);
        this._changedDirs = Object.create(null);
    }
    getChangedFilePaths() {
        return Object.keys(this._changedFiles);
    }
    getNgFactoryPaths() {
        return Object.keys(this._files)
            .filter(fileName => fileName.endsWith('.ngfactory.js') || fileName.endsWith('.ngstyle.js'))
            // These paths are used by the virtual file system decorator so we must denormalize them.
            .map(path => this.denormalizePath(path));
    }
    invalidate(fileName) {
        const fullPath = this.resolve(fileName);
        if (fullPath in this._files) {
            this._files[fullPath] = null;
        }
        else {
            for (const file in this._files) {
                if (file.startsWith(fullPath + '/')) {
                    this._files[file] = null;
                }
            }
        }
        if (this.fileExists(fullPath)) {
            this._changedFiles[fullPath] = true;
        }
    }
    fileExists(fileName, delegate = true) {
        const p = this.resolve(fileName);
        return this._files[p] != null
            || (delegate && this._syncHost.exists(core_1.normalize(p)));
    }
    readFile(fileName) {
        const stats = this.findVirtualFile(fileName);
        return stats && stats.content;
    }
    readFileBuffer(fileName) {
        const stats = this.findVirtualFile(fileName);
        if (stats) {
            const buffer = Buffer.from(stats.bufferContent);
            return buffer;
        }
    }
    findVirtualFile(fileName) {
        const p = this.resolve(fileName);
        const stats = this._files[p];
        if (stats) {
            return stats;
        }
        try {
            const fileBuffer = this._syncHost.read(p);
            if (fileBuffer) {
                const stats = VirtualFileStats.createFromBuffer(p, fileBuffer);
                if (this._cache) {
                    this._cacheFile(p, stats);
                }
                return stats;
            }
        }
        catch (_a) {
            return undefined;
        }
    }
    stat(path) {
        const p = this.resolve(path);
        const stats = this._files[p] || this._directories[p];
        if (!stats) {
            return this._syncHost.stat(p);
        }
        return stats;
    }
    directoryExists(directoryName, delegate = true) {
        const p = this.resolve(directoryName);
        return (this._directories[p] != null)
            || (delegate && this._syncHost.exists(p) && this._syncHost.isDirectory(p));
    }
    getFiles(path) {
        const p = this.resolve(path);
        const subfiles = Object.keys(this._files)
            .filter(fileName => path_1.dirname(fileName) == p)
            .map(p => path_1.basename(p));
        let delegated;
        try {
            delegated = this._syncHost.list(p).filter((x) => {
                try {
                    return this._syncHost.isFile(core_1.join(p, x));
                }
                catch (_a) {
                    return false;
                }
            });
        }
        catch (_a) {
            delegated = [];
        }
        return delegated.concat(subfiles);
    }
    getDirectories(path) {
        const p = this.resolve(path);
        const subdirs = Object.keys(this._directories)
            .filter(fileName => path_1.dirname(fileName) == p)
            .map(path => path_1.basename(path));
        let delegated;
        try {
            delegated = this._syncHost.list(p).filter((x) => {
                try {
                    return this._syncHost.isDirectory(core_1.join(p, x));
                }
                catch (_a) {
                    return false;
                }
            });
        }
        catch (_a) {
            delegated = [];
        }
        return delegated.concat(subdirs);
    }
    getSourceFile(fileName, languageVersion, _onError) {
        fileName = this.resolve(fileName);
        let stats = this._files[fileName];
        if (!stats) {
            const content = this.readFile(fileName);
            if (!this._cache && content) {
                return ts.createSourceFile(workaroundResolve(fileName), content, languageVersion, this._setParentNodes);
            }
            else {
                stats = this._files[fileName];
                if (!stats) {
                    // If cache is turned on and the file exists, the readFile call will have populated stats.
                    // Empty stats at this point mean the file doesn't exist at and so we should return
                    // undefined.
                    return undefined;
                }
            }
        }
        return stats && stats.getSourceFile(languageVersion, this._setParentNodes);
    }
    get getCancellationToken() {
        // return this._delegate.getCancellationToken;
        // TODO: consider implementing a cancellation token.
        return undefined;
    }
    getDefaultLibFileName(options) {
        return ts.createCompilerHost(options, false).getDefaultLibFileName(options);
    }
    // This is due to typescript CompilerHost interface being weird on writeFile. This shuts down
    // typings in WebStorm.
    get writeFile() {
        return (fileName, data, _writeByteOrderMark, _onError, _sourceFiles) => {
            const p = this.resolve(fileName);
            const stats = VirtualFileStats.createFromString(p, data);
            this._cacheFile(p, stats);
        };
    }
    getCurrentDirectory() {
        return this._basePath !== null ? this._basePath : '/';
    }
    getCanonicalFileName(fileName) {
        return this.resolve(fileName);
    }
    useCaseSensitiveFileNames() {
        return !process.platform.startsWith('win32');
    }
    getNewLine() {
        return '\n';
    }
    setResourceLoader(resourceLoader) {
        this._resourceLoader = resourceLoader;
    }
    readResource(fileName) {
        if (this._resourceLoader) {
            // These paths are meant to be used by the loader so we must denormalize them.
            const denormalizedFileName = this.denormalizePath(core_1.normalize(fileName));
            return this._resourceLoader.get(denormalizedFileName);
        }
        else {
            return this.readFile(fileName);
        }
    }
}
exports.WebpackCompilerHost = WebpackCompilerHost;
// `TsCompilerAotCompilerTypeCheckHostAdapter` in @angular/compiler-cli seems to resolve module
// names directly via `resolveModuleName`, which prevents full Path usage.
// To work around this we must provide the same path format as TS internally uses in
// the SourceFile paths.
function workaroundResolve(path) {
    return core_1.getSystemPath(core_1.normalize(path)).replace(/\\/g, '/');
}
exports.workaroundResolve = workaroundResolve;
//# sourceMappingURL=data:application/json;base64,