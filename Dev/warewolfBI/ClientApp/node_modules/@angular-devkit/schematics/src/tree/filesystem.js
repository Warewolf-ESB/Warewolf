"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const core_1 = require("@angular-devkit/core");
const entry_1 = require("./entry");
const virtual_1 = require("./virtual");
class FileSystemDirEntry extends virtual_1.VirtualDirEntry {
    constructor(_host, tree, path = core_1.normalize('/')) {
        super(tree, path);
        this._host = _host;
    }
    _createDir(name) {
        return new FileSystemDirEntry(this._host, this._tree, core_1.join(this._path, name));
    }
    get parent() {
        return this._path == '/' ? null : this._tree.getDir(core_1.dirname(this._path));
    }
    get subdirs() {
        const result = new Set();
        try {
            this._host.list(this._path)
                .filter(name => this._host.isDirectory(core_1.join(this._path, name)))
                .forEach(name => result.add(core_1.fragment(name)));
        }
        catch (e) {
            if (e.code != 'ENOENT' && e.code != 'ENOTDIR') {
                throw e;
            }
        }
        for (const path of this._tree.staging.keys()) {
            if (path.startsWith(this._path) && core_1.dirname(path) != this._path) {
                result.add(core_1.basename(path));
            }
        }
        return [...result];
    }
    get subfiles() {
        const result = new Set();
        try {
            this._host.list(this._path)
                .filter(name => !this._host.isDirectory(core_1.join(this._path, name)))
                .forEach(name => result.add(core_1.fragment(name)));
        }
        catch (e) {
            if (e.code != 'ENOENT' && e.code != 'ENOTDIR') {
                throw e;
            }
        }
        for (const path of this._tree.staging.keys()) {
            if (path.startsWith(this._path) && core_1.dirname(path) == this._path) {
                result.add(core_1.basename(path));
            }
        }
        return [...result];
    }
    file(name) {
        return this._tree.get(core_1.join(this._path, name));
    }
}
exports.FileSystemDirEntry = FileSystemDirEntry;
class FileSystemTree extends virtual_1.VirtualTree {
    constructor(host) {
        super();
        this._initialized = false;
        this._host = new core_1.virtualFs.SyncDelegateHost(host);
        this._root = new FileSystemDirEntry(this._host, this);
    }
    get tree() {
        const host = this._host;
        if (!this._initialized) {
            this._initialized = true;
            this._recursiveFileList().forEach(path => {
                this._tree.set(path, new entry_1.LazyFileEntry(path, () => {
                    return Buffer.from(host.read(path));
                }));
            });
        }
        return this._tree;
    }
    get(path) {
        const normalizedPath = this._normalizePath(path);
        let entry = this._cacheMap.get(normalizedPath) || this._tree.get(normalizedPath) || null;
        if (entry == null && !this._initialized) {
            const systemPath = normalizedPath;
            const fileExists = this._host.exists(systemPath) && !this._host.isDirectory(systemPath);
            if (fileExists) {
                const host = this._host;
                entry = new entry_1.LazyFileEntry(normalizedPath, () => Buffer.from(host.read(systemPath)));
                this._tree.set(normalizedPath, entry);
            }
        }
        return entry;
    }
    branch() {
        const newTree = new FileSystemTree(this._host.delegate);
        this._copyTo(newTree);
        return newTree;
    }
    _copyTo(tree) {
        if (tree instanceof FileSystemTree) {
            const x = tree;
            x._tree = this._tree;
            x._initialized = this._initialized;
            this._actions.forEach(action => x._actions.push(action));
            [...this._cacheMap.entries()].forEach(([path, entry]) => {
                x._cacheMap.set(path, entry);
            });
        }
        else {
            super._copyTo(tree);
        }
    }
    _recursiveFileList() {
        const host = this._host;
        const list = [];
        function recurse(schematicPath) {
            for (const name of host.list(schematicPath)) {
                const normalizedPath = core_1.join(schematicPath, name);
                if (host.isDirectory(normalizedPath)) {
                    recurse(normalizedPath);
                }
                else {
                    list.push(normalizedPath);
                }
            }
        }
        recurse(core_1.normalize('/'));
        return list;
    }
}
exports.FileSystemTree = FileSystemTree;
class FileSystemCreateTree extends FileSystemTree {
    constructor(host) {
        super(host);
        this._recursiveFileList().forEach(path => {
            this.create(path, Buffer.from(this._host.read(path)));
        });
        this._initialized = true;
    }
}
exports.FileSystemCreateTree = FileSystemCreateTree;
//# sourceMappingURL=data:application/json;base64,