{"version":3,"sources":["modules/module-map-ngfactory-loader/module-map-ngfactory-loader.umd.js"],"names":["global","factory","exports","module","require","define","amd","npm_package","ng","core","this","MODULE_MAP","InjectionToken","ModuleMapNgFactoryLoader","compiler","moduleMap","prototype","load","loadChildrenString","offlineMode","Compiler","type","Error","loadFactory","loadAndCompile","Promise","resolve","compileModuleAsync","decorators","Injectable","ctorParameters","undefined","Inject","args","ModuleMapLoaderModule","withMap","ngModule","providers","provide","useValue","NgModule","NgModuleFactoryLoader","useClass","provideModuleMap","Object","defineProperty","value"],"mappings":"CAAC,SAAUA,EAAQC,GACC,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,kBACtE,mBAAXC,QAAyBA,OAAOC,IAAMD,QAAQ,UAAW,iBAAkBJ,GACjFA,EAASD,EAAOO,eAAkBP,EAAOQ,GAAGC,MAH9C,CAIEC,KAAM,SAAWR,EAAQO,GAAQ,aAKnC,IAAIE,EAAa,IAAIF,EAAKG,eAAe,cAIrCC,EAA0C,WAC1C,SAASA,EAAyBC,EAAUC,GACxCL,KAAKI,SAAWA,EAChBJ,KAAKK,UAAYA,EAyBrB,OAvBAF,EAAyBG,UAAUC,KAAO,SAAUC,GAChD,IAAIC,EAAcT,KAAKI,oBAAoBL,EAAKW,SAC5CC,EAAOX,KAAKK,UAAUG,GAC1B,IAAKG,EACD,MAAM,IAAIC,MAAMJ,EAAqB,oCAEzC,OAAOC,EACHT,KAAKa,YAAYF,GAAQX,KAAKc,eAAeH,IAErDR,EAAyBG,UAAUO,YAAc,SAAUtB,GACvD,OAAO,IAAIwB,QAAQ,SAAUC,GAAW,OAAOA,EAAQzB,MAE3DY,EAAyBG,UAAUQ,eAAiB,SAAUH,GAC1D,OAAOX,KAAKI,SAASa,mBAAmBN,IAE5CR,EAAyBe,aACnBP,KAAMZ,EAAKoB,aAGjBhB,EAAyBiB,eAAiB,WAAc,QAClDT,KAAMZ,EAAKW,WACXC,UAAMU,EAAWH,aAAeP,KAAMZ,EAAKuB,OAAQC,MAAOtB,QAEzDE,EA5BkC,GA6CzCqB,EAAuC,WACvC,SAASA,KAsCT,OA1BAA,EAAsBC,QAKtB,SAAUpB,GACN,OACIqB,SAAUF,EACVG,YAEQC,QAAS3B,EACT4B,SAAUxB,MAK1BmB,EAAsBN,aAChBP,KAAMZ,EAAK+B,SAAUP,OACXI,YAEQC,QAAS7B,EAAKgC,sBACdC,SAAU7B,QAK3BqB,EAvC+B,GA8C1ChC,EAAQyC,iBAvDR,SAASA,EAAiB5B,GACtB,OACIuB,QAAS3B,EACT4B,SAAUxB,IAqDlBb,EAAQgC,sBAAwBA,EAChChC,EAAQS,WAAaA,EACrBT,EAAQW,yBAA2BA,EAEnC+B,OAAOC,eAAe3C,EAAS,cAAgB4C,OAAO","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :\n\t(factory((global.npm_package = {}),global.ng.core));\n}(this, (function (exports,core) { 'use strict';\n\n/**\n * Token used by the ModuleMapNgFactoryLoader to load modules\n */\nvar MODULE_MAP = new core.InjectionToken('MODULE_MAP');\n/**\n * NgModuleFactoryLoader which does not lazy load\n */\nvar ModuleMapNgFactoryLoader = /** @class */ (function () {\n    function ModuleMapNgFactoryLoader(compiler, moduleMap) {\n        this.compiler = compiler;\n        this.moduleMap = moduleMap;\n    }\n    ModuleMapNgFactoryLoader.prototype.load = function (loadChildrenString) {\n        var offlineMode = this.compiler instanceof core.Compiler;\n        var type = this.moduleMap[loadChildrenString];\n        if (!type) {\n            throw new Error(loadChildrenString + \" did not exist in the MODULE_MAP\");\n        }\n        return offlineMode ?\n            this.loadFactory(type) : this.loadAndCompile(type);\n    };\n    ModuleMapNgFactoryLoader.prototype.loadFactory = function (factory) {\n        return new Promise(function (resolve) { return resolve(factory); });\n    };\n    ModuleMapNgFactoryLoader.prototype.loadAndCompile = function (type) {\n        return this.compiler.compileModuleAsync(type);\n    };\n    ModuleMapNgFactoryLoader.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    ModuleMapNgFactoryLoader.ctorParameters = function () { return [\n        { type: core.Compiler, },\n        { type: undefined, decorators: [{ type: core.Inject, args: [MODULE_MAP,] },] },\n    ]; };\n    return ModuleMapNgFactoryLoader;\n}());\n\n/**\n * Helper function for getting the providers object for the MODULE_MAP\n *\n * @param moduleMap Map to use as a value for MODULE_MAP\n */\nfunction provideModuleMap(moduleMap) {\n    return {\n        provide: MODULE_MAP,\n        useValue: moduleMap\n    };\n}\n/**\n * Module for using a NgModuleFactoryLoader which does not lazy load\n */\nvar ModuleMapLoaderModule = /** @class */ (function () {\n    function ModuleMapLoaderModule() {\n    }\n    /**\n     * Returns a ModuleMapLoaderModule along with a MODULE_MAP\n     *\n     * @param moduleMap Map to use as a value for MODULE_MAP\n     */\n    /**\n       * Returns a ModuleMapLoaderModule along with a MODULE_MAP\n       *\n       * @param moduleMap Map to use as a value for MODULE_MAP\n       */\n    ModuleMapLoaderModule.withMap = /**\n       * Returns a ModuleMapLoaderModule along with a MODULE_MAP\n       *\n       * @param moduleMap Map to use as a value for MODULE_MAP\n       */\n    function (moduleMap) {\n        return {\n            ngModule: ModuleMapLoaderModule,\n            providers: [\n                {\n                    provide: MODULE_MAP,\n                    useValue: moduleMap\n                }\n            ]\n        };\n    };\n    ModuleMapLoaderModule.decorators = [\n        { type: core.NgModule, args: [{\n                    providers: [\n                        {\n                            provide: core.NgModuleFactoryLoader,\n                            useClass: ModuleMapNgFactoryLoader\n                        }\n                    ]\n                },] }\n    ];\n    return ModuleMapLoaderModule;\n}());\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexports.provideModuleMap = provideModuleMap;\nexports.ModuleMapLoaderModule = ModuleMapLoaderModule;\nexports.MODULE_MAP = MODULE_MAP;\nexports.ModuleMapNgFactoryLoader = ModuleMapNgFactoryLoader;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=module-map-ngfactory-loader.umd.js.map\n"]}