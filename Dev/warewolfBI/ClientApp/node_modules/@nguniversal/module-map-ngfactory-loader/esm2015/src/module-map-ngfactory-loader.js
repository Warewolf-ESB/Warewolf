/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, InjectionToken, Inject, Compiler } from '@angular/core';
/**
 * Token used by the ModuleMapNgFactoryLoader to load modules
 */
export const /** @type {?} */ MODULE_MAP = new InjectionToken('MODULE_MAP');
/**
 * NgModuleFactoryLoader which does not lazy load
 */
export class ModuleMapNgFactoryLoader {
    /**
     * @param {?} compiler
     * @param {?} moduleMap
     */
    constructor(compiler, moduleMap) {
        this.compiler = compiler;
        this.moduleMap = moduleMap;
    }
    /**
     * @param {?} loadChildrenString
     * @return {?}
     */
    load(loadChildrenString) {
        const /** @type {?} */ offlineMode = this.compiler instanceof Compiler;
        const /** @type {?} */ type = this.moduleMap[loadChildrenString];
        if (!type) {
            throw new Error(`${loadChildrenString} did not exist in the MODULE_MAP`);
        }
        return offlineMode ?
            this.loadFactory(/** @type {?} */ (type)) : this.loadAndCompile(/** @type {?} */ (type));
    }
    /**
     * @param {?} factory
     * @return {?}
     */
    loadFactory(factory) {
        return new Promise(resolve => resolve(factory));
    }
    /**
     * @param {?} type
     * @return {?}
     */
    loadAndCompile(type) {
        return this.compiler.compileModuleAsync(type);
    }
}
ModuleMapNgFactoryLoader.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ModuleMapNgFactoryLoader.ctorParameters = () => [
    { type: Compiler, },
    { type: undefined, decorators: [{ type: Inject, args: [MODULE_MAP,] },] },
];
function ModuleMapNgFactoryLoader_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    ModuleMapNgFactoryLoader.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    ModuleMapNgFactoryLoader.ctorParameters;
    /** @type {?} */
    ModuleMapNgFactoryLoader.prototype.compiler;
    /** @type {?} */
    ModuleMapNgFactoryLoader.prototype.moduleMap;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLW1hcC1uZ2ZhY3RvcnktbG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9tb2R1bGUtbWFwLW5nZmFjdG9yeS1sb2FkZXIvc3JjL21vZHVsZS1tYXAtbmdmYWN0b3J5LWxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBT0EsT0FBTyxFQUNMLFVBQVUsRUFFVixjQUFjLEVBRWQsTUFBTSxFQUVOLFFBQVEsRUFDVCxNQUFNLGVBQWUsQ0FBQzs7OztBQU12QixNQUFNLENBQUMsdUJBQU0sVUFBVSxHQUE4QixJQUFJLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQzs7OztBQU10RixNQUFNOzs7OztJQUNKLFlBQW9CLFFBQWtCLEVBQThCO1FBQWhELGFBQVEsR0FBUixRQUFRLENBQVU7UUFBOEIsY0FBUyxHQUFULFNBQVM7S0FBZ0I7Ozs7O0lBRTdGLElBQUksQ0FBQyxrQkFBMEI7UUFDN0IsdUJBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLFlBQVksUUFBUSxDQUFDO1FBQ3RELHVCQUFNLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFFaEQsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLGtCQUFrQixrQ0FBa0MsQ0FBQyxDQUFDO1NBQzFFO1FBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxXQUFXLG1CQUF3QixJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsbUJBQWEsSUFBSSxFQUFDLENBQUM7S0FDekY7Ozs7O0lBRU8sV0FBVyxDQUFDLE9BQTZCO1FBQy9DLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDOzs7Ozs7SUFHMUMsY0FBYyxDQUFDLElBQWU7UUFDcEMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7Ozs7WUFyQmpELFVBQVU7Ozs7WUFaVCxRQUFROzRDQWNpQyxNQUFNLFNBQUMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHtcbiAgSW5qZWN0YWJsZSxcbiAgTmdNb2R1bGVGYWN0b3J5TG9hZGVyLFxuICBJbmplY3Rpb25Ub2tlbixcbiAgTmdNb2R1bGVGYWN0b3J5LFxuICBJbmplY3QsXG4gIFR5cGUsXG4gIENvbXBpbGVyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtNb2R1bGVNYXB9IGZyb20gJy4vbW9kdWxlLW1hcCc7XG5cbi8qKlxuICogVG9rZW4gdXNlZCBieSB0aGUgTW9kdWxlTWFwTmdGYWN0b3J5TG9hZGVyIHRvIGxvYWQgbW9kdWxlc1xuICovXG5leHBvcnQgY29uc3QgTU9EVUxFX01BUDogSW5qZWN0aW9uVG9rZW48TW9kdWxlTWFwPiA9IG5ldyBJbmplY3Rpb25Ub2tlbignTU9EVUxFX01BUCcpO1xuXG4vKipcbiAqIE5nTW9kdWxlRmFjdG9yeUxvYWRlciB3aGljaCBkb2VzIG5vdCBsYXp5IGxvYWRcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE1vZHVsZU1hcE5nRmFjdG9yeUxvYWRlciBpbXBsZW1lbnRzIE5nTW9kdWxlRmFjdG9yeUxvYWRlciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29tcGlsZXI6IENvbXBpbGVyLCBASW5qZWN0KE1PRFVMRV9NQVApIHByaXZhdGUgbW9kdWxlTWFwOiBNb2R1bGVNYXApIHsgfVxuXG4gIGxvYWQobG9hZENoaWxkcmVuU3RyaW5nOiBzdHJpbmcpOiBQcm9taXNlPE5nTW9kdWxlRmFjdG9yeTxhbnk+PiB7XG4gICAgY29uc3Qgb2ZmbGluZU1vZGUgPSB0aGlzLmNvbXBpbGVyIGluc3RhbmNlb2YgQ29tcGlsZXI7XG4gICAgY29uc3QgdHlwZSA9IHRoaXMubW9kdWxlTWFwW2xvYWRDaGlsZHJlblN0cmluZ107XG5cbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtsb2FkQ2hpbGRyZW5TdHJpbmd9IGRpZCBub3QgZXhpc3QgaW4gdGhlIE1PRFVMRV9NQVBgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2ZmbGluZU1vZGUgP1xuICAgICAgdGhpcy5sb2FkRmFjdG9yeSg8TmdNb2R1bGVGYWN0b3J5PGFueT4+IHR5cGUpIDogdGhpcy5sb2FkQW5kQ29tcGlsZSg8VHlwZTxhbnk+PiB0eXBlKTtcbiAgfVxuXG4gIHByaXZhdGUgbG9hZEZhY3RvcnkoZmFjdG9yeTogTmdNb2R1bGVGYWN0b3J5PGFueT4pOiBQcm9taXNlPE5nTW9kdWxlRmFjdG9yeTxhbnk+PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gcmVzb2x2ZShmYWN0b3J5KSk7XG4gIH1cblxuICBwcml2YXRlIGxvYWRBbmRDb21waWxlKHR5cGU6IFR5cGU8YW55Pik6IFByb21pc2U8TmdNb2R1bGVGYWN0b3J5PGFueT4+IHtcbiAgICByZXR1cm4gdGhpcy5jb21waWxlci5jb21waWxlTW9kdWxlQXN5bmModHlwZSk7XG4gIH1cbn1cbiJdfQ==