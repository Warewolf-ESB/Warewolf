import { NgModule, NgModuleFactoryLoader } from '@angular/core';
import { ModuleMapNgFactoryLoader, MODULE_MAP } from './module-map-ngfactory-loader';
/**
 * Helper function for getting the providers object for the MODULE_MAP
 *
 * @param moduleMap Map to use as a value for MODULE_MAP
 */
export function provideModuleMap(moduleMap) {
    return {
        provide: MODULE_MAP,
        useValue: moduleMap
    };
}
/**
 * Module for using a NgModuleFactoryLoader which does not lazy load
 */
var ModuleMapLoaderModule = /** @class */ (function () {
    function ModuleMapLoaderModule() {
    }
    /**
     * Returns a ModuleMapLoaderModule along with a MODULE_MAP
     *
     * @param moduleMap Map to use as a value for MODULE_MAP
     */
    /**
       * Returns a ModuleMapLoaderModule along with a MODULE_MAP
       *
       * @param moduleMap Map to use as a value for MODULE_MAP
       */
    ModuleMapLoaderModule.withMap = /**
       * Returns a ModuleMapLoaderModule along with a MODULE_MAP
       *
       * @param moduleMap Map to use as a value for MODULE_MAP
       */
    function (moduleMap) {
        return {
            ngModule: ModuleMapLoaderModule,
            providers: [
                {
                    provide: MODULE_MAP,
                    useValue: moduleMap
                }
            ]
        };
    };
    ModuleMapLoaderModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        {
                            provide: NgModuleFactoryLoader,
                            useClass: ModuleMapNgFactoryLoader
                        }
                    ]
                },] }
    ];
    return ModuleMapLoaderModule;
}());
export { ModuleMapLoaderModule };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLW1hcC1sb2FkZXIubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9tb2R1bGUtbWFwLW5nZmFjdG9yeS1sb2FkZXIvc3JjL21vZHVsZS1tYXAtbG9hZGVyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxPQUFPLEVBQ0wsUUFBUSxFQUNSLHFCQUFxQixFQUd0QixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7Ozs7OztBQVFyRixNQUFNLDJCQUEyQixTQUFvQjtJQUNuRCxNQUFNLENBQUM7UUFDTCxPQUFPLEVBQUUsVUFBVTtRQUNuQixRQUFRLEVBQUUsU0FBUztLQUNwQixDQUFDO0NBQ0g7Ozs7Ozs7SUFjQzs7OztPQUlHOzs7Ozs7SUFDSSw2QkFBTzs7Ozs7SUFBZCxVQUFlLFNBQW9CO1FBQ2pDLE1BQU0sQ0FBQztZQUNMLFFBQVEsRUFBRSxxQkFBcUI7WUFDL0IsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSxVQUFVO29CQUNuQixRQUFRLEVBQUUsU0FBUztpQkFDcEI7YUFDRjtTQUNGLENBQUM7S0FDSDs7Z0JBeEJGLFFBQVEsU0FBQztvQkFDUixTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLHFCQUFxQjs0QkFDOUIsUUFBUSxFQUFFLHdCQUF3Qjt5QkFDbkM7cUJBQ0Y7aUJBQ0Y7O2dDQXZDRDs7U0F3Q2EscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQge1xuICBOZ01vZHVsZSxcbiAgTmdNb2R1bGVGYWN0b3J5TG9hZGVyLFxuICBNb2R1bGVXaXRoUHJvdmlkZXJzLFxuICBTdGF0aWNQcm92aWRlclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTW9kdWxlTWFwTmdGYWN0b3J5TG9hZGVyLCBNT0RVTEVfTUFQIH0gZnJvbSAnLi9tb2R1bGUtbWFwLW5nZmFjdG9yeS1sb2FkZXInO1xuaW1wb3J0IHtNb2R1bGVNYXB9IGZyb20gJy4vbW9kdWxlLW1hcCc7XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIGZvciBnZXR0aW5nIHRoZSBwcm92aWRlcnMgb2JqZWN0IGZvciB0aGUgTU9EVUxFX01BUFxuICpcbiAqIEBwYXJhbSBtb2R1bGVNYXAgTWFwIHRvIHVzZSBhcyBhIHZhbHVlIGZvciBNT0RVTEVfTUFQXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlTW9kdWxlTWFwKG1vZHVsZU1hcDogTW9kdWxlTWFwKTogU3RhdGljUHJvdmlkZXIge1xuICByZXR1cm4ge1xuICAgIHByb3ZpZGU6IE1PRFVMRV9NQVAsXG4gICAgdXNlVmFsdWU6IG1vZHVsZU1hcFxuICB9O1xufVxuXG4vKipcbiAqIE1vZHVsZSBmb3IgdXNpbmcgYSBOZ01vZHVsZUZhY3RvcnlMb2FkZXIgd2hpY2ggZG9lcyBub3QgbGF6eSBsb2FkXG4gKi9cbkBOZ01vZHVsZSh7XG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5nTW9kdWxlRmFjdG9yeUxvYWRlcixcbiAgICAgIHVzZUNsYXNzOiBNb2R1bGVNYXBOZ0ZhY3RvcnlMb2FkZXJcbiAgICB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTW9kdWxlTWFwTG9hZGVyTW9kdWxlIHtcbiAgLyoqXG4gICAqIFJldHVybnMgYSBNb2R1bGVNYXBMb2FkZXJNb2R1bGUgYWxvbmcgd2l0aCBhIE1PRFVMRV9NQVBcbiAgICpcbiAgICogQHBhcmFtIG1vZHVsZU1hcCBNYXAgdG8gdXNlIGFzIGEgdmFsdWUgZm9yIE1PRFVMRV9NQVBcbiAgICovXG4gIHN0YXRpYyB3aXRoTWFwKG1vZHVsZU1hcDogTW9kdWxlTWFwKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBNb2R1bGVNYXBMb2FkZXJNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IE1PRFVMRV9NQVAsXG4gICAgICAgICAgdXNlVmFsdWU6IG1vZHVsZU1hcFxuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19