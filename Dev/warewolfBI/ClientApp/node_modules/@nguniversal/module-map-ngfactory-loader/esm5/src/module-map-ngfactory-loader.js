import { Injectable, InjectionToken, Inject, Compiler } from '@angular/core';
/**
 * Token used by the ModuleMapNgFactoryLoader to load modules
 */
export var MODULE_MAP = new InjectionToken('MODULE_MAP');
/**
 * NgModuleFactoryLoader which does not lazy load
 */
var ModuleMapNgFactoryLoader = /** @class */ (function () {
    function ModuleMapNgFactoryLoader(compiler, moduleMap) {
        this.compiler = compiler;
        this.moduleMap = moduleMap;
    }
    ModuleMapNgFactoryLoader.prototype.load = function (loadChildrenString) {
        var offlineMode = this.compiler instanceof Compiler;
        var type = this.moduleMap[loadChildrenString];
        if (!type) {
            throw new Error(loadChildrenString + " did not exist in the MODULE_MAP");
        }
        return offlineMode ?
            this.loadFactory(type) : this.loadAndCompile(type);
    };
    ModuleMapNgFactoryLoader.prototype.loadFactory = function (factory) {
        return new Promise(function (resolve) { return resolve(factory); });
    };
    ModuleMapNgFactoryLoader.prototype.loadAndCompile = function (type) {
        return this.compiler.compileModuleAsync(type);
    };
    ModuleMapNgFactoryLoader.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ModuleMapNgFactoryLoader.ctorParameters = function () { return [
        { type: Compiler, },
        { type: undefined, decorators: [{ type: Inject, args: [MODULE_MAP,] },] },
    ]; };
    return ModuleMapNgFactoryLoader;
}());
export { ModuleMapNgFactoryLoader };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLW1hcC1uZ2ZhY3RvcnktbG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9tb2R1bGUtbWFwLW5nZmFjdG9yeS1sb2FkZXIvc3JjL21vZHVsZS1tYXAtbmdmYWN0b3J5LWxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxPQUFPLEVBQ0wsVUFBVSxFQUVWLGNBQWMsRUFFZCxNQUFNLEVBRU4sUUFBUSxFQUNULE1BQU0sZUFBZSxDQUFDOzs7O0FBTXZCLE1BQU0sQ0FBQyxJQUFNLFVBQVUsR0FBOEIsSUFBSSxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7Ozs7O0lBT3BGLGtDQUFvQixRQUFrQixFQUE4QjtRQUFoRCxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQThCLGNBQVMsR0FBVCxTQUFTO0tBQWdCO0lBRTdGLHVDQUFJLEdBQUosVUFBSyxrQkFBMEI7UUFDN0IsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsWUFBWSxRQUFRLENBQUM7UUFDdEQsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBRWhELEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNWLE1BQU0sSUFBSSxLQUFLLENBQUksa0JBQWtCLHFDQUFrQyxDQUFDLENBQUM7U0FDMUU7UUFFRCxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDbEIsSUFBSSxDQUFDLFdBQVcsQ0FBd0IsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQWEsSUFBSSxDQUFDLENBQUM7S0FDekY7SUFFTyw4Q0FBVyxHQUFuQixVQUFvQixPQUE2QjtRQUMvQyxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsVUFBQSxPQUFPLElBQUksT0FBQSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQWhCLENBQWdCLENBQUMsQ0FBQztLQUNqRDtJQUVPLGlEQUFjLEdBQXRCLFVBQXVCLElBQWU7UUFDcEMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDL0M7O2dCQXRCRixVQUFVOzs7O2dCQVpULFFBQVE7Z0RBY2lDLE1BQU0sU0FBQyxVQUFVOzttQ0E1QjVEOztTQTJCYSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7XG4gIEluamVjdGFibGUsXG4gIE5nTW9kdWxlRmFjdG9yeUxvYWRlcixcbiAgSW5qZWN0aW9uVG9rZW4sXG4gIE5nTW9kdWxlRmFjdG9yeSxcbiAgSW5qZWN0LFxuICBUeXBlLFxuICBDb21waWxlclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TW9kdWxlTWFwfSBmcm9tICcuL21vZHVsZS1tYXAnO1xuXG4vKipcbiAqIFRva2VuIHVzZWQgYnkgdGhlIE1vZHVsZU1hcE5nRmFjdG9yeUxvYWRlciB0byBsb2FkIG1vZHVsZXNcbiAqL1xuZXhwb3J0IGNvbnN0IE1PRFVMRV9NQVA6IEluamVjdGlvblRva2VuPE1vZHVsZU1hcD4gPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ01PRFVMRV9NQVAnKTtcblxuLyoqXG4gKiBOZ01vZHVsZUZhY3RvcnlMb2FkZXIgd2hpY2ggZG9lcyBub3QgbGF6eSBsb2FkXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNb2R1bGVNYXBOZ0ZhY3RvcnlMb2FkZXIgaW1wbGVtZW50cyBOZ01vZHVsZUZhY3RvcnlMb2FkZXIge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbXBpbGVyOiBDb21waWxlciwgQEluamVjdChNT0RVTEVfTUFQKSBwcml2YXRlIG1vZHVsZU1hcDogTW9kdWxlTWFwKSB7IH1cblxuICBsb2FkKGxvYWRDaGlsZHJlblN0cmluZzogc3RyaW5nKTogUHJvbWlzZTxOZ01vZHVsZUZhY3Rvcnk8YW55Pj4ge1xuICAgIGNvbnN0IG9mZmxpbmVNb2RlID0gdGhpcy5jb21waWxlciBpbnN0YW5jZW9mIENvbXBpbGVyO1xuICAgIGNvbnN0IHR5cGUgPSB0aGlzLm1vZHVsZU1hcFtsb2FkQ2hpbGRyZW5TdHJpbmddO1xuXG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bG9hZENoaWxkcmVuU3RyaW5nfSBkaWQgbm90IGV4aXN0IGluIHRoZSBNT0RVTEVfTUFQYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9mZmxpbmVNb2RlID9cbiAgICAgIHRoaXMubG9hZEZhY3RvcnkoPE5nTW9kdWxlRmFjdG9yeTxhbnk+PiB0eXBlKSA6IHRoaXMubG9hZEFuZENvbXBpbGUoPFR5cGU8YW55Pj4gdHlwZSk7XG4gIH1cblxuICBwcml2YXRlIGxvYWRGYWN0b3J5KGZhY3Rvcnk6IE5nTW9kdWxlRmFjdG9yeTxhbnk+KTogUHJvbWlzZTxOZ01vZHVsZUZhY3Rvcnk8YW55Pj4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHJlc29sdmUoZmFjdG9yeSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBsb2FkQW5kQ29tcGlsZSh0eXBlOiBUeXBlPGFueT4pOiBQcm9taXNlPE5nTW9kdWxlRmFjdG9yeTxhbnk+PiB7XG4gICAgcmV0dXJuIHRoaXMuY29tcGlsZXIuY29tcGlsZU1vZHVsZUFzeW5jKHR5cGUpO1xuICB9XG59XG4iXX0=