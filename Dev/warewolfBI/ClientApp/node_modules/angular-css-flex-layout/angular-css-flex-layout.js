import { Directive, ElementRef, Input, NgModule, Renderer2 } from '@angular/core';

class BaseFxDirective {
    /**
     * @param {?} elRef
     * @param {?} renderer
     */
    constructor(elRef, renderer) {
        this.elRef = elRef;
        this.renderer = renderer;
        this.prevValueCache = {};
    }
    /**
     * @param {?} className
     * @return {?}
     */
    removeClass(className) {
        this.renderer.removeClass(this.elRef.nativeElement, this.normalize(className));
    }
    /**
     * @param {?} attr
     * @param {?=} value
     * @return {?}
     */
    setClass(attr, value = '') {
        const /** @type {?} */ className = this.normalize(value ? `${attr}-${value}` : attr);
        if (value) {
            if (this.prevValueCache[attr]) {
                this.renderer.removeClass(this.elRef.nativeElement, this.prevValueCache[attr]);
            }
            this.prevValueCache[attr] = className;
        }
        this.renderer.addClass(this.elRef.nativeElement, className);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    normalize(value) {
        if (!value) {
            return value;
        }
        return value.replace(/([A-Z]|\s+|\.)/g, function (match) {
            return '-' + match.trim().toLowerCase();
        });
    }
}

class LayoutDirective extends BaseFxDirective {
    /**
     * @param {?} elRef
     * @param {?} renderer
     */
    constructor(elRef, renderer) {
        super(elRef, renderer);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set layout(val) { this.setClass('layout', val || 'row'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set layoutXs(val) { this.setClass('layoutXs', val || 'row'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set layoutSm(val) { this.setClass('layoutSm', val || 'row'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set layoutMd(val) { this.setClass('layoutMd', val || 'row'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set layoutLg(val) { this.setClass('layoutLg', val || 'row'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set layoutXl(val) { this.setClass('layoutXl', val || 'row'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set layoutGtXs(val) { this.setClass('layoutGtXs', val || 'row'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set layoutGtSm(val) { this.setClass('layoutGtSm', val || 'row'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set layoutGtMd(val) { this.setClass('layoutGtMd', val || 'row'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set layoutGtLg(val) { this.setClass('layoutGtLg', val || 'row'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set layoutLtSm(val) { this.setClass('layoutLtSm', val || 'row'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set layoutLtMd(val) { this.setClass('layoutLtMd', val || 'row'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set layoutLtLg(val) { this.setClass('layoutLtLg', val || 'row'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set layoutLtXl(val) { this.setClass('layoutLtXl', val || 'row'); }
    ;
}
LayoutDirective.decorators = [
    { type: Directive, args: [{ selector: `
  [fxLayout],
  [fxLayout.xs], [fxLayout.sm], [fxLayout.md], [fxLayout.lg], [fxLayout.xl],
  [fxLayout.lt-sm], [fxLayout.lt-md], [fxLayout.lt-lg], [fxLayout.lt-xl],
  [fxLayout.gt-xs], [fxLayout.gt-sm], [fxLayout.gt-md], [fxLayout.gt-lg]
` },] },
];
/**
 * @nocollapse
 */
LayoutDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
LayoutDirective.propDecorators = {
    'layout': [{ type: Input, args: ['fxLayout',] },],
    'layoutXs': [{ type: Input, args: ['fxLayout.xs',] },],
    'layoutSm': [{ type: Input, args: ['fxLayout.sm',] },],
    'layoutMd': [{ type: Input, args: ['fxLayout.md',] },],
    'layoutLg': [{ type: Input, args: ['fxLayout.lg',] },],
    'layoutXl': [{ type: Input, args: ['fxLayout.xl',] },],
    'layoutGtXs': [{ type: Input, args: ['fxLayout.gt-xs',] },],
    'layoutGtSm': [{ type: Input, args: ['fxLayout.gt-sm',] },],
    'layoutGtMd': [{ type: Input, args: ['fxLayout.gt-md',] },],
    'layoutGtLg': [{ type: Input, args: ['fxLayout.gt-lg',] },],
    'layoutLtSm': [{ type: Input, args: ['fxLayout.lt-sm',] },],
    'layoutLtMd': [{ type: Input, args: ['fxLayout.lt-md',] },],
    'layoutLtLg': [{ type: Input, args: ['fxLayout.lt-lg',] },],
    'layoutLtXl': [{ type: Input, args: ['fxLayout.lt-xl',] },],
};

class LayoutAlignDirective extends BaseFxDirective {
    /**
     * @param {?} elRef
     * @param {?} renderer
     */
    constructor(elRef, renderer) {
        super(elRef, renderer);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set align(val) { this.setClass('layoutAlign', val); }
    /**
     * @param {?} val
     * @return {?}
     */
    set alignXs(val) { this.setClass('layoutAlignXs', val); }
    /**
     * @param {?} val
     * @return {?}
     */
    set alignSm(val) { this.setClass('layoutAlignSm', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set alignMd(val) { this.setClass('layoutAlignMd', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set alignLg(val) { this.setClass('layoutAlignLg', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set alignXl(val) { this.setClass('layoutAlignXl', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set alignGtXs(val) { this.setClass('layoutAlignGtXs', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set alignGtSm(val) { this.setClass('layoutAlignGtSm', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set alignGtMd(val) { this.setClass('layoutAlignGtMd', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set alignGtLg(val) { this.setClass('layoutAlignGtLg', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set alignLtSm(val) { this.setClass('layoutAlignLtSm', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set alignLtMd(val) { this.setClass('layoutAlignLtMd', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set alignLtLg(val) { this.setClass('layoutAlignLtLg', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set alignLtXl(val) { this.setClass('layoutAlignLtXl', val); }
    ;
}
LayoutAlignDirective.decorators = [
    { type: Directive, args: [{ selector: `
  [fxLayoutAlign],
  [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md], [fxLayoutAlign.lg],[fxLayoutAlign.xl],
  [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md], [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl],
  [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm], [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]
` },] },
];
/**
 * @nocollapse
 */
LayoutAlignDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
LayoutAlignDirective.propDecorators = {
    'align': [{ type: Input, args: ['fxLayoutAlign',] },],
    'alignXs': [{ type: Input, args: ['fxLayoutAlign.xs',] },],
    'alignSm': [{ type: Input, args: ['fxLayoutAlign.sm',] },],
    'alignMd': [{ type: Input, args: ['fxLayoutAlign.md',] },],
    'alignLg': [{ type: Input, args: ['fxLayoutAlign.lg',] },],
    'alignXl': [{ type: Input, args: ['fxLayoutAlign.xl',] },],
    'alignGtXs': [{ type: Input, args: ['fxLayoutAlign.gt-xs',] },],
    'alignGtSm': [{ type: Input, args: ['fxLayoutAlign.gt-sm',] },],
    'alignGtMd': [{ type: Input, args: ['fxLayoutAlign.gt-md',] },],
    'alignGtLg': [{ type: Input, args: ['fxLayoutAlign.gt-lg',] },],
    'alignLtSm': [{ type: Input, args: ['fxLayoutAlign.lt-sm',] },],
    'alignLtMd': [{ type: Input, args: ['fxLayoutAlign.lt-md',] },],
    'alignLtLg': [{ type: Input, args: ['fxLayoutAlign.lt-lg',] },],
    'alignLtXl': [{ type: Input, args: ['fxLayoutAlign.lt-xl',] },],
};

class LayoutWrapDirective extends BaseFxDirective {
    /**
     * @param {?} elRef
     * @param {?} renderer
     */
    constructor(elRef, renderer) {
        super(elRef, renderer);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set wrap(val) {
        this.removeClass('layoutNowrap');
        this.removeClass('layoutWrap');
        if (!val || val === 'wrap') {
            this.setClass('layoutWrap');
        }
        else if (val === 'nowrap') {
            this.setClass('layoutNowrap');
        }
    }
}
LayoutWrapDirective.decorators = [
    { type: Directive, args: [{
                selector: `
  [fxLayoutWrap], [fxLayoutWrap.xs], [fxLayoutWrap.sm], [fxLayoutWrap.lg], [fxLayoutWrap.xl],
  [fxLayoutWrap.gt-xs], [fxLayoutWrap.gt-sm], [fxLayoutWrap.gt-md], [fxLayoutWrap.gt-lg],
  [fxLayoutWrap.lt-xs], [fxLayoutWrap.lt-sm], [fxLayoutWrap.lt-md], [fxLayoutWrap.lt-lg]
`
            },] },
];
/**
 * @nocollapse
 */
LayoutWrapDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
LayoutWrapDirective.propDecorators = {
    'wrap': [{ type: Input, args: ['fxLayoutWrap',] },],
};

class FlexDirective extends BaseFxDirective {
    /**
     * @param {?} elRef
     * @param {?} renderer
     */
    constructor(elRef, renderer) {
        super(elRef, renderer);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set flex(val) { this.setClass('flex', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set flexXs(val) { this.setClass('flexXs', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set flexSm(val) { this.setClass('flexSm', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set flexMd(val) { this.setClass('flexMd', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set flexLg(val) { this.setClass('flexLg', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set flexXl(val) { this.setClass('flexXl', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set flexGtXs(val) { this.setClass('flexGtXs', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set flexGtSm(val) { this.setClass('flexGtSm', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set flexGtMd(val) { this.setClass('flexGtMd', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set flexGtLg(val) { this.setClass('flexGtLg', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set flexLtSm(val) { this.setClass('flexLtSm', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set flexLtMd(val) { this.setClass('flexLtMd', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set flexLtLg(val) { this.setClass('flexLtLg', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set flexLtXl(val) { this.setClass('flexLtXl', val); }
    ;
}
FlexDirective.decorators = [
    { type: Directive, args: [{ selector: `
  [fxFlex],
  [fxFlex.xs], [fxFlex.sm], [fxFlex.md], [fxFlex.lg], [fxFlex.xl],
  [fxFlex.lt-sm], [fxFlex.lt-md], [fxFlex.lt-lg], [fxFlex.lt-xl],
  [fxFlex.gt-xs], [fxFlex.gt-sm], [fxFlex.gt-md], [fxFlex.gt-lg],
`
            },] },
];
/**
 * @nocollapse
 */
FlexDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
FlexDirective.propDecorators = {
    'flex': [{ type: Input, args: ['fxFlex',] },],
    'flexXs': [{ type: Input, args: ['fxFlex.xs',] },],
    'flexSm': [{ type: Input, args: ['fxFlex.sm',] },],
    'flexMd': [{ type: Input, args: ['fxFlex.md',] },],
    'flexLg': [{ type: Input, args: ['fxFlex.lg',] },],
    'flexXl': [{ type: Input, args: ['fxFlex.xl',] },],
    'flexGtXs': [{ type: Input, args: ['fxFlex.gt-xs',] },],
    'flexGtSm': [{ type: Input, args: ['fxFlex.gt-sm',] },],
    'flexGtMd': [{ type: Input, args: ['fxFlex.gt-md',] },],
    'flexGtLg': [{ type: Input, args: ['fxFlex.gt-lg',] },],
    'flexLtSm': [{ type: Input, args: ['fxFlex.lt-sm',] },],
    'flexLtMd': [{ type: Input, args: ['fxFlex.lt-md',] },],
    'flexLtLg': [{ type: Input, args: ['fxFlex.lt-lg',] },],
    'flexLtXl': [{ type: Input, args: ['fxFlex.lt-xl',] },],
};

class FlexOrderDirective extends BaseFxDirective {
    /**
     * @param {?} elRef
     * @param {?} renderer
     */
    constructor(elRef, renderer) {
        super(elRef, renderer);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set order(val) { this.setClass('flexOrder', val); }
    /**
     * @param {?} val
     * @return {?}
     */
    set orderXs(val) { this.setClass('flexOrderXs', val); }
    /**
     * @param {?} val
     * @return {?}
     */
    set orderSm(val) { this.setClass('flexOrderSm', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set orderMd(val) { this.setClass('flexOrderMd', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set orderLg(val) { this.setClass('flexOrderLg', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set orderXl(val) { this.setClass('flexOrderXl', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set orderGtXs(val) { this.setClass('flexOrderGtXs', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set orderGtSm(val) { this.setClass('flexOrderGtSm', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set orderGtMd(val) { this.setClass('flexOrderGtMd', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set orderGtLg(val) { this.setClass('flexOrderGtLg', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set orderLtSm(val) { this.setClass('flexOrderLtSm', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set orderLtMd(val) { this.setClass('flexOrderLtMd', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set orderLtLg(val) { this.setClass('flexOrderLtLg', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set orderLtXl(val) { this.setClass('flexOrderLtXl', val); }
    ;
}
FlexOrderDirective.decorators = [
    { type: Directive, args: [{ selector: `
  [fxFlexOrder],
  [fxFlexOrder.xs], [fxFlexOrder.sm], [fxFlexOrder.md], [fxFlexOrder.lg], [fxFlexOrder.xl],
  [fxFlexOrder.lt-sm], [fxFlexOrder.lt-md], [fxFlexOrder.lt-lg], [fxFlexOrder.lt-xl],
  [fxFlexOrder.gt-xs], [fxFlexOrder.gt-sm], [fxFlexOrder.gt-md], [fxFlexOrder.gt-lg]
` },] },
];
/**
 * @nocollapse
 */
FlexOrderDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
FlexOrderDirective.propDecorators = {
    'order': [{ type: Input, args: ['fxFlexOrder',] },],
    'orderXs': [{ type: Input, args: ['fxFlexOrder.xs',] },],
    'orderSm': [{ type: Input, args: ['fxFlexOrder.sm',] },],
    'orderMd': [{ type: Input, args: ['fxFlexOrder.md',] },],
    'orderLg': [{ type: Input, args: ['fxFlexOrder.lg',] },],
    'orderXl': [{ type: Input, args: ['fxFlexOrder.xl',] },],
    'orderGtXs': [{ type: Input, args: ['fxFlexOrder.gt-xs',] },],
    'orderGtSm': [{ type: Input, args: ['fxFlexOrder.gt-sm',] },],
    'orderGtMd': [{ type: Input, args: ['fxFlexOrder.gt-md',] },],
    'orderGtLg': [{ type: Input, args: ['fxFlexOrder.gt-lg',] },],
    'orderLtSm': [{ type: Input, args: ['fxFlexOrder.lt-sm',] },],
    'orderLtMd': [{ type: Input, args: ['fxFlexOrder.lt-md',] },],
    'orderLtLg': [{ type: Input, args: ['fxFlexOrder.lt-lg',] },],
    'orderLtXl': [{ type: Input, args: ['fxFlexOrder.lt-xl',] },],
};

class FlexOffsetDirective extends BaseFxDirective {
    /**
     * @param {?} elRef
     * @param {?} renderer
     */
    constructor(elRef, renderer) {
        super(elRef, renderer);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set offset(val) { this.setClass('flexOffset', val); }
    /**
     * @param {?} val
     * @return {?}
     */
    set offsetXs(val) { this.setClass('flexOffsetXs', val); }
    /**
     * @param {?} val
     * @return {?}
     */
    set offsetSm(val) { this.setClass('flexOffsetSm', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set offsetMd(val) { this.setClass('flexOffsetMd', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set offsetLg(val) { this.setClass('flexOffsetLg', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set offsetXl(val) { this.setClass('flexOffsetXl', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set offsetLtSm(val) { this.setClass('flexOffsetLtSm', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set offsetLtMd(val) { this.setClass('flexOffsetLtMd', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set offsetLtLg(val) { this.setClass('flexOffsetLtLg', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set offsetLtXl(val) { this.setClass('flexOffsetLtXl', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set offsetGtXs(val) { this.setClass('flexOffsetGtXs', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set offsetGtSm(val) { this.setClass('flexOffsetGtSm', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set offsetGtMd(val) { this.setClass('flexOffsetGtMd', val); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set offsetGtLg(val) { this.setClass('flexOffsetGtLg', val); }
    ;
}
FlexOffsetDirective.decorators = [
    { type: Directive, args: [{ selector: `
  [fxFlexOffset],
  [fxFlexOffset.xs], [fxFlexOffset.sm], [fxFlexOffset.md], [fxFlexOffset.lg], [fxFlexOffset.xl],
  [fxFlexOffset.lt-sm], [fxFlexOffset.lt-md], [fxFlexOffset.lt-lg], [fxFlexOffset.lt-xl],
  [fxFlexOffset.gt-xs], [fxFlexOffset.gt-sm], [fxFlexOffset.gt-md], [fxFlexOffset.gt-lg]
` },] },
];
/**
 * @nocollapse
 */
FlexOffsetDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
FlexOffsetDirective.propDecorators = {
    'offset': [{ type: Input, args: ['fxFlexOffset',] },],
    'offsetXs': [{ type: Input, args: ['fxFlexOffset.xs',] },],
    'offsetSm': [{ type: Input, args: ['fxFlexOffset.sm',] },],
    'offsetMd': [{ type: Input, args: ['fxFlexOffset.md',] },],
    'offsetLg': [{ type: Input, args: ['fxFlexOffset.lg',] },],
    'offsetXl': [{ type: Input, args: ['fxFlexOffset.xl',] },],
    'offsetLtSm': [{ type: Input, args: ['fxFlexOffset.lt-sm',] },],
    'offsetLtMd': [{ type: Input, args: ['fxFlexOffset.lt-md',] },],
    'offsetLtLg': [{ type: Input, args: ['fxFlexOffset.lt-lg',] },],
    'offsetLtXl': [{ type: Input, args: ['fxFlexOffset.lt-xl',] },],
    'offsetGtXs': [{ type: Input, args: ['fxFlexOffset.gt-xs',] },],
    'offsetGtSm': [{ type: Input, args: ['fxFlexOffset.gt-sm',] },],
    'offsetGtMd': [{ type: Input, args: ['fxFlexOffset.gt-md',] },],
    'offsetGtLg': [{ type: Input, args: ['fxFlexOffset.gt-lg',] },],
};

class FlexFillDirective extends BaseFxDirective {
    /**
     * @param {?} elRef
     * @param {?} renderer
     */
    constructor(elRef, renderer) {
        super(elRef, renderer);
        this.setClass('layoutFill');
    }
}
FlexFillDirective.decorators = [
    { type: Directive, args: [{ selector: `
  [fxFill],
  [fxFlexFill]
` },] },
];
/**
 * @nocollapse
 */
FlexFillDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];

class ShowHideDirective extends BaseFxDirective {
    /**
     * @param {?} elRef
     * @param {?} renderer
     */
    constructor(elRef, renderer) {
        super(elRef, renderer);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set show(val) { this.setClass('show'); }
    /**
     * @param {?} val
     * @return {?}
     */
    set showXs(val) { this.setClass('showXs'); }
    /**
     * @param {?} val
     * @return {?}
     */
    set showSm(val) { this.setClass('showSm'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set showMd(val) { this.setClass('showMd'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set showLg(val) { this.setClass('showLg'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set showXl(val) { this.setClass('showXl'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set showLtSm(val) { this.setClass('showLtSm'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set showLtMd(val) { this.setClass('showLtMd'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set showLtLg(val) { this.setClass('showLtLg'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set showLtXl(val) { this.setClass('showLtXl'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set showGtXs(val) { this.setClass('showGtXs'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set showGtSm(val) { this.setClass('showGtSm'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set showGtMd(val) { this.setClass('showGtMd'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set showGtLg(val) { this.setClass('showGtLg'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set hide(val) { this.setClass('hide'); }
    /**
     * @param {?} val
     * @return {?}
     */
    set hideXs(val) { this.setClass('hideXs'); }
    /**
     * @param {?} val
     * @return {?}
     */
    set hideSm(val) { this.setClass('hideSm'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set hideMd(val) { this.setClass('hideMd'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set hideLg(val) { this.setClass('hideLg'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set hideXl(val) { this.setClass('hideXl'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set hideLtSm(val) { this.setClass('hideLtSm'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set hideLtMd(val) { this.setClass('hideLtMd'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set hideLtLg(val) { this.setClass('hideLtLg'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set hideLtXl(val) { this.setClass('hideLtXl'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set hideGtXs(val) { this.setClass('hideGtXs'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set hideGtSm(val) { this.setClass('hideGtSm'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set hideGtMd(val) { this.setClass('hideGtMd'); }
    ;
    /**
     * @param {?} val
     * @return {?}
     */
    set hideGtLg(val) { this.setClass('hideGtLg'); }
    ;
}
ShowHideDirective.decorators = [
    { type: Directive, args: [{
                selector: `
  [fxShow],
  [fxShow.xs], [fxShow.sm], [fxShow.md], [fxShow.lg], [fxShow.xl],
  [fxShow.lt-sm], [fxShow.lt-md], [fxShow.lt-lg], [fxShow.lt-xl],
  [fxShow.gt-xs], [fxShow.gt-sm], [fxShow.gt-md], [fxShow.gt-lg],
  [fxHide],
  [fxHide.xs], [fxHide.sm], [fxHide.md], [fxHide.lg], [fxHide.xl],
  [fxHide.lt-sm], [fxHide.lt-md], [fxHide.lt-lg], [fxHide.lt-xl],
  [fxHide.gt-xs], [fxHide.gt-sm], [fxHide.gt-md], [fxHide.gt-lg]
`
            },] },
];
/**
 * @nocollapse
 */
ShowHideDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
ShowHideDirective.propDecorators = {
    'show': [{ type: Input, args: ['fxShow',] },],
    'showXs': [{ type: Input, args: ['fxShow.xs',] },],
    'showSm': [{ type: Input, args: ['fxShow.sm',] },],
    'showMd': [{ type: Input, args: ['fxShow.md',] },],
    'showLg': [{ type: Input, args: ['fxShow.lg',] },],
    'showXl': [{ type: Input, args: ['fxShow.xl',] },],
    'showLtSm': [{ type: Input, args: ['fxShow.lt-sm',] },],
    'showLtMd': [{ type: Input, args: ['fxShow.lt-md',] },],
    'showLtLg': [{ type: Input, args: ['fxShow.lt-lg',] },],
    'showLtXl': [{ type: Input, args: ['fxShow.lt-xl',] },],
    'showGtXs': [{ type: Input, args: ['fxShow.gt-xs',] },],
    'showGtSm': [{ type: Input, args: ['fxShow.gt-sm',] },],
    'showGtMd': [{ type: Input, args: ['fxShow.gt-md',] },],
    'showGtLg': [{ type: Input, args: ['fxShow.gt-lg',] },],
    'hide': [{ type: Input, args: ['fxHide',] },],
    'hideXs': [{ type: Input, args: ['fxHide.xs',] },],
    'hideSm': [{ type: Input, args: ['fxHide.sm',] },],
    'hideMd': [{ type: Input, args: ['fxHide.md',] },],
    'hideLg': [{ type: Input, args: ['fxHide.lg',] },],
    'hideXl': [{ type: Input, args: ['fxHide.xl',] },],
    'hideLtSm': [{ type: Input, args: ['fxHide.lt-sm',] },],
    'hideLtMd': [{ type: Input, args: ['fxHide.lt-md',] },],
    'hideLtLg': [{ type: Input, args: ['fxHide.lt-lg',] },],
    'hideLtXl': [{ type: Input, args: ['fxHide.lt-xl',] },],
    'hideGtXs': [{ type: Input, args: ['fxHide.gt-xs',] },],
    'hideGtSm': [{ type: Input, args: ['fxHide.gt-sm',] },],
    'hideGtMd': [{ type: Input, args: ['fxHide.gt-md',] },],
    'hideGtLg': [{ type: Input, args: ['fxHide.gt-lg',] },],
};

class CssFlexLayoutModule {
}
CssFlexLayoutModule.decorators = [
    { type: NgModule, args: [{
                declarations: [LayoutDirective, LayoutWrapDirective, LayoutAlignDirective, FlexDirective, FlexOrderDirective,
                    FlexOffsetDirective, FlexFillDirective, ShowHideDirective],
                exports: [LayoutDirective, LayoutWrapDirective, LayoutAlignDirective, FlexDirective, FlexOrderDirective,
                    FlexOffsetDirective, FlexFillDirective, ShowHideDirective],
            },] },
];
/**
 * @nocollapse
 */
CssFlexLayoutModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { CssFlexLayoutModule, BaseFxDirective as ɵb, FlexFillDirective as ɵh, FlexOffsetDirective as ɵg, FlexOrderDirective as ɵf, FlexDirective as ɵe, LayoutAlignDirective as ɵd, LayoutWrapDirective as ɵc, LayoutDirective as ɵa, ShowHideDirective as ɵi };
//# sourceMappingURL=angular-css-flex-layout.js.map
