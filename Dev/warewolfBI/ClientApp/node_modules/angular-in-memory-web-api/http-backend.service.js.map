{"version":3,"file":"http-backend.service.js","sourceRoot":"","sources":["http-backend.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAEvE,OAAO,EAAE,UAAU,EACV,OAAO,EAAE,UAAU,EAAW,aAAa,EAC3C,QAAQ,EACR,eAAe,IAAI,mBAAmB,EAEtC,eAAe,EACf,UAAU,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAGzD,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAErC,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAE7C,OAAO,EACL,qBAAqB,EACrB,yBAAyB,EACzB,iBAAiB,EAElB,MAAM,cAAc,CAAC;AAEtB,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA8BX,sCAAc;IAEpD,4BACU,QAAkB,EAC1B,cAAiC,EACU;QAH7C,YAKE,kBAAM,cAAc,EAAE,MAAM,CAAC,SAC9B;QALS,cAAQ,GAAR,QAAQ,CAAU;;KAK3B;IAED,6CAAgB,GAAhB,UAAiB,GAAY;QAC3B,IAAI,QAA8B,CAAC;QACnC,IAAI,CAAC;YACH,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;SAEpC;QAAC,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC;YACf,IAAM,GAAG,GAAG,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC;YACnC,IAAM,YAAU,GAAG,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,qBAAqB,EAAE,KAAG,GAAK,CAAC,CAAC;YACpG,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,cAAM,OAAA,YAAU,EAAV,CAAU,CAAC,CAAC;SACnD;QAED,MAAM,CAAC;YACL,UAAU,EAAE,UAAU,CAAC,IAAI;YAC3B,OAAO,EAAE,GAAG;YACZ,QAAQ,UAAA;SACT,CAAC;KACH;IAED,+BAA+B;IAErB,wCAAW,GAArB,UAAsB,GAAY;QAChC,IAAI,CAAC;YACH,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;SACnB;QAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;YACX,IAAM,GAAG,GAAG,MAAI,GAAG,CAAC,GAAG,sCAAiC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAG,CAAC;YAC5E,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;SACtB;KACF;IAES,6CAAgB,GAA1B,UAA2B,GAAY;QACrC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;KACrD;IAES,0CAAa,GAAvB,UAAwB,OAAqC;QAC3D,MAAM,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC;KAC7B;IAES,2CAAc,GAAxB,UAAyB,MAAc;QACrC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,GAAG,EAAoB,CAAC;KACrF;IAES,gEAAmC,GAA7C,UAA8C,WAAwC;QACpF,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,IAAyB;YACpD,MAAM,CAAC,IAAI,QAAQ,CAAC,IAAI,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC;SACpD,CAAC,CAAC,CAAC;KACL;IAES,kDAAqB,GAA/B;QACE,IAAI,CAAC;;YAEH,IAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YACjD,IAAM,mBAAmB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;YACnE,IAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YACrD,IAAM,YAAU,GAAG,IAAI,UAAU,CAAC,UAAU,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;YAEjF,MAAM,CAAC;gBACL,MAAM,EAAE,UAAC,GAAY,IAAK,OAAA,YAAU,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAzC,CAAyC;aACpE,CAAC;SAEH;QAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;YACX,CAAC,CAAC,OAAO,GAAG,qCAAqC,GAAG,CAAC,CAAC,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;YACtE,MAAM,CAAC,CAAC;SACT;KACF;;gBA1EF,UAAU;;;;gBAnDkB,QAAQ;gBAkBnC,iBAAiB;gBADjB,yBAAyB,uBAwCtB,MAAM,SAAC,qBAAqB,cAAG,QAAQ;;6BAzD5C;EAoDwC,cAAc;SAAzC,kBAAkB","sourcesContent":["import { Inject, Injectable, Injector, Optional } from '@angular/core';\n\nimport { BrowserXhr, Connection, ConnectionBackend,\n         Headers, ReadyState, Request, RequestMethod,\n         Response,\n         ResponseOptions as HttpResponseOptions,\n         ResponseOptionsArgs,\n         URLSearchParams,\n         XHRBackend, XSRFStrategy } from '@angular/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { STATUS } from './http-status-codes';\n\nimport {\n  InMemoryBackendConfig,\n  InMemoryBackendConfigArgs,\n  InMemoryDbService,\n  ResponseOptions\n} from './interfaces';\n\nimport { BackendService } from './backend.service';\n\n/**\n * For Angular `Http` simulate the behavior of a RESTy web api\n * backed by the simple in-memory data store provided by the injected `InMemoryDbService`.\n * Conforms mostly to behavior described here:\n * http://www.restapitutorial.com/lessons/httpmethods.html\n *\n * ### Usage\n *\n * Create an in-memory data store class that implements `InMemoryDbService`.\n * Call `forRoot` static method with this service class and optional configuration object:\n * ```\n * // other imports\n * import { HttpModule } from '@angular/http';\n * import { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\n *\n * import { InMemHeroService, inMemConfig } from '../api/in-memory-hero.service';\n * @NgModule({\n *  imports: [\n *    HttpModule,\n *    HttpClientInMemoryWebApiModule.forRoot(InMemHeroService, inMemConfig),\n *    ...\n *  ],\n *  ...\n * })\n * export class AppModule { ... }\n * ```\n */\n@Injectable()\nexport class HttpBackendService extends BackendService implements ConnectionBackend {\n\n  constructor(\n    private injector: Injector,\n    inMemDbService: InMemoryDbService,\n    @Inject(InMemoryBackendConfig) @Optional() config: InMemoryBackendConfigArgs\n    ) {\n    super(inMemDbService, config);\n  }\n\n  createConnection(req: Request): Connection {\n    let response: Observable<Response>;\n    try {\n      response = this.handleRequest(req);\n\n    } catch (error) {\n      const err = error.message || error;\n      const resOptions = this.createErrorResponseOptions(req.url, STATUS.INTERNAL_SERVER_ERROR, `${err}`);\n      response = this.createResponse$(() => resOptions);\n    }\n\n    return {\n      readyState: ReadyState.Done,\n      request: req,\n      response\n    };\n  }\n\n  ////  protected overrides /////\n\n  protected getJsonBody(req: Request): any {\n    try {\n      return req.json();\n    } catch (e) {\n      const msg = `'${req.url}' request body-to-json error\\n${JSON.stringify(e)}`;\n      throw new Error(msg);\n    }\n  }\n\n  protected getRequestMethod(req: Request): string {\n    return RequestMethod[req.method || 0].toLowerCase();\n  }\n\n  protected createHeaders(headers: { [index: string]: string; }): Headers {\n    return new Headers(headers);\n  }\n\n  protected createQueryMap(search: string): Map<string, string[]> {\n    return search ? new URLSearchParams(search).paramsMap : new Map<string, string[]>();\n  }\n\n  protected createResponse$fromResponseOptions$(resOptions$: Observable<ResponseOptions>): Observable<Response> {\n    return resOptions$.pipe(map((opts: ResponseOptionsArgs) => {\n      return new Response(new HttpResponseOptions(opts));\n    }));\n  }\n\n  protected createPassThruBackend() {\n    try {\n      // copied from @angular/http/backends/xhr_backend\n      const browserXhr = this.injector.get(BrowserXhr);\n      const baseResponseOptions = this.injector.get(HttpResponseOptions);\n      const xsrfStrategy = this.injector.get(XSRFStrategy);\n      const xhrBackend = new XHRBackend(browserXhr, baseResponseOptions, xsrfStrategy);\n\n      return {\n        handle: (req: Request) => xhrBackend.createConnection(req).response\n      };\n\n    } catch (e) {\n      e.message = 'Cannot create passThru404 backend; ' + (e.message || '');\n      throw e;\n    }\n  }\n}\n"]}