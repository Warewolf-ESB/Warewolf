{"version":3,"sources":["packages/core/core-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","core","testing","this","_global","window","runInTestZone","fn","context","finishCallback","failCallback","currentZone","Zone","current","AsyncTestZoneSpec","undefined","Error","ProxyZoneSpec","proxyZoneSpec","get","assertPresent","proxyZone","getZoneWith","previousDelegate","getDelegate","parent","run","testZoneSpec","setDelegate","error","runGuarded","ComponentFixture","componentRef","ngZone","_autoDetect","_this","_isStable","_isDestroyed","_resolve","_promise","_onUnstableSubscription","_onStableSubscription","_onMicrotaskEmptySubscription","_onErrorSubscription","changeDetectorRef","elementRef","location","debugElement","getDebugNode","nativeElement","componentInstance","instance","runOutsideAngular","onUnstable","subscribe","next","onMicrotaskEmpty","detectChanges","onStable","scheduleMicroTask","hasPendingMacrotasks","onError","prototype","_tick","checkNoChanges","autoDetectChanges","autoDetect","isStable","whenStable","Promise","resolve","res","_getRenderer","_renderer","injector","RendererFactory2","whenRenderingDone","renderer","destroy","unsubscribe","_Zone","FakeAsyncTestZoneSpec","_fakeAsyncTestZoneSpec","resetFakeAsyncZoneFallback","resetDelegate","_inFakeAsyncCall","_getFakeAsyncZoneSpec","flushMicrotasksFallback","flushMicrotasks","_Zone$1","fakeAsyncTestModule","__symbol__","resetFakeAsyncZone","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__values","o","m","Symbol","iterator","call","value","done","__read","n","e","ar","push","__spread","concat","AsyncTestCompleter","rej","_reject","fail","stackTrace","enumerable","configurable","unimplemented","TestingCompiler","_super","apply","__extends","__","constructor","create","overrideModule","overrides","overrideDirective","directive","overrideComponent","component","overridePipe","loadAotSummaries","summaries","getComponentFactory","getComponentFromError","Injectable","Compiler","TestingCompilerFactory","UNDEFINED","TestComponentRenderer","insertRootElement","rootElementId","_nextRootElementId","ComponentFixtureAutoDetect","InjectionToken","ComponentFixtureNoNgZone","TestBed","_instantiated","_compiler","_moduleRef","_moduleFactory","_compilerOptions","_moduleOverrides","_componentOverrides","_directiveOverrides","_pipeOverrides","_providers","_declarations","_imports","_schemas","_activeFixtures","_testEnvAotSummaries","_aotSummaries","_templateOverrides","_isRoot","_rootProviderOverrides","platform","ngModule","initTestEnvironment","aotSummaries","testBed","getTestBed","resetTestEnvironment","resetTestingModule","configureCompiler","config","configureTestingModule","moduleDef","compileComponents","override","pipe","overrideTemplate","template","set","templateUrl","overrideTemplateUsingTestingModule","overrideProvider","token","provider","deprecatedOverrideProvider","notFoundValue","Injector","THROW_IF_NOT_FOUND","createComponent","ɵclearOverrides","forEach","fixture","console","stacktrace","_assertNotInstantiated","_a","_b","_c","_d","providers","declarations","imports","schemas","moduleType","_createCompilerAndModule","compileModuleAndAllComponentsAsync","then","moduleAndComponentFactories","ngModuleFactory","_initIfNeeded","e_1","compileModuleAndAllComponentsSync","errorCompType","ɵstringify","compFactory","templateOf","ɵoverrideComponentView","e_1_1","return","NgZone","enableLongStackTrace","ngZoneInjector","provide","useValue","name","ApplicationInitStatus","runInitializers","e_2","map","entry","rootScopeImports","rootProviderOverrides","RootScopeModule","NgModule","jit","ɵAPP_ROOT","DynamicTestModule","compilerFactory","createTestingCompiler","e_2_1","methodName","methodDescription","result","execute","tokens","params","t","overrideProviderImpl","deprecated","ngInjectableDef","providedIn","useFactory","deps","flags","dep","depToken","depFlags","isArray","Optional","SkipSelf","ɵoverrideProvider","deprecatedBehavior","OverrideComponent","Component","selector","componentFactory","noNgZone","testComponentRenderer","rootElId","initComponent","NULL","_testBed","inject","indexOf","completer","promise","InjectSetupWrapper","_moduleDef","_addModule","self","_global$1","beforeEach","async","reject","asyncTest","asyncFallback","jasmine","err","fakeAsync","fakeAsyncFallback","args","_i","lastProxyZoneSpec","pendingPeriodicTimers","pendingTimers","tick","millis","tickFallback","flush","maxTurns","flushFallback","discardPeriodicTasks","discardPeriodicTasksFallback","withModule","__core_private_testing_placeholder__","ɵTestingCompiler","ɵTestingCompilerFactory"],"mappings":"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","sourcesContent":["/**\n * @license Angular v6.1.9\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :\n    typeof define === 'function' && define.amd ? define('@angular/core/testing', ['exports', '@angular/core'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}, global.ng.core.testing = {}),global.ng.core));\n}(this, (function (exports,core) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _global = (typeof window === 'undefined' ? global : window);\n    /**\n     * Wraps a test function in an asynchronous test zone. The test will automatically\n     * complete when all asynchronous calls within this zone are done. Can be used\n     * to wrap an {@link inject} call.\n     *\n     * Example:\n     *\n     * ```\n     * it('...', async(inject([AClass], (object) => {\n     *   object.doSomething.then(() => {\n     *     expect(...);\n     *   })\n     * });\n     * ```\n     *\n     *\n     */\n    function asyncFallback(fn) {\n        // If we're running using the Jasmine test framework, adapt to call the 'done'\n        // function when asynchronous activity is finished.\n        if (_global.jasmine) {\n            // Not using an arrow function to preserve context passed from call site\n            return function (done) {\n                if (!done) {\n                    // if we run beforeEach in @angular/core/testing/testing_internal then we get no done\n                    // fake it here and assume sync.\n                    done = function () { };\n                    done.fail = function (e) { throw e; };\n                }\n                runInTestZone(fn, this, done, function (err) {\n                    if (typeof err === 'string') {\n                        return done.fail(new Error(err));\n                    }\n                    else {\n                        done.fail(err);\n                    }\n                });\n            };\n        }\n        // Otherwise, return a promise which will resolve when asynchronous activity\n        // is finished. This will be correctly consumed by the Mocha framework with\n        // it('...', async(myFn)); or can be used in a custom framework.\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var _this = this;\n            return new Promise(function (finishCallback, failCallback) {\n                runInTestZone(fn, _this, finishCallback, failCallback);\n            });\n        };\n    }\n    function runInTestZone(fn, context, finishCallback, failCallback) {\n        var currentZone = Zone.current;\n        var AsyncTestZoneSpec = Zone['AsyncTestZoneSpec'];\n        if (AsyncTestZoneSpec === undefined) {\n            throw new Error('AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js/dist/async-test.js');\n        }\n        var ProxyZoneSpec = Zone['ProxyZoneSpec'];\n        if (ProxyZoneSpec === undefined) {\n            throw new Error('ProxyZoneSpec is needed for the async() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js/dist/proxy.js');\n        }\n        var proxyZoneSpec = ProxyZoneSpec.get();\n        ProxyZoneSpec.assertPresent();\n        // We need to create the AsyncTestZoneSpec outside the ProxyZone.\n        // If we do it in ProxyZone then we will get to infinite recursion.\n        var proxyZone = Zone.current.getZoneWith('ProxyZoneSpec');\n        var previousDelegate = proxyZoneSpec.getDelegate();\n        proxyZone.parent.run(function () {\n            var testZoneSpec = new AsyncTestZoneSpec(function () {\n                // Need to restore the original zone.\n                currentZone.run(function () {\n                    if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                        // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                        proxyZoneSpec.setDelegate(previousDelegate);\n                    }\n                    finishCallback();\n                });\n            }, function (error) {\n                // Need to restore the original zone.\n                currentZone.run(function () {\n                    if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                        // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                        proxyZoneSpec.setDelegate(previousDelegate);\n                    }\n                    failCallback(error);\n                });\n            }, 'test');\n            proxyZoneSpec.setDelegate(testZoneSpec);\n        });\n        return Zone.current.runGuarded(fn, context);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Wraps a test function in an asynchronous test zone. The test will automatically\n     * complete when all asynchronous calls within this zone are done. Can be used\n     * to wrap an {@link inject} call.\n     *\n     * Example:\n     *\n     * ```\n     * it('...', async(inject([AClass], (object) => {\n     *   object.doSomething.then(() => {\n     *     expect(...);\n     *   })\n     * });\n     * ```\n     *\n     *\n     */\n    function async(fn) {\n        var _Zone = typeof Zone !== 'undefined' ? Zone : null;\n        if (!_Zone) {\n            return function () {\n                return Promise.reject('Zone is needed for the async() test helper but could not be found. ' +\n                    'Please make sure that your environment includes zone.js/dist/zone.js');\n            };\n        }\n        var asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\n        if (typeof asyncTest === 'function') {\n            return asyncTest(fn);\n        }\n        // not using new version of zone.js\n        // TODO @JiaLiPassion, remove this after all library updated to\n        // newest version of zone.js(0.8.25)\n        return asyncFallback(fn);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Fixture for debugging and testing a component.\n     *\n     *\n     */\n    var ComponentFixture = /** @class */ (function () {\n        function ComponentFixture(componentRef, ngZone, _autoDetect) {\n            var _this = this;\n            this.componentRef = componentRef;\n            this.ngZone = ngZone;\n            this._autoDetect = _autoDetect;\n            this._isStable = true;\n            this._isDestroyed = false;\n            this._resolve = null;\n            this._promise = null;\n            this._onUnstableSubscription = null;\n            this._onStableSubscription = null;\n            this._onMicrotaskEmptySubscription = null;\n            this._onErrorSubscription = null;\n            this.changeDetectorRef = componentRef.changeDetectorRef;\n            this.elementRef = componentRef.location;\n            this.debugElement = core.getDebugNode(this.elementRef.nativeElement);\n            this.componentInstance = componentRef.instance;\n            this.nativeElement = this.elementRef.nativeElement;\n            this.componentRef = componentRef;\n            this.ngZone = ngZone;\n            if (ngZone) {\n                // Create subscriptions outside the NgZone so that the callbacks run oustide\n                // of NgZone.\n                ngZone.runOutsideAngular(function () {\n                    _this._onUnstableSubscription =\n                        ngZone.onUnstable.subscribe({ next: function () { _this._isStable = false; } });\n                    _this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n                        next: function () {\n                            if (_this._autoDetect) {\n                                // Do a change detection run with checkNoChanges set to true to check\n                                // there are no changes on the second run.\n                                _this.detectChanges(true);\n                            }\n                        }\n                    });\n                    _this._onStableSubscription = ngZone.onStable.subscribe({\n                        next: function () {\n                            _this._isStable = true;\n                            // Check whether there is a pending whenStable() completer to resolve.\n                            if (_this._promise !== null) {\n                                // If so check whether there are no pending macrotasks before resolving.\n                                // Do this check in the next tick so that ngZone gets a chance to update the state of\n                                // pending macrotasks.\n                                scheduleMicroTask(function () {\n                                    if (!ngZone.hasPendingMacrotasks) {\n                                        if (_this._promise !== null) {\n                                            _this._resolve(true);\n                                            _this._resolve = null;\n                                            _this._promise = null;\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                    });\n                    _this._onErrorSubscription =\n                        ngZone.onError.subscribe({ next: function (error) { throw error; } });\n                });\n            }\n        }\n        ComponentFixture.prototype._tick = function (checkNoChanges) {\n            this.changeDetectorRef.detectChanges();\n            if (checkNoChanges) {\n                this.checkNoChanges();\n            }\n        };\n        /**\n         * Trigger a change detection cycle for the component.\n         */\n        ComponentFixture.prototype.detectChanges = function (checkNoChanges) {\n            var _this = this;\n            if (checkNoChanges === void 0) { checkNoChanges = true; }\n            if (this.ngZone != null) {\n                // Run the change detection inside the NgZone so that any async tasks as part of the change\n                // detection are captured by the zone and can be waited for in isStable.\n                this.ngZone.run(function () { _this._tick(checkNoChanges); });\n            }\n            else {\n                // Running without zone. Just do the change detection.\n                this._tick(checkNoChanges);\n            }\n        };\n        /**\n         * Do a change detection run to make sure there were no changes.\n         */\n        ComponentFixture.prototype.checkNoChanges = function () { this.changeDetectorRef.checkNoChanges(); };\n        /**\n         * Set whether the fixture should autodetect changes.\n         *\n         * Also runs detectChanges once so that any existing change is detected.\n         */\n        ComponentFixture.prototype.autoDetectChanges = function (autoDetect) {\n            if (autoDetect === void 0) { autoDetect = true; }\n            if (this.ngZone == null) {\n                throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n            }\n            this._autoDetect = autoDetect;\n            this.detectChanges();\n        };\n        /**\n         * Return whether the fixture is currently stable or has async tasks that have not been completed\n         * yet.\n         */\n        ComponentFixture.prototype.isStable = function () { return this._isStable && !this.ngZone.hasPendingMacrotasks; };\n        /**\n         * Get a promise that resolves when the fixture is stable.\n         *\n         * This can be used to resume testing after events have triggered asynchronous activity or\n         * asynchronous change detection.\n         */\n        ComponentFixture.prototype.whenStable = function () {\n            var _this = this;\n            if (this.isStable()) {\n                return Promise.resolve(false);\n            }\n            else if (this._promise !== null) {\n                return this._promise;\n            }\n            else {\n                this._promise = new Promise(function (res) { _this._resolve = res; });\n                return this._promise;\n            }\n        };\n        ComponentFixture.prototype._getRenderer = function () {\n            if (this._renderer === undefined) {\n                this._renderer = this.componentRef.injector.get(core.RendererFactory2, null);\n            }\n            return this._renderer;\n        };\n        /**\n          * Get a promise that resolves when the ui state is stable following animations.\n          */\n        ComponentFixture.prototype.whenRenderingDone = function () {\n            var renderer = this._getRenderer();\n            if (renderer && renderer.whenRenderingDone) {\n                return renderer.whenRenderingDone();\n            }\n            return this.whenStable();\n        };\n        /**\n         * Trigger component destruction.\n         */\n        ComponentFixture.prototype.destroy = function () {\n            if (!this._isDestroyed) {\n                this.componentRef.destroy();\n                if (this._onUnstableSubscription != null) {\n                    this._onUnstableSubscription.unsubscribe();\n                    this._onUnstableSubscription = null;\n                }\n                if (this._onStableSubscription != null) {\n                    this._onStableSubscription.unsubscribe();\n                    this._onStableSubscription = null;\n                }\n                if (this._onMicrotaskEmptySubscription != null) {\n                    this._onMicrotaskEmptySubscription.unsubscribe();\n                    this._onMicrotaskEmptySubscription = null;\n                }\n                if (this._onErrorSubscription != null) {\n                    this._onErrorSubscription.unsubscribe();\n                    this._onErrorSubscription = null;\n                }\n                this._isDestroyed = true;\n            }\n        };\n        return ComponentFixture;\n    }());\n    function scheduleMicroTask(fn) {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * fakeAsync has been moved to zone.js\n     * this file is for fallback in case old version of zone.js is used\n     */\n    var _Zone = typeof Zone !== 'undefined' ? Zone : null;\n    var FakeAsyncTestZoneSpec = _Zone && _Zone['FakeAsyncTestZoneSpec'];\n    var ProxyZoneSpec = _Zone && _Zone['ProxyZoneSpec'];\n    var _fakeAsyncTestZoneSpec = null;\n    /**\n     * Clears out the shared fake async zone for a test.\n     * To be called in a global `beforeEach`.\n     *\n     * @experimental\n     */\n    function resetFakeAsyncZoneFallback() {\n        _fakeAsyncTestZoneSpec = null;\n        // in node.js testing we may not have ProxyZoneSpec in which case there is nothing to reset.\n        ProxyZoneSpec && ProxyZoneSpec.assertPresent().resetDelegate();\n    }\n    var _inFakeAsyncCall = false;\n    /**\n     * Wraps a function to be executed in the fakeAsync zone:\n     * - microtasks are manually executed by calling `flushMicrotasks()`,\n     * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n     *\n     * If there are any pending timers at the end of the function, an exception will be thrown.\n     *\n     * Can be used to wrap inject() calls.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @param fn\n     * @returns The function wrapped to be executed in the fakeAsync zone\n     *\n     * @experimental\n     */\n    function fakeAsyncFallback(fn) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var proxyZoneSpec = ProxyZoneSpec.assertPresent();\n            if (_inFakeAsyncCall) {\n                throw new Error('fakeAsync() calls can not be nested');\n            }\n            _inFakeAsyncCall = true;\n            try {\n                if (!_fakeAsyncTestZoneSpec) {\n                    if (proxyZoneSpec.getDelegate() instanceof FakeAsyncTestZoneSpec) {\n                        throw new Error('fakeAsync() calls can not be nested');\n                    }\n                    _fakeAsyncTestZoneSpec = new FakeAsyncTestZoneSpec();\n                }\n                var res = void 0;\n                var lastProxyZoneSpec = proxyZoneSpec.getDelegate();\n                proxyZoneSpec.setDelegate(_fakeAsyncTestZoneSpec);\n                try {\n                    res = fn.apply(this, args);\n                    flushMicrotasksFallback();\n                }\n                finally {\n                    proxyZoneSpec.setDelegate(lastProxyZoneSpec);\n                }\n                if (_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n                    throw new Error(_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length + \" \" +\n                        \"periodic timer(s) still in the queue.\");\n                }\n                if (_fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n                    throw new Error(_fakeAsyncTestZoneSpec.pendingTimers.length + \" timer(s) still in the queue.\");\n                }\n                return res;\n            }\n            finally {\n                _inFakeAsyncCall = false;\n                resetFakeAsyncZoneFallback();\n            }\n        };\n    }\n    function _getFakeAsyncZoneSpec() {\n        if (_fakeAsyncTestZoneSpec == null) {\n            throw new Error('The code should be running in the fakeAsync zone to call this function');\n        }\n        return _fakeAsyncTestZoneSpec;\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n     *\n     * The microtasks queue is drained at the very start of this function and after any timer callback\n     * has been executed.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @experimental\n     */\n    function tickFallback(millis) {\n        if (millis === void 0) { millis = 0; }\n        _getFakeAsyncZoneSpec().tick(millis);\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n     * draining the macrotask queue until it is empty. The returned value is the milliseconds\n     * of time that would have been elapsed.\n     *\n     * @param maxTurns\n     * @returns The simulated time elapsed, in millis.\n     *\n     * @experimental\n     */\n    function flushFallback(maxTurns) {\n        return _getFakeAsyncZoneSpec().flush(maxTurns);\n    }\n    /**\n     * Discard all remaining periodic tasks.\n     *\n     * @experimental\n     */\n    function discardPeriodicTasksFallback() {\n        var zoneSpec = _getFakeAsyncZoneSpec();\n        zoneSpec.pendingPeriodicTimers.length = 0;\n    }\n    /**\n     * Flush any pending microtasks.\n     *\n     * @experimental\n     */\n    function flushMicrotasksFallback() {\n        _getFakeAsyncZoneSpec().flushMicrotasks();\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _Zone$1 = typeof Zone !== 'undefined' ? Zone : null;\n    var fakeAsyncTestModule = _Zone$1 && _Zone$1[_Zone$1.__symbol__('fakeAsyncTest')];\n    /**\n     * Clears out the shared fake async zone for a test.\n     * To be called in a global `beforeEach`.\n     *\n     * @experimental\n     */\n    function resetFakeAsyncZone() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.resetFakeAsyncZone();\n        }\n        else {\n            return resetFakeAsyncZoneFallback();\n        }\n    }\n    /**\n     * Wraps a function to be executed in the fakeAsync zone:\n     * - microtasks are manually executed by calling `flushMicrotasks()`,\n     * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n     *\n     * If there are any pending timers at the end of the function, an exception will be thrown.\n     *\n     * Can be used to wrap inject() calls.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @param fn\n     * @returns The function wrapped to be executed in the fakeAsync zone\n     *\n     * @experimental\n     */\n    function fakeAsync(fn) {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.fakeAsync(fn);\n        }\n        else {\n            return fakeAsyncFallback(fn);\n        }\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n     *\n     * The microtasks queue is drained at the very start of this function and after any timer callback\n     * has been executed.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @experimental\n     */\n    function tick(millis) {\n        if (millis === void 0) { millis = 0; }\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.tick(millis);\n        }\n        else {\n            return tickFallback(millis);\n        }\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n     * draining the macrotask queue until it is empty. The returned value is the milliseconds\n     * of time that would have been elapsed.\n     *\n     * @param maxTurns\n     * @returns The simulated time elapsed, in millis.\n     *\n     * @experimental\n     */\n    function flush(maxTurns) {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.flush(maxTurns);\n        }\n        else {\n            return flushFallback(maxTurns);\n        }\n    }\n    /**\n     * Discard all remaining periodic tasks.\n     *\n     * @experimental\n     */\n    function discardPeriodicTasks() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.discardPeriodicTasks();\n        }\n        else {\n            discardPeriodicTasksFallback();\n        }\n    }\n    /**\n     * Flush any pending microtasks.\n     *\n     * @experimental\n     */\n    function flushMicrotasks() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.flushMicrotasks();\n        }\n        else {\n            return flushMicrotasksFallback();\n        }\n    }\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injectable completer that allows signaling completion of an asynchronous test. Used internally.\n     */\n    var AsyncTestCompleter = /** @class */ (function () {\n        function AsyncTestCompleter() {\n            var _this = this;\n            this._promise = new Promise(function (res, rej) {\n                _this._resolve = res;\n                _this._reject = rej;\n            });\n        }\n        AsyncTestCompleter.prototype.done = function (value) { this._resolve(value); };\n        AsyncTestCompleter.prototype.fail = function (error, stackTrace) { this._reject(error); };\n        Object.defineProperty(AsyncTestCompleter.prototype, \"promise\", {\n            get: function () { return this._promise; },\n            enumerable: true,\n            configurable: true\n        });\n        return AsyncTestCompleter;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function unimplemented() {\n        throw Error('unimplemented');\n    }\n    /**\n     * Special interface to the compiler only used by testing\n     *\n     * @experimental\n     */\n    var TestingCompiler = /** @class */ (function (_super) {\n        __extends(TestingCompiler, _super);\n        function TestingCompiler() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(TestingCompiler.prototype, \"injector\", {\n            get: function () { throw unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        TestingCompiler.prototype.overrideModule = function (module, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overrideDirective = function (directive, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overrideComponent = function (component, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overridePipe = function (directive, overrides) {\n            throw unimplemented();\n        };\n        /**\n         * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n         * so that it can use the code generated by AOT.\n         */\n        TestingCompiler.prototype.loadAotSummaries = function (summaries) { throw unimplemented(); };\n        /**\n         * Gets the component factory for the given component.\n         * This assumes that the component has been compiled before calling this call using\n         * `compileModuleAndAllComponents*`.\n         */\n        TestingCompiler.prototype.getComponentFactory = function (component) { throw unimplemented(); };\n        /**\n         * Returns the component type that is stored in the given error.\n         * This can be used for errors created by compileModule...\n         */\n        TestingCompiler.prototype.getComponentFromError = function (error) { throw unimplemented(); };\n        TestingCompiler = __decorate([\n            core.Injectable()\n        ], TestingCompiler);\n        return TestingCompiler;\n    }(core.Compiler));\n    /**\n     * A factory for creating a Compiler\n     *\n     * @experimental\n     */\n    var TestingCompilerFactory = /** @class */ (function () {\n        function TestingCompilerFactory() {\n        }\n        return TestingCompilerFactory;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var UNDEFINED = new Object();\n    /**\n     * An abstract class for inserting the root test component element in a platform independent way.\n     *\n     * @experimental\n     */\n    var TestComponentRenderer = /** @class */ (function () {\n        function TestComponentRenderer() {\n        }\n        TestComponentRenderer.prototype.insertRootElement = function (rootElementId) { };\n        return TestComponentRenderer;\n    }());\n    var _nextRootElementId = 0;\n    /**\n     * @experimental\n     */\n    var ComponentFixtureAutoDetect = new core.InjectionToken('ComponentFixtureAutoDetect');\n    /**\n     * @experimental\n     */\n    var ComponentFixtureNoNgZone = new core.InjectionToken('ComponentFixtureNoNgZone');\n    /**\n     * @description\n     * Configures and initializes environment for unit testing and provides methods for\n     * creating components and services in unit tests.\n     *\n     * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n     *\n     *\n     */\n    var TestBed = /** @class */ (function () {\n        function TestBed() {\n            this._instantiated = false;\n            this._compiler = null;\n            this._moduleRef = null;\n            this._moduleFactory = null;\n            this._compilerOptions = [];\n            this._moduleOverrides = [];\n            this._componentOverrides = [];\n            this._directiveOverrides = [];\n            this._pipeOverrides = [];\n            this._providers = [];\n            this._declarations = [];\n            this._imports = [];\n            this._schemas = [];\n            this._activeFixtures = [];\n            this._testEnvAotSummaries = function () { return []; };\n            this._aotSummaries = [];\n            this._templateOverrides = [];\n            this._isRoot = true;\n            this._rootProviderOverrides = [];\n            this.platform = null;\n            this.ngModule = null;\n        }\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         *\n         * @experimental\n         */\n        TestBed.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            var testBed = getTestBed();\n            testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n            return testBed;\n        };\n        /**\n         * Reset the providers for the test injector.\n         *\n         * @experimental\n         */\n        TestBed.resetTestEnvironment = function () { getTestBed().resetTestEnvironment(); };\n        TestBed.resetTestingModule = function () {\n            getTestBed().resetTestingModule();\n            return TestBed;\n        };\n        /**\n         * Allows overriding default compiler providers and settings\n         * which are defined in test_injector.js\n         */\n        TestBed.configureCompiler = function (config) {\n            getTestBed().configureCompiler(config);\n            return TestBed;\n        };\n        /**\n         * Allows overriding default providers, directives, pipes, modules of the test injector,\n         * which are defined in test_injector.js\n         */\n        TestBed.configureTestingModule = function (moduleDef) {\n            getTestBed().configureTestingModule(moduleDef);\n            return TestBed;\n        };\n        /**\n         * Compile components with a `templateUrl` for the test's NgModule.\n         * It is necessary to call this function\n         * as fetching urls is asynchronous.\n         */\n        TestBed.compileComponents = function () { return getTestBed().compileComponents(); };\n        TestBed.overrideModule = function (ngModule, override) {\n            getTestBed().overrideModule(ngModule, override);\n            return TestBed;\n        };\n        TestBed.overrideComponent = function (component, override) {\n            getTestBed().overrideComponent(component, override);\n            return TestBed;\n        };\n        TestBed.overrideDirective = function (directive, override) {\n            getTestBed().overrideDirective(directive, override);\n            return TestBed;\n        };\n        TestBed.overridePipe = function (pipe, override) {\n            getTestBed().overridePipe(pipe, override);\n            return TestBed;\n        };\n        TestBed.overrideTemplate = function (component, template) {\n            getTestBed().overrideComponent(component, { set: { template: template, templateUrl: null } });\n            return TestBed;\n        };\n        /**\n         * Overrides the template of the given component, compiling the template\n         * in the context of the TestingModule.\n         *\n         * Note: This works for JIT and AOTed components as well.\n         */\n        TestBed.overrideTemplateUsingTestingModule = function (component, template) {\n            getTestBed().overrideTemplateUsingTestingModule(component, template);\n            return TestBed;\n        };\n        TestBed.overrideProvider = function (token, provider) {\n            getTestBed().overrideProvider(token, provider);\n            return TestBed;\n        };\n        TestBed.deprecatedOverrideProvider = function (token, provider) {\n            getTestBed().deprecatedOverrideProvider(token, provider);\n            return TestBed;\n        };\n        TestBed.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            return getTestBed().get(token, notFoundValue);\n        };\n        TestBed.createComponent = function (component) {\n            return getTestBed().createComponent(component);\n        };\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         *\n         * @experimental\n         */\n        TestBed.prototype.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            if (this.platform || this.ngModule) {\n                throw new Error('Cannot set base providers because it has already been called');\n            }\n            this.platform = platform;\n            this.ngModule = ngModule;\n            if (aotSummaries) {\n                this._testEnvAotSummaries = aotSummaries;\n            }\n        };\n        /**\n         * Reset the providers for the test injector.\n         *\n         * @experimental\n         */\n        TestBed.prototype.resetTestEnvironment = function () {\n            this.resetTestingModule();\n            this.platform = null;\n            this.ngModule = null;\n            this._testEnvAotSummaries = function () { return []; };\n        };\n        TestBed.prototype.resetTestingModule = function () {\n            core.ɵclearOverrides();\n            this._aotSummaries = [];\n            this._templateOverrides = [];\n            this._compiler = null;\n            this._moduleOverrides = [];\n            this._componentOverrides = [];\n            this._directiveOverrides = [];\n            this._pipeOverrides = [];\n            this._isRoot = true;\n            this._rootProviderOverrides = [];\n            this._moduleRef = null;\n            this._moduleFactory = null;\n            this._compilerOptions = [];\n            this._providers = [];\n            this._declarations = [];\n            this._imports = [];\n            this._schemas = [];\n            this._instantiated = false;\n            this._activeFixtures.forEach(function (fixture) {\n                try {\n                    fixture.destroy();\n                }\n                catch (e) {\n                    console.error('Error during cleanup of component', {\n                        component: fixture.componentInstance,\n                        stacktrace: e,\n                    });\n                }\n            });\n            this._activeFixtures = [];\n        };\n        TestBed.prototype.configureCompiler = function (config) {\n            this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n            this._compilerOptions.push(config);\n        };\n        TestBed.prototype.configureTestingModule = function (moduleDef) {\n            var _a, _b, _c, _d;\n            this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n            if (moduleDef.providers) {\n                (_a = this._providers).push.apply(_a, __spread(moduleDef.providers));\n            }\n            if (moduleDef.declarations) {\n                (_b = this._declarations).push.apply(_b, __spread(moduleDef.declarations));\n            }\n            if (moduleDef.imports) {\n                (_c = this._imports).push.apply(_c, __spread(moduleDef.imports));\n            }\n            if (moduleDef.schemas) {\n                (_d = this._schemas).push.apply(_d, __spread(moduleDef.schemas));\n            }\n            if (moduleDef.aotSummaries) {\n                this._aotSummaries.push(moduleDef.aotSummaries);\n            }\n        };\n        TestBed.prototype.compileComponents = function () {\n            var _this = this;\n            if (this._moduleFactory || this._instantiated) {\n                return Promise.resolve(null);\n            }\n            var moduleType = this._createCompilerAndModule();\n            return this._compiler.compileModuleAndAllComponentsAsync(moduleType)\n                .then(function (moduleAndComponentFactories) {\n                _this._moduleFactory = moduleAndComponentFactories.ngModuleFactory;\n            });\n        };\n        TestBed.prototype._initIfNeeded = function () {\n            var e_1, _a;\n            if (this._instantiated) {\n                return;\n            }\n            if (!this._moduleFactory) {\n                try {\n                    var moduleType = this._createCompilerAndModule();\n                    this._moduleFactory =\n                        this._compiler.compileModuleAndAllComponentsSync(moduleType).ngModuleFactory;\n                }\n                catch (e) {\n                    var errorCompType = this._compiler.getComponentFromError(e);\n                    if (errorCompType) {\n                        throw new Error(\"This test module uses the component \" + core.ɵstringify(errorCompType) + \" which is using a \\\"templateUrl\\\" or \\\"styleUrls\\\", but they were never compiled. \" +\n                            \"Please call \\\"TestBed.compileComponents\\\" before your test.\");\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n            try {\n                for (var _b = __values(this._templateOverrides), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var _d = _c.value, component = _d.component, templateOf = _d.templateOf;\n                    var compFactory = this._compiler.getComponentFactory(templateOf);\n                    core.ɵoverrideComponentView(component, compFactory);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            var ngZone = new core.NgZone({ enableLongStackTrace: true });\n            var providers = [{ provide: core.NgZone, useValue: ngZone }];\n            var ngZoneInjector = core.Injector.create({\n                providers: providers,\n                parent: this.platform.injector,\n                name: this._moduleFactory.moduleType.name\n            });\n            this._moduleRef = this._moduleFactory.create(ngZoneInjector);\n            // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n            // before accessing it.\n            this._moduleRef.injector.get(core.ApplicationInitStatus).runInitializers();\n            this._instantiated = true;\n        };\n        TestBed.prototype._createCompilerAndModule = function () {\n            var _this = this;\n            var e_2, _a;\n            var providers = this._providers.concat([{ provide: TestBed, useValue: this }]);\n            var declarations = __spread(this._declarations, this._templateOverrides.map(function (entry) { return entry.templateOf; }));\n            var rootScopeImports = [];\n            var rootProviderOverrides = this._rootProviderOverrides;\n            if (this._isRoot) {\n                var RootScopeModule = /** @class */ (function () {\n                    function RootScopeModule() {\n                    }\n                    RootScopeModule = __decorate([\n                        core.NgModule({\n                            providers: __spread(rootProviderOverrides),\n                            jit: true,\n                        })\n                    ], RootScopeModule);\n                    return RootScopeModule;\n                }());\n                rootScopeImports.push(RootScopeModule);\n            }\n            providers.push({ provide: core.ɵAPP_ROOT, useValue: this._isRoot });\n            var imports = [rootScopeImports, this.ngModule, this._imports];\n            var schemas = this._schemas;\n            var DynamicTestModule = /** @class */ (function () {\n                function DynamicTestModule() {\n                }\n                DynamicTestModule = __decorate([\n                    core.NgModule({ providers: providers, declarations: declarations, imports: imports, schemas: schemas, jit: true })\n                ], DynamicTestModule);\n                return DynamicTestModule;\n            }());\n            var compilerFactory = this.platform.injector.get(TestingCompilerFactory);\n            this._compiler = compilerFactory.createTestingCompiler(this._compilerOptions);\n            try {\n                for (var _b = __values(__spread([this._testEnvAotSummaries], this._aotSummaries)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var summary = _c.value;\n                    this._compiler.loadAotSummaries(summary);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            this._moduleOverrides.forEach(function (entry) { return _this._compiler.overrideModule(entry[0], entry[1]); });\n            this._componentOverrides.forEach(function (entry) { return _this._compiler.overrideComponent(entry[0], entry[1]); });\n            this._directiveOverrides.forEach(function (entry) { return _this._compiler.overrideDirective(entry[0], entry[1]); });\n            this._pipeOverrides.forEach(function (entry) { return _this._compiler.overridePipe(entry[0], entry[1]); });\n            return DynamicTestModule;\n        };\n        TestBed.prototype._assertNotInstantiated = function (methodName, methodDescription) {\n            if (this._instantiated) {\n                throw new Error(\"Cannot \" + methodDescription + \" when the test module has already been instantiated. \" +\n                    (\"Make sure you are not using `inject` before `\" + methodName + \"`.\"));\n            }\n        };\n        TestBed.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            this._initIfNeeded();\n            if (token === TestBed) {\n                return this;\n            }\n            // Tests can inject things from the ng module and from the compiler,\n            // but the ng module can't inject things from the compiler and vice versa.\n            var result = this._moduleRef.injector.get(token, UNDEFINED);\n            return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue) : result;\n        };\n        TestBed.prototype.execute = function (tokens, fn, context) {\n            var _this = this;\n            this._initIfNeeded();\n            var params = tokens.map(function (t) { return _this.get(t); });\n            return fn.apply(context, params);\n        };\n        TestBed.prototype.overrideModule = function (ngModule, override) {\n            this._assertNotInstantiated('overrideModule', 'override module metadata');\n            this._moduleOverrides.push([ngModule, override]);\n        };\n        TestBed.prototype.overrideComponent = function (component, override) {\n            this._assertNotInstantiated('overrideComponent', 'override component metadata');\n            this._componentOverrides.push([component, override]);\n        };\n        TestBed.prototype.overrideDirective = function (directive, override) {\n            this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n            this._directiveOverrides.push([directive, override]);\n        };\n        TestBed.prototype.overridePipe = function (pipe, override) {\n            this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n            this._pipeOverrides.push([pipe, override]);\n        };\n        TestBed.prototype.overrideProvider = function (token, provider) {\n            this.overrideProviderImpl(token, provider);\n        };\n        TestBed.prototype.deprecatedOverrideProvider = function (token, provider) {\n            this.overrideProviderImpl(token, provider, /* deprecated */ true);\n        };\n        TestBed.prototype.overrideProviderImpl = function (token, provider, deprecated) {\n            if (deprecated === void 0) { deprecated = false; }\n            if (typeof token !== 'string' && token.ngInjectableDef &&\n                token.ngInjectableDef.providedIn === 'root') {\n                if (provider.useFactory) {\n                    this._rootProviderOverrides.push({ provide: token, useFactory: provider.useFactory, deps: provider.deps || [] });\n                }\n                else {\n                    this._rootProviderOverrides.push({ provide: token, useValue: provider.useValue });\n                }\n            }\n            var flags = 0;\n            var value;\n            if (provider.useFactory) {\n                flags |= 1024 /* TypeFactoryProvider */;\n                value = provider.useFactory;\n            }\n            else {\n                flags |= 256 /* TypeValueProvider */;\n                value = provider.useValue;\n            }\n            var deps = (provider.deps || []).map(function (dep) {\n                var depFlags = 0 /* None */;\n                var depToken;\n                if (Array.isArray(dep)) {\n                    dep.forEach(function (entry) {\n                        if (entry instanceof core.Optional) {\n                            depFlags |= 2 /* Optional */;\n                        }\n                        else if (entry instanceof core.SkipSelf) {\n                            depFlags |= 1 /* SkipSelf */;\n                        }\n                        else {\n                            depToken = entry;\n                        }\n                    });\n                }\n                else {\n                    depToken = dep;\n                }\n                return [depFlags, depToken];\n            });\n            core.ɵoverrideProvider({ token: token, flags: flags, deps: deps, value: value, deprecatedBehavior: deprecated });\n        };\n        TestBed.prototype.overrideTemplateUsingTestingModule = function (component, template) {\n            this._assertNotInstantiated('overrideTemplateUsingTestingModule', 'override template');\n            var OverrideComponent = /** @class */ (function () {\n                function OverrideComponent() {\n                }\n                OverrideComponent = __decorate([\n                    core.Component({ selector: 'empty', template: template, jit: true })\n                ], OverrideComponent);\n                return OverrideComponent;\n            }());\n            this._templateOverrides.push({ component: component, templateOf: OverrideComponent });\n        };\n        TestBed.prototype.createComponent = function (component) {\n            var _this = this;\n            this._initIfNeeded();\n            var componentFactory = this._compiler.getComponentFactory(component);\n            if (!componentFactory) {\n                throw new Error(\"Cannot create the component \" + core.ɵstringify(component) + \" as it was not imported into the testing module!\");\n            }\n            var noNgZone = this.get(ComponentFixtureNoNgZone, false);\n            var autoDetect = this.get(ComponentFixtureAutoDetect, false);\n            var ngZone = noNgZone ? null : this.get(core.NgZone, null);\n            var testComponentRenderer = this.get(TestComponentRenderer);\n            var rootElId = \"root\" + _nextRootElementId++;\n            testComponentRenderer.insertRootElement(rootElId);\n            var initComponent = function () {\n                var componentRef = componentFactory.create(core.Injector.NULL, [], \"#\" + rootElId, _this._moduleRef);\n                return new ComponentFixture(componentRef, ngZone, autoDetect);\n            };\n            var fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n            this._activeFixtures.push(fixture);\n            return fixture;\n        };\n        return TestBed;\n    }());\n    var _testBed = null;\n    /**\n     * @experimental\n     */\n    function getTestBed() {\n        return _testBed = _testBed || new TestBed();\n    }\n    /**\n     * Allows injecting dependencies in `beforeEach()` and `it()`.\n     *\n     * Example:\n     *\n     * ```\n     * beforeEach(inject([Dependency, AClass], (dep, object) => {\n     *   // some code that uses `dep` and `object`\n     *   // ...\n     * }));\n     *\n     * it('...', inject([AClass], (object) => {\n     *   object.doSomething();\n     *   expect(...);\n     * })\n     * ```\n     *\n     * Notes:\n     * - inject is currently a function because of some Traceur limitation the syntax should\n     * eventually\n     *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n     *\n     *\n     */\n    function inject(tokens, fn) {\n        var testBed = getTestBed();\n        if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                var _this = this;\n                // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n                // the injected tokens.\n                return testBed.compileComponents().then(function () {\n                    var completer = testBed.get(AsyncTestCompleter);\n                    testBed.execute(tokens, fn, _this);\n                    return completer.promise;\n                });\n            };\n        }\n        else {\n            // Not using an arrow function to preserve context passed from call site\n            return function () { return testBed.execute(tokens, fn, this); };\n        }\n    }\n    /**\n     * @experimental\n     */\n    var InjectSetupWrapper = /** @class */ (function () {\n        function InjectSetupWrapper(_moduleDef) {\n            this._moduleDef = _moduleDef;\n        }\n        InjectSetupWrapper.prototype._addModule = function () {\n            var moduleDef = this._moduleDef();\n            if (moduleDef) {\n                getTestBed().configureTestingModule(moduleDef);\n            }\n        };\n        InjectSetupWrapper.prototype.inject = function (tokens, fn) {\n            var self = this;\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                self._addModule();\n                return inject(tokens, fn).call(this);\n            };\n        };\n        return InjectSetupWrapper;\n    }());\n    function withModule(moduleDef, fn) {\n        if (fn) {\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                var testBed = getTestBed();\n                if (moduleDef) {\n                    testBed.configureTestingModule(moduleDef);\n                }\n                return fn.apply(this);\n            };\n        }\n        return new InjectSetupWrapper(function () { return moduleDef; });\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _global$1 = (typeof window === 'undefined' ? global : window);\n    // Reset the test providers and the fake async zone before each test.\n    if (_global$1.beforeEach) {\n        _global$1.beforeEach(function () {\n            TestBed.resetTestingModule();\n            resetFakeAsyncZone();\n        });\n    }\n    // TODO(juliemr): remove this, only used because we need to export something to have compilation\n    // work.\n    var __core_private_testing_placeholder__ = '';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // This file only reexports content of the `src` folder. Keep it that way.\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.async = async;\n    exports.ComponentFixture = ComponentFixture;\n    exports.resetFakeAsyncZone = resetFakeAsyncZone;\n    exports.fakeAsync = fakeAsync;\n    exports.tick = tick;\n    exports.flush = flush;\n    exports.discardPeriodicTasks = discardPeriodicTasks;\n    exports.flushMicrotasks = flushMicrotasks;\n    exports.TestComponentRenderer = TestComponentRenderer;\n    exports.ComponentFixtureAutoDetect = ComponentFixtureAutoDetect;\n    exports.ComponentFixtureNoNgZone = ComponentFixtureNoNgZone;\n    exports.TestBed = TestBed;\n    exports.getTestBed = getTestBed;\n    exports.inject = inject;\n    exports.InjectSetupWrapper = InjectSetupWrapper;\n    exports.withModule = withModule;\n    exports.__core_private_testing_placeholder__ = __core_private_testing_placeholder__;\n    exports.ɵTestingCompiler = TestingCompiler;\n    exports.ɵTestingCompilerFactory = TestingCompilerFactory;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=core-testing.umd.js.map\n"]}