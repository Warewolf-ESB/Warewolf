{"version":3,"file":"material-badge.umd.min.js","sources":["../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n"],"names":["nextId","MatBadge","_document","_ngZone","_elementRef","_ariaDescriber","_renderer","this","_hasContent","_color","_overlap","position","size","_id","Object","defineProperty","prototype","value","_setColor","val","coerceBooleanProperty","_content","trim","length","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","indexOf","isAfter","ngOnDestroy","description","_badgeElement","removeDescription","textContent","content","_createBadgeElement","rootNode","badgeElement","createElement","setAttribute","classList","add","nativeElement","appendChild","requestAnimationFrame","runOutsideAngular","oldDescription","describe","colorPalette","remove","type","Directive","args","selector","host","class","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","undefined","decorators","Optional","Inject","DOCUMENT","NgZone","ElementRef","AriaDescriber","Renderer2","color","Input","overlap","hidden","NgModule","imports","A11yModule","MatCommonModule","exports","declarations","MatBadgeModule"],"mappings":";;;;;;;2lBAwBA,IAAIA,GAAS,eAqFX,QAAFC,GAC4CC,EAC9BC,EACAC,EACAC,EAEAC,GAL8BC,KAA5CL,UAA4CA,EAC9BK,KAAdJ,QAAcA,EACAI,KAAdH,YAAcA,EACAG,KAAdF,eAAcA,EAEAE,KAAdD,UAAcA,EApEdC,KAAAC,aAAgB,EAShBD,KAAAE,OAAiC,UAQjCF,KAAAG,UAA8B,EAM9BH,KAAAI,SAA0D,cAwB1DJ,KAAAK,KAA8C,SAW9CL,KAAAM,IAAgBb,IAzGhB,MAmDAc,QAAAC,eAAMd,EAANe,UAAA,aAAA,WAA8B,MAAOT,MAAKE,YACxC,SAAUQ,GACRV,KAAKW,UAAUD,GACfV,KAAKE,OAASQ,mCAMlBH,OAAAC,eAAMd,EAANe,UAAA,eAAA,WAA2B,MAAOT,MAAKG,cACrC,SAAYS,GACVZ,KAAKG,SAAWU,EAAAA,sBAAsBD,oCAY1CL,OAAAC,eAAMd,EAANe,UAAA,eAAA,WAA0B,MAAOT,MAAKc,cACpC,SAAYJ,GACVV,KAAKc,SAAWJ,EAChBV,KAAKC,YAAuB,MAATS,IAAiB,GAAGA,GAAQK,OAAOC,OAAS,EAC/DhB,KAAKiB,sDAMTV,OAAAC,eAAMd,EAANe,UAAA,mBAAA,WAA8B,MAAOT,MAAKkB,kBACxC,SAAgBC,GACVA,IAAmBnB,KAAKkB,eAC1BlB,KAAKoB,2BAA2BD,EAAgBnB,KAAKkB,cACrDlB,KAAKkB,aAAeC,oCAU1BZ,OAAAC,eAAMd,EAANe,UAAA,cAAA,WAA0B,MAAOT,MAAKqB,aACpC,SAAWT,GACTZ,KAAKqB,QAAUR,EAAAA,sBAAsBD,oCAkBvClB,EAAFe,UAAAa,QAAE,WACE,OAA2C,IAApCtB,KAAKI,SAASmB,QAAQ,UAI/B7B,EAAFe,UAAAe,QAAE,WACE,OAA4C,IAArCxB,KAAKI,SAASmB,QAAQ,WAG/B7B,EAAFe,UAAAgB,YAAE,WACMzB,KAAK0B,aAAe1B,KAAK2B,eAC3B3B,KAAKF,eAAe8B,kBAAkB5B,KAAK2B,cAAe3B,KAAK0B,cAK3DhC,EAAVe,UAAAQ,8BAMI,MALKjB,MAAK2B,cAGR3B,KAAK2B,cAAcE,YAAc7B,KAAK8B,QAFtC9B,KAAK2B,cAAgB3B,KAAK+B,sBAIrB/B,KAAK2B,eAINjC,EAAVe,UAAAsB,+BAEI,GAAMC,GAAWhC,KAAKD,WAAaC,KAAKL,UAClCsC,EAAeD,EAASE,cAAc,OAwB5C,OArBAD,GAAaE,aAAa,KAAM,qBAAqBnC,KAAKM,KAC1D2B,EAAaG,UAAUC,IAAI,qBAC3BJ,EAAaJ,YAAc7B,KAAK8B,QAE5B9B,KAAK0B,aACPO,EAAaE,aAAa,aAAcnC,KAAK0B,aAG/C1B,KAAKH,YAAYyC,cAAcC,YAAYN,GAGN,kBAA1BO,uBACTxC,KAAKJ,QAAQ6C,kBAAkB,WAC7BD,sBAAsB,WACpBP,EAAaG,UAAUC,IAhBT,wBAoBlBJ,EAAaG,UAAUC,IApBL,oBAuBbJ,GAIDvC,EAAVe,UAAAW,2BAAA,SAAqCD,EAAwBuB,GAEzD,GAAMZ,GAAU9B,KAAKiB,oBAEjByB,IACF1C,KAAKF,eAAe8B,kBAAkBE,EAASY,GAG7CvB,GACFnB,KAAKF,eAAe6C,SAASb,EAASX,IAKlCzB,EAAVe,UAAAE,UAAA,SAAoBiC,GACZA,IAAiB5C,KAAKE,SACpBF,KAAKE,QACPF,KAAKH,YAAYyC,cAAcF,UAAUS,OAAO,aAAa7C,KAAKE,QAEhE0C,GACF5C,KAAKH,YAAYyC,cAAcF,UAAUC,IAAI,aAAaO,oBArKlEE,KAACC,EAAAA,UAADC,OACEC,SAAU,aACVC,MACEC,MAAS,YACTC,4BAA6B,UAC7BC,0BAA2B,YAC3BC,0BAA2B,aAC3BC,2BAA4B,aAC5BC,0BAA2B,YAC3BC,0BAA2B,mBAC3BC,2BAA4B,oBAC5BC,0BAA2B,mBAC3BC,2BAA4B,kEAoEhCd,SAAAe,GAAAC,aAAAhB,KAAOiB,EAAAA,WAAPjB,KAAmBkB,EAAAA,OAAnBhB,MAA0BiB,EAAAA,cA9F1BnB,KAAEoB,EAAAA,SAHFpB,KAAEqB,EAAAA,aALFrB,KAAQsB,EAAAA,gBAWRtB,KAAEuB,EAAAA,+BA+BFC,QAAAxB,KAAGyB,EAAAA,MAAHvB,MAAS,mBASTwB,UAAA1B,KAAGyB,EAAAA,MAAHvB,MAAS,qBAWT5C,WAAA0C,KAAGyB,EAAAA,MAAHvB,MAAS,sBAGTlB,UAAAgB,KAAGyB,EAAAA,MAAHvB,MAAS,cAUTtB,cAAAoB,KAAGyB,EAAAA,MAAHvB,MAAS,yBAWT3C,OAAAyC,KAAGyB,EAAAA,MAAHvB,MAAS,kBAGTyB,SAAA3B,KAAGyB,EAAAA,MAAHvB,MAAS,qBAjGTtD,gCCAA,sBAcAoD,KAAC4B,EAAAA,SAAD1B,OACE2B,SACEC,EAAAA,WACAC,EAAAA,iBAEFC,SAAUpF,GACVqF,cAAerF,OApBjBsF"}