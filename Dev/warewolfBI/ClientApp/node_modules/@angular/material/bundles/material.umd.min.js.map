{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeDef = CdkTreeNodeDef;\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends _CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodePadding = CdkTreeNodePadding;\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends _CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTree = CdkTree;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends _CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeToggle = CdkTreeNodeToggle;\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends _CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.4.7');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!_platform.IOS && !_platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide())\n        .forEach((listener, event) => element.addEventListener(event, listener));\n    } else if (_platform.IOS && (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA')) {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkPortal = CdkPortal;\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends _CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef.nativeElement);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepLabel = CdkStepLabel;\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends _CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends _CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepperNext = CdkStepperNext;\nexport const _CdkStepperPrevious = CdkStepperPrevious;\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends _CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends _CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTable = CdkTable;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends _CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkCellDef = CdkCellDef;\nexport const _CdkHeaderCellDef = CdkHeaderCellDef;\nexport const _CdkFooterCellDef = CdkFooterCellDef;\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends _CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends _CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends _CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkHeaderRowDef = CdkHeaderRowDef;\nexport const _CdkFooterRowDef = CdkFooterRowDef;\nexport const _CdkRowDef = CdkRowDef;\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends _CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends _CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends _CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this.onTouched());\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  pathname: string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const pathname = (_document && _document.location && _document.location.pathname) || '';\n  return {pathname};\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n    // because named route URLs can contain parentheses (see #12338). Also we don't use\n    // `Location` from `@angular/common` since we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location && location.pathname ? location.pathname.split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = Math.round(coerceNumberProperty(value)); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value || ''}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = `${value || ''}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this._datepicker && event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkAccordionItem = CdkAccordionItem;\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document?: any) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element.nativeElement, 'program'));\n\n    _focusMonitor.monitor(_element.nativeElement).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element.nativeElement, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this.chips.some(chip => chip._hasFocus);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClose.next(this._result);\n      this._beforeClose.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTextareaAutosize = CdkTextareaAutosize;\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends _CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef<HTMLInputElement>,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this._onTouched());\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Attribute,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        this._ngZone!.onStable.pipe(take(1)).subscribe(() => {\n          this._ngZone!.runOutsideAngular(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @breaking-change 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef<HTMLElement>) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @breaking-change 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @breaking-change 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["imports","MatCommonModule","exports","MatToolbar","MatToolbarRow","declarations","MatToolbarModule","MatTreeNodeOutlet","viewContainer","this","type","Directive","args","selector","ViewContainerRef","_CdkTreeNodeDef","CdkTreeNodeDef","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_elementRef","_tree","tabIndex","_this","_super","call","role","Number","tslib_1.__extends","exportAs","inputs","host","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","class","providers","provide","useExisting","ElementRef","CdkTree","undefined","decorators","Attribute","Input","MatTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","_CdkTreeNodePadding","CdkTreeNodePadding","MatTreeNodePadding","level","indent","_CdkTree","MatTree","Component","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","_CdkTreeNodeToggle","CdkTreeNodeToggle","recursive","MatTreeNodeToggle","(click)","MAT_TREE_DIRECTIVES","NgModule","CdkTreeModule","CommonModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatTabLabel","_CdkPortal","MatTabContent","TemplateRef","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","propDecorators","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","style","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","Inject","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","nativeElement","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","NgZone","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatInkBar","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","sortButtonLabel","id","Injectable","providedIn","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","allowChildren","MatSort","CdkColumnDef","disableClear","MatSortModule","_CdkStepLabel","CdkStepLabel","MatStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","templateRef","_CdkStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","_CdkStepperNext","CdkStepperNext","_CdkStepperPrevious","CdkStepperPrevious","MatStepperNext","[type]","MatStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","_CdkTable","CdkTable","stickyCssClass","MatTable","CDK_TABLE_TEMPLATE","_CdkCellDef","CdkCellDef","_CdkHeaderCellDef","CdkHeaderCellDef","_CdkFooterCellDef","CdkFooterCellDef","MatCellDef","MatHeaderCellDef","MatFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","_CdkHeaderRowDef","CdkHeaderRowDef","_CdkFooterRowDef","CdkFooterRowDef","_CdkRowDef","CdkRowDef","MatHeaderRowDef","MatFooterRowDef","MatRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatSlider","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_invertMouseCoords","_thumbGap","_direction","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_focusHostElement","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","_clamp","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","_blurHostElement","blur","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","displayWith","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","keyframes","query","animateChild","openedChange","opened","_doc","_elementFocusedBeforeDrawerWasOpened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollDispatchModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","_onInputClick","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatRipple","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_roundToDecimal","toString","split","pop","parseFloat","toFixed","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_mode","_disableClose","_autoFocus","scrollBuffer","panelHeight","_scrollTop","_calculateOverlayScroll","selectedOptionOffset","maxScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","MatSelect","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","options","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionGroups","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","matSelectAnimations","transformPanel","fadeInContent","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","ANDROID","nodeName","webkitUserSelect","userSelect","listener","addEventListener","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_bufferValue","path","pathname","_rectangleFillValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","_template","insertBefore","outletElement","context","_attached","MatMenuContent","isAttached","ApplicationRef","matMenuAnimations","transformMenu","sequence","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","result","current","scrollContainerHeight","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","_rowspan","MatGridTile","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","_dateAdapter","createMissingDateImplError","MatDatepicker","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","date","sameDate","_selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","_CdkAccordionItem","CdkAccordionItem","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_hideToggle","_inputChanges","_headerId","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_headers","header","CdkAccordion","CdkAccordionModule","MatExpansionModule","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","firstChange","view","_getCurrentViewComponent","headerComponent","monthView","yearView","multiYearView","chip","MatChipListChange","MatChipList","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chips","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","_lastDestroyedChipIndex","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_result","dialogResult","detachBackdrop","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","_CdkTextareaAutosize","CdkTextareaAutosize","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_tabIndex","_userTabIndex","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MatAutocomplete","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","optionSelected","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","window","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","appearance","_appearance","updateOutlineGap","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","documentElement","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}