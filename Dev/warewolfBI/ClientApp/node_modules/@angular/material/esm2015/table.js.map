{"version":3,"file":"table.js","sources":["../../../src/lib/table/table-data-source.ts","../../../src/lib/table/table-module.ts","../../../src/lib/table/row.ts","../../../src/lib/table/cell.ts","../../../src/lib/table/table.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkHeaderRowDef = CdkHeaderRowDef;\nexport const _CdkFooterRowDef = CdkFooterRowDef;\nexport const _CdkRowDef = CdkRowDef;\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends _CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends _CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends _CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkCellDef = CdkCellDef;\nexport const _CdkHeaderCellDef = CdkHeaderCellDef;\nexport const _CdkFooterCellDef = CdkFooterCellDef;\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends _CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends _CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends _CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTable = CdkTable;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends _CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n"],"names":["observableOf"],"mappings":"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"}