{"version":3,"file":"cdk-accordion.umd.min.js","sources":["../../src/cdk/accordion/accordion.ts","../../src/cdk/accordion/accordion-item.ts","../../src/cdk/accordion/accordion-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/** Used to generate unique ID for each accordion. */\nlet nextId = 0;\n\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n@Directive({\n  selector: 'cdk-accordion, [cdkAccordion]',\n  exportAs: 'cdkAccordion',\n})\nexport class CdkAccordion implements OnDestroy, OnChanges {\n  /** Emits when the state of the accordion changes */\n  readonly _stateChanges = new Subject<SimpleChanges>();\n\n  /** Stream that emits true/false when openAll/closeAll is triggered. */\n  readonly _openCloseAllActions: Subject<boolean> = new Subject<boolean>();\n\n  /** A readonly id value to use for unique selection coordination. */\n  readonly id = `cdk-accordion-${nextId++}`;\n\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n  @Input()\n  get multi(): boolean { return this._multi; }\n  set multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\n  private _multi: boolean = false;\n\n  /** Opens all enabled accordion items in an accordion where multi is enabled. */\n  openAll(): void {\n    this._openCloseAll(true);\n  }\n\n  /** Closes all enabled accordion items in an accordion where multi is enabled. */\n  closeAll(): void {\n    this._openCloseAll(false);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._stateChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  private _openCloseAll(expanded: boolean): void {\n    if (this.multi) {\n      this._openCloseAllActions.next(expanded);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Output,\n  Directive,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n  SkipSelf,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CdkAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs';\n\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n@Directive({\n  selector: 'cdk-accordion-item, [cdkAccordionItem]',\n  exportAs: 'cdkAccordionItem',\n  providers: [\n    // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n    // to the same accordion.\n    {provide: CdkAccordion, useValue: undefined},\n  ],\n})\nexport class CdkAccordionItem implements OnDestroy {\n  /** Subscription to openAll/closeAll events. */\n  private _openCloseAllSubscription = Subscription.EMPTY;\n  /** Event emitted every time the AccordionItem is closed. */\n  @Output() closed: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted every time the AccordionItem is opened. */\n  @Output() opened: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted when the AccordionItem is destroyed. */\n  @Output() destroyed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Emits whenever the expanded state of the accordion changes.\n   * Primarily used to facilitate two-way binding.\n   * @docs-private\n   */\n  @Output() expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The unique AccordionItem id. */\n  readonly id: string = `cdk-accordion-child-${nextId++}`;\n\n  /** Whether the AccordionItem is expanded. */\n  @Input()\n  get expanded(): any { return this._expanded; }\n  set expanded(expanded: any) {\n    expanded = coerceBooleanProperty(expanded);\n\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      this.expandedChange.emit(expanded);\n\n      if (expanded) {\n        this.opened.emit();\n        /**\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n         * the name value is the id of the accordion.\n         */\n        const accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _expanded = false;\n\n  /** Whether the AccordionItem is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(disabled: any) { this._disabled = coerceBooleanProperty(disabled); }\n  private _disabled: boolean = false;\n\n  /** Unregister function for _expansionDispatcher. */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  constructor(@Optional() @SkipSelf() public accordion: CdkAccordion,\n              private _changeDetectorRef: ChangeDetectorRef,\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\n    this._removeUniqueSelectionListener =\n      _expansionDispatcher.listen((id: string, accordionId: string) => {\n        if (this.accordion && !this.accordion.multi &&\n            this.accordion.id === accordionId && this.id !== id) {\n          this.expanded = false;\n        }\n      });\n\n    // When an accordion item is hosted in an accordion, subscribe to open/close events.\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n\n  /** Emits an event for the accordion item being destroyed. */\n  ngOnDestroy() {\n    this.opened.complete();\n    this.closed.complete();\n    this.destroyed.emit();\n    this.destroyed.complete();\n    this._removeUniqueSelectionListener();\n    this._openCloseAllSubscription.unsubscribe();\n  }\n\n  /** Toggles the expanded state of the accordion item. */\n  toggle(): void {\n    if (!this.disabled) {\n      this.expanded = !this.expanded;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to false. */\n  close(): void {\n    if (!this.disabled) {\n      this.expanded = false;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to true. */\n  open(): void {\n    if (!this.disabled) {\n      this.expanded = true;\n    }\n  }\n\n  private _subscribeToOpenCloseAllActions(): Subscription {\n    return this.accordion._openCloseAllActions.subscribe(expanded => {\n      // Only change expanded state if item is enabled\n      if (!this.disabled) {\n        this.expanded = expanded;\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkAccordion} from './accordion';\nimport {CdkAccordionItem} from './accordion-item';\n\n\n@NgModule({\n  exports: [CdkAccordion, CdkAccordionItem],\n  declarations: [CdkAccordion, CdkAccordionItem],\n})\nexport class CdkAccordionModule {}\n"],"names":["nextId","this","_stateChanges","Subject","_openCloseAllActions","id","_multi","Object","defineProperty","CdkAccordion","prototype","multi","coerceBooleanProperty","openAll","_openCloseAll","closeAll","ngOnChanges","changes","next","ngOnDestroy","complete","expanded","type","Directive","args","selector","exportAs","Input","CdkAccordionItem","accordion","_changeDetectorRef","_expansionDispatcher","_this","_openCloseAllSubscription","Subscription","EMPTY","closed","EventEmitter","opened","destroyed","expandedChange","_expanded","_disabled","_removeUniqueSelectionListener","listen","accordionId","_subscribeToOpenCloseAllActions","emit","notify","markForCheck","disabled","unsubscribe","toggle","close","open","subscribe","providers","provide","useValue","undefined","decorators","Optional","SkipSelf","ChangeDetectorRef","UniqueSelectionDispatcher","Output","NgModule","exports","declarations","CdkAccordionModule"],"mappings":"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"}