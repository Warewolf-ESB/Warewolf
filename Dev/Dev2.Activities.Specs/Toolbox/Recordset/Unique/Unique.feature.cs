// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dev2.Activities.Specs.Toolbox.Recordset.Unique
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class UniqueFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Unique.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Unique", "In order to find unique records in a recordset\r\nAs a Warewolf user\r\nI want tool t" +
                    "hat will allow me", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Unique")))
            {
                Dev2.Activities.Specs.Toolbox.Recordset.Unique.UniqueFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find unique records in a recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        public virtual void FindUniqueRecordsInARecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find unique records in a recordset", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2151 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table2151.AddRow(new string[] {
                        "rs().row",
                        "10"});
            table2151.AddRow(new string[] {
                        "rs().row",
                        "20"});
            table2151.AddRow(new string[] {
                        "rs().row",
                        "20"});
            table2151.AddRow(new string[] {
                        "rs().row",
                        "30"});
#line 7
 testRunner.Given("I have the following duplicated recordset", ((string)(null)), table2151, "Given ");
#line 13
 testRunner.And("I want to find unique in field \"[[rs().row]]\" with the return field \"[[rs().row]]" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("The result variable is \"[[rec().unique]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.When("the unique tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2152 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "unique"});
            table2152.AddRow(new string[] {
                        "rec().unique",
                        "10"});
            table2152.AddRow(new string[] {
                        "rec().unique",
                        "20"});
            table2152.AddRow(new string[] {
                        "rec().unique",
                        "30"});
#line 16
 testRunner.Then("the unique result will be", ((string)(null)), table2152, "Then ");
#line 21
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2153 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table2153.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(4).row]] = 30",
                        "[[rs().row]] ="});
#line 22
 testRunner.And("the debug inputs as", ((string)(null)), table2153, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2154 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table2154.AddRow(new string[] {
                        "1",
                        "[[rec(1).unique]] = 10"});
            table2154.AddRow(new string[] {
                        "",
                        "[[rec(2).unique]] = 20"});
            table2154.AddRow(new string[] {
                        "",
                        "[[rec(3).unique]] = 30"});
#line 25
 testRunner.And("the debug output as", ((string)(null)), table2154, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find unique records in an empty recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        public virtual void FindUniqueRecordsInAnEmptyRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find unique records in an empty recordset", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2155 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
#line 32
 testRunner.Given("I have the following empty recordset", ((string)(null)), table2155, "Given ");
#line 34
 testRunner.And("I want to find unique in field \"[[rs().row]]\" with the return field \"[[rs().row]]" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.And("The result variable is \"[[rec().unique]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.When("the unique tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2156 = new TechTalk.SpecFlow.Table(new string[] {
                        "rec",
                        "unique"});
#line 37
 testRunner.Then("the unique result will be", ((string)(null)), table2156, "Then ");
#line 39
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find unique records in a recordset and the in field is blank")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        public virtual void FindUniqueRecordsInARecordsetAndTheInFieldIsBlank()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find unique records in a recordset and the in field is blank", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2157 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table2157.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table2157.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table2157.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table2157.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 43
 testRunner.Given("I have the following duplicated recordset", ((string)(null)), table2157, "Given ");
#line 49
 testRunner.And("I want to find unique in field \"\" with the return field \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
 testRunner.And("The result variable is \"[[rec().unique]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.When("the unique tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2158 = new TechTalk.SpecFlow.Table(new string[] {
                        "rec",
                        "unique"});
#line 52
 testRunner.Then("the unique result will be", ((string)(null)), table2158, "Then ");
#line 54
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2159 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table2159.AddRow(new string[] {
                        "In Field(s)",
                        "",
                        "[[rs().row]] ="});
#line 55
 testRunner.And("the debug inputs as", ((string)(null)), table2159, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2160 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        ""});
            table2160.AddRow(new string[] {
                        "",
                        "[[rec(*).unique]] ="});
#line 58
 testRunner.And("the debug output as", ((string)(null)), table2160, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find unique records in a recordset the return field is blank")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        public virtual void FindUniqueRecordsInARecordsetTheReturnFieldIsBlank()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find unique records in a recordset the return field is blank", ((string[])(null)));
#line 62
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2161 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table2161.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table2161.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table2161.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table2161.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 63
 testRunner.Given("I have the following duplicated recordset", ((string)(null)), table2161, "Given ");
#line 69
 testRunner.And("I want to find unique in field \"[[rs().row]]\" with the return field \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
 testRunner.And("The result variable is \"[[rec().unique]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
 testRunner.When("the unique tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2162 = new TechTalk.SpecFlow.Table(new string[] {
                        "rec",
                        "unique"});
#line 72
 testRunner.Then("the unique result will be", ((string)(null)), table2162, "Then ");
#line 74
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2163 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table2163.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(4).row]] = 3",
                        "\"\""});
#line 75
 testRunner.And("the debug inputs as", ((string)(null)), table2163, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2164 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        ""});
            table2164.AddRow(new string[] {
                        "",
                        "[[rec(*).unique]] ="});
#line 78
 testRunner.And("the debug output as", ((string)(null)), table2164, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find unique records using a negative recordset index for In Field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        public virtual void FindUniqueRecordsUsingANegativeRecordsetIndexForInField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find unique records using a negative recordset index for In Field", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2165 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table2165.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table2165.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table2165.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table2165.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 83
 testRunner.Given("I have the following duplicated recordset", ((string)(null)), table2165, "Given ");
#line 89
 testRunner.And("I want to find unique in field \"[[rs(-1).row]]\" with the return field \"[[rs().row" +
                    "]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
 testRunner.And("The result variable is \"[[rec().unique]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 91
 testRunner.When("the unique tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2166 = new TechTalk.SpecFlow.Table(new string[] {
                        "rec",
                        "unique"});
#line 92
 testRunner.Then("the unique result will be", ((string)(null)), table2166, "Then ");
#line 94
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2167 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table2167.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(-1).row]] =",
                        ""});
            table2167.AddRow(new string[] {
                        "",
                        "",
                        "[[rs().row]]  ="});
#line 95
 testRunner.And("the debug inputs as", ((string)(null)), table2167, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2168 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        ""});
            table2168.AddRow(new string[] {
                        "",
                        "[[rec(*).unique]] ="});
#line 99
 testRunner.And("the debug output as", ((string)(null)), table2168, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find unique records using a * for In Field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        public virtual void FindUniqueRecordsUsingAForInField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find unique records using a * for In Field", ((string[])(null)));
#line 103
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2169 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table2169.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table2169.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table2169.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table2169.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 104
 testRunner.Given("I have the following duplicated recordset", ((string)(null)), table2169, "Given ");
#line 110
 testRunner.And("I want to find unique in field \"[[rs(*).row]]\" with the return field \"[[rs().row]" +
                    "]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 111
 testRunner.And("The result variable is \"[[rec().unique]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
 testRunner.When("the unique tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2170 = new TechTalk.SpecFlow.Table(new string[] {
                        "rec",
                        "unique"});
            table2170.AddRow(new string[] {
                        "rec().unique",
                        "1"});
            table2170.AddRow(new string[] {
                        "rec().unique",
                        "2"});
            table2170.AddRow(new string[] {
                        "rec().unique",
                        "3"});
#line 113
 testRunner.Then("the unique result will be", ((string)(null)), table2170, "Then ");
#line 118
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2171 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table2171.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).row]] = 1",
                        ""});
            table2171.AddRow(new string[] {
                        "",
                        "[[rs(2).row]] = 2",
                        ""});
            table2171.AddRow(new string[] {
                        "",
                        "[[rs(3).row]] = 2",
                        ""});
            table2171.AddRow(new string[] {
                        "",
                        "[[rs(4).row]] = 3",
                        ""});
            table2171.AddRow(new string[] {
                        "",
                        "",
                        "[[rs().row]] ="});
#line 119
 testRunner.And("the debug inputs as", ((string)(null)), table2171, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2172 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table2172.AddRow(new string[] {
                        "1",
                        "[[rec(1).unique]] = 1"});
            table2172.AddRow(new string[] {
                        "",
                        "[[rec(2).unique]] = 2"});
            table2172.AddRow(new string[] {
                        "",
                        "[[rec(3).unique]] = 3"});
#line 126
 testRunner.And("the debug output as", ((string)(null)), table2172, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find unique records using a negative recordset index for Return Field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        public virtual void FindUniqueRecordsUsingANegativeRecordsetIndexForReturnField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find unique records using a negative recordset index for Return Field", ((string[])(null)));
#line 132
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2173 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table2173.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table2173.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table2173.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table2173.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 133
 testRunner.Given("I have the following duplicated recordset", ((string)(null)), table2173, "Given ");
#line 139
 testRunner.And("I want to find unique in field \"[[rs().row]]\" with the return field \"[[rs(-1).row" +
                    "]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
 testRunner.And("The result variable is \"[[rec().unique]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
 testRunner.When("the unique tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2174 = new TechTalk.SpecFlow.Table(new string[] {
                        "rec",
                        "unique"});
#line 142
 testRunner.Then("the unique result will be", ((string)(null)), table2174, "Then ");
#line 144
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2175 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table2175.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(4).row]] = 3",
                        "[[rs(-1).row]] ="});
#line 145
 testRunner.And("the debug inputs as", ((string)(null)), table2175, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2176 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        ""});
            table2176.AddRow(new string[] {
                        "",
                        "[[rec(*).unique]] ="});
#line 148
 testRunner.And("the debug output as", ((string)(null)), table2176, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find unique records using a * for Return Field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        public virtual void FindUniqueRecordsUsingAForReturnField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find unique records using a * for Return Field", ((string[])(null)));
#line 152
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2177 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table2177.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table2177.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table2177.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table2177.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 153
 testRunner.Given("I have the following duplicated recordset", ((string)(null)), table2177, "Given ");
#line 159
 testRunner.And("I want to find unique in field \"[[rs().row]]\" with the return field \"[[rs(*).row]" +
                    "]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 160
 testRunner.And("The result variable is \"[[rec().unique]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 161
 testRunner.When("the unique tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2178 = new TechTalk.SpecFlow.Table(new string[] {
                        "rec",
                        "unique"});
            table2178.AddRow(new string[] {
                        "rec().unique",
                        "1"});
            table2178.AddRow(new string[] {
                        "rec().unique",
                        "2"});
            table2178.AddRow(new string[] {
                        "rec().unique",
                        "3"});
#line 162
 testRunner.Then("the unique result will be", ((string)(null)), table2178, "Then ");
#line 167
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2179 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table2179.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(4).row]] = 3",
                        "[[rs(*).row]] ="});
#line 168
 testRunner.And("the debug inputs as", ((string)(null)), table2179, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2180 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table2180.AddRow(new string[] {
                        "1",
                        "[[rec(1).unique]] = 1"});
            table2180.AddRow(new string[] {
                        "",
                        "[[rec(2).unique]] = 2"});
            table2180.AddRow(new string[] {
                        "",
                        "[[rec(3).unique]] = 3"});
#line 171
 testRunner.And("the debug output as", ((string)(null)), table2180, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Unique record tool with empty In Fields")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        public virtual void ExecutingUniqueRecordToolWithEmptyInFields()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Unique record tool with empty In Fields", ((string[])(null)));
#line 177
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2181 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table2181.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table2181.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table2181.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table2181.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 178
 testRunner.Given("I have the following duplicated recordset", ((string)(null)), table2181, "Given ");
#line 184
 testRunner.And("I want to find unique in field \"\" with the return field \"[[rs(*).row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 185
 testRunner.And("The result variable is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 186
 testRunner.When("the unique tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2182 = new TechTalk.SpecFlow.Table(new string[] {
                        "rec",
                        "unique"});
#line 187
 testRunner.Then("the unique result will be", ((string)(null)), table2182, "Then ");
#line 189
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2183 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table2183.AddRow(new string[] {
                        "In Field(s)",
                        "",
                        "[[rs(*).row]] ="});
#line 190
 testRunner.And("the debug inputs as", ((string)(null)), table2183, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2184 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        ""});
#line 193
 testRunner.And("the debug output as", ((string)(null)), table2184, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Unique record tool with empty In Return and Result Field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        public virtual void ExecutingUniqueRecordToolWithEmptyInReturnAndResultField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Unique record tool with empty In Return and Result Field", ((string[])(null)));
#line 197
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2185 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table2185.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table2185.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table2185.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table2185.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 198
 testRunner.Given("I have the following duplicated recordset", ((string)(null)), table2185, "Given ");
#line 204
 testRunner.And("I want to find unique in field \"[[rs(*).row]]\" with the return field \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 205
 testRunner.And("The result variable is \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 206
 testRunner.When("the unique tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2186 = new TechTalk.SpecFlow.Table(new string[] {
                        "rec",
                        "unique"});
#line 207
 testRunner.Then("the unique result will be", ((string)(null)), table2186, "Then ");
#line 209
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2187 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table2187.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).row]] = 1",
                        ""});
            table2187.AddRow(new string[] {
                        "",
                        "[[rs(2).row]] = 2",
                        ""});
            table2187.AddRow(new string[] {
                        "",
                        "[[rs(3).row]] = 2",
                        ""});
            table2187.AddRow(new string[] {
                        "",
                        "[[rs(4).row]] = 3",
                        "\"\""});
#line 210
 testRunner.And("the debug inputs as", ((string)(null)), table2187, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2188 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        ""});
#line 216
 testRunner.And("the debug output as", ((string)(null)), table2188, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find unique records and assigning result in two variables")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        public virtual void FindUniqueRecordsAndAssigningResultInTwoVariables()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find unique records and assigning result in two variables", new string[] {
                        "ignore"});
#line 221
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2189 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table2189.AddRow(new string[] {
                        "rs().row",
                        "10"});
            table2189.AddRow(new string[] {
                        "rs().row",
                        "20"});
            table2189.AddRow(new string[] {
                        "rs().row",
                        "20"});
            table2189.AddRow(new string[] {
                        "rs().row",
                        "30"});
#line 222
 testRunner.Given("I have the following duplicated recordset", ((string)(null)), table2189, "Given ");
#line 228
 testRunner.And("I want to find unique in field \"[[rs().row]]\" with the return field \"[[rs().row]]" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 229
 testRunner.And("The result variable is \"[[a]],[[b]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 230
 testRunner.When("the unique tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2190 = new TechTalk.SpecFlow.Table(new string[] {
                        "rec",
                        "unique"});
            table2190.AddRow(new string[] {
                        "rec().row",
                        "10"});
            table2190.AddRow(new string[] {
                        "rec().row",
                        "20"});
            table2190.AddRow(new string[] {
                        "rec().row",
                        "30"});
#line 231
 testRunner.Then("the unique result will be", ((string)(null)), table2190, "Then ");
#line 236
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2191 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table2191.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(4).row]] = 30",
                        "[[rs().row]] ="});
#line 237
 testRunner.And("the debug inputs as", ((string)(null)), table2191, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2192 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table2192.AddRow(new string[] {
                        "1",
                        "[[a]] = 10,20,30"});
            table2192.AddRow(new string[] {
                        "2",
                        "[[b]] = 10,20,30"});
#line 240
 testRunner.And("the debug output as", ((string)(null)), table2192, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void InvalidExpressions(string inField, string @return, string result, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid expressions", @__tags);
#line 248
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2193 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table2193.AddRow(new string[] {
                        "rs().row",
                        "10"});
            table2193.AddRow(new string[] {
                        "rs().row",
                        "20"});
            table2193.AddRow(new string[] {
                        "rs().row",
                        "20"});
            table2193.AddRow(new string[] {
                        "rs().row",
                        "30"});
#line 249
testRunner.Given("I have the following duplicated recordset", ((string)(null)), table2193, "Given ");
#line 255
 testRunner.And(string.Format("I want to find unique in field \'{0}\' with the return field \'{1}\'", inField, @return), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 256
 testRunner.And(string.Format("The result variable is \'{0}\' equals \'{1}\'", result, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 257
 testRunner.When("the unique tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2194 = new TechTalk.SpecFlow.Table(new string[] {
                        "rec",
                        "unique"});
#line 258
 testRunner.Then("the unique result will be", ((string)(null)), table2194, "Then ");
#line 260
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2195 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "InField",
                        "Return",
                        "Result",
                        "Value"});
            table2195.AddRow(new string[] {
                        "1",
                        string.Format("{0}", inField),
                        string.Format("{0}", @return),
                        string.Format("{0}", result),
                        string.Format("{0}", value)});
#line 261
 testRunner.And("the debug inputs as", ((string)(null)), table2195, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Invalid expressions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InField", "asda")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Return", "[[rs().row]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Result", "[[var]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Error : scalar in unique")]
        public virtual void InvalidExpressions_Variant0()
        {
            this.InvalidExpressions("asda", "[[rs().row]]", "[[var]]", "Error : scalar in unique", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Invalid expressions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InField", "[[c]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Return", "[[rs().row]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Result", "[[var]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Error : scalar in unique")]
        public virtual void InvalidExpressions_Variant1()
        {
            this.InvalidExpressions("[[c]]", "[[rs().row]]", "[[var]]", "Error : scalar in unique", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Invalid expressions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InField", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Return", "[[rs().row]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Result", "[[var]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Error : Invalid in Fields")]
        public virtual void InvalidExpressions_Variant2()
        {
            this.InvalidExpressions("", "[[rs().row]]", "[[var]]", "Error : Invalid in Fields", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Invalid expressions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InField", "99")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Return", "[[rs().row]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Result", "[[rec(1).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Error : scalar in unique")]
        public virtual void InvalidExpressions_Variant3()
        {
            this.InvalidExpressions("99", "[[rs().row]]", "[[rec(1).a]]", "Error : scalar in unique", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Invalid expressions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InField", "[[v]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Return", "[[rs().row]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Result", "[[rec([[int]]).a]], [[int]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Error : scalar in unique")]
        public virtual void InvalidExpressions_Variant4()
        {
            this.InvalidExpressions("[[v]]", "[[rs().row]]", "[[rec([[int]]).a]], [[int]]", "Error : scalar in unique", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Invalid expressions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InField", "[[rs().row]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Return", "[[v]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Result", "[[rec(1).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Error : scalar in unique")]
        public virtual void InvalidExpressions_Variant5()
        {
            this.InvalidExpressions("[[rs().row]]", "[[v]]", "[[rec(1).a]]", "Error : scalar in unique", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Invalid expressions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InField", "[[rs().row]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Return", "51")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Result", "[[rec(1).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Error : scalar in unique")]
        public virtual void InvalidExpressions_Variant6()
        {
            this.InvalidExpressions("[[rs().row]]", "51", "[[rec(1).a]]", "Error : scalar in unique", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Invalid expressions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InField", "[[rs().row]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Return", "adas")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Result", "[[rec(1).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:value", "Error : scalar in unique")]
        public virtual void InvalidExpressions_Variant7()
        {
            this.InvalidExpressions("[[rs().row]]", "adas", "[[rec(1).a]]", "Error : scalar in unique", ((string[])(null)));
        }
        
        public virtual void EnsureRecordsetsWithScalarValuesWork(string inField, string @return, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ensure recordsets with scalar values work", exampleTags);
#line 276
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2196 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val",
                        "rec",
                        "value"});
            table2196.AddRow(new string[] {
                        "rs().row",
                        "10",
                        "[[rec().set]]",
                        "This"});
            table2196.AddRow(new string[] {
                        "rs().row",
                        "20",
                        "[[rec().set]]",
                        "Test"});
            table2196.AddRow(new string[] {
                        "rs().row",
                        "20",
                        "[[rec().set]]",
                        "Warehouse"});
            table2196.AddRow(new string[] {
                        "rs().row",
                        "30",
                        "[[rec().set]]",
                        "Tuesday"});
#line 277
 testRunner.Given("I have the following duplicated recordset", ((string)(null)), table2196, "Given ");
#line 283
 testRunner.And(string.Format("I want to find unique in field \'{0}\' with the return field \'{1}\'", inField, @return), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 284
 testRunner.And("The result variable is \"[[a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 285
 testRunner.When("the unique tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2197 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val",
                        "rec",
                        "value"});
            table2197.AddRow(new string[] {
                        "rs().row",
                        "10",
                        "[[rec().set]]",
                        "This"});
            table2197.AddRow(new string[] {
                        "rs().row",
                        "20",
                        "[[rec().set]]",
                        "Test"});
            table2197.AddRow(new string[] {
                        "rs().row",
                        "30",
                        "[[rec().set]]",
                        "Tuesday"});
#line 286
 testRunner.Then("the unique result will be", ((string)(null)), table2197, "Then ");
#line 291
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2198 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "In Field(s)",
                        "Return Fields"});
            table2198.AddRow(new string[] {
                        "1",
                        "InField",
                        "Return"});
#line 292
 testRunner.And("the debug inputs as", ((string)(null)), table2198, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2199 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table2199.AddRow(new string[] {
                        "1",
                        "[[a]] = This,Test,Tuesday"});
#line 295
 testRunner.And("the debug output as", ((string)(null)), table2199, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure recordsets with scalar values work")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "[[rec([[int]].set),[[int]] = 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InField", "[[rec([[int]].set),[[int]] = 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Return", "[[rs([[int]]).row]],[[int]] = 2")]
        public virtual void EnsureRecordsetsWithScalarValuesWork_RecInt_SetInt4()
        {
            this.EnsureRecordsetsWithScalarValuesWork("[[rec([[int]].set),[[int]] = 4", "[[rs([[int]]).row]],[[int]] = 2", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Find unique records in a complex type")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        public virtual void FindUniqueRecordsInAComplexType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find unique records in a complex type", new string[] {
                        "ignore"});
#line 304
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2200 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table2200.AddRow(new string[] {
                        "rs().row().set",
                        "10"});
            table2200.AddRow(new string[] {
                        "rs().row().set",
                        "20"});
            table2200.AddRow(new string[] {
                        "rs().row().set",
                        "20"});
            table2200.AddRow(new string[] {
                        "rs().row().set",
                        "30"});
#line 305
 testRunner.Given("I have the following duplicated recordset", ((string)(null)), table2200, "Given ");
#line 311
 testRunner.And("I want to find unique in field \"[[rs().row]]\" with the return field \"[[rs().row]]" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 312
 testRunner.And("The result variable is \"[[rec().unique]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 313
 testRunner.When("the unique tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2201 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "unique"});
            table2201.AddRow(new string[] {
                        "rec().unique().set",
                        "10"});
            table2201.AddRow(new string[] {
                        "rec().unique().set",
                        "20"});
            table2201.AddRow(new string[] {
                        "rec().unique().set",
                        "30"});
#line 314
 testRunner.Then("the unique result will be", ((string)(null)), table2201, "Then ");
#line 319
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2202 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table2202.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(4).row().set]] = 30",
                        "[[rs().row().set]] ="});
#line 320
 testRunner.And("the debug inputs as", ((string)(null)), table2202, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2203 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table2203.AddRow(new string[] {
                        "1",
                        "[[rec(1).unique().set]] = 10"});
#line 323
 testRunner.And("the debug output as", ((string)(null)), table2203, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Unique record tool with NULL recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        public virtual void ExecutingUniqueRecordToolWithNULLRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Unique record tool with NULL recordset", ((string[])(null)));
#line 327
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2204 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "val"});
            table2204.AddRow(new string[] {
                        "rs().row",
                        "NULL"});
            table2204.AddRow(new string[] {
                        "rs().val",
                        "NULL"});
#line 328
 testRunner.Given("I have the following duplicated recordset", ((string)(null)), table2204, "Given ");
#line 332
 testRunner.And("I want to find unique in field \"\" with the return field \"[[rs(*).row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 333
 testRunner.And("The result variable is \"[[rs().val]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 334
 testRunner.When("the unique tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 335
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Unique record tool with non existent recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Unique")]
        public virtual void ExecutingUniqueRecordToolWithNonExistentRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Unique record tool with non existent recordset", ((string[])(null)));
#line 338
this.ScenarioSetup(scenarioInfo);
#line 339
 testRunner.Given("I want to find unique in field \"\" with the return field \"[[rs(*).row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 340
 testRunner.And("The result variable is \"[[rs().val]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 341
 testRunner.When("the unique tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 342
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
