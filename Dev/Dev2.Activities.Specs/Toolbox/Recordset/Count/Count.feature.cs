// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dev2.Activities.Specs.Toolbox.Recordset.Count
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CountFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Count.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Count", "In order to count records\r\nAs a Warewolf user\r\nI want a tool that takes a record " +
                    "set counts it", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Count")))
            {
                Dev2.Activities.Specs.Toolbox.Recordset.Count.CountFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Count a number of records in a recordset with 3 rows")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        public virtual void CountANumberOfRecordsInARecordsetWith3Rows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count a number of records in a recordset with 3 rows", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1712 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[rs]]",
                        ""});
            table1712.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table1712.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table1712.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 7
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table1712, "Given ");
#line 12
 testRunner.And("count on record \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.Then("the result count should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 15
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1713 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table1713.AddRow(new string[] {
                        "[[rs(1).row]] = 1"});
            table1713.AddRow(new string[] {
                        "[[rs(2).row]] = 2"});
            table1713.AddRow(new string[] {
                        "[[rs(3).row]] = 3"});
#line 16
 testRunner.And("the debug inputs as", ((string)(null)), table1713, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1714 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1714.AddRow(new string[] {
                        "[[result]] = 3"});
#line 21
 testRunner.And("the debug output as", ((string)(null)), table1714, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Count a number of records in a recordset with 8 rows")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        public virtual void CountANumberOfRecordsInARecordsetWith8Rows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count a number of records in a recordset with 8 rows", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1715 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        ""});
            table1715.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table1715.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table1715.AddRow(new string[] {
                        "rs().row",
                        "3"});
            table1715.AddRow(new string[] {
                        "rs().row",
                        "4"});
            table1715.AddRow(new string[] {
                        "rs().row",
                        "5"});
            table1715.AddRow(new string[] {
                        "rs().row",
                        "6"});
            table1715.AddRow(new string[] {
                        "rs().row",
                        "7"});
            table1715.AddRow(new string[] {
                        "rs().row",
                        "8"});
#line 26
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table1715, "Given ");
#line 36
 testRunner.And("count on record \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
 testRunner.Then("the result count should be 8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1716 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table1716.AddRow(new string[] {
                        "[[rs(1).row]] =  1"});
            table1716.AddRow(new string[] {
                        "[[rs(2).row]] =  2"});
            table1716.AddRow(new string[] {
                        "[[rs(3).row]] =  3"});
            table1716.AddRow(new string[] {
                        "[[rs(4).row]] =  4"});
            table1716.AddRow(new string[] {
                        "[[rs(5).row]] =  5"});
            table1716.AddRow(new string[] {
                        "[[rs(6).row]] =  6"});
            table1716.AddRow(new string[] {
                        "[[rs(7).row]] =  7"});
            table1716.AddRow(new string[] {
                        "[[rs(8).row]] =  8"});
#line 40
 testRunner.And("the debug inputs as", ((string)(null)), table1716, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1717 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1717.AddRow(new string[] {
                        "[[result]] = 8"});
#line 50
 testRunner.And("the debug output as", ((string)(null)), table1717, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Count a number of records in a empty recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        public virtual void CountANumberOfRecordsInAEmptyRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count a number of records in a empty recordset", ((string[])(null)));
#line 56
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1718 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        ""});
            table1718.AddRow(new string[] {
                        "[[rs().row]]",
                        "NULL"});
#line 57
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table1718, "Given ");
#line 60
 testRunner.And("count on record \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
 testRunner.Then("the result count should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 63
 testRunner.And("the execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Count a number of records in a unassigned recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        public virtual void CountANumberOfRecordsInAUnassignedRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count a number of records in a unassigned recordset", ((string[])(null)));
#line 65
this.ScenarioSetup(scenarioInfo);
#line 66
 testRunner.Given("count on record \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 67
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
 testRunner.Then("the execution has \"An\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Count record with invalid variables")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        public virtual void CountRecordWithInvalidVariables()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count record with invalid variables", ((string[])(null)));
#line 74
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1719 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        ""});
            table1719.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table1719.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table1719.AddRow(new string[] {
                        "rs().row",
                        "3"});
            table1719.AddRow(new string[] {
                        "rs().row",
                        "4"});
            table1719.AddRow(new string[] {
                        "rs().row",
                        "5"});
            table1719.AddRow(new string[] {
                        "rs().row",
                        "6"});
            table1719.AddRow(new string[] {
                        "rs().row",
                        "7"});
            table1719.AddRow(new string[] {
                        "rs().row",
                        "8"});
#line 75
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table1719, "Given ");
#line 85
 testRunner.And("count on record \"[[rs().#$]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 87
 testRunner.Then("the result count should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 88
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1720 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
#line 89
 testRunner.And("the debug inputs as", ((string)(null)), table1720, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1721 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
#line 91
 testRunner.And("the debug output as", ((string)(null)), table1721, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Count only one column record")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        public virtual void CountOnlyOneColumnRecord()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count only one column record", ((string[])(null)));
#line 94
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1722 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        ""});
            table1722.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table1722.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table1722.AddRow(new string[] {
                        "rs().row",
                        "3"});
            table1722.AddRow(new string[] {
                        "rs().row",
                        "4"});
            table1722.AddRow(new string[] {
                        "rs().row",
                        "5"});
            table1722.AddRow(new string[] {
                        "rs().row",
                        "6"});
            table1722.AddRow(new string[] {
                        "rs().row",
                        "7"});
            table1722.AddRow(new string[] {
                        "rs().row",
                        "8"});
#line 95
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table1722, "Given ");
#line 105
 testRunner.And("count on record \"[[rs(*).row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 107
 testRunner.Then("the result count should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 108
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1723 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
#line 109
 testRunner.And("the debug inputs as", ((string)(null)), table1723, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1724 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
#line 111
 testRunner.And("the debug output as", ((string)(null)), table1724, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Count only one coloumn record")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        public virtual void CountOnlyOneColoumnRecord()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count only one coloumn record", ((string[])(null)));
#line 114
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1725 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        ""});
            table1725.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table1725.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table1725.AddRow(new string[] {
                        "rs().row",
                        "3"});
            table1725.AddRow(new string[] {
                        "rs().row",
                        "4"});
            table1725.AddRow(new string[] {
                        "fs().row",
                        "5"});
            table1725.AddRow(new string[] {
                        "fs().row",
                        "6"});
            table1725.AddRow(new string[] {
                        "fs().row",
                        "7"});
            table1725.AddRow(new string[] {
                        "fs().row",
                        "8"});
#line 115
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table1725, "Given ");
#line 125
 testRunner.And("count on record \"[[rs().row]],[[fs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 127
 testRunner.Then("the result count should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 128
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1726 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
#line 129
 testRunner.And("the debug inputs as", ((string)(null)), table1726, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1727 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
#line 131
 testRunner.And("the debug output as", ((string)(null)), table1727, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Count a number of records when two recordsets are defined.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        public virtual void CountANumberOfRecordsWhenTwoRecordsetsAreDefined_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count a number of records when two recordsets are defined.", ((string[])(null)));
#line 134
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1728 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        ""});
            table1728.AddRow(new string[] {
                        "rs().row",
                        "a"});
            table1728.AddRow(new string[] {
                        "fs().row",
                        "a"});
            table1728.AddRow(new string[] {
                        "rs().row",
                        "b"});
            table1728.AddRow(new string[] {
                        "rs().row",
                        "c"});
            table1728.AddRow(new string[] {
                        "fs().row",
                        "b"});
            table1728.AddRow(new string[] {
                        "rs().row",
                        "d"});
            table1728.AddRow(new string[] {
                        "fs().row",
                        "c"});
            table1728.AddRow(new string[] {
                        "rs().row",
                        "e"});
#line 135
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table1728, "Given ");
#line 145
 testRunner.And("count on record \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 147
 testRunner.Then("the result count should be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 148
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1729 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table1729.AddRow(new string[] {
                        "[[rs(1).row]] = a"});
            table1729.AddRow(new string[] {
                        "[[rs(2).row]] = b"});
            table1729.AddRow(new string[] {
                        "[[rs(3).row]] = c"});
            table1729.AddRow(new string[] {
                        "[[rs(4).row]] =  d"});
            table1729.AddRow(new string[] {
                        "[[rs(5).row]] =  e"});
#line 149
 testRunner.And("the debug inputs as", ((string)(null)), table1729, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1730 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1730.AddRow(new string[] {
                        "[[result]] = 5"});
#line 156
 testRunner.And("the debug output as", ((string)(null)), table1730, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Count with two variables in result field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        public virtual void ExecutingCountWithTwoVariablesInResultField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Count with two variables in result field", ((string[])(null)));
#line 160
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1731 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        ""});
            table1731.AddRow(new string[] {
                        "rs(1).row",
                        "1"});
            table1731.AddRow(new string[] {
                        "rs(2).row",
                        "2"});
            table1731.AddRow(new string[] {
                        "rs(3).row",
                        "3"});
            table1731.AddRow(new string[] {
                        "rs(4).row",
                        "4"});
#line 161
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table1731, "Given ");
#line 167
 testRunner.And("count on record \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 168
    testRunner.And("result variable as \"[[b]][[a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 169
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 170
 testRunner.Then("the result count should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 171
 testRunner.And("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1732 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table1732.AddRow(new string[] {
                        "[[rs(1).row]] = 1"});
            table1732.AddRow(new string[] {
                        "[[rs(2).row]] = 2"});
            table1732.AddRow(new string[] {
                        "[[rs(3).row]] = 3"});
            table1732.AddRow(new string[] {
                        "[[rs(4).row]] = 4"});
#line 172
 testRunner.And("the debug inputs as", ((string)(null)), table1732, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1733 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
#line 178
 testRunner.And("the debug output as", ((string)(null)), table1733, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void EnsureVariablesOfDifferentTypesProduceDesiredResults(string count, string val, string error, string message, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ensure variables of different types produce desired results", @__tags);
#line 185
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1734 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[rs]]",
                        ""});
            table1734.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table1734.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table1734.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 186
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table1734, "Given ");
#line 191
 testRunner.And("count on record \"<count>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 192
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 193
 testRunner.Then(string.Format("the result count should be \"{0}\"", val), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 194
 testRunner.And(string.Format("the execution has \"{0}\" error", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 195
 testRunner.And(string.Format("the debug outputs as \"{0}\"", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure variables of different types produce desired results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Count", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:val", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "An")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Message", "Recordset not given")]
        public virtual void EnsureVariablesOfDifferentTypesProduceDesiredResults_()
        {
            this.EnsureVariablesOfDifferentTypesProduceDesiredResults("", "", "An", "Recordset not given", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure variables of different types produce desired results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "[[var]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Count", "[[var]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:val", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "An")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Message", "Scalar not allowed")]
        public virtual void EnsureVariablesOfDifferentTypesProduceDesiredResults_Var()
        {
            this.EnsureVariablesOfDifferentTypesProduceDesiredResults("[[var]]", "1", "An", "Scalar not allowed", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure variables of different types produce desired results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "[[q]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Count", "[[q]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:val", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "An")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Message", "Value must be a recordset")]
        public virtual void EnsureVariablesOfDifferentTypesProduceDesiredResults_Q()
        {
            this.EnsureVariablesOfDifferentTypesProduceDesiredResults("[[q]]", "", "An", "Value must be a recordset", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure variables of different types produce desired results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Count", "Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:val", "Test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "An")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Message", "Value must be a recordset")]
        public virtual void EnsureVariablesOfDifferentTypesProduceDesiredResults_Test()
        {
            this.EnsureVariablesOfDifferentTypesProduceDesiredResults("Test", "Test", "An", "Value must be a recordset", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure variables of different types produce desired results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "99")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Count", "99")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:val", "99")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "An")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Message", "Value must be a recordset")]
        public virtual void EnsureVariablesOfDifferentTypesProduceDesiredResults_99()
        {
            this.EnsureVariablesOfDifferentTypesProduceDesiredResults("99", "99", "An", "Value must be a recordset", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure variables of different types produce desired results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "[[rs([[int]])]], [[int]] = 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Count", "[[rs([[int]])]], [[int]] = 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:val", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "No")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Message", "[[result]] = 3")]
        public virtual void EnsureVariablesOfDifferentTypesProduceDesiredResults_RsIntInt1()
        {
            this.EnsureVariablesOfDifferentTypesProduceDesiredResults("[[rs([[int]])]], [[int]] = 1", "1", "No", "[[result]] = 3", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure variables of different types produce desired results")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "[[rs([[var]])]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Count", "[[rs([[var]])]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:val", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "An")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Message", "[[result]] = Error")]
        public virtual void EnsureVariablesOfDifferentTypesProduceDesiredResults_RsVar()
        {
            this.EnsureVariablesOfDifferentTypesProduceDesiredResults("[[rs([[var]])]]", "", "An", "[[result]] = Error", ((string[])(null)));
        }
        
        public virtual void EnsureRecordsetResultAreCorrect(string debug, string output, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ensure recordset result are correct", exampleTags);
#line 207
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1735 = new TechTalk.SpecFlow.Table(new string[] {
                        "[[rs]]",
                        ""});
            table1735.AddRow(new string[] {
                        "rs().row",
                        "1"});
            table1735.AddRow(new string[] {
                        "rs().row",
                        "2"});
            table1735.AddRow(new string[] {
                        "rs().row",
                        "3"});
#line 208
 testRunner.Given("I have a recordset with this shape", ((string)(null)), table1735, "Given ");
#line 213
 testRunner.And("count on record \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 214
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 215
 testRunner.Then("the result count should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 216
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1736 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table1736.AddRow(new string[] {
                        "[[rs(1).row]] = 1"});
            table1736.AddRow(new string[] {
                        "[[rs(2).row]] = 2"});
            table1736.AddRow(new string[] {
                        "[[rs(3).row]] = 3"});
#line 217
 testRunner.And("the debug inputs as", ((string)(null)), table1736, "And ");
#line 222
 testRunner.And(string.Format("the debug output as \"{0}\" with \"{1}\"", debug, output), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure recordset result are correct")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Debug", "[[rec().a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Output", "[[rec(1).a]] = 3")]
        public virtual void EnsureRecordsetResultAreCorrect_Variant0()
        {
            this.EnsureRecordsetResultAreCorrect("[[rec().a]]", "[[rec(1).a]] = 3", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure recordset result are correct")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Debug", "[[rec(*).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Output", "[[rec(1).a]] = 3 ,[[rec(2).a]] = 3")]
        public virtual void EnsureRecordsetResultAreCorrect_Variant1()
        {
            this.EnsureRecordsetResultAreCorrect("[[rec(*).a]]", "[[rec(1).a]] = 3 ,[[rec(2).a]] = 3", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure recordset result are correct")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Debug", "[[rec([[int]]).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Output", "[[rec(1).a]] = 3")]
        public virtual void EnsureRecordsetResultAreCorrect_Variant2()
        {
            this.EnsureRecordsetResultAreCorrect("[[rec([[int]]).a]]", "[[rec(1).a]] = 3", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure recordset result are correct")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Debug", "[[rec(1).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Output", "[[rec(1).a]] = 3")]
        public virtual void EnsureRecordsetResultAreCorrect_Variant3()
        {
            this.EnsureRecordsetResultAreCorrect("[[rec(1).a]]", "[[rec(1).a]] = 3", ((string[])(null)));
        }
        
        public virtual void EnsureTheCorrectValuesAreReturnedUsingComplexTypes(string debug, string output, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ensure the correct values are returned using complex types", @__tags);
#line 233
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1737 = new TechTalk.SpecFlow.Table(new string[] {
                        "complex types",
                        ""});
            table1737.AddRow(new string[] {
                        "rs().row().set",
                        "1"});
            table1737.AddRow(new string[] {
                        "rs().row().set",
                        "2"});
            table1737.AddRow(new string[] {
                        "rs().row().set",
                        "3"});
#line 234
 testRunner.Given("I have a complex type with this shape", ((string)(null)), table1737, "Given ");
#line 239
 testRunner.And("count on record \"[[rs().row()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 240
 testRunner.When("the count tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 241
 testRunner.Then("the result count should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 242
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1738 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table1738.AddRow(new string[] {
                        "[[rs().row(1).set]] = 1"});
            table1738.AddRow(new string[] {
                        "[[rs().row(2).set]] = 2"});
            table1738.AddRow(new string[] {
                        "[[rs().row(3).set]] = 3"});
#line 243
 testRunner.And("the debug inputs as", ((string)(null)), table1738, "And ");
#line 248
 testRunner.And(string.Format("the debug output as \"{0}\" with \"{1}\"", debug, output), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure the correct values are returned using complex types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "[[rec().a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Debug", "[[rec().a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Output", "[[rec(1).a]] = 3")]
        public virtual void EnsureTheCorrectValuesAreReturnedUsingComplexTypes_Rec_A()
        {
            this.EnsureTheCorrectValuesAreReturnedUsingComplexTypes("[[rec().a]]", "[[rec(1).a]] = 3", ((string[])(null)));
        }
    }
}
#pragma warning restore
#endregion
