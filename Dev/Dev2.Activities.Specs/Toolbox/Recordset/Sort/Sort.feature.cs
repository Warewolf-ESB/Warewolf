// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dev2.Activities.Specs.Toolbox.Recordset.Sort
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SortFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Sort.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Sort", "In order to sort a recordset\r\nAs a Warewolf user\r\nI want a tool I can use to arra" +
                    "nge records in either ascending or descending order", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Sort")))
            {
                Dev2.Activities.Specs.Toolbox.Recordset.Sort.SortFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset forwards using star notation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        public virtual void SortARecordsetForwardsUsingStarNotation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset forwards using star notation", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2073 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2073.AddRow(new string[] {
                        "rs().row",
                        "You"});
            table2073.AddRow(new string[] {
                        "rs().row",
                        "are"});
            table2073.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table2073.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table2073.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table2073.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table2073.AddRow(new string[] {
                        "rs().row",
                        "so far"});
#line 7
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table2073, "Given ");
#line 16
 testRunner.And("I sort a record \"[[rs(*).row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.And("my sort order is \"Forward\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2074 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2074.AddRow(new string[] {
                        "rs().row",
                        "are"});
            table2074.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table2074.AddRow(new string[] {
                        "rs().row",
                        "so far"});
            table2074.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table2074.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table2074.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table2074.AddRow(new string[] {
                        "rs().row",
                        "You"});
#line 19
 testRunner.Then("the sorted recordset \"[[rs(*).row]]\"  will be", ((string)(null)), table2074, "Then ");
#line 28
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2075 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table2075.AddRow(new string[] {
                        "[[rs(1).row]] = You",
                        ""});
            table2075.AddRow(new string[] {
                        "[[rs(2).row]] = are",
                        ""});
            table2075.AddRow(new string[] {
                        "[[rs(3).row]] = the",
                        ""});
            table2075.AddRow(new string[] {
                        "[[rs(4).row]] = best",
                        ""});
            table2075.AddRow(new string[] {
                        "[[rs(5).row]] = Warewolf",
                        ""});
            table2075.AddRow(new string[] {
                        "[[rs(6).row]] = user",
                        ""});
            table2075.AddRow(new string[] {
                        "[[rs(7).row]] = so far",
                        "Forward"});
#line 29
 testRunner.And("the debug inputs as", ((string)(null)), table2075, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2076 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2076.AddRow(new string[] {
                        "[[rs(1).row]] = are"});
            table2076.AddRow(new string[] {
                        "[[rs(2).row]] = best"});
            table2076.AddRow(new string[] {
                        "[[rs(3).row]] = so far"});
            table2076.AddRow(new string[] {
                        "[[rs(4).row]] = the"});
            table2076.AddRow(new string[] {
                        "[[rs(5).row]] = user"});
            table2076.AddRow(new string[] {
                        "[[rs(6).row]] = Warewolf"});
            table2076.AddRow(new string[] {
                        "[[rs(7).row]] = You"});
#line 38
 testRunner.And("the debug output as", ((string)(null)), table2076, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset backwards using star notation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        public virtual void SortARecordsetBackwardsUsingStarNotation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset backwards using star notation", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2077 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2077.AddRow(new string[] {
                        "rs().row",
                        "You"});
            table2077.AddRow(new string[] {
                        "rs().row",
                        "are"});
            table2077.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table2077.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table2077.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table2077.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table2077.AddRow(new string[] {
                        "rs().row",
                        "so far"});
#line 49
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table2077, "Given ");
#line 58
 testRunner.And("I sort a record \"[[rs(*).row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
 testRunner.And("my sort order is \"Backwards\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2078 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2078.AddRow(new string[] {
                        "rs().row",
                        "You"});
            table2078.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table2078.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table2078.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table2078.AddRow(new string[] {
                        "rs().row",
                        "so far"});
            table2078.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table2078.AddRow(new string[] {
                        "rs().row",
                        "are"});
#line 61
 testRunner.Then("the sorted recordset \"[[rs(*).row]]\"  will be", ((string)(null)), table2078, "Then ");
#line 70
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2079 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table2079.AddRow(new string[] {
                        "[[rs(1).row]] = You",
                        ""});
            table2079.AddRow(new string[] {
                        "[[rs(2).row]] = are",
                        ""});
            table2079.AddRow(new string[] {
                        "[[rs(3).row]] = the",
                        ""});
            table2079.AddRow(new string[] {
                        "[[rs(4).row]] = best",
                        ""});
            table2079.AddRow(new string[] {
                        "[[rs(5).row]] = Warewolf",
                        ""});
            table2079.AddRow(new string[] {
                        "[[rs(6).row]] = user",
                        ""});
            table2079.AddRow(new string[] {
                        "[[rs(7).row]] = so far",
                        "Backwards"});
#line 71
 testRunner.And("the debug inputs as", ((string)(null)), table2079, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2080 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2080.AddRow(new string[] {
                        "[[rs(1).row]] = You"});
            table2080.AddRow(new string[] {
                        "[[rs(2).row]] = Warewolf"});
            table2080.AddRow(new string[] {
                        "[[rs(3).row]] = user"});
            table2080.AddRow(new string[] {
                        "[[rs(4).row]] = the"});
            table2080.AddRow(new string[] {
                        "[[rs(5).row]] = so far"});
            table2080.AddRow(new string[] {
                        "[[rs(6).row]] = best"});
            table2080.AddRow(new string[] {
                        "[[rs(7).row]] = are"});
#line 80
 testRunner.And("the debug output as", ((string)(null)), table2080, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset forwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        public virtual void SortARecordsetForwards()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset forwards", ((string[])(null)));
#line 90
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2081 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2081.AddRow(new string[] {
                        "rs().row",
                        "You"});
            table2081.AddRow(new string[] {
                        "rs().row",
                        "are"});
            table2081.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table2081.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table2081.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table2081.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table2081.AddRow(new string[] {
                        "rs().row",
                        "so far"});
#line 91
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table2081, "Given ");
#line 100
 testRunner.And("I sort a record \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
 testRunner.And("my sort order is \"Forward\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2082 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2082.AddRow(new string[] {
                        "rs().row",
                        "are"});
            table2082.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table2082.AddRow(new string[] {
                        "rs().row",
                        "so far"});
            table2082.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table2082.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table2082.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table2082.AddRow(new string[] {
                        "rs().row",
                        "You"});
#line 103
 testRunner.Then("the sorted recordset \"[[rs(*).row]]\"  will be", ((string)(null)), table2082, "Then ");
#line 112
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2083 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table2083.AddRow(new string[] {
                        "[[rs(1).row]] = You",
                        ""});
            table2083.AddRow(new string[] {
                        "[[rs(2).row]] = are",
                        ""});
            table2083.AddRow(new string[] {
                        "[[rs(3).row]] = the",
                        ""});
            table2083.AddRow(new string[] {
                        "[[rs(4).row]] = best",
                        ""});
            table2083.AddRow(new string[] {
                        "[[rs(5).row]] = Warewolf",
                        ""});
            table2083.AddRow(new string[] {
                        "[[rs(6).row]] = user",
                        ""});
            table2083.AddRow(new string[] {
                        "[[rs(7).row]] = so far",
                        "Forward"});
#line 113
 testRunner.And("the debug inputs as", ((string)(null)), table2083, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2084 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2084.AddRow(new string[] {
                        "[[rs(1).row]] = are"});
            table2084.AddRow(new string[] {
                        "[[rs(2).row]] = best"});
            table2084.AddRow(new string[] {
                        "[[rs(3).row]] = so far"});
            table2084.AddRow(new string[] {
                        "[[rs(4).row]] = the"});
            table2084.AddRow(new string[] {
                        "[[rs(5).row]] = user"});
            table2084.AddRow(new string[] {
                        "[[rs(6).row]] = Warewolf"});
            table2084.AddRow(new string[] {
                        "[[rs(7).row]] = You"});
#line 122
 testRunner.And("the debug output as", ((string)(null)), table2084, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset backwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        public virtual void SortARecordsetBackwards()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset backwards", ((string[])(null)));
#line 132
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2085 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2085.AddRow(new string[] {
                        "rs().row",
                        "You"});
            table2085.AddRow(new string[] {
                        "rs().row",
                        "are"});
            table2085.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table2085.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table2085.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table2085.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table2085.AddRow(new string[] {
                        "rs().row",
                        "so far"});
#line 133
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table2085, "Given ");
#line 142
 testRunner.And("I sort a record \"[[rs(*).row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 143
 testRunner.And("my sort order is \"Backwards\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2086 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2086.AddRow(new string[] {
                        "rs().row",
                        "You"});
            table2086.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
            table2086.AddRow(new string[] {
                        "rs().row",
                        "user"});
            table2086.AddRow(new string[] {
                        "rs().row",
                        "the"});
            table2086.AddRow(new string[] {
                        "rs().row",
                        "so far"});
            table2086.AddRow(new string[] {
                        "rs().row",
                        "best"});
            table2086.AddRow(new string[] {
                        "rs().row",
                        "are"});
#line 145
 testRunner.Then("the sorted recordset \"[[rs(*).row]]\"  will be", ((string)(null)), table2086, "Then ");
#line 154
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2087 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table2087.AddRow(new string[] {
                        "[[rs(1).row]] = You",
                        ""});
            table2087.AddRow(new string[] {
                        "[[rs(2).row]] = are",
                        ""});
            table2087.AddRow(new string[] {
                        "[[rs(3).row]] = the",
                        ""});
            table2087.AddRow(new string[] {
                        "[[rs(4).row]] = best",
                        ""});
            table2087.AddRow(new string[] {
                        "[[rs(5).row]] = Warewolf",
                        ""});
            table2087.AddRow(new string[] {
                        "[[rs(6).row]] = user",
                        ""});
            table2087.AddRow(new string[] {
                        "[[rs(7).row]] = so far",
                        "Backwards"});
#line 155
 testRunner.And("the debug inputs as", ((string)(null)), table2087, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2088 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2088.AddRow(new string[] {
                        "[[rs(1).row]] = You"});
            table2088.AddRow(new string[] {
                        "[[rs(2).row]] = Warewolf"});
            table2088.AddRow(new string[] {
                        "[[rs(3).row]] = user"});
            table2088.AddRow(new string[] {
                        "[[rs(4).row]] = the"});
            table2088.AddRow(new string[] {
                        "[[rs(5).row]] = so far"});
            table2088.AddRow(new string[] {
                        "[[rs(6).row]] = best"});
            table2088.AddRow(new string[] {
                        "[[rs(7).row]] = are"});
#line 164
 testRunner.And("the debug output as", ((string)(null)), table2088, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset forwards empty recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        public virtual void SortARecordsetForwardsEmptyRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset forwards empty recordset", ((string[])(null)));
#line 174
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2089 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
#line 175
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table2089, "Given ");
#line 177
 testRunner.And("I sort a record \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
 testRunner.And("my sort order is \"Forward\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 180
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset backwards empty recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        public virtual void SortARecordsetBackwardsEmptyRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset backwards empty recordset", ((string[])(null)));
#line 183
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2090 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
#line 184
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table2090, "Given ");
#line 186
 testRunner.And("I sort a record \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 187
 testRunner.And("my sort order is \"Backwards\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 188
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 189
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset forwards with one row")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        public virtual void SortARecordsetForwardsWithOneRow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset forwards with one row", ((string[])(null)));
#line 191
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2091 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2091.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
#line 192
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table2091, "Given ");
#line 195
 testRunner.And("I sort a record \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 196
 testRunner.And("my sort order is \"Forward\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 197
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2092 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2092.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
#line 198
 testRunner.Then("the sorted recordset \"[[rs(*).row]]\"  will be", ((string)(null)), table2092, "Then ");
#line 201
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2093 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table2093.AddRow(new string[] {
                        "[[rs(1).row]] = Warewolf",
                        "Forward"});
#line 202
 testRunner.And("the debug inputs as", ((string)(null)), table2093, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2094 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2094.AddRow(new string[] {
                        "[[rs(1).row]] = Warewolf"});
#line 205
 testRunner.And("the debug output as", ((string)(null)), table2094, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort a recordset backwards recordset  with one row")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        public virtual void SortARecordsetBackwardsRecordsetWithOneRow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort a recordset backwards recordset  with one row", ((string[])(null)));
#line 209
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2095 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2095.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
#line 210
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table2095, "Given ");
#line 213
 testRunner.And("I sort a record \"[[rs().row]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 214
 testRunner.And("my sort order is \"Backwards\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 215
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2096 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2096.AddRow(new string[] {
                        "rs().row",
                        "Warewolf"});
#line 216
 testRunner.Then("the sorted recordset \"[[rs(*).row]]\"  will be", ((string)(null)), table2096, "Then ");
#line 219
 testRunner.And("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2097 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table2097.AddRow(new string[] {
                        "[[rs(1).row]] = Warewolf",
                        "Backwards"});
#line 220
 testRunner.And("the debug inputs as", ((string)(null)), table2097, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2098 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table2098.AddRow(new string[] {
                        "[[rs(1).row]] = Warewolf"});
#line 223
 testRunner.And("the debug output as", ((string)(null)), table2098, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void Sort2ColumnsBackwards(string input, string direction, string error, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort 2 columns backwards", exampleTags);
#line 227
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2099 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2099.AddRow(new string[] {
                        "rs().a",
                        "Zambia"});
            table2099.AddRow(new string[] {
                        "rs().a",
                        "Mangolia"});
            table2099.AddRow(new string[] {
                        "rs().a",
                        "America"});
            table2099.AddRow(new string[] {
                        "rs().a",
                        "Australia"});
#line 228
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table2099, "Given ");
#line 234
 testRunner.And(string.Format("I sort a record \"{0}\"", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 235
 testRunner.And(string.Format("my sort order is \"{0}\"", direction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 237
 testRunner.Then(string.Format("the execution has \'{0}\' error", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[rs(*).a]],[[rs(*).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Backwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant0()
        {
            this.Sort2ColumnsBackwards("[[rs(*).a]],[[rs(*).a]]", "Backwards", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[rs(*).a]],[[rs(*).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant1()
        {
            this.Sort2ColumnsBackwards("[[rs(*).a]],[[rs(*).a]]", "Forward", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[rs(*)]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Backwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant2()
        {
            this.Sort2ColumnsBackwards("[[rs(*)]]", "Backwards", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[rs(*)]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant3()
        {
            this.Sort2ColumnsBackwards("[[rs(*)]]", "Forward", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[va]] = tree")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant4()
        {
            this.Sort2ColumnsBackwards("[[va]] = tree", "Forward", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant5()
        {
            this.Sort2ColumnsBackwards("\"\"", "Forward", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "asdas")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant6()
        {
            this.Sort2ColumnsBackwards("asdas", "Forward", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "99")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant7()
        {
            this.Sort2ColumnsBackwards("99", "Forward", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort 2 columns backwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "Only recordsets that contain recordset columns can be sorted")]
        public virtual void Sort2ColumnsBackwards_Variant8()
        {
            this.Sort2ColumnsBackwards("[[a]]", "Forward", "Only recordsets that contain recordset columns can be sorted", ((string[])(null)));
        }
        
        public virtual void SortRecordset(string input, string direction, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort recordset", @__tags);
#line 252
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2100 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2100.AddRow(new string[] {
                        "rs().a",
                        "Zambia"});
            table2100.AddRow(new string[] {
                        "rs().a",
                        "Mangolia"});
            table2100.AddRow(new string[] {
                        "rs().a",
                        "America"});
            table2100.AddRow(new string[] {
                        "rs().a",
                        "Australia"});
#line 253
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table2100, "Given ");
#line 259
 testRunner.And(string.Format("I sort a record \"{0}\"", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 260
 testRunner.And(string.Format("my sort order is \"{0}\"", direction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 261
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 262
 testRunner.Then("the execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "[[rs(1).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[rs(1).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:result", "Mongolia,Zambia")]
        public virtual void SortRecordset_Rs1_A()
        {
            this.SortRecordset("[[rs(1).a]]", "Forward", "Mongolia,Zambia", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "[[rs([[int]]).a]], [[int]] = 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[rs([[int]]).a]], [[int]] = 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:result", "America, Australia")]
        public virtual void SortRecordset_RsInt_AInt2()
        {
            this.SortRecordset("[[rs([[int]]).a]], [[int]] = 2", "Forward", "America, Australia", ((string[])(null)));
        }
        
        public virtual void SortRecordsetUsingComplexTypes(string input, string direction, string error, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort recordset using complex types", @__tags);
#line 271
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2101 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2101.AddRow(new string[] {
                        "rs().rec().a",
                        "Zambia"});
            table2101.AddRow(new string[] {
                        "rs().rec().a",
                        "Mangolia"});
            table2101.AddRow(new string[] {
                        "rs().rec().a",
                        "America"});
            table2101.AddRow(new string[] {
                        "rs().rec().a",
                        "Australia"});
#line 272
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table2101, "Given ");
#line 278
 testRunner.And(string.Format("I sort a record \"{0}\"", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 279
 testRunner.And(string.Format("my sort order is \"{0}\"", direction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 280
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 281
 testRunner.Then(string.Format("the execution has \"{0}\" error", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort recordset using complex types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "[[rs().rec(1).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:input", "[[rs().rec(1).a]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:direction", "Forward")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:error", "No")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:result", "Mongolia,Zambia")]
        public virtual void SortRecordsetUsingComplexTypes_Rs_Rec1_A()
        {
            this.SortRecordsetUsingComplexTypes("[[rs().rec(1).a]]", "Forward", "No", "Mongolia,Zambia", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort Recordset without field Forwards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        public virtual void SortRecordsetWithoutFieldForwards()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort Recordset without field Forwards", ((string[])(null)));
#line 286
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2102 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2102.AddRow(new string[] {
                        "rs(1).a",
                        "Zambia"});
            table2102.AddRow(new string[] {
                        "rec(1).a",
                        "Mangolia"});
            table2102.AddRow(new string[] {
                        "rs(2).a",
                        "America"});
            table2102.AddRow(new string[] {
                        "rec(2).a",
                        "Australia"});
#line 287
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table2102, "Given ");
#line 293
 testRunner.And("I sort a record \"[[rs(*)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 294
 testRunner.And("my sort order is \"Forward\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 295
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 296
 testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort Null Recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        public virtual void SortNullRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort Null Recordset", ((string[])(null)));
#line 299
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2103 = new TechTalk.SpecFlow.Table(new string[] {
                        "rs",
                        "value"});
            table2103.AddRow(new string[] {
                        "[[rs().a]]",
                        "NULL"});
#line 300
 testRunner.Given("I have the following recordset to sort", ((string)(null)), table2103, "Given ");
#line 303
 testRunner.And("I sort a record \"[[rs(*).a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 304
 testRunner.And("my sort order is \"Backwards\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 305
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 306
 testRunner.Then("the execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sort non existent Recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sort")]
        public virtual void SortNonExistentRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort non existent Recordset", ((string[])(null)));
#line 309
 this.ScenarioSetup(scenarioInfo);
#line 310
 testRunner.Given("I sort a record \"[[rs(*)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 311
 testRunner.And("my sort order is \"Backwards\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 312
 testRunner.When("the sort records tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 313
 testRunner.Then("the execution has \"An\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
