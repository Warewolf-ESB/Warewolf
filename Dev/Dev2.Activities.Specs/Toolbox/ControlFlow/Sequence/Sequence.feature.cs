// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dev2.Activities.Specs.Toolbox.ControlFlow.Sequence
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SequenceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Sequence.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Sequence", "In order to execute sequence \r\nAs a Warewolf user\r\nI want to a tool that will all" +
                    "ow me to construct and execute tools and services in sequence", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Sequence")))
            {
                Dev2.Activities.Specs.Toolbox.ControlFlow.Sequence.SequenceFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute Sequence with Assign")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteSequenceWithAssign()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute Sequence with Assign", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
          testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1074 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table1074.AddRow(new string[] {
                        "[[var1]]",
                        "1"});
            table1074.AddRow(new string[] {
                        "[[var2]]",
                        "2"});
#line 8
          testRunner.And("\"Test\" contains an Assign \"TestAssign\" as", ((string)(null)), table1074, "And ");
#line 12
          testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
          testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1075 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table1075.AddRow(new string[] {
                        "1",
                        "[[var1]] =",
                        "1"});
            table1075.AddRow(new string[] {
                        "2",
                        "[[var2]] =",
                        "2"});
#line 14
          testRunner.And("the \"TestAssign\" debug inputs as", ((string)(null)), table1075, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1076 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1076.AddRow(new string[] {
                        "1",
                        "[[var1]] = 1"});
            table1076.AddRow(new string[] {
                        "2",
                        "[[var2]] = 2"});
#line 18
          testRunner.And("the \"TestAssign\" debug outputs as", ((string)(null)), table1076, "And ");
#line 22
    testRunner.And("the Sequence Has a Duration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign and Calculate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteASequenceWithAssignAndCalculate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign and Calculate", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
       testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1077 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table1077.AddRow(new string[] {
                        "[[var1]]",
                        "1"});
            table1077.AddRow(new string[] {
                        "[[var2]]",
                        "2"});
#line 25
    testRunner.And("\"Test\" contains an Assign \"SetVariables\" as", ((string)(null)), table1077, "And ");
#line 29
       testRunner.And("\"Test\" contains Calculate \"Calculate Sum\" with formula \"[[var1]]+[[var2]]\" into \"" +
                    "[[result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
       testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
       testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1078 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table1078.AddRow(new string[] {
                        "1",
                        "[[var1]] =",
                        "1"});
            table1078.AddRow(new string[] {
                        "2",
                        "[[var2]] =",
                        "2"});
#line 32
       testRunner.And("the \"SetVariables\" debug inputs as", ((string)(null)), table1078, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1079 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1079.AddRow(new string[] {
                        "1",
                        "[[var1]] = 1"});
            table1079.AddRow(new string[] {
                        "2",
                        "[[var2]] = 2"});
#line 36
       testRunner.And("the \"SetVariables\" debug outputs as", ((string)(null)), table1079, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1080 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table1080.AddRow(new string[] {
                        "[[var1]]+[[var2]] = 1+2"});
#line 40
       testRunner.And("the \"Calculate Sum\" debug inputs as", ((string)(null)), table1080, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1081 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1081.AddRow(new string[] {
                        "[[result]] = 3"});
#line 43
       testRunner.And("the \"Calculate Sum\" debug outputs as", ((string)(null)), table1081, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign and Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteASequenceWithAssignAndCount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign and Count", ((string[])(null)));
#line 47
 this.ScenarioSetup(scenarioInfo);
#line 48
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1082 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table1082.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "1"});
            table1082.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "2"});
            table1082.AddRow(new string[] {
                        "[[rec(3).a]]",
                        "3"});
            table1082.AddRow(new string[] {
                        "[[rec(4).a]]",
                        "4"});
#line 49
   testRunner.And("\"Test\" contains an Assign \"Records\" as", ((string)(null)), table1082, "And ");
#line 55
   testRunner.And("\"Test\" contains Count Record \"Count\" on \"[[rec()]]\" into \"[[result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
   testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
      testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1083 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table1083.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "1"});
            table1083.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =",
                        "2"});
            table1083.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =",
                        "3"});
            table1083.AddRow(new string[] {
                        "4",
                        "[[rec(4).a]] =",
                        "4"});
#line 58
   testRunner.And("the \"Records\" debug inputs as", ((string)(null)), table1083, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1084 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1084.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =  1"});
            table1084.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =  2"});
            table1084.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =  3"});
            table1084.AddRow(new string[] {
                        "4",
                        "[[rec(4).a]] =  4"});
#line 64
   testRunner.And("the \"Records\" debug outputs as", ((string)(null)), table1084, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1085 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table1085.AddRow(new string[] {
                        "[[rec(1).a]] = 1"});
            table1085.AddRow(new string[] {
                        "[[rec(2).a]] = 2"});
            table1085.AddRow(new string[] {
                        "[[rec(3).a]] = 3"});
            table1085.AddRow(new string[] {
                        "[[rec(4).a]] = 4"});
#line 70
   testRunner.And("the \"Count\" debug inputs as", ((string)(null)), table1085, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1086 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1086.AddRow(new string[] {
                        "[[result]] = 4"});
#line 76
   testRunner.And("the \"Count\" debug outputs as", ((string)(null)), table1086, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign and Delete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteASequenceWithAssignAndDelete()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign and Delete", ((string[])(null)));
#line 80
this.ScenarioSetup(scenarioInfo);
#line 81
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1087 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table1087.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "1"});
            table1087.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "2"});
            table1087.AddRow(new string[] {
                        "[[rec(3).a]]",
                        "3"});
            table1087.AddRow(new string[] {
                        "[[rec(4).a]]",
                        "4"});
#line 82
   testRunner.And("\"Test\" contains an Assign \"All Records\" as", ((string)(null)), table1087, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1088 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "result"});
            table1088.AddRow(new string[] {
                        "[[rec(2)]]",
                        "[[result]]"});
#line 88
   testRunner.And("\"Test\" contains Delete \"Delete Record\" as", ((string)(null)), table1088, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1089 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table1089.AddRow(new string[] {
                        "[[check]]",
                        "[[rec(2).a]]"});
#line 91
      testRunner.And("\"Test\" contains an Assign \"Delete check\" as", ((string)(null)), table1089, "And ");
#line 94
   testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 95
      testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1090 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table1090.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "1"});
            table1090.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =",
                        "2"});
            table1090.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =",
                        "3"});
            table1090.AddRow(new string[] {
                        "4",
                        "[[rec(4).a]] =",
                        "4"});
#line 96
   testRunner.And("the \"All Records\" debug inputs as", ((string)(null)), table1090, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1091 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1091.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 1"});
            table1091.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 2"});
            table1091.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] = 3"});
            table1091.AddRow(new string[] {
                        "4",
                        "[[rec(4).a]] = 4"});
#line 102
   testRunner.And("the \"All Records\" debug outputs as", ((string)(null)), table1091, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1092 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table1092.AddRow(new string[] {
                        "[[rec(2).a]] = 2"});
#line 108
   testRunner.And("the \"Delete Record\" debug inputs as", ((string)(null)), table1092, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1093 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1093.AddRow(new string[] {
                        "[[result]] = Success"});
#line 111
   testRunner.And("the \"Delete Record\" debug outputs as", ((string)(null)), table1093, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign and Find Record Index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteASequenceWithAssignAndFindRecordIndex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign and Find Record Index", ((string[])(null)));
#line 117
this.ScenarioSetup(scenarioInfo);
#line 118
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1094 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table1094.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "1"});
            table1094.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "2"});
            table1094.AddRow(new string[] {
                        "[[rec(3).a]]",
                        "3"});
            table1094.AddRow(new string[] {
                        "[[rec(4).a]]",
                        "4"});
#line 119
   testRunner.And("\"Test\" contains an Assign \"Assign Records\" as", ((string)(null)), table1094, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1095 = new TechTalk.SpecFlow.Table(new string[] {
                        "Match Type",
                        "Match"});
            table1095.AddRow(new string[] {
                        "=",
                        "1"});
#line 125
   testRunner.And("\"Test\" contains Find Record Index \"Find Record\" search \"[[rec().a]]\" and result \"" +
                    "[[result]]\" as", ((string)(null)), table1095, "And ");
#line 128
   testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 129
      testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1096 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table1096.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "1"});
            table1096.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =",
                        "2"});
            table1096.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =",
                        "3"});
            table1096.AddRow(new string[] {
                        "4",
                        "[[rec(4).a]] =",
                        "4"});
#line 130
   testRunner.And("the \"Assign Records\" debug inputs as", ((string)(null)), table1096, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1097 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1097.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 1"});
            table1097.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 2"});
            table1097.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] = 3"});
            table1097.AddRow(new string[] {
                        "4",
                        "[[rec(4).a]] = 4"});
#line 136
   testRunner.And("the \"Assign Records\" debug outputs as", ((string)(null)), table1097, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1098 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table1098.AddRow(new string[] {
                        "In Field(s)",
                        "[[rec(1).a]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1098.AddRow(new string[] {
                        "",
                        "[[rec(2).a]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1098.AddRow(new string[] {
                        "",
                        "[[rec(3).a]] = 3",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1098.AddRow(new string[] {
                        "",
                        "[[rec(4).a]] = 4",
                        "1",
                        "=",
                        "1",
                        "",
                        "NO",
                        "NO"});
#line 142
   testRunner.And("the \"Find Record\" debug inputs as", ((string)(null)), table1098, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1099 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1099.AddRow(new string[] {
                        "[[result]] = 1"});
#line 148
   testRunner.And("the \"Find Record\" debug outputs as", ((string)(null)), table1099, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign and Unique Records")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteASequenceWithAssignAndUniqueRecords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign and Unique Records", ((string[])(null)));
#line 153
this.ScenarioSetup(scenarioInfo);
#line 154
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1100 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table1100.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "11"});
            table1100.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "11"});
            table1100.AddRow(new string[] {
                        "[[rec(3).a]]",
                        "11"});
            table1100.AddRow(new string[] {
                        "[[rec(4).a]]",
                        "12"});
            table1100.AddRow(new string[] {
                        "[[rec(5).a]]",
                        "12"});
            table1100.AddRow(new string[] {
                        "[[rec(6).a]]",
                        "13"});
            table1100.AddRow(new string[] {
                        "[[rec(7).a]]",
                        "13"});
            table1100.AddRow(new string[] {
                        "[[rec(8).a]]",
                        "13"});
#line 155
   testRunner.And("\"Test\" contains an Assign \"Assign data\" as", ((string)(null)), table1100, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1101 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Return Fields",
                        "Result"});
            table1101.AddRow(new string[] {
                        "[[rec(*).a]]",
                        "[[rec().a]]",
                        "[[rec().unique]]"});
#line 165
      testRunner.And("\"Test\" contains find unique \"Unique\" as", ((string)(null)), table1101, "And ");
#line 168
      testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 169
   testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1102 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table1102.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "11"});
            table1102.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =",
                        "11"});
            table1102.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =",
                        "11"});
            table1102.AddRow(new string[] {
                        "4",
                        "[[rec(4).a]] =",
                        "12"});
            table1102.AddRow(new string[] {
                        "5",
                        "[[rec(5).a]] =",
                        "12"});
            table1102.AddRow(new string[] {
                        "6",
                        "[[rec(6).a]] =",
                        "13"});
            table1102.AddRow(new string[] {
                        "7",
                        "[[rec(7).a]] =",
                        "13"});
            table1102.AddRow(new string[] {
                        "8",
                        "[[rec(8).a]] =",
                        "13"});
#line 170
   testRunner.And("the \"Assign data\" debug inputs as", ((string)(null)), table1102, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1103 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1103.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =  11"});
            table1103.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =  11"});
            table1103.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =  11"});
            table1103.AddRow(new string[] {
                        "4",
                        "[[rec(4).a]] =  12"});
            table1103.AddRow(new string[] {
                        "5",
                        "[[rec(5).a]] =  12"});
            table1103.AddRow(new string[] {
                        "6",
                        "[[rec(6).a]] =  13"});
            table1103.AddRow(new string[] {
                        "7",
                        "[[rec(7).a]] =  13"});
            table1103.AddRow(new string[] {
                        "8",
                        "[[rec(8).a]] =  13"});
#line 180
   testRunner.And("the \"Assign data\" debug outputs as", ((string)(null)), table1103, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1104 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table1104.AddRow(new string[] {
                        "In Field(s)",
                        "[[rec(1).a]] = 11",
                        ""});
            table1104.AddRow(new string[] {
                        "",
                        "[[rec(2).a]] = 11",
                        ""});
            table1104.AddRow(new string[] {
                        "",
                        "[[rec(3).a]] = 11",
                        ""});
            table1104.AddRow(new string[] {
                        "",
                        "[[rec(4).a]] = 12",
                        ""});
            table1104.AddRow(new string[] {
                        "",
                        "[[rec(5).a]] = 12",
                        ""});
            table1104.AddRow(new string[] {
                        "",
                        "[[rec(6).a]] = 13",
                        ""});
            table1104.AddRow(new string[] {
                        "",
                        "[[rec(7).a]] = 13",
                        ""});
            table1104.AddRow(new string[] {
                        "",
                        "[[rec(8).a]] = 13",
                        "[[rec().a]]  ="});
#line 190
   testRunner.And("the \"Unique\" debug inputs as", ((string)(null)), table1104, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1105 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1105.AddRow(new string[] {
                        "1",
                        "[[rec(1).unique]] ="});
            table1105.AddRow(new string[] {
                        "",
                        "[[rec(2).unique]] ="});
            table1105.AddRow(new string[] {
                        "",
                        "[[rec(3).unique]] ="});
            table1105.AddRow(new string[] {
                        "",
                        "[[rec(4).unique]] ="});
            table1105.AddRow(new string[] {
                        "",
                        "[[rec(5).unique]] ="});
            table1105.AddRow(new string[] {
                        "",
                        "[[rec(6).unique]] ="});
            table1105.AddRow(new string[] {
                        "",
                        "[[rec(7).unique]] ="});
            table1105.AddRow(new string[] {
                        "",
                        "[[rec(8).unique]] ="});
            table1105.AddRow(new string[] {
                        "",
                        "[[rec(9).unique]] = 11"});
            table1105.AddRow(new string[] {
                        "",
                        "[[rec(10).unique]] = 12"});
            table1105.AddRow(new string[] {
                        "",
                        "!!MoreLink!!"});
#line 200
   testRunner.And("the \"Unique\" debug outputs as", ((string)(null)), table1105, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign, Base Convert and Case Convert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteASequenceWithAssignBaseConvertAndCaseConvert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign, Base Convert and Case Convert", ((string[])(null)));
#line 217
this.ScenarioSetup(scenarioInfo);
#line 218
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1106 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table1106.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "0x4141"});
            table1106.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "warewolf"});
#line 219
   testRunner.And("\"Test\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table1106, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1107 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table1107.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "UPPER"});
#line 223
      testRunner.And("\"Test\" contains case convert \"Case Convert\" as", ((string)(null)), table1107, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1108 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table1108.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Hex",
                        "Binary"});
#line 226
   testRunner.And("\"Test\" contains Base convert \"Base Convert\" as", ((string)(null)), table1108, "And ");
#line 229
   testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 230
   testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1109 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table1109.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "0x4141"});
            table1109.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =",
                        "warewolf"});
#line 231
   testRunner.And("the \"Rec To Convert\" debug inputs as", ((string)(null)), table1109, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1110 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1110.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 0x4141"});
            table1110.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = warewolf"});
#line 235
   testRunner.And("the \"Rec To Convert\" debug outputs as", ((string)(null)), table1110, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1111 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table1111.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = warewolf",
                        "UPPER"});
#line 239
   testRunner.And("the \"Case Convert\" debug inputs as", ((string)(null)), table1111, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1112 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1112.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = WAREWOLF"});
#line 242
   testRunner.And("the \"Case Convert\" debug outputs as", ((string)(null)), table1112, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1113 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table1113.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 0x4141",
                        "Hex",
                        "Binary"});
#line 245
   testRunner.And("the \"Base Convert\" debug inputs as", ((string)(null)), table1113, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1114 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1114.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 0100000101000001"});
#line 248
   testRunner.And("the \"Base Convert\" debug outputs as", ((string)(null)), table1114, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign, Data Merge and Data Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteASequenceWithAssignDataMergeAndDataSplit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign, Data Merge and Data Split", ((string[])(null)));
#line 252
this.ScenarioSetup(scenarioInfo);
#line 253
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1115 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table1115.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "test"});
            table1115.AddRow(new string[] {
                        "[[rec(2).b]]",
                        "nothing"});
            table1115.AddRow(new string[] {
                        "[[rec(3).a]]",
                        "warewolf"});
            table1115.AddRow(new string[] {
                        "[[rec(4).b]]",
                        "nothing"});
#line 254
   testRunner.And("\"Test\" contains an Assign \"Assign To Merge\" as", ((string)(null)), table1115, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1116 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table1116.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
            table1116.AddRow(new string[] {
                        "[[rec(3).a]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
#line 260
      testRunner.And("\"Test\" contains Data Merge \"Data Merge\" into \"[[result]]\" as", ((string)(null)), table1116, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1117 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table1117.AddRow(new string[] {
                        "testwarewolf",
                        "[[rec(2).b]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table1117.AddRow(new string[] {
                        "",
                        "[[rec(4).b]]",
                        "Index",
                        "8",
                        "Unselected",
                        ""});
#line 264
   testRunner.And("\"Test\" contains Data Split \"Data Split\" as", ((string)(null)), table1117, "And ");
#line 268
   testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 269
   testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1118 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table1118.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "test"});
            table1118.AddRow(new string[] {
                        "2",
                        "[[rec(2).b]] =",
                        "nothing"});
            table1118.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =",
                        "warewolf"});
            table1118.AddRow(new string[] {
                        "4",
                        "[[rec(4).b]] =",
                        "nothing"});
#line 270
   testRunner.And("the \"Assign To Merge\" debug inputs as", ((string)(null)), table1118, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1119 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1119.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =  test"});
            table1119.AddRow(new string[] {
                        "2",
                        "[[rec(2).b]] = nothing"});
            table1119.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =  warewolf"});
            table1119.AddRow(new string[] {
                        "4",
                        "[[rec(4).b]] =  nothing"});
#line 276
   testRunner.And("the \"Assign To Merge\" debug outputs as", ((string)(null)), table1119, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1120 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table1120.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =  test",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
            table1120.AddRow(new string[] {
                        "2",
                        "[[rec(3).a]] =  warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
#line 282
   testRunner.And("the \"Data Merge\" debug inputs as", ((string)(null)), table1120, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1121 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1121.AddRow(new string[] {
                        "[[result]] = testwarewolf"});
#line 286
   testRunner.And("the \"Data Merge\" debug outputs as", ((string)(null)), table1121, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1122 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table1122.AddRow(new string[] {
                        "testwarewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[rec(2).b]] = nothing",
                        "Index",
                        "4",
                        "No",
                        ""});
            table1122.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[rec(4).b]] = nothing",
                        "Index",
                        "8",
                        "No",
                        ""});
#line 289
   testRunner.And("the \"Data Split\" debug inputs as", ((string)(null)), table1122, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1123 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1123.AddRow(new string[] {
                        "1",
                        "[[rec(2).b]] = test"});
            table1123.AddRow(new string[] {
                        "2",
                        "[[rec(4).b]] = warewolf"});
#line 293
   testRunner.And("the \"Data Split\" debug outputs as", ((string)(null)), table1123, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign, Data Merge, Data Split, Find Index and Replace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteASequenceWithAssignDataMergeDataSplitFindIndexAndReplace()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign, Data Merge, Data Split, Find Index and Replace", ((string[])(null)));
#line 299
this.ScenarioSetup(scenarioInfo);
#line 300
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1124 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table1124.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "test"});
            table1124.AddRow(new string[] {
                        "[[rec(1).b]]",
                        "nothing"});
            table1124.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "warewolf"});
            table1124.AddRow(new string[] {
                        "[[rec(2).b]]",
                        "nothing"});
#line 301
   testRunner.And("\"Test\" contains an Assign \"Assign To Merge\" as", ((string)(null)), table1124, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1125 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table1125.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
            table1125.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
#line 307
   testRunner.And("\"Test\" contains Data Merge \"Data Merge\" into \"[[result]]\" as", ((string)(null)), table1125, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1126 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table1126.AddRow(new string[] {
                        "testwarewolf",
                        "[[rec(1).b]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table1126.AddRow(new string[] {
                        "",
                        "[[rec(2).b]]",
                        "Index",
                        "8",
                        "Unselected",
                        ""});
#line 311
   testRunner.And("\"Test\" contains Data Split \"Data Split\" as", ((string)(null)), table1126, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1127 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Index",
                        "Character",
                        "Direction"});
            table1127.AddRow(new string[] {
                        "[[rec().a]]",
                        "First Occurence",
                        "e",
                        "Left to Right"});
#line 315
   testRunner.And("\"Test\" contains Find Index \"Index\" into \"[[indexResult]]\" as", ((string)(null)), table1127, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1128 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table1128.AddRow(new string[] {
                        "[[rec(*)]]",
                        "e",
                        "REPLACED"});
#line 318
   testRunner.And("\"Test\" contains Replace \"Replacing\" into \"[[replaceResult]]\" as", ((string)(null)), table1128, "And ");
#line 321
   testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 322
   testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1129 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table1129.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "test"});
            table1129.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] =",
                        "nothing"});
            table1129.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]] =",
                        "warewolf"});
            table1129.AddRow(new string[] {
                        "4",
                        "[[rec(2).b]] =",
                        "nothing"});
#line 323
   testRunner.And("the \"Assign To Merge\" debug inputs as", ((string)(null)), table1129, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1130 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1130.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = test"});
            table1130.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = nothing"});
            table1130.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]] = warewolf"});
            table1130.AddRow(new string[] {
                        "4",
                        "[[rec(2).b]] = nothing"});
#line 329
   testRunner.And("the \"Assign To Merge\" debug outputs as", ((string)(null)), table1130, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1131 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table1131.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = test",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
            table1131.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
#line 335
   testRunner.And("the \"Data Merge\" debug inputs as", ((string)(null)), table1131, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1132 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1132.AddRow(new string[] {
                        "[[result]] = testwarewolf"});
#line 339
   testRunner.And("the \"Data Merge\" debug outputs as", ((string)(null)), table1132, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1133 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table1133.AddRow(new string[] {
                        "testwarewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[rec(1).b]] = nothing",
                        "Index",
                        "4",
                        "No",
                        ""});
            table1133.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[rec(2).b]] = nothing",
                        "Index",
                        "8",
                        "No",
                        ""});
#line 342
   testRunner.And("the \"Data Split\" debug inputs as", ((string)(null)), table1133, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1134 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1134.AddRow(new string[] {
                        "1",
                        "[[rec(1).b]] = test"});
            table1134.AddRow(new string[] {
                        "2",
                        "[[rec(2).b]] = warewolf"});
#line 346
   testRunner.And("the \"Data Split\" debug outputs as", ((string)(null)), table1134, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1135 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table1135.AddRow(new string[] {
                        "[[rec(2).a]] = warewolf",
                        "First Occurence",
                        "e",
                        "Left to Right"});
#line 350
      testRunner.And("the \"Index\" debug inputs as", ((string)(null)), table1135, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1136 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1136.AddRow(new string[] {
                        "[[indexResult]] = 4"});
#line 353
   testRunner.And("the \"Index\" debug outputs as", ((string)(null)), table1136, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1137 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table1137.AddRow(new string[] {
                        "[[rec(1).a]] = test",
                        "",
                        ""});
            table1137.AddRow(new string[] {
                        "[[rec(2).a]] = warewolf",
                        "",
                        ""});
            table1137.AddRow(new string[] {
                        "[[rec(1).b]] = test",
                        "",
                        ""});
            table1137.AddRow(new string[] {
                        "[[rec(2).b]] = warewolf",
                        "e",
                        "REPLACED"});
#line 356
   testRunner.And("the \"Replacing\" debug inputs as", ((string)(null)), table1137, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1138 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1138.AddRow(new string[] {
                        "[[rec(1).a]] = tREPLACEDst"});
            table1138.AddRow(new string[] {
                        "[[rec(2).a]] = warREPLACEDwolf"});
            table1138.AddRow(new string[] {
                        "[[rec(1).b]] = tREPLACEDst"});
            table1138.AddRow(new string[] {
                        "[[rec(2).b]] = warREPLACEDwolf"});
            table1138.AddRow(new string[] {
                        "[[replaceResult]] = 4"});
#line 362
   testRunner.And("the \"Replacing\" debug outputs as", ((string)(null)), table1138, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Gather System Information, Date and Time Difference, Date" +
            " and Time, Random, and Format Number tools.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteASequenceWithGatherSystemInformationDateAndTimeDifferenceDateAndTimeRandomAndFormatNumberTools_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Gather System Information, Date and Time Difference, Date" +
                    " and Time, Random, and Format Number tools.", ((string[])(null)));
#line 370
this.ScenarioSetup(scenarioInfo);
#line 371
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1139 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table1139.AddRow(new string[] {
                        "[[test]]",
                        "Date & Time"});
#line 372
   testRunner.And("\"Test\" contains Gather System Info \"Sys info\" as", ((string)(null)), table1139, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1140 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table1140.AddRow(new string[] {
                        "2013-11-29",
                        "2050-11-29",
                        "yyyy-mm-dd",
                        "Years",
                        "[[result1]]"});
#line 375
   testRunner.And("\"Test\" contains Date and Time Difference \"Date&Time\" as", ((string)(null)), table1140, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1141 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "Output Format",
                        "Result"});
            table1141.AddRow(new string[] {
                        "2013-11-29",
                        "yyyy-mm-dd",
                        "1",
                        "yyyy-mm-dd",
                        "[[result2]]"});
#line 378
   testRunner.And("\"Test\" contains Date and Time \"Date\" as", ((string)(null)), table1141, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1142 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table1142.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "10",
                        "[[result3]]"});
#line 381
   testRunner.And("\"Test\" contains Random \"Random\" as", ((string)(null)), table1142, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1143 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table1143.AddRow(new string[] {
                        "788.894564545645",
                        "Up",
                        "3",
                        "3",
                        "[[result4]]"});
#line 384
   testRunner.And("\"Test\" contains Format Number \"Fnumber\" as", ((string)(null)), table1143, "And ");
#line 387
   testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 388
   testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1144 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table1144.AddRow(new string[] {
                        "1",
                        "[[test]] =",
                        "Date & Time"});
#line 389
   testRunner.And("the \"Sys info\" debug inputs as", ((string)(null)), table1144, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1145 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1145.AddRow(new string[] {
                        "1",
                        "[[test]] = String"});
#line 392
    testRunner.And("the \"Sys info\" debug outputs as", ((string)(null)), table1145, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1146 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table1146.AddRow(new string[] {
                        "2013-11-29",
                        "2050-11-29",
                        "yyyy-mm-dd",
                        "Years"});
#line 395
      testRunner.And("the \"Date&Time\" debug inputs as", ((string)(null)), table1146, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1147 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1147.AddRow(new string[] {
                        "[[result1]] = 37"});
#line 398
   testRunner.And("the \"Date&Time\" debug outputs as", ((string)(null)), table1147, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1148 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table1148.AddRow(new string[] {
                        "2013-11-29",
                        "yyyy-mm-dd",
                        "Years",
                        "1",
                        "yyyy-mm-dd"});
#line 401
   testRunner.And("the \"Date\" debug inputs as", ((string)(null)), table1148, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1149 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1149.AddRow(new string[] {
                        "[[result2]] = 2014-11-29"});
#line 404
   testRunner.And("the \"Date\" debug outputs as", ((string)(null)), table1149, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1150 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table1150.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "10"});
#line 407
   testRunner.And("the \"Random\" debug inputs as", ((string)(null)), table1150, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1151 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1151.AddRow(new string[] {
                        "[[result3]] = Int32"});
#line 410
   testRunner.And("the \"Random\" debug outputs as", ((string)(null)), table1151, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1152 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table1152.AddRow(new string[] {
                        "788.894564545645",
                        "Up",
                        "3",
                        "3"});
#line 413
   testRunner.And("the \"Fnumber\" debug inputs as", ((string)(null)), table1152, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1153 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1153.AddRow(new string[] {
                        "[[result4]] = 788.895"});
#line 416
   testRunner.And("the \"Fnumber\" debug outputs as", ((string)(null)), table1153, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with For each")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteASequenceWithForEach()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with For each", ((string[])(null)));
#line 420
this.ScenarioSetup(scenarioInfo);
#line 421
      testRunner.Given("I have a ForEach \"ForEachTest\" as \"NumOfExecution\" executions \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 422
   testRunner.And("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1154 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table1154.AddRow(new string[] {
                        "[[test]]",
                        "Date & Time"});
#line 423
   testRunner.And("\"Test\" contains Gather System Info \"Sys info\" as", ((string)(null)), table1154, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1155 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table1155.AddRow(new string[] {
                        "2013-11-29",
                        "2050-11-29",
                        "yyyy-mm-dd",
                        "Years",
                        "[[result1]]"});
#line 426
   testRunner.And("\"Test\" contains Date and Time Difference \"Date&Time\" as", ((string)(null)), table1155, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1156 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "Output Format",
                        "Result"});
            table1156.AddRow(new string[] {
                        "2013-11-29",
                        "yyyy-mm-dd",
                        "1",
                        "yyyy-mm-dd",
                        "[[result2]]"});
#line 429
   testRunner.And("\"Test\" contains Date and Time \"Date\" as", ((string)(null)), table1156, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1157 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table1157.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "10",
                        "[[result3]]"});
#line 432
   testRunner.And("\"Test\" contains Random \"Random\" as", ((string)(null)), table1157, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1158 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table1158.AddRow(new string[] {
                        "788.894564545645",
                        "Up",
                        "3",
                        "3",
                        "[[result4]]"});
#line 435
   testRunner.And("\"Test\" contains Format Number \"Fnumber\" as", ((string)(null)), table1158, "And ");
#line 438
   testRunner.When("the ForEach \"ForEachTest\" tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 439
   testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1159 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table1159.AddRow(new string[] {
                        "No. of Executes",
                        "1"});
#line 440
   testRunner.And("the \"ForEachTest\" debug inputs as", ((string)(null)), table1159, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1160 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table1160.AddRow(new string[] {
                        "1",
                        "[[test]] =",
                        "Date & Time"});
#line 443
    testRunner.And("the \"Sys info\" debug inputs as", ((string)(null)), table1160, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1161 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1161.AddRow(new string[] {
                        "1",
                        "[[test]] = String"});
#line 446
     testRunner.And("the \"Sys info\" debug outputs as", ((string)(null)), table1161, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1162 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table1162.AddRow(new string[] {
                        "2013-11-29",
                        "2050-11-29",
                        "yyyy-mm-dd",
                        "Years"});
#line 449
    testRunner.And("the \"Date&Time\" debug inputs as", ((string)(null)), table1162, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1163 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1163.AddRow(new string[] {
                        "[[result1]] = 37"});
#line 452
   testRunner.And("the \"Date&Time\" debug outputs as", ((string)(null)), table1163, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1164 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table1164.AddRow(new string[] {
                        "2013-11-29",
                        "yyyy-mm-dd",
                        "Years",
                        "1",
                        "yyyy-mm-dd"});
#line 455
   testRunner.And("the \"Date\" debug inputs as", ((string)(null)), table1164, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1165 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1165.AddRow(new string[] {
                        "[[result2]] = 2014-11-29"});
#line 458
   testRunner.And("the \"Date\" debug outputs as", ((string)(null)), table1165, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1166 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table1166.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "10"});
#line 461
   testRunner.And("the \"Random\" debug inputs as", ((string)(null)), table1166, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1167 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1167.AddRow(new string[] {
                        "[[result3]] = Int32"});
#line 464
   testRunner.And("the \"Random\" debug outputs as", ((string)(null)), table1167, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1168 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table1168.AddRow(new string[] {
                        "788.894564545645",
                        "Up",
                        "3",
                        "3"});
#line 467
   testRunner.And("the \"Fnumber\" debug inputs as", ((string)(null)), table1168, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1169 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1169.AddRow(new string[] {
                        "[[result4]] = 788.895"});
#line 470
   testRunner.And("the \"Fnumber\" debug outputs as", ((string)(null)), table1169, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with For each with 3 executions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteASequenceWithForEachWith3Executions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with For each with 3 executions", ((string[])(null)));
#line 474
this.ScenarioSetup(scenarioInfo);
#line 475
      testRunner.Given("I have a ForEach \"ForEachTest\" as \"NumOfExecution\" executions \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 476
   testRunner.And("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1170 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table1170.AddRow(new string[] {
                        "[[test().date]]",
                        "Date & Time"});
#line 477
   testRunner.And("\"Test\" contains Gather System Info \"Sys info\" as", ((string)(null)), table1170, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1171 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table1171.AddRow(new string[] {
                        "2013-11-29",
                        "2050-11-29",
                        "yyyy-mm-dd",
                        "Years",
                        "[[test().result1]]"});
#line 480
   testRunner.And("\"Test\" contains Date and Time Difference \"Date&Time\" as", ((string)(null)), table1171, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1172 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "Output Format",
                        "Result"});
            table1172.AddRow(new string[] {
                        "2013-11-29",
                        "yyyy-mm-dd",
                        "1",
                        "yyyy-mm-dd",
                        "[[test().result2]]"});
#line 483
   testRunner.And("\"Test\" contains Date and Time \"Date\" as", ((string)(null)), table1172, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1173 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table1173.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "10",
                        "[[test().result3]]"});
#line 486
   testRunner.And("\"Test\" contains Random \"Random\" as", ((string)(null)), table1173, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1174 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table1174.AddRow(new string[] {
                        "788.894564545645",
                        "Up",
                        "3",
                        "3",
                        "[[test().result4]]"});
#line 489
   testRunner.And("\"Test\" contains Format Number \"Fnumber\" as", ((string)(null)), table1174, "And ");
#line 492
   testRunner.When("the ForEach \"ForEachTest\" tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 493
   testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1175 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table1175.AddRow(new string[] {
                        "No. of Executes",
                        "3"});
#line 494
   testRunner.And("the \"ForEachTest\" debug inputs as", ((string)(null)), table1175, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1176 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table1176.AddRow(new string[] {
                        "1",
                        "[[test().date]] =",
                        "Date & Time"});
#line 497
    testRunner.And("the \"Sys info\" debug inputs as", ((string)(null)), table1176, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1177 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table1177.AddRow(new string[] {
                        "1",
                        "[[test(6).date]] = String"});
#line 500
     testRunner.And("the \"Sys info\" debug outputs as", ((string)(null)), table1177, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1178 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table1178.AddRow(new string[] {
                        "2013-11-29",
                        "2050-11-29",
                        "yyyy-mm-dd",
                        "Years"});
#line 503
    testRunner.And("the \"Date&Time\" debug inputs as", ((string)(null)), table1178, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1179 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1179.AddRow(new string[] {
                        "[[test(6).result1]] = 37"});
#line 506
   testRunner.And("the \"Date&Time\" debug outputs as", ((string)(null)), table1179, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1180 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table1180.AddRow(new string[] {
                        "2013-11-29",
                        "yyyy-mm-dd",
                        "Years",
                        "1",
                        "yyyy-mm-dd"});
#line 509
   testRunner.And("the \"Date\" debug inputs as", ((string)(null)), table1180, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1181 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1181.AddRow(new string[] {
                        "[[test(6).result2]] = 2014-11-29"});
#line 512
   testRunner.And("the \"Date\" debug outputs as", ((string)(null)), table1181, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1182 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table1182.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "10"});
#line 515
   testRunner.And("the \"Random\" debug inputs as", ((string)(null)), table1182, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1183 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1183.AddRow(new string[] {
                        "[[test(6).result3]] = Int32"});
#line 518
   testRunner.And("the \"Random\" debug outputs as", ((string)(null)), table1183, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1184 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table1184.AddRow(new string[] {
                        "788.894564545645",
                        "Up",
                        "3",
                        "3"});
#line 521
   testRunner.And("the \"Fnumber\" debug inputs as", ((string)(null)), table1184, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1185 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1185.AddRow(new string[] {
                        "[[test().result4]] = 788.895"});
#line 524
   testRunner.And("the \"Fnumber\" debug outputs as", ((string)(null)), table1185, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sending Error in error variable and calling webservice when inner activity errors" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void SendingErrorInErrorVariableAndCallingWebserviceWhenInnerActivityErrors()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sending Error in error variable and calling webservice when inner activity errors" +
                    "", ((string[])(null)));
#line 528
this.ScenarioSetup(scenarioInfo);
#line 529
    testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1186 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table1186.AddRow(new string[] {
                        "2013-11-29",
                        "2050-11-29",
                        "yyyytt-mm-dd",
                        "Years",
                        "[[result1]]"});
#line 530
 testRunner.And("\"Test\" contains Date and Time Difference \"Date&Time\" as", ((string)(null)), table1186, "And ");
#line 533
    testRunner.And("assign error to variable \"[[error]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 534
    testRunner.And("call the web service \"http://tst-ci-remote:3142/services/Test/OnError_WriteErrorS" +
                    "eq.xml?errorLog=[[error]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 535
    testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 536
    testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 537
    testRunner.And("the result from the web service \"http://tst-ci-remote:3142/services/Test/OnError_" +
                    "ReadErrorSeq.xml\" will have the same data as variable \"[[error]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1187 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table1187.AddRow(new string[] {
                        "2013-11-29",
                        "2050-11-29",
                        "yyyytt-mm-dd",
                        "Years"});
#line 538
   testRunner.And("the \"Date&Time\" debug inputs as", ((string)(null)), table1187, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1188 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table1188.AddRow(new string[] {
                        "[[result1]] ="});
#line 541
   testRunner.And("the \"Date&Time\" debug outputs as", ((string)(null)), table1188, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
