// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dev2.Activities.Specs.StudioTestFramework
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class StudioTestFrameworkWorkflowCoverageFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "StudioTestFrameworkWorkflowCoverage.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "StudioTestFrameworkWorkflowCoverage", "\tIn order to able to tell which nodes of the workflow has coverage\r\n\tAs a warewol" +
                    "f user\r\n\tI want to be able to generate test coverage results", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "StudioTestFrameworkWorkflowCoverage")))
            {
                global::Dev2.Activities.Specs.StudioTestFramework.StudioTestFrameworkWorkflowCoverageFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Run an individual test to show partial coverage of nodes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioTestFrameworkWorkflowCoverage")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StudioTestFrameworkWorkflowCoverage")]
        public virtual void RunAnIndividualTestToShowPartialCoverageOfNodes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run an individual test to show partial coverage of nodes", new string[] {
                        "ignore",
                        "StudioTestFrameworkWorkflowCoverage"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1342 = new TechTalk.SpecFlow.Table(new string[] {
                        "node"});
            table1342.AddRow(new string[] {
                        "Assign(input)"});
            table1342.AddRow(new string[] {
                        "Decision"});
            table1342.AddRow(new string[] {
                        "Assign(error)"});
            table1342.AddRow(new string[] {
                        "SQL"});
            table1342.AddRow(new string[] {
                        "Assign(person)"});
            table1342.AddRow(new string[] {
                        "SMTP Send"});
#line 9
  testRunner.Given("a workflow \"wf-one\" with below nodes", ((string)(null)), table1342, "Given ");
#line 17
  testRunner.And("generate test coverage is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
  testRunner.When("I run test \"Test Decision false branch\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
  testRunner.And("test coverage is generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1343 = new TechTalk.SpecFlow.Table(new string[] {
                        "node"});
            table1343.AddRow(new string[] {
                        "Assign(input)"});
            table1343.AddRow(new string[] {
                        "Decision"});
            table1343.AddRow(new string[] {
                        "False"});
            table1343.AddRow(new string[] {
                        "Assign(error)"});
#line 20
  testRunner.Then("the covered nodes are", ((string)(null)), table1343, "Then ");
#line 26
  testRunner.And("the test coverage is \"35%\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Run all tests to generate total nodes covered in workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioTestFrameworkWorkflowCoverage")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        public virtual void RunAllTestsToGenerateTotalNodesCoveredInWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run all tests to generate total nodes covered in workflow", new string[] {
                        "ignore"});
#line 29
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1344 = new TechTalk.SpecFlow.Table(new string[] {
                        "name"});
            table1344.AddRow(new string[] {
                        "Test Decision false branch"});
            table1344.AddRow(new string[] {
                        "Test Decision true branch"});
#line 30
  testRunner.Given("\"wf-one\" saved test(s) below", ((string)(null)), table1344, "Given ");
#line 34
  testRunner.And("generate test coverage is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
  testRunner.When("I run all the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1345 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "coverage"});
            table1345.AddRow(new string[] {
                        "Test Decision false branch",
                        "35%"});
            table1345.AddRow(new string[] {
                        "Test Decision true branch",
                        "50%"});
#line 36
  testRunner.And("the test coverage is", ((string)(null)), table1345, "And ");
#line 40
  testRunner.Then("the total workflow test coverage is \"85%\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1346 = new TechTalk.SpecFlow.Table(new string[] {
                        "node"});
            table1346.AddRow(new string[] {
                        "Assign(input)"});
            table1346.AddRow(new string[] {
                        "Decision"});
            table1346.AddRow(new string[] {
                        "False branch"});
            table1346.AddRow(new string[] {
                        "Assign(error)"});
            table1346.AddRow(new string[] {
                        "Assign(input)"});
            table1346.AddRow(new string[] {
                        "Decision"});
            table1346.AddRow(new string[] {
                        "True branch"});
            table1346.AddRow(new string[] {
                        "SQL"});
#line 41
  testRunner.And("the nodes covered are", ((string)(null)), table1346, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Run all tests should show which nodes have no coverage reports")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioTestFrameworkWorkflowCoverage")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        public virtual void RunAllTestsShouldShowWhichNodesHaveNoCoverageReports()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Run all tests should show which nodes have no coverage reports", new string[] {
                        "ignore"});
#line 53
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1347 = new TechTalk.SpecFlow.Table(new string[] {
                        "name"});
            table1347.AddRow(new string[] {
                        "Test Decision false branch"});
            table1347.AddRow(new string[] {
                        "Test Decision true branch"});
#line 54
  testRunner.Given("\"wf-one\" saved test(s) below", ((string)(null)), table1347, "Given ");
#line 58
  testRunner.And("I run all the tests with generate coverage selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1348 = new TechTalk.SpecFlow.Table(new string[] {
                        "node"});
            table1348.AddRow(new string[] {
                        "Assign(person)"});
            table1348.AddRow(new string[] {
                        "SMTP Send"});
#line 59
  testRunner.Then("the nodes not covered are", ((string)(null)), table1348, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Test coverage summary view folders should have coverage of all workflows it conta" +
            "ins")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioTestFrameworkWorkflowCoverage")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        public virtual void TestCoverageSummaryViewFoldersShouldHaveCoverageOfAllWorkflowsItContains()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test coverage summary view folders should have coverage of all workflows it conta" +
                    "ins", new string[] {
                        "ignore"});
#line 65
this.ScenarioSetup(scenarioInfo);
#line 66
  testRunner.Given("a test coverage summary view is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 67
  testRunner.When("a folder containing test coverage reports is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1349 = new TechTalk.SpecFlow.Table(new string[] {
                        "total",
                        "passed",
                        "failed"});
            table1349.AddRow(new string[] {
                        "1324",
                        "1300",
                        "24"});
#line 68
  testRunner.Then("information bar will have these values", ((string)(null)), table1349, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1350 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "coverage"});
            table1350.AddRow(new string[] {
                        "Folder-one",
                        "70 %"});
            table1350.AddRow(new string[] {
                        "Folder-two",
                        "warning: no coverage report found"});
#line 71
  testRunner.And("the per folder coverage summary is", ((string)(null)), table1350, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Test coverage summary view workflows should have per workflow coverage")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "StudioTestFrameworkWorkflowCoverage")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        public virtual void TestCoverageSummaryViewWorkflowsShouldHavePerWorkflowCoverage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test coverage summary view workflows should have per workflow coverage", new string[] {
                        "ignore"});
#line 77
this.ScenarioSetup(scenarioInfo);
#line 78
  testRunner.Given("a test coverage summary view is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 79
  testRunner.And("a folder containing test coverage reports is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1351 = new TechTalk.SpecFlow.Table(new string[] {
                        "total",
                        "passed",
                        "failed"});
            table1351.AddRow(new string[] {
                        "1324",
                        "1300",
                        "24"});
#line 80
  testRunner.And("information bar will have these values", ((string)(null)), table1351, "And ");
#line hidden
            TechTalk.SpecFlow.Table table1352 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "coverage",
                        "branch_coverage"});
            table1352.AddRow(new string[] {
                        "wf-one",
                        "85%",
                        "30%"});
            table1352.AddRow(new string[] {
                        "wf-two",
                        "warning: no coverage report found",
                        "0%"});
#line 83
  testRunner.And("the per workflow coverage summary is", ((string)(null)), table1352, "And ");
#line 87
  testRunner.When("I select \"wf-one\" within test coverage summary view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1353 = new TechTalk.SpecFlow.Table(new string[] {
                        "passed",
                        "node"});
            table1353.AddRow(new string[] {
                        "true",
                        "assign(input)"});
            table1353.AddRow(new string[] {
                        "false",
                        "Decision"});
            table1353.AddRow(new string[] {
                        "true",
                        "False branch"});
            table1353.AddRow(new string[] {
                        "true",
                        "Assign(error)"});
            table1353.AddRow(new string[] {
                        "true",
                        "Assign(input)"});
            table1353.AddRow(new string[] {
                        "true",
                        "Decision"});
            table1353.AddRow(new string[] {
                        "true",
                        "True branch"});
            table1353.AddRow(new string[] {
                        "true",
                        "SQL"});
            table1353.AddRow(new string[] {
                        "false",
                        "Assign(person)"});
            table1353.AddRow(new string[] {
                        "false",
                        "SMTP Send"});
#line 88
  testRunner.Then("the workflow nodes will show", ((string)(null)), table1353, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
