// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dev2.Activities.Specs.Composition
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ExampleWorkflowExecutionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "ExampleWorkflowExecution.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Composition", "ExampleWorkflowExecution", "\tIn order to execute an Example Workflow\r\n\tAs a Warewolf user\r\n\tI want to be able" +
                    " to build workflows that contain one of the example workflows", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "ExampleWorkflowExecution")))
            {
                global::Dev2.Activities.Specs.Composition.ExampleWorkflowExecutionFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
#line 7
   testRunner.Given("Debug events are reset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
   testRunner.And("Debug states are cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Utility - Format Number example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingUtility_FormatNumberExampleWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Utility - Format Number example workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 12
   testRunner.Given("I have a workflow \"Utility - Format Number Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table497 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 13
   testRunner.And("\"Utility - Format Number Test\" contains \"Utility - Format Number\" from server \"lo" +
                        "calhost\" with mapping as", ((string)(null)), table497, "And ");
#line hidden
#line 15
   testRunner.When("\"Utility - Format Number Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table498 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number",
                            "Rounding",
                            "Rounding Value",
                            "Decimals to show"});
                table498.AddRow(new string[] {
                            "123.446",
                            "Normal",
                            "2",
                            "2"});
#line 17
   testRunner.And("the \"Format Number1\" in WorkFlow \"Utility - Format Number\" debug inputs as", ((string)(null)), table498, "And ");
#line hidden
                TechTalk.SpecFlow.Table table499 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table499.AddRow(new string[] {
                            "[[Price]] = 123.45"});
#line 20
   testRunner.And("the \"Format Number1\" in Workflow \"Utility - Format Number\" debug outputs as", ((string)(null)), table499, "And ");
#line hidden
                TechTalk.SpecFlow.Table table500 = new TechTalk.SpecFlow.Table(new string[] {
                            "Number",
                            "Rounding",
                            "Rounding Value",
                            "Decimals to show"});
                table500.AddRow(new string[] {
                            "14649",
                            "Up",
                            "-2",
                            "-3"});
#line 23
    testRunner.And("the \"Format Number2\" in WorkFlow \"Utility - Format Number\" debug inputs as", ((string)(null)), table500, "And ");
#line hidden
                TechTalk.SpecFlow.Table table501 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table501.AddRow(new string[] {
                            "[[PriceInK]] = 14"});
#line 26
   testRunner.And("the \"Format Number2\" in Workflow \"Utility - Format Number\" debug outputs as", ((string)(null)), table501, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Utility - Random example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingUtility_RandomExampleWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Utility - Random example workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 32
   testRunner.Given("I have a workflow \"Utility - Random Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table502 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 33
   testRunner.And("\"Utility - Random Test\" contains \"Utility - Random\" from server \"localhost\" with " +
                        "mapping as", ((string)(null)), table502, "And ");
#line hidden
#line 35
   testRunner.When("\"Utility - Random Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table503 = new TechTalk.SpecFlow.Table(new string[] {
                            "Random",
                            "From",
                            "To"});
                table503.AddRow(new string[] {
                            "Numbers",
                            "1",
                            "6"});
#line 37
   testRunner.And("the \"Random1\" in WorkFlow \"Utility - Random\" debug inputs as", ((string)(null)), table503, "And ");
#line hidden
                TechTalk.SpecFlow.Table table504 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table504.AddRow(new string[] {
                            "[[DiceRoll]] = Int32"});
#line 40
   testRunner.And("the \"Random1\" in Workflow \"Utility - Random\" debug outputs as", ((string)(null)), table504, "And ");
#line hidden
                TechTalk.SpecFlow.Table table505 = new TechTalk.SpecFlow.Table(new string[] {
                            "Random",
                            "Length"});
                table505.AddRow(new string[] {
                            "Letters",
                            "7"});
#line 43
     testRunner.And("the \"Random2\" in WorkFlow \"Utility - Random\" debug inputs as", ((string)(null)), table505, "And ");
#line hidden
                TechTalk.SpecFlow.Table table506 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table506.AddRow(new string[] {
                            "[[Scrabble]] = String"});
#line 46
   testRunner.And("the \"Random2\" in Workflow \"Utility - Random\" debug outputs as", ((string)(null)), table506, "And ");
#line hidden
                TechTalk.SpecFlow.Table table507 = new TechTalk.SpecFlow.Table(new string[] {
                            "Random"});
                table507.AddRow(new string[] {
                            "GUID"});
#line 49
      testRunner.And("the \"Random3\" in WorkFlow \"Utility - Random\" debug inputs as", ((string)(null)), table507, "And ");
#line hidden
                TechTalk.SpecFlow.Table table508 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table508.AddRow(new string[] {
                            "[[License]] = String"});
#line 52
   testRunner.And("the \"Random3\" in Workflow \"Utility - Random\" debug outputs as", ((string)(null)), table508, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Utility - Date and Time example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DateTimeExampleWorkflowExecution")]
        public void ExampleExecutingUtility_DateAndTimeExampleWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "DateTimeExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Utility - Date and Time example workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 58
   testRunner.Given("I have a workflow \"Utility - Date and Time Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table509 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 59
   testRunner.And("\"Utility - Date and Time Test\" contains \"Utility - Date and Time\" from server \"lo" +
                        "calhost\" with mapping as", ((string)(null)), table509, "And ");
#line hidden
#line 61
   testRunner.When("\"Utility - Date and Time Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 62
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table510 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input",
                            "=",
                            "Input Format",
                            "=",
                            "Add Time",
                            "",
                            "Output Format",
                            "="});
                table510.AddRow(new string[] {
                            "System Date Time",
                            "DateTime",
                            "System Date Time Format",
                            "yyyy/MM/dd hh:mm:ss tt",
                            "\"\"",
                            "",
                            "System Date Time Format",
                            "yyyy/MM/dd hh:mm:ss tt"});
#line 63
   testRunner.And("the tool \"Date and Time(1)\" with Guid of \"d19fbd64-204b-4ecf-8259-b61dd000b504\" i" +
                        "n WorkFlow \"Utility - Date and Time\" debug inputs as", ((string)(null)), table510, "And ");
#line hidden
                TechTalk.SpecFlow.Table table511 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table511.AddRow(new string[] {
                            "[[nowish]] = DateTime"});
#line 66
   testRunner.And("the tool \"Date and Time(1)\" with Guid of \"d19fbd64-204b-4ecf-8259-b61dd000b504\" i" +
                        "n Workflow \"Utility - Date and Time\" debug outputs as", ((string)(null)), table511, "And ");
#line hidden
                TechTalk.SpecFlow.Table table512 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input",
                            "Input Format",
                            "=",
                            "Add Time",
                            "",
                            "Output Format"});
                table512.AddRow(new string[] {
                            "[[nowish]] = DateTime",
                            "System Date Time Format",
                            "yyyy/MM/dd hh:mm:ss tt",
                            "\"\"",
                            "",
                            "mm/dd/yy 12h:min am/pm"});
#line 69
  testRunner.And("the tool \"Date and Time(2)\" with Guid of \"094c9aa9-fdff-4641-ab9a-8796520df264\" i" +
                        "n WorkFlow \"Utility - Date and Time\" debug inputs as", ((string)(null)), table512, "And ");
#line hidden
                TechTalk.SpecFlow.Table table513 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table513.AddRow(new string[] {
                            "[[nowishNewFormat]] = DateTime"});
#line 72
   testRunner.And("the tool \"Date and Time(2)\" with Guid of \"094c9aa9-fdff-4641-ab9a-8796520df264\" i" +
                        "n Workflow \"Utility - Date and Time\" debug outputs as", ((string)(null)), table513, "And ");
#line hidden
                TechTalk.SpecFlow.Table table514 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input",
                            "Input Format",
                            "Add Time",
                            "",
                            "Output Format"});
                table514.AddRow(new string[] {
                            "Sunday, 23 July 78",
                            "DW, dd MM yy",
                            "Minutes",
                            "46664",
                            "mm/dd/yyyy 12h:min am/pm"});
#line 75
   testRunner.And("the tool \"Date and Time(3)\" with Guid of \"c53000c1-f61f-4173-acae-d31a828e2394\" i" +
                        "n WorkFlow \"Utility - Date and Time\" debug inputs as", ((string)(null)), table514, "And ");
#line hidden
                TechTalk.SpecFlow.Table table515 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table515.AddRow(new string[] {
                            "[[SomeTimeBack]] = DateTime"});
#line 78
   testRunner.And("the tool \"Date and Time(3)\" with Guid of \"c53000c1-f61f-4173-acae-d31a828e2394\" i" +
                        "n Workflow \"Utility - Date and Time\" debug outputs as", ((string)(null)), table515, "And ");
#line hidden
                TechTalk.SpecFlow.Table table516 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input",
                            "Input Format",
                            "Add Time",
                            "",
                            "Output Format"});
                table516.AddRow(new string[] {
                            "am",
                            "am/pm",
                            "\"\"",
                            "",
                            "mm/dd/yyyy 12h:min:ss.sp am/pm"});
#line 81
  testRunner.And("the tool \"Date and Time(4)\" with Guid of \"2c7ff7e0-5632-47d0-8224-0ef8e16cd74c\" i" +
                        "n WorkFlow \"Utility - Date and Time\" debug inputs as", ((string)(null)), table516, "And ");
#line hidden
                TechTalk.SpecFlow.Table table517 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table517.AddRow(new string[] {
                            "[[TheDefaultDate]] = DateTime"});
#line 84
   testRunner.And("the tool \"Date and Time(4)\" with Guid of \"2c7ff7e0-5632-47d0-8224-0ef8e16cd74c\" i" +
                        "n Workflow \"Utility - Date and Time\" debug outputs as", ((string)(null)), table517, "And ");
#line hidden
                TechTalk.SpecFlow.Table table518 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input",
                            "=",
                            "Input Format",
                            "=",
                            "Add Time",
                            "",
                            "Output Format"});
                table518.AddRow(new string[] {
                            "System Date Time",
                            "DateTime",
                            "System Date Time Format",
                            "yyyy/MM/dd hh:mm:ss tt",
                            "\"\"",
                            "",
                            "\"\'Date format yyyy MM dd yields : \' yyyy MM dd"});
#line 87
   testRunner.And("the tool \"Date and Time(5)\" with Guid of \"4b14ed3c-0f6a-41ce-8e24-3a5c1fc0d625\" i" +
                        "n WorkFlow \"Utility - Date and Time\" debug inputs as", ((string)(null)), table518, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Utility - System Information example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingUtility_SystemInformationExampleWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Utility - System Information example workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 92
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 93
   testRunner.Given("I have a workflow \"Utility - System Information Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table519 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 94
   testRunner.And("\"Utility - System Information Test\" contains \"Utility - System Information\" from " +
                        "server \"localhost\" with mapping as", ((string)(null)), table519, "And ");
#line hidden
#line 96
   testRunner.When("\"Utility - System Information Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 97
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table520 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            ""});
                table520.AddRow(new string[] {
                            "1",
                            "[[DateTime]] =",
                            "Date & Time"});
                table520.AddRow(new string[] {
                            "2",
                            "[[OpSystem]]  =",
                            "Operating System"});
                table520.AddRow(new string[] {
                            "3",
                            "[[SP]] =",
                            "Service Pack"});
                table520.AddRow(new string[] {
                            "4",
                            "[[Bit]] =",
                            "32/64 Bit"});
                table520.AddRow(new string[] {
                            "5",
                            "[[DateTimeFormat]] =",
                            "Date & Time Format"});
                table520.AddRow(new string[] {
                            "6",
                            "[[DiskAvailable]] =",
                            "Disk Available (GB)"});
                table520.AddRow(new string[] {
                            "7",
                            "[[DiskTotal]]  =",
                            "Disk Total (GB)"});
                table520.AddRow(new string[] {
                            "8",
                            "[[RAMAvailable]] =",
                            "RAM Available (MB)"});
                table520.AddRow(new string[] {
                            "9",
                            "[[RAMTotal]]  =",
                            "RAM Total (MB)"});
                table520.AddRow(new string[] {
                            "10",
                            "[[CPUAvailable]] =",
                            "CPU Available"});
                table520.AddRow(new string[] {
                            "11",
                            "[[CPUTotal]]  =",
                            "CPU Total"});
                table520.AddRow(new string[] {
                            "12",
                            "[[Language]] =",
                            "Language"});
                table520.AddRow(new string[] {
                            "13",
                            "[[Region]] =",
                            "Region"});
                table520.AddRow(new string[] {
                            "14",
                            "[[UserRoles]] =",
                            "User Roles"});
                table520.AddRow(new string[] {
                            "15",
                            "[[UserName]] =",
                            "User Name"});
                table520.AddRow(new string[] {
                            "16",
                            "[[Domain]] =",
                            "Domain"});
#line 98
   testRunner.And("the tool \"Gather System Information (17)\" with Guid of \"87dbf079-4142-4160-9ada-7" +
                        "63a72b0700d\" in WorkFlow \"Utility - System Information\" debug inputs as", ((string)(null)), table520, "And ");
#line hidden
                TechTalk.SpecFlow.Table table521 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            ""});
                table521.AddRow(new string[] {
                            "1",
                            "[[DateTime]]      =    String"});
                table521.AddRow(new string[] {
                            "2",
                            "[[OpSystem]]      =    String"});
                table521.AddRow(new string[] {
                            "3",
                            "[[SP]]            =    String"});
                table521.AddRow(new string[] {
                            "4",
                            "[[Bit]]           =    String"});
                table521.AddRow(new string[] {
                            "5",
                            "[[DateTimeFormat]] =    String"});
                table521.AddRow(new string[] {
                            "6",
                            "[[DiskAvailable]] =    String"});
                table521.AddRow(new string[] {
                            "7",
                            "[[DiskTotal]]     =    String"});
                table521.AddRow(new string[] {
                            "8",
                            "[[RAMAvailable]]  =    String"});
                table521.AddRow(new string[] {
                            "9",
                            "[[RAMTotal]]      =    String"});
                table521.AddRow(new string[] {
                            "10",
                            "[[CPUAvailable]]  =    String"});
                table521.AddRow(new string[] {
                            "11",
                            "[[CPUTotal]]      =    String"});
                table521.AddRow(new string[] {
                            "12",
                            "[[Language]]      =    String"});
                table521.AddRow(new string[] {
                            "13",
                            "[[Region]]        =    String"});
                table521.AddRow(new string[] {
                            "14",
                            "[[UserRoles]]     =    String"});
                table521.AddRow(new string[] {
                            "15",
                            "[[UserName]]      =    String"});
                table521.AddRow(new string[] {
                            "16",
                            "[[Domain]]        =    String"});
#line 116
  testRunner.And("the tool \"Gather System Information (17)\" with Guid of \"87dbf079-4142-4160-9ada-7" +
                        "63a72b0700d\" in Workflow \"Utility - System Information\" debug outputs as", ((string)(null)), table521, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Utility - Web Request example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingUtility_WebRequestExampleWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Utility - Web Request example workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 136
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 137
   testRunner.Given("I have a workflow \"Utility - Web Request Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table522 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 138
   testRunner.And("\"Utility - Web Request Test\" contains \"Utility - Web Request\" from server \"localh" +
                        "ost\" with mapping as", ((string)(null)), table522, "And ");
#line hidden
#line 140
   testRunner.When("\"Utility - Web Request Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 141
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table523 = new TechTalk.SpecFlow.Table(new string[] {
                            "URL",
                            "Header",
                            "Time Out Seconds"});
                table523.AddRow(new string[] {
                            "https://warewolf.io/",
                            "",
                            "100"});
#line 142
   testRunner.And("the \"Web Request 1\" in WorkFlow \"Utility - Web Request\" debug inputs as", ((string)(null)), table523, "And ");
#line hidden
                TechTalk.SpecFlow.Table table524 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table524.AddRow(new string[] {
                            "[[WarewolfHome]] = String"});
#line 145
   testRunner.And("the \"Web Request 1\" in Workflow \"Utility - Web Request\" debug outputs as", ((string)(null)), table524, "And ");
#line hidden
                TechTalk.SpecFlow.Table table525 = new TechTalk.SpecFlow.Table(new string[] {
                            "URL",
                            "Header",
                            "Time Out Seconds"});
                table525.AddRow(new string[] {
                            "http://maps.googleapis.com/maps/api/geocode/xml?address=[[BartsAddress]]&sensor=f" +
                                "alse = String",
                            "",
                            "100"});
#line 148
   testRunner.And("the \"Web Request 2\" in WorkFlow \"Utility - Web Request\" debug inputs as", ((string)(null)), table525, "And ");
#line hidden
                TechTalk.SpecFlow.Table table526 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table526.AddRow(new string[] {
                            "[[GecodedAddress]] = String"});
#line 151
   testRunner.And("the \"Web Request 2\" in Workflow \"Utility - Web Request\" debug outputs as", ((string)(null)), table526, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Data - Assign example workflows")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingData_AssignExampleWorkflows()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Data - Assign example workflows", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 156
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 157
   testRunner.Given("I have a workflow \"Test Example Data - Assign\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table527 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
                table527.AddRow(new string[] {
                            "",
                            "",
                            "rec(*).set",
                            "[[rec().set]]"});
                table527.AddRow(new string[] {
                            "",
                            "",
                            "hero(*).pushups",
                            "[[hero().pushups]]"});
                table527.AddRow(new string[] {
                            "",
                            "",
                            "hero(*).name",
                            "[[hero().name]]"});
#line 158
   testRunner.And("\"Test Example Data - Assign\" contains \"Data - Assign\" from server \"localhost\" wit" +
                        "h mapping as", ((string)(null)), table527, "And ");
#line hidden
#line 163
   testRunner.When("\"Test Example Data - Assign\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 164
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table528 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table528.AddRow(new string[] {
                            "[[rec(1).set]] = Bart Simpson: I WILL NOT INSTIGATE REVOLUTION"});
                table528.AddRow(new string[] {
                            "[[hero(1).pushups]] = All of them."});
                table528.AddRow(new string[] {
                            "[[hero(1).name]] = Chuck Norris"});
#line 165
   testRunner.And("the \"Data - Assign\" in Workflow \"Test Example Data - Assign\" debug outputs as", ((string)(null)), table528, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Data - Base Conversion example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingData_BaseConversionExampleWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Data - Base Conversion example workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 172
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 173
   testRunner.Given("I have a workflow \"Data - Base Conversion Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table529 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 174
   testRunner.And("\"Data - Base Conversion Test\" contains \"Data - Base Conversion\" from server \"loca" +
                        "lhost\" with mapping as", ((string)(null)), table529, "And ");
#line hidden
#line 176
   testRunner.When("\"Data - Base Conversion Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 177
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table530 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "Convert",
                            "From",
                            "To"});
                table530.AddRow(new string[] {
                            "1",
                            "[[Blob]] = 0100100100100000011101110110000101110011001000000110110101100001011011" +
                                "1001100111011011000110010101100100",
                            "Binary",
                            "Text"});
#line 178
   testRunner.And("the \"Base Conversion (1)\" in WorkFlow \"Data - Base Conversion\" debug inputs as", ((string)(null)), table530, "And ");
#line hidden
                TechTalk.SpecFlow.Table table531 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            ""});
                table531.AddRow(new string[] {
                            "1",
                            "[[Blob]] = I was mangled"});
#line 181
   testRunner.And("the \"Base Conversion (1)\" in Workflow \"Data - Base Conversion\" debug outputs as", ((string)(null)), table531, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Data - Case Conversion example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingData_CaseConversionExampleWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Data - Case Conversion example workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 186
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 187
   testRunner.Given("I have a workflow \"Data - Case Conversion Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table532 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 188
   testRunner.And("\"Data - Case Conversion Test\" contains \"Data - Case Conversion\" from server \"loca" +
                        "lhost\" with mapping as", ((string)(null)), table532, "And ");
#line hidden
#line 190
   testRunner.When("\"Data - Case Conversion Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 191
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table533 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "Convert",
                            "To"});
                table533.AddRow(new string[] {
                            "1",
                            "[[sometext]] = gET reaDy FoR sOme Text CONVersionS",
                            "UPPER"});
#line 192
   testRunner.And("the \"Case Conversion1 (1)\" in WorkFlow \"Data - Case Conversion\" debug inputs as", ((string)(null)), table533, "And ");
#line hidden
                TechTalk.SpecFlow.Table table534 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            ""});
                table534.AddRow(new string[] {
                            "1",
                            "[[sometext]] = GET READY FOR SOME TEXT CONVERSIONS"});
#line 195
   testRunner.And("the \"Case Conversion1 (1)\" in Workflow \"Data - Case Conversion\" debug outputs as", ((string)(null)), table534, "And ");
#line hidden
                TechTalk.SpecFlow.Table table535 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "Convert",
                            "To"});
                table535.AddRow(new string[] {
                            "1",
                            "[[sometext]] = GET READY FOR SOME TEXT CONVERSIONS",
                            "lower"});
#line 198
    testRunner.And("the \"Case Conversion2 (1)\" in WorkFlow \"Data - Case Conversion\" debug inputs as", ((string)(null)), table535, "And ");
#line hidden
                TechTalk.SpecFlow.Table table536 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            ""});
                table536.AddRow(new string[] {
                            "1",
                            "[[sometext]] = get ready for some text conversions"});
#line 201
   testRunner.And("the \"Case Conversion2 (1)\" in Workflow \"Data - Case Conversion\" debug outputs as", ((string)(null)), table536, "And ");
#line hidden
                TechTalk.SpecFlow.Table table537 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "Convert",
                            "To"});
                table537.AddRow(new string[] {
                            "1",
                            "[[sometext]] = get ready for some text conversions",
                            "Sentence"});
#line 204
    testRunner.And("the \"Case Conversion3 (1)\" in WorkFlow \"Data - Case Conversion\" debug inputs as", ((string)(null)), table537, "And ");
#line hidden
                TechTalk.SpecFlow.Table table538 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            ""});
                table538.AddRow(new string[] {
                            "1",
                            "[[sometext]] = Get ready for some text conversions"});
#line 207
   testRunner.And("the \"Case Conversion3 (1)\" in Workflow \"Data - Case Conversion\" debug outputs as", ((string)(null)), table538, "And ");
#line hidden
                TechTalk.SpecFlow.Table table539 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "Convert",
                            "To"});
                table539.AddRow(new string[] {
                            "1",
                            "[[sometext]] = Get ready for some text conversions",
                            "Title Case"});
#line 210
      testRunner.And("the \"Case Conversion4 (1)\" in WorkFlow \"Data - Case Conversion\" debug inputs as", ((string)(null)), table539, "And ");
#line hidden
                TechTalk.SpecFlow.Table table540 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            ""});
                table540.AddRow(new string[] {
                            "1",
                            "[[sometext]] = Get Ready For Some Text Conversions"});
#line 213
   testRunner.And("the \"Case Conversion4 (1)\" in Workflow \"Data - Case Conversion\" debug outputs as", ((string)(null)), table540, "And ");
#line hidden
                TechTalk.SpecFlow.Table table541 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "Convert",
                            "To"});
                table541.AddRow(new string[] {
                            "1",
                            "[[sometext]] = 1Mixed up 5om3",
                            "UPPER"});
#line 216
      testRunner.And("the \"Case Conversion5 (1)\" in WorkFlow \"Data - Case Conversion\" debug inputs as", ((string)(null)), table541, "And ");
#line hidden
                TechTalk.SpecFlow.Table table542 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            ""});
                table542.AddRow(new string[] {
                            "1",
                            "[[sometext]] = 1MIXED UP 5OM3"});
#line 219
   testRunner.And("the \"Case Conversion5 (1)\" in Workflow \"Data - Case Conversion\" debug outputs as", ((string)(null)), table542, "And ");
#line hidden
                TechTalk.SpecFlow.Table table543 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "Convert",
                            "To"});
                table543.AddRow(new string[] {
                            "1",
                            "[[sometext]] = 1MIXED UP 5OM3",
                            "lower"});
#line 222
      testRunner.And("the \"Case Conversion6 (1)\" in WorkFlow \"Data - Case Conversion\" debug inputs as", ((string)(null)), table543, "And ");
#line hidden
                TechTalk.SpecFlow.Table table544 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            ""});
                table544.AddRow(new string[] {
                            "1",
                            "[[sometext]] = 1mixed up 5om3"});
#line 225
   testRunner.And("the \"Case Conversion6 (1)\" in Workflow \"Data - Case Conversion\" debug outputs as", ((string)(null)), table544, "And ");
#line hidden
                TechTalk.SpecFlow.Table table545 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "Convert",
                            "To"});
                table545.AddRow(new string[] {
                            "1",
                            "[[sometext]] = 1mixed up 5om3",
                            "Sentence"});
#line 228
      testRunner.And("the \"Case Conversion7 (1)\" in WorkFlow \"Data - Case Conversion\" debug inputs as", ((string)(null)), table545, "And ");
#line hidden
                TechTalk.SpecFlow.Table table546 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            ""});
                table546.AddRow(new string[] {
                            "1",
                            "[[sometext]] = 1mixed up 5om3"});
#line 231
   testRunner.And("the \"Case Conversion7 (1)\" in Workflow \"Data - Case Conversion\" debug outputs as", ((string)(null)), table546, "And ");
#line hidden
                TechTalk.SpecFlow.Table table547 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "Convert",
                            "To"});
                table547.AddRow(new string[] {
                            "1",
                            "[[sometext]] = 1mixed up 5om3",
                            "Title Case"});
#line 234
      testRunner.And("the \"Case Conversion8 (1)\" in WorkFlow \"Data - Case Conversion\" debug inputs as", ((string)(null)), table547, "And ");
#line hidden
                TechTalk.SpecFlow.Table table548 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            ""});
                table548.AddRow(new string[] {
                            "1",
                            "[[sometext]] = 1Mixed Up 5Om3"});
#line 237
   testRunner.And("the \"Case Conversion8 (1)\" in Workflow \"Data - Case Conversion\" debug outputs as", ((string)(null)), table548, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Data - Data Merge example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingData_DataMergeExampleWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Data - Data Merge example workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 242
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 243
   testRunner.Given("I have a workflow \"Data - Data Merge Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table549 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
                table549.AddRow(new string[] {
                            "",
                            "",
                            "FileContent",
                            "[[FileContent]]"});
#line 244
   testRunner.And("\"Data - Data Merge Test\" contains \"Data - Data Merge\" from server \"localhost\" wit" +
                        "h mapping as", ((string)(null)), table549, "And ");
#line hidden
#line 247
   testRunner.When("\"Data - Data Merge Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 248
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table550 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table550.AddRow(new string[] {
                            "[[FileContent]] = String"});
#line 249
   testRunner.And("the \"Data - Data Merge\" in Workflow \"Data - Data Merge\" debug outputs as", ((string)(null)), table550, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Data - Find Index example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingData_FindIndexExampleWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Data - Find Index example workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 254
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 255
   testRunner.Given("I have a workflow \"Data - Find Index Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table551 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 256
   testRunner.And("\"Data - Find Index Test\" contains \"Data - Find Index\" from server \"localhost\" wit" +
                        "h mapping as", ((string)(null)), table551, "And ");
#line hidden
#line 258
   testRunner.When("\"Data - Find Index Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 259
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table552 = new TechTalk.SpecFlow.Table(new string[] {
                            "In Field",
                            "Index",
                            "Characters",
                            "Direction"});
                table552.AddRow(new string[] {
                            "abc",
                            "First Occurrence",
                            "b",
                            "Left to Right"});
#line 260
   testRunner.And("the \"Find Index1\" in WorkFlow \"Data - Find Index\" debug inputs as", ((string)(null)), table552, "And ");
#line hidden
                TechTalk.SpecFlow.Table table553 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table553.AddRow(new string[] {
                            "[[WhereIsB]] = 2"});
#line 263
   testRunner.And("the \"Find Index1\" in Workflow \"Data - Find Index\" debug outputs as", ((string)(null)), table553, "And ");
#line hidden
                TechTalk.SpecFlow.Table table554 = new TechTalk.SpecFlow.Table(new string[] {
                            "In Field",
                            "Index",
                            "Characters",
                            "Direction"});
                table554.AddRow(new string[] {
                            "abcbdefghibjklmnop",
                            "All Occurrences",
                            "b",
                            "Left to Right"});
#line 266
   testRunner.And("the \"Find Index2\" in WorkFlow \"Data - Find Index\" debug inputs as", ((string)(null)), table554, "And ");
#line hidden
                TechTalk.SpecFlow.Table table555 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table555.AddRow(new string[] {
                            "[[WhereAreTheBs]] = 2,4,11"});
#line 269
   testRunner.And("the \"Find Index2\" in Workflow \"Data - Find Index\" debug outputs as", ((string)(null)), table555, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing File and Folder - Copy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingFileAndFolder_Copy()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing File and Folder - Copy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 274
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 275
   testRunner.Given("I have a workflow \"File and Folder - Copy Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table556 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 276
   testRunner.And("\"File and Folder - Copy Test\" contains \"File and Folder - Copy\" from server \"loca" +
                        "lhost\" with mapping as", ((string)(null)), table556, "And ");
#line hidden
#line 278
   testRunner.When("\"File and Folder - Copy Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 279
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table557 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table557.AddRow(new string[] {
                            "[[Complete]] = Success"});
#line 280
   testRunner.And("the \"Copy\" in Workflow \"File and Folder - Copy\" debug outputs as", ((string)(null)), table557, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing File and Folder - Create")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingFileAndFolder_Create()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing File and Folder - Create", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 285
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 286
   testRunner.Given("I have a workflow \"File and Folder - Create Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table558 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 287
   testRunner.And("\"File and Folder - Create Test\" contains \"File and Folder - Create\" from server \"" +
                        "localhost\" with mapping as", ((string)(null)), table558, "And ");
#line hidden
#line 289
   testRunner.When("\"File and Folder - Create Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 290
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table559 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table559.AddRow(new string[] {
                            "[[Complete]] = Success"});
#line 291
   testRunner.And("the \"Create\" in Workflow \"File and Folder - Create\" debug outputs as", ((string)(null)), table559, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing File and Folder - Delete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingFileAndFolder_Delete()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing File and Folder - Delete", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 296
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 297
   testRunner.Given("I have a workflow \"File and Folder - Delete Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table560 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 298
   testRunner.And("\"File and Folder - Delete Test\" contains \"File and Folder - Delete\" from server \"" +
                        "localhost\" with mapping as", ((string)(null)), table560, "And ");
#line hidden
#line 300
   testRunner.When("\"File and Folder - Delete Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 301
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table561 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table561.AddRow(new string[] {
                            "[[Complete]] = Success"});
#line 302
   testRunner.And("the \"Delete\" in Workflow \"File and Folder - Delete\" debug outputs as", ((string)(null)), table561, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing File and Folder - Move")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingFileAndFolder_Move()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing File and Folder - Move", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 307
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 308
   testRunner.Given("I have a workflow \"File and Folder - Move Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table562 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 309
   testRunner.And("\"File and Folder - Move Test\" contains \"File and Folder - Move\" from server \"loca" +
                        "lhost\" with mapping as", ((string)(null)), table562, "And ");
#line hidden
#line 311
   testRunner.When("\"File and Folder - Move Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 312
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table563 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table563.AddRow(new string[] {
                            "[[Complete]] = Success"});
#line 313
   testRunner.And("the \"Move\" in Workflow \"File and Folder - Move\" debug outputs as", ((string)(null)), table563, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing File and Folder - Read File")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingFileAndFolder_ReadFile()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing File and Folder - Read File", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 318
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 319
   testRunner.Given("I have a workflow \"File and Folder - Read File Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table564 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 320
   testRunner.And("\"File and Folder - Read File Test\" contains \"File and Folder - Read File\" from se" +
                        "rver \"localhost\" with mapping as", ((string)(null)), table564, "And ");
#line hidden
#line 322
   testRunner.When("\"File and Folder - Read File Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 323
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table565 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table565.AddRow(new string[] {
                            "[[Logs]] = the contents of the log file"});
#line 324
   testRunner.And("the \"Read File\" in Workflow \"File and Folder - Read File\" debug outputs as", ((string)(null)), table565, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing File and Folder - Rename")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingFileAndFolder_Rename()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing File and Folder - Rename", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 329
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 330
   testRunner.Given("I have a workflow \"File and Folder - Rename Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table566 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 331
   testRunner.And("\"File and Folder - Rename Test\" contains \"File and Folder - Rename\" from server \"" +
                        "localhost\" with mapping as", ((string)(null)), table566, "And ");
#line hidden
#line 333
   testRunner.When("\"File and Folder - Rename Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 334
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table567 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table567.AddRow(new string[] {
                            "[[Complete]] = Success"});
#line 335
   testRunner.And("the \"Rename\" in Workflow \"File and Folder - Rename\" debug outputs as", ((string)(null)), table567, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing File and Folder - Unzip")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingFileAndFolder_Unzip()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing File and Folder - Unzip", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 340
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 341
   testRunner.Given("I have a workflow \"File and Folder - Unzip Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table568 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 342
   testRunner.And("\"File and Folder - Unzip Test\" contains \"File and Folder - Unzip\" from server \"lo" +
                        "calhost\" with mapping as", ((string)(null)), table568, "And ");
#line hidden
#line 344
   testRunner.When("\"File and Folder - Unzip Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 345
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table569 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table569.AddRow(new string[] {
                            "[[Complete]] = Success"});
#line 346
   testRunner.And("the \"UnZip\" in Workflow \"File and Folder - Unzip\" debug outputs as", ((string)(null)), table569, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing File and Folder - Write File")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleFileWriteWorkflowExecution")]
        public void ExampleExecutingFileAndFolder_WriteFile()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleFileWriteWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing File and Folder - Write File", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 351
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 352
   testRunner.Given("I have a workflow \"File and Folder - Write File Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table570 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 353
   testRunner.And("\"File and Folder - Write File Test\" contains \"File and Folder - Write File\" from " +
                        "server \"localhost\" with mapping as", ((string)(null)), table570, "And ");
#line hidden
#line 355
   testRunner.When("\"File and Folder - Write File Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 356
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table571 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table571.AddRow(new string[] {
                            "[[Complete]] = Success"});
#line 357
   testRunner.And("the \"Write\" in Workflow \"File and Folder - Write File\" debug outputs as", ((string)(null)), table571, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing File and Folder - Zip")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingFileAndFolder_Zip()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing File and Folder - Zip", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 362
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 363
   testRunner.Given("I have a workflow \"File and Folder - Zip Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table572 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 364
   testRunner.And("\"File and Folder - Zip Test\" contains \"File and Folder - Zip\" from server \"localh" +
                        "ost\" with mapping as", ((string)(null)), table572, "And ");
#line hidden
#line 366
   testRunner.When("\"File and Folder - Zip Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 367
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table573 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table573.AddRow(new string[] {
                            "[[Complete]] = Success"});
#line 368
   testRunner.And("the \"Zip\" in Workflow \"File and Folder - Zip\" debug outputs as", ((string)(null)), table573, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Recordset - Count Records example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingRecordset_CountRecordsExampleWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Recordset - Count Records example workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 373
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 374
   testRunner.Given("I have a workflow \"Recordset - Count Records Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table574 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 375
   testRunner.And("\"Recordset - Count Records Test\" contains \"Recordset - Count Records\" from server" +
                        " \"localhost\" with mapping as", ((string)(null)), table574, "And ");
#line hidden
#line 377
   testRunner.When("\"Recordset - Count Records Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 378
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table575 = new TechTalk.SpecFlow.Table(new string[] {
                            "Recordset"});
                table575.AddRow(new string[] {
                            "[[rec(1).set]] = Warewolf"});
                table575.AddRow(new string[] {
                            "[[rec(2).set]] = SOA"});
                table575.AddRow(new string[] {
                            "[[rec(3).set]] = Recordset"});
#line 379
   testRunner.And("the \"Count Records\" in WorkFlow \"Recordset - Count Records\" debug inputs as", ((string)(null)), table575, "And ");
#line hidden
                TechTalk.SpecFlow.Table table576 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table576.AddRow(new string[] {
                            "[[count]] = 3"});
#line 384
   testRunner.And("the \"Count Records\" in Workflow \"Recordset - Count Records\" debug outputs as", ((string)(null)), table576, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Data - Replace example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingData_ReplaceExampleWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Data - Replace example workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 389
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 390
   testRunner.Given("I have a workflow \"Data - Replace Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table577 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 391
   testRunner.And("\"Data - Replace Test\" contains \"Data - Replace\" from server \"localhost\" with mapp" +
                        "ing as", ((string)(null)), table577, "And ");
#line hidden
#line 393
   testRunner.When("\"Data - Replace Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 394
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table578 = new TechTalk.SpecFlow.Table(new string[] {
                            "In Field(s)",
                            "Find",
                            "Replace With"});
                table578.AddRow(new string[] {
                            "[[SomeText]] = Replace",
                            "ac",
                            "icat"});
#line 395
   testRunner.And("the \"Replace1\" in WorkFlow \"Data - Replace\" debug inputs as", ((string)(null)), table578, "And ");
#line hidden
                TechTalk.SpecFlow.Table table579 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table579.AddRow(new string[] {
                            "[[SomeText]] = Replicate"});
                table579.AddRow(new string[] {
                            "[[count]] = 1"});
#line 398
   testRunner.And("the \"Replace1\" in Workflow \"Data - Replace\" debug outputs as", ((string)(null)), table579, "And ");
#line hidden
                TechTalk.SpecFlow.Table table580 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table580.AddRow(new string[] {
                            "[[rec(1).homeNumber]]   = +1553122442"});
                table580.AddRow(new string[] {
                            "[[rec(2).homeNumber]]   = +1554682136"});
                table580.AddRow(new string[] {
                            "[[rec(1).mobileNumber]] = +1655985781"});
                table580.AddRow(new string[] {
                            "[[rec(2).mobileNumber]] = +1985623145"});
                table580.AddRow(new string[] {
                            "[[recount]] = 3"});
#line 402
   testRunner.And("the \"Replace2\" in Workflow \"Data - Replace\" debug outputs as", ((string)(null)), table580, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Recordset - Records Length example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingRecordset_RecordsLengthExampleWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Recordset - Records Length example workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 411
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 412
   testRunner.Given("I have a workflow \"Recordset - Records Length Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table581 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 413
   testRunner.And("\"Recordset - Records Length Test\" contains \"Recordset - Records Length\" from serv" +
                        "er \"localhost\" with mapping as", ((string)(null)), table581, "And ");
#line hidden
#line 415
   testRunner.When("\"Recordset - Records Length Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 416
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table582 = new TechTalk.SpecFlow.Table(new string[] {
                            "Recordset"});
                table582.AddRow(new string[] {
                            "[[rec(1).set]] = Warewolf"});
                table582.AddRow(new string[] {
                            "[[rec(5).set]] = Recordset"});
#line 417
   testRunner.And("the \"Length1\" in WorkFlow \"Recordset - Records Length\" debug inputs as", ((string)(null)), table582, "And ");
#line hidden
                TechTalk.SpecFlow.Table table583 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table583.AddRow(new string[] {
                            "[[length]] = 5"});
#line 421
   testRunner.And("the \"Length1\" in Workflow \"Recordset - Records Length\" debug outputs as", ((string)(null)), table583, "And ");
#line hidden
                TechTalk.SpecFlow.Table table584 = new TechTalk.SpecFlow.Table(new string[] {
                            "Recordset"});
                table584.AddRow(new string[] {
                            "[[rec(5).set]] = Recordset"});
#line 424
   testRunner.And("the \"Length2\" in WorkFlow \"Recordset - Records Length\" debug inputs as", ((string)(null)), table584, "And ");
#line hidden
                TechTalk.SpecFlow.Table table585 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table585.AddRow(new string[] {
                            "[[length]] = 5"});
#line 427
   testRunner.And("the \"Length2\" in Workflow \"Recordset - Records Length\" debug outputs as", ((string)(null)), table585, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Recordset - Delete Records example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingRecordset_DeleteRecordsExampleWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Recordset - Delete Records example workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 432
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 433
   testRunner.Given("I have a workflow \"Recordset - Delete Records Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table586 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 434
   testRunner.And("\"Recordset - Delete Records Test\" contains \"Recordset - Delete Records\" from serv" +
                        "er \"localhost\" with mapping as", ((string)(null)), table586, "And ");
#line hidden
#line 436
   testRunner.When("\"Recordset - Delete Records Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 437
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table587 = new TechTalk.SpecFlow.Table(new string[] {
                            "Records"});
                table587.AddRow(new string[] {
                            "[[rec(2).set]] = 2"});
#line 438
   testRunner.And("the \"Delete Record1\" in WorkFlow \"Recordset - Delete Records\" debug inputs as", ((string)(null)), table587, "And ");
#line hidden
                TechTalk.SpecFlow.Table table588 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table588.AddRow(new string[] {
                            "[[result]] = Success"});
#line 441
   testRunner.And("the \"Delete Record1\" in Workflow \"Recordset - Delete Records\" debug outputs as", ((string)(null)), table588, "And ");
#line hidden
                TechTalk.SpecFlow.Table table589 = new TechTalk.SpecFlow.Table(new string[] {
                            "Records"});
                table589.AddRow(new string[] {
                            "[[rec(1).set]] = 1"});
                table589.AddRow(new string[] {
                            "[[rec(3).set]] = 3"});
#line 444
   testRunner.And("the \"Delete Record2\" in WorkFlow \"Recordset - Delete Records\" debug inputs as", ((string)(null)), table589, "And ");
#line hidden
                TechTalk.SpecFlow.Table table590 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table590.AddRow(new string[] {
                            "[[result]] = Success"});
#line 448
   testRunner.And("the \"Delete Record2\" in Workflow \"Recordset - Delete Records\" debug outputs as", ((string)(null)), table590, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Recordset - Find Records example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingRecordset_FindRecordsExampleWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Recordset - Find Records example workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 453
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 454
   testRunner.Given("I have a workflow \"Recordset - Find Records Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table591 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 455
   testRunner.And("\"Recordset - Find Records Test\" contains \"Recordset - Find Records\" from server \"" +
                        "localhost\" with mapping as", ((string)(null)), table591, "And ");
#line hidden
#line 457
   testRunner.When("\"Recordset - Find Records Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 458
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table592 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table592.AddRow(new string[] {
                            "[[Results]] = 6,8"});
#line 459
   testRunner.And("the \"Find Record Index (2)\" in Workflow \"Recordset - Find Records\" debug outputs " +
                        "as", ((string)(null)), table592, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Recordset - Sort Records example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingRecordset_SortRecordsExampleWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Recordset - Sort Records example workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 464
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 465
   testRunner.Given("I have a workflow \"Recordset - Sort Records Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table593 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 466
   testRunner.And("\"Recordset - Sort Records Test\" contains \"Recordset - Sort Records\" from server \"" +
                        "localhost\" with mapping as", ((string)(null)), table593, "And ");
#line hidden
#line 468
   testRunner.When("\"Recordset - Sort Records Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 469
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table594 = new TechTalk.SpecFlow.Table(new string[] {
                            "Sort Field",
                            "Sort Order"});
                table594.AddRow(new string[] {
                            "[[rec(1).set]] = 2",
                            ""});
                table594.AddRow(new string[] {
                            "[[rec(2).set]] = x",
                            ""});
                table594.AddRow(new string[] {
                            "[[rec(3).set]] = 3",
                            ""});
                table594.AddRow(new string[] {
                            "[[rec(4).set]] = c",
                            ""});
                table594.AddRow(new string[] {
                            "[[rec(5).set]] = y",
                            ""});
                table594.AddRow(new string[] {
                            "[[rec(6).set]] = 0",
                            ""});
                table594.AddRow(new string[] {
                            "[[rec(7).set]] = a",
                            ""});
                table594.AddRow(new string[] {
                            "[[rec(8).set]] = b",
                            ""});
                table594.AddRow(new string[] {
                            "[[rec(9).set]] = 1",
                            ""});
                table594.AddRow(new string[] {
                            "[[rec(10).set]] =z",
                            "Forward"});
#line 470
   testRunner.And("the \"Sort Records1\" in WorkFlow \"Recordset - Sort Records\" debug inputs as", ((string)(null)), table594, "And ");
#line hidden
                TechTalk.SpecFlow.Table table595 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table595.AddRow(new string[] {
                            "[[rec(1).set]] = 0"});
                table595.AddRow(new string[] {
                            "[[rec(2).set]] = 1"});
                table595.AddRow(new string[] {
                            "[[rec(3).set]] = 2"});
                table595.AddRow(new string[] {
                            "[[rec(4).set]] = 3"});
                table595.AddRow(new string[] {
                            "[[rec(5).set]] = a"});
                table595.AddRow(new string[] {
                            "[[rec(6).set]] = b"});
                table595.AddRow(new string[] {
                            "[[rec(7).set]] = c"});
                table595.AddRow(new string[] {
                            "[[rec(8).set]] = x"});
                table595.AddRow(new string[] {
                            "[[rec(9).set]] = y"});
                table595.AddRow(new string[] {
                            "[[rec(10).set]] =z"});
#line 482
   testRunner.And("the \"Sort Records1\" in Workflow \"Recordset - Sort Records\" debug outputs as", ((string)(null)), table595, "And ");
#line hidden
                TechTalk.SpecFlow.Table table596 = new TechTalk.SpecFlow.Table(new string[] {
                            "Sort Field",
                            "Sort Order"});
                table596.AddRow(new string[] {
                            "[[rec(1).set]] = 0",
                            ""});
                table596.AddRow(new string[] {
                            "[[rec(2).set]] = 1",
                            ""});
                table596.AddRow(new string[] {
                            "[[rec(3).set]] = 2",
                            ""});
                table596.AddRow(new string[] {
                            "[[rec(4).set]] = 3",
                            ""});
                table596.AddRow(new string[] {
                            "[[rec(5).set]] = a",
                            ""});
                table596.AddRow(new string[] {
                            "[[rec(6).set]] = b",
                            ""});
                table596.AddRow(new string[] {
                            "[[rec(7).set]] = c",
                            ""});
                table596.AddRow(new string[] {
                            "[[rec(8).set]] = x",
                            ""});
                table596.AddRow(new string[] {
                            "[[rec(9).set]] = y",
                            ""});
                table596.AddRow(new string[] {
                            "[[rec(10).set]] =z",
                            "Backwards"});
#line 494
   testRunner.And("the \"Sort Records2\" in WorkFlow \"Recordset - Sort Records\" debug inputs as", ((string)(null)), table596, "And ");
#line hidden
                TechTalk.SpecFlow.Table table597 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table597.AddRow(new string[] {
                            "[[rec(1).set]] = z"});
                table597.AddRow(new string[] {
                            "[[rec(2).set]] = y"});
                table597.AddRow(new string[] {
                            "[[rec(3).set]] = x"});
                table597.AddRow(new string[] {
                            "[[rec(4).set]] = c"});
                table597.AddRow(new string[] {
                            "[[rec(5).set]] = b"});
                table597.AddRow(new string[] {
                            "[[rec(6).set]] = a"});
                table597.AddRow(new string[] {
                            "[[rec(7).set]] = 3"});
                table597.AddRow(new string[] {
                            "[[rec(8).set]] = 2"});
                table597.AddRow(new string[] {
                            "[[rec(9).set]] = 1"});
                table597.AddRow(new string[] {
                            "[[rec(10).set]] = 0"});
#line 506
   testRunner.And("the \"Sort Records2\" in Workflow \"Recordset - Sort Records\" debug outputs as", ((string)(null)), table597, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Recordset - Unique Records example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingRecordset_UniqueRecordsExampleWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Recordset - Unique Records example workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 520
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 521
   testRunner.Given("I have a workflow \"Recordset - Unique Records Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table598 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 522
   testRunner.And("\"Recordset - Unique Records Test\" contains \"Recordset - Unique Records\" from serv" +
                        "er \"localhost\" with mapping as", ((string)(null)), table598, "And ");
#line hidden
#line 524
   testRunner.When("\"Recordset - Unique Records Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 525
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table599 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "Return Fields"});
                table599.AddRow(new string[] {
                            "In Field(s)",
                            "[[Example(4).FirstName]] = Jerome",
                            "[[Example().Index]] ="});
#line 526
   testRunner.And("the \"Unique Records1\" in WorkFlow \"Recordset - Unique Records\" debug inputs as", ((string)(null)), table599, "And ");
#line hidden
                TechTalk.SpecFlow.Table table600 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            ""});
                table600.AddRow(new string[] {
                            "1",
                            "[[Result(1).example1]] = 1"});
                table600.AddRow(new string[] {
                            "",
                            "[[Result(2).example1]] = 4"});
#line 529
    testRunner.And("the \"Unique Records1\" in Workflow \"Recordset - Unique Records\" debug outputs as", ((string)(null)), table600, "And ");
#line hidden
                TechTalk.SpecFlow.Table table601 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            "",
                            "Return Fields"});
                table601.AddRow(new string[] {
                            "In Field(s)",
                            "[[Example(4).FirstName]] = Jerome",
                            ""});
                table601.AddRow(new string[] {
                            "",
                            "[[Example(4).LastName]] = Smit",
                            "[[Example().Index]] ="});
#line 533
      testRunner.And("the \"Unique Records2\" in WorkFlow \"Recordset - Unique Records\" debug inputs as", ((string)(null)), table601, "And ");
#line hidden
                TechTalk.SpecFlow.Table table602 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            ""});
                table602.AddRow(new string[] {
                            "1",
                            "[[Result(1).example2]] = 1"});
                table602.AddRow(new string[] {
                            "",
                            "[[Result(2).example2]] = 2"});
                table602.AddRow(new string[] {
                            "",
                            "[[Result(3).example2]] = 4"});
#line 537
    testRunner.And("the \"Unique Records2\" in Workflow \"Recordset - Unique Records\" debug outputs as", ((string)(null)), table602, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Control Flow - Sequence example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingControlFlow_SequenceExampleWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Control Flow - Sequence example workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 544
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 545
   testRunner.Given("I have a workflow \"Control Flow - Sequence Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table603 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 546
   testRunner.And("\"Control Flow - Sequence Test\" contains \"Control Flow - Sequence\" from server \"lo" +
                        "calhost\" with mapping as", ((string)(null)), table603, "And ");
#line hidden
#line 548
   testRunner.When("\"Control Flow - Sequence Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 549
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table604 = new TechTalk.SpecFlow.Table(new string[] {
                            "#",
                            ""});
                table604.AddRow(new string[] {
                            "1",
                            "[[TempCustomers(1).FirstName]] = bart"});
                table604.AddRow(new string[] {
                            "",
                            "[[TempCustomers(2).FirstName]] = homer"});
                table604.AddRow(new string[] {
                            "",
                            "[[TempCustomers(3).FirstName]] = marge"});
                table604.AddRow(new string[] {
                            "",
                            "[[TempCustomers(4).FirstName]] = lisa"});
                table604.AddRow(new string[] {
                            "",
                            "[[TempCustomers(5).FirstName]] = maggie"});
                table604.AddRow(new string[] {
                            "2",
                            "[[TempCustomers(1).LastName]] = simpson"});
                table604.AddRow(new string[] {
                            "",
                            "[[TempCustomers(2).LastName]] = simpson"});
                table604.AddRow(new string[] {
                            "",
                            "[[TempCustomers(3).LastName]] = simpson"});
                table604.AddRow(new string[] {
                            "",
                            "[[TempCustomers(4).LastName]] = simpson"});
                table604.AddRow(new string[] {
                            "",
                            "[[TempCustomers(5).LastName]] = simpson"});
                table604.AddRow(new string[] {
                            "3",
                            "[[TempCustomers(1).Email]] = bart.simpson@couch.com"});
                table604.AddRow(new string[] {
                            "",
                            "[[TempCustomers(2).Email]] = homer.simpson@couch.com"});
                table604.AddRow(new string[] {
                            "",
                            "[[TempCustomers(3).Email]] = marge.simpson@couch.com"});
                table604.AddRow(new string[] {
                            "",
                            "[[TempCustomers(4).Email]] = lisa.simpson@couch.com"});
                table604.AddRow(new string[] {
                            "",
                            "[[TempCustomers(5).Email]] = maggie.simpson@couch.com"});
#line 550
      testRunner.And("the \"Split Names (3)\" in Workflow \"Organize Customers\" debug outputs as", ((string)(null)), table604, "And ");
#line hidden
                TechTalk.SpecFlow.Table table605 = new TechTalk.SpecFlow.Table(new string[] {
                            "Sort Field",
                            "Sort Order"});
                table605.AddRow(new string[] {
                            "[[Customers(1).FirstName]] = bart",
                            ""});
                table605.AddRow(new string[] {
                            "[[Customers(2).FirstName]] = homer",
                            ""});
                table605.AddRow(new string[] {
                            "[[Customers(3).FirstName]] = marge",
                            ""});
                table605.AddRow(new string[] {
                            "[[Customers(4).FirstName]] = lisa",
                            ""});
                table605.AddRow(new string[] {
                            "[[Customers(5).FirstName]] = maggie",
                            "Forward"});
#line 567
    testRunner.And("the \"Sort Names Alphabetically\" in WorkFlow \"Organize Customers\" debug inputs as", ((string)(null)), table605, "And ");
#line hidden
                TechTalk.SpecFlow.Table table606 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table606.AddRow(new string[] {
                            "[[Customers(1).FirstName]] = bart"});
                table606.AddRow(new string[] {
                            "[[Customers(2).FirstName]] = homer"});
                table606.AddRow(new string[] {
                            "[[Customers(3).FirstName]] = lisa"});
                table606.AddRow(new string[] {
                            "[[Customers(4).FirstName]] = maggie"});
                table606.AddRow(new string[] {
                            "[[Customers(5).FirstName]] = marge"});
#line 574
    testRunner.And("the \"Sort Names Alphabetically\" in Workflow \"Organize Customers\" debug outputs as" +
                        "", ((string)(null)), table606, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Control Flow - Decision example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingControlFlow_DecisionExampleWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Control Flow - Decision example workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 583
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 584
   testRunner.Given("I have a workflow \"Control Flow - Decision Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table607 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 585
   testRunner.And("\"Control Flow - Decision Test\" contains \"Control Flow - Decision\" from server \"lo" +
                        "calhost\" with mapping as", ((string)(null)), table607, "And ");
#line hidden
#line 587
   testRunner.When("\"Control Flow - Decision Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 588
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Control Flow - Switch example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingControlFlow_SwitchExampleWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Control Flow - Switch example workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 591
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 592
   testRunner.Given("I have a workflow \"Control Flow - Switch Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table608 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 593
   testRunner.And("\"Control Flow - Switch Test\" contains \"Control Flow - Switch\" from server \"localh" +
                        "ost\" with mapping as", ((string)(null)), table608, "And ");
#line hidden
#line 595
   testRunner.When("\"Control Flow - Switch Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 596
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table609 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table609.AddRow(new string[] {
                            "4"});
#line 597
   testRunner.And("the \"[[DiceRollValue]]\" in Workflow \"Control Flow - Switch\" debug outputs as", ((string)(null)), table609, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Scripting - Ruby example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingScripting_RubyExampleWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Scripting - Ruby example workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 602
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 603
   testRunner.Given("I have a workflow \"Scripting - Ruby Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table610 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 604
   testRunner.And("\"Scripting - Ruby Test\" contains \"Scripting - Ruby\" from server \"localhost\" with " +
                        "mapping as", ((string)(null)), table610, "And ");
#line hidden
#line 606
   testRunner.When("\"Scripting - Ruby Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 607
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table611 = new TechTalk.SpecFlow.Table(new string[] {
                            "Language",
                            "Script"});
                table611.AddRow(new string[] {
                            "Ruby",
                            "sleep(5)"});
#line 608
   testRunner.And("the \"Ruby\" in WorkFlow \"Scripting - Ruby\" debug inputs as", ((string)(null)), table611, "And ");
#line hidden
                TechTalk.SpecFlow.Table table612 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table612.AddRow(new string[] {
                            "[[RubyResult]] = 5"});
#line 611
   testRunner.And("the \"Ruby\" in Workflow \"Scripting - Ruby\" debug outputs as", ((string)(null)), table612, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Scripting - Python example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingScripting_PythonExampleWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Scripting - Python example workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 616
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 617
   testRunner.Given("I have a workflow \"Scripting - Python Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table613 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 618
   testRunner.And("\"Scripting - Python Test\" contains \"Scripting - Python\" from server \"localhost\" w" +
                        "ith mapping as", ((string)(null)), table613, "And ");
#line hidden
#line 620
   testRunner.When("\"Scripting - Python Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 621
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table614 = new TechTalk.SpecFlow.Table(new string[] {
                            "Language",
                            "Script"});
                table614.AddRow(new string[] {
                            "Python",
                            "String = String"});
#line 622
    testRunner.And("the \"Python\" in WorkFlow \"Scripting - Python\" debug inputs as", ((string)(null)), table614, "And ");
#line hidden
                TechTalk.SpecFlow.Table table615 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table615.AddRow(new string[] {
                            "[[PythonResult]] = not one or two"});
#line 625
   testRunner.And("the \"Python\" in Workflow \"Scripting - Python\" debug outputs as", ((string)(null)), table615, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Scripting - Javascript example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public void ExampleExecutingScripting_JavascriptExampleWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "ExampleWorkflowExecution"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Scripting - Javascript example workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 630
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 631
   testRunner.Given("I have a workflow \"Scripting - JavaScript Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table616 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input to Service",
                            "From Variable",
                            "Output from Service",
                            "To Variable"});
#line 632
   testRunner.And("\"Scripting - JavaScript Test\" contains \"Scripting - JavaScript\" from server \"loca" +
                        "lhost\" with mapping as", ((string)(null)), table616, "And ");
#line hidden
#line 634
   testRunner.When("\"Scripting - JavaScript Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 635
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table617 = new TechTalk.SpecFlow.Table(new string[] {
                            "Language",
                            "Script"});
                table617.AddRow(new string[] {
                            "JavaScript",
                            "String = String"});
#line 636
    testRunner.And("the \"JavaScript\" in WorkFlow \"Scripting - JavaScript\" debug inputs as", ((string)(null)), table617, "And ");
#line hidden
                TechTalk.SpecFlow.Table table618 = new TechTalk.SpecFlow.Table(new string[] {
                            ""});
                table618.AddRow(new string[] {
                            "[[JavaScriptResult]] = 7"});
#line 639
   testRunner.And("the \"JavaScript\" in Workflow \"Scripting - JavaScript\" debug outputs as", ((string)(null)), table618, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
