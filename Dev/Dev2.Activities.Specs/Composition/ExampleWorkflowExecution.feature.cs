// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dev2.Activities.Specs.Composition
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ExampleWorkflowExecutionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ExampleWorkflowExecution.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ExampleWorkflowExecution", "\tIn order to execute an Example Workflow\r\n\tAs a Warewolf user\r\n\tI want to be able" +
                    " to build workflows that contain one of the example workflows", ProgrammingLanguage.CSharp, new string[] {
                        "ExampleWorkflowExecution"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "ExampleWorkflowExecution")))
            {
                Dev2.Activities.Specs.Composition.ExampleWorkflowExecutionFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line 8
   testRunner.Given("Debug events are reset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
   testRunner.And("All environments disconnected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
   testRunner.And("Debug states are cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Utility - Format Number example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingUtility_FormatNumberExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Utility - Format Number example workflow", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 13
   testRunner.Given("I have a workflow \"Utility - Format Number Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 14
   testRunner.And("\"Utility - Format Number Test\" contains \"Utility - Format Number\" from server \"lo" +
                    "calhost\" with mapping as", ((string)(null)), table1, "And ");
#line 16
   testRunner.When("\"Utility - Format Number Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table2.AddRow(new string[] {
                        "123.446",
                        "Normal",
                        "2",
                        "2"});
#line 18
   testRunner.And("the \"Format Number1\" in WorkFlow \"Utility - Format Number\" debug inputs as", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table3.AddRow(new string[] {
                        "[[Price]] = 123.45"});
#line 21
   testRunner.And("the \"Format Number1\" in Workflow \"Utility - Format Number\" debug outputs as", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table4.AddRow(new string[] {
                        "14649",
                        "Up",
                        "-2",
                        "-3"});
#line 24
    testRunner.And("the \"Format Number2\" in WorkFlow \"Utility - Format Number\" debug inputs as", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table5.AddRow(new string[] {
                        "[[PriceInK]] = 14"});
#line 27
   testRunner.And("the \"Format Number2\" in Workflow \"Utility - Format Number\" debug outputs as", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Utility - Random example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingUtility_RandomExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Utility - Random example workflow", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 33
   testRunner.Given("I have a workflow \"Utility - Random Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 34
   testRunner.And("\"Utility - Random Test\" contains \"Utility - Random\" from server \"localhost\" with " +
                    "mapping as", ((string)(null)), table6, "And ");
#line 36
   testRunner.When("\"Utility - Random Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table7.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "6"});
#line 38
   testRunner.And("the \"Random1\" in WorkFlow \"Utility - Random\" debug inputs as", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table8.AddRow(new string[] {
                        "[[DiceRoll]] = Int32"});
#line 41
   testRunner.And("the \"Random1\" in Workflow \"Utility - Random\" debug outputs as", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "Length"});
            table9.AddRow(new string[] {
                        "Letters",
                        "7"});
#line 44
     testRunner.And("the \"Random2\" in WorkFlow \"Utility - Random\" debug inputs as", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table10.AddRow(new string[] {
                        "[[Scrabble]] = String"});
#line 47
   testRunner.And("the \"Random2\" in Workflow \"Utility - Random\" debug outputs as", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random"});
            table11.AddRow(new string[] {
                        "GUID"});
#line 50
      testRunner.And("the \"Random3\" in WorkFlow \"Utility - Random\" debug inputs as", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table12.AddRow(new string[] {
                        "[[License]] = String"});
#line 53
   testRunner.And("the \"Random3\" in Workflow \"Utility - Random\" debug outputs as", ((string)(null)), table12, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Utility - Date and Time example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingUtility_DateAndTimeExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Utility - Date and Time example workflow", ((string[])(null)));
#line 58
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 59
   testRunner.Given("I have a workflow \"Utility - Date and Time Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 60
   testRunner.And("\"Utility - Date and Time Test\" contains \"Utility - Date and Time\" from server \"lo" +
                    "calhost\" with mapping as", ((string)(null)), table13, "And ");
#line 62
   testRunner.When("\"Utility - Date and Time Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "=",
                        "Input Format",
                        "=",
                        "Add Time",
                        "",
                        "Output Format",
                        "="});
            table14.AddRow(new string[] {
                        "System Date Time",
                        "DateTime",
                        "System Date Time Format",
                        "yyyy/MM/dd hh:mm:ss tt",
                        "\"\"",
                        "",
                        "System Date Time Format",
                        "yyyy/MM/dd hh:mm:ss tt"});
#line 64
   testRunner.And("the \"Date and Time(1)\" in WorkFlow \"Utility - Date and Time\" debug inputs as", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table15.AddRow(new string[] {
                        "[[nowish]] = DateTime"});
#line 67
   testRunner.And("the \"Date and Time(1)\" in Workflow \"Utility - Date and Time\" debug outputs as", ((string)(null)), table15, "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "=",
                        "Add Time",
                        "",
                        "Output Format"});
            table16.AddRow(new string[] {
                        "[[nowish]] = DateTime",
                        "System Date Time Format",
                        "yyyy/MM/dd hh:mm:ss tt",
                        "\"\"",
                        "",
                        "mm/dd/yy 12h:min am/pm"});
#line 70
  testRunner.And("the \"Date and Time(2)\" in WorkFlow \"Utility - Date and Time\" debug inputs as", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table17.AddRow(new string[] {
                        "[[nowishNewFormat]] = DateTime"});
#line 73
   testRunner.And("the \"Date and Time(2)\" in Workflow \"Utility - Date and Time\" debug outputs as", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table18.AddRow(new string[] {
                        "Sunday, 23 July 78",
                        "DW, dd MM yy",
                        "Minutes",
                        "46664",
                        "mm/dd/yyyy 12h:min am/pm"});
#line 76
   testRunner.And("the \"Date and Time(3)\" in WorkFlow \"Utility - Date and Time\" debug inputs as", ((string)(null)), table18, "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table19.AddRow(new string[] {
                        "[[SomeTimeBack]] = DateTime"});
#line 79
   testRunner.And("the \"Date and Time(3)\" in Workflow \"Utility - Date and Time\" debug outputs as", ((string)(null)), table19, "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table20.AddRow(new string[] {
                        "am",
                        "am/pm",
                        "\"\"",
                        "",
                        "mm/dd/yyyy 12h:min:ss.sp am/pm"});
#line 82
  testRunner.And("the \"Date and Time(4)\" in WorkFlow \"Utility - Date and Time\" debug inputs as", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table21.AddRow(new string[] {
                        "[[TheDefaultDate]] = DateTime"});
#line 85
   testRunner.And("the \"Date and Time(4)\" in Workflow \"Utility - Date and Time\" debug outputs as", ((string)(null)), table21, "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "=",
                        "Input Format",
                        "=",
                        "Add Time",
                        "",
                        "Output Format"});
            table22.AddRow(new string[] {
                        "System Date Time",
                        "DateTime",
                        "System Date Time Format",
                        "yyyy/MM/dd hh:mm:ss tt",
                        "\"\"",
                        "",
                        "\"\'Date format yyyy MM dd yields : \' yyyy MM dd"});
#line 88
   testRunner.And("the \"Date and Time(5)\" in WorkFlow \"Utility - Date and Time\" debug inputs as", ((string)(null)), table22, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Utility - Gather System Information example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingUtility_GatherSystemInformationExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Utility - Gather System Information example workflow", ((string[])(null)));
#line 92
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 93
   testRunner.Given("I have a workflow \"Utility - System Information Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 94
   testRunner.And("\"Utility - System Information Test\" contains \"Utility - System Information\" from " +
                    "server \"localhost\" with mapping as", ((string)(null)), table23, "And ");
#line 96
   testRunner.When("\"Utility - System Information Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 97
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "1",
                        "[[DateTime]] =",
                        "Date & Time"});
            table24.AddRow(new string[] {
                        "2",
                        "[[OpSystem]]  =",
                        "Operating System"});
            table24.AddRow(new string[] {
                        "3",
                        "[[SP]] =",
                        "Service Pack"});
            table24.AddRow(new string[] {
                        "4",
                        "[[Bit]] =",
                        "32/64 Bit"});
            table24.AddRow(new string[] {
                        "5",
                        "[[DateTimeFormat]] =",
                        "Date & Time Format"});
            table24.AddRow(new string[] {
                        "6",
                        "[[DiskAvailable]] =",
                        "Disk Available (GB)"});
            table24.AddRow(new string[] {
                        "7",
                        "[[DiskTotal]]  =",
                        "Disk Total (GB)"});
            table24.AddRow(new string[] {
                        "8",
                        "[[RAMAvailable]] =",
                        "RAM Available (MB)"});
            table24.AddRow(new string[] {
                        "9",
                        "[[RAMTotal]]  =",
                        "RAM Total (MB)"});
            table24.AddRow(new string[] {
                        "10",
                        "[[CPUAvailable]] =",
                        "CPU Available"});
            table24.AddRow(new string[] {
                        "11",
                        "[[CPUTotal]]  =",
                        "CPU Total"});
            table24.AddRow(new string[] {
                        "12",
                        "[[Language]] =",
                        "Language"});
            table24.AddRow(new string[] {
                        "13",
                        "[[Region]] =",
                        "Region"});
            table24.AddRow(new string[] {
                        "14",
                        "[[UserRoles]] =",
                        "User Roles"});
            table24.AddRow(new string[] {
                        "15",
                        "[[UserName]] =",
                        "User Name"});
            table24.AddRow(new string[] {
                        "16",
                        "[[Domain]] =",
                        "Domain"});
            table24.AddRow(new string[] {
                        "17",
                        "[[Agents]] =",
                        "Warewolf Agents"});
#line 98
   testRunner.And("the \"Gather System Information (17)\" in WorkFlow \"Utility - System Information\" d" +
                    "ebug inputs as", ((string)(null)), table24, "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table25.AddRow(new string[] {
                        "1",
                        "[[DateTime]]      =    String"});
            table25.AddRow(new string[] {
                        "2",
                        "[[OpSystem]]      =    String"});
            table25.AddRow(new string[] {
                        "3",
                        "[[SP]]            =    String"});
            table25.AddRow(new string[] {
                        "4",
                        "[[Bit]]           =    String"});
            table25.AddRow(new string[] {
                        "5",
                        "[[DateTimeFormat]] =    String"});
            table25.AddRow(new string[] {
                        "6",
                        "[[DiskAvailable]] =    String"});
            table25.AddRow(new string[] {
                        "7",
                        "[[DiskTotal]]     =    String"});
            table25.AddRow(new string[] {
                        "8",
                        "[[RAMAvailable]]  =    String"});
            table25.AddRow(new string[] {
                        "9",
                        "[[RAMTotal]]      =    String"});
            table25.AddRow(new string[] {
                        "10",
                        "[[CPUAvailable]]  =    String"});
            table25.AddRow(new string[] {
                        "11",
                        "[[CPUTotal]]      =    String"});
            table25.AddRow(new string[] {
                        "12",
                        "[[Language]]      =    String"});
            table25.AddRow(new string[] {
                        "13",
                        "[[Region]]        =    String"});
            table25.AddRow(new string[] {
                        "14",
                        "[[UserRoles]]     =    String"});
            table25.AddRow(new string[] {
                        "15",
                        "[[UserName]]      =    String"});
            table25.AddRow(new string[] {
                        "16",
                        "[[Domain]]        =    String"});
            table25.AddRow(new string[] {
                        "17",
                        "[[Agents]]        =    String"});
#line 117
  testRunner.And("the \"Gather System Information (17)\" in Workflow \"Utility - System Information\" d" +
                    "ebug outputs as", ((string)(null)), table25, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Utility - Web Request example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingUtility_WebRequestExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Utility - Web Request example workflow", ((string[])(null)));
#line 138
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 139
   testRunner.Given("I have a workflow \"Utility - Web Request Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 140
   testRunner.And("\"Utility - Web Request Test\" contains \"Utility - Web Request\" from server \"localh" +
                    "ost\" with mapping as", ((string)(null)), table26, "And ");
#line 142
   testRunner.When("\"Utility - Web Request Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 143
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "URL",
                        "Header",
                        "Time Out Seconds"});
            table27.AddRow(new string[] {
                        "https://warewolf.io/",
                        "",
                        "100"});
#line 144
   testRunner.And("the \"Web Request 1\" in WorkFlow \"Utility - Web Request\" debug inputs as", ((string)(null)), table27, "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table28.AddRow(new string[] {
                        "[[WarewolfHome]] = String"});
#line 147
   testRunner.And("the \"Web Request 1\" in Workflow \"Utility - Web Request\" debug outputs as", ((string)(null)), table28, "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "URL",
                        "Header",
                        "Time Out Seconds"});
            table29.AddRow(new string[] {
                        "http://maps.googleapis.com/maps/api/geocode/xml?address=[[BartsAddress]]&sensor=f" +
                            "alse = String",
                        "",
                        "100"});
#line 150
   testRunner.And("the \"Web Request 2\" in WorkFlow \"Utility - Web Request\" debug inputs as", ((string)(null)), table29, "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table30.AddRow(new string[] {
                        "[[GecodedAddress]] = String"});
#line 153
   testRunner.And("the \"Web Request 2\" in Workflow \"Utility - Web Request\" debug outputs as", ((string)(null)), table30, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Utility - Assign example workflows")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingUtility_AssignExampleWorkflows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Utility - Assign example workflows", ((string[])(null)));
#line 157
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 158
   testRunner.Given("I have a workflow \"Test Example Utility - Assign\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table31.AddRow(new string[] {
                        "",
                        "",
                        "rec(*).set",
                        "[[rec().set]]"});
            table31.AddRow(new string[] {
                        "",
                        "",
                        "hero(*).pushups",
                        "[[hero().pushups]]"});
            table31.AddRow(new string[] {
                        "",
                        "",
                        "hero(*).name",
                        "[[hero().name]]"});
#line 159
   testRunner.And("\"Test Example Utility - Assign\" contains \"Utility - Assign\" from server \"localhos" +
                    "t\" with mapping as", ((string)(null)), table31, "And ");
#line 164
   testRunner.When("\"Test Example Utility - Assign\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 165
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table32.AddRow(new string[] {
                        "[[rec(1).set]] = Bart Simpson: I WILL NOT INSTIGATE REVOLUTION"});
            table32.AddRow(new string[] {
                        "[[hero(1).pushups]] = All of them."});
            table32.AddRow(new string[] {
                        "[[hero(1).name]] = Chuck Norris"});
#line 166
   testRunner.And("the \"Utility - Assign\" in Workflow \"Test Example Utility - Assign\" debug outputs " +
                    "as", ((string)(null)), table32, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Data - Base Conversion example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingData_BaseConversionExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Data - Base Conversion example workflow", ((string[])(null)));
#line 174
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 175
   testRunner.Given("I have a workflow \"Data - Base Conversion Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 176
   testRunner.And("\"Data - Base Conversion Test\" contains \"Data - Base Conversion\" from server \"loca" +
                    "lhost\" with mapping as", ((string)(null)), table33, "And ");
#line 178
   testRunner.When("\"Data - Base Conversion Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 179
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table34.AddRow(new string[] {
                        "1",
                        "[[Blob]] = 0100100100100000011101110110000101110011001000000110110101100001011011" +
                            "1001100111011011000110010101100100",
                        "Binary",
                        "Text"});
#line 180
   testRunner.And("the \"Base Conversion (1)\" in WorkFlow \"Data - Base Conversion\" debug inputs as", ((string)(null)), table34, "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table35.AddRow(new string[] {
                        "1",
                        "[[Blob]] = I was mangled"});
#line 183
   testRunner.And("the \"Base Conversion (1)\" in Workflow \"Data - Base Conversion\" debug outputs as", ((string)(null)), table35, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Data - Case Conversion example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingData_CaseConversionExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Data - Case Conversion example workflow", ((string[])(null)));
#line 188
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 189
   testRunner.Given("I have a workflow \"Data - Case Conversion Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 190
   testRunner.And("\"Data - Case Conversion Test\" contains \"Data - Case Conversion\" from server \"loca" +
                    "lhost\" with mapping as", ((string)(null)), table36, "And ");
#line 192
   testRunner.When("\"Data - Case Conversion Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 193
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table37.AddRow(new string[] {
                        "1",
                        "[[sometext]] = gET reaDy FoR sOme Text CONVersionS",
                        "UPPER"});
#line 194
   testRunner.And("the \"Case Conversion1 (1)\" in WorkFlow \"Data - Case Conversion\" debug inputs as", ((string)(null)), table37, "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table38.AddRow(new string[] {
                        "1",
                        "[[sometext]] = GET READY FOR SOME TEXT CONVERSIONS"});
#line 197
   testRunner.And("the \"Case Conversion1 (1)\" in Workflow \"Data - Case Conversion\" debug outputs as", ((string)(null)), table38, "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table39.AddRow(new string[] {
                        "1",
                        "[[sometext]] = GET READY FOR SOME TEXT CONVERSIONS",
                        "lower"});
#line 200
    testRunner.And("the \"Case Conversion2 (1)\" in WorkFlow \"Data - Case Conversion\" debug inputs as", ((string)(null)), table39, "And ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table40.AddRow(new string[] {
                        "1",
                        "[[sometext]] = get ready for some text conversions"});
#line 203
   testRunner.And("the \"Case Conversion2 (1)\" in Workflow \"Data - Case Conversion\" debug outputs as", ((string)(null)), table40, "And ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table41.AddRow(new string[] {
                        "1",
                        "[[sometext]] = get ready for some text conversions",
                        "Sentence"});
#line 206
    testRunner.And("the \"Case Conversion3 (1)\" in WorkFlow \"Data - Case Conversion\" debug inputs as", ((string)(null)), table41, "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table42.AddRow(new string[] {
                        "1",
                        "[[sometext]] = Get ready for some text conversions"});
#line 209
   testRunner.And("the \"Case Conversion3 (1)\" in Workflow \"Data - Case Conversion\" debug outputs as", ((string)(null)), table42, "And ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table43.AddRow(new string[] {
                        "1",
                        "[[sometext]] = Get ready for some text conversions",
                        "Title Case"});
#line 212
      testRunner.And("the \"Case Conversion4 (1)\" in WorkFlow \"Data - Case Conversion\" debug inputs as", ((string)(null)), table43, "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table44.AddRow(new string[] {
                        "1",
                        "[[sometext]] = Get Ready For Some Text Conversions"});
#line 215
   testRunner.And("the \"Case Conversion4 (1)\" in Workflow \"Data - Case Conversion\" debug outputs as", ((string)(null)), table44, "And ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table45.AddRow(new string[] {
                        "1",
                        "[[sometext]] = 1Mixed up 5om3",
                        "UPPER"});
#line 218
      testRunner.And("the \"Case Conversion5 (1)\" in WorkFlow \"Data - Case Conversion\" debug inputs as", ((string)(null)), table45, "And ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table46.AddRow(new string[] {
                        "1",
                        "[[sometext]] = 1MIXED UP 5OM3"});
#line 221
   testRunner.And("the \"Case Conversion5 (1)\" in Workflow \"Data - Case Conversion\" debug outputs as", ((string)(null)), table46, "And ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table47.AddRow(new string[] {
                        "1",
                        "[[sometext]] = 1MIXED UP 5OM3",
                        "lower"});
#line 224
      testRunner.And("the \"Case Conversion6 (1)\" in WorkFlow \"Data - Case Conversion\" debug inputs as", ((string)(null)), table47, "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table48.AddRow(new string[] {
                        "1",
                        "[[sometext]] = 1mixed up 5om3"});
#line 227
   testRunner.And("the \"Case Conversion6 (1)\" in Workflow \"Data - Case Conversion\" debug outputs as", ((string)(null)), table48, "And ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table49.AddRow(new string[] {
                        "1",
                        "[[sometext]] = 1mixed up 5om3",
                        "Sentence"});
#line 230
      testRunner.And("the \"Case Conversion7 (1)\" in WorkFlow \"Data - Case Conversion\" debug inputs as", ((string)(null)), table49, "And ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table50.AddRow(new string[] {
                        "1",
                        "[[sometext]] = 1mixed up 5om3"});
#line 233
   testRunner.And("the \"Case Conversion7 (1)\" in Workflow \"Data - Case Conversion\" debug outputs as", ((string)(null)), table50, "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table51.AddRow(new string[] {
                        "1",
                        "[[sometext]] = 1mixed up 5om3",
                        "Title Case"});
#line 236
      testRunner.And("the \"Case Conversion8 (1)\" in WorkFlow \"Data - Case Conversion\" debug inputs as", ((string)(null)), table51, "And ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table52.AddRow(new string[] {
                        "1",
                        "[[sometext]] = 1Mixed Up 5Om3"});
#line 239
   testRunner.And("the \"Case Conversion8 (1)\" in Workflow \"Data - Case Conversion\" debug outputs as", ((string)(null)), table52, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Data - Data Merge example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingData_DataMergeExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Data - Data Merge example workflow", ((string[])(null)));
#line 244
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 245
   testRunner.Given("I have a workflow \"Data - Data Merge Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table53.AddRow(new string[] {
                        "",
                        "",
                        "FileContent",
                        "[[FileContent]]"});
#line 246
   testRunner.And("\"Data - Data Merge Test\" contains \"Data - Data Merge\" from server \"localhost\" wit" +
                    "h mapping as", ((string)(null)), table53, "And ");
#line 249
   testRunner.When("\"Data - Data Merge Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 250
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table54.AddRow(new string[] {
                        "[[FileContent]] = String"});
#line 251
   testRunner.And("the \"Data - Data Merge\" in Workflow \"Data - Data Merge\" debug outputs as", ((string)(null)), table54, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Data - Find Index example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingData_FindIndexExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Data - Find Index example workflow", ((string[])(null)));
#line 255
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 256
   testRunner.Given("I have a workflow \"Utility - Find Index Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 257
   testRunner.And("\"Utility - Find Index Test\" contains \"Data - Find Index\" from server \"localhost\" " +
                    "with mapping as", ((string)(null)), table55, "And ");
#line 259
   testRunner.When("\"Utility - Find Index Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 260
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table56.AddRow(new string[] {
                        "abc",
                        "First Occurrence",
                        "b",
                        "Left to Right"});
#line 261
   testRunner.And("the \"Find Index1\" in WorkFlow \"Data - Find Index\" debug inputs as", ((string)(null)), table56, "And ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table57.AddRow(new string[] {
                        "[[WhereIsB]] = 2"});
#line 264
   testRunner.And("the \"Find Index1\" in Workflow \"Data - Find Index\" debug outputs as", ((string)(null)), table57, "And ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table58.AddRow(new string[] {
                        "abcbdefghibjklmnop",
                        "All Occurrences",
                        "b",
                        "Left to Right"});
#line 267
   testRunner.And("the \"Find Index2\" in WorkFlow \"Data - Find Index\" debug inputs as", ((string)(null)), table58, "And ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table59.AddRow(new string[] {
                        "[[WhereAreTheBs]] = 2,4,11"});
#line 270
   testRunner.And("the \"Find Index2\" in Workflow \"Data - Find Index\" debug outputs as", ((string)(null)), table59, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing File and Folder - Copy")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingFileAndFolder_Copy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing File and Folder - Copy", ((string[])(null)));
#line 274
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 275
   testRunner.Given("I have a workflow \"File and Folder - Copy Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 276
   testRunner.And("\"File and Folder - Copy Test\" contains \"File and Folder - Copy\" from server \"loca" +
                    "lhost\" with mapping as", ((string)(null)), table60, "And ");
#line 278
   testRunner.When("\"File and Folder - Copy Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 279
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table61.AddRow(new string[] {
                        "[[Complete]] = Success"});
#line 280
   testRunner.And("the \"Copy\" in Workflow \"File and Folder - Copy\" debug outputs as", ((string)(null)), table61, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing File and Folder - Create")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingFileAndFolder_Create()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing File and Folder - Create", ((string[])(null)));
#line 284
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 285
   testRunner.Given("I have a workflow \"File and Folder - Create Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 286
   testRunner.And("\"File and Folder - Create Test\" contains \"File and Folder - Create\" from server \"" +
                    "localhost\" with mapping as", ((string)(null)), table62, "And ");
#line 288
   testRunner.When("\"File and Folder - Create Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 289
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table63.AddRow(new string[] {
                        "[[Complete]] = Success"});
#line 290
   testRunner.And("the \"Create\" in Workflow \"File and Folder - Create\" debug outputs as", ((string)(null)), table63, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing File and Folder - Delete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingFileAndFolder_Delete()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing File and Folder - Delete", ((string[])(null)));
#line 294
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 295
   testRunner.Given("I have a workflow \"File and Folder - Delete Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 296
   testRunner.And("\"File and Folder - Delete Test\" contains \"File and Folder - Delete\" from server \"" +
                    "localhost\" with mapping as", ((string)(null)), table64, "And ");
#line 298
   testRunner.When("\"File and Folder - Delete Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 299
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table65.AddRow(new string[] {
                        "[[Complete]] = Success"});
#line 300
   testRunner.And("the \"Delete\" in Workflow \"File and Folder - Delete\" debug outputs as", ((string)(null)), table65, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing File and Folder - Move")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingFileAndFolder_Move()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing File and Folder - Move", ((string[])(null)));
#line 304
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 305
   testRunner.Given("I have a workflow \"File and Folder - Move Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 306
   testRunner.And("\"File and Folder - Move Test\" contains \"File and Folder - Move\" from server \"loca" +
                    "lhost\" with mapping as", ((string)(null)), table66, "And ");
#line 308
   testRunner.When("\"File and Folder - Move Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 309
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table67.AddRow(new string[] {
                        "[[Complete]] = Success"});
#line 310
   testRunner.And("the \"Move\" in Workflow \"File and Folder - Move\" debug outputs as", ((string)(null)), table67, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing File and Folder - Read File")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingFileAndFolder_ReadFile()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing File and Folder - Read File", ((string[])(null)));
#line 314
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 315
   testRunner.Given("I have a workflow \"File and Folder - Read File Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 316
   testRunner.And("\"File and Folder - Read File Test\" contains \"File and Folder - Read File\" from se" +
                    "rver \"localhost\" with mapping as", ((string)(null)), table68, "And ");
#line 318
   testRunner.When("\"File and Folder - Read File Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 319
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table69.AddRow(new string[] {
                        "[[Logs]] = the contents of the log file"});
#line 320
   testRunner.And("the \"Read File\" in Workflow \"File and Folder - Read File\" debug outputs as", ((string)(null)), table69, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing File and Folder - Rename")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingFileAndFolder_Rename()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing File and Folder - Rename", ((string[])(null)));
#line 324
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 325
   testRunner.Given("I have a workflow \"File and Folder - Rename Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 326
   testRunner.And("\"File and Folder - Rename Test\" contains \"File and Folder - Rename\" from server \"" +
                    "localhost\" with mapping as", ((string)(null)), table70, "And ");
#line 328
   testRunner.When("\"File and Folder - Rename Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 329
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table71.AddRow(new string[] {
                        "[[Complete]] = Success"});
#line 330
   testRunner.And("the \"Rename\" in Workflow \"File and Folder - Rename\" debug outputs as", ((string)(null)), table71, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing File and Folder - Unzip")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingFileAndFolder_Unzip()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing File and Folder - Unzip", ((string[])(null)));
#line 334
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 335
   testRunner.Given("I have a workflow \"File and Folder - Unzip Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 336
   testRunner.And("\"File and Folder - Unzip Test\" contains \"File and Folder - Unzip\" from server \"lo" +
                    "calhost\" with mapping as", ((string)(null)), table72, "And ");
#line 338
   testRunner.When("\"File and Folder - Unzip Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 339
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table73.AddRow(new string[] {
                        "[[Complete]] = Success"});
#line 340
   testRunner.And("the \"UnZip\" in Workflow \"File and Folder - Unzip\" debug outputs as", ((string)(null)), table73, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing File and Folder - Write File")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingFileAndFolder_WriteFile()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing File and Folder - Write File", ((string[])(null)));
#line 344
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 345
   testRunner.Given("I have a workflow \"File and Folder - Write File Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 346
   testRunner.And("\"File and Folder - Write File Test\" contains \"File and Folder - Write File\" from " +
                    "server \"localhost\" with mapping as", ((string)(null)), table74, "And ");
#line 348
   testRunner.When("\"File and Folder - Write File Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 349
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table75.AddRow(new string[] {
                        "[[Complete]] = Success"});
#line 350
   testRunner.And("the \"Write\" in Workflow \"File and Folder - Write File\" debug outputs as", ((string)(null)), table75, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing File and Folder - Zip")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingFileAndFolder_Zip()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing File and Folder - Zip", ((string[])(null)));
#line 354
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 355
   testRunner.Given("I have a workflow \"File and Folder - Zip Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 356
   testRunner.And("\"File and Folder - Zip Test\" contains \"File and Folder - Zip\" from server \"localh" +
                    "ost\" with mapping as", ((string)(null)), table76, "And ");
#line 358
   testRunner.When("\"File and Folder - Zip Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 359
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table77.AddRow(new string[] {
                        "[[Complete]] = Success"});
#line 360
   testRunner.And("the \"Zip\" in Workflow \"File and Folder - Zip\" debug outputs as", ((string)(null)), table77, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Utility - Replace example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingUtility_ReplaceExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Utility - Replace example workflow", ((string[])(null)));
#line 364
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 365
   testRunner.Given("I have a workflow \"Utility - Replace Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 366
   testRunner.And("\"Utility - Replace Test\" contains \"Utility - Replace\" from server \"localhost\" wit" +
                    "h mapping as", ((string)(null)), table78, "And ");
#line 368
   testRunner.When("\"Utility - Replace Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 369
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table79.AddRow(new string[] {
                        "[[SomeText]] = Replace",
                        "ac",
                        "icat"});
#line 370
   testRunner.And("the \"Replace1\" in WorkFlow \"Utility - Replace\" debug inputs as", ((string)(null)), table79, "And ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table80.AddRow(new string[] {
                        "[[SomeText]] = Replicate"});
            table80.AddRow(new string[] {
                        "[[count]] = 1"});
#line 373
   testRunner.And("the \"Replace1\" in Workflow \"Utility - Replace\" debug outputs as", ((string)(null)), table80, "And ");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table81.AddRow(new string[] {
                        "[[rec(1).homeNumber]]   = +1553122442"});
            table81.AddRow(new string[] {
                        "[[rec(2).homeNumber]]   = +1554682136"});
            table81.AddRow(new string[] {
                        "[[rec(1).mobileNumber]] = +1655985781"});
            table81.AddRow(new string[] {
                        "[[rec(2).mobileNumber]] = +1985623145"});
            table81.AddRow(new string[] {
                        "[[recount]] = 3"});
#line 377
   testRunner.And("the \"Replace2\" in Workflow \"Utility - Replace\" debug outputs as", ((string)(null)), table81, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Recordset - Count Records example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingRecordset_CountRecordsExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Recordset - Count Records example workflow", ((string[])(null)));
#line 385
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 386
   testRunner.Given("I have a workflow \"Recordset - Count Records Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 387
   testRunner.And("\"Recordset - Count Records Test\" contains \"Recordset - Count Records\" from server" +
                    " \"localhost\" with mapping as", ((string)(null)), table82, "And ");
#line 389
   testRunner.When("\"Recordset - Count Records Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 390
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table83.AddRow(new string[] {
                        "[[rec(1).set]] = Warewolf"});
            table83.AddRow(new string[] {
                        "[[rec(2).set]] = SOA"});
            table83.AddRow(new string[] {
                        "[[rec(3).set]] = Recordset"});
#line 391
   testRunner.And("the \"Count Records\" in WorkFlow \"Recordset - Count Records\" debug inputs as", ((string)(null)), table83, "And ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table84.AddRow(new string[] {
                        "[[count]] = 3"});
#line 396
   testRunner.And("the \"Count Records\" in Workflow \"Recordset - Count Records\" debug outputs as", ((string)(null)), table84, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Recordset - Records Length example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingRecordset_RecordsLengthExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Recordset - Records Length example workflow", ((string[])(null)));
#line 400
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 401
   testRunner.Given("I have a workflow \"Recordset - Records Length Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 402
   testRunner.And("\"Recordset - Records Length Test\" contains \"Recordset - Records Length\" from serv" +
                    "er \"localhost\" with mapping as", ((string)(null)), table85, "And ");
#line 404
   testRunner.When("\"Recordset - Records Length Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 405
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table86.AddRow(new string[] {
                        "[[rec(1).set]] = Warewolf"});
            table86.AddRow(new string[] {
                        "[[rec(5).set]] = Recordset"});
#line 406
   testRunner.And("the \"Length1\" in WorkFlow \"Recordset - Records Length\" debug inputs as", ((string)(null)), table86, "And ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table87.AddRow(new string[] {
                        "[[length]] = 5"});
#line 410
   testRunner.And("the \"Length1\" in Workflow \"Recordset - Records Length\" debug outputs as", ((string)(null)), table87, "And ");
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table88.AddRow(new string[] {
                        "[[rec(5).set]] = Recordset"});
#line 413
   testRunner.And("the \"Length2\" in WorkFlow \"Recordset - Records Length\" debug inputs as", ((string)(null)), table88, "And ");
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table89.AddRow(new string[] {
                        "[[length]] = 5"});
#line 416
   testRunner.And("the \"Length2\" in Workflow \"Recordset - Records Length\" debug outputs as", ((string)(null)), table89, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Recordset - Delete Records example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingRecordset_DeleteRecordsExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Recordset - Delete Records example workflow", ((string[])(null)));
#line 420
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 421
   testRunner.Given("I have a workflow \"Recordset - Delete Records Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 422
   testRunner.And("\"Recordset - Delete Records Test\" contains \"Recordset - Delete Records\" from serv" +
                    "er \"localhost\" with mapping as", ((string)(null)), table90, "And ");
#line 424
   testRunner.When("\"Recordset - Delete Records Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 425
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table91.AddRow(new string[] {
                        "[[rec(2).set]] = 2"});
#line 426
   testRunner.And("the \"Delete Record1\" in WorkFlow \"Recordset - Delete Records\" debug inputs as", ((string)(null)), table91, "And ");
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table92.AddRow(new string[] {
                        "[[result]] = Success"});
#line 429
   testRunner.And("the \"Delete Record1\" in Workflow \"Recordset - Delete Records\" debug outputs as", ((string)(null)), table92, "And ");
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table93.AddRow(new string[] {
                        "[[rec(1).set]] = 1"});
            table93.AddRow(new string[] {
                        "[[rec(3).set]] = 3"});
#line 432
   testRunner.And("the \"Delete Record2\" in WorkFlow \"Recordset - Delete Records\" debug inputs as", ((string)(null)), table93, "And ");
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table94.AddRow(new string[] {
                        "[[result]] = Success"});
#line 436
   testRunner.And("the \"Delete Record2\" in Workflow \"Recordset - Delete Records\" debug outputs as", ((string)(null)), table94, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Recordset - Find Records example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingRecordset_FindRecordsExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Recordset - Find Records example workflow", ((string[])(null)));
#line 440
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 441
   testRunner.Given("I have a workflow \"Recordset - Find Records Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 442
   testRunner.And("\"Recordset - Find Records Test\" contains \"Recordset - Find Records\" from server \"" +
                    "localhost\" with mapping as", ((string)(null)), table95, "And ");
#line 444
   testRunner.When("\"Recordset - Find Records Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 445
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table96.AddRow(new string[] {
                        "[[Results]] = 6,8"});
#line 446
   testRunner.And("the \"Find Record Index (2)\" in Workflow \"Recordset - Find Records\" debug outputs " +
                    "as", ((string)(null)), table96, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Recordset - Sort Records example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingRecordset_SortRecordsExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Recordset - Sort Records example workflow", ((string[])(null)));
#line 450
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 451
   testRunner.Given("I have a workflow \"Recordset - Sort Records Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 452
   testRunner.And("\"Recordset - Sort Records Test\" contains \"Recordset - Sort Records\" from server \"" +
                    "localhost\" with mapping as", ((string)(null)), table97, "And ");
#line 454
   testRunner.When("\"Recordset - Sort Records Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 455
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table98.AddRow(new string[] {
                        "[[rec(1).set]] = 2",
                        ""});
            table98.AddRow(new string[] {
                        "[[rec(2).set]] = x",
                        ""});
            table98.AddRow(new string[] {
                        "[[rec(3).set]] = 3",
                        ""});
            table98.AddRow(new string[] {
                        "[[rec(4).set]] = c",
                        ""});
            table98.AddRow(new string[] {
                        "[[rec(5).set]] = y",
                        ""});
            table98.AddRow(new string[] {
                        "[[rec(6).set]] = 0",
                        ""});
            table98.AddRow(new string[] {
                        "[[rec(7).set]] = a",
                        ""});
            table98.AddRow(new string[] {
                        "[[rec(8).set]] = b",
                        ""});
            table98.AddRow(new string[] {
                        "[[rec(9).set]] = 1",
                        ""});
            table98.AddRow(new string[] {
                        "[[rec(10).set]] =z",
                        "Forward"});
#line 456
   testRunner.And("the \"Sort Records1\" in WorkFlow \"Recordset - Sort Records\" debug inputs as", ((string)(null)), table98, "And ");
#line hidden
            TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table99.AddRow(new string[] {
                        "[[rec(1).set]] = 0"});
            table99.AddRow(new string[] {
                        "[[rec(2).set]] = 1"});
            table99.AddRow(new string[] {
                        "[[rec(3).set]] = 2"});
            table99.AddRow(new string[] {
                        "[[rec(4).set]] = 3"});
            table99.AddRow(new string[] {
                        "[[rec(5).set]] = a"});
            table99.AddRow(new string[] {
                        "[[rec(6).set]] = b"});
            table99.AddRow(new string[] {
                        "[[rec(7).set]] = c"});
            table99.AddRow(new string[] {
                        "[[rec(8).set]] = x"});
            table99.AddRow(new string[] {
                        "[[rec(9).set]] = y"});
            table99.AddRow(new string[] {
                        "[[rec(10).set]] =z"});
#line 468
   testRunner.And("the \"Sort Records1\" in Workflow \"Recordset - Sort Records\" debug outputs as", ((string)(null)), table99, "And ");
#line hidden
            TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table100.AddRow(new string[] {
                        "[[rec(1).set]] = 0",
                        ""});
            table100.AddRow(new string[] {
                        "[[rec(2).set]] = 1",
                        ""});
            table100.AddRow(new string[] {
                        "[[rec(3).set]] = 2",
                        ""});
            table100.AddRow(new string[] {
                        "[[rec(4).set]] = 3",
                        ""});
            table100.AddRow(new string[] {
                        "[[rec(5).set]] = a",
                        ""});
            table100.AddRow(new string[] {
                        "[[rec(6).set]] = b",
                        ""});
            table100.AddRow(new string[] {
                        "[[rec(7).set]] = c",
                        ""});
            table100.AddRow(new string[] {
                        "[[rec(8).set]] = x",
                        ""});
            table100.AddRow(new string[] {
                        "[[rec(9).set]] = y",
                        ""});
            table100.AddRow(new string[] {
                        "[[rec(10).set]] =z",
                        "Backwards"});
#line 480
   testRunner.And("the \"Sort Records2\" in WorkFlow \"Recordset - Sort Records\" debug inputs as", ((string)(null)), table100, "And ");
#line hidden
            TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table101.AddRow(new string[] {
                        "[[rec(1).set]] = z"});
            table101.AddRow(new string[] {
                        "[[rec(2).set]] = y"});
            table101.AddRow(new string[] {
                        "[[rec(3).set]] = x"});
            table101.AddRow(new string[] {
                        "[[rec(4).set]] = c"});
            table101.AddRow(new string[] {
                        "[[rec(5).set]] = b"});
            table101.AddRow(new string[] {
                        "[[rec(6).set]] = a"});
            table101.AddRow(new string[] {
                        "[[rec(7).set]] = 3"});
            table101.AddRow(new string[] {
                        "[[rec(8).set]] = 2"});
            table101.AddRow(new string[] {
                        "[[rec(9).set]] = 1"});
            table101.AddRow(new string[] {
                        "[[rec(10).set]] = 0"});
#line 492
   testRunner.And("the \"Sort Records2\" in Workflow \"Recordset - Sort Records\" debug outputs as", ((string)(null)), table101, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Recordset - Unique Records example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingRecordset_UniqueRecordsExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Recordset - Unique Records example workflow", ((string[])(null)));
#line 505
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 506
   testRunner.Given("I have a workflow \"Recordset - Unique Records Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 507
   testRunner.And("\"Recordset - Unique Records Test\" contains \"Recordset - Unique Records\" from serv" +
                    "er \"localhost\" with mapping as", ((string)(null)), table102, "And ");
#line 509
   testRunner.When("\"Recordset - Unique Records Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 510
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table103.AddRow(new string[] {
                        "In Field(s)",
                        "[[Example(4).FirstName]] = Jerome",
                        "[[Example().Index]] ="});
#line 511
   testRunner.And("the \"Unique Records1\" in WorkFlow \"Recordset - Unique Records\" debug inputs as", ((string)(null)), table103, "And ");
#line hidden
            TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table104.AddRow(new string[] {
                        "1",
                        "[[Result(1).example1]] = 1"});
            table104.AddRow(new string[] {
                        "",
                        "[[Result(2).example1]] = 4"});
#line 514
    testRunner.And("the \"Unique Records1\" in Workflow \"Recordset - Unique Records\" debug outputs as", ((string)(null)), table104, "And ");
#line hidden
            TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table105.AddRow(new string[] {
                        "In Field(s)",
                        "[[Example(4).FirstName]] = Jerome",
                        ""});
            table105.AddRow(new string[] {
                        "",
                        "[[Example(4).LastName]] = Smit",
                        "[[Example().Index]] ="});
#line 518
      testRunner.And("the \"Unique Records2\" in WorkFlow \"Recordset - Unique Records\" debug inputs as", ((string)(null)), table105, "And ");
#line hidden
            TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table106.AddRow(new string[] {
                        "1",
                        "[[Result(1).example2]] = 1"});
            table106.AddRow(new string[] {
                        "",
                        "[[Result(2).example2]] = 2"});
            table106.AddRow(new string[] {
                        "",
                        "[[Result(3).example2]] = 4"});
#line 522
    testRunner.And("the \"Unique Records2\" in Workflow \"Recordset - Unique Records\" debug outputs as", ((string)(null)), table106, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Control Flow - Sequence example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingControlFlow_SequenceExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Control Flow - Sequence example workflow", ((string[])(null)));
#line 528
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 529
   testRunner.Given("I have a workflow \"Control Flow - Sequence Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 530
   testRunner.And("\"Control Flow - Sequence Test\" contains \"Control Flow - Sequence\" from server \"lo" +
                    "calhost\" with mapping as", ((string)(null)), table107, "And ");
#line 532
   testRunner.When("\"Control Flow - Sequence Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 533
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table108.AddRow(new string[] {
                        "1",
                        "[[TempCustomers(1).FirstName]] = bart"});
            table108.AddRow(new string[] {
                        "",
                        "[[TempCustomers(2).FirstName]] = homer"});
            table108.AddRow(new string[] {
                        "",
                        "[[TempCustomers(3).FirstName]] = marge"});
            table108.AddRow(new string[] {
                        "",
                        "[[TempCustomers(4).FirstName]] = lisa"});
            table108.AddRow(new string[] {
                        "",
                        "[[TempCustomers(5).FirstName]] = maggie"});
            table108.AddRow(new string[] {
                        "2",
                        "[[TempCustomers(1).LastName]] = simpson"});
            table108.AddRow(new string[] {
                        "",
                        "[[TempCustomers(2).LastName]] = simpson"});
            table108.AddRow(new string[] {
                        "",
                        "[[TempCustomers(3).LastName]] = simpson"});
            table108.AddRow(new string[] {
                        "",
                        "[[TempCustomers(4).LastName]] = simpson"});
            table108.AddRow(new string[] {
                        "",
                        "[[TempCustomers(5).LastName]] = simpson"});
            table108.AddRow(new string[] {
                        "3",
                        "[[TempCustomers(1).Email]] = bart.simpson@couch.com"});
            table108.AddRow(new string[] {
                        "",
                        "[[TempCustomers(2).Email]] = homer.simpson@couch.com"});
            table108.AddRow(new string[] {
                        "",
                        "[[TempCustomers(3).Email]] = marge.simpson@couch.com"});
            table108.AddRow(new string[] {
                        "",
                        "[[TempCustomers(4).Email]] = lisa.simpson@couch.com"});
            table108.AddRow(new string[] {
                        "",
                        "[[TempCustomers(5).Email]] = maggie.simpson@couch.com"});
#line 534
      testRunner.And("the \"Split Names (3)\" in Workflow \"Organize Customers\" debug outputs as", ((string)(null)), table108, "And ");
#line hidden
            TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table109.AddRow(new string[] {
                        "[[Customers(1).FirstName]] = bart",
                        ""});
            table109.AddRow(new string[] {
                        "[[Customers(2).FirstName]] = homer",
                        ""});
            table109.AddRow(new string[] {
                        "[[Customers(3).FirstName]] = marge",
                        ""});
            table109.AddRow(new string[] {
                        "[[Customers(4).FirstName]] = lisa",
                        ""});
            table109.AddRow(new string[] {
                        "[[Customers(5).FirstName]] = maggie",
                        "Forward"});
#line 551
    testRunner.And("the \"Sort Names Alphabetically\" in WorkFlow \"Organize Customers\" debug inputs as", ((string)(null)), table109, "And ");
#line hidden
            TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table110.AddRow(new string[] {
                        "[[Customers(1).FirstName]] = bart"});
            table110.AddRow(new string[] {
                        "[[Customers(2).FirstName]] = homer"});
            table110.AddRow(new string[] {
                        "[[Customers(3).FirstName]] = lisa"});
            table110.AddRow(new string[] {
                        "[[Customers(4).FirstName]] = maggie"});
            table110.AddRow(new string[] {
                        "[[Customers(5).FirstName]] = marge"});
#line 558
    testRunner.And("the \"Sort Names Alphabetically\" in Workflow \"Organize Customers\" debug outputs as" +
                    "", ((string)(null)), table110, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Control Flow - Decision example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingControlFlow_DecisionExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Control Flow - Decision example workflow", ((string[])(null)));
#line 566
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 567
   testRunner.Given("I have a workflow \"Control Flow - Decision Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 568
   testRunner.And("\"Control Flow - Decision Test\" contains \"Control Flow - Decision\" from server \"lo" +
                    "calhost\" with mapping as", ((string)(null)), table111, "And ");
#line 570
   testRunner.When("\"Control Flow - Decision Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 571
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Control Flow - Switch example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingControlFlow_SwitchExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Control Flow - Switch example workflow", ((string[])(null)));
#line 573
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 574
   testRunner.Given("I have a workflow \"Control Flow - Switch Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 575
   testRunner.And("\"Control Flow - Switch Test\" contains \"Control Flow - Switch\" from server \"localh" +
                    "ost\" with mapping as", ((string)(null)), table112, "And ");
#line 577
   testRunner.When("\"Control Flow - Switch Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 578
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Scripting - Script example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingScripting_ScriptExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Scripting - Script example workflow", ((string[])(null)));
#line 580
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 581
  testRunner.Given("I have a workflow \"Scripting - Script Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 582
  testRunner.And("\"Scripting - Script Test\" contains \"Scripting - Script\" from server \"localhost\" w" +
                    "ith mapping as", ((string)(null)), table113, "And ");
#line 584
  testRunner.When("\"Scripting - Script Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 585
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                        "Language",
                        "Script"});
            table114.AddRow(new string[] {
                        "Ruby",
                        "sleep(5)"});
#line 586
  testRunner.And("the \"Ruby\" in WorkFlow \"Scripting - Script\" debug inputs as", ((string)(null)), table114, "And ");
#line hidden
            TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table115.AddRow(new string[] {
                        "[[RubyResult]] = 5"});
#line 589
  testRunner.And("the \"Ruby\" in Workflow \"Scripting - Script\" debug outputs as", ((string)(null)), table115, "And ");
#line hidden
            TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                        "Language",
                        "Script"});
            table116.AddRow(new string[] {
                        "JavaScript",
                        "String = String"});
#line 592
  testRunner.And("the \"JavaScript\" in WorkFlow \"Scripting - Script\" debug inputs as", ((string)(null)), table116, "And ");
#line hidden
            TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table117.AddRow(new string[] {
                        "[[JavaScriptResult]] = 7"});
#line 595
  testRunner.And("the \"JavaScript\" in Workflow \"Scripting - Script\" debug outputs as", ((string)(null)), table117, "And ");
#line hidden
            TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                        "Language",
                        "Script"});
            table118.AddRow(new string[] {
                        "Python",
                        "String = String"});
#line 598
  testRunner.And("the \"Python\" in WorkFlow \"Scripting - Script\" debug inputs as", ((string)(null)), table118, "And ");
#line hidden
            TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table119.AddRow(new string[] {
                        "[[PythonResult]] = not one or two"});
#line 601
  testRunner.And("the \"Python\" in Workflow \"Scripting - Script\" debug outputs as", ((string)(null)), table119, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Scripting - Ruby example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingScripting_RubyExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Scripting - Ruby example workflow", ((string[])(null)));
#line 606
 this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 607
  testRunner.Given("I have a workflow \"Scripting - Ruby Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 608
  testRunner.And("\"Scripting - Ruby Test\" contains \"Scripting - Ruby\" from server \"localhost\" with " +
                    "mapping as", ((string)(null)), table120, "And ");
#line 610
  testRunner.When("\"Scripting - Ruby Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 611
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                        "Language",
                        "Script"});
            table121.AddRow(new string[] {
                        "Ruby",
                        "sleep(5)"});
#line 612
  testRunner.And("the \"Ruby\" in WorkFlow \"Scripting - Ruby\" debug inputs as", ((string)(null)), table121, "And ");
#line hidden
            TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table122.AddRow(new string[] {
                        "[[RubyResult]] = 5"});
#line 615
  testRunner.And("the \"Ruby\" in Workflow \"Scripting - Ruby\" debug outputs as", ((string)(null)), table122, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Scripting - Python example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingScripting_PythonExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Scripting - Python example workflow", ((string[])(null)));
#line 619
 this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 620
  testRunner.Given("I have a workflow \"Scripting - Python Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table123 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 621
  testRunner.And("\"Scripting - Python Test\" contains \"Scripting - Python\" from server \"localhost\" w" +
                    "ith mapping as", ((string)(null)), table123, "And ");
#line 623
  testRunner.When("\"Scripting - Python Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 624
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table124 = new TechTalk.SpecFlow.Table(new string[] {
                        "Language",
                        "Script"});
            table124.AddRow(new string[] {
                        "Python",
                        "String = String"});
#line 625
   testRunner.And("the \"Python\" in WorkFlow \"Scripting - Python\" debug inputs as", ((string)(null)), table124, "And ");
#line hidden
            TechTalk.SpecFlow.Table table125 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table125.AddRow(new string[] {
                        "[[PythonResult]] = not one or two"});
#line 628
  testRunner.And("the \"Python\" in Workflow \"Scripting - Python\" debug outputs as", ((string)(null)), table125, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Example Executing Scripting - Javascript example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ExampleWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExampleWorkflowExecution")]
        public virtual void ExampleExecutingScripting_JavascriptExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Example Executing Scripting - Javascript example workflow", ((string[])(null)));
#line 632
 this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 633
  testRunner.Given("I have a workflow \"Scripting - JavaScript Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table126 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 634
  testRunner.And("\"Scripting - JavaScript Test\" contains \"Scripting - JavaScript\" from server \"loca" +
                    "lhost\" with mapping as", ((string)(null)), table126, "And ");
#line 636
  testRunner.When("\"Scripting - JavaScript Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 637
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table127 = new TechTalk.SpecFlow.Table(new string[] {
                        "Language",
                        "Script"});
            table127.AddRow(new string[] {
                        "JavaScript",
                        "String = String"});
#line 638
   testRunner.And("the \"JavaScript\" in WorkFlow \"Scripting - JavaScript\" debug inputs as", ((string)(null)), table127, "And ");
#line hidden
            TechTalk.SpecFlow.Table table128 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table128.AddRow(new string[] {
                        "[[JavaScriptResult]] = 7"});
#line 641
  testRunner.And("the \"JavaScript\" in Workflow \"Scripting - JavaScript\" debug outputs as", ((string)(null)), table128, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
