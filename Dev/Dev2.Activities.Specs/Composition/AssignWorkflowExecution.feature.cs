// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dev2.Activities.Specs.Composition
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AssignWorkflowExecutionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AssignWorkflowExecution.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AssignWorkflowExecution", "\tIn order to execute a workflow that contains an assign\r\n\tAs a Warewolf user\r\n\tI " +
                    "want to be able to build workflows and execute them against the server", ProgrammingLanguage.CSharp, new string[] {
                        "AssignWorkflowExecution"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "AssignWorkflowExecution")))
            {
                global::Dev2.Activities.Specs.Composition.AssignWorkflowExecutionFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line 8
   testRunner.Given("Debug events are reset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
   testRunner.And("Debug states are cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Base Convert and Case Convert tools executing against the se" +
            "rver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignBaseConvertAndCaseConvertToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Base Convert and Case Convert tools executing against the se" +
                    "rver", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 12
   testRunner.Given("I have a workflow \"WorkflowWithAssignBaseConvertandCaseconvert\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table1.AddRow(new string[] {
                        "[[rec().a]]",
                        "50"});
            table1.AddRow(new string[] {
                        "[[rec().a]]",
                        "test"});
            table1.AddRow(new string[] {
                        "[[rec().a]]",
                        "100"});
#line 13
   testRunner.And("\"WorkflowWithAssignBaseConvertandCaseconvert\" contains an Assign \"Assign1\" as", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table2.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "UPPER"});
#line 18
   testRunner.And("\"WorkflowWithAssignBaseConvertandCaseconvert\" contains case convert \"Case to Conv" +
                    "ert\" as", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table3.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Text",
                        "Base 64"});
#line 21
   testRunner.And("\"WorkflowWithAssignBaseConvertandCaseconvert\" contains Base convert \"Base to Conv" +
                    "ert\" as", ((string)(null)), table3, "And ");
#line 24
   testRunner.When("\"WorkflowWithAssignBaseConvertandCaseconvert\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table4.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "50"});
            table4.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "test"});
            table4.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "100"});
#line 26
   testRunner.And("the \"Assign1\" in WorkFlow \"WorkflowWithAssignBaseConvertandCaseconvert\" debug inp" +
                    "uts as", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table5.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =  50"});
            table5.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =  test"});
            table5.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =  100"});
#line 31
    testRunner.And("the \"Assign1\" in Workflow \"WorkflowWithAssignBaseConvertandCaseconvert\" debug out" +
                    "puts as", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table6.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = test",
                        "UPPER"});
#line 36
   testRunner.And("the \"Case to Convert\" in WorkFlow \"WorkflowWithAssignBaseConvertandCaseconvert\" d" +
                    "ebug inputs as", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table7.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = TEST"});
#line 39
   testRunner.And("the \"Case to Convert\" in Workflow \"WorkflowWithAssignBaseConvertandCaseconvert\" d" +
                    "ebug outputs as", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table8.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 50",
                        "Text",
                        "Base 64"});
#line 42
   testRunner.And("the \"Base to Convert\" in WorkFlow \"WorkflowWithAssignBaseConvertandCaseconvert\" d" +
                    "ebug inputs as", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table9.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = NTA="});
#line 45
      testRunner.And("the \"Base to Convert\" in Workflow \"WorkflowWithAssignBaseConvertandCaseconvert\" d" +
                    "ebug outputs as", ((string)(null)), table9, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and 2 Delete tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignAnd2DeleteToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and 2 Delete tools executing against the server", ((string[])(null)));
#line 50
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 51
   testRunner.Given("I have a workflow \"WorkflowWithAssignand2Deletetools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table10.AddRow(new string[] {
                        "[[rec().a]]",
                        "50"});
#line 52
   testRunner.And("\"WorkflowWithAssignand2Deletetools\" contains an Assign \"Assign to delete\" as", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "result"});
            table11.AddRow(new string[] {
                        "[[rec(1)]]",
                        "[[result1]]"});
#line 55
   testRunner.And("\"WorkflowWithAssignand2Deletetools\" contains Delete \"Delet1\" as", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "result"});
            table12.AddRow(new string[] {
                        "[[rec(1)]]",
                        "[[result2]]"});
#line 58
      testRunner.And("\"WorkflowWithAssignand2Deletetools\" contains Delete \"Delet2\" as", ((string)(null)), table12, "And ");
#line 61
   testRunner.When("\"WorkflowWithAssignand2Deletetools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
      testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table13.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "50"});
#line 63
   testRunner.And("the \"Assign to delete\" in WorkFlow \"WorkflowWithAssignand2Deletetools\" debug inpu" +
                    "ts as", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table14.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 50"});
#line 66
   testRunner.And("the \"Assign to delete\" in Workflow \"WorkflowWithAssignand2Deletetools\" debug outp" +
                    "uts as", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table15.AddRow(new string[] {
                        "[[rec(1).a]] = 50"});
#line 69
   testRunner.And("the \"Delet1\" in WorkFlow \"WorkflowWithAssignand2Deletetools\" debug inputs as", ((string)(null)), table15, "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table16.AddRow(new string[] {
                        "[[result1]] = Success"});
#line 72
   testRunner.And("the \"Delet1\" in Workflow \"WorkflowWithAssignand2Deletetools\" debug outputs as", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table17.AddRow(new string[] {
                        "[[rec(1)]] ="});
#line 75
   testRunner.And("the \"Delet2\" in WorkFlow \"WorkflowWithAssignand2Deletetools\" debug inputs as", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table18.AddRow(new string[] {
                        "[[result2]] = Failure"});
#line 78
   testRunner.And("the \"Delet2\" in Workflow \"WorkflowWithAssignand2Deletetools\" debug outputs as", ((string)(null)), table18, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with 3 Assigns tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWith3AssignsToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with 3 Assigns tools executing against the server", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 83
   testRunner.Given("I have a workflow \"WorkflowWith3Assigntools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table19.AddRow(new string[] {
                        "[[rec().a]]",
                        "rec(1).a"});
#line 84
   testRunner.And("\"WorkflowWith3Assigntools\" contains an Assign \"Assigntool1\" as", ((string)(null)), table19, "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table20.AddRow(new string[] {
                        "[[test]]",
                        "rec(1).a"});
            table20.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Warewolf"});
#line 87
    testRunner.And("\"WorkflowWith3Assigntools\" contains an Assign \"Assigntool2\" as", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table21.AddRow(new string[] {
                        "[[new]]",
                        "[[[[test]]]]"});
#line 91
    testRunner.And("\"WorkflowWith3Assigntools\" contains an Assign \"Assigntool3\" as", ((string)(null)), table21, "And ");
#line 94
   testRunner.When("\"WorkflowWith3Assigntools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 95
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table22.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "rec(1).a"});
#line 96
   testRunner.And("the \"Assigntool1\" in WorkFlow \"WorkflowWith3Assigntools\" debug inputs as", ((string)(null)), table22, "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table23.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = rec(1).a"});
#line 99
   testRunner.And("the \"Assigntool1\" in Workflow \"WorkflowWith3Assigntools\" debug outputs as", ((string)(null)), table23, "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table24.AddRow(new string[] {
                        "1",
                        "[[test]] =",
                        "rec(1).a"});
            table24.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = rec(1).a",
                        "Warewolf"});
#line 102
   testRunner.And("the \"Assigntool2\" in WorkFlow \"WorkflowWith3Assigntools\" debug inputs as", ((string)(null)), table24, "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table25.AddRow(new string[] {
                        "1",
                        "[[test]] = rec(1).a"});
            table25.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = Warewolf"});
#line 106
   testRunner.And("the \"Assigntool2\" in Workflow \"WorkflowWith3Assigntools\" debug outputs as", ((string)(null)), table25, "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table26.AddRow(new string[] {
                        "1",
                        "[[new]] =",
                        "[[rec(1).a]] = Warewolf"});
#line 110
    testRunner.And("the \"Assigntool3\" in WorkFlow \"WorkflowWith3Assigntools\" debug inputs as", ((string)(null)), table26, "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table27.AddRow(new string[] {
                        "1",
                        "[[new]] = Warewolf"});
#line 113
   testRunner.And("the \"Assigntool3\" in Workflow \"WorkflowWith3Assigntools\" debug outputs as", ((string)(null)), table27, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Date and Time Difference tools executing against the ser" +
            "ver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignAndDateAndTimeDifferenceToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Date and Time Difference tools executing against the ser" +
                    "ver", ((string[])(null)));
#line 117
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 118
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndDateTimeDifferencetools1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table28.AddRow(new string[] {
                        "[[a]]",
                        "2014"});
            table28.AddRow(new string[] {
                        "[[b]]",
                        "10."});
#line 119
   testRunner.And("\"WorkflowWithAssignAndDateTimeDifferencetools1\" contains an Assign \"InputDates\" a" +
                    "s", ((string)(null)), table28, "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table29.AddRow(new string[] {
                        "2020/[[b]]/01",
                        "2030/01/01",
                        "yyyy/mm/dd",
                        "Years",
                        "[[result]]"});
#line 123
   testRunner.And("\"WorkflowWithAssignAndDateTimeDifferencetools1\" contains Date and Time Difference" +
                    " \"DateAndTime\" as", ((string)(null)), table29, "And ");
#line 126
   testRunner.When("\"WorkflowWithAssignAndDateTimeDifferencetools1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 127
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table30.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "2014"});
            table30.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "10."});
#line 128
   testRunner.And("the \"InputDates\" in WorkFlow \"WorkflowWithAssignAndDateTimeDifferencetools1\" debu" +
                    "g inputs as", ((string)(null)), table30, "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table31.AddRow(new string[] {
                        "1",
                        "[[a]] = 2014"});
            table31.AddRow(new string[] {
                        "2",
                        "[[b]] = 10.0"});
#line 132
   testRunner.And("the \"InputDates\" in Workflow \"WorkflowWithAssignAndDateTimeDifferencetools1\" debu" +
                    "g outputs as", ((string)(null)), table31, "And ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table32.AddRow(new string[] {
                        "2020/[[b]]/01 = 2020/10.0/01",
                        "2030/01/01",
                        "yyyy/mm/dd",
                        "Years"});
#line 136
   testRunner.And("the \"DateAndTime\" in WorkFlow \"WorkflowWithAssignAndDateTimeDifferencetools1\" deb" +
                    "ug inputs as", ((string)(null)), table32, "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table33.AddRow(new string[] {
                        "[[result]] ="});
#line 139
   testRunner.And("the \"DateAndTime\" in Workflow \"WorkflowWithAssignAndDateTimeDifferencetools1\" deb" +
                    "ug outputs as", ((string)(null)), table33, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns DataMerge and DataSplit executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignsDataMergeAndDataSplitExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns DataMerge and DataSplit executing against the server", ((string[])(null)));
#line 143
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 144
      testRunner.Given("I have a workflow \"WorkflowWithAssignDataMergeAndDataSplittools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table34.AddRow(new string[] {
                        "[[a]]",
                        "Test"});
            table34.AddRow(new string[] {
                        "[[b]]",
                        "Warewolf"});
            table34.AddRow(new string[] {
                        "[[split().a]]",
                        "Workflow"});
#line 145
   testRunner.And("\"WorkflowWithAssignDataMergeAndDataSplittools\" contains an Assign \"Assign To merg" +
                    "e\" as", ((string)(null)), table34, "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table35.AddRow(new string[] {
                        "[[a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
            table35.AddRow(new string[] {
                        "[[b]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
#line 150
   testRunner.And("\"WorkflowWithAssignDataMergeAndDataSplittools\" contains Data Merge \"Data Merge\" i" +
                    "nto \"[[result]]\" as", ((string)(null)), table35, "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table36.AddRow(new string[] {
                        "[[result]][[split().a]]",
                        "[[rec().b]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table36.AddRow(new string[] {
                        "",
                        "[[rec().b]]",
                        "Index",
                        "8",
                        "Unselected",
                        ""});
#line 154
   testRunner.And("\"WorkflowWithAssignDataMergeAndDataSplittools\" contains Data Split \"Data Split\" a" +
                    "s", ((string)(null)), table36, "And ");
#line 158
   testRunner.When("\"WorkflowWithAssignDataMergeAndDataSplittools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 159
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table37.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "Test"});
            table37.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "Warewolf"});
            table37.AddRow(new string[] {
                        "3",
                        "[[split().a]] =",
                        "Workflow"});
#line 160
   testRunner.And("the \"Assign To merge\" in WorkFlow \"WorkflowWithAssignDataMergeAndDataSplittools\" " +
                    "debug inputs as", ((string)(null)), table37, "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table38.AddRow(new string[] {
                        "1",
                        "[[a]]         =  Test"});
            table38.AddRow(new string[] {
                        "2",
                        "[[b]]         =  Warewolf"});
            table38.AddRow(new string[] {
                        "3",
                        "[[split(1).a]] =  Workflow"});
#line 165
  testRunner.And("the \"Assign To merge\" in Workflow \"WorkflowWithAssignDataMergeAndDataSplittools\" " +
                    "debug outputs as", ((string)(null)), table38, "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table39.AddRow(new string[] {
                        "1",
                        "[[a]] = Test",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
            table39.AddRow(new string[] {
                        "2",
                        "[[b]] = Warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
#line 170
   testRunner.And("the \"Data Merge\" in WorkFlow \"WorkflowWithAssignDataMergeAndDataSplittools\" debug" +
                    " inputs as", ((string)(null)), table39, "And ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table40.AddRow(new string[] {
                        "[[result]] = TestWarewolf"});
#line 174
   testRunner.And("the \"Data Merge\" in Workflow \"WorkflowWithAssignDataMergeAndDataSplittools\" debug" +
                    " outputs as", ((string)(null)), table40, "And ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table41.AddRow(new string[] {
                        "[[result]][[split().a]] = TestWarewolfWorkflow",
                        "Forward",
                        "No",
                        "1",
                        "[[rec().b]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[rec().b]] =",
                        "Index",
                        "8",
                        "No",
                        ""});
#line 177
   testRunner.And("the \"Data Split\" in WorkFlow \"WorkflowWithAssignDataMergeAndDataSplittools\" debug" +
                    " inputs as", ((string)(null)), table41, "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table42.AddRow(new string[] {
                        "1",
                        "[[rec(1).b]] = Test"});
            table42.AddRow(new string[] {
                        "",
                        "[[rec(2).b]] = Warewolf"});
            table42.AddRow(new string[] {
                        "",
                        "[[rec(3).b]] = Work"});
            table42.AddRow(new string[] {
                        "",
                        "[[rec(4).b]] = flow"});
#line 181
   testRunner.And("the \"Data Split\" in Workflow \"WorkflowWithAssignDataMergeAndDataSplittools\" debug" +
                    " outputs as", ((string)(null)), table42, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns and DataSplit executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignsAndDataSplitExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns and DataSplit executing against the server", ((string[])(null)));
#line 188
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 189
      testRunner.Given("I have a workflow \"WorkflowWithAssignandDataSplittools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table43.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table43.AddRow(new string[] {
                        "[[b]]",
                        "2"});
            table43.AddRow(new string[] {
                        "[[rs(1).a]]",
                        "test"});
#line 190
   testRunner.And("\"WorkflowWithAssignandDataSplittools\" contains an Assign \"splitvalues1\" as", ((string)(null)), table43, "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table44.AddRow(new string[] {
                        "[[test]]",
                        "warewolf"});
#line 195
    testRunner.And("\"WorkflowWithAssignandDataSplittools\" contains an Assign \"splitvalues2\" as", ((string)(null)), table44, "And ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table45.AddRow(new string[] {
                        "[[[[rs(1).a]]]]",
                        "[[rec(1).a]]",
                        "Index",
                        "[[[[a]]]]",
                        "Unselected",
                        ""});
#line 198
   testRunner.And("\"WorkflowWithAssignandDataSplittools\" contains Data Split \"DataSpliting\" as", ((string)(null)), table45, "And ");
#line 201
   testRunner.When("\"WorkflowWithAssignandDataSplittools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 202
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table46.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table46.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "2"});
            table46.AddRow(new string[] {
                        "3",
                        "[[rs(1).a]] =",
                        "test"});
#line 203
   testRunner.And("the \"splitvalues1\" in WorkFlow \"WorkflowWithAssignandDataSplittools\" debug inputs" +
                    " as", ((string)(null)), table46, "And ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table47.AddRow(new string[] {
                        "1",
                        "[[a]]         =  b"});
            table47.AddRow(new string[] {
                        "2",
                        "[[b]]         =  2"});
            table47.AddRow(new string[] {
                        "3",
                        "[[rs(1).a]]   =  test"});
#line 208
  testRunner.And("the \"splitvalues1\" in Workflow \"WorkflowWithAssignandDataSplittools\" debug output" +
                    "s as", ((string)(null)), table47, "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table48.AddRow(new string[] {
                        "1",
                        "[[test]] =",
                        "warewolf"});
#line 213
  testRunner.And("the \"splitvalues2\" in WorkFlow \"WorkflowWithAssignandDataSplittools\" debug inputs" +
                    " as", ((string)(null)), table48, "And ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table49.AddRow(new string[] {
                        "1",
                        "[[test]] =  warewolf"});
#line 216
  testRunner.And("the \"splitvalues2\" in Workflow \"WorkflowWithAssignandDataSplittools\" debug output" +
                    "s as", ((string)(null)), table49, "And ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table50.AddRow(new string[] {
                        "[[test]] = warewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[rec(1).a]] =",
                        "Index",
                        "[[b]] = 2",
                        "No",
                        ""});
#line 219
   testRunner.And("the \"DataSpliting\" in WorkFlow \"WorkflowWithAssignandDataSplittools\" debug inputs" +
                    " as", ((string)(null)), table50, "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table51.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = lf"});
#line 222
   testRunner.And("the \"DataSpliting\" in Workflow \"WorkflowWithAssignandDataSplittools\" debug output" +
                    "s as", ((string)(null)), table51, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Sequence(Assign, Datamerge, Data Split, Find Index and R" +
            "eplace) executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignAndSequenceAssignDatamergeDataSplitFindIndexAndReplaceExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Sequence(Assign, Datamerge, Data Split, Find Index and R" +
                    "eplace) executing against the server", ((string[])(null)));
#line 226
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 227
      testRunner.Given("I have a workflow \"workflowithAssignandsequence\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table52.AddRow(new string[] {
                        "[[rec().a]]",
                        "test"});
            table52.AddRow(new string[] {
                        "[[rec().b]]",
                        "nothing"});
            table52.AddRow(new string[] {
                        "[[rec().a]]",
                        "warewolf"});
            table52.AddRow(new string[] {
                        "[[rec().b]]",
                        "nothing"});
#line 228
       testRunner.And("\"workflowithAssignandsequence\" contains an Assign \"Assign for sequence\" as", ((string)(null)), table52, "And ");
#line 234
      testRunner.And("\"workflowithAssignandsequence\" contains a Sequence \"Test1\" as", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table53.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
            table53.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
#line 235
   testRunner.And("\"Test1\" contains Data Merge \"Data Merge\" into \"[[result]]\" as", ((string)(null)), table53, "And ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table54.AddRow(new string[] {
                        "testwarewolf",
                        "[[rec(1).b]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table54.AddRow(new string[] {
                        "",
                        "[[rec(2).b]]",
                        "Index",
                        "8",
                        "Unselected",
                        ""});
#line 239
   testRunner.And("\"Test1\" contains Data Split \"Data Split\" as", ((string)(null)), table54, "And ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Index",
                        "Character",
                        "Direction"});
            table55.AddRow(new string[] {
                        "[[rec().a]]",
                        "First Occurence",
                        "e",
                        "Left to Right"});
#line 243
   testRunner.And("\"Test1\" contains Find Index \"Index\" into \"[[indexResult]]\" as", ((string)(null)), table55, "And ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table56.AddRow(new string[] {
                        "[[rec(*)]]",
                        "e",
                        "REPLACED"});
#line 246
   testRunner.And("\"Test1\" contains Replace \"Replacing\" into \"[[replaceResult]]\" as", ((string)(null)), table56, "And ");
#line 249
   testRunner.When("\"workflowithAssignandsequence\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 250
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table57.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "test"});
            table57.AddRow(new string[] {
                        "2",
                        "[[rec().b]] =",
                        "nothing"});
            table57.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "warewolf"});
            table57.AddRow(new string[] {
                        "4",
                        "[[rec().b]] =",
                        "nothing"});
#line 251
   testRunner.And("the \"Assign for sequence\" in WorkFlow \"workflowithAssignandsequence\" debug inputs" +
                    " as", ((string)(null)), table57, "And ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table58.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = test"});
            table58.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = nothing"});
            table58.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]] = warewolf"});
            table58.AddRow(new string[] {
                        "4",
                        "[[rec(2).b]] = nothing"});
#line 257
    testRunner.And("the \"Assign for sequence\" in Workflow \"workflowithAssignandsequence\" debug output" +
                    "s as", ((string)(null)), table58, "And ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table59.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = test",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
            table59.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
#line 263
   testRunner.And("the \"Data Merge\" in WorkFlow \"Test1\" debug inputs as", ((string)(null)), table59, "And ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table60.AddRow(new string[] {
                        "[[result]] = testwarewolf"});
#line 267
   testRunner.And("the \"Data Merge\" in Workflow \"Test1\" debug outputs as", ((string)(null)), table60, "And ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table61.AddRow(new string[] {
                        "testwarewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[rec(1).b]] = nothing",
                        "Index",
                        "4",
                        "No",
                        ""});
            table61.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[rec(2).b]] = nothing",
                        "Index",
                        "8",
                        "No",
                        ""});
#line 270
   testRunner.And("the \"Data Split\" in WorkFlow \"Test1\" debug inputs as", ((string)(null)), table61, "And ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table62.AddRow(new string[] {
                        "1",
                        "[[rec(1).b]] = test"});
            table62.AddRow(new string[] {
                        "2",
                        "[[rec(2).b]] = warewolf"});
#line 274
   testRunner.And("the \"Data Split\" in Workflow \"Test1\" debug outputs as", ((string)(null)), table62, "And ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table63.AddRow(new string[] {
                        "[[rec(2).a]] = warewolf",
                        "First Occurence",
                        "e",
                        "Left to Right"});
#line 278
      testRunner.And("the \"Index\" in WorkFlow \"Test1\" debug inputs as", ((string)(null)), table63, "And ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table64.AddRow(new string[] {
                        "[[indexResult]] = 4"});
#line 281
   testRunner.And("the \"Index\" in Workflow \"Test1\" debug outputs as", ((string)(null)), table64, "And ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table65.AddRow(new string[] {
                        "[[rec(1).a]] = test",
                        "",
                        ""});
            table65.AddRow(new string[] {
                        "[[rec(2).a]] = warewolf",
                        "",
                        ""});
            table65.AddRow(new string[] {
                        "[[rec(1).b]] = test",
                        "",
                        ""});
            table65.AddRow(new string[] {
                        "[[rec(2).b]] = warewolf",
                        "e",
                        "REPLACED"});
#line 284
   testRunner.And("the \"Replacing\" in WorkFlow \"Test1\" debug inputs as", ((string)(null)), table65, "And ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table66.AddRow(new string[] {
                        "[[rec(1).a]] = tREPLACEDst"});
            table66.AddRow(new string[] {
                        "[[rec(2).a]] = warREPLACEDwolf"});
            table66.AddRow(new string[] {
                        "[[rec(1).b]] = tREPLACEDst"});
            table66.AddRow(new string[] {
                        "[[rec(2).b]] = warREPLACEDwolf"});
            table66.AddRow(new string[] {
                        "[[replaceResult]] = 4"});
#line 290
   testRunner.And("the \"Replacing\" in Workflow \"Test1\" debug outputs as", ((string)(null)), table66, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Create and Delete folder tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignCreateAndDeleteFolderToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Create and Delete folder tools executing against the server", ((string[])(null)));
#line 298
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 299
   testRunner.Given("I have a workflow \"WorkflowWithAssignCreateandDeleteRecord\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table67.AddRow(new string[] {
                        "[[rec().a]]",
                        "C:\\copied00.txt"});
#line 300
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecord\" contains an Assign \"Assign to create\" a" +
                    "s", ((string)(null)), table67, "And ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "If it exits",
                        "Username",
                        "Password",
                        "Result"});
            table68.AddRow(new string[] {
                        "[[rec().a]]",
                        "True",
                        "",
                        "",
                        "[[res1]]"});
#line 303
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecord\" contains an Create \"Create1\" as", ((string)(null)), table68, "And ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset",
                        "Result"});
            table69.AddRow(new string[] {
                        "[[rec().a]]",
                        "[[res2]]"});
#line 306
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecord\" contains an Delete Folder \"DeleteFolder" +
                    "\" as", ((string)(null)), table69, "And ");
#line 309
   testRunner.When("\"WorkflowWithAssignCreateandDeleteRecord\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 310
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table70.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "C:\\copied00.txt"});
#line 311
   testRunner.And("the \"Assign to create\" in WorkFlow \"WorkflowWithAssignCreateandDeleteRecord\" debu" +
                    "g inputs as", ((string)(null)), table70, "And ");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table71.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = C:\\copied00.txt"});
#line 314
   testRunner.And("the \"Assign to create\" in Workflow \"WorkflowWithAssignCreateandDeleteRecord\" debu" +
                    "g outputs as", ((string)(null)), table71, "And ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "Overwrite",
                        "Username",
                        "Password"});
            table72.AddRow(new string[] {
                        "[[rec(1).a]] = C:\\copied00.txt",
                        "True",
                        "\"\"",
                        "\"\""});
#line 317
  testRunner.And("the \"Create1\" in WorkFlow \"WorkflowWithAssignCreateandDeleteRecord\" debug inputs " +
                    "as", ((string)(null)), table72, "And ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table73.AddRow(new string[] {
                        "[[res1]] = Success"});
#line 320
    testRunner.And("the \"Create1\" in Workflow \"WorkflowWithAssignCreateandDeleteRecord\" debug outputs" +
                    " as", ((string)(null)), table73, "And ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input Path",
                        "Username",
                        "Password"});
            table74.AddRow(new string[] {
                        "[[rec(1).a]] = C:\\copied00.txt",
                        "\"\"",
                        "\"\""});
#line 323
   testRunner.And("the \"DeleteFolder\" in WorkFlow \"WorkflowWithAssignCreateandDeleteRecord\" debug in" +
                    "puts as", ((string)(null)), table74, "And ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table75.AddRow(new string[] {
                        "[[res2]] = Success"});
#line 326
   testRunner.And("the \"DeleteFolder\" in Workflow \"WorkflowWithAssignCreateandDeleteRecord\" debug ou" +
                    "tputs as", ((string)(null)), table75, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Create and Delete Record tools with incorrect input path exe" +
            "cuting against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignCreateAndDeleteRecordToolsWithIncorrectInputPathExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Create and Delete Record tools with incorrect input path exe" +
                    "cuting against the server", ((string[])(null)));
#line 330
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 331
   testRunner.Given("I have a workflow \"WorkflowWithAssignCreateDeleteRecordNoneExist1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table76.AddRow(new string[] {
                        "[[rec().a]]",
                        "create.txt"});
#line 332
   testRunner.And("\"WorkflowWithAssignCreateDeleteRecordNoneExist1\" contains an Assign \"Assign to cr" +
                    "eate\" as", ((string)(null)), table76, "And ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "If it exits",
                        "Username",
                        "Password",
                        "Result"});
            table77.AddRow(new string[] {
                        "[[rec().a]]",
                        "True",
                        "",
                        "",
                        "[[res1]]"});
#line 335
   testRunner.And("\"WorkflowWithAssignCreateDeleteRecordNoneExist1\" contains an Create \"Create1\" as", ((string)(null)), table77, "And ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "File Or Folder",
                        "Result"});
            table78.AddRow(new string[] {
                        "[[rec().a]]",
                        "[[res1]]"});
#line 338
   testRunner.And("\"WorkflowWithAssignCreateDeleteRecordNoneExist1\" contains an Delete \"Delete\" as", ((string)(null)), table78, "And ");
#line 341
   testRunner.When("\"WorkflowWithAssignCreateDeleteRecordNoneExist1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 342
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table79.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "create.txt"});
#line 343
   testRunner.And("the \"Assign to create\" in WorkFlow \"WorkflowWithAssignCreateDeleteRecordNoneExist" +
                    "1\" debug inputs as", ((string)(null)), table79, "And ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table80.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = create.txt"});
#line 346
   testRunner.And("the \"Assign to create\" in Workflow \"WorkflowWithAssignCreateDeleteRecordNoneExist" +
                    "1\" debug outputs as", ((string)(null)), table80, "And ");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "Overwrite",
                        "Username",
                        "Password"});
            table81.AddRow(new string[] {
                        "[[rec(1).a]] = create.txt",
                        "True",
                        "\" \"",
                        "\" \""});
#line 349
   testRunner.And("the \"Create1\" in WorkFlow \"WorkflowWithAssignCreateDeleteRecordNoneExist1\" debug " +
                    "inputs as", ((string)(null)), table81, "And ");
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table82.AddRow(new string[] {
                        "[[res1]] = Failure"});
#line 352
   testRunner.And("the \"Create1\" in Workflow \"WorkflowWithAssignCreateDeleteRecordNoneExist1\" debug " +
                    "outputs as", ((string)(null)), table82, "And ");
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input Path",
                        "Username",
                        "Password"});
            table83.AddRow(new string[] {
                        "[[rec(1).a]] = create.txt",
                        "\" \"",
                        "\" \""});
#line 355
   testRunner.And("the \"Delete\" in WorkFlow \"WorkflowWithAssignCreateDeleteRecordNoneExist1\" debug i" +
                    "nputs as", ((string)(null)), table83, "And ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table84.AddRow(new string[] {
                        "[[res1]] = Failure"});
#line 358
   testRunner.And("the \"Delete\" in Workflow \"WorkflowWithAssignCreateDeleteRecordNoneExist1\" debug o" +
                    "utputs as", ((string)(null)), table84, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with 2 Assign tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWith2AssignToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with 2 Assign tools executing against the server", ((string[])(null)));
#line 362
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 363
   testRunner.Given("I have a workflow \"WorkflowWith2Assigntools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table85.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table85.AddRow(new string[] {
                        "[[b]]",
                        "test"});
            table85.AddRow(new string[] {
                        "[[test]]",
                        "warewolf"});
#line 364
   testRunner.And("\"WorkflowWith2Assigntools\" contains an Assign \"tool1\" as", ((string)(null)), table85, "And ");
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table86.AddRow(new string[] {
                        "[[[[a]]]]",
                        "[[[[[[a]]]]]]"});
#line 369
   testRunner.And("\"WorkflowWith2Assigntools\" contains an Assign \"tool2\" as", ((string)(null)), table86, "And ");
#line 372
   testRunner.When("\"WorkflowWith2Assigntools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 373
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table87.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table87.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
            table87.AddRow(new string[] {
                        "3",
                        "[[test]] =",
                        "warewolf"});
#line 374
   testRunner.And("the \"tool1\" in WorkFlow \"WorkflowWith2Assigntools\" debug inputs as", ((string)(null)), table87, "And ");
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table88.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table88.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
            table88.AddRow(new string[] {
                        "3",
                        "[[test]] = warewolf"});
#line 379
   testRunner.And("the \"tool1\" in Workflow \"WorkflowWith2Assigntools\" debug outputs as", ((string)(null)), table88, "And ");
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table89.AddRow(new string[] {
                        "1",
                        "[[b]] = test",
                        "[[test]] = warewolf"});
#line 384
   testRunner.And("the \"tool2\" in WorkFlow \"WorkflowWith2Assigntools\" debug inputs as", ((string)(null)), table89, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with 2 Assign tools by using recordsets in fields executing against the " +
            "server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWith2AssignToolsByUsingRecordsetsInFieldsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with 2 Assign tools by using recordsets in fields executing against the " +
                    "server", ((string[])(null)));
#line 388
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 389
   testRunner.Given("I have a workflow \"WorkflowWith2Assigntoolswithrecordsets\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table90.AddRow(new string[] {
                        "[[rec().a]]",
                        "rec(2).a"});
            table90.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "test"});
#line 390
   testRunner.And("\"WorkflowWith2Assigntoolswithrecordsets\" contains an Assign \"rec1\" as", ((string)(null)), table90, "And ");
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table91.AddRow(new string[] {
                        "[[[[rec(1).a]]]]",
                        "warewolf"});
#line 394
   testRunner.And("\"WorkflowWith2Assigntoolswithrecordsets\" contains an Assign \"rec2\" as", ((string)(null)), table91, "And ");
#line 397
   testRunner.When("\"WorkflowWith2Assigntoolswithrecordsets\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 398
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table92.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "rec(2).a"});
            table92.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =",
                        "test"});
#line 399
   testRunner.And("the \"rec1\" in WorkFlow \"WorkflowWith2Assigntoolswithrecordsets\" debug inputs as", ((string)(null)), table92, "And ");
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table93.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = rec(2).a"});
            table93.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = test"});
#line 403
   testRunner.And("the \"rec1\" in Workflow \"WorkflowWith2Assigntoolswithrecordsets\" debug outputs as", ((string)(null)), table93, "And ");
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table94.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = test",
                        "warewolf"});
#line 407
   testRunner.And("the \"rec2\" in WorkFlow \"WorkflowWith2Assigntoolswithrecordsets\" debug inputs as", ((string)(null)), table94, "And ");
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table95.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] =  warewolf"});
#line 410
   testRunner.And("the \"rec2\" in Workflow \"WorkflowWith2Assigntoolswithrecordsets\" debug outputs as", ((string)(null)), table95, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with 2 Assign tools by using Scalars as variables executing against the " +
            "server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWith2AssignToolsByUsingScalarsAsVariablesExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with 2 Assign tools by using Scalars as variables executing against the " +
                    "server", ((string[])(null)));
#line 414
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 415
   testRunner.Given("I have a workflow \"WorkflowWith2Assigntoolswithrscalars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table96.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table96.AddRow(new string[] {
                        "[[b]]",
                        "test"});
#line 416
   testRunner.And("\"WorkflowWith2Assigntoolswithscalars\" contains an Assign \"scl1\" as", ((string)(null)), table96, "And ");
#line hidden
            TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table97.AddRow(new string[] {
                        "[[[[a]]]]",
                        "warewolf"});
#line 420
   testRunner.And("\"WorkflowWith2Assigntoolswithrscalars\" contains an Assign \"scl2\" as", ((string)(null)), table97, "And ");
#line 423
   testRunner.When("\"WorkflowWith2Assigntoolswithrscalars\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 424
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table98.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table98.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
#line 425
   testRunner.And("the \"scl1\" in WorkFlow \"WorkflowWith2Assigntoolswithrscalars\" debug inputs as", ((string)(null)), table98, "And ");
#line hidden
            TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table99.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table99.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
#line 429
   testRunner.And("the \"scl1\" in Workflow \"WorkflowWith2Assigntoolswithrscalars\" debug outputs as", ((string)(null)), table99, "And ");
#line hidden
            TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table100.AddRow(new string[] {
                        "1",
                        "[[b]] =",
                        "warewolf"});
#line 433
   testRunner.And("the \"scl2\" in WorkFlow \"WorkflowWith2Assigntoolswithrscalars\" debug inputs as", ((string)(null)), table100, "And ");
#line hidden
            TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table101.AddRow(new string[] {
                        "1",
                        "[[b]] =  warewolf"});
#line 436
   testRunner.And("the \"scl2\" in Workflow \"WorkflowWith2Assigntoolswithrscalars\" debug outputs as", ((string)(null)), table101, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Count Data Merge and 2 Delete  tools executing against the s" +
            "erver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignCountDataMergeAnd2DeleteToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Count Data Merge and 2 Delete  tools executing against the s" +
                    "erver", ((string[])(null)));
#line 440
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 441
   testRunner.Given("I have a workflow \"WorkflowWithAssignCountDataMerge&2Delete\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table102.AddRow(new string[] {
                        "[[rec().a]]",
                        "21"});
            table102.AddRow(new string[] {
                        "[[rec().a]]",
                        "22"});
            table102.AddRow(new string[] {
                        "[[rec().a]]",
                        ""});
#line 442
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains an Assign \"countrecordval1\" a" +
                    "s", ((string)(null)), table102, "And ");
#line 447
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains Count Record \"Cnt1\" on \"[[rec" +
                    "()]]\" into \"[[result1]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "result"});
            table103.AddRow(new string[] {
                        "[[rec()]]",
                        "[[result2]]"});
#line 448
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains Delete \"Delrec\" as", ((string)(null)), table103, "And ");
#line hidden
            TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table104.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Index",
                        "2",
                        "",
                        "Left"});
            table104.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "Index",
                        "2",
                        "",
                        "Left"});
#line 451
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains Data Merge \"DataMerge1\" into " +
                    "\"[[rec().a]]\" as", ((string)(null)), table104, "And ");
#line 455
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains Count Record \"Cnt2\" on \"[[rec" +
                    "()]]\" into \"[[result3]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 456
   testRunner.When("\"WorkflowWithAssignCountDataMerge&2Delete\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 457
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table105.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "21"});
            table105.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "22"});
            table105.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "\"\""});
#line 458
   testRunner.And("the \"countrecordval1\" in WorkFlow \"WorkflowWithAssignCountDataMerge&2Delete\" debu" +
                    "g inputs as", ((string)(null)), table105, "And ");
#line hidden
            TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table106.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 21"});
            table106.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 22"});
            table106.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] ="});
#line 463
   testRunner.And("the \"countrecordval1\" in Workflow \"WorkflowWithAssignCountDataMerge&2Delete\" debu" +
                    "g outputs as", ((string)(null)), table106, "And ");
#line hidden
            TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table107.AddRow(new string[] {
                        "[[rec(1).a]] = 21"});
            table107.AddRow(new string[] {
                        "[[rec(2).a]] = 22"});
            table107.AddRow(new string[] {
                        "[[rec(3).a]] ="});
#line 468
   testRunner.And("the \"Cnt1\" in WorkFlow \"WorkflowWithAssignCountDataMerge&2Delete\" debug inputs as" +
                    "", ((string)(null)), table107, "And ");
#line hidden
            TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table108.AddRow(new string[] {
                        "[[result1]] = 3"});
#line 473
   testRunner.And("the \"Cnt1\" in Workflow \"WorkflowWithAssignCountDataMerge&2Delete\" debug outputs a" +
                    "s", ((string)(null)), table108, "And ");
#line hidden
            TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table109.AddRow(new string[] {
                        "[[rec(3).a]] ="});
#line 476
   testRunner.And("the \"Delrec\" in WorkFlow \"WorkflowWithAssignCountDataMerge&2Delete\" debug inputs " +
                    "as", ((string)(null)), table109, "And ");
#line hidden
            TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table110.AddRow(new string[] {
                        "[[result2]] = Success"});
#line 479
   testRunner.And("the \"Delrec\" in Workflow \"WorkflowWithAssignCountDataMerge&2Delete\" debug outputs" +
                    " as", ((string)(null)), table110, "And ");
#line hidden
            TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table111.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 21",
                        "Index",
                        "\"2\"",
                        "\"\"",
                        "Left"});
            table111.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 22",
                        "Index",
                        "\"2\"",
                        "\"\"",
                        "Left"});
#line 482
   testRunner.And("the \"DataMerge1\" in WorkFlow \"WorkflowWithAssignCountDataMerge&2Delete\" debug inp" +
                    "uts as", ((string)(null)), table111, "And ");
#line hidden
            TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table112.AddRow(new string[] {
                        "[[rec(3).a]] = 2122"});
#line 486
   testRunner.And("the \"DataMerge1\" in Workflow \"WorkflowWithAssignCountDataMerge&2Delete\" debug out" +
                    "puts as", ((string)(null)), table112, "And ");
#line hidden
            TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table113.AddRow(new string[] {
                        "[[rec(1).a]] = 21"});
            table113.AddRow(new string[] {
                        "[[rec(2).a]] = 22"});
            table113.AddRow(new string[] {
                        "[[rec(3).a]] = 2122"});
#line 489
    testRunner.And("the \"Cnt2\" in WorkFlow \"WorkflowWithAssignCountDataMerge&2Delete\" debug inputs as" +
                    "", ((string)(null)), table113, "And ");
#line hidden
            TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table114.AddRow(new string[] {
                        "[[result3]] = 3"});
#line 494
   testRunner.And("the \"Cnt2\" in Workflow \"WorkflowWithAssignCountDataMerge&2Delete\" debug outputs a" +
                    "s", ((string)(null)), table114, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with multiple tools Assign and SQL Bulk Insert executing against the ser" +
            "ver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithMultipleToolsAssignAndSQLBulkInsertExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with multiple tools Assign and SQL Bulk Insert executing against the ser" +
                    "ver", ((string[])(null)));
#line 498
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 499
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndSQLBulkInsert\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table115.AddRow(new string[] {
                        "[[rec().a]]",
                        "Warewolf"});
#line 500
   testRunner.And("\"WorkflowWithAssignAndSQLBulkInsert\" contains an Assign \"InsertData\" as", ((string)(null)), table115, "And ");
#line hidden
            TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column",
                        "Mapping",
                        "IsNullable",
                        "DataTypeName",
                        "MaxLength",
                        "IsAutoIncrement"});
            table116.AddRow(new string[] {
                        "Id",
                        "",
                        "false",
                        "int",
                        "",
                        "true"});
            table116.AddRow(new string[] {
                        "Name",
                        "[[rec().a]]",
                        "false",
                        "varchar",
                        "50",
                        "false"});
            table116.AddRow(new string[] {
                        "Email",
                        "Warewolf@dev2.co.za",
                        "false",
                        "varchar",
                        "50",
                        "false"});
#line 503
   testRunner.And("\"WorkflowWithAssignAndSQLBulkInsert\" contains an SQL Bulk Insert \"BulkInsert\" usi" +
                    "ng database \"NewSqlServerSource\" and table \"dbo.MailingList\" and KeepIdentity se" +
                    "t \"false\" and Result set \"[[result]]\" as", ((string)(null)), table116, "And ");
#line 508
   testRunner.When("\"WorkflowWithAssignAndSQLBulkInsert\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 509
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table117.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Warewolf"});
#line 510
   testRunner.And("the \"InsertData\" in WorkFlow \"WorkflowWithAssignAndSQLBulkInsert\" debug inputs as" +
                    "", ((string)(null)), table117, "And ");
#line hidden
            TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table118.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Warewolf"});
#line 513
   testRunner.And("the \"InsertData\" in Workflow \"WorkflowWithAssignAndSQLBulkInsert\" debug outputs a" +
                    "s", ((string)(null)), table118, "And ");
#line hidden
            TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table119.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Warewolf",
                        "Name",
                        "varchar (50)",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table119.AddRow(new string[] {
                        "2",
                        "Warewolf@dev2.co.za",
                        "Email",
                        "varchar (50)",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table119.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "0",
                        "0",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "YES"});
#line 516
   testRunner.And("the \"BulkInsert\" in WorkFlow \"WorkflowWithAssignAndSQLBulkInsert\" debug inputs as" +
                    "", ((string)(null)), table119, "And ");
#line hidden
            TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table120.AddRow(new string[] {
                        "[[result]] = Success"});
#line 521
   testRunner.And("the \"BulkInsert\" in Workflow \"WorkflowWithAssignAndSQLBulkInsert\" debug outputs a" +
                    "s", ((string)(null)), table120, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with multiple tools Assign and SQL Bulk Insert with negative Recordset I" +
            "ndex executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithMultipleToolsAssignAndSQLBulkInsertWithNegativeRecordsetIndexExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with multiple tools Assign and SQL Bulk Insert with negative Recordset I" +
                    "ndex executing against the server", ((string[])(null)));
#line 525
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 526
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndSQLBulk\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table121.AddRow(new string[] {
                        "[[rec().a]]",
                        "Warewolf"});
#line 527
   testRunner.And("\"WorkflowWithAssignAndSQLBulk\" contains an Assign \"InsertData\" as", ((string)(null)), table121, "And ");
#line hidden
            TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column",
                        "Mapping",
                        "IsNullable",
                        "DataTypeName",
                        "MaxLength",
                        "IsAutoIncrement"});
            table122.AddRow(new string[] {
                        "Id",
                        "",
                        "false",
                        "int",
                        "",
                        "true"});
            table122.AddRow(new string[] {
                        "Name",
                        "[[rec(-1).a]]",
                        "false",
                        "varchar",
                        "50",
                        "false"});
            table122.AddRow(new string[] {
                        "Email",
                        "Warewolf@dev2.co.za",
                        "false",
                        "varchar",
                        "50",
                        "false"});
#line 530
   testRunner.And("\"WorkflowWithAssignAndSQLBulk\" contains an SQL Bulk Insert \"BulkInsert\" using dat" +
                    "abase \"NewSqlServerSource\" and table \"dbo.MailingList\" and KeepIdentity set \"fal" +
                    "se\" and Result set \"[[result]]\" as", ((string)(null)), table122, "And ");
#line 535
   testRunner.When("\"WorkflowWithAssignAndSQLBulk\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 536
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table123 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table123.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Warewolf"});
#line 537
   testRunner.And("the \"InsertData\" in WorkFlow \"WorkflowWithAssignAndSQLBulk\" debug inputs as", ((string)(null)), table123, "And ");
#line hidden
            TechTalk.SpecFlow.Table table124 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table124.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Warewolf"});
#line 540
   testRunner.And("the \"InsertData\" in Workflow \"WorkflowWithAssignAndSQLBulk\" debug outputs as", ((string)(null)), table124, "And ");
#line hidden
            TechTalk.SpecFlow.Table table125 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table125.AddRow(new string[] {
                        "1",
                        "[[rec(-1).a]] =",
                        "Name",
                        "varchar (50)",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table125.AddRow(new string[] {
                        "2",
                        "Warewolf@dev2.co.za",
                        "Email",
                        "varchar (50)",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 543
   testRunner.And("the \"BulkInsert\" in WorkFlow \"WorkflowWithAssignAndSQLBulk\" debug inputs as", ((string)(null)), table125, "And ");
#line hidden
            TechTalk.SpecFlow.Table table126 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table126.AddRow(new string[] {
                        "[[result]] = Failure"});
#line 547
   testRunner.And("the \"BulkInsert\" in Workflow \"WorkflowWithAssignAndSQLBulk\" debug outputs as", ((string)(null)), table126, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Base Convert(Evaluating scalar variable inside va" +
            "riable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndBaseConvertEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Base Convert(Evaluating scalar variable inside va" +
                    "riable)executing against the server", ((string[])(null)));
#line 551
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 552
  testRunner.Given("I have a workflow \"WorkflowWithAssignandBase\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table127 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table127.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table127.AddRow(new string[] {
                        "[[b]]",
                        "12"});
#line 553
  testRunner.And("\"WorkflowWithAssignandBase\" contains an Assign \"Base Var\" as", ((string)(null)), table127, "And ");
#line hidden
            TechTalk.SpecFlow.Table table128 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table128.AddRow(new string[] {
                        "[[[[a]]]]",
                        "Text",
                        "Base 64"});
#line 557
    testRunner.And("\"WorkflowWithAssignandBase\" contains Base convert \"Base\" as", ((string)(null)), table128, "And ");
#line 560
   testRunner.When("\"WorkflowWithAssignandBase\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 561
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table129 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table129.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table129.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "12"});
#line 562
   testRunner.And("the \"Base Var\" in WorkFlow \"WorkflowWithAssignandBase\" debug inputs as", ((string)(null)), table129, "And ");
#line hidden
            TechTalk.SpecFlow.Table table130 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table130.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table130.AddRow(new string[] {
                        "2",
                        "[[b]] = 12"});
#line 566
   testRunner.And("the \"Base Var\" in Workflow \"WorkflowWithAssignandBase\" debug outputs as", ((string)(null)), table130, "And ");
#line hidden
            TechTalk.SpecFlow.Table table131 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table131.AddRow(new string[] {
                        "1",
                        "[[b]] = 12",
                        "Text",
                        "Base 64"});
#line 570
    testRunner.And("the \"Base\" in WorkFlow \"WorkflowWithAssignandBase\" debug inputs as", ((string)(null)), table131, "And ");
#line hidden
            TechTalk.SpecFlow.Table table132 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table132.AddRow(new string[] {
                        "1",
                        "[[b]] = MTI="});
#line 573
      testRunner.And("the \"Base\" in Workflow \"WorkflowWithAssignandBase\" debug outputs as", ((string)(null)), table132, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Base Convert(Evaluating Recordset variable inside" +
            " variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndBaseConvertEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Base Convert(Evaluating Recordset variable inside" +
                    " variable)executing against the server", ((string[])(null)));
#line 577
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 578
  testRunner.Given("I have a workflow \"WorkflowWithAssignandBasec\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table133 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table133.AddRow(new string[] {
                        "[[rs().a]]",
                        "rec(1).a"});
            table133.AddRow(new string[] {
                        "[[rec().a]]",
                        "12"});
#line 579
  testRunner.And("\"WorkflowWithAssignandBasec\" contains an Assign \"BaseVar\" as", ((string)(null)), table133, "And ");
#line hidden
            TechTalk.SpecFlow.Table table134 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table134.AddRow(new string[] {
                        "[[[[rs().a]]]]",
                        "Text",
                        "Base 64"});
#line 583
    testRunner.And("\"WorkflowWithAssignandBasec\" contains Base convert \"Base\" as", ((string)(null)), table134, "And ");
#line 586
   testRunner.When("\"WorkflowWithAssignandBasec\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 587
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table135 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table135.AddRow(new string[] {
                        "1",
                        "[[rs().a]] =",
                        "rec(1).a"});
            table135.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "12"});
#line 588
   testRunner.And("the \"BaseVar\" in WorkFlow \"WorkflowWithAssignandBasec\" debug inputs as", ((string)(null)), table135, "And ");
#line hidden
            TechTalk.SpecFlow.Table table136 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table136.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = rec(1).a"});
            table136.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = 12"});
#line 592
   testRunner.And("the \"BaseVar\" in Workflow \"WorkflowWithAssignandBasec\" debug outputs as", ((string)(null)), table136, "And ");
#line hidden
            TechTalk.SpecFlow.Table table137 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table137.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 12",
                        "Text",
                        "Base 64"});
#line 596
    testRunner.And("the \"Base\" in WorkFlow \"WorkflowWithAssignandBasec\" debug inputs as", ((string)(null)), table137, "And ");
#line hidden
            TechTalk.SpecFlow.Table table138 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table138.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = MTI="});
#line 599
      testRunner.And("the \"Base\" in Workflow \"WorkflowWithAssignandBasec\" debug outputs as", ((string)(null)), table138, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Case Convert(Evaluating scalar variable inside va" +
            "riable)executing against the server.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndCaseConvertEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Case Convert(Evaluating scalar variable inside va" +
                    "riable)executing against the server.", ((string[])(null)));
#line 603
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 604
  testRunner.Given("I have a workflow \"WorkflowWithAssignandcCse\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table139 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table139.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table139.AddRow(new string[] {
                        "[[b]]",
                        "warewolf"});
#line 605
  testRunner.And("\"WorkflowWithAssignandcCse\" contains an Assign \"Case Var\" as", ((string)(null)), table139, "And ");
#line hidden
            TechTalk.SpecFlow.Table table140 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table140.AddRow(new string[] {
                        "[[[[a]]]]",
                        "UPPER"});
#line 609
    testRunner.And("\"WorkflowWithAssignandcCse\" contains case convert \"CaseConvert\" as", ((string)(null)), table140, "And ");
#line 612
   testRunner.When("\"WorkflowWithAssignandcCse\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 613
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table141 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table141.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table141.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "warewolf"});
#line 614
   testRunner.And("the \"Case Var\" in WorkFlow \"WorkflowWithAssignandcCse\" debug inputs as", ((string)(null)), table141, "And ");
#line hidden
            TechTalk.SpecFlow.Table table142 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table142.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table142.AddRow(new string[] {
                        "2",
                        "[[b]] = warewolf"});
#line 618
   testRunner.And("the \"Case Var\" in Workflow \"WorkflowWithAssignandcCse\" debug outputs as", ((string)(null)), table142, "And ");
#line hidden
            TechTalk.SpecFlow.Table table143 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table143.AddRow(new string[] {
                        "1",
                        "[[b]] = warewolf",
                        "UPPER"});
#line 622
  testRunner.And("the \"CaseConvert\" in WorkFlow \"WorkflowWithAssignandcCse\" debug inputs as", ((string)(null)), table143, "And ");
#line hidden
            TechTalk.SpecFlow.Table table144 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table144.AddRow(new string[] {
                        "1",
                        "[[b]] = WAREWOLF"});
#line 625
   testRunner.And("the \"CaseConvert\" in Workflow \"WorkflowWithAssignandcCse\" debug outputs as", ((string)(null)), table144, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Case Convert(Evaluating Recordset variable inside" +
            " variable)executing against the server.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndCaseConvertEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Case Convert(Evaluating Recordset variable inside" +
                    " variable)executing against the server.", ((string[])(null)));
#line 629
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 630
  testRunner.Given("I have a workflow \"WorkflowWithAssignandcCase\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table145 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table145.AddRow(new string[] {
                        "[[rs().a]]",
                        "rec(1).a"});
            table145.AddRow(new string[] {
                        "[[rec().a]]",
                        "warewolf"});
#line 631
  testRunner.And("\"WorkflowWithAssignandcCase\" contains an Assign \"Case Var\" as", ((string)(null)), table145, "And ");
#line hidden
            TechTalk.SpecFlow.Table table146 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table146.AddRow(new string[] {
                        "[[[[rs(1).a]]]]",
                        "UPPER"});
#line 635
    testRunner.And("\"WorkflowWithAssignandcCase\" contains case convert \"CaseConvert\" as", ((string)(null)), table146, "And ");
#line 638
   testRunner.When("\"WorkflowWithAssignandcCase\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 639
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table147 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table147.AddRow(new string[] {
                        "1",
                        "[[rs().a]] =",
                        "rec(1).a"});
            table147.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "warewolf"});
#line 640
   testRunner.And("the \"Case Var\" in WorkFlow \"WorkflowWithAssignandcCase\" debug inputs as", ((string)(null)), table147, "And ");
#line hidden
            TechTalk.SpecFlow.Table table148 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table148.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = rec(1).a"});
            table148.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = warewolf"});
#line 644
   testRunner.And("the \"Case Var\" in Workflow \"WorkflowWithAssignandcCase\" debug outputs as", ((string)(null)), table148, "And ");
#line hidden
            TechTalk.SpecFlow.Table table149 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table149.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = warewolf",
                        "UPPER"});
#line 648
  testRunner.And("the \"CaseConvert\" in WorkFlow \"WorkflowWithAssignandcCase\" debug inputs as", ((string)(null)), table149, "And ");
#line hidden
            TechTalk.SpecFlow.Table table150 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table150.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = WAREWOLF"});
#line 651
   testRunner.And("the \"CaseConvert\" in Workflow \"WorkflowWithAssignandcCase\" debug outputs as", ((string)(null)), table150, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Data Merge (Evaluating variables inside variable)" +
            "executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndDataMergeEvaluatingVariablesInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Data Merge (Evaluating variables inside variable)" +
                    "executing against the server", ((string[])(null)));
#line 655
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 656
  testRunner.Given("I have a workflow \"WorkflowWithAssignandData\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table151 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table151.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table151.AddRow(new string[] {
                        "[[b]]",
                        "warewolf"});
            table151.AddRow(new string[] {
                        "[[rs().a]]",
                        "rec(1).a"});
            table151.AddRow(new string[] {
                        "[[rec().a]]",
                        "test"});
#line 657
  testRunner.And("\"WorkflowWithAssignandData\" contains an Assign \"Datam\" as", ((string)(null)), table151, "And ");
#line hidden
            TechTalk.SpecFlow.Table table152 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table152.AddRow(new string[] {
                        "[[[[a]]]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
            table152.AddRow(new string[] {
                        "[[[[rs().a]]]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
#line 663
     testRunner.And("\"WorkflowWithAssignandData\" contains Data Merge \"Datamerge\" into \"[[result]]\" as", ((string)(null)), table152, "And ");
#line 667
  testRunner.When("\"WorkflowWithAssignandData\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 668
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table153 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table153.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table153.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "warewolf"});
            table153.AddRow(new string[] {
                        "3",
                        "[[rs().a]] =",
                        "rec(1).a"});
            table153.AddRow(new string[] {
                        "4",
                        "[[rec().a]] =",
                        "test"});
#line 669
  testRunner.And("the \"Datam\" in WorkFlow \"WorkflowWithAssignandData\" debug inputs as", ((string)(null)), table153, "And ");
#line hidden
            TechTalk.SpecFlow.Table table154 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table154.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table154.AddRow(new string[] {
                        "2",
                        "[[b]] = warewolf"});
            table154.AddRow(new string[] {
                        "3",
                        "[[rs(1).a]] = rec(1).a"});
            table154.AddRow(new string[] {
                        "4",
                        "[[rec(1).a]] = test"});
#line 675
  testRunner.And("the \"Datam\" in Workflow \"WorkflowWithAssignandData\" debug outputs as", ((string)(null)), table154, "And ");
#line hidden
            TechTalk.SpecFlow.Table table155 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table155.AddRow(new string[] {
                        "1",
                        "[[b]] = warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
            table155.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = test",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
#line 681
  testRunner.And("the \"Datamerge\" in WorkFlow \"WorkflowWithAssignandData\" debug inputs as", ((string)(null)), table155, "And ");
#line hidden
            TechTalk.SpecFlow.Table table156 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table156.AddRow(new string[] {
                        "[[result]] = warewolftest"});
#line 685
   testRunner.And("the \"Datamerge\" in Workflow \"WorkflowWithAssignandData\" debug outputs as", ((string)(null)), table156, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Find Index(Evaluating scalar variable inside vari" +
            "able)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFindIndexEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Find Index(Evaluating scalar variable inside vari" +
                    "able)executing against the server", ((string[])(null)));
#line 689
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 690
  testRunner.Given("I have a workflow \"WorkflowWithAssignandFindIndex\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table157 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table157.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table157.AddRow(new string[] {
                        "[[b]]",
                        "test"});
#line 691
  testRunner.And("\"WorkflowWithAssignandFindIndex\" contains an Assign \"IndexVal\" as", ((string)(null)), table157, "And ");
#line hidden
            TechTalk.SpecFlow.Table table158 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Index",
                        "Character",
                        "Direction"});
            table158.AddRow(new string[] {
                        "[[[[a]]]]",
                        "First Occurence",
                        "s",
                        "Left to Right"});
#line 695
     testRunner.And("\"WorkflowWithAssignandFindIndex\" contains Find Index \"Indexchar\" into \"[[indexRes" +
                    "ult]]\" as", ((string)(null)), table158, "And ");
#line 698
   testRunner.When("\"WorkflowWithAssignandFindIndex\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 699
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table159 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table159.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table159.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
#line 700
   testRunner.And("the \"IndexVal\" in WorkFlow \"WorkflowWithAssignandFindIndex\" debug inputs as", ((string)(null)), table159, "And ");
#line hidden
            TechTalk.SpecFlow.Table table160 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table160.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table160.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
#line 704
   testRunner.And("the \"IndexVal\" in Workflow \"WorkflowWithAssignandFindIndex\" debug outputs as", ((string)(null)), table160, "And ");
#line hidden
            TechTalk.SpecFlow.Table table161 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table161.AddRow(new string[] {
                        "[[b]] = test",
                        "First Occurence",
                        "s",
                        "Left to Right"});
#line 708
    testRunner.And("the \"Indexchar\" in WorkFlow \"WorkflowWithAssignandFindIndex\" debug inputs as", ((string)(null)), table161, "And ");
#line hidden
            TechTalk.SpecFlow.Table table162 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table162.AddRow(new string[] {
                        "[[indexResult]] = 3"});
#line 711
   testRunner.And("the \"Indexchar\" in Workflow \"WorkflowWithAssignandFindIndex\" debug outputs as", ((string)(null)), table162, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Find Index(Evaluating recordset variable inside v" +
            "ariable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFindIndexEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Find Index(Evaluating recordset variable inside v" +
                    "ariable)executing against the server", ((string[])(null)));
#line 715
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 716
  testRunner.Given("I have a workflow \"WorkflowWithAssignandFindIndex1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table163 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table163.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table163.AddRow(new string[] {
                        "[[new().a]]",
                        "test"});
#line 717
  testRunner.And("\"WorkflowWithAssignandFindIndex1\" contains an Assign \"Index Val\" as", ((string)(null)), table163, "And ");
#line hidden
            TechTalk.SpecFlow.Table table164 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Index",
                        "Character",
                        "Direction"});
            table164.AddRow(new string[] {
                        "[[[[rec().a]]]]",
                        "First Occurence",
                        "s",
                        "Left to Right"});
#line 721
     testRunner.And("\"WorkflowWithAssignandFindIndex1\" contains Find Index \"Index char\" into \"[[indexR" +
                    "esult]]\" as", ((string)(null)), table164, "And ");
#line 724
   testRunner.When("\"WorkflowWithAssignandFindIndex1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 725
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table165 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table165.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "new().a"});
            table165.AddRow(new string[] {
                        "2",
                        "[[new().a]] =",
                        "test"});
#line 726
   testRunner.And("the \"Index Val\" in WorkFlow \"WorkflowWithAssignandFindIndex1\" debug inputs as", ((string)(null)), table165, "And ");
#line hidden
            TechTalk.SpecFlow.Table table166 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table166.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = new().a"});
            table166.AddRow(new string[] {
                        "2",
                        "[[new(1).a]] = test"});
#line 730
   testRunner.And("the \"Index Val\" in Workflow \"WorkflowWithAssignandFindIndex1\" debug outputs as", ((string)(null)), table166, "And ");
#line hidden
            TechTalk.SpecFlow.Table table167 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table167.AddRow(new string[] {
                        "[[new(1).a]] = test",
                        "First Occurence",
                        "s",
                        "Left to Right"});
#line 734
    testRunner.And("the \"Index char\" in WorkFlow \"WorkflowWithAssignandFindIndex1\" debug inputs as", ((string)(null)), table167, "And ");
#line hidden
            TechTalk.SpecFlow.Table table168 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table168.AddRow(new string[] {
                        "[[indexResult]] = 3"});
#line 737
   testRunner.And("the \"Index char\" in Workflow \"WorkflowWithAssignandFindIndex1\" debug outputs as", ((string)(null)), table168, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Replace(Evaluating scalar variable inside variabl" +
            "e)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndReplaceEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Replace(Evaluating scalar variable inside variabl" +
                    "e)executing against the server", ((string[])(null)));
#line 741
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 742
  testRunner.Given("I have a workflow \"WorkflowWithAssignandReplace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table169 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table169.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table169.AddRow(new string[] {
                        "[[b]]",
                        "test"});
#line 743
  testRunner.And("\"WorkflowWithAssignandReplace\" contains an Assign \"IndexVal\" as", ((string)(null)), table169, "And ");
#line hidden
            TechTalk.SpecFlow.Table table170 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table170.AddRow(new string[] {
                        "[[[[a]]]]",
                        "s",
                        "REPLACE"});
#line 747
      testRunner.And("\"WorkflowWithAssignandReplace\" contains Replace \"Replac\" into \"[[replaceResult]]\"" +
                    " as", ((string)(null)), table170, "And ");
#line 750
   testRunner.When("\"WorkflowWithAssignandReplace\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 751
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table171 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table171.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table171.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
#line 752
   testRunner.And("the \"IndexVal\" in WorkFlow \"WorkflowWithAssignandReplace\" debug inputs as", ((string)(null)), table171, "And ");
#line hidden
            TechTalk.SpecFlow.Table table172 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table172.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table172.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
#line 756
   testRunner.And("the \"IndexVal\" in Workflow \"WorkflowWithAssignandReplace\" debug outputs as", ((string)(null)), table172, "And ");
#line hidden
            TechTalk.SpecFlow.Table table173 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table173.AddRow(new string[] {
                        "[[b]] = test",
                        "s",
                        "REPLACE"});
#line 760
   testRunner.And("the \"Replac\" in WorkFlow \"WorkflowWithAssignandReplace\" debug inputs as", ((string)(null)), table173, "And ");
#line hidden
            TechTalk.SpecFlow.Table table174 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table174.AddRow(new string[] {
                        "[[b]] = teREPLACEt"});
            table174.AddRow(new string[] {
                        "[[replaceResult]] = 1"});
#line 763
     testRunner.And("the \"Replac\" in Workflow \"WorkflowWithAssignandReplace\" debug outputs as", ((string)(null)), table174, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Replace(Evaluating Recordset variable inside vari" +
            "able)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndReplaceEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Replace(Evaluating Recordset variable inside vari" +
                    "able)executing against the server", ((string[])(null)));
#line 768
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 769
  testRunner.Given("I have a workflow \"WorkflowWithAssignandReplacebyrec\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table175 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table175.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table175.AddRow(new string[] {
                        "[[new().a]]",
                        "test"});
#line 770
  testRunner.And("\"WorkflowWithAssignandReplacebyrec\" contains an Assign \"Vals\" as", ((string)(null)), table175, "And ");
#line hidden
            TechTalk.SpecFlow.Table table176 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table176.AddRow(new string[] {
                        "[[[[rec(1).a]]]]",
                        "s",
                        "REPLACE"});
#line 774
      testRunner.And("\"WorkflowWithAssignandReplacebyrec\" contains Replace \"Rep\" into \"[[replaceResult]" +
                    "]\" as", ((string)(null)), table176, "And ");
#line 777
   testRunner.When("\"WorkflowWithAssignandReplacebyrec\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 778
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table177 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table177.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "new().a"});
            table177.AddRow(new string[] {
                        "2",
                        "[[new().a]] =",
                        "test"});
#line 779
   testRunner.And("the \"Vals\" in WorkFlow \"WorkflowWithAssignandReplacebyrec\" debug inputs as", ((string)(null)), table177, "And ");
#line hidden
            TechTalk.SpecFlow.Table table178 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table178.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = new().a"});
            table178.AddRow(new string[] {
                        "2",
                        "[[new(1).a]] = test"});
#line 783
   testRunner.And("the \"Vals\" in Workflow \"WorkflowWithAssignandReplacebyrec\" debug outputs as", ((string)(null)), table178, "And ");
#line hidden
            TechTalk.SpecFlow.Table table179 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table179.AddRow(new string[] {
                        "[[new(1).a]] = test",
                        "s",
                        "REPLACE"});
#line 787
   testRunner.And("the \"Rep\" in WorkFlow \"WorkflowWithAssignandReplacebyrec\" debug inputs as", ((string)(null)), table179, "And ");
#line hidden
            TechTalk.SpecFlow.Table table180 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table180.AddRow(new string[] {
                        "[[new(1).a]] = teREPLACEt"});
            table180.AddRow(new string[] {
                        "[[replaceResult]] = 1"});
#line 790
     testRunner.And("the \"Rep\" in Workflow \"WorkflowWithAssignandReplacebyrec\" debug outputs as", ((string)(null)), table180, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Format Numbers(Evaluating scalar variable inside " +
            "variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFormatNumbersEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Format Numbers(Evaluating scalar variable inside " +
                    "variable)executing against the server", ((string[])(null)));
#line 795
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 796
   testRunner.Given("I have a workflow \"WorkflowWithAssignandFormat\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table181 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table181.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table181.AddRow(new string[] {
                        "[[b]]",
                        "12.3412"});
#line 797
   testRunner.And("\"WorkflowWithAssignandFormat\" contains an Assign \"IndexVal\" as", ((string)(null)), table181, "And ");
#line hidden
            TechTalk.SpecFlow.Table table182 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table182.AddRow(new string[] {
                        "[[[[a]]]]",
                        "Up",
                        "3",
                        "3",
                        "[[fresult]]"});
#line 801
      testRunner.And("\"WorkflowWithAssignandFormat\" contains Format Number \"Fnumber\" as", ((string)(null)), table182, "And ");
#line 804
   testRunner.When("\"WorkflowWithAssignandFormat\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 805
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table183 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table183.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table183.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "12.3412"});
#line 806
   testRunner.And("the \"IndexVal\" in WorkFlow \"WorkflowWithAssignandFormat\" debug inputs as", ((string)(null)), table183, "And ");
#line hidden
            TechTalk.SpecFlow.Table table184 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table184.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table184.AddRow(new string[] {
                        "2",
                        "[[b]] = 12.3412"});
#line 810
   testRunner.And("the \"IndexVal\" in Workflow \"WorkflowWithAssignandFormat\" debug outputs as", ((string)(null)), table184, "And ");
#line hidden
            TechTalk.SpecFlow.Table table185 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table185.AddRow(new string[] {
                        "[[b]] = 12.3412",
                        "Up",
                        "3",
                        "3"});
#line 814
   testRunner.And("the \"Fnumber\" in WorkFlow \"WorkflowWithAssignandFormat\" debug inputs as", ((string)(null)), table185, "And ");
#line hidden
            TechTalk.SpecFlow.Table table186 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table186.AddRow(new string[] {
                        "[[fresult]] = 12.342"});
#line 817
   testRunner.And("the \"Fnumber\" in Workflow \"WorkflowWithAssignandFormat\" debug outputs as", ((string)(null)), table186, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Format Numbers(Evaluating Recordset variable insi" +
            "de variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFormatNumbersEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Format Numbers(Evaluating Recordset variable insi" +
                    "de variable)executing against the server", ((string[])(null)));
#line 821
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 822
   testRunner.Given("I have a workflow \"WorkflowWithAssignandFormatn\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table187 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table187.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table187.AddRow(new string[] {
                        "[[new().a]]",
                        "12.3412"});
#line 823
   testRunner.And("\"WorkflowWithAssignandFormatn\" contains an Assign \"IndVal\" as", ((string)(null)), table187, "And ");
#line hidden
            TechTalk.SpecFlow.Table table188 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table188.AddRow(new string[] {
                        "[[[[rec().a]]]]",
                        "Up",
                        "3",
                        "3",
                        "[[fresult]]"});
#line 827
      testRunner.And("\"WorkflowWithAssignandFormatn\" contains Format Number \"Fnumb\" as", ((string)(null)), table188, "And ");
#line 830
   testRunner.When("\"WorkflowWithAssignandFormatn\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 831
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table189 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table189.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "new().a"});
            table189.AddRow(new string[] {
                        "2",
                        "[[new().a]] =",
                        "12.3412"});
#line 832
   testRunner.And("the \"IndVal\" in WorkFlow \"WorkflowWithAssignandFormatn\" debug inputs as", ((string)(null)), table189, "And ");
#line hidden
            TechTalk.SpecFlow.Table table190 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table190.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = new().a"});
            table190.AddRow(new string[] {
                        "2",
                        "[[new(1).a]] = 12.3412"});
#line 836
   testRunner.And("the \"IndVal\" in Workflow \"WorkflowWithAssignandFormatn\" debug outputs as", ((string)(null)), table190, "And ");
#line hidden
            TechTalk.SpecFlow.Table table191 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table191.AddRow(new string[] {
                        "[[new(1).a]] = 12.3412",
                        "Up",
                        "3",
                        "3"});
#line 840
   testRunner.And("the \"Fnumb\" in WorkFlow \"WorkflowWithAssignandFormatn\" debug inputs as", ((string)(null)), table191, "And ");
#line hidden
            TechTalk.SpecFlow.Table table192 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table192.AddRow(new string[] {
                        "[[fresult]] = 12.342"});
#line 843
   testRunner.And("the \"Fnumb\" in Workflow \"WorkflowWithAssignandFormatn\" debug outputs as", ((string)(null)), table192, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Random(Evaluating recordset variable inside varia" +
            "ble)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndRandomEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Random(Evaluating recordset variable inside varia" +
                    "ble)executing against the server", ((string[])(null)));
#line 847
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 848
  testRunner.Given("I have a workflow \"WorkflowWithAssignandRandom\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table193 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table193.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table193.AddRow(new string[] {
                        "[[b]]",
                        "10"});
            table193.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table193.AddRow(new string[] {
                        "[[new().a]]",
                        "20"});
#line 849
  testRunner.And("\"WorkflowWithAssignandRandom\" contains an Assign \"Valforrandno\" as", ((string)(null)), table193, "And ");
#line hidden
            TechTalk.SpecFlow.Table table194 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table194.AddRow(new string[] {
                        "Numbers",
                        "[[[[a]]]]",
                        "[[[[rec().a]]]]",
                        "[[ranresult]]"});
#line 855
    testRunner.And("\"WorkflowWithAssignandRandom\" contains Random \"Rand\" as", ((string)(null)), table194, "And ");
#line 858
   testRunner.When("\"WorkflowWithAssignandRandom\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 859
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table195 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table195.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table195.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "10"});
            table195.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "new().a"});
            table195.AddRow(new string[] {
                        "4",
                        "[[new().a]] =",
                        "20"});
#line 860
   testRunner.And("the \"Valforrandno\" in WorkFlow \"WorkflowWithAssignandRandom\" debug inputs as", ((string)(null)), table195, "And ");
#line hidden
            TechTalk.SpecFlow.Table table196 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table196.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table196.AddRow(new string[] {
                        "2",
                        "[[b]] = 10"});
            table196.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = new().a"});
            table196.AddRow(new string[] {
                        "4",
                        "[[new(1).a]] = 20"});
#line 866
   testRunner.And("the \"Valforrandno\" in Workflow \"WorkflowWithAssignandRandom\" debug outputs as", ((string)(null)), table196, "And ");
#line hidden
            TechTalk.SpecFlow.Table table197 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table197.AddRow(new string[] {
                        "Numbers",
                        "[[b]] = 10",
                        "[[new(1).a]] = 20"});
#line 872
   testRunner.And("the \"Rand\" in WorkFlow \"WorkflowWithAssignandRandom\" debug inputs as", ((string)(null)), table197, "And ");
#line hidden
            TechTalk.SpecFlow.Table table198 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table198.AddRow(new string[] {
                        "[[ranresult]] = Int32"});
#line 875
   testRunner.And("the \"Rand\" in Workflow \"WorkflowWithAssignandRandom\" debug outputs as", ((string)(null)), table198, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Date and Time(Evaluating recordset variable insid" +
            "e variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndDateAndTimeEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Date and Time(Evaluating recordset variable insid" +
                    "e variable)executing against the server", ((string[])(null)));
#line 879
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 880
  testRunner.Given("I have a workflow \"WorkflowWithAssignandDateTimetool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table199 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table199.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table199.AddRow(new string[] {
                        "[[b]]",
                        "01/02/2014"});
            table199.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table199.AddRow(new string[] {
                        "[[new().a]]",
                        "dd/mm/yyyy"});
#line 881
  testRunner.And("\"WorkflowWithAssignandDateTimetool\" contains an Assign \"Dateandtime\" as", ((string)(null)), table199, "And ");
#line hidden
            TechTalk.SpecFlow.Table table200 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "Output Format",
                        "Result"});
            table200.AddRow(new string[] {
                        "[[[[a]]]]",
                        "[[[[rec(1).a]]]]",
                        "1",
                        "dd/mm/yyyy",
                        "[[res]]"});
#line 887
   testRunner.And("\"WorkflowWithAssignandDateTimetool\" contains Date and Time \"AddDate\" as", ((string)(null)), table200, "And ");
#line 890
   testRunner.When("\"WorkflowWithAssignandDateTimetool\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 891
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table201 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table201.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table201.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "01/02/2014"});
            table201.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "new().a"});
            table201.AddRow(new string[] {
                        "4",
                        "[[new().a]] =",
                        "dd/mm/yyyy"});
#line 892
   testRunner.And("the \"Dateandtime\" in WorkFlow \"WorkflowWithAssignandDateTimetool\" debug inputs as" +
                    "", ((string)(null)), table201, "And ");
#line hidden
            TechTalk.SpecFlow.Table table202 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table202.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table202.AddRow(new string[] {
                        "2",
                        "[[b]] = 01/02/2014"});
            table202.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = new().a"});
            table202.AddRow(new string[] {
                        "4",
                        "[[new(1).a]] =  dd/mm/yyyy"});
#line 898
    testRunner.And("the \"Dateandtime\" in Workflow \"WorkflowWithAssignandDateTimetool\" debug outputs a" +
                    "s", ((string)(null)), table202, "And ");
#line hidden
            TechTalk.SpecFlow.Table table203 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table203.AddRow(new string[] {
                        "[[b]] = 01/02/2014",
                        "[[new(1).a]] = dd/mm/yyyy",
                        "Years",
                        "1",
                        "dd/mm/yyyy"});
#line 904
    testRunner.And("the \"AddDate\" in WorkFlow \"WorkflowWithAssignandDateTimetool\" debug inputs as", ((string)(null)), table203, "And ");
#line hidden
            TechTalk.SpecFlow.Table table204 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table204.AddRow(new string[] {
                        "[[res]] = 01/02/2015"});
#line 907
    testRunner.And("the \"AddDate\" in Workflow \"WorkflowWithAssignandDateTimetool\" debug outputs as", ((string)(null)), table204, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and DateTimeDiff(Evaluating recordset variable inside" +
            " variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndDateTimeDiffEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and DateTimeDiff(Evaluating recordset variable inside" +
                    " variable)executing against the server", ((string[])(null)));
#line 911
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 912
   testRunner.Given("I have a workflow \"WorkflowWithAssignandDateTimeDiff\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table205 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table205.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table205.AddRow(new string[] {
                        "[[b]]",
                        "01/02/2016"});
            table205.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table205.AddRow(new string[] {
                        "[[new().a]]",
                        "01/02/2014"});
#line 913
   testRunner.And("\"WorkflowWithAssignandDateTimeDiff\" contains an Assign \"Dateandtime\" as", ((string)(null)), table205, "And ");
#line hidden
            TechTalk.SpecFlow.Table table206 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table206.AddRow(new string[] {
                        "[[[[rec(1).a]]]]",
                        "[[[[a]]]]",
                        "dd/mm/yyyy",
                        "Years",
                        "[[result]]"});
#line 919
   testRunner.And("\"WorkflowWithAssignandDateTimeDiff\" contains Date and Time Difference \"DateTimedi" +
                    "f\" as", ((string)(null)), table206, "And ");
#line 922
    testRunner.When("\"WorkflowWithAssignandDateTimeDiff\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 923
    testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table207 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table207.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table207.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "01/02/2016"});
            table207.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "new().a"});
            table207.AddRow(new string[] {
                        "4",
                        "[[new().a]] =",
                        "01/02/2014"});
#line 924
    testRunner.And("the \"Dateandtime\" in WorkFlow \"WorkflowWithAssignandDateTimeDiff\" debug inputs as" +
                    "", ((string)(null)), table207, "And ");
#line hidden
            TechTalk.SpecFlow.Table table208 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table208.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table208.AddRow(new string[] {
                        "2",
                        "[[b]] = 01/02/2016"});
            table208.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = new().a"});
            table208.AddRow(new string[] {
                        "4",
                        "[[new(1).a]] = 01/02/2014"});
#line 930
    testRunner.And("the \"Dateandtime\" in Workflow \"WorkflowWithAssignandDateTimeDiff\" debug outputs a" +
                    "s", ((string)(null)), table208, "And ");
#line hidden
            TechTalk.SpecFlow.Table table209 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table209.AddRow(new string[] {
                        "[[new(1).a]] = 01/02/2014",
                        "[[b]] = 01/02/2016",
                        "dd/mm/yyyy",
                        "Years"});
#line 936
    testRunner.And("the \"DateTimedif\" in WorkFlow \"WorkflowWithAssignandDateTimeDiff\" debug inputs as" +
                    "", ((string)(null)), table209, "And ");
#line hidden
            TechTalk.SpecFlow.Table table210 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table210.AddRow(new string[] {
                        "[[result]] = 2"});
#line 939
    testRunner.And("the \"DateTimedif\" in Workflow \"WorkflowWithAssignandDateTimeDiff\" debug outputs a" +
                    "s", ((string)(null)), table210, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Replace(Evaluating variable inside a varable)exec" +
            "uting against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndReplaceEvaluatingVariableInsideAVarableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Replace(Evaluating variable inside a varable)exec" +
                    "uting against the server", ((string[])(null)));
#line 943
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 944
  testRunner.Given("I have a workflow \"WorkflowWithAssignReplace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table211 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table211.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table211.AddRow(new string[] {
                        "[[b]]",
                        "test"});
#line 945
  testRunner.And("\"WorkflowWithAssignReplace\" contains an Assign \"IndexVal\" as", ((string)(null)), table211, "And ");
#line hidden
            TechTalk.SpecFlow.Table table212 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table212.AddRow(new string[] {
                        "[[[[a]]]]",
                        "s",
                        "REPLACE"});
#line 949
      testRunner.And("\"WorkflowWithAssignReplace\" contains Replace \"Replac\" into \"[[replaceResult]]\" as" +
                    "", ((string)(null)), table212, "And ");
#line 952
   testRunner.When("\"WorkflowWithAssignReplace\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 953
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table213 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table213.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table213.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
#line 954
   testRunner.And("the \"IndexVal\" in WorkFlow \"WorkflowWithAssignReplace\" debug inputs as", ((string)(null)), table213, "And ");
#line hidden
            TechTalk.SpecFlow.Table table214 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table214.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table214.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
#line 958
   testRunner.And("the \"IndexVal\" in Workflow \"WorkflowWithAssignReplace\" debug outputs as", ((string)(null)), table214, "And ");
#line hidden
            TechTalk.SpecFlow.Table table215 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table215.AddRow(new string[] {
                        "[[b]] = test",
                        "s",
                        "REPLACE"});
#line 962
   testRunner.And("the \"Replac\" in WorkFlow \"WorkflowWithAssignReplace\" debug inputs as", ((string)(null)), table215, "And ");
#line hidden
            TechTalk.SpecFlow.Table table216 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table216.AddRow(new string[] {
                        "[[b]] = teREPLACEt"});
            table216.AddRow(new string[] {
                        "[[replaceResult]] = 1"});
#line 965
     testRunner.And("the \"Replac\" in Workflow \"WorkflowWithAssignReplace\" debug outputs as", ((string)(null)), table216, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Format Numbers(Evaluating variable inside variabl" +
            "e in format number tool)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFormatNumbersEvaluatingVariableInsideVariableInFormatNumberToolExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Format Numbers(Evaluating variable inside variabl" +
                    "e in format number tool)executing against the server", ((string[])(null)));
#line 970
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 971
      testRunner.Given("I have a workflow \"WorkflowAssignandFormat\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table217 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table217.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table217.AddRow(new string[] {
                        "[[b]]",
                        "12.3412"});
#line 972
   testRunner.And("\"WorkflowAssignandFormat\" contains an Assign \"IndexVal1\" as", ((string)(null)), table217, "And ");
#line hidden
            TechTalk.SpecFlow.Table table218 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table218.AddRow(new string[] {
                        "[[[[a]]]]",
                        "Up",
                        "3",
                        "3",
                        "[[fresult]]"});
#line 976
      testRunner.And("\"WorkflowAssignandFormat\" contains Format Number \"Fnumber1\" as", ((string)(null)), table218, "And ");
#line 979
   testRunner.When("\"WorkflowAssignandFormat\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 980
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table219 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table219.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table219.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "12.3412"});
#line 981
   testRunner.And("the \"IndexVal1\" in WorkFlow \"WorkflowAssignandFormat\" debug inputs as", ((string)(null)), table219, "And ");
#line hidden
            TechTalk.SpecFlow.Table table220 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table220.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table220.AddRow(new string[] {
                        "2",
                        "[[b]] = 12.3412"});
#line 985
   testRunner.And("the \"IndexVal1\" in Workflow \"WorkflowAssignandFormat\" debug outputs as", ((string)(null)), table220, "And ");
#line hidden
            TechTalk.SpecFlow.Table table221 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table221.AddRow(new string[] {
                        "[[b]] = 12.3412",
                        "Up",
                        "3",
                        "3"});
#line 989
   testRunner.And("the \"Fnumber1\" in WorkFlow \"WorkflowAssignandFormat\" debug inputs as", ((string)(null)), table221, "And ");
#line hidden
            TechTalk.SpecFlow.Table table222 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table222.AddRow(new string[] {
                        "[[fresult]] = 12.342"});
#line 992
   testRunner.And("the \"Fnumber1\" in Workflow \"WorkflowAssignandFormat\" debug outputs as", ((string)(null)), table222, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign DataMerge and DataSplit(Evaluating recordset variable" +
            " as index variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignDataMergeAndDataSplitEvaluatingRecordsetVariableAsIndexVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign DataMerge and DataSplit(Evaluating recordset variable" +
                    " as index variable)executing against the server", ((string[])(null)));
#line 996
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 997
  testRunner.Given("I have a workflow \"WorkflowWithAssignDatamergeandSplit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table223 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table223.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table223.AddRow(new string[] {
                        "[[b]]",
                        "2"});
            table223.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "warewolf"});
            table223.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "test"});
#line 998
  testRunner.And("\"WorkflowWithAssignDatamergeandSplit\" contains an Assign \"Data\" as", ((string)(null)), table223, "And ");
#line hidden
            TechTalk.SpecFlow.Table table224 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table224.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
            table224.AddRow(new string[] {
                        "[[a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
#line 1004
      testRunner.And("\"WorkflowWithAssignDatamergeandSplit\" contains Data Merge \"Merge\" into \"[[result]" +
                    "]\" as", ((string)(null)), table224, "And ");
#line hidden
            TechTalk.SpecFlow.Table table225 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table225.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "[[d]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table225.AddRow(new string[] {
                        "",
                        "[[c]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
#line 1008
   testRunner.And("\"WorkflowWithAssignDatamergeandSplit\" contains Data Split \"DataSplit\" as", ((string)(null)), table225, "And ");
#line 1012
   testRunner.When("\"WorkflowWithAssignDatamergeandSplit\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1013
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table226 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table226.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table226.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "2"});
            table226.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] =",
                        "warewolf"});
            table226.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]] =",
                        "test"});
#line 1014
   testRunner.And("the \"Data\" in WorkFlow \"WorkflowWithAssignDatamergeandSplit\" debug inputs as", ((string)(null)), table226, "And ");
#line hidden
            TechTalk.SpecFlow.Table table227 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table227.AddRow(new string[] {
                        "1",
                        "[[a]] = 1"});
            table227.AddRow(new string[] {
                        "2",
                        "[[b]] = 2"});
            table227.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = warewolf"});
            table227.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]] = test"});
#line 1020
   testRunner.And("the \"Data\" in Workflow \"WorkflowWithAssignDatamergeandSplit\" debug outputs as", ((string)(null)), table227, "And ");
#line hidden
            TechTalk.SpecFlow.Table table228 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table228.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
            table228.AddRow(new string[] {
                        "2",
                        "[[a]] = 1",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
#line 1026
      testRunner.And("the \"Merge\" in WorkFlow \"WorkflowWithAssignDatamergeandSplit\" debug inputs as", ((string)(null)), table228, "And ");
#line hidden
            TechTalk.SpecFlow.Table table229 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table229.AddRow(new string[] {
                        "[[result]] = warewolf1"});
#line 1030
   testRunner.And("the \"Merge\" in Workflow \"WorkflowWithAssignDatamergeandSplit\" debug outputs as", ((string)(null)), table229, "And ");
#line hidden
            TechTalk.SpecFlow.Table table230 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table230.AddRow(new string[] {
                        "[[rec(1).a]] = warewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[d]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
            table230.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[c]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
#line 1033
   testRunner.And("the \"DataSplit\" in WorkFlow \"WorkflowWithAssignDatamergeandSplit\" debug inputs as" +
                    "", ((string)(null)), table230, "And ");
#line hidden
            TechTalk.SpecFlow.Table table231 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table231.AddRow(new string[] {
                        "1",
                        "[[d]] = ware"});
            table231.AddRow(new string[] {
                        "2",
                        "[[c]] = wolf"});
#line 1037
   testRunner.And("the \"DataSplit\" in Workflow \"WorkflowWithAssignDatamergeandSplit\" debug outputs a" +
                    "s", ((string)(null)), table231, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign DataMerge and DataSplit(Evaluating index recordset va" +
            "riable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignDataMergeAndDataSplitEvaluatingIndexRecordsetVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign DataMerge and DataSplit(Evaluating index recordset va" +
                    "riable)executing against the server", ((string[])(null)));
#line 1044
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1045
 testRunner.Given("I have a workflow \"WorkflowWithAssignMergeandSplit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table232 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table232.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table232.AddRow(new string[] {
                        "[[b]]",
                        "2"});
            table232.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "warewolf"});
            table232.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "test"});
            table232.AddRow(new string[] {
                        "[[index(1).a]]",
                        "1"});
            table232.AddRow(new string[] {
                        "[[index(2).a]]",
                        "3"});
#line 1046
 testRunner.And("\"WorkflowWithAssignMergeandSplit\" contains an Assign \"Data\" as", ((string)(null)), table232, "And ");
#line hidden
            TechTalk.SpecFlow.Table table233 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table233.AddRow(new string[] {
                        "[[rec([[index(1).a]]).a]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
            table233.AddRow(new string[] {
                        "[[a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
#line 1054
  testRunner.And("\"WorkflowWithAssignMergeandSplit\" contains Data Merge \"Merge\" into \"[[result]]\" a" +
                    "s", ((string)(null)), table233, "And ");
#line hidden
            TechTalk.SpecFlow.Table table234 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table234.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "[[d]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table234.AddRow(new string[] {
                        "",
                        "[[rec([[index(2).a]]).a]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
#line 1058
  testRunner.And("\"WorkflowWithAssignMergeandSplit\" contains Data Split \"DataSplit\" as", ((string)(null)), table234, "And ");
#line 1062
  testRunner.When("\"WorkflowWithAssignMergeandSplit\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1063
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table235 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table235.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table235.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "2"});
            table235.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] =",
                        "warewolf"});
            table235.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]] =",
                        "test"});
            table235.AddRow(new string[] {
                        "5",
                        "[[index(1).a]] =",
                        "1"});
            table235.AddRow(new string[] {
                        "6",
                        "[[index(2).a]] =",
                        "3"});
#line 1064
  testRunner.And("the \"Data\" in WorkFlow \"WorkflowWithAssignMergeandSplit\" debug inputs as", ((string)(null)), table235, "And ");
#line hidden
            TechTalk.SpecFlow.Table table236 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table236.AddRow(new string[] {
                        "1",
                        "[[a]] = 1"});
            table236.AddRow(new string[] {
                        "2",
                        "[[b]] = 2"});
            table236.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = warewolf"});
            table236.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]] = test"});
            table236.AddRow(new string[] {
                        "5",
                        "[[index(1).a]] = 1"});
            table236.AddRow(new string[] {
                        "6",
                        "[[index(2).a]] = 3"});
#line 1072
  testRunner.And("the \"Data\" in Workflow \"WorkflowWithAssignMergeandSplit\" debug outputs as", ((string)(null)), table236, "And ");
#line hidden
            TechTalk.SpecFlow.Table table237 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table237.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
            table237.AddRow(new string[] {
                        "2",
                        "[[a]] = 1",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
#line 1080
    testRunner.And("the \"Merge\" in WorkFlow \"WorkflowWithAssignMergeandSplit\" debug inputs as", ((string)(null)), table237, "And ");
#line hidden
            TechTalk.SpecFlow.Table table238 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table238.AddRow(new string[] {
                        "[[result]] = warewolf1"});
#line 1084
  testRunner.And("the \"Merge\" in Workflow \"WorkflowWithAssignMergeandSplit\" debug outputs as", ((string)(null)), table238, "And ");
#line hidden
            TechTalk.SpecFlow.Table table239 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table239.AddRow(new string[] {
                        "[[rec(1).a]] = warewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[d]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
            table239.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[rec(3).a]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
#line 1087
  testRunner.And("the \"DataSplit\" in WorkFlow \"WorkflowWithAssignMergeandSplit\" debug inputs as", ((string)(null)), table239, "And ");
#line hidden
            TechTalk.SpecFlow.Table table240 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table240.AddRow(new string[] {
                        "1",
                        "[[d]] = ware"});
            table240.AddRow(new string[] {
                        "2",
                        "[[rec(3).a]] = wolf"});
#line 1091
   testRunner.And("the \"DataSplit\" in Workflow \"WorkflowWithAssignMergeandSplit\" debug outputs as", ((string)(null)), table240, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with 2 Assign tools evaluating recordset index variables.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void SimpleWorkflowWith2AssignToolsEvaluatingRecordsetIndexVariables_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with 2 Assign tools evaluating recordset index variables.", ((string[])(null)));
#line 1096
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1097
  testRunner.Given("I have a workflow \"WorkflowWithAssignandAssign\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table241 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table241.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table241.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "2"});
            table241.AddRow(new string[] {
                        "[[index(1).a]]",
                        "2"});
#line 1098
  testRunner.And("\"WorkflowWithAssignandAssign\" contains an Assign \"Data1\" as", ((string)(null)), table241, "And ");
#line hidden
            TechTalk.SpecFlow.Table table242 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table242.AddRow(new string[] {
                        "[[new([[a]]).a]]",
                        "test"});
            table242.AddRow(new string[] {
                        "[[rec([[index(1).a]]).a]]",
                        "warewolf"});
#line 1103
    testRunner.And("\"WorkflowWithAssignandAssign\" contains an Assign \"Data2\" as", ((string)(null)), table242, "And ");
#line 1107
   testRunner.When("\"WorkflowWithAssignandAssign\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1108
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table243 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table243.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table243.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] =",
                        "2"});
            table243.AddRow(new string[] {
                        "3",
                        "[[index(1).a]] =",
                        "2"});
#line 1109
   testRunner.And("the \"Data1\" in WorkFlow \"WorkflowWithAssignandAssign\" debug inputs as", ((string)(null)), table243, "And ");
#line hidden
            TechTalk.SpecFlow.Table table244 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table244.AddRow(new string[] {
                        "1",
                        "[[a]] = 1"});
            table244.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = 2"});
            table244.AddRow(new string[] {
                        "3",
                        "[[index(1).a]] = 2"});
#line 1114
   testRunner.And("the \"Data1\" in Workflow \"WorkflowWithAssignandAssign\" debug outputs as", ((string)(null)), table244, "And ");
#line hidden
            TechTalk.SpecFlow.Table table245 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table245.AddRow(new string[] {
                        "1",
                        "[[new(1).a]] =",
                        "test"});
            table245.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =",
                        "warewolf"});
#line 1119
    testRunner.And("the \"Data2\" in WorkFlow \"WorkflowWithAssignandAssign\" debug inputs as", ((string)(null)), table245, "And ");
#line hidden
            TechTalk.SpecFlow.Table table246 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table246.AddRow(new string[] {
                        "1",
                        "[[new(1).a]] = test"});
            table246.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = warewolf"});
#line 1123
   testRunner.And("the \"Data2\" in Workflow \"WorkflowWithAssignandAssign\" debug outputs as", ((string)(null)), table246, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign recordset calculate field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignRecordsetCalculateField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign recordset calculate field", ((string[])(null)));
#line 1128
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1129
      testRunner.Given("I have a workflow \"WFWithAssignHasCalculate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table247 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table247.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table247.AddRow(new string[] {
                        "[[b]]",
                        "2"});
            table247.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "[[a]]"});
            table247.AddRow(new string[] {
                        "[[rec(1).b]]",
                        "[[b]]"});
            table247.AddRow(new string[] {
                        "[[rec(1).c]]",
                        "=[[rec(1).a]]+[[rec(1).b]]"});
#line 1130
   testRunner.And("\"WFWithAssignHasCalculate\" contains an Assign \"values1\" as", ((string)(null)), table247, "And ");
#line 1137
   testRunner.When("\"WFWithAssignHasCalculate\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1138
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table248 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table248.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table248.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "2"});
            table248.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] =",
                        "[[a]] = 1"});
            table248.AddRow(new string[] {
                        "4",
                        "[[rec(1).b]] =",
                        "[[b]] = 2"});
            table248.AddRow(new string[] {
                        "5",
                        "[[rec(1).c]] =",
                        "[[rec(1).a]]+[[rec(1).b]] = 1+2"});
#line 1139
   testRunner.And("the \"values1\" in WorkFlow \"WFWithAssignHasCalculate\" debug inputs as", ((string)(null)), table248, "And ");
#line hidden
            TechTalk.SpecFlow.Table table249 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table249.AddRow(new string[] {
                        "1",
                        "[[a]] = 1"});
            table249.AddRow(new string[] {
                        "2",
                        "[[b]] = 2"});
            table249.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = 1"});
            table249.AddRow(new string[] {
                        "4",
                        "[[rec(1).b]] = 2"});
            table249.AddRow(new string[] {
                        "5",
                        "[[rec(1).c]] = 3"});
#line 1146
   testRunner.And("the \"values1\" in Workflow \"WFWithAssignHasCalculate\" debug outputs as", ((string)(null)), table249, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Calculate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignCalculate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Calculate", ((string[])(null)));
#line 1154
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1155
      testRunner.Given("I have a workflow \"WFWithAssignCalculateindexrecordset\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table250 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table250.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table250.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "2"});
            table250.AddRow(new string[] {
                        "[[index(1).a]]",
                        "1"});
            table250.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "6"});
#line 1156
   testRunner.And("\"WFWithAssignCalculateindexrecordset\" contains an Assign \"values1\" as", ((string)(null)), table250, "And ");
#line 1162
   testRunner.And("\"WFWithAssignCalculateindexrecordset\" contains Calculate \"Calculate1\" with formul" +
                    "a \"[[rec([[index(1).a]]).a]]+[[a]]\" into \"[[result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1163
   testRunner.When("\"WFWithAssignCalculateindexrecordset\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1164
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table251 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table251.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table251.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] =",
                        "2"});
            table251.AddRow(new string[] {
                        "3",
                        "[[index(1).a]] =",
                        "1"});
            table251.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]] =",
                        "6"});
#line 1165
   testRunner.And("the \"values1\" in WorkFlow \"WFWithAssignCalculateindexrecordset\" debug inputs as", ((string)(null)), table251, "And ");
#line hidden
            TechTalk.SpecFlow.Table table252 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table252.AddRow(new string[] {
                        "1",
                        "[[a]]         =  1"});
            table252.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]]  =  2"});
            table252.AddRow(new string[] {
                        "3",
                        "[[index(1).a]] = 1"});
            table252.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]]   = 6"});
#line 1171
  testRunner.And("the \"values1\" in Workflow \"WFWithAssignCalculateindexrecordset\" debug outputs as", ((string)(null)), table252, "And ");
#line hidden
            TechTalk.SpecFlow.Table table253 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table253.AddRow(new string[] {
                        "[[rec([[index(1).a]]).a]]+[[a]] = 2+1"});
#line 1177
   testRunner.And("the \"Calculate1\" in WorkFlow \"WFWithAssignCalculateindexrecordset\" debug inputs a" +
                    "s", ((string)(null)), table253, "And ");
#line hidden
            TechTalk.SpecFlow.Table table254 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table254.AddRow(new string[] {
                        "[[result]] = 3"});
#line 1180
      testRunner.And("the \"Calculate1\" in Workflow \"WFWithAssignCalculateindexrecordset\" debug outputs " +
                    "as", ((string)(null)), table254, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Calculate multiple recursion")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignCalculateMultipleRecursion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Calculate multiple recursion", ((string[])(null)));
#line 1184
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1185
      testRunner.Given("I have a workflow \"WFAssignCalculateRecursion\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table255 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table255.AddRow(new string[] {
                        "[[b]]",
                        "rec(1).b"});
            table255.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "b"});
            table255.AddRow(new string[] {
                        "[[rec(1).b]]",
                        "1"});
#line 1186
   testRunner.And("\"WFAssignCalculateRecursion\" contains an Assign \"values1\" as", ((string)(null)), table255, "And ");
#line 1191
   testRunner.And("\"WFAssignCalculateRecursion\" contains Calculate \"Calculate1\" with formula \"[[[[[[" +
                    "rec(1).a]]]]]]+1\" into \"[[result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1192
   testRunner.When("\"WFAssignCalculateRecursion\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1193
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table256 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table256.AddRow(new string[] {
                        "1",
                        "[[b]] =",
                        "rec(1).b"});
            table256.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] =",
                        "b"});
            table256.AddRow(new string[] {
                        "3",
                        "[[rec(1).b]] =",
                        "1"});
#line 1194
   testRunner.And("the \"values1\" in WorkFlow \"WFAssignCalculateRecursion\" debug inputs as", ((string)(null)), table256, "And ");
#line hidden
            TechTalk.SpecFlow.Table table257 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table257.AddRow(new string[] {
                        "1",
                        "[[b]]         =  rec(1).b"});
            table257.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]]  =  b"});
            table257.AddRow(new string[] {
                        "3",
                        "[[rec(1).b]]   = 1"});
#line 1199
  testRunner.And("the \"values1\" in Workflow \"WFAssignCalculateRecursion\" debug outputs as", ((string)(null)), table257, "And ");
#line hidden
            TechTalk.SpecFlow.Table table258 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table258.AddRow(new string[] {
                        "[[rec(1).b]]+1 = 1+1"});
#line 1204
   testRunner.And("the \"Calculate1\" in WorkFlow \"WFAssignCalculateRecursion\" debug inputs as", ((string)(null)), table258, "And ");
#line hidden
            TechTalk.SpecFlow.Table table259 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table259.AddRow(new string[] {
                        "[[result]] = 2"});
#line 1207
      testRunner.And("the \"Calculate1\" in Workflow \"WFAssignCalculateRecursion\" debug outputs as", ((string)(null)), table259, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Calculate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignAndCalculate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Calculate", ((string[])(null)));
#line 1211
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1212
      testRunner.Given("I have a workflow \"WFAssign&Calculate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table260 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table260.AddRow(new string[] {
                        "[[Honda().a1]]",
                        "1"});
            table260.AddRow(new string[] {
                        "[[Honda().a2]]",
                        "2"});
            table260.AddRow(new string[] {
                        "[[Honda().a3]]",
                        "3"});
            table260.AddRow(new string[] {
                        "[[Benz().a1]]",
                        "10"});
            table260.AddRow(new string[] {
                        "[[Benz().a2]]",
                        "20"});
            table260.AddRow(new string[] {
                        "[[Benz().a3]]",
                        "30"});
#line 1213
   testRunner.And("\"WFAssign&Calculate\" contains an Assign \"values1\" as", ((string)(null)), table260, "And ");
#line 1221
   testRunner.And("\"WFAssign&Calculate\" contains Calculate \"Calculate1\" with formula \"sum([[Benz(*)]" +
                    "])+sum([[Honda(*)]])\" into \"[[result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1222
   testRunner.When("\"WFAssign&Calculate\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1223
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table261 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table261.AddRow(new string[] {
                        "1",
                        "[[Honda().a1]] =",
                        "1"});
            table261.AddRow(new string[] {
                        "2",
                        "[[Honda().a2]] =",
                        "2"});
            table261.AddRow(new string[] {
                        "3",
                        "[[Honda().a3]] =",
                        "3"});
            table261.AddRow(new string[] {
                        "4",
                        "[[Benz().a1]]  =",
                        "10"});
            table261.AddRow(new string[] {
                        "5",
                        "[[Benz().a2]]  =",
                        "20"});
            table261.AddRow(new string[] {
                        "6",
                        "[[Benz().a3]]  =",
                        "30"});
#line 1224
   testRunner.And("the \"values1\" in WorkFlow \"WFAssign&Calculate\" debug inputs as", ((string)(null)), table261, "And ");
#line hidden
            TechTalk.SpecFlow.Table table262 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table262.AddRow(new string[] {
                        "1",
                        "[[Honda(1).a1]] =  1"});
            table262.AddRow(new string[] {
                        "2",
                        "[[Honda(1).a2]] =  2"});
            table262.AddRow(new string[] {
                        "3",
                        "[[Honda(1).a3]] =  3"});
            table262.AddRow(new string[] {
                        "4",
                        "[[Benz(1).a1]]  =  10"});
            table262.AddRow(new string[] {
                        "5",
                        "[[Benz(1).a2]]  =  20"});
            table262.AddRow(new string[] {
                        "6",
                        "[[Benz(1).a3]]  =  30"});
#line 1232
  testRunner.And("the \"values1\" in Workflow \"WFAssign&Calculate\" debug outputs as", ((string)(null)), table262, "And ");
#line hidden
            TechTalk.SpecFlow.Table table263 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table263.AddRow(new string[] {
                        "sum([[Benz(*)]])+sum([[Honda(*)]]) = sum(10)+sum(1)"});
            table263.AddRow(new string[] {
                        "sum([[Benz(*)]])+sum([[Honda(*)]]) = sum(10)+sum(2)"});
            table263.AddRow(new string[] {
                        "sum([[Benz(*)]])+sum([[Honda(*)]]) = sum(10)+sum(3)"});
            table263.AddRow(new string[] {
                        "sum([[Benz(*)]])+sum([[Honda(*)]]) = sum(20)+sum(1)"});
            table263.AddRow(new string[] {
                        "sum([[Benz(*)]])+sum([[Honda(*)]]) = sum(20)+sum(2)"});
            table263.AddRow(new string[] {
                        "sum([[Benz(*)]])+sum([[Honda(*)]]) = sum(20)+sum(3)"});
            table263.AddRow(new string[] {
                        "sum([[Benz(*)]])+sum([[Honda(*)]]) = sum(30)+sum(1)"});
            table263.AddRow(new string[] {
                        "sum([[Benz(*)]])+sum([[Honda(*)]]) = sum(30)+sum(2)"});
            table263.AddRow(new string[] {
                        "sum([[Benz(*)]])+sum([[Honda(*)]]) = sum(30)+sum(3)"});
#line 1240
   testRunner.And("the \"Calculate1\" in WorkFlow \"WFAssign&Calculate\" debug inputs as", ((string)(null)), table263, "And ");
#line hidden
            TechTalk.SpecFlow.Table table264 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table264.AddRow(new string[] {
                        "[[result]] = 33"});
#line 1251
      testRunner.And("the \"Calculate1\" in Workflow \"WFAssign&Calculate\" debug outputs as", ((string)(null)), table264, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and AssignObject")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignAndAssignObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and AssignObject", ((string[])(null)));
#line 1255
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1256
     testRunner.Given("I have a workflow \"WFWithAssignForAssignObject\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table265 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable"});
            table265.AddRow(new string[] {
                        "[[Human]]"});
#line 1257
  testRunner.And("\"WFWithAssignForAssignObject\" contains an Assign for Json \"JSonToVar\" as", ((string)(null)), table265, "And ");
#line hidden
            TechTalk.SpecFlow.Table table266 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table266.AddRow(new string[] {
                        "[[@Person]]",
                        "[[Human]]"});
#line 1260
     testRunner.And("\"WFWithAssignForAssignObject\" contains an Assign Object \"AssignPerson\" as", ((string)(null)), table266, "And ");
#line 1263
  testRunner.When("\"WFWithAssignForAssignObject\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1264
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table267 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table267.AddRow(new string[] {
                        "1",
                        "[[Human]] = {\"Name\":\"Bob\"}"});
#line 1265
   testRunner.And("the \"JSonToVar\" in Workflow \"WFWithAssignForAssignObject\" debug outputs as", ((string)(null)), table267, "And ");
#line hidden
            TechTalk.SpecFlow.Table table268 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 1268
   testRunner.And("the \"AssignPerson\" in Workflow \"WFWithAssignForAssignObject\" debug output contain" +
                    "s as", ((string)(null)), table268, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and ForEach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignAndForEach()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and ForEach", ((string[])(null)));
#line 1271
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1272
     testRunner.Given("I have a workflow \"WFWithAssignForEach\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table269 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table269.AddRow(new string[] {
                        "[[Warewolf]]",
                        "bob"});
#line 1273
  testRunner.And("\"WFWithAssignForEach\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table269, "And ");
#line 1276
     testRunner.And("\"WFWithAssignForEach\" contains a Foreach \"ForEachTest\" as \"NumOfExecution\" execut" +
                    "ions \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table270 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table270.AddRow(new string[] {
                        "a",
                        "[[Warewolf]]",
                        "",
                        ""});
#line 1277
  testRunner.And("\"ForEachTest\" contains workflow \"11714Nested\" with mapping as", ((string)(null)), table270, "And ");
#line 1280
  testRunner.When("\"WFWithAssignForEach\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1281
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table271 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table271.AddRow(new string[] {
                        "No. of Executes",
                        "3"});
#line 1282
  testRunner.And("the \"ForEachTest\" in WorkFlow \"WFWithAssignForEach\" debug inputs as", ((string)(null)), table271, "And ");
#line 1285
  testRunner.And("the \"ForEachTest\" in WorkFlow \"WFWithAssignForEach\" has  \"3\" nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table272 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table272.AddRow(new string[] {
                        "[[a]]",
                        "warewolf"});
#line 1286
  testRunner.And("each \"11714Nested\" contains debug outputs for \"Assign (1)\" as", ((string)(null)), table272, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Unique Tool, finding unique data from multiple rows")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignAndUniqueToolFindingUniqueDataFromMultipleRows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Unique Tool, finding unique data from multiple rows", ((string[])(null)));
#line 1290
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1291
      testRunner.Given("I have a workflow \"workflowithAssignandUnique\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table273 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table273.AddRow(new string[] {
                        "[[rs().row]]",
                        "10"});
            table273.AddRow(new string[] {
                        "[[rs().data]]",
                        "10"});
            table273.AddRow(new string[] {
                        "[[rs().row]]",
                        "40"});
            table273.AddRow(new string[] {
                        "[[rs().data]]",
                        "20"});
            table273.AddRow(new string[] {
                        "[[rs().row]]",
                        "20"});
            table273.AddRow(new string[] {
                        "[[rs().data]]",
                        "20"});
            table273.AddRow(new string[] {
                        "[[rs().row]]",
                        "30"});
            table273.AddRow(new string[] {
                        "[[rs().data]]",
                        "40"});
#line 1292
      testRunner.And("\"workflowithAssignandUnique\" contains an Assign \"Records\" as", ((string)(null)), table273, "And ");
#line hidden
            TechTalk.SpecFlow.Table table274 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table274.AddRow(new string[] {
                        "[[rs(*).row]],[[rs(*).data]]",
                        "[[rs().row]]",
                        "[[rec().unique]]"});
#line 1302
   testRunner.And("\"workflowithAssignandUnique\" contains an Unique \"Unique rec\" as", ((string)(null)), table274, "And ");
#line 1305
   testRunner.When("\"workflowithAssignandUnique\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1306
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table275 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table275.AddRow(new string[] {
                        "1",
                        "[[rs().row]] =",
                        "10"});
            table275.AddRow(new string[] {
                        "2",
                        "[[rs().data]] =",
                        "10"});
            table275.AddRow(new string[] {
                        "3",
                        "[[rs().row]] =",
                        "40"});
            table275.AddRow(new string[] {
                        "4",
                        "[[rs().data]] =",
                        "20"});
            table275.AddRow(new string[] {
                        "5",
                        "[[rs().row]] =",
                        "20"});
            table275.AddRow(new string[] {
                        "6",
                        "[[rs().data]] =",
                        "20"});
            table275.AddRow(new string[] {
                        "7",
                        "[[rs().row]] =",
                        "30"});
            table275.AddRow(new string[] {
                        "8",
                        "[[rs().data]] =",
                        "40"});
#line 1307
   testRunner.And("the \"Records\" in WorkFlow \"workflowithAssignandUnique\" debug inputs as", ((string)(null)), table275, "And ");
#line hidden
            TechTalk.SpecFlow.Table table276 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table276.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =  10"});
            table276.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =  10"});
            table276.AddRow(new string[] {
                        "3",
                        "[[rs(2).row]] =  40"});
            table276.AddRow(new string[] {
                        "4",
                        "[[rs(2).data]] =  20"});
            table276.AddRow(new string[] {
                        "5",
                        "[[rs(3).row]] =  20"});
            table276.AddRow(new string[] {
                        "6",
                        "[[rs(3).data]] =  20"});
            table276.AddRow(new string[] {
                        "7",
                        "[[rs(4).row]] =  30"});
            table276.AddRow(new string[] {
                        "8",
                        "[[rs(4).data]] =  40"});
#line 1317
   testRunner.And("the \"Records\" in Workflow \"workflowithAssignandUnique\" debug outputs as", ((string)(null)), table276, "And ");
#line hidden
            TechTalk.SpecFlow.Table table277 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table277.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).row]] = 10",
                        ""});
            table277.AddRow(new string[] {
                        "",
                        "[[rs(2).row]] = 40",
                        ""});
            table277.AddRow(new string[] {
                        "",
                        "[[rs(3).row]] = 20",
                        ""});
            table277.AddRow(new string[] {
                        "",
                        "[[rs(4).row]] = 30",
                        ""});
            table277.AddRow(new string[] {
                        "",
                        "[[rs(1).data]] = 10",
                        ""});
            table277.AddRow(new string[] {
                        "",
                        "[[rs(2).data]] = 20",
                        ""});
            table277.AddRow(new string[] {
                        "",
                        "[[rs(3).data]] = 20",
                        ""});
            table277.AddRow(new string[] {
                        "",
                        "[[rs(4).data]] = 40",
                        ""});
            table277.AddRow(new string[] {
                        "",
                        "",
                        "[[rs().row]] ="});
#line 1327
   testRunner.And("the \"Unique rec\" in WorkFlow \"workflowithAssignandUnique\" debug inputs as", ((string)(null)), table277, "And ");
#line hidden
            TechTalk.SpecFlow.Table table278 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table278.AddRow(new string[] {
                        "1",
                        "[[rec(1).unique]] = 10"});
            table278.AddRow(new string[] {
                        "",
                        "[[rec(2).unique]] = 40"});
            table278.AddRow(new string[] {
                        "",
                        "[[rec(3).unique]] = 20"});
            table278.AddRow(new string[] {
                        "",
                        "[[rec(4).unique]] = 30"});
#line 1338
      testRunner.And("the \"Unique rec\" in Workflow \"workflowithAssignandUnique\" debug outputs as", ((string)(null)), table278, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Unique Tool, Infields rec without star")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignAndUniqueToolInfieldsRecWithoutStar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Unique Tool, Infields rec without star", ((string[])(null)));
#line 1345
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1346
      testRunner.Given("I have a workflow \"workflowithAssignandUniqueToolc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table279 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table279.AddRow(new string[] {
                        "[[rs(1).row]]",
                        "10"});
            table279.AddRow(new string[] {
                        "[[rs(1).data]]",
                        "10"});
            table279.AddRow(new string[] {
                        "[[rs(2).row]]",
                        "40"});
            table279.AddRow(new string[] {
                        "[[rs(2).data]]",
                        "20"});
            table279.AddRow(new string[] {
                        "[[rs(3).row]]",
                        "20"});
            table279.AddRow(new string[] {
                        "[[rs(3).data]]",
                        "20"});
            table279.AddRow(new string[] {
                        "[[rs(4).row]]",
                        "30"});
            table279.AddRow(new string[] {
                        "[[rs(4).data]]",
                        "40"});
#line 1347
      testRunner.And("\"workflowithAssignandUniqueToolc\" contains an Assign \"Records\" as", ((string)(null)), table279, "And ");
#line hidden
            TechTalk.SpecFlow.Table table280 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table280.AddRow(new string[] {
                        "[[rs().row]],[[rs().data]]",
                        "[[rs().row]]",
                        "[[rec().unique]]"});
#line 1357
   testRunner.And("\"workflowithAssignandUniqueToolc\" contains an Unique \"Unique rec\" as", ((string)(null)), table280, "And ");
#line 1360
   testRunner.When("\"workflowithAssignandUniqueToolc\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1361
   testRunner.Then("the workflow execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table281 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table281.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =",
                        "10"});
            table281.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =",
                        "10"});
            table281.AddRow(new string[] {
                        "3",
                        "[[rs(2).row]] =",
                        "40"});
            table281.AddRow(new string[] {
                        "4",
                        "[[rs(2).data]] =",
                        "20"});
            table281.AddRow(new string[] {
                        "5",
                        "[[rs(3).row]] =",
                        "20"});
            table281.AddRow(new string[] {
                        "6",
                        "[[rs(3).data]] =",
                        "20"});
            table281.AddRow(new string[] {
                        "7",
                        "[[rs(4).row]] =",
                        "30"});
            table281.AddRow(new string[] {
                        "8",
                        "[[rs(4).data]] =",
                        "40"});
#line 1362
   testRunner.And("the \"Records\" in WorkFlow \"workflowithAssignandUniqueToolc\" debug inputs as", ((string)(null)), table281, "And ");
#line hidden
            TechTalk.SpecFlow.Table table282 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table282.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =  10"});
            table282.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =  10"});
            table282.AddRow(new string[] {
                        "3",
                        "[[rs(2).row]] =  40"});
            table282.AddRow(new string[] {
                        "4",
                        "[[rs(2).data]] =  20"});
            table282.AddRow(new string[] {
                        "5",
                        "[[rs(3).row]] =  20"});
            table282.AddRow(new string[] {
                        "6",
                        "[[rs(3).data]] =  20"});
            table282.AddRow(new string[] {
                        "7",
                        "[[rs(4).row]] =  30"});
            table282.AddRow(new string[] {
                        "8",
                        "[[rs(4).data]] =  40"});
#line 1372
   testRunner.And("the \"Records\" in Workflow \"workflowithAssignandUniqueToolc\" debug outputs as", ((string)(null)), table282, "And ");
#line hidden
            TechTalk.SpecFlow.Table table283 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table283.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(4).row]] = 30",
                        ""});
            table283.AddRow(new string[] {
                        "",
                        "[[rs(4).data]] = 40",
                        "[[rs().row]] ="});
#line 1382
   testRunner.And("the \"Unique rec\" in WorkFlow \"workflowithAssignandUniqueToolc\" debug inputs as", ((string)(null)), table283, "And ");
#line hidden
            TechTalk.SpecFlow.Table table284 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table284.AddRow(new string[] {
                        "1",
                        "[[rec(1).unique]] = 10"});
            table284.AddRow(new string[] {
                        "",
                        "[[rec(2).unique]] = 40"});
            table284.AddRow(new string[] {
                        "",
                        "[[rec(3).unique]] = 20"});
            table284.AddRow(new string[] {
                        "",
                        "[[rec(4).unique]] = 30"});
#line 1386
      testRunner.And("the \"Unique rec\" in Workflow \"workflowithAssignandUniqueToolc\" debug outputs as", ((string)(null)), table284, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Unique Tool, Result rec with star")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignAndUniqueToolResultRecWithStar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Unique Tool, Result rec with star", ((string[])(null)));
#line 1393
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1394
      testRunner.Given("I have a workflow \"workflowithAssignandUniqueTools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table285 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table285.AddRow(new string[] {
                        "[[rs(1).row]]",
                        "10"});
            table285.AddRow(new string[] {
                        "[[rs(1).data]]",
                        "10"});
            table285.AddRow(new string[] {
                        "[[rs(2).row]]",
                        "40"});
            table285.AddRow(new string[] {
                        "[[rs(2).data]]",
                        "20"});
            table285.AddRow(new string[] {
                        "[[rs(3).row]]",
                        "20"});
            table285.AddRow(new string[] {
                        "[[rs(3).data]]",
                        "20"});
            table285.AddRow(new string[] {
                        "[[rs(4).row]]",
                        "30"});
            table285.AddRow(new string[] {
                        "[[rs(4).data]]",
                        "40"});
#line 1395
      testRunner.And("\"workflowithAssignandUniqueTools\" contains an Assign \"Records\" as", ((string)(null)), table285, "And ");
#line hidden
            TechTalk.SpecFlow.Table table286 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table286.AddRow(new string[] {
                        "[[rs().row]],[[rs().data]]",
                        "[[rs().row]]",
                        "[[rec(*).unique]]"});
#line 1405
   testRunner.And("\"workflowithAssignandUniqueTools\" contains an Unique \"Unique rec\" as", ((string)(null)), table286, "And ");
#line 1408
   testRunner.When("\"workflowithAssignandUniqueTools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1409
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table287 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table287.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =",
                        "10"});
            table287.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =",
                        "10"});
            table287.AddRow(new string[] {
                        "3",
                        "[[rs(2).row]] =",
                        "40"});
            table287.AddRow(new string[] {
                        "4",
                        "[[rs(2).data]] =",
                        "20"});
            table287.AddRow(new string[] {
                        "5",
                        "[[rs(3).row]] =",
                        "20"});
            table287.AddRow(new string[] {
                        "6",
                        "[[rs(3).data]] =",
                        "20"});
            table287.AddRow(new string[] {
                        "7",
                        "[[rs(4).row]] =",
                        "30"});
            table287.AddRow(new string[] {
                        "8",
                        "[[rs(4).data]] =",
                        "40"});
#line 1410
   testRunner.And("the \"Records\" in WorkFlow \"workflowithAssignandUniqueTools\" debug inputs as", ((string)(null)), table287, "And ");
#line hidden
            TechTalk.SpecFlow.Table table288 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table288.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =  10"});
            table288.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =  10"});
            table288.AddRow(new string[] {
                        "3",
                        "[[rs(2).row]] =  40"});
            table288.AddRow(new string[] {
                        "4",
                        "[[rs(2).data]] =  20"});
            table288.AddRow(new string[] {
                        "5",
                        "[[rs(3).row]] =  20"});
            table288.AddRow(new string[] {
                        "6",
                        "[[rs(3).data]] =  20"});
            table288.AddRow(new string[] {
                        "7",
                        "[[rs(4).row]] =  30"});
            table288.AddRow(new string[] {
                        "8",
                        "[[rs(4).data]] =  40"});
#line 1420
   testRunner.And("the \"Records\" in Workflow \"workflowithAssignandUniqueTools\" debug outputs as", ((string)(null)), table288, "And ");
#line hidden
            TechTalk.SpecFlow.Table table289 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table289.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(4).row]] = 30",
                        ""});
            table289.AddRow(new string[] {
                        "",
                        "[[rs(4).data]] = 40",
                        "[[rs().row]] ="});
#line 1430
   testRunner.And("the \"Unique rec\" in WorkFlow \"workflowithAssignandUniqueTools\" debug inputs as", ((string)(null)), table289, "And ");
#line hidden
            TechTalk.SpecFlow.Table table290 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table290.AddRow(new string[] {
                        "1",
                        "[[rec(1).unique]] = 10"});
            table290.AddRow(new string[] {
                        "",
                        "[[rec(2).unique]] = 40"});
            table290.AddRow(new string[] {
                        "",
                        "[[rec(3).unique]] = 20"});
            table290.AddRow(new string[] {
                        "",
                        "[[rec(4).unique]] = 30"});
#line 1434
      testRunner.And("the \"Unique rec\" in Workflow \"workflowithAssignandUniqueTools\" debug outputs as", ((string)(null)), table290, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns DataSplit executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignsDataSplitExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns DataSplit executing against the server", ((string[])(null)));
#line 1441
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1442
      testRunner.Given("I have a workflow \"WorkflowDataSplit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table291 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table291.AddRow(new string[] {
                        "[[a]]",
                        "rec().a"});
#line 1443
   testRunner.And("\"WorkflowDataSplit\" contains an Assign \"Assignval\" as", ((string)(null)), table291, "And ");
#line hidden
            TechTalk.SpecFlow.Table table292 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table292.AddRow(new string[] {
                        "abcd",
                        "[[[[a]]]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
#line 1446
     testRunner.And("\"WorkflowDataSplit\" contains Data Split \"DataSplit\" as", ((string)(null)), table292, "And ");
#line 1449
   testRunner.When("\"WorkflowDataSplit\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1450
   testRunner.Then("the workflow execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table293 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table293.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "rec().a"});
#line 1451
   testRunner.And("the \"Assignval\" in WorkFlow \"WorkflowDataSplit\" debug inputs as", ((string)(null)), table293, "And ");
#line hidden
            TechTalk.SpecFlow.Table table294 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table294.AddRow(new string[] {
                        "1",
                        "[[a]] =  rec().a"});
#line 1454
   testRunner.And("the \"Assignval\" in Workflow \"WorkflowDataSplit\" debug outputs as", ((string)(null)), table294, "And ");
#line hidden
            TechTalk.SpecFlow.Table table295 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table295.AddRow(new string[] {
                        "abcd",
                        "Forward",
                        "No",
                        "1",
                        "[[rec().a]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
#line 1457
   testRunner.And("the \"DataSplit\" in WorkFlow \"WorkflowDataSplit\" debug inputs as", ((string)(null)), table295, "And ");
#line hidden
            TechTalk.SpecFlow.Table table296 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table296.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = abcd"});
#line 1460
   testRunner.And("the \"DataSplit\" in Workflow \"WorkflowDataSplit\" debug outputs as", ((string)(null)), table296, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and foreach contains calculate.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignAndForeachContainsCalculate_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and foreach contains calculate.", ((string[])(null)));
#line 1464
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1465
      testRunner.Given("I have a workflow \"Workflowwithforeachcontainscalculates\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table297 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table297.AddRow(new string[] {
                        "[[rs().a]]",
                        "1"});
            table297.AddRow(new string[] {
                        "[[rs().a]]",
                        "2"});
            table297.AddRow(new string[] {
                        "[[rs().a]]",
                        "3"});
#line 1466
   testRunner.And("\"Workflowwithforeachcontainscalculates\" contains an Assign \"Assignval1\" as", ((string)(null)), table297, "And ");
#line 1471
   testRunner.And("\"Workflowwithforeachcontainscalculates\" contains a Foreach \"ForEachTesting\" as \"I" +
                    "nRecordset\" executions \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1472
   testRunner.And("\"ForEachTesting\" contains Calculate \"Cal\" with formula \"[[rs(*).a]]+1\" into \"[[re" +
                    "sult]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1473
   testRunner.When("\"Workflowwithforeachcontainscalculates\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1474
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table298 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table298.AddRow(new string[] {
                        "1",
                        "[[rs().a]] =",
                        "1"});
            table298.AddRow(new string[] {
                        "2",
                        "[[rs().a]] =",
                        "2"});
            table298.AddRow(new string[] {
                        "3",
                        "[[rs().a]] =",
                        "3"});
#line 1475
      testRunner.And("the \"Assignval1\" in WorkFlow \"Workflowwithforeachcontainscalculates\" debug inputs" +
                    " as", ((string)(null)), table298, "And ");
#line hidden
            TechTalk.SpecFlow.Table table299 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table299.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = 1"});
            table299.AddRow(new string[] {
                        "2",
                        "[[rs(2).a]] = 2"});
            table299.AddRow(new string[] {
                        "3",
                        "[[rs(3).a]] = 3"});
#line 1480
      testRunner.And("the \"Assignval1\" in Workflow \"Workflowwithforeachcontainscalculates\" debug output" +
                    "s as", ((string)(null)), table299, "And ");
#line 1485
      testRunner.And("the \"ForEachTesting\" in WorkFlow \"Workflowwithforeachcontainscalculates\" has  \"3\"" +
                    " nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table300 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table300.AddRow(new string[] {
                        "[[rs(1).a]]+1 = 1+1"});
#line 1486
   testRunner.And("the \"Cal\" in step 1 for \"ForEachTesting\" debug inputs as", ((string)(null)), table300, "And ");
#line hidden
            TechTalk.SpecFlow.Table table301 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table301.AddRow(new string[] {
                        "[[result]] = 2"});
#line 1489
      testRunner.And("the \"Cal\" in step 1 for \"ForEachTesting\" debug outputs as", ((string)(null)), table301, "And ");
#line hidden
            TechTalk.SpecFlow.Table table302 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table302.AddRow(new string[] {
                        "[[rs(2).a]]+1 = 2+1"});
#line 1492
  testRunner.And("the \"Cal\" in step 2 for \"ForEachTesting\" debug inputs as", ((string)(null)), table302, "And ");
#line hidden
            TechTalk.SpecFlow.Table table303 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table303.AddRow(new string[] {
                        "[[result]] = 3"});
#line 1495
       testRunner.And("the \"Cal\" in step 2 for \"ForEachTesting\" debug outputs as", ((string)(null)), table303, "And ");
#line hidden
            TechTalk.SpecFlow.Table table304 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table304.AddRow(new string[] {
                        "[[rs(3).a]]+1 = 3+1"});
#line 1498
    testRunner.And("the \"Cal\" in step 3 for \"ForEachTesting\" debug inputs as", ((string)(null)), table304, "And ");
#line hidden
            TechTalk.SpecFlow.Table table305 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table305.AddRow(new string[] {
                        "[[result]] = 4"});
#line 1501
       testRunner.And("the \"Cal\" in step 3 for \"ForEachTesting\" debug outputs as", ((string)(null)), table305, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and foreach with invalid rec and it contains calculate in it" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignAndForeachWithInvalidRecAndItContainsCalculateInIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and foreach with invalid rec and it contains calculate in it" +
                    "", ((string[])(null)));
#line 1505
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1506
      testRunner.Given("I have a workflow \"WorkflowDwithforeachcontainscalinvalid\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table306 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table306.AddRow(new string[] {
                        "[[rs().a]]",
                        "1"});
            table306.AddRow(new string[] {
                        "[[rs().a]]",
                        "2"});
            table306.AddRow(new string[] {
                        "[[rs().a]]",
                        "3"});
#line 1507
   testRunner.And("\"WorkflowDwithforeachcontainscalinvalid\" contains an Assign \"Assigl\" as", ((string)(null)), table306, "And ");
#line 1512
   testRunner.And("\"WorkflowDwithforeachcontainscalinvalid\" contains a Foreach \"ForEachTes\" as \"InRe" +
                    "cordset\" executions \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1513
   testRunner.And("\"ForEachTes\" contains Calculate \"Cal\" with formula \"[[rs(*).a]]+1\" into \"[[result" +
                    "]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1514
   testRunner.When("\"WorkflowDwithforeachcontainscalinvalid\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1515
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table307 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table307.AddRow(new string[] {
                        "1",
                        "[[rs().a]] =",
                        "1"});
            table307.AddRow(new string[] {
                        "2",
                        "[[rs().a]] =",
                        "2"});
            table307.AddRow(new string[] {
                        "3",
                        "[[rs().a]] =",
                        "3"});
#line 1516
      testRunner.And("the \"Assigl\" in WorkFlow \"WorkflowDwithforeachcontainscalinvalid\" debug inputs as" +
                    "", ((string)(null)), table307, "And ");
#line hidden
            TechTalk.SpecFlow.Table table308 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table308.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = 1"});
            table308.AddRow(new string[] {
                        "2",
                        "[[rs(2).a]] = 2"});
            table308.AddRow(new string[] {
                        "3",
                        "[[rs(3).a]] = 3"});
#line 1521
      testRunner.And("the \"Assigl\" in Workflow \"WorkflowDwithforeachcontainscalinvalid\" debug outputs a" +
                    "s", ((string)(null)), table308, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns DataSplit executing against the server 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignsDataSplitExecutingAgainstTheServer2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns DataSplit executing against the server 2", ((string[])(null)));
#line 1528
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1529
      testRunner.Given("I have a workflow \"WorkflowDataSplit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table309 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table309.AddRow(new string[] {
                        "[[a]]",
                        "rec().a"});
#line 1530
   testRunner.And("\"WorkflowDataSplit\" contains an Assign \"Assignval\" as", ((string)(null)), table309, "And ");
#line hidden
            TechTalk.SpecFlow.Table table310 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table310.AddRow(new string[] {
                        "abcd",
                        "[[[[a]]]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
#line 1533
     testRunner.And("\"WorkflowDataSplit\" contains Data Split \"DataSplit\" as", ((string)(null)), table310, "And ");
#line 1536
   testRunner.When("\"WorkflowDataSplit\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1537
   testRunner.Then("the workflow execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table311 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table311.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "rec().a"});
#line 1538
   testRunner.And("the \"Assignval\" in WorkFlow \"WorkflowDataSplit\" debug inputs as", ((string)(null)), table311, "And ");
#line hidden
            TechTalk.SpecFlow.Table table312 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table312.AddRow(new string[] {
                        "1",
                        "[[a]] =  rec().a"});
#line 1541
   testRunner.And("the \"Assignval\" in Workflow \"WorkflowDataSplit\" debug outputs as", ((string)(null)), table312, "And ");
#line hidden
            TechTalk.SpecFlow.Table table313 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table313.AddRow(new string[] {
                        "abcd",
                        "Forward",
                        "No",
                        "1",
                        "[[rec().a]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
#line 1544
   testRunner.And("the \"DataSplit\" in WorkFlow \"WorkflowDataSplit\" debug inputs as", ((string)(null)), table313, "And ");
#line hidden
            TechTalk.SpecFlow.Table table314 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table314.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = abcd"});
#line 1547
   testRunner.And("the \"DataSplit\" in Workflow \"WorkflowDataSplit\" debug outputs as", ((string)(null)), table314, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Unique Tool to find unique names in diff rows")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignAndUniqueToolToFindUniqueNamesInDiffRows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Unique Tool to find unique names in diff rows", ((string[])(null)));
#line 1551
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1552
      testRunner.Given("I have a workflow \"WorkflowUniqueWithNames\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table315 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table315.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Smith"});
            table315.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Gordan"});
            table315.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Nicholas"});
            table315.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Cage"});
            table315.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Cage"});
            table315.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Nicholas"});
#line 1553
      testRunner.And("\"WorkflowUniqueWithNames\" contains an Assign \"Records1\" as", ((string)(null)), table315, "And ");
#line hidden
            TechTalk.SpecFlow.Table table316 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table316.AddRow(new string[] {
                        "[[emp(*).firstname]],[[emp(*).lastname]]",
                        "[[emp().firstname]]",
                        "[[emp(*).uni]]"});
#line 1561
   testRunner.And("\"WorkflowUniqueWithNames\" contains an Unique \"Unique\" as", ((string)(null)), table316, "And ");
#line 1564
   testRunner.When("\"WorkflowUniqueWithNames\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1565
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table317 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table317.AddRow(new string[] {
                        "1",
                        "[[emp().firstname]] =",
                        "Smith"});
            table317.AddRow(new string[] {
                        "2",
                        "[[emp().lastname]] =",
                        "Gordan"});
            table317.AddRow(new string[] {
                        "3",
                        "[[emp().firstname]] =",
                        "Nicholas"});
            table317.AddRow(new string[] {
                        "4",
                        "[[emp().lastname]] =",
                        "Cage"});
            table317.AddRow(new string[] {
                        "5",
                        "[[emp().firstname]] =",
                        "Cage"});
            table317.AddRow(new string[] {
                        "6",
                        "[[emp().lastname]] =",
                        "Nicholas"});
#line 1566
   testRunner.And("the \"Records1\" in WorkFlow \"WorkflowUniqueWithNames\" debug inputs as", ((string)(null)), table317, "And ");
#line hidden
            TechTalk.SpecFlow.Table table318 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table318.AddRow(new string[] {
                        "1",
                        "[[emp(1).firstname]] =  Smith"});
            table318.AddRow(new string[] {
                        "2",
                        "[[emp(1).lastname]] =  Gordan"});
            table318.AddRow(new string[] {
                        "3",
                        "[[emp(2).firstname]] =  Nicholas"});
            table318.AddRow(new string[] {
                        "4",
                        "[[emp(2).lastname]] =  Cage"});
            table318.AddRow(new string[] {
                        "5",
                        "[[emp(3).firstname]] =  Cage"});
            table318.AddRow(new string[] {
                        "6",
                        "[[emp(3).lastname]] =  Nicholas"});
#line 1574
   testRunner.And("the \"Records1\" in Workflow \"WorkflowUniqueWithNames\" debug outputs as", ((string)(null)), table318, "And ");
#line hidden
            TechTalk.SpecFlow.Table table319 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table319.AddRow(new string[] {
                        "In Field(s)",
                        "[[emp(1).firstname]] = Smith",
                        ""});
            table319.AddRow(new string[] {
                        "",
                        "[[emp(2).firstname]] = Nicholas",
                        ""});
            table319.AddRow(new string[] {
                        "",
                        "[[emp(3).firstname]] = Cage",
                        ""});
            table319.AddRow(new string[] {
                        "",
                        "[[emp(1).lastname]] = Gordan",
                        ""});
            table319.AddRow(new string[] {
                        "",
                        "[[emp(2).lastname]] = Cage",
                        ""});
            table319.AddRow(new string[] {
                        "",
                        "[[emp(3).lastname]] = Nicholas",
                        ""});
            table319.AddRow(new string[] {
                        "",
                        "",
                        "[[emp().firstname]] ="});
#line 1582
   testRunner.And("the \"Unique\" in WorkFlow \"WorkflowUniqueWithNames\" debug inputs as", ((string)(null)), table319, "And ");
#line hidden
            TechTalk.SpecFlow.Table table320 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table320.AddRow(new string[] {
                        "1",
                        "[[emp(1).uni]]  = Smith"});
            table320.AddRow(new string[] {
                        "",
                        "[[emp(2).uni]]  = Nicholas"});
            table320.AddRow(new string[] {
                        "",
                        "[[emp(3).uni]]  = Cage"});
#line 1591
      testRunner.And("the \"Unique\" in Workflow \"WorkflowUniqueWithNames\" debug outputs as", ((string)(null)), table320, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Unique to return unique data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignAndUniqueToReturnUniqueData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Unique to return unique data", ((string[])(null)));
#line 1597
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1598
      testRunner.Given("I have a workflow \"UniqueNamesTest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table321 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table321.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Smith"});
            table321.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Gordan"});
            table321.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Nicholas"});
            table321.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Cage"});
            table321.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Cage"});
            table321.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Nicholas"});
            table321.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Cage"});
            table321.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Nicholas"});
#line 1599
      testRunner.And("\"UniqueNamesTest\" contains an Assign \"Records1\" as", ((string)(null)), table321, "And ");
#line hidden
            TechTalk.SpecFlow.Table table322 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table322.AddRow(new string[] {
                        "[[emp(*).firstname]],[[emp(*).lastname]]",
                        "[[emp().lastname]]",
                        "[[emp(*).uni]]"});
#line 1609
   testRunner.And("\"UniqueNamesTest\" contains an Unique \"Unique\" as", ((string)(null)), table322, "And ");
#line 1612
   testRunner.When("\"UniqueNamesTest\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1613
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table323 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table323.AddRow(new string[] {
                        "1",
                        "[[emp().firstname]] =",
                        "Smith"});
            table323.AddRow(new string[] {
                        "2",
                        "[[emp().lastname]] =",
                        "Gordan"});
            table323.AddRow(new string[] {
                        "3",
                        "[[emp().firstname]] =",
                        "Nicholas"});
            table323.AddRow(new string[] {
                        "4",
                        "[[emp().lastname]] =",
                        "Cage"});
            table323.AddRow(new string[] {
                        "5",
                        "[[emp().firstname]] =",
                        "Cage"});
            table323.AddRow(new string[] {
                        "6",
                        "[[emp().lastname]] =",
                        "Nicholas"});
            table323.AddRow(new string[] {
                        "7",
                        "[[emp().firstname]] =",
                        "Cage"});
            table323.AddRow(new string[] {
                        "8",
                        "[[emp().lastname]] =",
                        "Nicholas"});
#line 1614
   testRunner.And("the \"Records1\" in WorkFlow \"UniqueNamesTest\" debug inputs as", ((string)(null)), table323, "And ");
#line hidden
            TechTalk.SpecFlow.Table table324 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table324.AddRow(new string[] {
                        "1",
                        "[[emp(1).firstname]] =  Smith"});
            table324.AddRow(new string[] {
                        "2",
                        "[[emp(1).lastname]] =  Gordan"});
            table324.AddRow(new string[] {
                        "3",
                        "[[emp(2).firstname]] =  Nicholas"});
            table324.AddRow(new string[] {
                        "4",
                        "[[emp(2).lastname]] =  Cage"});
            table324.AddRow(new string[] {
                        "5",
                        "[[emp(3).firstname]] =  Cage"});
            table324.AddRow(new string[] {
                        "6",
                        "[[emp(3).lastname]] =  Nicholas"});
            table324.AddRow(new string[] {
                        "7",
                        "[[emp(4).firstname]] =  Cage"});
            table324.AddRow(new string[] {
                        "8",
                        "[[emp(4).lastname]] =  Nicholas"});
#line 1624
   testRunner.And("the \"Records1\" in Workflow \"UniqueNamesTest\" debug outputs as", ((string)(null)), table324, "And ");
#line hidden
            TechTalk.SpecFlow.Table table325 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table325.AddRow(new string[] {
                        "In Field(s)",
                        "[[emp(1).firstname]] = Smith",
                        ""});
            table325.AddRow(new string[] {
                        "",
                        "[[emp(2).firstname]] = Nicholas",
                        ""});
            table325.AddRow(new string[] {
                        "",
                        "[[emp(3).firstname]] = Cage",
                        ""});
            table325.AddRow(new string[] {
                        "",
                        "[[emp(4).firstname]] = Cage",
                        ""});
            table325.AddRow(new string[] {
                        "",
                        "[[emp(1).lastname]] = Gordan",
                        ""});
            table325.AddRow(new string[] {
                        "",
                        "[[emp(2).lastname]] = Cage",
                        ""});
            table325.AddRow(new string[] {
                        "",
                        "[[emp(3).lastname]] = Nicholas",
                        ""});
            table325.AddRow(new string[] {
                        "",
                        "[[emp(4).lastname]] = Nicholas",
                        ""});
            table325.AddRow(new string[] {
                        "",
                        "",
                        "[[emp().lastname]] ="});
#line 1634
   testRunner.And("the \"Unique\" in WorkFlow \"UniqueNamesTest\" debug inputs as", ((string)(null)), table325, "And ");
#line hidden
            TechTalk.SpecFlow.Table table326 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table326.AddRow(new string[] {
                        "1",
                        "[[emp(1).uni]]  = Gordan"});
            table326.AddRow(new string[] {
                        "",
                        "[[emp(2).uni]]  = Cage"});
            table326.AddRow(new string[] {
                        "",
                        "[[emp(3).uni]]  = Nicholas"});
            table326.AddRow(new string[] {
                        "",
                        "[[emp(4).uni]]  ="});
#line 1645
      testRunner.And("the \"Unique\" in Workflow \"UniqueNamesTest\" debug outputs as", ((string)(null)), table326, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Unique Tool")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignAndUniqueTool()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Unique Tool", ((string[])(null)));
#line 1652
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1653
      testRunner.Given("I have a workflow \"WorkflowAssingUnique\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table327 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table327.AddRow(new string[] {
                        "[[rs(1).a]]",
                        "19"});
            table327.AddRow(new string[] {
                        "[[rs(2).a]]",
                        "20"});
            table327.AddRow(new string[] {
                        "[[rs(3).a]]",
                        "40"});
            table327.AddRow(new string[] {
                        "[[rs(4).a]]",
                        "50"});
            table327.AddRow(new string[] {
                        "[[rs(1).b]]",
                        "19"});
            table327.AddRow(new string[] {
                        "[[rs(2).b]]",
                        "20"});
            table327.AddRow(new string[] {
                        "[[rs(3).b]]",
                        "30"});
            table327.AddRow(new string[] {
                        "[[rs(4).b]]",
                        "80"});
#line 1654
      testRunner.And("\"WorkflowAssingUnique\" contains an Assign \"Records\" as", ((string)(null)), table327, "And ");
#line hidden
            TechTalk.SpecFlow.Table table328 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table328.AddRow(new string[] {
                        "[[rs(*).a]],[[rs(*).b]]",
                        "[[rs().a]]",
                        "[[rec().unique]]"});
#line 1664
   testRunner.And("\"WorkflowAssingUnique\" contains an Unique \"Unique rec\" as", ((string)(null)), table328, "And ");
#line 1667
   testRunner.When("\"WorkflowAssingUnique\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1668
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table329 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table329.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =",
                        "19"});
            table329.AddRow(new string[] {
                        "2",
                        "[[rs(2).a]] =",
                        "20"});
            table329.AddRow(new string[] {
                        "3",
                        "[[rs(3).a]] =",
                        "40"});
            table329.AddRow(new string[] {
                        "4",
                        "[[rs(4).a]] =",
                        "50"});
            table329.AddRow(new string[] {
                        "5",
                        "[[rs(1).b]] =",
                        "19"});
            table329.AddRow(new string[] {
                        "6",
                        "[[rs(2).b]] =",
                        "20"});
            table329.AddRow(new string[] {
                        "7",
                        "[[rs(3).b]] =",
                        "30"});
            table329.AddRow(new string[] {
                        "8",
                        "[[rs(4).b]] =",
                        "80"});
#line 1669
   testRunner.And("the \"Records\" in WorkFlow \"WorkflowAssingUnique\" debug inputs as", ((string)(null)), table329, "And ");
#line hidden
            TechTalk.SpecFlow.Table table330 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table330.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =  19"});
            table330.AddRow(new string[] {
                        "2",
                        "[[rs(2).a]] =  20"});
            table330.AddRow(new string[] {
                        "3",
                        "[[rs(3).a]] =  40"});
            table330.AddRow(new string[] {
                        "4",
                        "[[rs(4).a]] =  50"});
            table330.AddRow(new string[] {
                        "5",
                        "[[rs(1).b]] =  19"});
            table330.AddRow(new string[] {
                        "6",
                        "[[rs(2).b]] =  20"});
            table330.AddRow(new string[] {
                        "7",
                        "[[rs(3).b]] =  30"});
            table330.AddRow(new string[] {
                        "8",
                        "[[rs(4).b]] =  80"});
#line 1679
   testRunner.And("the \"Records\" in Workflow \"WorkflowAssingUnique\" debug outputs as", ((string)(null)), table330, "And ");
#line hidden
            TechTalk.SpecFlow.Table table331 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table331.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).a]] = 19",
                        ""});
            table331.AddRow(new string[] {
                        "",
                        "[[rs(2).a]] = 20",
                        ""});
            table331.AddRow(new string[] {
                        "",
                        "[[rs(3).a]] = 40",
                        ""});
            table331.AddRow(new string[] {
                        "",
                        "[[rs(4).a]] = 50",
                        ""});
            table331.AddRow(new string[] {
                        "",
                        "[[rs(1).b]] = 19",
                        ""});
            table331.AddRow(new string[] {
                        "",
                        "[[rs(2).b]] = 20",
                        ""});
            table331.AddRow(new string[] {
                        "",
                        "[[rs(3).b]] = 30",
                        ""});
            table331.AddRow(new string[] {
                        "",
                        "[[rs(4).b]] = 80",
                        ""});
            table331.AddRow(new string[] {
                        "",
                        "",
                        "[[rs().a]] ="});
#line 1689
   testRunner.And("the \"Unique rec\" in WorkFlow \"WorkflowAssingUnique\" debug inputs as", ((string)(null)), table331, "And ");
#line hidden
            TechTalk.SpecFlow.Table table332 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table332.AddRow(new string[] {
                        "1",
                        "[[rec(1).unique]] = 19"});
            table332.AddRow(new string[] {
                        "",
                        "[[rec(2).unique]] = 20"});
            table332.AddRow(new string[] {
                        "",
                        "[[rec(3).unique]] = 40"});
            table332.AddRow(new string[] {
                        "",
                        "[[rec(4).unique]] = 50"});
#line 1700
      testRunner.And("the \"Unique rec\" in Workflow \"WorkflowAssingUnique\" debug outputs as", ((string)(null)), table332, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Unique to check debug outputs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignUniqueToCheckDebugOutputs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Unique to check debug outputs", ((string[])(null)));
#line 1707
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1708
      testRunner.Given("I have a workflow \"workflowithAssignUniquedebugoutputs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table333 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table333.AddRow(new string[] {
                        "[[team(1).Names]]",
                        "test"});
            table333.AddRow(new string[] {
                        "[[team(1).Id]]",
                        "23"});
            table333.AddRow(new string[] {
                        "[[team(2).Names]]",
                        "test"});
            table333.AddRow(new string[] {
                        "[[team(2).Id]]",
                        "23"});
#line 1709
      testRunner.And("\"workflowithAssignUniquedebugoutputs\" contains an Assign \"Recordset\" as", ((string)(null)), table333, "And ");
#line hidden
            TechTalk.SpecFlow.Table table334 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table334.AddRow(new string[] {
                        "[[team(*).Names]]",
                        "[[team().Names]]",
                        "[[List(*).Name]]"});
#line 1715
   testRunner.And("\"workflowithAssignUniquedebugoutputs\" contains an Unique \"Uni\" as", ((string)(null)), table334, "And ");
#line 1718
   testRunner.When("\"workflowithAssignUniquedebugoutputs\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1719
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table335 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table335.AddRow(new string[] {
                        "1",
                        "[[team(1).Names]]  =",
                        "test"});
            table335.AddRow(new string[] {
                        "2",
                        "[[team(1).Id]]     =",
                        "23"});
            table335.AddRow(new string[] {
                        "3",
                        "[[team(2).Names]]  =",
                        "test"});
            table335.AddRow(new string[] {
                        "4",
                        "[[team(2).Id]]     =",
                        "23"});
#line 1720
   testRunner.And("the \"Recordset\" in WorkFlow \"workflowithAssignUniquedebugoutputs\" debug inputs as" +
                    "", ((string)(null)), table335, "And ");
#line hidden
            TechTalk.SpecFlow.Table table336 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table336.AddRow(new string[] {
                        "1",
                        "[[team(1).Names]] =   test"});
            table336.AddRow(new string[] {
                        "2",
                        "[[team(1).Id]]    =  23"});
            table336.AddRow(new string[] {
                        "3",
                        "[[team(2).Names]] =  test"});
            table336.AddRow(new string[] {
                        "4",
                        "[[team(2).Id]]    =  23"});
#line 1726
   testRunner.And("the \"Recordset\" in Workflow \"workflowithAssignUniquedebugoutputs\" debug outputs a" +
                    "s", ((string)(null)), table336, "And ");
#line hidden
            TechTalk.SpecFlow.Table table337 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table337.AddRow(new string[] {
                        "In Field(s)",
                        "[[team(1).Names]] = test",
                        ""});
            table337.AddRow(new string[] {
                        "",
                        "[[team(2).Names]] = test",
                        "[[team().Names]] ="});
#line 1732
   testRunner.And("the \"Uni\" in WorkFlow \"workflowithAssignUniquedebugoutputs\" debug inputs as", ((string)(null)), table337, "And ");
#line hidden
            TechTalk.SpecFlow.Table table338 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table338.AddRow(new string[] {
                        "1",
                        "[[List(1).Name]] = test"});
#line 1736
      testRunner.And("the \"Uni\" in Workflow \"workflowithAssignUniquedebugoutputs\" debug outputs as", ((string)(null)), table338, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Base Convert and Case Convert testing variable that hasn\"t b" +
            "een assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignBaseConvertAndCaseConvertTestingVariableThatHasntBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Base Convert and Case Convert testing variable that hasn\"t b" +
                    "een assigned", ((string[])(null)));
#line 1740
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1741
   testRunner.Given("I have a workflow \"WorkflowBaseConvertandCaseconvertTestingUnassignedVariablevalu" +
                    "es\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table339 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table339.AddRow(new string[] {
                        "[[res]]",
                        "1"});
#line 1742
   testRunner.And("\"WorkflowBaseConvertandCaseconvertTestingUnassignedVariablevalues\" contains an As" +
                    "sign \"Assign1\" as", ((string)(null)), table339, "And ");
#line hidden
            TechTalk.SpecFlow.Table table340 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table340.AddRow(new string[] {
                        "[[res12]]",
                        "UPPER"});
#line 1745
   testRunner.And("\"WorkflowBaseConvertandCaseconvertTestingUnassignedVariablevalues\" contains case " +
                    "convert \"Case to Convert\" as", ((string)(null)), table340, "And ");
#line hidden
            TechTalk.SpecFlow.Table table341 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table341.AddRow(new string[] {
                        "[[res12]]",
                        "Text",
                        "Base 64"});
#line 1748
   testRunner.And("\"WorkflowBaseConvertandCaseconvertTestingUnassignedVariablevalues\" contains Base " +
                    "convert \"Base to Convert\" as", ((string)(null)), table341, "And ");
#line 1751
   testRunner.When("\"WorkflowBaseConvertandCaseconvertTestingUnassignedVariablevalues\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1752
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table342 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table342.AddRow(new string[] {
                        "1",
                        "[[res]] =",
                        "1"});
#line 1753
   testRunner.And("the \"Assign1\" in WorkFlow \"WorkflowBaseConvertandCaseconvertTestingUnassignedVari" +
                    "ablevalues\" debug inputs as", ((string)(null)), table342, "And ");
#line hidden
            TechTalk.SpecFlow.Table table343 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table343.AddRow(new string[] {
                        "1",
                        "[[res]] =  1"});
#line 1756
    testRunner.And("the \"Assign1\" in Workflow \"WorkflowBaseConvertandCaseconvertTestingUnassignedVari" +
                    "ablevalues\" debug outputs as", ((string)(null)), table343, "And ");
#line hidden
            TechTalk.SpecFlow.Table table344 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table344.AddRow(new string[] {
                        "1",
                        "[[res12]] =",
                        "UPPER"});
#line 1759
   testRunner.And("the \"Case to Convert\" in WorkFlow \"WorkflowBaseConvertandCaseconvertTestingUnassi" +
                    "gnedVariablevalues\" debug inputs as", ((string)(null)), table344, "And ");
#line hidden
            TechTalk.SpecFlow.Table table345 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 1762
   testRunner.And("the \"Case to Convert\" in Workflow \"WorkflowBaseConvertandCaseconvertTestingUnassi" +
                    "gnedVariablevalues\" debug outputs as", ((string)(null)), table345, "And ");
#line hidden
            TechTalk.SpecFlow.Table table346 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table346.AddRow(new string[] {
                        "1",
                        "[[res12]] =",
                        "Text",
                        "Base 64"});
#line 1764
   testRunner.And("the \"Base to Convert\" in WorkFlow \"WorkflowBaseConvertandCaseconvertTestingUnassi" +
                    "gnedVariablevalues\" debug inputs as", ((string)(null)), table346, "And ");
#line hidden
            TechTalk.SpecFlow.Table table347 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 1767
      testRunner.And("the \"Base to Convert\" in Workflow \"WorkflowBaseConvertandCaseconvertTestingUnassi" +
                    "gnedVariablevalues\" debug outputs as", ((string)(null)), table347, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns DataMerge and DataSplit and testing variables that hasn\"t b" +
            "een assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignsDataMergeAndDataSplitAndTestingVariablesThatHasntBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns DataMerge and DataSplit and testing variables that hasn\"t b" +
                    "een assigned", ((string[])(null)));
#line 1770
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1771
      testRunner.Given("I have a workflow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table348 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table348.AddRow(new string[] {
                        "[[res]]",
                        "Test"});
#line 1772
   testRunner.And("\"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues\" contains an Assign \"Assi" +
                    "gn To merge\" as", ((string)(null)), table348, "And ");
#line hidden
            TechTalk.SpecFlow.Table table349 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table349.AddRow(new string[] {
                        "[[Value]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
#line 1775
   testRunner.And("\"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues\" contains Data Merge \"Dat" +
                    "a Merge\" into \"[[result]]\" as", ((string)(null)), table349, "And ");
#line hidden
            TechTalk.SpecFlow.Table table350 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table350.AddRow(new string[] {
                        "[[Value12]]",
                        "[[rec().b]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
#line 1778
   testRunner.And("\"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues\" contains Data Split \"Dat" +
                    "a Split\" as", ((string)(null)), table350, "And ");
#line 1781
   testRunner.When("\"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1782
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table351 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table351.AddRow(new string[] {
                        "1",
                        "[[res]] =",
                        "Test"});
#line 1783
   testRunner.And("the \"Assign To merge\" in WorkFlow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraib" +
                    "levalues\" debug inputs as", ((string)(null)), table351, "And ");
#line hidden
            TechTalk.SpecFlow.Table table352 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table352.AddRow(new string[] {
                        "1",
                        "[[res]]          =  Test"});
#line 1786
  testRunner.And("the \"Assign To merge\" in Workflow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraib" +
                    "levalues\" debug outputs as", ((string)(null)), table352, "And ");
#line hidden
            TechTalk.SpecFlow.Table table353 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table353.AddRow(new string[] {
                        "1",
                        "[[Value]] =",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
#line 1789
   testRunner.And("the \"Data Merge\" in WorkFlow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraibleval" +
                    "ues\" debug inputs as", ((string)(null)), table353, "And ");
#line hidden
            TechTalk.SpecFlow.Table table354 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table354.AddRow(new string[] {
                        "[[result]] ="});
#line 1792
   testRunner.And("the \"Data Merge\" in Workflow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraibleval" +
                    "ues\" debug outputs as", ((string)(null)), table354, "And ");
#line hidden
            TechTalk.SpecFlow.Table table355 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table355.AddRow(new string[] {
                        "[[Value12]]  =",
                        "Forward",
                        "No",
                        "1",
                        "[[rec().b]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
#line 1795
   testRunner.And("the \"Data Split\" in WorkFlow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraibleval" +
                    "ues\" debug inputs as", ((string)(null)), table355, "And ");
#line hidden
            TechTalk.SpecFlow.Table table356 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 1798
   testRunner.And("the \"Data Split\" in Workflow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraibleval" +
                    "ues\" debug outputs as", ((string)(null)), table356, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns DataMerge and DataSplit and testing variables that hasn\"t b" +
            "een assigned2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignsDataMergeAndDataSplitAndTestingVariablesThatHasntBeenAssigned2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns DataMerge and DataSplit and testing variables that hasn\"t b" +
                    "een assigned2", ((string[])(null)));
#line 1801
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1802
      testRunner.Given("I have a workflow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table357 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table357.AddRow(new string[] {
                        "[[res]]",
                        "Test"});
#line 1803
   testRunner.And("\"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues2\" contains an Assign \"Ass" +
                    "ign To merge\" as", ((string)(null)), table357, "And ");
#line hidden
            TechTalk.SpecFlow.Table table358 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table358.AddRow(new string[] {
                        "[[Value]]Test",
                        "Index",
                        "4",
                        "",
                        "Left"});
#line 1806
   testRunner.And("\"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues2\" contains Data Merge \"Da" +
                    "ta Merge\" into \"[[result]]\" as", ((string)(null)), table358, "And ");
#line hidden
            TechTalk.SpecFlow.Table table359 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table359.AddRow(new string[] {
                        "[[Value12]]Test",
                        "[[rec().b]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
#line 1809
   testRunner.And("\"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues2\" contains Data Split \"Da" +
                    "ta Split\" as", ((string)(null)), table359, "And ");
#line 1812
   testRunner.When("\"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues2\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1813
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table360 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table360.AddRow(new string[] {
                        "1",
                        "[[res]] =",
                        "Test"});
#line 1814
   testRunner.And("the \"Assign To merge\" in WorkFlow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraib" +
                    "levalues2\" debug inputs as", ((string)(null)), table360, "And ");
#line hidden
            TechTalk.SpecFlow.Table table361 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table361.AddRow(new string[] {
                        "1",
                        "[[res]] =  Test"});
#line 1817
  testRunner.And("the \"Assign To merge\" in Workflow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraib" +
                    "levalues2\" debug outputs as", ((string)(null)), table361, "And ");
#line hidden
            TechTalk.SpecFlow.Table table362 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table362.AddRow(new string[] {
                        "1",
                        "[[Value]]Test =",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
#line 1820
   testRunner.And("the \"Data Merge\" in WorkFlow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraibleval" +
                    "ues2\" debug inputs as", ((string)(null)), table362, "And ");
#line hidden
            TechTalk.SpecFlow.Table table363 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table363.AddRow(new string[] {
                        "[[result]] ="});
#line 1823
   testRunner.And("the \"Data Merge\" in Workflow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraibleval" +
                    "ues2\" debug outputs as", ((string)(null)), table363, "And ");
#line hidden
            TechTalk.SpecFlow.Table table364 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table364.AddRow(new string[] {
                        "[[Value12]]Test =",
                        "Forward",
                        "No",
                        "1",
                        "[[rec().b]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
#line 1826
   testRunner.And("the \"Data Split\" in WorkFlow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraibleval" +
                    "ues2\" debug inputs as", ((string)(null)), table364, "And ");
#line hidden
            TechTalk.SpecFlow.Table table365 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 1829
   testRunner.And("the \"Data Split\" in Workflow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraibleval" +
                    "ues2\" debug outputs as", ((string)(null)), table365, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns Replace and testing variables that hasn\"t been assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignsReplaceAndTestingVariablesThatHasntBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns Replace and testing variables that hasn\"t been assigned", ((string[])(null)));
#line 1832
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1833
      testRunner.Given("I have a workflow \"workflowithAssignandReplaceTestingUnassignedvariablevalues\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table366 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table366.AddRow(new string[] {
                        "[[Val]]",
                        "test"});
#line 1834
       testRunner.And("\"workflowithAssignandReplaceTestingUnassignedvariablevalues\" contains an Assign \"" +
                    "Assign34\" as", ((string)(null)), table366, "And ");
#line hidden
            TechTalk.SpecFlow.Table table367 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table367.AddRow(new string[] {
                        "[[rec()]]",
                        "[[Val1]]",
                        "[[Val2]]"});
#line 1837
   testRunner.And("\"workflowithAssignandReplaceTestingUnassignedvariablevalues\" contains Replace \"Re" +
                    "placing\" into \"[[replac]]\" as", ((string)(null)), table367, "And ");
#line 1840
   testRunner.When("\"workflowithAssignandReplaceTestingUnassignedvariablevalues\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1841
   testRunner.Then("the workflow execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table368 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table368.AddRow(new string[] {
                        "1",
                        "[[Val]] =",
                        "test"});
#line 1842
   testRunner.And("the \"Assign34\" in WorkFlow \"workflowithAssignandReplaceTestingUnassignedvariablev" +
                    "alues\" debug inputs as", ((string)(null)), table368, "And ");
#line hidden
            TechTalk.SpecFlow.Table table369 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table369.AddRow(new string[] {
                        "1",
                        "[[Val]] = test"});
#line 1845
    testRunner.And("the \"Assign34\" in Workflow \"workflowithAssignandReplaceTestingUnassignedvariablev" +
                    "alues\" debug outputs as", ((string)(null)), table369, "And ");
#line hidden
            TechTalk.SpecFlow.Table table370 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table370.AddRow(new string[] {
                        "[[rec()]] =",
                        "[[Val1]] =",
                        "[[Val2]] ="});
#line 1848
   testRunner.And("the \"Replacing\" in WorkFlow \"workflowithAssignandReplaceTestingUnassignedvariable" +
                    "values\" debug inputs as", ((string)(null)), table370, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns Replace and testing variables that hasn\"t been assigned2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignsReplaceAndTestingVariablesThatHasntBeenAssigned2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns Replace and testing variables that hasn\"t been assigned2", ((string[])(null)));
#line 1855
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1856
      testRunner.Given("I have a workflow \"workflowithAssignandReplaceTestingUnassignedvariablevalues2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table371 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table371.AddRow(new string[] {
                        "[[Val]]",
                        "test"});
            table371.AddRow(new string[] {
                        "[[rec().a]]",
                        "Warewolf"});
#line 1857
      testRunner.And("\"workflowithAssignandReplaceTestingUnassignedvariablevalues2\" contains an Assign " +
                    "\"Assign34\" as", ((string)(null)), table371, "And ");
#line hidden
            TechTalk.SpecFlow.Table table372 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table372.AddRow(new string[] {
                        "[[rec()]]",
                        "[[Val1]]Test",
                        "[[Val]]"});
#line 1861
   testRunner.And("\"workflowithAssignandReplaceTestingUnassignedvariablevalues2\" contains Replace \"R" +
                    "eplacing\" into \"[[replac]]\" as", ((string)(null)), table372, "And ");
#line 1864
   testRunner.When("\"workflowithAssignandReplaceTestingUnassignedvariablevalues2\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1865
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table373 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table373.AddRow(new string[] {
                        "1",
                        "[[Val]] =",
                        "test"});
            table373.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "Warewolf"});
#line 1866
   testRunner.And("the \"Assign34\" in WorkFlow \"workflowithAssignandReplaceTestingUnassignedvariablev" +
                    "alues2\" debug inputs as", ((string)(null)), table373, "And ");
#line hidden
            TechTalk.SpecFlow.Table table374 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table374.AddRow(new string[] {
                        "1",
                        "[[Val]] = test"});
            table374.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = Warewolf"});
#line 1870
    testRunner.And("the \"Assign34\" in Workflow \"workflowithAssignandReplaceTestingUnassignedvariablev" +
                    "alues2\" debug outputs as", ((string)(null)), table374, "And ");
#line hidden
            TechTalk.SpecFlow.Table table375 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table375.AddRow(new string[] {
                        "[[rec(1).a]] = Warewolf",
                        "[[Val1]]Test =",
                        "[[Val]] = test"});
#line 1874
   testRunner.And("the \"Replacing\" in WorkFlow \"workflowithAssignandReplaceTestingUnassignedvariable" +
                    "values2\" debug inputs as", ((string)(null)), table375, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Format Numbers and testing variables that hasn\"t been assign" +
            "ed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignFormatNumbersAndTestingVariablesThatHasntBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Format Numbers and testing variables that hasn\"t been assign" +
                    "ed", ((string[])(null)));
#line 1881
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1882
   testRunner.Given("I have a workflow \"WorkflowWithAssignandFormatTestingUnassignedvariablevalues\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table376 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table376.AddRow(new string[] {
                        "[[val]]",
                        "1"});
#line 1883
   testRunner.And("\"WorkflowWithAssignandFormatTestingUnassignedvariablevalues\" contains an Assign \"" +
                    "IndexVal\" as", ((string)(null)), table376, "And ");
#line hidden
            TechTalk.SpecFlow.Table table377 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table377.AddRow(new string[] {
                        "[[val1]]",
                        "Up",
                        "[[val1]]",
                        "[[val1]]",
                        "[[fresult]]"});
#line 1886
      testRunner.And("\"WorkflowWithAssignandFormatTestingUnassignedvariablevalues\" contains Format Numb" +
                    "er \"Fnumber\" as", ((string)(null)), table377, "And ");
#line 1889
   testRunner.When("\"WorkflowWithAssignandFormatTestingUnassignedvariablevalues\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1890
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table378 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table378.AddRow(new string[] {
                        "1",
                        "[[val]]  =",
                        "1"});
#line 1891
   testRunner.And("the \"IndexVal\" in WorkFlow \"WorkflowWithAssignandFormatTestingUnassignedvariablev" +
                    "alues\" debug inputs as", ((string)(null)), table378, "And ");
#line hidden
            TechTalk.SpecFlow.Table table379 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table379.AddRow(new string[] {
                        "1",
                        "[[val]]  = 1"});
#line 1894
   testRunner.And("the \"IndexVal\" in Workflow \"WorkflowWithAssignandFormatTestingUnassignedvariablev" +
                    "alues\" debug outputs as", ((string)(null)), table379, "And ");
#line hidden
            TechTalk.SpecFlow.Table table380 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table380.AddRow(new string[] {
                        "[[val1]] =",
                        "Up",
                        "[[val1]] =",
                        "[[val1]]  ="});
#line 1897
   testRunner.And("the \"Fnumber\" in WorkFlow \"WorkflowWithAssignandFormatTestingUnassignedvariableva" +
                    "lues\" debug inputs as", ((string)(null)), table380, "And ");
#line hidden
            TechTalk.SpecFlow.Table table381 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table381.AddRow(new string[] {
                        "[[fresult]]  ="});
#line 1900
   testRunner.And("the \"Fnumber\" in Workflow \"WorkflowWithAssignandFormatTestingUnassignedvariableva" +
                    "lues\" debug outputs as", ((string)(null)), table381, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Format Numbers and testing variables that hasn\"t been assign" +
            "ed2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignFormatNumbersAndTestingVariablesThatHasntBeenAssigned2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Format Numbers and testing variables that hasn\"t been assign" +
                    "ed2", ((string[])(null)));
#line 1904
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1905
   testRunner.Given("I have a workflow \"WorkflowWithAssignandFormatTestingUnassignedvariablevalues2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table382 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table382.AddRow(new string[] {
                        "[[val]]",
                        "1"});
#line 1906
   testRunner.And("\"WorkflowWithAssignandFormatTestingUnassignedvariablevalues2\" contains an Assign " +
                    "\"IndexVal\" as", ((string)(null)), table382, "And ");
#line hidden
            TechTalk.SpecFlow.Table table383 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table383.AddRow(new string[] {
                        "[[val1]]234",
                        "Up",
                        "[[val]]",
                        "[[val]]",
                        "[[fresult]]"});
#line 1909
     testRunner.And("\"WorkflowWithAssignandFormatTestingUnassignedvariablevalues2\" contains Format Num" +
                    "ber \"Fnumber\" as", ((string)(null)), table383, "And ");
#line 1912
   testRunner.When("\"WorkflowWithAssignandFormatTestingUnassignedvariablevalues2\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1913
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table384 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table384.AddRow(new string[] {
                        "1",
                        "[[val]]  =",
                        "1"});
#line 1914
   testRunner.And("the \"IndexVal\" in WorkFlow \"WorkflowWithAssignandFormatTestingUnassignedvariablev" +
                    "alues2\" debug inputs as", ((string)(null)), table384, "And ");
#line hidden
            TechTalk.SpecFlow.Table table385 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table385.AddRow(new string[] {
                        "1",
                        "[[val]]  = 1"});
#line 1917
   testRunner.And("the \"IndexVal\" in Workflow \"WorkflowWithAssignandFormatTestingUnassignedvariablev" +
                    "alues2\" debug outputs as", ((string)(null)), table385, "And ");
#line hidden
            TechTalk.SpecFlow.Table table386 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table386.AddRow(new string[] {
                        "[[val1]]234 =",
                        "Up",
                        "[[val]] = 1",
                        "[[val]]  = 1"});
#line 1920
   testRunner.And("the \"Fnumber\" in WorkFlow \"WorkflowWithAssignandFormatTestingUnassignedvariableva" +
                    "lues2\" debug inputs as", ((string)(null)), table386, "And ");
#line hidden
            TechTalk.SpecFlow.Table table387 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table387.AddRow(new string[] {
                        "[[fresult]]  ="});
#line 1923
   testRunner.And("the \"Fnumber\" in Workflow \"WorkflowWithAssignandFormatTestingUnassignedvariableva" +
                    "lues2\" debug outputs as", ((string)(null)), table387, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Create Delete folder and testing variable values that hasn\"t" +
            " been assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignCreateDeleteFolderAndTestingVariableValuesThatHasntBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Create Delete folder and testing variable values that hasn\"t" +
                    " been assigned", ((string[])(null)));
#line 1927
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1928
   testRunner.Given("I have a workflow \"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariab" +
                    "levalues\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table388 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table388.AddRow(new string[] {
                        "[[rec().a]]",
                        "C:\\copied00.txt"});
#line 1929
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariablevalues\" contains" +
                    " an Assign \"AssignT\" as", ((string)(null)), table388, "And ");
#line hidden
            TechTalk.SpecFlow.Table table389 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "If it exits",
                        "Username",
                        "Password",
                        "Result"});
            table389.AddRow(new string[] {
                        "[[NoValue]]",
                        "True",
                        "",
                        "",
                        "[[res1]]"});
#line 1932
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariablevalues\" contains" +
                    " an Create \"Create12\" as", ((string)(null)), table389, "And ");
#line hidden
            TechTalk.SpecFlow.Table table390 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset",
                        "Result"});
            table390.AddRow(new string[] {
                        "[[NoValue]]",
                        "[[res2]]"});
#line 1935
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariablevalues\" contains" +
                    " an Delete Folder \"DeleteFolder1\" as", ((string)(null)), table390, "And ");
#line 1938
   testRunner.When("\"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariablevalues\" is execu" +
                    "ted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1939
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table391 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table391.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "C:\\copied00.txt"});
#line 1940
   testRunner.And("the \"AssignT\" in WorkFlow \"WorkflowWithAssignCreateandDeleteRecordTestingUnassign" +
                    "edvariablevalues\" debug inputs as", ((string)(null)), table391, "And ");
#line hidden
            TechTalk.SpecFlow.Table table392 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table392.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = C:\\copied00.txt"});
#line 1943
   testRunner.And("the \"AssignT\" in Workflow \"WorkflowWithAssignCreateandDeleteRecordTestingUnassign" +
                    "edvariablevalues\" debug outputs as", ((string)(null)), table392, "And ");
#line hidden
            TechTalk.SpecFlow.Table table393 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "Overwrite",
                        "Username",
                        "Password"});
            table393.AddRow(new string[] {
                        "[[NoValue]] =",
                        "True",
                        "\"\"",
                        "\"\""});
#line 1946
  testRunner.And("the \"Create12\" in WorkFlow \"WorkflowWithAssignCreateandDeleteRecordTestingUnassig" +
                    "nedvariablevalues\" debug inputs as", ((string)(null)), table393, "And ");
#line hidden
            TechTalk.SpecFlow.Table table394 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table394.AddRow(new string[] {
                        "[[res1]] = Failure"});
#line 1949
    testRunner.And("the \"Create12\" in Workflow \"WorkflowWithAssignCreateandDeleteRecordTestingUnassig" +
                    "nedvariablevalues\" debug outputs as", ((string)(null)), table394, "And ");
#line hidden
            TechTalk.SpecFlow.Table table395 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input Path",
                        "Username",
                        "Password"});
            table395.AddRow(new string[] {
                        "[[NoValue]] =",
                        "\"\"",
                        "\"\""});
#line 1952
   testRunner.And("the \"DeleteFolder1\" in WorkFlow \"WorkflowWithAssignCreateandDeleteRecordTestingUn" +
                    "assignedvariablevalues\" debug inputs as", ((string)(null)), table395, "And ");
#line hidden
            TechTalk.SpecFlow.Table table396 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table396.AddRow(new string[] {
                        "[[res2]] = Failure"});
#line 1955
   testRunner.And("the \"DeleteFolder1\" in Workflow \"WorkflowWithAssignCreateandDeleteRecordTestingUn" +
                    "assignedvariablevalues\" debug outputs as", ((string)(null)), table396, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Create Delete folder and testing variable values that hasn\"t" +
            " been assigned2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignCreateDeleteFolderAndTestingVariableValuesThatHasntBeenAssigned2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Create Delete folder and testing variable values that hasn\"t" +
                    " been assigned2", ((string[])(null)));
#line 1959
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1960
   testRunner.Given("I have a workflow \"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariab" +
                    "levalues2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table397 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table397.AddRow(new string[] {
                        "[[rec().a]]",
                        "C:\\copied00.txt"});
#line 1961
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariablevalues2\" contain" +
                    "s an Assign \"AssignT\" as", ((string)(null)), table397, "And ");
#line hidden
            TechTalk.SpecFlow.Table table398 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "If it exits",
                        "Username",
                        "Password",
                        "Result"});
            table398.AddRow(new string[] {
                        "[[NoValue]]\\copied00.txt",
                        "True",
                        "",
                        "",
                        "[[res1]]"});
#line 1964
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariablevalues2\" contain" +
                    "s an Create \"Create12\" as", ((string)(null)), table398, "And ");
#line hidden
            TechTalk.SpecFlow.Table table399 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset",
                        "Result"});
            table399.AddRow(new string[] {
                        "[[NoValue]]\\copied00.txt",
                        "[[res2]]"});
#line 1967
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariablevalues2\" contain" +
                    "s an Delete Folder \"DeleteFolder1\" as", ((string)(null)), table399, "And ");
#line 1970
   testRunner.When("\"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariablevalues2\" is exec" +
                    "uted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1971
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table400 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table400.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "C:\\copied00.txt"});
#line 1972
   testRunner.And("the \"AssignT\" in WorkFlow \"WorkflowWithAssignCreateandDeleteRecordTestingUnassign" +
                    "edvariablevalues2\" debug inputs as", ((string)(null)), table400, "And ");
#line hidden
            TechTalk.SpecFlow.Table table401 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table401.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = C:\\copied00.txt"});
#line 1975
   testRunner.And("the \"AssignT\" in Workflow \"WorkflowWithAssignCreateandDeleteRecordTestingUnassign" +
                    "edvariablevalues2\" debug outputs as", ((string)(null)), table401, "And ");
#line hidden
            TechTalk.SpecFlow.Table table402 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "Overwrite",
                        "Username",
                        "Password"});
            table402.AddRow(new string[] {
                        "[[NoValue]]\\copied00.txt =",
                        "True",
                        "\"\"",
                        "\"\""});
#line 1978
  testRunner.And("the \"Create12\" in WorkFlow \"WorkflowWithAssignCreateandDeleteRecordTestingUnassig" +
                    "nedvariablevalues2\" debug inputs as", ((string)(null)), table402, "And ");
#line hidden
            TechTalk.SpecFlow.Table table403 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table403.AddRow(new string[] {
                        "[[res1]] = Failure"});
#line 1981
    testRunner.And("the \"Create12\" in Workflow \"WorkflowWithAssignCreateandDeleteRecordTestingUnassig" +
                    "nedvariablevalues2\" debug outputs as", ((string)(null)), table403, "And ");
#line hidden
            TechTalk.SpecFlow.Table table404 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input Path",
                        "Username",
                        "Password"});
            table404.AddRow(new string[] {
                        "[[NoValue]]\\copied00.txt =",
                        "\"\"",
                        "\"\""});
#line 1984
   testRunner.And("the \"DeleteFolder1\" in WorkFlow \"WorkflowWithAssignCreateandDeleteRecordTestingUn" +
                    "assignedvariablevalues2\" debug inputs as", ((string)(null)), table404, "And ");
#line hidden
            TechTalk.SpecFlow.Table table405 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table405.AddRow(new string[] {
                        "[[res2]] = Failure"});
#line 1987
   testRunner.And("the \"DeleteFolder1\" in Workflow \"WorkflowWithAssignCreateandDeleteRecordTestingUn" +
                    "assignedvariablevalues2\" debug outputs as", ((string)(null)), table405, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Random and testing variable values that hasn\"t been assi" +
            "gned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignAndRandomAndTestingVariableValuesThatHasntBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Random and testing variable values that hasn\"t been assi" +
                    "gned", ((string[])(null)));
#line 1991
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1992
  testRunner.Given("I have a workflow \"WorkflowWithAssignandRandomTestingUnassignedvariablevalue\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table406 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table406.AddRow(new string[] {
                        "[[a]]",
                        "1"});
#line 1993
  testRunner.And("\"WorkflowWithAssignandRandomTestingUnassignedvariablevalue\" contains an Assign \"V" +
                    "alforrandno\" as", ((string)(null)), table406, "And ");
#line hidden
            TechTalk.SpecFlow.Table table407 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table407.AddRow(new string[] {
                        "Numbers",
                        "[[val1]]",
                        "[[val2]]",
                        "[[ranresult]]"});
#line 1996
    testRunner.And("\"WorkflowWithAssignandRandomTestingUnassignedvariablevalue\" contains Random \"Rand" +
                    "\" as", ((string)(null)), table407, "And ");
#line 1999
   testRunner.When("\"WorkflowWithAssignandRandomTestingUnassignedvariablevalue\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2000
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table408 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table408.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
#line 2001
   testRunner.And("the \"Valforrandno\" in WorkFlow \"WorkflowWithAssignandRandomTestingUnassignedvaria" +
                    "blevalue\" debug inputs as", ((string)(null)), table408, "And ");
#line hidden
            TechTalk.SpecFlow.Table table409 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table409.AddRow(new string[] {
                        "1",
                        "[[a]] = 1"});
#line 2004
   testRunner.And("the \"Valforrandno\" in Workflow \"WorkflowWithAssignandRandomTestingUnassignedvaria" +
                    "blevalue\" debug outputs as", ((string)(null)), table409, "And ");
#line hidden
            TechTalk.SpecFlow.Table table410 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table410.AddRow(new string[] {
                        "Numbers",
                        "[[val1]]  =",
                        "[[val2]] ="});
#line 2007
   testRunner.And("the \"Rand\" in WorkFlow \"WorkflowWithAssignandRandomTestingUnassignedvariablevalue" +
                    "\" debug inputs as", ((string)(null)), table410, "And ");
#line hidden
            TechTalk.SpecFlow.Table table411 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table411.AddRow(new string[] {
                        "[[ranresult]] ="});
#line 2010
   testRunner.And("the \"Rand\" in Workflow \"WorkflowWithAssignandRandomTestingUnassignedvariablevalue" +
                    "\" debug outputs as", ((string)(null)), table411, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign, Date Time Difference tools and testing variable values that" +
            " hasn\"t been assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignDateTimeDifferenceToolsAndTestingVariableValuesThatHasntBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign, Date Time Difference tools and testing variable values that" +
                    " hasn\"t been assigned", ((string[])(null)));
#line 2015
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2016
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndDateTimeDifferencetoolsTestingUnassignedv" +
                    "ariablevalue\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table412 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table412.AddRow(new string[] {
                        "[[val]]",
                        "2014"});
#line 2017
   testRunner.And("\"WorkflowWithAssignAndDateTimeDifferencetoolsTestingUnassignedvariablevalue\" cont" +
                    "ains an Assign \"InputDates\" as", ((string)(null)), table412, "And ");
#line hidden
            TechTalk.SpecFlow.Table table413 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table413.AddRow(new string[] {
                        "[[val1]]",
                        "[[val2]]",
                        "[[val3]]",
                        "Years",
                        "[[result]]"});
#line 2020
   testRunner.And("\"WorkflowWithAssignAndDateTimeDifferencetoolsTestingUnassignedvariablevalue\" cont" +
                    "ains Date and Time Difference \"DateAndTime\" as", ((string)(null)), table413, "And ");
#line 2023
   testRunner.When("\"WorkflowWithAssignAndDateTimeDifferencetoolsTestingUnassignedvariablevalue\" is e" +
                    "xecuted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2024
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table414 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table414.AddRow(new string[] {
                        "1",
                        "[[val]]  =",
                        "2014"});
#line 2025
   testRunner.And("the \"InputDates\" in WorkFlow \"WorkflowWithAssignAndDateTimeDifferencetoolsTesting" +
                    "Unassignedvariablevalue\" debug inputs as", ((string)(null)), table414, "And ");
#line hidden
            TechTalk.SpecFlow.Table table415 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table415.AddRow(new string[] {
                        "1",
                        "[[val]]  = 2014"});
#line 2028
   testRunner.And("the \"InputDates\" in Workflow \"WorkflowWithAssignAndDateTimeDifferencetoolsTesting" +
                    "Unassignedvariablevalue\" debug outputs as", ((string)(null)), table415, "And ");
#line hidden
            TechTalk.SpecFlow.Table table416 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table416.AddRow(new string[] {
                        "[[val1]] =",
                        "[[val2]] =",
                        "[[val3]]  =",
                        "Years"});
#line 2031
   testRunner.And("the \"DateAndTime\" in WorkFlow \"WorkflowWithAssignAndDateTimeDifferencetoolsTestin" +
                    "gUnassignedvariablevalue\" debug inputs as", ((string)(null)), table416, "And ");
#line hidden
            TechTalk.SpecFlow.Table table417 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
#line 2034
   testRunner.And("the \"DateAndTime\" in Workflow \"WorkflowWithAssignAndDateTimeDifferencetoolsTestin" +
                    "gUnassignedvariablevalue\" debug outputs as", ((string)(null)), table417, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign, Date Time Difference tools and testing variable values that" +
            " hasn\"t been assigned2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignDateTimeDifferenceToolsAndTestingVariableValuesThatHasntBeenAssigned2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign, Date Time Difference tools and testing variable values that" +
                    " hasn\"t been assigned2", ((string[])(null)));
#line 2037
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2038
   testRunner.Given("I have a workflow \"WorkflowContainsDateTimeDifferencetoolsTestingUnassignedvariab" +
                    "levalue2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table418 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table418.AddRow(new string[] {
                        "[[val]]",
                        "2014"});
#line 2039
   testRunner.And("\"WorkflowContainsDateTimeDifferencetoolsTestingUnassignedvariablevalue2\" contains" +
                    " an Assign \"InputDates2\" as", ((string)(null)), table418, "And ");
#line hidden
            TechTalk.SpecFlow.Table table419 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table419.AddRow(new string[] {
                        "10/01/1991  [[val1]]/[[val1]]/[[val1]]",
                        "10/01/1991",
                        "dd/mm/yyyy",
                        "Years",
                        "[[result]]"});
#line 2042
   testRunner.And("\"WorkflowContainsDateTimeDifferencetoolsTestingUnassignedvariablevalue2\" contains" +
                    " Date and Time Difference \"DateTime4\" as", ((string)(null)), table419, "And ");
#line 2045
   testRunner.When("\"WorkflowContainsDateTimeDifferencetoolsTestingUnassignedvariablevalue2\" is execu" +
                    "ted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2046
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table420 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table420.AddRow(new string[] {
                        "1",
                        "[[val]]  =",
                        "2014"});
#line 2047
   testRunner.And("the \"InputDates2\" in WorkFlow \"WorkflowContainsDateTimeDifferencetoolsTestingUnas" +
                    "signedvariablevalue2\" debug inputs as", ((string)(null)), table420, "And ");
#line hidden
            TechTalk.SpecFlow.Table table421 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table421.AddRow(new string[] {
                        "1",
                        "[[val]]  = 2014"});
#line 2050
   testRunner.And("the \"InputDates2\" in Workflow \"WorkflowContainsDateTimeDifferencetoolsTestingUnas" +
                    "signedvariablevalue2\" debug outputs as", ((string)(null)), table421, "And ");
#line hidden
            TechTalk.SpecFlow.Table table422 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table422.AddRow(new string[] {
                        "10/01/1991  [[val1]]/[[val1]]/[[val1]] =",
                        "10/01/1991",
                        "dd/mm/yyyy",
                        "Years"});
#line 2053
   testRunner.And("the \"DateTime4\" in WorkFlow \"WorkflowContainsDateTimeDifferencetoolsTestingUnassi" +
                    "gnedvariablevalue2\" debug inputs as", ((string)(null)), table422, "And ");
#line hidden
            TechTalk.SpecFlow.Table table423 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table423.AddRow(new string[] {
                        ""});
#line 2056
   testRunner.And("the \"DateTime4\" in Workflow \"WorkflowContainsDateTimeDifferencetoolsTestingUnassi" +
                    "gnedvariablevalue2\" debug outputs as", ((string)(null)), table423, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign  Delete and testing variables that hasn\"t been assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignDeleteAndTestingVariablesThatHasntBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign  Delete and testing variables that hasn\"t been assigned", ((string[])(null)));
#line 2060
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2061
   testRunner.Given("I have a workflow \"WorkflowWithAssignDelete12\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table424 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table424.AddRow(new string[] {
                        "[[rec().a]]",
                        "50"});
#line 2062
   testRunner.And("\"WorkflowWithAssignDelete12\" contains an Assign \"DelRec\" as", ((string)(null)), table424, "And ");
#line hidden
            TechTalk.SpecFlow.Table table425 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "result"});
            table425.AddRow(new string[] {
                        "[[Del(1)]]",
                        "[[result1]]"});
#line 2065
   testRunner.And("\"WorkflowWithAssignDelete12\" contains Delete \"Delet12\" as", ((string)(null)), table425, "And ");
#line 2068
   testRunner.When("\"WorkflowWithAssignDelete12\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2069
      testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table426 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table426.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "50"});
#line 2070
   testRunner.And("the \"DelRec\" in WorkFlow \"WorkflowWithAssignDelete12\" debug inputs as", ((string)(null)), table426, "And ");
#line hidden
            TechTalk.SpecFlow.Table table427 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table427.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 50"});
#line 2073
   testRunner.And("the \"DelRec\" in Workflow \"WorkflowWithAssignDelete12\" debug outputs as", ((string)(null)), table427, "And ");
#line hidden
            TechTalk.SpecFlow.Table table428 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table428.AddRow(new string[] {
                        "[[Del(1)]] ="});
#line 2076
   testRunner.And("the \"Delet12\" in WorkFlow \"WorkflowWithAssignDelete12\" debug inputs as", ((string)(null)), table428, "And ");
#line hidden
            TechTalk.SpecFlow.Table table429 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table429.AddRow(new string[] {
                        "[[result1]] = Failure"});
#line 2079
   testRunner.And("the \"Delet12\" in Workflow \"WorkflowWithAssignDelete12\" debug outputs as", ((string)(null)), table429, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign  DeleteNullHandler and testing variables that hasn\"t been as" +
            "signed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignDeleteNullHandlerAndTestingVariablesThatHasntBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign  DeleteNullHandler and testing variables that hasn\"t been as" +
                    "signed", ((string[])(null)));
#line 2083
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2084
   testRunner.Given("I have a workflow \"WorkflowWithAssignDelete12\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table430 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table430.AddRow(new string[] {
                        "[[rec().a]]",
                        "50"});
#line 2085
   testRunner.And("\"WorkflowWithAssignDelete12\" contains an Assign \"DelRec\" as", ((string)(null)), table430, "And ");
#line hidden
            TechTalk.SpecFlow.Table table431 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "result"});
            table431.AddRow(new string[] {
                        "[[Del(1)]]",
                        "[[result1]]"});
#line 2088
   testRunner.And("\"WorkflowWithAssignDelete12\" contains NullHandlerDelete \"Delet12\" as", ((string)(null)), table431, "And ");
#line 2091
   testRunner.When("\"WorkflowWithAssignDelete12\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2092
      testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table432 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table432.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "50"});
#line 2093
   testRunner.And("the \"DelRec\" in WorkFlow \"WorkflowWithAssignDelete12\" debug inputs as", ((string)(null)), table432, "And ");
#line hidden
            TechTalk.SpecFlow.Table table433 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table433.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 50"});
#line 2096
   testRunner.And("the \"DelRec\" in Workflow \"WorkflowWithAssignDelete12\" debug outputs as", ((string)(null)), table433, "And ");
#line hidden
            TechTalk.SpecFlow.Table table434 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table434.AddRow(new string[] {
                        "[[result1]] = Success"});
#line 2099
   testRunner.And("the \"Delet12\" in Workflow \"WorkflowWithAssignDelete12\" debug outputs as", ((string)(null)), table434, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Sort and testing variables that hasn\"t been assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignSortAndTestingVariablesThatHasntBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Sort and testing variables that hasn\"t been assigned", ((string[])(null)));
#line 2104
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2105
      testRunner.Given("I have a workflow \"workflowithAssignandsortingrec12\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table435 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table435.AddRow(new string[] {
                        "[[rs(1).a]]",
                        "10"});
            table435.AddRow(new string[] {
                        "[[rs(5).a]]",
                        "20"});
            table435.AddRow(new string[] {
                        "[[rs(7).a]]",
                        "30"});
            table435.AddRow(new string[] {
                        "[[rs(2).b]]",
                        "6"});
            table435.AddRow(new string[] {
                        "[[rs(4).b]]",
                        "4"});
            table435.AddRow(new string[] {
                        "[[rs(6).b]]",
                        "2"});
#line 2106
      testRunner.And("\"workflowithAssignandsortingrec12\" contains an Assign \"sortval5\" as", ((string)(null)), table435, "And ");
#line hidden
            TechTalk.SpecFlow.Table table436 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table436.AddRow(new string[] {
                        "[[xs(*).a]]",
                        "Backwards"});
#line 2114
   testRunner.And("\"workflowithAssignandsortingrec12\" contains an Sort \"sortRec1\" as", ((string)(null)), table436, "And ");
#line 2117
   testRunner.When("\"workflowithAssignandsortingrec12\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2118
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table437 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table437.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =",
                        "10"});
            table437.AddRow(new string[] {
                        "2",
                        "[[rs(5).a]] =",
                        "20"});
            table437.AddRow(new string[] {
                        "3",
                        "[[rs(7).a]] =",
                        "30"});
            table437.AddRow(new string[] {
                        "4",
                        "[[rs(2).b]] =",
                        "6"});
            table437.AddRow(new string[] {
                        "5",
                        "[[rs(4).b]] =",
                        "4"});
            table437.AddRow(new string[] {
                        "6",
                        "[[rs(6).b]] =",
                        "2"});
#line 2119
   testRunner.And("the \"sortval5\" in WorkFlow \"workflowithAssignandsortingrec12\" debug inputs as", ((string)(null)), table437, "And ");
#line hidden
            TechTalk.SpecFlow.Table table438 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table438.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = 10"});
            table438.AddRow(new string[] {
                        "2",
                        "[[rs(5).a]] = 20"});
            table438.AddRow(new string[] {
                        "3",
                        "[[rs(7).a]] = 30"});
            table438.AddRow(new string[] {
                        "4",
                        "[[rs(2).b]] = 6"});
            table438.AddRow(new string[] {
                        "5",
                        "[[rs(4).b]] = 4"});
            table438.AddRow(new string[] {
                        "6",
                        "[[rs(6).b]] = 2"});
#line 2127
   testRunner.And("the \"sortval5\" in Workflow \"workflowithAssignandsortingrec12\" debug outputs as", ((string)(null)), table438, "And ");
#line hidden
            TechTalk.SpecFlow.Table table439 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table439.AddRow(new string[] {
                        "[[xs(*).a]] =",
                        "Backwards"});
#line 2135
   testRunner.And("the \"sortRec1\" in WorkFlow \"workflowithAssignandsortingrec12\" debug inputs as", ((string)(null)), table439, "And ");
#line hidden
            TechTalk.SpecFlow.Table table440 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table440.AddRow(new string[] {
                        "[[xs(*).a]] ="});
#line 2138
   testRunner.And("the \"sortRec1\" in Workflow \"workflowithAssignandsortingrec12\" debug outputs as", ((string)(null)), table440, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Unique Tool and testing variables in Returnfield hasn\"t been" +
            " assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignUniqueToolAndTestingVariablesInReturnfieldHasntBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Unique Tool and testing variables in Returnfield hasn\"t been" +
                    " assigned", ((string[])(null)));
#line 2142
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2143
      testRunner.Given("I have a workflow \"workflowithAssignUni\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table441 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table441.AddRow(new string[] {
                        "[[rs(1).row]]",
                        "10"});
            table441.AddRow(new string[] {
                        "[[rs(1).data]]",
                        "10"});
#line 2144
      testRunner.And("\"workflowithAssignUni\" contains an Assign \"Records1\" as", ((string)(null)), table441, "And ");
#line hidden
            TechTalk.SpecFlow.Table table442 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table442.AddRow(new string[] {
                        "[[rs(1).row]]",
                        "[[new().row]]",
                        "[[rec().unique]]"});
#line 2148
   testRunner.And("\"workflowithAssignUni\" contains an Unique \"Unrec\" as", ((string)(null)), table442, "And ");
#line 2151
   testRunner.When("\"workflowithAssignUni\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2152
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table443 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table443.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =",
                        "10"});
            table443.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =",
                        "10"});
#line 2153
   testRunner.And("the \"Records1\" in WorkFlow \"workflowithAssignUni\" debug inputs as", ((string)(null)), table443, "And ");
#line hidden
            TechTalk.SpecFlow.Table table444 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table444.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =  10"});
            table444.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =  10"});
#line 2157
   testRunner.And("the \"Records1\" in Workflow \"workflowithAssignUni\" debug outputs as", ((string)(null)), table444, "And ");
#line hidden
            TechTalk.SpecFlow.Table table445 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table445.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).row]] = 10",
                        ""});
            table445.AddRow(new string[] {
                        "",
                        "",
                        "[[new().row]] ="});
#line 2161
   testRunner.And("the \"Unrec\" in WorkFlow \"workflowithAssignUni\" debug inputs as", ((string)(null)), table445, "And ");
#line hidden
            TechTalk.SpecFlow.Table table446 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table446.AddRow(new string[] {
                        "[[rec(*).unique]] ="});
#line 2165
      testRunner.And("the \"Unrec\" in Workflow \"workflowithAssignUni\" debug outputs as", ((string)(null)), table446, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and AssignObject using append notation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AssignWorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AssignWorkflowExecution")]
        public virtual void WorkflowWithAssignAndAssignObjectUsingAppendNotation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and AssignObject using append notation", ((string[])(null)));
#line 2169
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2170
     testRunner.Given("I have a workflow \"WFWithAssignForAssignObjectAppendNot\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table447 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table447.AddRow(new string[] {
                        "[[msgs().val]]",
                        "TestingDotnetDllCascading.Food.ToJson"});
            table447.AddRow(new string[] {
                        "[[msgs().val]]",
                        "TestingDotnetDllCascading.Food.ToJson"});
#line 2171
   testRunner.And("\"WFWithAssignForAssignObjectAppendNot\" contains an Assign \"Data\" as", ((string)(null)), table447, "And ");
#line hidden
            TechTalk.SpecFlow.Table table448 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table448.AddRow(new string[] {
                        "[[@Food]]",
                        "[[msgs().val]]"});
#line 2175
     testRunner.And("\"WFWithAssignForAssignObjectAppendNot\" contains an Assign Object \"AssignPerson\" a" +
                    "s", ((string)(null)), table448, "And ");
#line 2178
  testRunner.When("\"WFWithAssignForAssignObjectAppendNot\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2179
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table449 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table449.AddRow(new string[] {
                        "1",
                        "[[@Food]] = \"FoodName:null\""});
#line 2180
   testRunner.And("the \"AssignPerson\" in Workflow \"WFWithAssignForAssignObjectAppendNot\" debug outpu" +
                    "ts as", ((string)(null)), table449, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
