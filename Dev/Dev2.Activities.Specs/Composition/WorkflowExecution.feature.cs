// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dev2.Activities.Specs.Composition
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class WorkflowExecutionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "WorkflowExecution.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "WorkflowExecution", "\tIn order to execute a workflow\r\n\tAs a Warewolf user\r\n\tI want to be able to build" +
                    " workflows and execute them against the server", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "WorkflowExecution")))
            {
                global::Dev2.Activities.Specs.Composition.WorkflowExecutionFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
   testRunner.Given("Debug events are reset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
   testRunner.And("Debug states are cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with multiple tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithMultipleToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with multiple tools executing against the server", new string[] {
                        "WorkflowExecution"});
#line 11
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 12
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndCount\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table710 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table710.AddRow(new string[] {
                        "[[rec().a]]",
                        "yes"});
            table710.AddRow(new string[] {
                        "[[rec().a]]",
                        "no"});
#line 13
   testRunner.And("\"WorkflowWithAssignAndCount\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table710, "And ");
#line 17
   testRunner.And("\"WorkflowWithAssignAndCount\" contains Count Record \"CountRec\" on \"[[rec()]]\" into" +
                    " \"[[count]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
   testRunner.When("\"WorkflowWithAssignAndCount\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table711 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table711.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "yes"});
            table711.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "no"});
#line 20
   testRunner.And("the \"Rec To Convert\" in WorkFlow \"WorkflowWithAssignAndCount\" debug inputs as", ((string)(null)), table711, "And ");
#line hidden
            TechTalk.SpecFlow.Table table712 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table712.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = yes"});
            table712.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = no"});
#line 24
   testRunner.And("the \"Rec To Convert\" in Workflow \"WorkflowWithAssignAndCount\" debug outputs as", ((string)(null)), table712, "And ");
#line hidden
            TechTalk.SpecFlow.Table table713 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table713.AddRow(new string[] {
                        "[[rec(1).a]] = yes"});
            table713.AddRow(new string[] {
                        "[[rec(2).a]] = no"});
#line 28
   testRunner.And("the \"CountRec\" in WorkFlow \"WorkflowWithAssignAndCount\" debug inputs as", ((string)(null)), table713, "And ");
#line hidden
            TechTalk.SpecFlow.Table table714 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table714.AddRow(new string[] {
                        "[[count]] = 2"});
#line 32
   testRunner.And("the \"CountRec\" in Workflow \"WorkflowWithAssignAndCount\" debug outputs as", ((string)(null)), table714, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with ForEach InRecordset Not entered")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithForEachInRecordsetNotEntered()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with ForEach InRecordset Not entered", new string[] {
                        "WorkflowExecution"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 38
testRunner.Given("I have a workflow \"WFWithForEachRecordsetNotentered\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
testRunner.And("\"WFWithForEachRecordsetNotentered\" contains a Foreach \"ForEachTest1\" as \"InRecord" +
                    "set\" executions \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
testRunner.When("\"WFWithForEachRecordsetNotentered\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table715 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table715.AddRow(new string[] {
                        "The Recordset Field is Required"});
            table715.AddRow(new string[] {
                        "Cannot execute a For Each with no content"});
#line 42
testRunner.And("Workflow \"WFWithForEachRecordsetNotentered\" has errors", ((string)(null)), table715, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with ForEach InRange Not entered")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithForEachInRangeNotEntered()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with ForEach InRange Not entered", new string[] {
                        "WorkflowExecution"});
#line 48
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 49
 testRunner.Given("I have a workflow \"WFWithForEachInRangeNotentered\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
 testRunner.And("\"WFWithForEachInRangeNotentered\" contains a Foreach \"ForEachTest1\" as \"InRange\" e" +
                    "xecutions \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.When("\"WFWithForEachInRangeNotentered\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
 testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table716 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table716.AddRow(new string[] {
                        "The FROM field is Required"});
            table716.AddRow(new string[] {
                        "Cannot execute a For Each with no content"});
#line 53
 testRunner.And("Workflow \"WFWithForEachInRangeNotentered\" has errors", ((string)(null)), table716, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with ForEach NumberOfExecutes Not entered")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithForEachNumberOfExecutesNotEntered()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with ForEach NumberOfExecutes Not entered", new string[] {
                        "WorkflowExecution"});
#line 59
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 60
 testRunner.Given("I have a workflow \"WFWithForEachNumberOfExecutesNotentered\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 61
 testRunner.And("\"WFWithForEachNumberOfExecutesNotentered\" contains a Foreach \"ForEachTest1\" as \"N" +
                    "umOfExecution\" executions \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.When("\"WFWithForEachNumberOfExecutesNotentered\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
 testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table717 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table717.AddRow(new string[] {
                        "Number of executes must be a whole number from 1 onwards."});
            table717.AddRow(new string[] {
                        "Cannot execute a For Each with no content"});
#line 64
 testRunner.And("Workflow \"WFWithForEachNumberOfExecutesNotentered\" has errors", ((string)(null)), table717, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with ForEach InCsv Not entered")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithForEachInCsvNotEntered()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with ForEach InCsv Not entered", new string[] {
                        "WorkflowExecution"});
#line 70
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 71
 testRunner.Given("I have a workflow \"WFWithForEachInCsvNotentered\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 72
 testRunner.And("\"WFWithForEachInCsvNotentered\" contains a Foreach \"ForEachTest1\" as \"InCSV\" execu" +
                    "tions \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
 testRunner.When("\"WFWithForEachInCsvNotentered\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 74
 testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table718 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table718.AddRow(new string[] {
                        "The CSV Field is Required"});
            table718.AddRow(new string[] {
                        "Cannot execute a For Each with no content"});
#line 75
 testRunner.And("Workflow \"WFWithForEachInCsvNotentered\" has errors", ((string)(null)), table718, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with ForEach which contains assign")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithForEachWhichContainsAssign()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with ForEach which contains assign", new string[] {
                        "WorkflowExecution"});
#line 81
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 82
      testRunner.Given("I have a workflow \"WFWithForEachContainingAssign\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table719 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table719.AddRow(new string[] {
                        "[[Warewolf]]",
                        "bob"});
#line 83
   testRunner.And("\"WFWithForEachContainingAssign\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table719, "And ");
#line 86
   testRunner.And("\"WFWithForEachContainingAssign\" contains a Foreach \"ForEachTest\" as \"NumOfExecuti" +
                    "on\" executions \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table720 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table720.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
#line 87
   testRunner.And("\"ForEachTest\" contains an Assign \"MyAssign\" as", ((string)(null)), table720, "And ");
#line 90
      testRunner.When("\"WFWithForEachContainingAssign\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 91
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table721 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table721.AddRow(new string[] {
                        "No. of Executes",
                        "2"});
#line 92
   testRunner.And("the \"ForEachTest\" in WorkFlow \"WFWithForEachContainingAssign\" debug inputs as", ((string)(null)), table721, "And ");
#line 95
      testRunner.And("the \"ForEachTest\" in WorkFlow \"WFWithForEachContainingAssign\" has  \"2\" nested chi" +
                    "ldren", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table722 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table722.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Test"});
#line 96
   testRunner.And("the \"MyAssign\" in step 1 for \"ForEachTest\" debug inputs as", ((string)(null)), table722, "And ");
#line hidden
            TechTalk.SpecFlow.Table table723 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table723.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Test"});
#line 99
   testRunner.And("the \"MyAssign\" in step 1 for \"ForEachTest\" debug outputs as", ((string)(null)), table723, "And ");
#line hidden
            TechTalk.SpecFlow.Table table724 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table724.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Test"});
#line 102
   testRunner.And("the \"MyAssign\" in step 2 for \"ForEachTest\" debug inputs as", ((string)(null)), table724, "And ");
#line hidden
            TechTalk.SpecFlow.Table table725 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table725.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = Test"});
#line 105
   testRunner.And("the \"MyAssign\" in step 2 for \"ForEachTest\" debug outputs as", ((string)(null)), table725, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Gather System Info returns values")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void GatherSystemInfoReturnsValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Gather System Info returns values", new string[] {
                        "WorkflowExecution"});
#line 110
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 111
 testRunner.Given("I have a workflow \"WorkflowWithGatherSystemInfo\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table726 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table726.AddRow(new string[] {
                        "[[ComputerName]]",
                        "Computer Name"});
            table726.AddRow(new string[] {
                        "[[OperatingSystemVersion]]",
                        "Operating System Version"});
            table726.AddRow(new string[] {
                        "[[VirtualMemoryAvailable]]",
                        "Virtual Memory Available (MB)"});
            table726.AddRow(new string[] {
                        "[[VirtualMemoryTotal]]",
                        "Virtual Memory Total (MB)"});
            table726.AddRow(new string[] {
                        "[[MacAddress]]",
                        "MAC Addresses"});
            table726.AddRow(new string[] {
                        "[[GateWayAddress]]",
                        "Defaut Gateway Addresses"});
            table726.AddRow(new string[] {
                        "[[DNSAddress]]",
                        "DNS Server Addresses"});
            table726.AddRow(new string[] {
                        "[[IPv4Address]]",
                        "IPv4 Addresses"});
            table726.AddRow(new string[] {
                        "[[IPv6Address]]",
                        "IPv6 Addresses"});
            table726.AddRow(new string[] {
                        "[[WarewolfMemory]]",
                        "Warewolf Memory Usage"});
            table726.AddRow(new string[] {
                        "[[WarewolfCPU]]",
                        "Warewolf Total CPU Usage (All Cores)"});
            table726.AddRow(new string[] {
                        "[[WarewolfServerVersion]]",
                        "Warewolf Server Version"});
#line 112
 testRunner.And("\"WorkflowWithGatherSystemInfo\" contains Gather System Info \"System info\" as", ((string)(null)), table726, "And ");
#line 126
  testRunner.When("\"WorkflowWithGatherSystemInfo\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 127
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table727 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table727.AddRow(new string[] {
                        "1",
                        "[[ComputerName]] =",
                        "Computer Name"});
            table727.AddRow(new string[] {
                        "2",
                        "[[OperatingSystemVersion]] =",
                        "Operating System Version"});
            table727.AddRow(new string[] {
                        "3",
                        "[[VirtualMemoryAvailable]] =",
                        "Virtual Memory Available (MB)"});
            table727.AddRow(new string[] {
                        "4",
                        "[[VirtualMemoryTotal]] =",
                        "Virtual Memory Total (MB)"});
            table727.AddRow(new string[] {
                        "5",
                        "[[MacAddress]] =",
                        "MAC Addresses"});
            table727.AddRow(new string[] {
                        "6",
                        "[[GateWayAddress]] =",
                        "Defaut Gateway Addresses"});
            table727.AddRow(new string[] {
                        "7",
                        "[[DNSAddress]] =",
                        "DNS Server Addresses"});
            table727.AddRow(new string[] {
                        "8",
                        "[[IPv4Address]] =",
                        "IPv4 Addresses"});
            table727.AddRow(new string[] {
                        "9",
                        "[[IPv6Address]] =",
                        "IPv6 Addresses"});
            table727.AddRow(new string[] {
                        "10",
                        "[[WarewolfMemory]] =",
                        "Warewolf Memory Usage"});
            table727.AddRow(new string[] {
                        "11",
                        "[[WarewolfCPU]] =",
                        "Warewolf Total CPU Usage (All Cores)"});
            table727.AddRow(new string[] {
                        "12",
                        "[[WarewolfServerVersion]] =",
                        "Warewolf Server Version"});
#line 128
   testRunner.And("the \"System info\" in WorkFlow \"WorkflowWithGatherSystemInfo\" debug inputs as", ((string)(null)), table727, "And ");
#line hidden
            TechTalk.SpecFlow.Table table728 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table728.AddRow(new string[] {
                        "1",
                        "[[ComputerName]] = String"});
            table728.AddRow(new string[] {
                        "2",
                        "[[OperatingSystemVersion]] = String"});
            table728.AddRow(new string[] {
                        "3",
                        "[[VirtualMemoryAvailable]] = String"});
            table728.AddRow(new string[] {
                        "4",
                        "[[VirtualMemoryTotal]] = String"});
            table728.AddRow(new string[] {
                        "5",
                        "[[MacAddress]] = String"});
            table728.AddRow(new string[] {
                        "6",
                        "[[GateWayAddress]] = String"});
            table728.AddRow(new string[] {
                        "7",
                        "[[DNSAddress]] = String"});
            table728.AddRow(new string[] {
                        "8",
                        "[[IPv4Address]] = String"});
            table728.AddRow(new string[] {
                        "9",
                        "[[IPv6Address]] = String"});
            table728.AddRow(new string[] {
                        "10",
                        "[[WarewolfMemory]] = String"});
            table728.AddRow(new string[] {
                        "11",
                        "[[WarewolfCPU]] = String"});
            table728.AddRow(new string[] {
                        "12",
                        "[[WarewolfServerVersion]] = String"});
#line 142
   testRunner.And("the \"System info\" in Workflow \"WorkflowWithGatherSystemInfo\" debug outputs as", ((string)(null)), table728, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with ForEach which contains Sequence")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithForEachWhichContainsSequence()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with ForEach which contains Sequence", new string[] {
                        "WorkflowExecution"});
#line 159
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 160
      testRunner.Given("I have a workflow \"WorkflowWithForEachContainingSeq\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table729 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table729.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "123"});
            table729.AddRow(new string[] {
                        "[[rec(1).b]]",
                        "456"});
#line 161
   testRunner.And("\"WorkflowWithForEachContainingSeq\" contains an Assign \"RecVal\" as", ((string)(null)), table729, "And ");
#line 165
   testRunner.And("\"WorkflowWithForEachContainingSeq\" contains a Foreach \"ForEachTest1\" as \"NumOfExe" +
                    "cution\" executions \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
   testRunner.And("\"ForEachTest1\" contains a Sequence \"Seq1\" as", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table730 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table730.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "None",
                        "",
                        "",
                        "Left"});
            table730.AddRow(new string[] {
                        "[[rec(1).b]]",
                        "None",
                        "",
                        "",
                        "Left"});
#line 167
   testRunner.And("\'Seq1\' in \"ForEachTest1\" contains Data Merge \"Data Merge\" into \"[[rec(1).c]]\" as", ((string)(null)), table730, "And ");
#line hidden
            TechTalk.SpecFlow.Table table731 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table731.AddRow(new string[] {
                        "[[rec(1).d]]",
                        "Date & Time"});
#line 171
    testRunner.And("\'Seq1\' in \"ForEachTest1\" contains Gather System Info \"System info\" as", ((string)(null)), table731, "And ");
#line 174
   testRunner.When("\"WorkflowWithForEachContainingSeq\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 175
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table732 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table732.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "123"});
            table732.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] =",
                        "456"});
#line 176
   testRunner.And("the \"RecVal\" in WorkFlow \"WorkflowWithForEachContainingSeq\" debug inputs as", ((string)(null)), table732, "And ");
#line hidden
            TechTalk.SpecFlow.Table table733 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table733.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]]  =  123"});
            table733.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]]  =  456"});
#line 180
   testRunner.And("the \"RecVal\" in Workflow \"WorkflowWithForEachContainingSeq\" debug outputs as", ((string)(null)), table733, "And ");
#line hidden
            TechTalk.SpecFlow.Table table734 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table734.AddRow(new string[] {
                        "No. of Executes",
                        "2"});
#line 184
    testRunner.And("the \"ForEachTest1\" in WorkFlow \"WorkflowWithForEachContainingSeq\" debug inputs as" +
                    "", ((string)(null)), table734, "And ");
#line 187
      testRunner.And("the \"ForEachTest1\" in WorkFlow \"WorkflowWithForEachContainingSeq\" has  \"2\" nested" +
                    " children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table735 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table735.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 123",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
            table735.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = 456",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
#line 188
   testRunner.And("the \"Data Merge\" in \'Seq1\' in step 1 for \"ForEachTest1\" debug inputs as", ((string)(null)), table735, "And ");
#line hidden
            TechTalk.SpecFlow.Table table736 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table736.AddRow(new string[] {
                        "[[rec(1).c]] = 123456"});
#line 192
    testRunner.And("the \"Data Merge\" in \'Seq1\' in step 1 for \"ForEachTest1\" debug outputs as", ((string)(null)), table736, "And ");
#line hidden
            TechTalk.SpecFlow.Table table737 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table737.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] =",
                        "Date & Time"});
#line 195
   testRunner.And("the \"System info\" in \'Seq1\' in step 1 for \"ForEachTest1\" debug inputs as", ((string)(null)), table737, "And ");
#line hidden
            TechTalk.SpecFlow.Table table738 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table738.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] = String"});
#line 198
   testRunner.And("the \"System info\" in \'Seq1\' in step 1 for \"ForEachTest1\" debug outputs as", ((string)(null)), table738, "And ");
#line hidden
            TechTalk.SpecFlow.Table table739 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table739.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 123",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
            table739.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = 456",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
#line 201
   testRunner.And("the \"Data Merge\" in \'Seq1\' in step 2 for \"ForEachTest1\" debug inputs as", ((string)(null)), table739, "And ");
#line hidden
            TechTalk.SpecFlow.Table table740 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table740.AddRow(new string[] {
                        "[[rec(1).c]] = 123456"});
#line 205
    testRunner.And("the \"Data Merge\" in \'Seq1\' in step 2 for \"ForEachTest1\" debug outputs as", ((string)(null)), table740, "And ");
#line hidden
            TechTalk.SpecFlow.Table table741 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table741.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] =",
                        "Date & Time"});
#line 208
   testRunner.And("the \"System info\" in \'Seq1\' in step 2 for \"ForEachTest1\" debug inputs as", ((string)(null)), table741, "And ");
#line hidden
            TechTalk.SpecFlow.Table table742 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table742.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] = String"});
#line 211
   testRunner.And("the \"System info\" in \'Seq1\' in step 2 for \"ForEachTest1\" debug outputs as", ((string)(null)), table742, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing ForEach in Rec with star which contains Sequence")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingForEachInRecWithStarWhichContainsSequence()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing ForEach in Rec with star which contains Sequence", new string[] {
                        "WorkflowExecution"});
#line 217
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 218
      testRunner.Given("I have a workflow \"WorkFWithForEachwithRecContainingSequence\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table743 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table743.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "123"});
            table743.AddRow(new string[] {
                        "[[rec(1).b]]",
                        "456"});
            table743.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "Test"});
            table743.AddRow(new string[] {
                        "[[rec(2).b]]",
                        "Warewolf"});
#line 219
   testRunner.And("\"WorkFWithForEachwithRecContainingSequence\" contains an Assign \"RecVal\" as", ((string)(null)), table743, "And ");
#line 225
   testRunner.And("\"WorkFWithForEachwithRecContainingSequence\" contains a Foreach \"ForEachTest1\" as " +
                    "\"InRecordset\" executions \"[[rec(*)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 226
   testRunner.And("\"ForEachTest1\" contains a Sequence \"Seq1\" as", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table744 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table744.AddRow(new string[] {
                        "[[rec(*).a]]",
                        "None",
                        "",
                        "",
                        "Left"});
            table744.AddRow(new string[] {
                        "[[rec(*).b]]",
                        "None",
                        "",
                        "",
                        "Left"});
#line 227
   testRunner.And("\'Seq1\' in \"ForEachTest1\" contains Data Merge \"Data Merge\" into \"[[rec(*).c]]\" as", ((string)(null)), table744, "And ");
#line hidden
            TechTalk.SpecFlow.Table table745 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table745.AddRow(new string[] {
                        "[[rec(*).d]]",
                        "Date & Time"});
#line 231
   testRunner.And("\'Seq1\' in \"ForEachTest1\" contains Gather System Info \"System info\" as", ((string)(null)), table745, "And ");
#line 234
   testRunner.When("\"WorkFWithForEachwithRecContainingSequence\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 235
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table746 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table746.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "123"});
            table746.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] =",
                        "456"});
            table746.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]] =",
                        "Test"});
            table746.AddRow(new string[] {
                        "4",
                        "[[rec(2).b]] =",
                        "Warewolf"});
#line 236
   testRunner.And("the \"RecVal\" in WorkFlow \"WorkFWithForEachwithRecContainingSequence\" debug inputs" +
                    " as", ((string)(null)), table746, "And ");
#line hidden
            TechTalk.SpecFlow.Table table747 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table747.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]]  =  123"});
            table747.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]]  =  456"});
            table747.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]] =  Test"});
            table747.AddRow(new string[] {
                        "4",
                        "[[rec(2).b]] =  Warewolf"});
#line 242
   testRunner.And("the \"RecVal\" in Workflow \"WorkFWithForEachwithRecContainingSequence\" debug output" +
                    "s as", ((string)(null)), table747, "And ");
#line hidden
            TechTalk.SpecFlow.Table table748 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Recordset"});
            table748.AddRow(new string[] {
                        "* in Recordset",
                        ""});
            table748.AddRow(new string[] {
                        "",
                        "[[rec(1)]] ="});
            table748.AddRow(new string[] {
                        "",
                        "[[rec(2)]] ="});
#line 248
   testRunner.And("the \"ForEachTest1\" in WorkFlow \"WorkFWithForEachwithRecContainingSequence\" debug " +
                    "inputs as", ((string)(null)), table748, "And ");
#line 253
      testRunner.And("the \"ForEachTest1\" in WorkFlow \"WorkFWithForEachwithRecContainingSequence\" has  \"" +
                    "2\" nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table749 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table749.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 123",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
            table749.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = 456",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
#line 254
   testRunner.And("the \"Data Merge\" in \'Seq1\' in step 1 for \"ForEachTest1\" debug inputs as", ((string)(null)), table749, "And ");
#line hidden
            TechTalk.SpecFlow.Table table750 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table750.AddRow(new string[] {
                        "[[rec(1).c]] = 123456"});
#line 258
   testRunner.And("the \"Data Merge\" in \'Seq1\' in step 1 for \"ForEachTest1\" debug outputs as", ((string)(null)), table750, "And ");
#line hidden
            TechTalk.SpecFlow.Table table751 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table751.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] =",
                        "Date & Time"});
#line 261
       testRunner.And("the \"System info\" in \'Seq1\' in step 1 for \"ForEachTest1\" debug inputs as", ((string)(null)), table751, "And ");
#line hidden
            TechTalk.SpecFlow.Table table752 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table752.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] = String"});
#line 264
    testRunner.And("the \"System info\" in \'Seq1\' in step 1 for \"ForEachTest1\" debug outputs as", ((string)(null)), table752, "And ");
#line hidden
            TechTalk.SpecFlow.Table table753 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table753.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = Test",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
            table753.AddRow(new string[] {
                        "2",
                        "[[rec(2).b]] = Warewolf",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
#line 267
   testRunner.And("the \"Data Merge\" in \'Seq1\' in step 2 for \"ForEachTest1\" debug inputs as", ((string)(null)), table753, "And ");
#line hidden
            TechTalk.SpecFlow.Table table754 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table754.AddRow(new string[] {
                        "[[rec(2).c]] = TestWarewolf"});
#line 271
   testRunner.And("the \"Data Merge\" in \'Seq1\' in step 2 for \"ForEachTest1\" debug outputs as", ((string)(null)), table754, "And ");
#line hidden
            TechTalk.SpecFlow.Table table755 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table755.AddRow(new string[] {
                        "1",
                        "[[rec(2).d]] =",
                        "Date & Time"});
#line 274
      testRunner.And("the \"System info\" in \'Seq1\' in step 2 for \"ForEachTest1\" debug inputs as", ((string)(null)), table755, "And ");
#line hidden
            TechTalk.SpecFlow.Table table756 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table756.AddRow(new string[] {
                        "1",
                        "[[rec(2).d]] = String"});
#line 277
    testRunner.And("the \"System info\" in \'Seq1\' in step 2 for \"ForEachTest1\" debug outputs as", ((string)(null)), table756, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with ForEach in Rec with star which contains Dot Net DLL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NestedForEachExecution")]
        public virtual void WorkflowWithForEachInRecWithStarWhichContainsDotNetDLL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with ForEach in Rec with star which contains Dot Net DLL", new string[] {
                        "NestedForEachExecution"});
#line 282
 this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 283
      testRunner.Given("I have a workflow \"WFWithForEachContainingDotNetDLL\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table757 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table757.AddRow(new string[] {
                        "[[rec().number]]",
                        "1"});
            table757.AddRow(new string[] {
                        "[[rec().number]]",
                        "2"});
            table757.AddRow(new string[] {
                        "[[rec().number]]",
                        "3"});
            table757.AddRow(new string[] {
                        "[[rec().number]]",
                        "4"});
#line 284
    testRunner.And("\"WFWithForEachContainingDotNetDLL\" contains an Assign \"RecVal\" as", ((string)(null)), table757, "And ");
#line 290
   testRunner.And("\"WFWithForEachContainingDotNetDLL\" contains a Foreach \"ForEachTest\" as \"InRecords" +
                    "et\" executions \"[[rec(*)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table758 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "ClassName",
                        "ObjectName",
                        "Action",
                        "ActionOutputVaribale"});
            table758.AddRow(new string[] {
                        "New DotNet Plugin Source",
                        "TestingDotnetDllCascading.Human",
                        "[[@human]]",
                        "BuildInts",
                        "[[rec1().num]]"});
#line 291
   testRunner.And("\"ForEachTest\" contains an DotNet DLL \"DotNetService\" as", ((string)(null)), table758, "And ");
#line hidden
            TechTalk.SpecFlow.Table table759 = new TechTalk.SpecFlow.Table(new string[] {
                        "parameterName",
                        "value",
                        "type"});
#line 294
   testRunner.And("\"DotNetService\" constructorinputs 0 with inputs as", ((string)(null)), table759, "And ");
#line 297
      testRunner.When("\"WFWithForEachContainingDotNetDLL\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 298
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table760 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table760.AddRow(new string[] {
                        "1",
                        "[[rec().number]] =",
                        "1"});
            table760.AddRow(new string[] {
                        "2",
                        "[[rec().number]] =",
                        "2"});
            table760.AddRow(new string[] {
                        "3",
                        "[[rec().number]] =",
                        "3"});
            table760.AddRow(new string[] {
                        "4",
                        "[[rec().number]] =",
                        "4"});
#line 299
    testRunner.And("the \"RecVal\" in WorkFlow \"WFWithForEachContainingDotNetDLL\" debug inputs as", ((string)(null)), table760, "And ");
#line 305
      testRunner.And("the \"ForEachTest\" in WorkFlow \"WFWithForEachContainingDotNetDLL\" has  \"4\" nested " +
                    "children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table761 = new TechTalk.SpecFlow.Table(new string[] {
                        "label",
                        "Variable",
                        "value",
                        "operater"});
            table761.AddRow(new string[] {
                        "a",
                        "[[rec(1).number]]",
                        "1",
                        "="});
            table761.AddRow(new string[] {
                        "b",
                        "[[rec(1).number]]",
                        "1",
                        "="});
            table761.AddRow(new string[] {
                        "c",
                        "[[rec(1).number]]",
                        "1",
                        "="});
            table761.AddRow(new string[] {
                        "d",
                        "[[rec(1).number]]",
                        "1",
                        "="});
#line 306
   testRunner.And("the dotnetdll \"BuildInts\" in \'DotNet DLL\' in step 1 for \"ForEachTest\" debug input" +
                    "s as", ((string)(null)), table761, "And ");
#line hidden
            TechTalk.SpecFlow.Table table762 = new TechTalk.SpecFlow.Table(new string[] {
                        "label",
                        "Variable",
                        "value",
                        "operater"});
            table762.AddRow(new string[] {
                        "a",
                        "[[rec(2).number]]",
                        "2",
                        "="});
            table762.AddRow(new string[] {
                        "b",
                        "[[rec(2).number]]",
                        "2",
                        "="});
            table762.AddRow(new string[] {
                        "c",
                        "[[rec(2).number]]",
                        "2",
                        "="});
            table762.AddRow(new string[] {
                        "d",
                        "[[rec(2).number]]",
                        "2",
                        "="});
#line 312
   testRunner.And("the dotnetdll \"BuildInts\" in \'DotNet DLL\' in step 2 for \"ForEachTest\" debug input" +
                    "s as", ((string)(null)), table762, "And ");
#line hidden
            TechTalk.SpecFlow.Table table763 = new TechTalk.SpecFlow.Table(new string[] {
                        "label",
                        "Variable",
                        "value",
                        "operater"});
            table763.AddRow(new string[] {
                        "a",
                        "[[rec(3).number]]",
                        "3",
                        "="});
            table763.AddRow(new string[] {
                        "b",
                        "[[rec(3).number]]",
                        "3",
                        "="});
            table763.AddRow(new string[] {
                        "c",
                        "[[rec(3).number]]",
                        "3",
                        "="});
            table763.AddRow(new string[] {
                        "d",
                        "[[rec(3).number]]",
                        "3",
                        "="});
#line 318
  testRunner.And("the dotnetdll \"BuildInts\" in \'DotNet DLL\' in step 3 for \"ForEachTest\" debug input" +
                    "s as", ((string)(null)), table763, "And ");
#line hidden
            TechTalk.SpecFlow.Table table764 = new TechTalk.SpecFlow.Table(new string[] {
                        "label",
                        "Variable",
                        "value",
                        "operater"});
            table764.AddRow(new string[] {
                        "a",
                        "[[rec(4).number]]",
                        "4",
                        "="});
            table764.AddRow(new string[] {
                        "b",
                        "[[rec(4).number]]",
                        "4",
                        "="});
            table764.AddRow(new string[] {
                        "c",
                        "[[rec(4).number]]",
                        "4",
                        "="});
            table764.AddRow(new string[] {
                        "d",
                        "[[rec(4).number]]",
                        "4",
                        "="});
#line 324
  testRunner.And("the dotnetdll \"BuildInts\" in \'DotNet DLL\' in step 4 for \"ForEachTest\" debug input" +
                    "s as", ((string)(null)), table764, "And ");
#line hidden
            TechTalk.SpecFlow.Table table765 = new TechTalk.SpecFlow.Table(new string[] {
                        "label",
                        "Variable",
                        "value",
                        "operater"});
            table765.AddRow(new string[] {
                        "",
                        "[[rec1(4).num]]",
                        "1",
                        "="});
#line 330
 testRunner.And("the dotnetdll \"BuildInts\" in \"DotNet DLL\" in step 1 for \"ForEachTest\" debug outpu" +
                    "t as", ((string)(null)), table765, "And ");
#line hidden
            TechTalk.SpecFlow.Table table766 = new TechTalk.SpecFlow.Table(new string[] {
                        "label",
                        "Variable",
                        "value",
                        "operater"});
            table766.AddRow(new string[] {
                        "",
                        "[[rec1(8).num]]",
                        "2",
                        "="});
#line 333
    testRunner.And("the dotnetdll \"BuildInts\" in \"DotNet DLL\" in step 2 for \"ForEachTest\" debug outpu" +
                    "t as", ((string)(null)), table766, "And ");
#line hidden
            TechTalk.SpecFlow.Table table767 = new TechTalk.SpecFlow.Table(new string[] {
                        "label",
                        "Variable",
                        "value",
                        "operater"});
            table767.AddRow(new string[] {
                        "",
                        "[[rec1(12).num]]",
                        "3",
                        "="});
#line 336
    testRunner.And("the dotnetdll \"BuildInts\" in \"DotNet DLL\" in step 3 for \"ForEachTest\" debug outpu" +
                    "t as", ((string)(null)), table767, "And ");
#line hidden
            TechTalk.SpecFlow.Table table768 = new TechTalk.SpecFlow.Table(new string[] {
                        "label",
                        "Variable",
                        "value",
                        "operater"});
            table768.AddRow(new string[] {
                        "",
                        "[[rec1(16).num]]",
                        "4",
                        "="});
#line 339
    testRunner.And("the dotnetdll \"BuildInts\" in \"DotNet DLL\" in step 4 for \"ForEachTest\" debug outpu" +
                    "t as", ((string)(null)), table768, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing 2 ForEach\"s inside a ForEach which contains Assign only")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void Executing2ForEachsInsideAForEachWhichContainsAssignOnly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing 2 ForEach\"s inside a ForEach which contains Assign only", new string[] {
                        "WorkflowExecution"});
#line 347
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 348
      testRunner.Given("I have a workflow \"WFContainsForEachInsideforEach\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 349
   testRunner.And("\"WFContainsForEachInsideforEach\" contains a Foreach \"ForEachTest1\" as \"NumOfExecu" +
                    "tion\" executions \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 350
   testRunner.And("\"ForEachTest1\" contains a Foreach \"ForEachTest2\" as \"NumOfExecution\" executions \"" +
                    "2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 351
   testRunner.And("\"ForEachTest2\" contains a Foreach \"ForEachTest3\" as \"NumOfExecution\" executions \"" +
                    "2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table769 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table769.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "123"});
#line 352
   testRunner.And("\"ForEachTest3\" contains an Assign \"Testingoutput\" as", ((string)(null)), table769, "And ");
#line 355
   testRunner.When("\"WFContainsForEachInsideforEach\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 356
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table770 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table770.AddRow(new string[] {
                        "No. of Executes",
                        "2"});
#line 357
   testRunner.And("the \"ForEachTest1\" in WorkFlow \"WFContainsForEachInsideforEach\" debug inputs as", ((string)(null)), table770, "And ");
#line 360
   testRunner.And("the \"ForEachTest1\" in WorkFlow \"WFContainsForEachInsideforEach\" has  \"2\" nested c" +
                    "hildren", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table771 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table771.AddRow(new string[] {
                        "No. of Executes",
                        "2"});
#line 361
      testRunner.And("the \"ForEachTest2\" in step 1 for \"ForEachTest1\" debug inputs as", ((string)(null)), table771, "And ");
#line 364
      testRunner.And("the \"ForEachTest2\" in WorkFlow \"ForEachTest1\" has  \"2\" nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table772 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table772.AddRow(new string[] {
                        "No. of Executes",
                        "2"});
#line 365
   testRunner.And("the \"ForEachTest3\" in step 1 for \"ForEachTest2\" debug inputs as", ((string)(null)), table772, "And ");
#line 368
   testRunner.And("the \"ForEachTest3\" in WorkFlow \"ForEachTest2\" has  \"2\" nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table773 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table773.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "123"});
#line 369
   testRunner.And("the \"Testingoutput\" in step 1 for \"ForEachTest3\" debug inputs as", ((string)(null)), table773, "And ");
#line hidden
            TechTalk.SpecFlow.Table table774 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table774.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]]  =  123"});
#line 372
   testRunner.And("the \"Testingoutput\" in step 1 for \"ForEachTest3\" debug outputs as", ((string)(null)), table774, "And ");
#line hidden
            TechTalk.SpecFlow.Table table775 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table775.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 123",
                        "123"});
#line 375
   testRunner.And("the \"Testingoutput\" in step 2 for \"ForEachTest3\" debug inputs as", ((string)(null)), table775, "And ");
#line hidden
            TechTalk.SpecFlow.Table table776 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table776.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 123"});
#line 378
   testRunner.And("the \"Testingoutput\" in step 2 for \"ForEachTest3\" debug outputs as", ((string)(null)), table776, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing 2 ForEach\"s inside a ForEach which contains Assign only Large Execution" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NestedForEachExecution")]
        public virtual void Executing2ForEachsInsideAForEachWhichContainsAssignOnlyLargeExecution()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing 2 ForEach\"s inside a ForEach which contains Assign only Large Execution" +
                    "", new string[] {
                        "NestedForEachExecution"});
#line 383
  this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 384
      testRunner.Given("I have a workflow \"WFForEachInsideforEachLargeTenFifty\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 385
   testRunner.And("\"WFForEachInsideforEachLargeTenFifty\" contains a Foreach \"ForEachTest1\" as \"NumOf" +
                    "Execution\" executions \"10\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 386
   testRunner.And("\"ForEachTest1\" contains a Foreach \"ForEachTest2\" as \"NumOfExecution\" executions \"" +
                    "50\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table777 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table777.AddRow(new string[] {
                        "[[rec().a]]",
                        "123asda"});
            table777.AddRow(new string[] {
                        "[[rec().b]]",
                        "aaaaa"});
            table777.AddRow(new string[] {
                        "[[rec().c]]",
                        "rrrrrrr"});
            table777.AddRow(new string[] {
                        "[[rec().d]]",
                        "123asda"});
            table777.AddRow(new string[] {
                        "[[rec().e]]",
                        "sdfsdrf45456"});
            table777.AddRow(new string[] {
                        "[[rec().f]]",
                        "cvbcb1123"});
            table777.AddRow(new string[] {
                        "[[rec().g]]",
                        "aasdww2323"});
            table777.AddRow(new string[] {
                        "[[rec().h]]",
                        "oooooo9999"});
            table777.AddRow(new string[] {
                        "[[rec().i]]",
                        "sdfsdf3434"});
            table777.AddRow(new string[] {
                        "[[rec().j]]",
                        "asda123123"});
            table777.AddRow(new string[] {
                        "[[rec().k]]",
                        "sssdff444"});
            table777.AddRow(new string[] {
                        "[[rec().l]]",
                        "asdvvvbbg3333"});
            table777.AddRow(new string[] {
                        "[[rec().m]]",
                        "aasdasd"});
            table777.AddRow(new string[] {
                        "[[rec().n]]",
                        "aasdd222"});
            table777.AddRow(new string[] {
                        "[[rec().o]]",
                        "22323asda"});
#line 387
   testRunner.And("\"ForEachTest2\" contains an Assign \"Testingoutput\" as", ((string)(null)), table777, "And ");
#line 404
   testRunner.When("\"WFForEachInsideforEachLargeTenFifty\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 405
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table778 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table778.AddRow(new string[] {
                        "No. of Executes",
                        "10"});
#line 406
   testRunner.And("the \"ForEachTest1\" in WorkFlow \"WFForEachInsideforEachLargeTenFifty\" debug inputs" +
                    " as", ((string)(null)), table778, "And ");
#line 409
   testRunner.And("the \"ForEachTest1\" in WorkFlow \"WFForEachInsideforEachLargeTenFifty\" has at least" +
                    " \"5\" nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table779 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table779.AddRow(new string[] {
                        "No. of Executes",
                        "50"});
#line 410
      testRunner.And("the \"ForEachTest2\" in step 1 for \"ForEachTest1\" debug inputs as", ((string)(null)), table779, "And ");
#line 413
      testRunner.And("the \"ForEachTest2\" in WorkFlow \"ForEachTest1\" has  \"50\" nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table780 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table780.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "123asda"});
            table780.AddRow(new string[] {
                        "2",
                        "[[rec().b]] =",
                        "aaaaa"});
            table780.AddRow(new string[] {
                        "3",
                        "[[rec().c]] =",
                        "rrrrrrr"});
            table780.AddRow(new string[] {
                        "4",
                        "[[rec().d]] =",
                        "123asda"});
            table780.AddRow(new string[] {
                        "5",
                        "[[rec().e]] =",
                        "sdfsdrf45456"});
            table780.AddRow(new string[] {
                        "6",
                        "[[rec().f]] =",
                        "cvbcb1123"});
            table780.AddRow(new string[] {
                        "7",
                        "[[rec().g]] =",
                        "aasdww2323"});
            table780.AddRow(new string[] {
                        "8",
                        "[[rec().h]] =",
                        "oooooo9999"});
            table780.AddRow(new string[] {
                        "9",
                        "[[rec().i]] =",
                        "sdfsdf3434"});
            table780.AddRow(new string[] {
                        "10",
                        "[[rec().j]] =",
                        "asda123123"});
            table780.AddRow(new string[] {
                        "11",
                        "[[rec().k]] =",
                        "sssdff444"});
            table780.AddRow(new string[] {
                        "12",
                        "[[rec().l]] =",
                        "asdvvvbbg3333"});
            table780.AddRow(new string[] {
                        "13",
                        "[[rec().m]] =",
                        "aasdasd"});
            table780.AddRow(new string[] {
                        "14",
                        "[[rec().n]] =",
                        "aasdd222"});
            table780.AddRow(new string[] {
                        "15",
                        "[[rec().o]] =",
                        "22323asda"});
#line 414
   testRunner.And("the \"Testingoutput\" in step 50 for \"ForEachTest2\" debug inputs as", ((string)(null)), table780, "And ");
#line hidden
            TechTalk.SpecFlow.Table table781 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table781.AddRow(new string[] {
                        "1",
                        "[[rec(50).a]] = 123asda"});
            table781.AddRow(new string[] {
                        "2",
                        "[[rec(50).b]] = aaaaa"});
            table781.AddRow(new string[] {
                        "3",
                        "[[rec(50).c]] = rrrrrrr"});
            table781.AddRow(new string[] {
                        "4",
                        "[[rec(50).d]] = 123asda"});
            table781.AddRow(new string[] {
                        "5",
                        "[[rec(50).e]] = sdfsdrf45456"});
            table781.AddRow(new string[] {
                        "6",
                        "[[rec(50).f]] = cvbcb1123"});
            table781.AddRow(new string[] {
                        "7",
                        "[[rec(50).g]] = aasdww2323"});
            table781.AddRow(new string[] {
                        "8",
                        "[[rec(50).h]] = oooooo9999"});
            table781.AddRow(new string[] {
                        "9",
                        "[[rec(50).i]] = sdfsdf3434"});
            table781.AddRow(new string[] {
                        "10",
                        "[[rec(50).j]] = asda123123"});
            table781.AddRow(new string[] {
                        "11",
                        "[[rec(50).k]] = sssdff444"});
            table781.AddRow(new string[] {
                        "12",
                        "[[rec(50).l]] = asdvvvbbg3333"});
            table781.AddRow(new string[] {
                        "13",
                        "[[rec(50).m]] = aasdasd"});
            table781.AddRow(new string[] {
                        "14",
                        "[[rec(50).n]] = aasdd222"});
            table781.AddRow(new string[] {
                        "15",
                        "[[rec(50).o]] = 22323asda"});
#line 431
   testRunner.And("the \"Testingoutput\" in step 50 for \"ForEachTest2\" debug outputs as", ((string)(null)), table781, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow Assign and Find Record index tool with two variables in reult field expe" +
            "ct error")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowAssignAndFindRecordIndexToolWithTwoVariablesInReultFieldExpectError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow Assign and Find Record index tool with two variables in reult field expe" +
                    "ct error", new string[] {
                        "WorkflowExecution"});
#line 450
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 451
      testRunner.Given("I have a workflow \"WFWithAssignandFindRecordindexy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table782 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "variable",
                        "value"});
            table782.AddRow(new string[] {
                        "#",
                        "[[rec(1).a]]",
                        "Warewolf"});
#line 452
   testRunner.And("\"WFWithAssignandFindRecordindexy\" contains an Assign \"Record\" as", ((string)(null)), table782, "And ");
#line hidden
            TechTalk.SpecFlow.Table table783 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "In Field",
                        "#",
                        "Match Type",
                        "Match",
                        "Require All Matches To Be True",
                        "Require All Fields To Match"});
            table783.AddRow(new string[] {
                        "#",
                        "[[rec().a]]",
                        "1",
                        "=",
                        "Warewolf",
                        "YES",
                        "NO"});
#line 455
   testRunner.And("\"WFWithAssignandFindRecordindexy\" contains Find Record Index \"FindRecord0\" into r" +
                    "esult as \"[[a]][[b]]\"", ((string)(null)), table783, "And ");
#line 458
   testRunner.When("\"WFWithAssignandFindRecordindexy\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 459
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table784 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table784.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "Warewolf"});
#line 460
   testRunner.And("the \"Record\" in WorkFlow \"WFWithAssignandFindRecordindexy\" debug inputs as", ((string)(null)), table784, "And ");
#line hidden
            TechTalk.SpecFlow.Table table785 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table785.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]]         =  Warewolf"});
#line 463
   testRunner.And("the \"Record\" in Workflow \"WFWithAssignandFindRecordindexy\" debug outputs as", ((string)(null)), table785, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow Assign and Find Record index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowAssignAndFindRecordIndex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow Assign and Find Record index", new string[] {
                        "WorkflowExecution"});
#line 469
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 470
      testRunner.Given("I have a workflow \"WFWithAssignandFindRecordindexTool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table786 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "variable",
                        "value"});
            table786.AddRow(new string[] {
                        "#",
                        "[[rec(1).a]]",
                        "Warewolf"});
#line 471
   testRunner.And("\"WFWithAssignandFindRecordindexTool\" contains an Assign \"Record\" as", ((string)(null)), table786, "And ");
#line hidden
            TechTalk.SpecFlow.Table table787 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "In Field",
                        "#",
                        "Match Type",
                        "Match",
                        "Require All Matches To Be True",
                        "Require All Fields To Match"});
            table787.AddRow(new string[] {
                        "#",
                        "[[rec().a]]",
                        "1",
                        "=",
                        "Warewolf",
                        "YES",
                        "NO"});
#line 474
   testRunner.And("\"WFWithAssignandFindRecordindexTool\" contains Find Record Index \"FindRecord0\" int" +
                    "o result as \"[[a]]*]]\"", ((string)(null)), table787, "And ");
#line 477
   testRunner.When("\"WFWithAssignandFindRecordindexTool\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 478
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table788 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table788.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "Warewolf"});
#line 479
   testRunner.And("the \"Record\" in WorkFlow \"WFWithAssignandFindRecordindexTool\" debug inputs as", ((string)(null)), table788, "And ");
#line hidden
            TechTalk.SpecFlow.Table table789 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table789.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]]         =  Warewolf"});
#line 482
   testRunner.And("the \"Record\" in Workflow \"WFWithAssignandFindRecordindexTool\" debug outputs as", ((string)(null)), table789, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow Assign and Find Record index expected not greater than")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowAssignAndFindRecordIndexExpectedNotGreaterThan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow Assign and Find Record index expected not greater than", new string[] {
                        "WorkflowExecution"});
#line 487
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 488
      testRunner.Given("I have a workflow \"WFWithAssignandFindRecordindexTool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table790 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "variable",
                        "value"});
            table790.AddRow(new string[] {
                        "#",
                        "[[rec(1).Name]]",
                        "1Bob"});
#line 489
   testRunner.And("\"WFWithAssignandFindRecordindexTool\" contains an Assign \"Record\" as", ((string)(null)), table790, "And ");
#line hidden
            TechTalk.SpecFlow.Table table791 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "In Field",
                        "#",
                        "Match Type",
                        "Match",
                        "Require All Matches To Be True",
                        "Require All Fields To Match"});
            table791.AddRow(new string[] {
                        "#",
                        "[[rec().Name]]",
                        "1",
                        ">",
                        "1",
                        "YES",
                        "NO"});
#line 492
   testRunner.And("\"WFWithAssignandFindRecordindexTool\" contains Find Record Index \"FindRecord0\" int" +
                    "o result as \"[[asdf]]\"", ((string)(null)), table791, "And ");
#line 495
   testRunner.When("\"WFWithAssignandFindRecordindexTool\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 496
   testRunner.Then("the workflow execution has \"\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table792 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table792.AddRow(new string[] {
                        "1",
                        "[[rec(1).Name]] =",
                        "1Bob"});
#line 497
   testRunner.And("the \"Record\" in WorkFlow \"WFWithAssignandFindRecordindexTool\" debug inputs as", ((string)(null)), table792, "And ");
#line hidden
            TechTalk.SpecFlow.Table table793 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table793.AddRow(new string[] {
                        "1",
                        "[[rec(1).Name]]         =  1Bob"});
#line 500
   testRunner.And("the \"Record\" in Workflow \"WFWithAssignandFindRecordindexTool\" debug outputs as", ((string)(null)), table793, "And ");
#line hidden
            TechTalk.SpecFlow.Table table794 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table794.AddRow(new string[] {
                        "[[asdf]]         =  -1"});
#line 503
   testRunner.And("the \"FindRecord0\" in Workflow \"WFWithAssignandFindRecordindexTool\" debug outputs " +
                    "as", ((string)(null)), table794, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow Assign and Find Record index expected not less than")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowAssignAndFindRecordIndexExpectedNotLessThan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow Assign and Find Record index expected not less than", new string[] {
                        "WorkflowExecution"});
#line 508
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 509
      testRunner.Given("I have a workflow \"WFWithAssignandFindRecordindexTool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table795 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "variable",
                        "value"});
            table795.AddRow(new string[] {
                        "#",
                        "[[rec(1).Name]]",
                        "1Bob"});
#line 510
   testRunner.And("\"WFWithAssignandFindRecordindexTool\" contains an Assign \"Record\" as", ((string)(null)), table795, "And ");
#line hidden
            TechTalk.SpecFlow.Table table796 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "In Field",
                        "#",
                        "Match Type",
                        "Match",
                        "Require All Matches To Be True",
                        "Require All Fields To Match"});
            table796.AddRow(new string[] {
                        "#",
                        "[[rec().Name]]",
                        "1",
                        "<",
                        "1",
                        "YES",
                        "NO"});
#line 513
   testRunner.And("\"WFWithAssignandFindRecordindexTool\" contains Find Record Index \"FindRecord0\" int" +
                    "o result as \"[[asdf]]\"", ((string)(null)), table796, "And ");
#line 516
   testRunner.When("\"WFWithAssignandFindRecordindexTool\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 517
   testRunner.Then("the workflow execution has \"\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table797 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table797.AddRow(new string[] {
                        "1",
                        "[[rec(1).Name]] =",
                        "1Bob"});
#line 518
   testRunner.And("the \"Record\" in WorkFlow \"WFWithAssignandFindRecordindexTool\" debug inputs as", ((string)(null)), table797, "And ");
#line hidden
            TechTalk.SpecFlow.Table table798 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table798.AddRow(new string[] {
                        "1",
                        "[[rec(1).Name]]         =  1Bob"});
#line 521
   testRunner.And("the \"Record\" in Workflow \"WFWithAssignandFindRecordindexTool\" debug outputs as", ((string)(null)), table798, "And ");
#line hidden
            TechTalk.SpecFlow.Table table799 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table799.AddRow(new string[] {
                        "[[asdf]]         =  -1"});
#line 524
   testRunner.And("the \"FindRecord0\" in Workflow \"WFWithAssignandFindRecordindexTool\" debug outputs " +
                    "as", ((string)(null)), table799, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow Assign and Find Record index expected is greater than")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowAssignAndFindRecordIndexExpectedIsGreaterThan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow Assign and Find Record index expected is greater than", new string[] {
                        "WorkflowExecution"});
#line 529
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 530
      testRunner.Given("I have a workflow \"WFWithAssignandFindRecordindexTool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table800 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table800.AddRow(new string[] {
                        "[[rec().Name]]",
                        "1Bob"});
            table800.AddRow(new string[] {
                        "[[rec().Age]]",
                        "2"});
            table800.AddRow(new string[] {
                        "[[rec().Name]]",
                        "2Bob"});
            table800.AddRow(new string[] {
                        "[[rec().Age]]",
                        "23"});
#line 531
   testRunner.And("\"WFWithAssignandFindRecordindexTool\" contains an Assign \"Record\" as", ((string)(null)), table800, "And ");
#line hidden
            TechTalk.SpecFlow.Table table801 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "In Field",
                        "#",
                        "Match Type",
                        "Match",
                        "Require All Matches To Be True",
                        "Require All Fields To Match"});
            table801.AddRow(new string[] {
                        "#",
                        "[[rec().Name]],[[rec().Age]]",
                        "1",
                        ">",
                        "2",
                        "NO",
                        "NO"});
#line 537
   testRunner.And("\"WFWithAssignandFindRecordindexTool\" contains Find Record Index \"FindRecord0\" int" +
                    "o result as \"[[expectedResult]]\"", ((string)(null)), table801, "And ");
#line 540
   testRunner.When("\"WFWithAssignandFindRecordindexTool\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 541
   testRunner.Then("the workflow execution has \"\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table802 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table802.AddRow(new string[] {
                        "[[expectedResult]]         =  2"});
#line 542
   testRunner.And("the \"FindRecord0\" in Workflow \"WFWithAssignandFindRecordindexTool\" debug outputs " +
                    "as", ((string)(null)), table802, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void TestingLengthWithTwoVariablesInResultField(string no, string variable, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "WorkflowExecution"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Length with two variables in Result field", @__tags);
#line 547
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 548
      testRunner.Given("I have a workflow \"WorkflowforLength\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table803 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table803.AddRow(new string[] {
                        "[[rec().a]]",
                        "1213"});
            table803.AddRow(new string[] {
                        "[[rec().a]]",
                        "4561"});
#line 549
      testRunner.And("\"WorkflowforLength\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table803, "And ");
#line 553
   testRunner.And(string.Format("\"WorkflowforLength\" contains Length \"Len\" on \"[[rec(*)]]\" into \"{0}\"", variable), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 554
   testRunner.When("\"WorkflowforLength\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 555
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table804 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table804.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "1213"});
            table804.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "4561"});
#line 556
      testRunner.And("the \"Rec To Convert\" in WorkFlow \"WorkflowforLength\" debug inputs as", ((string)(null)), table804, "And ");
#line hidden
            TechTalk.SpecFlow.Table table805 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table805.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 1213"});
            table805.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 4561"});
#line 560
   testRunner.And("the \"Rec To Convert\" in Workflow \"WorkflowforLength\" debug outputs as", ((string)(null)), table805, "And ");
#line hidden
            TechTalk.SpecFlow.Table table806 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table806.AddRow(new string[] {
                        "[[rec(1).a]] = 1213"});
            table806.AddRow(new string[] {
                        "[[rec(2).a]] = 4561"});
#line 564
   testRunner.And("the \"Len\" in WorkFlow \"WorkflowforLength\" debug inputs as", ((string)(null)), table806, "And ");
#line hidden
            TechTalk.SpecFlow.Table table807 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table807.AddRow(new string[] {
                        ""});
#line 568
   testRunner.And("the \"Len\" in Workflow \"WorkflowforLength\" debug outputs as", ((string)(null)), table807, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[length]][[a]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_1()
        {
#line 547
this.TestingLengthWithTwoVariablesInResultField("1", "[[length]][[a]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[a]]*]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_2()
        {
#line 547
this.TestingLengthWithTwoVariablesInResultField("2", "[[a]]*]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[var@]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_3()
        {
#line 547
this.TestingLengthWithTwoVariablesInResultField("3", "[[var@]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[var]]00]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_4()
        {
#line 547
this.TestingLengthWithTwoVariablesInResultField("4", "[[var]]00]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[(1var)]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_5()
        {
#line 547
this.TestingLengthWithTwoVariablesInResultField("5", "[[(1var)]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[var[[a]]]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_6()
        {
#line 547
this.TestingLengthWithTwoVariablesInResultField("6", "[[var[[a]]]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[var.a]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_7()
        {
#line 547
this.TestingLengthWithTwoVariablesInResultField("7", "[[var.a]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[#var]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_8()
        {
#line 547
this.TestingLengthWithTwoVariablesInResultField("8", "[[#var]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[var 1]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_9()
        {
#line 547
this.TestingLengthWithTwoVariablesInResultField("9", "[[var 1]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[rec(1).[[rec().1]]]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_10()
        {
#line 547
this.TestingLengthWithTwoVariablesInResultField("10", "[[rec(1).[[rec().1]]]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 11")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "11")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "11")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[rec(@).a]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_11()
        {
#line 547
this.TestingLengthWithTwoVariablesInResultField("11", "[[rec(@).a]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 12")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "12")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "12")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[rec\"()\".a]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_12()
        {
#line 547
this.TestingLengthWithTwoVariablesInResultField("12", "[[rec\"()\".a]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 13")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "13")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "13")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[rec([[[[b]]]]).a]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_13()
        {
#line 547
this.TestingLengthWithTwoVariablesInResultField("13", "[[rec([[[[b]]]]).a]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Data Split with two variables in Result field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void TestingDataSplitWithTwoVariablesInResultField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Data Split with two variables in Result field", new string[] {
                        "WorkflowExecution"});
#line 589
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 590
      testRunner.Given("I have a workflow \"WorkflowforDatasplit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table808 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table808.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
            table808.AddRow(new string[] {
                        "[[rec().a]]",
                        "Warewolf"});
#line 591
      testRunner.And("\"WorkflowforDatasplit\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table808, "And ");
#line hidden
            TechTalk.SpecFlow.Table table809 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table809.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "[[fr().a]][[a]]",
                        "Index",
                        "2",
                        "Unselected",
                        ""});
            table809.AddRow(new string[] {
                        "",
                        "[[fr().b]][[b]]",
                        "Index",
                        "2",
                        "Unselected",
                        ""});
#line 595
   testRunner.And("\"WorkflowforDatasplit\" contains Data Split \"Data Split\" as", ((string)(null)), table809, "And ");
#line 599
   testRunner.When("\"WorkflowforDatasplit\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 600
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table810 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table810.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Test"});
            table810.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "Warewolf"});
#line 601
      testRunner.And("the \"Rec To Convert\" in WorkFlow \"WorkflowforDatasplit\" debug inputs as", ((string)(null)), table810, "And ");
#line hidden
            TechTalk.SpecFlow.Table table811 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table811.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Test"});
            table811.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = Warewolf"});
#line 605
   testRunner.And("the \"Rec To Convert\" in Workflow \"WorkflowforDatasplit\" debug outputs as", ((string)(null)), table811, "And ");
#line hidden
            TechTalk.SpecFlow.Table table812 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table812.AddRow(new string[] {
                        "[[rec(1).a]] = Test",
                        "Forward",
                        "No",
                        "1",
                        "[[fr().a]][[a]] =",
                        "Index",
                        "2",
                        "No",
                        ""});
            table812.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[fr().b]][[b]] =",
                        "Index",
                        "2",
                        "No",
                        ""});
#line 609
  testRunner.And("the \"Data Split\" in WorkFlow \"WorkflowforDatasplit\" debug inputs as", ((string)(null)), table812, "And ");
#line hidden
            TechTalk.SpecFlow.Table table813 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 613
   testRunner.And("the \"Data Split\" in Workflow \"WorkflowforDatasplit\" debug outputs as", ((string)(null)), table813, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void TestingFormatNumbersWithTwoVariablesInResult(string no, string variable, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "WorkflowExecution"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Format Numbers with two variables in Result", @__tags);
#line 617
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 618
     testRunner.Given("I have a workflow \"Workflowforfn\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table814 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table814.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table814.AddRow(new string[] {
                        "[[b]]",
                        "2"});
#line 619
   testRunner.And("\"Workflowforfn\" contains an Assign \"Values\" as", ((string)(null)), table814, "And ");
#line hidden
            TechTalk.SpecFlow.Table table815 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table815.AddRow(new string[] {
                        "123.568",
                        "Up",
                        "2",
                        "2",
                        string.Format("\"{0}\"", variable)});
#line 623
   testRunner.And("\"Workflowforfn\" contains Format Number \"Fnumber\" as", ((string)(null)), table815, "And ");
#line 626
   testRunner.When("\"Workflowforfn\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 627
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table816 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table816.AddRow(new string[] {
                        "123.568",
                        "Up",
                        "2",
                        "2"});
#line 628
   testRunner.And("the \"Fnumber\" in WorkFlow \"Workflowforfn\" debug inputs as", ((string)(null)), table816, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Format Numbers with two variables in Result: 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[a]][[Result]]")]
        public virtual void TestingFormatNumbersWithTwoVariablesInResult_1()
        {
#line 617
this.TestingFormatNumbersWithTwoVariablesInResult("1", "[[a]][[Result]]", ((string[])(null)));
#line hidden
        }
        
        public virtual void TestingRandomNumbersWithTwoVariablesInResult(string no, string variable, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "WorkflowExecution"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Random Numbers with two variables in Result", @__tags);
#line 636
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 637
      testRunner.Given("I have a workflow \"Workflowforrandom123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table817 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table817.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table817.AddRow(new string[] {
                        "[[b]]",
                        "10"});
#line 638
   testRunner.And("\"Workflowforrandom123\" contains an Assign \"Values\" as", ((string)(null)), table817, "And ");
#line hidden
            TechTalk.SpecFlow.Table table818 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table818.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "10",
                        string.Format("\"{0}\"", variable)});
#line 642
   testRunner.And("\"Workflowforrandom123\" contains Random \"Randoms\" as", ((string)(null)), table818, "And ");
#line 645
   testRunner.When("\"Workflowforrandom123\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 646
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table819 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table819.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table819.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "10"});
#line 647
    testRunner.And("the \"Values\" in WorkFlow \"Workflowforrandom123\" debug inputs as", ((string)(null)), table819, "And ");
#line hidden
            TechTalk.SpecFlow.Table table820 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table820.AddRow(new string[] {
                        "1",
                        "[[a]] =  1"});
            table820.AddRow(new string[] {
                        "2",
                        "[[b]] =  10"});
#line 651
   testRunner.And("the \"Values\" in Workflow \"Workflowforrandom123\" debug outputs as", ((string)(null)), table820, "And ");
#line hidden
            TechTalk.SpecFlow.Table table821 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table821.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "10"});
#line 655
   testRunner.And("the \"Randoms\" in WorkFlow \"Workflowforrandom123\" debug inputs as", ((string)(null)), table821, "And ");
#line hidden
            TechTalk.SpecFlow.Table table822 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table822.AddRow(new string[] {
                        string.Format("\"{0}\" =", variable)});
#line 658
      testRunner.And("the \"Randoms\" in Workflow \"Workflowforrandom123\" debug outputs as", ((string)(null)), table822, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Random Numbers with two variables in Result: 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[a]][[Result]]")]
        public virtual void TestingRandomNumbersWithTwoVariablesInResult_1()
        {
#line 636
this.TestingRandomNumbersWithTwoVariablesInResult("1", "[[a]][[Result]]", ((string[])(null)));
#line hidden
        }
        
        public virtual void TestingDateAndTimeWithTwoVariablesInResultField(string no, string variable, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "WorkflowExecution"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Date and Time with two variables in Result field", @__tags);
#line 666
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 667
      testRunner.Given("I have a workflow \"WorkflowforDT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table823 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table823.AddRow(new string[] {
                        "[[rec().a]]",
                        "12/01/2001"});
#line 668
      testRunner.And("\"WorkflowforDT\" contains an Assign \"Convert2\" as", ((string)(null)), table823, "And ");
#line hidden
            TechTalk.SpecFlow.Table table824 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "Output Format",
                        "Result"});
            table824.AddRow(new string[] {
                        "[[rec().a]]",
                        "dd/mm/yyyy",
                        "1",
                        "dd/mm/yyyy",
                        string.Format("\"{0}\"", variable)});
#line 671
   testRunner.And("\"WorkflowforDT\" contains Date and Time \"AddDates\" as", ((string)(null)), table824, "And ");
#line 674
   testRunner.When("\"WorkflowforDT\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 675
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table825 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table825.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "12/01/2001"});
#line 676
      testRunner.And("the \"Convert2\" in WorkFlow \"WorkflowforDT\" debug inputs as", ((string)(null)), table825, "And ");
#line hidden
            TechTalk.SpecFlow.Table table826 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table826.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 12/01/2001"});
#line 679
   testRunner.And("the \"Convert2\" in Workflow \"WorkflowforDT\" debug outputs as", ((string)(null)), table826, "And ");
#line hidden
            TechTalk.SpecFlow.Table table827 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table827.AddRow(new string[] {
                        "[[rec(1).a]] = 12/01/2001",
                        "dd/mm/yyyy",
                        "Years",
                        "1",
                        "dd/mm/yyyy"});
#line 682
   testRunner.And("the \"AddDates\" in WorkFlow \"WorkflowforDT\" debug inputs as", ((string)(null)), table827, "And ");
#line hidden
            TechTalk.SpecFlow.Table table828 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table828.AddRow(new string[] {
                        string.Format("\"{0}\" =", variable)});
#line 685
   testRunner.And("the \"AddDates\" in Workflow \"WorkflowforDT\" debug outputs as", ((string)(null)), table828, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Date and Time with two variables in Result field: 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[a]][[Result]]")]
        public virtual void TestingDateAndTimeWithTwoVariablesInResultField_1()
        {
#line 666
this.TestingDateAndTimeWithTwoVariablesInResultField("1", "[[a]][[Result]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Convert an recordset to Upper by using index as scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ConvertAnRecordsetToUpperByUsingIndexAsScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert an recordset to Upper by using index as scalar", new string[] {
                        "WorkflowExecution"});
#line 693
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 694
 testRunner.Given("I have a workflow \"ConvertUsingScalarWithRecursiveEvalution\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table829 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table829.AddRow(new string[] {
                        "[[rs().row]]",
                        "warewolf"});
            table829.AddRow(new string[] {
                        "[[a]]",
                        "1"});
#line 695
 testRunner.And("\"ConvertUsingScalarWithRecursiveEvalution\" contains an Assign \"Records\" as", ((string)(null)), table829, "And ");
#line hidden
            TechTalk.SpecFlow.Table table830 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table830.AddRow(new string[] {
                        "[[rs([[a]]).row]]",
                        "UPPER"});
#line 699
 testRunner.And("\"ConvertUsingScalarWithRecursiveEvalution\" contains case convert \"Case to Convert" +
                    "\" as", ((string)(null)), table830, "And ");
#line 702
 testRunner.When("\"ConvertUsingScalarWithRecursiveEvalution\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 703
 testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table831 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table831.AddRow(new string[] {
                        "1",
                        "[[rs().row]] =",
                        "warewolf"});
            table831.AddRow(new string[] {
                        "2",
                        "[[a]] =",
                        "1"});
#line 704
 testRunner.And("the \"Records\" in WorkFlow \"ConvertUsingScalarWithRecursiveEvalution\" debug inputs" +
                    " as", ((string)(null)), table831, "And ");
#line hidden
            TechTalk.SpecFlow.Table table832 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table832.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =  warewolf"});
            table832.AddRow(new string[] {
                        "2",
                        "[[a]] =  1"});
#line 708
 testRunner.And("the \"Records\" in Workflow \"ConvertUsingScalarWithRecursiveEvalution\" debug output" +
                    "s as", ((string)(null)), table832, "And ");
#line hidden
            TechTalk.SpecFlow.Table table833 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table833.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] = warewolf",
                        "UPPER"});
#line 712
 testRunner.And("the \"Case to Convert\" in WorkFlow \"ConvertUsingScalarWithRecursiveEvalution\" debu" +
                    "g inputs as", ((string)(null)), table833, "And ");
#line hidden
            TechTalk.SpecFlow.Table table834 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table834.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] = WAREWOLF"});
#line 715
 testRunner.And("the \"Case to Convert\" in Workflow \"ConvertUsingScalarWithRecursiveEvalution\" debu" +
                    "g outputs as", ((string)(null)), table834, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Convert an recordset to Upper by using index as recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ConvertAnRecordsetToUpperByUsingIndexAsRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert an recordset to Upper by using index as recordset", new string[] {
                        "WorkflowExecution"});
#line 720
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 721
 testRunner.Given("I have a workflow \"ConvertUsingRecSetInRecursiveEvalution\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table835 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table835.AddRow(new string[] {
                        "[[rs().row]]",
                        "warewolf"});
            table835.AddRow(new string[] {
                        "[[rs().index]]",
                        "1"});
#line 722
 testRunner.And("\"ConvertUsingRecSetInRecursiveEvalution\" contains an Assign \"Records\" as", ((string)(null)), table835, "And ");
#line hidden
            TechTalk.SpecFlow.Table table836 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table836.AddRow(new string[] {
                        "[[rs([[rs(1).index]]).row]]",
                        "UPPER"});
#line 726
 testRunner.And("\"ConvertUsingRecSetInRecursiveEvalution\" contains case convert \"Case to Convert\" " +
                    "as", ((string)(null)), table836, "And ");
#line 729
 testRunner.When("\"ConvertUsingRecSetInRecursiveEvalution\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 730
 testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table837 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table837.AddRow(new string[] {
                        "1",
                        "[[rs().row]] =",
                        "warewolf"});
            table837.AddRow(new string[] {
                        "2",
                        "[[rs().index]] =",
                        "1"});
#line 731
 testRunner.And("the \"Records\" in WorkFlow \"ConvertUsingRecSetInRecursiveEvalution\" debug inputs a" +
                    "s", ((string)(null)), table837, "And ");
#line hidden
            TechTalk.SpecFlow.Table table838 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table838.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] = warewolf"});
            table838.AddRow(new string[] {
                        "2",
                        "[[rs(1).index]] = 1"});
#line 735
 testRunner.And("the \"Records\" in Workflow \"ConvertUsingRecSetInRecursiveEvalution\" debug outputs " +
                    "as", ((string)(null)), table838, "And ");
#line hidden
            TechTalk.SpecFlow.Table table839 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table839.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] = warewolf",
                        "UPPER"});
#line 739
 testRunner.And("the \"Case to Convert\" in WorkFlow \"ConvertUsingRecSetInRecursiveEvalution\" debug " +
                    "inputs as", ((string)(null)), table839, "And ");
#line hidden
            TechTalk.SpecFlow.Table table840 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table840.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] = WAREWOLF"});
#line 742
 testRunner.And("the \"Case to Convert\" in Workflow \"ConvertUsingRecSetInRecursiveEvalution\" debug " +
                    "outputs as", ((string)(null)), table840, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Base Convert two varibles on one row")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void BaseConvertTwoVariblesOnOneRow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Base Convert two varibles on one row", new string[] {
                        "WorkflowExecution"});
#line 747
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 748
 testRunner.Given("I have a workflow \"BaseConvertUsingRecSetInRecursiveEvalution\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table841 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table841.AddRow(new string[] {
                        "[[rs().a]]",
                        "1"});
            table841.AddRow(new string[] {
                        "[[rec().a]]",
                        "2"});
#line 749
 testRunner.And("\"BaseConvertUsingRecSetInRecursiveEvalution\" contains an Assign \"Records\" as", ((string)(null)), table841, "And ");
#line hidden
            TechTalk.SpecFlow.Table table842 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table842.AddRow(new string[] {
                        "[[rec([[rs(1).a]]).a]]",
                        "Text",
                        "Base 64"});
#line 753
 testRunner.And("\"BaseConvertUsingRecSetInRecursiveEvalution\" contains Base convert \"Base to Conve" +
                    "rt\" as", ((string)(null)), table842, "And ");
#line 756
 testRunner.When("\"BaseConvertUsingRecSetInRecursiveEvalution\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 757
 testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table843 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table843.AddRow(new string[] {
                        "1",
                        "[[rs().a]] =",
                        "1"});
            table843.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "2"});
#line 758
 testRunner.And("the \"Records\" in WorkFlow \"BaseConvertUsingRecSetInRecursiveEvalution\" debug inpu" +
                    "ts as", ((string)(null)), table843, "And ");
#line hidden
            TechTalk.SpecFlow.Table table844 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table844.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = 1"});
            table844.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = 2"});
#line 762
 testRunner.And("the \"Records\" in Workflow \"BaseConvertUsingRecSetInRecursiveEvalution\" debug outp" +
                    "uts as", ((string)(null)), table844, "And ");
#line hidden
            TechTalk.SpecFlow.Table table845 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table845.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 2",
                        "Text",
                        "Base 64"});
#line 766
 testRunner.And("the \"Base to Convert\" in WorkFlow \"BaseConvertUsingRecSetInRecursiveEvalution\" de" +
                    "bug inputs as", ((string)(null)), table845, "And ");
#line hidden
            TechTalk.SpecFlow.Table table846 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table846.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Mg=="});
#line 769
    testRunner.And("the \"Base to Convert\" in Workflow \"BaseConvertUsingRecSetInRecursiveEvalution\" de" +
                    "bug outputs as", ((string)(null)), table846, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow by using For Each with Random in it")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowByUsingForEachWithRandomInIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow by using For Each with Random in it", new string[] {
                        "WorkflowExecution"});
#line 774
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 775
      testRunner.Given("I have a workflow \"WFWithForEachContainsRandom\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 776
   testRunner.And("\"WFWithForEachContainsRandom\" contains a Foreach \"ForEachTest123\" as \"NumOfExecut" +
                    "ion\" executions \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table847 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table847.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5",
                        "[[rec(*).a]]"});
#line 777
   testRunner.And("\"ForEachTest123\" contains Random \"Random\" as", ((string)(null)), table847, "And ");
#line 780
      testRunner.When("\"WFWithForEachContainsRandom\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 781
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table848 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table848.AddRow(new string[] {
                        "No. of Executes",
                        "5"});
#line 782
   testRunner.And("the \"ForEachTest123\" in WorkFlow \"WFWithForEachContainsRandom\" debug inputs as", ((string)(null)), table848, "And ");
#line 785
      testRunner.And("the \"ForEachTest123\" in WorkFlow \"WFWithForEachContainsRandom\" has  \"5\" nested ch" +
                    "ildren", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table849 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table849.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5"});
#line 786
    testRunner.And("the \"Random\" in step 1 for \"ForEachTest123\" debug inputs as", ((string)(null)), table849, "And ");
#line hidden
            TechTalk.SpecFlow.Table table850 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table850.AddRow(new string[] {
                        "[[rec(1).a]] = Int32"});
#line 789
   testRunner.And("the \"Random\" in step 1 for \"ForEachTest123\" debug outputs as", ((string)(null)), table850, "And ");
#line hidden
            TechTalk.SpecFlow.Table table851 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table851.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5"});
#line 792
   testRunner.And("the \"Random\" in step 2 for \"ForEachTest123\" debug inputs as", ((string)(null)), table851, "And ");
#line hidden
            TechTalk.SpecFlow.Table table852 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table852.AddRow(new string[] {
                        "[[rec(1).a]] = Int32"});
#line 795
   testRunner.And("the \"Random\" in step 2 for \"ForEachTest123\" debug outputs as", ((string)(null)), table852, "And ");
#line hidden
            TechTalk.SpecFlow.Table table853 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table853.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5"});
#line 798
       testRunner.And("the \"Random\" in step 3 for \"ForEachTest123\" debug inputs as", ((string)(null)), table853, "And ");
#line hidden
            TechTalk.SpecFlow.Table table854 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table854.AddRow(new string[] {
                        "[[rec(1).a]] = Int32"});
#line 801
   testRunner.And("the \"Random\" in step 3 for \"ForEachTest123\" debug outputs as", ((string)(null)), table854, "And ");
#line hidden
            TechTalk.SpecFlow.Table table855 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table855.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5"});
#line 804
      testRunner.And("the \"Random\" in step 4 for \"ForEachTest123\" debug inputs as", ((string)(null)), table855, "And ");
#line hidden
            TechTalk.SpecFlow.Table table856 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table856.AddRow(new string[] {
                        "[[rec(1).a]] = Int32"});
#line 807
   testRunner.And("the \"Random\" in step 4 for \"ForEachTest123\" debug outputs as", ((string)(null)), table856, "And ");
#line hidden
            TechTalk.SpecFlow.Table table857 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table857.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5"});
#line 810
       testRunner.And("the \"Random\" in step 5 for \"ForEachTest123\" debug inputs as", ((string)(null)), table857, "And ");
#line hidden
            TechTalk.SpecFlow.Table table858 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table858.AddRow(new string[] {
                        "[[rec(1).a]] = Int32"});
#line 813
 testRunner.And("the \"Random\" in step 5 for \"ForEachTest123\" debug outputs as", ((string)(null)), table858, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Calculation using Star notation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithCalculationUsingStarNotation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Calculation using Star notation", new string[] {
                        "WorkflowExecution"});
#line 818
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 819
      testRunner.Given("I have a workflow \"WorkflowWithAssignCalculationUsingStar\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table859 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table859.AddRow(new string[] {
                        "[[rs(1).a]]",
                        "19"});
            table859.AddRow(new string[] {
                        "[[rs(2).a]]",
                        "20"});
            table859.AddRow(new string[] {
                        "[[rs(3).a]]",
                        "40"});
#line 820
      testRunner.And("\"WorkflowWithAssignCalculationUsingStar\" contains an Assign \"Records\" as", ((string)(null)), table859, "And ");
#line hidden
            TechTalk.SpecFlow.Table table860 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table860.AddRow(new string[] {
                        "[[rec().sum]]",
                        "=[[rs(*).a]]+1"});
#line 825
   testRunner.And("\"WorkflowWithAssignCalculationUsingStar\" contains an Assign \"Calculation\" as", ((string)(null)), table860, "And ");
#line 828
   testRunner.When("\"WorkflowWithAssignCalculationUsingStar\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 829
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table861 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table861.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =",
                        "19"});
            table861.AddRow(new string[] {
                        "2",
                        "[[rs(2).a]] =",
                        "20"});
            table861.AddRow(new string[] {
                        "3",
                        "[[rs(3).a]] =",
                        "40"});
#line 830
   testRunner.And("the \"Records\" in WorkFlow \"WorkflowWithAssignCalculationUsingStar\" debug inputs a" +
                    "s", ((string)(null)), table861, "And ");
#line hidden
            TechTalk.SpecFlow.Table table862 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table862.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =  19"});
            table862.AddRow(new string[] {
                        "2",
                        "[[rs(2).a]] =  20"});
            table862.AddRow(new string[] {
                        "3",
                        "[[rs(3).a]] =  40"});
#line 835
   testRunner.And("the \"Records\" in Workflow \"WorkflowWithAssignCalculationUsingStar\" debug outputs " +
                    "as", ((string)(null)), table862, "And ");
#line hidden
            TechTalk.SpecFlow.Table table863 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table863.AddRow(new string[] {
                        "1",
                        "[[rec().sum]] =",
                        "[[rs(1).a]]+1 = 19+1"});
            table863.AddRow(new string[] {
                        "",
                        "",
                        "[[rs(2).a]]+1 = 20+1"});
            table863.AddRow(new string[] {
                        "",
                        "",
                        "[[rs(3).a]]+1 = 40+1"});
#line 840
    testRunner.And("the \"Calculation\" in WorkFlow \"WorkflowWithAssignCalculationUsingStar\" debug inpu" +
                    "ts as", ((string)(null)), table863, "And ");
#line hidden
            TechTalk.SpecFlow.Table table864 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table864.AddRow(new string[] {
                        "1",
                        "[[rec(3).sum]] = 41"});
#line 845
   testRunner.And("the \"Calculation\" in Workflow \"WorkflowWithAssignCalculationUsingStar\" debug outp" +
                    "uts as", ((string)(null)), table864, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow Saving with Different Versions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowSavingWithDifferentVersions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow Saving with Different Versions", new string[] {
                        "WorkflowExecution"});
#line 850
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 851
  testRunner.Given("I have a workflow \"WorkflowWithVersionAssignTest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table865 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table865.AddRow(new string[] {
                        "[[rec().a]]",
                        "New"});
            table865.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
#line 852
  testRunner.And("\"WorkflowWithVersionAssignTest\" contains an Assign \"VarsAssign\" as", ((string)(null)), table865, "And ");
#line 856
   testRunner.When("workflow \"WorkflowWithVersionAssignTest\" is saved \"1\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 857
   testRunner.Then("workflow \"WorkflowWithVersionAssignTest\" has \"0\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 858
   testRunner.When("workflow \"WorkflowWithVersionAssignTest\" is saved \"2\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 859
   testRunner.Then("workflow \"WorkflowWithVersionAssignTest\" has \"2\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table866 = new TechTalk.SpecFlow.Table(new string[] {
                        "Explorer"});
            table866.AddRow(new string[] {
                        "WorkflowWithAssign"});
            table866.AddRow(new string[] {
                        "v.2 DateTime"});
            table866.AddRow(new string[] {
                        "v.1 DateTime"});
#line 860
   testRunner.And("explorer as", ((string)(null)), table866, "And ");
#line 865
   testRunner.When("workflow \"WorkflowWithVersionAssignTest\" is saved \"3\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 866
   testRunner.Then("workflow \"WorkflowWithVersionAssignTest\" has \"5\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table867 = new TechTalk.SpecFlow.Table(new string[] {
                        "Explorer"});
            table867.AddRow(new string[] {
                        "WorkflowWithAssign"});
            table867.AddRow(new string[] {
                        "v.5 DateTime Save"});
            table867.AddRow(new string[] {
                        "v.4 DateTime Save"});
            table867.AddRow(new string[] {
                        "v.3 DateTime Save"});
            table867.AddRow(new string[] {
                        "v.2 DateTime Save"});
            table867.AddRow(new string[] {
                        "v.1 DateTime Save"});
#line 867
   testRunner.And("explorer as", ((string)(null)), table867, "And ");
#line 875
   testRunner.And("workflow \"WorkflowWithVersionAssignTest\" is deleted as cleanup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing workflow of different versions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingWorkflowOfDifferentVersions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing workflow of different versions", new string[] {
                        "WorkflowExecution"});
#line 878
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 879
  testRunner.Given("I have a workflow \"WorkflowWithVersionAssignExecuted2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table868 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table868.AddRow(new string[] {
                        "[[rec().a]]",
                        "New"});
            table868.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
#line 880
  testRunner.And("\"WorkflowWithVersionAssignExecuted2\" contains an Assign \"VarsAssign\" as", ((string)(null)), table868, "And ");
#line 884
   testRunner.When("workflow \"WorkflowWithVersionAssignExecuted2\" is saved \"1\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 885
   testRunner.Then("workflow \"WorkflowWithVersionAssignExecuted2\" has \"0\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 886
   testRunner.When("\"WorkflowWithVersionAssignExecuted2\" is executed without saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 887
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table869 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table869.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "New"});
            table869.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "Test"});
#line 888
   testRunner.And("the \"VarsAssign\" in WorkFlow \"WorkflowWithVersionAssignExecuted2\" debug inputs as" +
                    "", ((string)(null)), table869, "And ");
#line hidden
            TechTalk.SpecFlow.Table table870 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table870.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = New"});
            table870.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = Test"});
#line 892
   testRunner.And("the \"VarsAssign\" in Workflow \"WorkflowWithVersionAssignExecuted2\" debug outputs a" +
                    "s", ((string)(null)), table870, "And ");
#line 896
   testRunner.When("workflow \"WorkflowWithVersionAssignExecuted2\" is saved \"2\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 897
   testRunner.Then("workflow \"WorkflowWithVersionAssignExecuted2\" has \"2\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table871 = new TechTalk.SpecFlow.Table(new string[] {
                        "Explorer"});
            table871.AddRow(new string[] {
                        "WorkflowWithAssign"});
            table871.AddRow(new string[] {
                        "v.2 DateTime"});
            table871.AddRow(new string[] {
                        "v.1 DateTime"});
#line 898
   testRunner.And("explorer as", ((string)(null)), table871, "And ");
#line hidden
            TechTalk.SpecFlow.Table table872 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table872.AddRow(new string[] {
                        "[[rec().a]]",
                        "New"});
            table872.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
            table872.AddRow(new string[] {
                        "[[rec().a]]",
                        "V1"});
#line 903
  testRunner.And("\"WorkflowWithVersionAssignExecuted2\" contains an Assign \"VarsAssign2\" as", ((string)(null)), table872, "And ");
#line 908
  testRunner.When("workflow \"WorkflowWithVersionAssignExecuted2\" is saved \"1\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 909
  testRunner.When("\"WorkflowWithVersionAssignExecuted2\" is executed without saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 910
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table873 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table873.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "New"});
            table873.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "Test"});
            table873.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "V1"});
#line 911
  testRunner.And("the \"VarsAssign2\" in WorkFlow \"WorkflowWithVersionAssignExecuted2\" debug inputs a" +
                    "s", ((string)(null)), table873, "And ");
#line 916
  testRunner.When("workflow \"WorkflowWithVersionAssignExecuted2\" is saved \"1\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 917
   testRunner.Then("workflow \"WorkflowWithVersionAssignExecuted2\" has \"4\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table874 = new TechTalk.SpecFlow.Table(new string[] {
                        "Explorer"});
            table874.AddRow(new string[] {
                        "WorkflowWithAssign"});
            table874.AddRow(new string[] {
                        "v.4 DateTime"});
            table874.AddRow(new string[] {
                        "v.3 DateTime"});
            table874.AddRow(new string[] {
                        "v.2 DateTime"});
            table874.AddRow(new string[] {
                        "v.1 DateTime"});
#line 918
   testRunner.And("explorer as", ((string)(null)), table874, "And ");
#line 925
   testRunner.When("I rollback \"WorkflowWithVersionAssignExecuted2\" to version \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 926
   testRunner.When("\"WorkflowWithVersionAssignExecuted2\" is executed without saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 927
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table875 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table875.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = New"});
            table875.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = Test"});
#line 928
   testRunner.And("the \"VarsAssign\" in Workflow \"WorkflowWithVersionAssignExecuted2\" debug outputs a" +
                    "s", ((string)(null)), table875, "And ");
#line 932
   testRunner.And("workflow \"WorkflowWithVersionAssignExecuted2\" is deleted as cleanup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Calculate testing variable values that hasn\"t been assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void CalculateTestingVariableValuesThatHasntBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate testing variable values that hasn\"t been assigned", new string[] {
                        "WorkflowExecution"});
#line 935
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 936
      testRunner.Given("I have a workflow \"WorkflowforCalTestingUnassignedvariablevalue\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table876 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table876.AddRow(new string[] {
                        "[[Val]]",
                        "1"});
#line 937
      testRunner.And("\"WorkflowforCalTestingUnassignedvariablevalue\" contains an Assign \"Values34\" as", ((string)(null)), table876, "And ");
#line 940
  testRunner.And("\"WorkflowforCalTestingUnassignedvariablevalue\" contains Calculate \"Calculate1\" wi" +
                    "th formula \"[[Val1]]+1\" into \"[[res]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 941
   testRunner.When("\"WorkflowforCalTestingUnassignedvariablevalue\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 942
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table877 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table877.AddRow(new string[] {
                        "1",
                        "[[Val]] =",
                        "1"});
#line 943
      testRunner.And("the \"Values34\" in WorkFlow \"WorkflowforCalTestingUnassignedvariablevalue\" debug i" +
                    "nputs as", ((string)(null)), table877, "And ");
#line hidden
            TechTalk.SpecFlow.Table table878 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table878.AddRow(new string[] {
                        "1",
                        "[[Val]] = 1"});
#line 946
   testRunner.And("the \"Values34\" in Workflow \"WorkflowforCalTestingUnassignedvariablevalue\" debug o" +
                    "utputs as", ((string)(null)), table878, "And ");
#line hidden
            TechTalk.SpecFlow.Table table879 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table879.AddRow(new string[] {
                        "[[Val1]]+1 ="});
#line 949
   testRunner.And("the \"Calculate1\" in WorkFlow \"WorkflowforCalTestingUnassignedvariablevalue\" debug" +
                    " inputs as", ((string)(null)), table879, "And ");
#line hidden
            TechTalk.SpecFlow.Table table880 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table880.AddRow(new string[] {
                        "[[res]] ="});
#line 952
      testRunner.And("the \"Calculate1\" in Workflow \"WorkflowforCalTestingUnassignedvariablevalue\" debug" +
                    " outputs as", ((string)(null)), table880, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Calculate testing variable values that hasn\"t been assigned2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void CalculateTestingVariableValuesThatHasntBeenAssigned2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate testing variable values that hasn\"t been assigned2", new string[] {
                        "WorkflowExecution"});
#line 958
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 959
      testRunner.Given("I have a workflow \"WorkflowforCalTestingUnassignedvariablevalue2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table881 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table881.AddRow(new string[] {
                        "[[Val]]",
                        "1"});
#line 960
      testRunner.And("\"WorkflowforCalTestingUnassignedvariablevalue2\" contains an Assign \"Values34\" as", ((string)(null)), table881, "And ");
#line 963
  testRunner.And("\"WorkflowforCalTestingUnassignedvariablevalue2\" contains Calculate \"Calculate1\" w" +
                    "ith formula \"[[Val1]]23+1\" into \"[[res]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 964
   testRunner.When("\"WorkflowforCalTestingUnassignedvariablevalue2\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 965
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table882 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table882.AddRow(new string[] {
                        "1",
                        "[[Val]] =",
                        "1"});
#line 966
      testRunner.And("the \"Values34\" in WorkFlow \"WorkflowforCalTestingUnassignedvariablevalue2\" debug " +
                    "inputs as", ((string)(null)), table882, "And ");
#line hidden
            TechTalk.SpecFlow.Table table883 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table883.AddRow(new string[] {
                        "1",
                        "[[Val]] = 1"});
#line 969
   testRunner.And("the \"Values34\" in Workflow \"WorkflowforCalTestingUnassignedvariablevalue2\" debug " +
                    "outputs as", ((string)(null)), table883, "And ");
#line hidden
            TechTalk.SpecFlow.Table table884 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table884.AddRow(new string[] {
                        "[[Val1]]23+1 ="});
#line 972
   testRunner.And("the \"Calculate1\" in WorkFlow \"WorkflowforCalTestingUnassignedvariablevalue2\" debu" +
                    "g inputs as", ((string)(null)), table884, "And ");
#line hidden
            TechTalk.SpecFlow.Table table885 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table885.AddRow(new string[] {
                        "[[res]] ="});
#line 975
      testRunner.And("the \"Calculate1\" in Workflow \"WorkflowforCalTestingUnassignedvariablevalue2\" debu" +
                    "g outputs as", ((string)(null)), table885, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Gather System tool throws error when debug with 2 variables in one row")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void GatherSystemToolThrowsErrorWhenDebugWith2VariablesInOneRow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Gather System tool throws error when debug with 2 variables in one row", new string[] {
                        "WorkflowExecution"});
#line 980
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 981
   testRunner.Given("I have a workflow \"WorkflowW\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table886 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table886.AddRow(new string[] {
                        "[[a]]",
                        "b"});
#line 982
   testRunner.And("\"WorkflowW\" contains an Assign \"IndexVal\" as", ((string)(null)), table886, "And ");
#line hidden
            TechTalk.SpecFlow.Table table887 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table887.AddRow(new string[] {
                        "[[a]][[b]]",
                        "Date & Time"});
#line 985
    testRunner.And("\"WorkflowW\" contains Gather System Info \"System info\" as", ((string)(null)), table887, "And ");
#line 988
   testRunner.When("\"WorkflowW\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 989
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table888 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table888.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
#line 990
    testRunner.And("the \"IndexVal\" in WorkFlow \"WorkflowW\" debug inputs as", ((string)(null)), table888, "And ");
#line hidden
            TechTalk.SpecFlow.Table table889 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table889.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
#line 993
   testRunner.And("the \"IndexVal\" in Workflow \"WorkflowW\" debug outputs as", ((string)(null)), table889, "And ");
#line hidden
            TechTalk.SpecFlow.Table table890 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
#line 996
   testRunner.And("the \"System info\" in WorkFlow \"WorkflowW\" debug inputs as", ((string)(null)), table890, "And ");
#line hidden
            TechTalk.SpecFlow.Table table891 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table891.AddRow(new string[] {
                        "1",
                        "[[a]][[b]] ="});
#line 998
  testRunner.And("the \"System info\" in Workflow \"WorkflowW\" debug outputs as", ((string)(null)), table891, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Gather System tool throws error when debug with invalid variableb")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void GatherSystemToolThrowsErrorWhenDebugWithInvalidVariableb()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Gather System tool throws error when debug with invalid variableb", new string[] {
                        "WorkflowExecution"});
#line 1006
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1007
   testRunner.Given("I have a workflow \"WorkflowW1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table892 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table892.AddRow(new string[] {
                        "[[a]]",
                        "b"});
#line 1008
   testRunner.And("\"WorkflowW1\" contains an Assign \"IndexVal\" as", ((string)(null)), table892, "And ");
#line hidden
            TechTalk.SpecFlow.Table table893 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table893.AddRow(new string[] {
                        "[[a]][[rec().a]]",
                        "Date & Time"});
#line 1011
    testRunner.And("\"WorkflowW1\" contains Gather System Info \"System info\" as", ((string)(null)), table893, "And ");
#line 1014
   testRunner.When("\"WorkflowW1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1015
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table894 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table894.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
#line 1016
    testRunner.And("the \"IndexVal\" in WorkFlow \"WorkflowW1\" debug inputs as", ((string)(null)), table894, "And ");
#line hidden
            TechTalk.SpecFlow.Table table895 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table895.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
#line 1019
   testRunner.And("the \"IndexVal\" in Workflow \"WorkflowW1\" debug outputs as", ((string)(null)), table895, "And ");
#line hidden
            TechTalk.SpecFlow.Table table896 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
#line 1022
   testRunner.And("the \"System info\" in WorkFlow \"WorkflowW1\" debug inputs as", ((string)(null)), table896, "And ");
#line hidden
            TechTalk.SpecFlow.Table table897 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table897.AddRow(new string[] {
                        "1",
                        "[[a]][[rec().a]] ="});
#line 1024
  testRunner.And("the \"System info\" in Workflow \"WorkflowW1\" debug outputs as", ((string)(null)), table897, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow Base Convert and Case Convert passing invalid variable through execution" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowBaseConvertAndCaseConvertPassingInvalidVariableThroughExecution()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow Base Convert and Case Convert passing invalid variable through execution" +
                    "", new string[] {
                        "WorkflowExecution"});
#line 1029
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1030
   testRunner.Given("I have a workflow \"WorkflowWithBaseCase1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table898 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table898.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table898.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Warewolf"});
            table898.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "Test"});
            table898.AddRow(new string[] {
                        "[[index(1).a]]",
                        "a$*"});
#line 1031
   testRunner.And("\"WorkflowWithBaseCase1\" contains an Assign \"Assign1\" as", ((string)(null)), table898, "And ");
#line hidden
            TechTalk.SpecFlow.Table table899 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table899.AddRow(new string[] {
                        "[[rec([[index(1).a]]).a]]",
                        "UPPER"});
#line 1037
   testRunner.And("\"WorkflowWithBaseCase1\" contains case convert \"Case1\" as", ((string)(null)), table899, "And ");
#line hidden
            TechTalk.SpecFlow.Table table900 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table900.AddRow(new string[] {
                        "[[rec([[index(1).a]]).a]]",
                        "Text",
                        "Base 64"});
#line 1040
   testRunner.And("\"WorkflowWithBaseCase1\" contains Base convert \"Base1\" as", ((string)(null)), table900, "And ");
#line 1043
   testRunner.When("\"WorkflowWithBaseCase1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1044
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table901 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table901.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table901.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] =",
                        "Warewolf"});
            table901.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]] =",
                        "Test"});
            table901.AddRow(new string[] {
                        "4",
                        "[[index(1).a]] =",
                        "a$*"});
#line 1045
   testRunner.And("the \"Assign1\" in WorkFlow \"WorkflowWithBaseCase1\" debug inputs as", ((string)(null)), table901, "And ");
#line hidden
            TechTalk.SpecFlow.Table table902 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table902.AddRow(new string[] {
                        "1",
                        "[[a]]         =  1"});
            table902.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]]   =  Warewolf"});
            table902.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]]  =  Test"});
            table902.AddRow(new string[] {
                        "4",
                        "[[index(1).a]] =  a$*"});
#line 1051
    testRunner.And("the \"Assign1\" in Workflow \"WorkflowWithBaseCase1\" debug outputs as", ((string)(null)), table902, "And ");
#line hidden
            TechTalk.SpecFlow.Table table903 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table903.AddRow(new string[] {
                        "1",
                        "[[rec(a$*).a]] =",
                        "UPPER"});
#line 1057
   testRunner.And("the \"Case1\" in WorkFlow \"WorkflowWithBaseCase1\" debug inputs as", ((string)(null)), table903, "And ");
#line hidden
            TechTalk.SpecFlow.Table table904 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 1060
   testRunner.And("the \"Case1\" in Workflow \"WorkflowWithBaseCase1\" debug outputs as", ((string)(null)), table904, "And ");
#line hidden
            TechTalk.SpecFlow.Table table905 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table905.AddRow(new string[] {
                        "1",
                        "[[rec(a$*).a]] =",
                        "Text",
                        "Base 64"});
#line 1062
   testRunner.And("the \"Base1\" in WorkFlow \"WorkflowWithBaseCase1\" debug inputs as", ((string)(null)), table905, "And ");
#line hidden
            TechTalk.SpecFlow.Table table906 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 1065
      testRunner.And("the \"Base1\" in Workflow \"WorkflowWithBaseCase1\" debug outputs as", ((string)(null)), table906, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow Base Convert coverting same variable multiple times")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowBaseConvertCovertingSameVariableMultipleTimes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow Base Convert coverting same variable multiple times", new string[] {
                        "WorkflowExecution"});
#line 1069
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1070
  testRunner.Given("I have a workflow \"WorkflowWithBaseConvertUsingSameVariable\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table907 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table907.AddRow(new string[] {
                        "[[test]]",
                        "data"});
#line 1071
  testRunner.And("\"WorkflowWithBaseConvertUsingSameVariable\" contains an Assign \"Assign1\" as", ((string)(null)), table907, "And ");
#line hidden
            TechTalk.SpecFlow.Table table908 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table908.AddRow(new string[] {
                        "[[test]]",
                        "Text",
                        "Base 64"});
            table908.AddRow(new string[] {
                        "[[test]]",
                        "Base 64",
                        "Text"});
#line 1074
  testRunner.And("\"WorkflowWithBaseConvertUsingSameVariable\" contains Base convert \"Base12\" as", ((string)(null)), table908, "And ");
#line 1078
  testRunner.When("\"WorkflowWithBaseConvertUsingSameVariable\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1079
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table909 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table909.AddRow(new string[] {
                        "1",
                        "[[test]] =",
                        "data"});
#line 1080
  testRunner.And("the \"Assign1\" in WorkFlow \"WorkflowWithBaseConvertUsingSameVariable\" debug inputs" +
                    " as", ((string)(null)), table909, "And ");
#line hidden
            TechTalk.SpecFlow.Table table910 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table910.AddRow(new string[] {
                        "1",
                        "[[test]] =  data"});
#line 1083
   testRunner.And("the \"Assign1\" in Workflow \"WorkflowWithBaseConvertUsingSameVariable\" debug output" +
                    "s as", ((string)(null)), table910, "And ");
#line hidden
            TechTalk.SpecFlow.Table table911 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table911.AddRow(new string[] {
                        "1",
                        "[[test]] = data",
                        "Text",
                        "Base 64"});
            table911.AddRow(new string[] {
                        "2",
                        "[[test]] = ZGF0YQ==",
                        "Base 64",
                        "Text"});
#line 1086
  testRunner.And("the \"Base12\" in WorkFlow \"WorkflowWithBaseConvertUsingSameVariable\" debug inputs " +
                    "as", ((string)(null)), table911, "And ");
#line hidden
            TechTalk.SpecFlow.Table table912 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table912.AddRow(new string[] {
                        "1",
                        "[[test]] = ZGF0YQ=="});
            table912.AddRow(new string[] {
                        "2",
                        "[[test]] = data"});
#line 1090
    testRunner.And("the \"Base12\" in Workflow \"WorkflowWithBaseConvertUsingSameVariable\" debug outputs" +
                    " as", ((string)(null)), table912, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow Assign and Find Record Index executing with incorrect format of Inputs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowAssignAndFindRecordIndexExecutingWithIncorrectFormatOfInputs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow Assign and Find Record Index executing with incorrect format of Inputs", new string[] {
                        "WorkflowExecution"});
#line 1096
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1097
      testRunner.Given("I have a workflow \"WFWithAssignandFindRecordindexs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table913 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table913.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "23"});
            table913.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "34"});
            table913.AddRow(new string[] {
                        "[[xr(1).a]]",
                        "10"});
#line 1098
   testRunner.And("\"WFWithAssignandFindRecordindex\" contains an Assign \"Record\" as", ((string)(null)), table913, "And ");
#line hidden
            TechTalk.SpecFlow.Table table914 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "In Field",
                        "#",
                        "Match Type",
                        "Match",
                        "Require All Matches To Be True",
                        "Require All Fields To Match"});
            table914.AddRow(new string[] {
                        "#",
                        "[[rec().a]][[xr().a]]",
                        "1",
                        "=",
                        "Warewolf",
                        "YES",
                        "NO"});
#line 1103
   testRunner.And("\"WFWithAssignandFindRecordindexs\" contains Find Record Index \"FindRecord0\" into r" +
                    "esult as \"[[a]][[b]]\"", ((string)(null)), table914, "And ");
#line 1106
   testRunner.When("\"WFWithAssignandFindRecordindexs\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1107
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
