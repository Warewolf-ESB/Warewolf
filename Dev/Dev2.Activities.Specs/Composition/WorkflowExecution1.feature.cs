// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dev2.Activities.Specs.Composition
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class WorkflowExecutionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "WorkflowExecution.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "WorkflowExecution", "\tIn order to execute a workflow\r\n\tAs a Warewolf user\r\n\tI want to be able to build" +
                    " workflows and execute them against the server", ProgrammingLanguage.CSharp, new string[] {
                        "WorkflowExecution"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "WorkflowExecution")))
            {
                Dev2.Activities.Specs.Composition.WorkflowExecutionFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line 8
   testRunner.Given("Debug events are reset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
   testRunner.And("Debug states are cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with multiple tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithMultipleToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with multiple tools executing against the server", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 12
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndCount\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table1.AddRow(new string[] {
                        "[[rec().a]]",
                        "yes"});
            table1.AddRow(new string[] {
                        "[[rec().a]]",
                        "no"});
#line 13
   testRunner.And("\"WorkflowWithAssignAndCount\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table1, "And ");
#line 17
   testRunner.And("\"WorkflowWithAssignAndCount\" contains Count Record \"CountRec\" on \"[[rec()]]\" into" +
                    " \"[[count]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
   testRunner.When("\"WorkflowWithAssignAndCount\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table2.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "yes"});
            table2.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "no"});
#line 20
   testRunner.And("the \"Rec To Convert\" in WorkFlow \"WorkflowWithAssignAndCount\" debug inputs as", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table3.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = yes"});
            table3.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = no"});
#line 24
   testRunner.And("the \"Rec To Convert\" in Workflow \"WorkflowWithAssignAndCount\" debug outputs as", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table4.AddRow(new string[] {
                        "[[rec(1).a]] = yes"});
            table4.AddRow(new string[] {
                        "[[rec(2).a]] = no"});
#line 28
   testRunner.And("the \"CountRec\" in WorkFlow \"WorkflowWithAssignAndCount\" debug inputs as", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table5.AddRow(new string[] {
                        "[[count]] = 2"});
#line 32
   testRunner.And("the \"CountRec\" in Workflow \"WorkflowWithAssignAndCount\" debug outputs as", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Base Convert and Case Convert tools executing against the se" +
            "rver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignBaseConvertAndCaseConvertToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Base Convert and Case Convert tools executing against the se" +
                    "rver", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 37
   testRunner.Given("I have a workflow \"WorkflowWithAssignBaseConvertandCaseconvert\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table6.AddRow(new string[] {
                        "[[rec().a]]",
                        "50"});
            table6.AddRow(new string[] {
                        "[[rec().a]]",
                        "test"});
            table6.AddRow(new string[] {
                        "[[rec().a]]",
                        "100"});
#line 38
   testRunner.And("\"WorkflowWithAssignBaseConvertandCaseconvert\" contains an Assign \"Assign1\" as", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table7.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "UPPER"});
#line 43
   testRunner.And("\"WorkflowWithAssignBaseConvertandCaseconvert\" contains case convert \"Case to Conv" +
                    "ert\" as", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table8.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Text",
                        "Base 64"});
#line 46
   testRunner.And("\"WorkflowWithAssignBaseConvertandCaseconvert\" contains Base convert \"Base to Conv" +
                    "ert\" as", ((string)(null)), table8, "And ");
#line 49
   testRunner.When("\"WorkflowWithAssignBaseConvertandCaseconvert\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table9.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "50"});
            table9.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "test"});
            table9.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "100"});
#line 51
   testRunner.And("the \"Assign1\" in WorkFlow \"WorkflowWithAssignBaseConvertandCaseconvert\" debug inp" +
                    "uts as", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table10.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =  50"});
            table10.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =  test"});
            table10.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =  100"});
#line 56
    testRunner.And("the \"Assign1\" in Workflow \"WorkflowWithAssignBaseConvertandCaseconvert\" debug out" +
                    "puts as", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table11.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = test",
                        "UPPER"});
#line 61
   testRunner.And("the \"Case to Convert\" in WorkFlow \"WorkflowWithAssignBaseConvertandCaseconvert\" d" +
                    "ebug inputs as", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table12.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = TEST"});
#line 64
   testRunner.And("the \"Case to Convert\" in Workflow \"WorkflowWithAssignBaseConvertandCaseconvert\" d" +
                    "ebug outputs as", ((string)(null)), table12, "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table13.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 50",
                        "Text",
                        "Base 64"});
#line 67
   testRunner.And("the \"Base to Convert\" in WorkFlow \"WorkflowWithAssignBaseConvertandCaseconvert\" d" +
                    "ebug inputs as", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table14.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = NTA="});
#line 70
      testRunner.And("the \"Base to Convert\" in Workflow \"WorkflowWithAssignBaseConvertandCaseconvert\" d" +
                    "ebug outputs as", ((string)(null)), table14, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and 2 Delete tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAnd2DeleteToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and 2 Delete tools executing against the server", ((string[])(null)));
#line 75
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 76
   testRunner.Given("I have a workflow \"WorkflowWithAssignand2Deletetools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table15.AddRow(new string[] {
                        "[[rec().a]]",
                        "50"});
#line 77
   testRunner.And("\"WorkflowWithAssignand2Deletetools\" contains an Assign \"Assign to delete\" as", ((string)(null)), table15, "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "result"});
            table16.AddRow(new string[] {
                        "[[rec(1)]]",
                        "[[result1]]"});
#line 80
   testRunner.And("\"WorkflowWithAssignand2Deletetools\" contains Delete \"Delet1\" as", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "result"});
            table17.AddRow(new string[] {
                        "[[rec(1)]]",
                        "[[result2]]"});
#line 83
      testRunner.And("\"WorkflowWithAssignand2Deletetools\" contains Delete \"Delet2\" as", ((string)(null)), table17, "And ");
#line 86
   testRunner.When("\"WorkflowWithAssignand2Deletetools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 87
      testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table18.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "50"});
#line 88
   testRunner.And("the \"Assign to delete\" in WorkFlow \"WorkflowWithAssignand2Deletetools\" debug inpu" +
                    "ts as", ((string)(null)), table18, "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table19.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 50"});
#line 91
   testRunner.And("the \"Assign to delete\" in Workflow \"WorkflowWithAssignand2Deletetools\" debug outp" +
                    "uts as", ((string)(null)), table19, "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table20.AddRow(new string[] {
                        "[[rec(1).a]] = 50"});
#line 94
   testRunner.And("the \"Delet1\" in WorkFlow \"WorkflowWithAssignand2Deletetools\" debug inputs as", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table21.AddRow(new string[] {
                        "[[result1]] = Success"});
#line 97
   testRunner.And("the \"Delet1\" in Workflow \"WorkflowWithAssignand2Deletetools\" debug outputs as", ((string)(null)), table21, "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table22.AddRow(new string[] {
                        "[[rec(1)]] ="});
#line 100
   testRunner.And("the \"Delet2\" in WorkFlow \"WorkflowWithAssignand2Deletetools\" debug inputs as", ((string)(null)), table22, "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table23.AddRow(new string[] {
                        "[[result2]] = Failure"});
#line 103
   testRunner.And("the \"Delet2\" in Workflow \"WorkflowWithAssignand2Deletetools\" debug outputs as", ((string)(null)), table23, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with 3 Assigns tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWith3AssignsToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with 3 Assigns tools executing against the server", ((string[])(null)));
#line 107
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 108
   testRunner.Given("I have a workflow \"WorkflowWith3Assigntools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table24.AddRow(new string[] {
                        "[[rec().a]]",
                        "rec(1).a"});
#line 109
   testRunner.And("\"WorkflowWith3Assigntools\" contains an Assign \"Assigntool1\" as", ((string)(null)), table24, "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table25.AddRow(new string[] {
                        "[[test]]",
                        "rec(1).a"});
            table25.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Warewolf"});
#line 112
    testRunner.And("\"WorkflowWith3Assigntools\" contains an Assign \"Assigntool2\" as", ((string)(null)), table25, "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table26.AddRow(new string[] {
                        "[[new]]",
                        "[[[[test]]]]"});
#line 116
    testRunner.And("\"WorkflowWith3Assigntools\" contains an Assign \"Assigntool3\" as", ((string)(null)), table26, "And ");
#line 119
   testRunner.When("\"WorkflowWith3Assigntools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 120
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table27.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "rec(1).a"});
#line 121
   testRunner.And("the \"Assigntool1\" in WorkFlow \"WorkflowWith3Assigntools\" debug inputs as", ((string)(null)), table27, "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table28.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = rec(1).a"});
#line 124
   testRunner.And("the \"Assigntool1\" in Workflow \"WorkflowWith3Assigntools\" debug outputs as", ((string)(null)), table28, "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table29.AddRow(new string[] {
                        "1",
                        "[[test]] =",
                        "rec(1).a"});
            table29.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = rec(1).a",
                        "Warewolf"});
#line 127
   testRunner.And("the \"Assigntool2\" in WorkFlow \"WorkflowWith3Assigntools\" debug inputs as", ((string)(null)), table29, "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table30.AddRow(new string[] {
                        "1",
                        "[[test]] = rec(1).a"});
            table30.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = Warewolf"});
#line 131
   testRunner.And("the \"Assigntool2\" in Workflow \"WorkflowWith3Assigntools\" debug outputs as", ((string)(null)), table30, "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table31.AddRow(new string[] {
                        "1",
                        "[[new]] =",
                        "[[rec(1).a]] = Warewolf"});
#line 135
    testRunner.And("the \"Assigntool3\" in WorkFlow \"WorkflowWith3Assigntools\" debug inputs as", ((string)(null)), table31, "And ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table32.AddRow(new string[] {
                        "1",
                        "[[new]] = Warewolf"});
#line 138
   testRunner.And("the \"Assigntool3\" in Workflow \"WorkflowWith3Assigntools\" debug outputs as", ((string)(null)), table32, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Date and Time Difference tools executing against the ser" +
            "ver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndDateAndTimeDifferenceToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Date and Time Difference tools executing against the ser" +
                    "ver", ((string[])(null)));
#line 142
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 143
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndDateTimeDifferencetools1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table33.AddRow(new string[] {
                        "[[a]]",
                        "2014"});
            table33.AddRow(new string[] {
                        "[[b]]",
                        "10."});
#line 144
   testRunner.And("\"WorkflowWithAssignAndDateTimeDifferencetools1\" contains an Assign \"InputDates\" a" +
                    "s", ((string)(null)), table33, "And ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table34.AddRow(new string[] {
                        "2020/[[b]]/01",
                        "2030/01/01",
                        "yyyy/mm/dd",
                        "Years",
                        "[[result]]"});
#line 148
   testRunner.And("\"WorkflowWithAssignAndDateTimeDifferencetools1\" contains Date and Time Difference" +
                    " \"DateAndTime\" as", ((string)(null)), table34, "And ");
#line 151
   testRunner.When("\"WorkflowWithAssignAndDateTimeDifferencetools1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 152
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table35.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "2014"});
            table35.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "10."});
#line 153
   testRunner.And("the \"InputDates\" in WorkFlow \"WorkflowWithAssignAndDateTimeDifferencetools1\" debu" +
                    "g inputs as", ((string)(null)), table35, "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table36.AddRow(new string[] {
                        "1",
                        "[[a]] = 2014"});
            table36.AddRow(new string[] {
                        "2",
                        "[[b]] = 10.0"});
#line 157
   testRunner.And("the \"InputDates\" in Workflow \"WorkflowWithAssignAndDateTimeDifferencetools1\" debu" +
                    "g outputs as", ((string)(null)), table36, "And ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table37.AddRow(new string[] {
                        "2020/[[b]]/01 = 2020/10.0/01",
                        "2030/01/01",
                        "yyyy/mm/dd",
                        "Years"});
#line 161
   testRunner.And("the \"DateAndTime\" in WorkFlow \"WorkflowWithAssignAndDateTimeDifferencetools1\" deb" +
                    "ug inputs as", ((string)(null)), table37, "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table38.AddRow(new string[] {
                        "[[result]] ="});
#line 164
   testRunner.And("the \"DateAndTime\" in Workflow \"WorkflowWithAssignAndDateTimeDifferencetools1\" deb" +
                    "ug outputs as", ((string)(null)), table38, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns DataMerge and DataSplit executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignsDataMergeAndDataSplitExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns DataMerge and DataSplit executing against the server", ((string[])(null)));
#line 168
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 169
      testRunner.Given("I have a workflow \"WorkflowWithAssignDataMergeAndDataSplittools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table39.AddRow(new string[] {
                        "[[a]]",
                        "Test"});
            table39.AddRow(new string[] {
                        "[[b]]",
                        "Warewolf"});
            table39.AddRow(new string[] {
                        "[[split().a]]",
                        "Workflow"});
#line 170
   testRunner.And("\"WorkflowWithAssignDataMergeAndDataSplittools\" contains an Assign \"Assign To merg" +
                    "e\" as", ((string)(null)), table39, "And ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table40.AddRow(new string[] {
                        "[[a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
            table40.AddRow(new string[] {
                        "[[b]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
#line 175
   testRunner.And("\"WorkflowWithAssignDataMergeAndDataSplittools\" contains Data Merge \"Data Merge\" i" +
                    "nto \"[[result]]\" as", ((string)(null)), table40, "And ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table41.AddRow(new string[] {
                        "[[result]][[split().a]]",
                        "[[rec().b]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table41.AddRow(new string[] {
                        "",
                        "[[rec().b]]",
                        "Index",
                        "8",
                        "Unselected",
                        ""});
#line 179
   testRunner.And("\"WorkflowWithAssignDataMergeAndDataSplittools\" contains Data Split \"Data Split\" a" +
                    "s", ((string)(null)), table41, "And ");
#line 183
   testRunner.When("\"WorkflowWithAssignDataMergeAndDataSplittools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 184
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table42.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "Test"});
            table42.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "Warewolf"});
            table42.AddRow(new string[] {
                        "3",
                        "[[split().a]] =",
                        "Workflow"});
#line 185
   testRunner.And("the \"Assign To merge\" in WorkFlow \"WorkflowWithAssignDataMergeAndDataSplittools\" " +
                    "debug inputs as", ((string)(null)), table42, "And ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table43.AddRow(new string[] {
                        "1",
                        "[[a]]         =  Test"});
            table43.AddRow(new string[] {
                        "2",
                        "[[b]]         =  Warewolf"});
            table43.AddRow(new string[] {
                        "3",
                        "[[split(1).a]] =  Workflow"});
#line 190
  testRunner.And("the \"Assign To merge\" in Workflow \"WorkflowWithAssignDataMergeAndDataSplittools\" " +
                    "debug outputs as", ((string)(null)), table43, "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table44.AddRow(new string[] {
                        "1",
                        "[[a]] = Test",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
            table44.AddRow(new string[] {
                        "2",
                        "[[b]] = Warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
#line 195
   testRunner.And("the \"Data Merge\" in WorkFlow \"WorkflowWithAssignDataMergeAndDataSplittools\" debug" +
                    " inputs as", ((string)(null)), table44, "And ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table45.AddRow(new string[] {
                        "[[result]] = TestWarewolf"});
#line 199
   testRunner.And("the \"Data Merge\" in Workflow \"WorkflowWithAssignDataMergeAndDataSplittools\" debug" +
                    " outputs as", ((string)(null)), table45, "And ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table46.AddRow(new string[] {
                        "[[result]][[split().a]] = TestWarewolfWorkflow",
                        "Forward",
                        "No",
                        "1",
                        "[[rec().b]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
            table46.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[rec().b]] =",
                        "Index",
                        "8",
                        "No",
                        ""});
#line 202
   testRunner.And("the \"Data Split\" in WorkFlow \"WorkflowWithAssignDataMergeAndDataSplittools\" debug" +
                    " inputs as", ((string)(null)), table46, "And ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table47.AddRow(new string[] {
                        "1",
                        "[[rec(1).b]] = Test"});
            table47.AddRow(new string[] {
                        "",
                        "[[rec(2).b]] = Warewolf"});
            table47.AddRow(new string[] {
                        "",
                        "[[rec(3).b]] = Work"});
            table47.AddRow(new string[] {
                        "",
                        "[[rec(4).b]] = flow"});
#line 206
   testRunner.And("the \"Data Split\" in Workflow \"WorkflowWithAssignDataMergeAndDataSplittools\" debug" +
                    " outputs as", ((string)(null)), table47, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns and DataSplit executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignsAndDataSplitExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns and DataSplit executing against the server", ((string[])(null)));
#line 213
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 214
      testRunner.Given("I have a workflow \"WorkflowWithAssignandDataSplittools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table48.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table48.AddRow(new string[] {
                        "[[b]]",
                        "2"});
            table48.AddRow(new string[] {
                        "[[rs(1).a]]",
                        "test"});
#line 215
   testRunner.And("\"WorkflowWithAssignandDataSplittools\" contains an Assign \"splitvalues1\" as", ((string)(null)), table48, "And ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table49.AddRow(new string[] {
                        "[[test]]",
                        "warewolf"});
#line 220
    testRunner.And("\"WorkflowWithAssignandDataSplittools\" contains an Assign \"splitvalues2\" as", ((string)(null)), table49, "And ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table50.AddRow(new string[] {
                        "[[[[rs(1).a]]]]",
                        "[[rec(1).a]]",
                        "Index",
                        "[[[[a]]]]",
                        "Unselected",
                        ""});
#line 223
   testRunner.And("\"WorkflowWithAssignandDataSplittools\" contains Data Split \"DataSpliting\" as", ((string)(null)), table50, "And ");
#line 226
   testRunner.When("\"WorkflowWithAssignandDataSplittools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 227
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table51.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table51.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "2"});
            table51.AddRow(new string[] {
                        "3",
                        "[[rs(1).a]] =",
                        "test"});
#line 228
   testRunner.And("the \"splitvalues1\" in WorkFlow \"WorkflowWithAssignandDataSplittools\" debug inputs" +
                    " as", ((string)(null)), table51, "And ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table52.AddRow(new string[] {
                        "1",
                        "[[a]]         =  b"});
            table52.AddRow(new string[] {
                        "2",
                        "[[b]]         =  2"});
            table52.AddRow(new string[] {
                        "3",
                        "[[rs(1).a]]   =  test"});
#line 233
  testRunner.And("the \"splitvalues1\" in Workflow \"WorkflowWithAssignandDataSplittools\" debug output" +
                    "s as", ((string)(null)), table52, "And ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table53.AddRow(new string[] {
                        "1",
                        "[[test]] =",
                        "warewolf"});
#line 238
  testRunner.And("the \"splitvalues2\" in WorkFlow \"WorkflowWithAssignandDataSplittools\" debug inputs" +
                    " as", ((string)(null)), table53, "And ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table54.AddRow(new string[] {
                        "1",
                        "[[test]] =  warewolf"});
#line 241
  testRunner.And("the \"splitvalues2\" in Workflow \"WorkflowWithAssignandDataSplittools\" debug output" +
                    "s as", ((string)(null)), table54, "And ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table55.AddRow(new string[] {
                        "[[test]] = warewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[rec(1).a]] =",
                        "Index",
                        "[[b]] = 2",
                        "No",
                        ""});
#line 244
   testRunner.And("the \"DataSpliting\" in WorkFlow \"WorkflowWithAssignandDataSplittools\" debug inputs" +
                    " as", ((string)(null)), table55, "And ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table56.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = lf"});
#line 247
   testRunner.And("the \"DataSpliting\" in Workflow \"WorkflowWithAssignandDataSplittools\" debug output" +
                    "s as", ((string)(null)), table56, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Sequence(Assign, Datamerge, Data Split, Find Index and R" +
            "eplace) executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndSequenceAssignDatamergeDataSplitFindIndexAndReplaceExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Sequence(Assign, Datamerge, Data Split, Find Index and R" +
                    "eplace) executing against the server", ((string[])(null)));
#line 251
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 252
      testRunner.Given("I have a workflow \"workflowithAssignandsequence\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table57.AddRow(new string[] {
                        "[[rec().a]]",
                        "test"});
            table57.AddRow(new string[] {
                        "[[rec().b]]",
                        "nothing"});
            table57.AddRow(new string[] {
                        "[[rec().a]]",
                        "warewolf"});
            table57.AddRow(new string[] {
                        "[[rec().b]]",
                        "nothing"});
#line 253
       testRunner.And("\"workflowithAssignandsequence\" contains an Assign \"Assign for sequence\" as", ((string)(null)), table57, "And ");
#line 259
      testRunner.And("\"workflowithAssignandsequence\" contains a Sequence \"Test1\" as", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table58.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
            table58.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
#line 260
   testRunner.And("\"Test1\" contains Data Merge \"Data Merge\" into \"[[result]]\" as", ((string)(null)), table58, "And ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table59.AddRow(new string[] {
                        "testwarewolf",
                        "[[rec(1).b]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table59.AddRow(new string[] {
                        "",
                        "[[rec(2).b]]",
                        "Index",
                        "8",
                        "Unselected",
                        ""});
#line 264
   testRunner.And("\"Test1\" contains Data Split \"Data Split\" as", ((string)(null)), table59, "And ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Index",
                        "Character",
                        "Direction"});
            table60.AddRow(new string[] {
                        "[[rec().a]]",
                        "First Occurence",
                        "e",
                        "Left to Right"});
#line 268
   testRunner.And("\"Test1\" contains Find Index \"Index\" into \"[[indexResult]]\" as", ((string)(null)), table60, "And ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table61.AddRow(new string[] {
                        "[[rec(*)]]",
                        "e",
                        "REPLACED"});
#line 271
   testRunner.And("\"Test1\" contains Replace \"Replacing\" into \"[[replaceResult]]\" as", ((string)(null)), table61, "And ");
#line 274
   testRunner.When("\"workflowithAssignandsequence\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 275
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table62.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "test"});
            table62.AddRow(new string[] {
                        "2",
                        "[[rec().b]] =",
                        "nothing"});
            table62.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "warewolf"});
            table62.AddRow(new string[] {
                        "4",
                        "[[rec().b]] =",
                        "nothing"});
#line 276
   testRunner.And("the \"Assign for sequence\" in WorkFlow \"workflowithAssignandsequence\" debug inputs" +
                    " as", ((string)(null)), table62, "And ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table63.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = test"});
            table63.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = nothing"});
            table63.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]] = warewolf"});
            table63.AddRow(new string[] {
                        "4",
                        "[[rec(2).b]] = nothing"});
#line 282
    testRunner.And("the \"Assign for sequence\" in Workflow \"workflowithAssignandsequence\" debug output" +
                    "s as", ((string)(null)), table63, "And ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table64.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = test",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
            table64.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
#line 288
   testRunner.And("the \"Data Merge\" in WorkFlow \"Test1\" debug inputs as", ((string)(null)), table64, "And ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table65.AddRow(new string[] {
                        "[[result]] = testwarewolf"});
#line 292
   testRunner.And("the \"Data Merge\" in Workflow \"Test1\" debug outputs as", ((string)(null)), table65, "And ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table66.AddRow(new string[] {
                        "testwarewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[rec(1).b]] = nothing",
                        "Index",
                        "4",
                        "No",
                        ""});
            table66.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[rec(2).b]] = nothing",
                        "Index",
                        "8",
                        "No",
                        ""});
#line 295
   testRunner.And("the \"Data Split\" in WorkFlow \"Test1\" debug inputs as", ((string)(null)), table66, "And ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table67.AddRow(new string[] {
                        "1",
                        "[[rec(1).b]] = test"});
            table67.AddRow(new string[] {
                        "2",
                        "[[rec(2).b]] = warewolf"});
#line 299
   testRunner.And("the \"Data Split\" in Workflow \"Test1\" debug outputs as", ((string)(null)), table67, "And ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table68.AddRow(new string[] {
                        "[[rec(2).a]] = warewolf",
                        "First Occurence",
                        "e",
                        "Left to Right"});
#line 303
      testRunner.And("the \"Index\" in WorkFlow \"Test1\" debug inputs as", ((string)(null)), table68, "And ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table69.AddRow(new string[] {
                        "[[indexResult]] = 4"});
#line 306
   testRunner.And("the \"Index\" in Workflow \"Test1\" debug outputs as", ((string)(null)), table69, "And ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table70.AddRow(new string[] {
                        "[[rec(1).a]] = test",
                        "",
                        ""});
            table70.AddRow(new string[] {
                        "[[rec(2).a]] = warewolf",
                        "",
                        ""});
            table70.AddRow(new string[] {
                        "[[rec(1).b]] = test",
                        "",
                        ""});
            table70.AddRow(new string[] {
                        "[[rec(2).b]] = warewolf",
                        "e",
                        "REPLACED"});
#line 309
   testRunner.And("the \"Replacing\" in WorkFlow \"Test1\" debug inputs as", ((string)(null)), table70, "And ");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table71.AddRow(new string[] {
                        "[[rec(1).a]] = tREPLACEDst"});
            table71.AddRow(new string[] {
                        "[[rec(2).a]] = warREPLACEDwolf"});
            table71.AddRow(new string[] {
                        "[[rec(1).b]] = tREPLACEDst"});
            table71.AddRow(new string[] {
                        "[[rec(2).b]] = warREPLACEDwolf"});
            table71.AddRow(new string[] {
                        "[[replaceResult]] = 4"});
#line 315
   testRunner.And("the \"Replacing\" in Workflow \"Test1\" debug outputs as", ((string)(null)), table71, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Create and Delete folder tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignCreateAndDeleteFolderToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Create and Delete folder tools executing against the server", ((string[])(null)));
#line 323
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 324
   testRunner.Given("I have a workflow \"WorkflowWithAssignCreateandDeleteRecord\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table72.AddRow(new string[] {
                        "[[rec().a]]",
                        "C:\\copied00.txt"});
#line 325
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecord\" contains an Assign \"Assign to create\" a" +
                    "s", ((string)(null)), table72, "And ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "If it exits",
                        "Username",
                        "Password",
                        "Result"});
            table73.AddRow(new string[] {
                        "[[rec().a]]",
                        "True",
                        "",
                        "",
                        "[[res1]]"});
#line 328
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecord\" contains an Create \"Create1\" as", ((string)(null)), table73, "And ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset",
                        "Result"});
            table74.AddRow(new string[] {
                        "[[rec().a]]",
                        "[[res2]]"});
#line 331
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecord\" contains an Delete Folder \"DeleteFolder" +
                    "\" as", ((string)(null)), table74, "And ");
#line 334
   testRunner.When("\"WorkflowWithAssignCreateandDeleteRecord\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 335
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table75.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "C:\\copied00.txt"});
#line 336
   testRunner.And("the \"Assign to create\" in WorkFlow \"WorkflowWithAssignCreateandDeleteRecord\" debu" +
                    "g inputs as", ((string)(null)), table75, "And ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table76.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = C:\\copied00.txt"});
#line 339
   testRunner.And("the \"Assign to create\" in Workflow \"WorkflowWithAssignCreateandDeleteRecord\" debu" +
                    "g outputs as", ((string)(null)), table76, "And ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "Overwrite",
                        "Username",
                        "Password"});
            table77.AddRow(new string[] {
                        "[[rec(1).a]] = C:\\copied00.txt",
                        "True",
                        "\"\"",
                        "\"\""});
#line 342
  testRunner.And("the \"Create1\" in WorkFlow \"WorkflowWithAssignCreateandDeleteRecord\" debug inputs " +
                    "as", ((string)(null)), table77, "And ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table78.AddRow(new string[] {
                        "[[res1]] = Success"});
#line 345
    testRunner.And("the \"Create1\" in Workflow \"WorkflowWithAssignCreateandDeleteRecord\" debug outputs" +
                    " as", ((string)(null)), table78, "And ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input Path",
                        "Username",
                        "Password"});
            table79.AddRow(new string[] {
                        "[[rec(1).a]] = C:\\copied00.txt",
                        "\"\"",
                        "\"\""});
#line 348
   testRunner.And("the \"DeleteFolder\" in WorkFlow \"WorkflowWithAssignCreateandDeleteRecord\" debug in" +
                    "puts as", ((string)(null)), table79, "And ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table80.AddRow(new string[] {
                        "[[res2]] = Success"});
#line 351
   testRunner.And("the \"DeleteFolder\" in Workflow \"WorkflowWithAssignCreateandDeleteRecord\" debug ou" +
                    "tputs as", ((string)(null)), table80, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Create and Delete Record tools with incorrect input path exe" +
            "cuting against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignCreateAndDeleteRecordToolsWithIncorrectInputPathExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Create and Delete Record tools with incorrect input path exe" +
                    "cuting against the server", ((string[])(null)));
#line 355
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 356
   testRunner.Given("I have a workflow \"WorkflowWithAssignCreateDeleteRecordNoneExist1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table81.AddRow(new string[] {
                        "[[rec().a]]",
                        "create.txt"});
#line 357
   testRunner.And("\"WorkflowWithAssignCreateDeleteRecordNoneExist1\" contains an Assign \"Assign to cr" +
                    "eate\" as", ((string)(null)), table81, "And ");
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "If it exits",
                        "Username",
                        "Password",
                        "Result"});
            table82.AddRow(new string[] {
                        "[[rec().a]]",
                        "True",
                        "",
                        "",
                        "[[res1]]"});
#line 360
   testRunner.And("\"WorkflowWithAssignCreateDeleteRecordNoneExist1\" contains an Create \"Create1\" as", ((string)(null)), table82, "And ");
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "File Or Folder",
                        "Result"});
            table83.AddRow(new string[] {
                        "[[rec().a]]",
                        "[[res1]]"});
#line 363
   testRunner.And("\"WorkflowWithAssignCreateDeleteRecordNoneExist1\" contains an Delete \"Delete\" as", ((string)(null)), table83, "And ");
#line 366
   testRunner.When("\"WorkflowWithAssignCreateDeleteRecordNoneExist1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 367
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table84.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "create.txt"});
#line 368
   testRunner.And("the \"Assign to create\" in WorkFlow \"WorkflowWithAssignCreateDeleteRecordNoneExist" +
                    "1\" debug inputs as", ((string)(null)), table84, "And ");
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table85.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = create.txt"});
#line 371
   testRunner.And("the \"Assign to create\" in Workflow \"WorkflowWithAssignCreateDeleteRecordNoneExist" +
                    "1\" debug outputs as", ((string)(null)), table85, "And ");
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "Overwrite",
                        "Username",
                        "Password"});
            table86.AddRow(new string[] {
                        "[[rec(1).a]] = create.txt",
                        "True",
                        "\" \"",
                        "\" \""});
#line 374
   testRunner.And("the \"Create1\" in WorkFlow \"WorkflowWithAssignCreateDeleteRecordNoneExist1\" debug " +
                    "inputs as", ((string)(null)), table86, "And ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table87.AddRow(new string[] {
                        "[[res1]] = Failure"});
#line 377
   testRunner.And("the \"Create1\" in Workflow \"WorkflowWithAssignCreateDeleteRecordNoneExist1\" debug " +
                    "outputs as", ((string)(null)), table87, "And ");
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input Path",
                        "Username",
                        "Password"});
            table88.AddRow(new string[] {
                        "[[rec(1).a]] = create.txt",
                        "\" \"",
                        "\" \""});
#line 380
   testRunner.And("the \"Delete\" in WorkFlow \"WorkflowWithAssignCreateDeleteRecordNoneExist1\" debug i" +
                    "nputs as", ((string)(null)), table88, "And ");
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table89.AddRow(new string[] {
                        "[[res1]] = Failure"});
#line 383
   testRunner.And("the \"Delete\" in Workflow \"WorkflowWithAssignCreateDeleteRecordNoneExist1\" debug o" +
                    "utputs as", ((string)(null)), table89, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with 2 Assign tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWith2AssignToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with 2 Assign tools executing against the server", ((string[])(null)));
#line 387
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 388
   testRunner.Given("I have a workflow \"WorkflowWith2Assigntools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table90.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table90.AddRow(new string[] {
                        "[[b]]",
                        "test"});
            table90.AddRow(new string[] {
                        "[[test]]",
                        "warewolf"});
#line 389
   testRunner.And("\"WorkflowWith2Assigntools\" contains an Assign \"tool1\" as", ((string)(null)), table90, "And ");
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table91.AddRow(new string[] {
                        "[[[[a]]]]",
                        "[[[[[[a]]]]]]"});
#line 394
   testRunner.And("\"WorkflowWith2Assigntools\" contains an Assign \"tool2\" as", ((string)(null)), table91, "And ");
#line 397
   testRunner.When("\"WorkflowWith2Assigntools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 398
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table92.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table92.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
            table92.AddRow(new string[] {
                        "3",
                        "[[test]] =",
                        "warewolf"});
#line 399
   testRunner.And("the \"tool1\" in WorkFlow \"WorkflowWith2Assigntools\" debug inputs as", ((string)(null)), table92, "And ");
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table93.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table93.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
            table93.AddRow(new string[] {
                        "3",
                        "[[test]] = warewolf"});
#line 404
   testRunner.And("the \"tool1\" in Workflow \"WorkflowWith2Assigntools\" debug outputs as", ((string)(null)), table93, "And ");
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table94.AddRow(new string[] {
                        "1",
                        "[[b]] = test",
                        "[[test]] = warewolf"});
#line 409
   testRunner.And("the \"tool2\" in WorkFlow \"WorkflowWith2Assigntools\" debug inputs as", ((string)(null)), table94, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with 2 Assign tools by using recordsets in fields executing against the " +
            "server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWith2AssignToolsByUsingRecordsetsInFieldsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with 2 Assign tools by using recordsets in fields executing against the " +
                    "server", ((string[])(null)));
#line 413
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 414
   testRunner.Given("I have a workflow \"WorkflowWith2Assigntoolswithrecordsets\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table95.AddRow(new string[] {
                        "[[rec().a]]",
                        "rec(2).a"});
            table95.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "test"});
#line 415
   testRunner.And("\"WorkflowWith2Assigntoolswithrecordsets\" contains an Assign \"rec1\" as", ((string)(null)), table95, "And ");
#line hidden
            TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table96.AddRow(new string[] {
                        "[[[[rec(1).a]]]]",
                        "warewolf"});
#line 419
   testRunner.And("\"WorkflowWith2Assigntoolswithrecordsets\" contains an Assign \"rec2\" as", ((string)(null)), table96, "And ");
#line 422
   testRunner.When("\"WorkflowWith2Assigntoolswithrecordsets\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 423
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table97.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "rec(2).a"});
            table97.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =",
                        "test"});
#line 424
   testRunner.And("the \"rec1\" in WorkFlow \"WorkflowWith2Assigntoolswithrecordsets\" debug inputs as", ((string)(null)), table97, "And ");
#line hidden
            TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table98.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = rec(2).a"});
            table98.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = test"});
#line 428
   testRunner.And("the \"rec1\" in Workflow \"WorkflowWith2Assigntoolswithrecordsets\" debug outputs as", ((string)(null)), table98, "And ");
#line hidden
            TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table99.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = test",
                        "warewolf"});
#line 432
   testRunner.And("the \"rec2\" in WorkFlow \"WorkflowWith2Assigntoolswithrecordsets\" debug inputs as", ((string)(null)), table99, "And ");
#line hidden
            TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table100.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] =  warewolf"});
#line 435
   testRunner.And("the \"rec2\" in Workflow \"WorkflowWith2Assigntoolswithrecordsets\" debug outputs as", ((string)(null)), table100, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with 2 Assign tools by using Scalars as variables executing against the " +
            "server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWith2AssignToolsByUsingScalarsAsVariablesExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with 2 Assign tools by using Scalars as variables executing against the " +
                    "server", ((string[])(null)));
#line 439
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 440
   testRunner.Given("I have a workflow \"WorkflowWith2Assigntoolswithrscalars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table101.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table101.AddRow(new string[] {
                        "[[b]]",
                        "test"});
#line 441
   testRunner.And("\"WorkflowWith2Assigntoolswithscalars\" contains an Assign \"scl1\" as", ((string)(null)), table101, "And ");
#line hidden
            TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table102.AddRow(new string[] {
                        "[[[[a]]]]",
                        "warewolf"});
#line 445
   testRunner.And("\"WorkflowWith2Assigntoolswithrscalars\" contains an Assign \"scl2\" as", ((string)(null)), table102, "And ");
#line 448
   testRunner.When("\"WorkflowWith2Assigntoolswithrscalars\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 449
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table103.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table103.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
#line 450
   testRunner.And("the \"scl1\" in WorkFlow \"WorkflowWith2Assigntoolswithrscalars\" debug inputs as", ((string)(null)), table103, "And ");
#line hidden
            TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table104.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table104.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
#line 454
   testRunner.And("the \"scl1\" in Workflow \"WorkflowWith2Assigntoolswithrscalars\" debug outputs as", ((string)(null)), table104, "And ");
#line hidden
            TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table105.AddRow(new string[] {
                        "1",
                        "[[b]] =",
                        "warewolf"});
#line 458
   testRunner.And("the \"scl2\" in WorkFlow \"WorkflowWith2Assigntoolswithrscalars\" debug inputs as", ((string)(null)), table105, "And ");
#line hidden
            TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table106.AddRow(new string[] {
                        "1",
                        "[[b]] =  warewolf"});
#line 461
   testRunner.And("the \"scl2\" in Workflow \"WorkflowWith2Assigntoolswithrscalars\" debug outputs as", ((string)(null)), table106, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Count Data Merge and 2 Delete  tools executing against the s" +
            "erver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignCountDataMergeAnd2DeleteToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Count Data Merge and 2 Delete  tools executing against the s" +
                    "erver", ((string[])(null)));
#line 465
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 466
   testRunner.Given("I have a workflow \"WorkflowWithAssignCountDataMerge&2Delete\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table107.AddRow(new string[] {
                        "[[rec().a]]",
                        "21"});
            table107.AddRow(new string[] {
                        "[[rec().a]]",
                        "22"});
            table107.AddRow(new string[] {
                        "[[rec().a]]",
                        ""});
#line 467
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains an Assign \"countrecordval1\" a" +
                    "s", ((string)(null)), table107, "And ");
#line 472
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains Count Record \"Cnt1\" on \"[[rec" +
                    "()]]\" into \"[[result1]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "result"});
            table108.AddRow(new string[] {
                        "[[rec()]]",
                        "[[result2]]"});
#line 473
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains Delete \"Delrec\" as", ((string)(null)), table108, "And ");
#line hidden
            TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table109.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Index",
                        "2",
                        "",
                        "Left"});
            table109.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "Index",
                        "2",
                        "",
                        "Left"});
#line 476
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains Data Merge \"DataMerge1\" into " +
                    "\"[[rec().a]]\" as", ((string)(null)), table109, "And ");
#line 480
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains Count Record \"Cnt2\" on \"[[rec" +
                    "()]]\" into \"[[result3]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 481
   testRunner.When("\"WorkflowWithAssignCountDataMerge&2Delete\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 482
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table110.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "21"});
            table110.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "22"});
            table110.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "\"\""});
#line 483
   testRunner.And("the \"countrecordval1\" in WorkFlow \"WorkflowWithAssignCountDataMerge&2Delete\" debu" +
                    "g inputs as", ((string)(null)), table110, "And ");
#line hidden
            TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table111.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 21"});
            table111.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 22"});
            table111.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] ="});
#line 488
   testRunner.And("the \"countrecordval1\" in Workflow \"WorkflowWithAssignCountDataMerge&2Delete\" debu" +
                    "g outputs as", ((string)(null)), table111, "And ");
#line hidden
            TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table112.AddRow(new string[] {
                        "[[rec(1).a]] = 21"});
            table112.AddRow(new string[] {
                        "[[rec(2).a]] = 22"});
            table112.AddRow(new string[] {
                        "[[rec(3).a]] ="});
#line 493
   testRunner.And("the \"Cnt1\" in WorkFlow \"WorkflowWithAssignCountDataMerge&2Delete\" debug inputs as" +
                    "", ((string)(null)), table112, "And ");
#line hidden
            TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table113.AddRow(new string[] {
                        "[[result1]] = 3"});
#line 498
   testRunner.And("the \"Cnt1\" in Workflow \"WorkflowWithAssignCountDataMerge&2Delete\" debug outputs a" +
                    "s", ((string)(null)), table113, "And ");
#line hidden
            TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table114.AddRow(new string[] {
                        "[[rec(3).a]] ="});
#line 501
   testRunner.And("the \"Delrec\" in WorkFlow \"WorkflowWithAssignCountDataMerge&2Delete\" debug inputs " +
                    "as", ((string)(null)), table114, "And ");
#line hidden
            TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table115.AddRow(new string[] {
                        "[[result2]] = Success"});
#line 504
   testRunner.And("the \"Delrec\" in Workflow \"WorkflowWithAssignCountDataMerge&2Delete\" debug outputs" +
                    " as", ((string)(null)), table115, "And ");
#line hidden
            TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table116.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 21",
                        "Index",
                        "\"2\"",
                        "\"\"",
                        "Left"});
            table116.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 22",
                        "Index",
                        "\"2\"",
                        "\"\"",
                        "Left"});
#line 507
   testRunner.And("the \"DataMerge1\" in WorkFlow \"WorkflowWithAssignCountDataMerge&2Delete\" debug inp" +
                    "uts as", ((string)(null)), table116, "And ");
#line hidden
            TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table117.AddRow(new string[] {
                        "[[rec(3).a]] = 2122"});
#line 511
   testRunner.And("the \"DataMerge1\" in Workflow \"WorkflowWithAssignCountDataMerge&2Delete\" debug out" +
                    "puts as", ((string)(null)), table117, "And ");
#line hidden
            TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table118.AddRow(new string[] {
                        "[[rec(1).a]] = 21"});
            table118.AddRow(new string[] {
                        "[[rec(2).a]] = 22"});
            table118.AddRow(new string[] {
                        "[[rec(3).a]] = 2122"});
#line 514
    testRunner.And("the \"Cnt2\" in WorkFlow \"WorkflowWithAssignCountDataMerge&2Delete\" debug inputs as" +
                    "", ((string)(null)), table118, "And ");
#line hidden
            TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table119.AddRow(new string[] {
                        "[[result3]] = 3"});
#line 519
   testRunner.And("the \"Cnt2\" in Workflow \"WorkflowWithAssignCountDataMerge&2Delete\" debug outputs a" +
                    "s", ((string)(null)), table119, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with multiple tools Assign and SQL Bulk Insert executing against the ser" +
            "ver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithMultipleToolsAssignAndSQLBulkInsertExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with multiple tools Assign and SQL Bulk Insert executing against the ser" +
                    "ver", ((string[])(null)));
#line 523
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 524
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndSQLBulkInsert\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table120.AddRow(new string[] {
                        "[[rec().a]]",
                        "Warewolf"});
#line 525
   testRunner.And("\"WorkflowWithAssignAndSQLBulkInsert\" contains an Assign \"InsertData\" as", ((string)(null)), table120, "And ");
#line hidden
            TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column",
                        "Mapping",
                        "IsNullable",
                        "DataTypeName",
                        "MaxLength",
                        "IsAutoIncrement"});
            table121.AddRow(new string[] {
                        "Id",
                        "",
                        "false",
                        "int",
                        "",
                        "true"});
            table121.AddRow(new string[] {
                        "Name",
                        "[[rec().a]]",
                        "false",
                        "varchar",
                        "50",
                        "false"});
            table121.AddRow(new string[] {
                        "Email",
                        "Warewolf@dev2.co.za",
                        "false",
                        "varchar",
                        "50",
                        "false"});
#line 528
   testRunner.And("\"WorkflowWithAssignAndSQLBulkInsert\" contains an SQL Bulk Insert \"BulkInsert\" usi" +
                    "ng database \"testingDBSrc\" and table \"dbo.MailingList\" and KeepIdentity set \"fal" +
                    "se\" and Result set \"[[result]]\" as", ((string)(null)), table121, "And ");
#line 533
   testRunner.When("\"WorkflowWithAssignAndSQLBulkInsert\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 534
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table122.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Warewolf"});
#line 535
   testRunner.And("the \"InsertData\" in WorkFlow \"WorkflowWithAssignAndSQLBulkInsert\" debug inputs as" +
                    "", ((string)(null)), table122, "And ");
#line hidden
            TechTalk.SpecFlow.Table table123 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table123.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Warewolf"});
#line 538
   testRunner.And("the \"InsertData\" in Workflow \"WorkflowWithAssignAndSQLBulkInsert\" debug outputs a" +
                    "s", ((string)(null)), table123, "And ");
#line hidden
            TechTalk.SpecFlow.Table table124 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table124.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Warewolf",
                        "Name",
                        "varchar (50)",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table124.AddRow(new string[] {
                        "2",
                        "Warewolf@dev2.co.za",
                        "Email",
                        "varchar (50)",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table124.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "0",
                        "0",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "YES"});
#line 541
   testRunner.And("the \"BulkInsert\" in WorkFlow \"WorkflowWithAssignAndSQLBulkInsert\" debug inputs as" +
                    "", ((string)(null)), table124, "And ");
#line hidden
            TechTalk.SpecFlow.Table table125 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table125.AddRow(new string[] {
                        "[[result]] = Success"});
#line 546
   testRunner.And("the \"BulkInsert\" in Workflow \"WorkflowWithAssignAndSQLBulkInsert\" debug outputs a" +
                    "s", ((string)(null)), table125, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with multiple tools Assign and SQL Bulk Insert with negative Recordset I" +
            "ndex executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithMultipleToolsAssignAndSQLBulkInsertWithNegativeRecordsetIndexExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with multiple tools Assign and SQL Bulk Insert with negative Recordset I" +
                    "ndex executing against the server", ((string[])(null)));
#line 550
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 551
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndSQLBulk\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table126 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table126.AddRow(new string[] {
                        "[[rec().a]]",
                        "Warewolf"});
#line 552
   testRunner.And("\"WorkflowWithAssignAndSQLBulk\" contains an Assign \"InsertData\" as", ((string)(null)), table126, "And ");
#line hidden
            TechTalk.SpecFlow.Table table127 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column",
                        "Mapping",
                        "IsNullable",
                        "DataTypeName",
                        "MaxLength",
                        "IsAutoIncrement"});
            table127.AddRow(new string[] {
                        "Id",
                        "",
                        "false",
                        "int",
                        "",
                        "true"});
            table127.AddRow(new string[] {
                        "Name",
                        "[[rec(-1).a]]",
                        "false",
                        "varchar",
                        "50",
                        "false"});
            table127.AddRow(new string[] {
                        "Email",
                        "Warewolf@dev2.co.za",
                        "false",
                        "varchar",
                        "50",
                        "false"});
#line 555
   testRunner.And("\"WorkflowWithAssignAndSQLBulk\" contains an SQL Bulk Insert \"BulkInsert\" using dat" +
                    "abase \"testingDBSrc\" and table \"dbo.MailingList\" and KeepIdentity set \"false\" an" +
                    "d Result set \"[[result]]\" as", ((string)(null)), table127, "And ");
#line 560
   testRunner.When("\"WorkflowWithAssignAndSQLBulk\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 561
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table128 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table128.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Warewolf"});
#line 562
   testRunner.And("the \"InsertData\" in WorkFlow \"WorkflowWithAssignAndSQLBulk\" debug inputs as", ((string)(null)), table128, "And ");
#line hidden
            TechTalk.SpecFlow.Table table129 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table129.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Warewolf"});
#line 565
   testRunner.And("the \"InsertData\" in Workflow \"WorkflowWithAssignAndSQLBulk\" debug outputs as", ((string)(null)), table129, "And ");
#line hidden
            TechTalk.SpecFlow.Table table130 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table130.AddRow(new string[] {
                        "1",
                        "[[rec(-1).a]] =",
                        "Name",
                        "varchar (50)",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table130.AddRow(new string[] {
                        "2",
                        "Warewolf@dev2.co.za",
                        "Email",
                        "varchar (50)",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 568
   testRunner.And("the \"BulkInsert\" in WorkFlow \"WorkflowWithAssignAndSQLBulk\" debug inputs as", ((string)(null)), table130, "And ");
#line hidden
            TechTalk.SpecFlow.Table table131 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table131.AddRow(new string[] {
                        "[[result]] = Failure"});
#line 572
   testRunner.And("the \"BulkInsert\" in Workflow \"WorkflowWithAssignAndSQLBulk\" debug outputs as", ((string)(null)), table131, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Base Convert(Evaluating scalar variable inside va" +
            "riable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndBaseConvertEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Base Convert(Evaluating scalar variable inside va" +
                    "riable)executing against the server", ((string[])(null)));
#line 576
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 577
  testRunner.Given("I have a workflow \"WorkflowWithAssignandBase\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table132 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table132.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table132.AddRow(new string[] {
                        "[[b]]",
                        "12"});
#line 578
  testRunner.And("\"WorkflowWithAssignandBase\" contains an Assign \"Base Var\" as", ((string)(null)), table132, "And ");
#line hidden
            TechTalk.SpecFlow.Table table133 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table133.AddRow(new string[] {
                        "[[[[a]]]]",
                        "Text",
                        "Base 64"});
#line 582
    testRunner.And("\"WorkflowWithAssignandBase\" contains Base convert \"Base\" as", ((string)(null)), table133, "And ");
#line 585
   testRunner.When("\"WorkflowWithAssignandBase\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 586
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table134 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table134.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table134.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "12"});
#line 587
   testRunner.And("the \"Base Var\" in WorkFlow \"WorkflowWithAssignandBase\" debug inputs as", ((string)(null)), table134, "And ");
#line hidden
            TechTalk.SpecFlow.Table table135 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table135.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table135.AddRow(new string[] {
                        "2",
                        "[[b]] = 12"});
#line 591
   testRunner.And("the \"Base Var\" in Workflow \"WorkflowWithAssignandBase\" debug outputs as", ((string)(null)), table135, "And ");
#line hidden
            TechTalk.SpecFlow.Table table136 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table136.AddRow(new string[] {
                        "1",
                        "[[b]] = 12",
                        "Text",
                        "Base 64"});
#line 595
    testRunner.And("the \"Base\" in WorkFlow \"WorkflowWithAssignandBase\" debug inputs as", ((string)(null)), table136, "And ");
#line hidden
            TechTalk.SpecFlow.Table table137 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table137.AddRow(new string[] {
                        "1",
                        "[[b]] = MTI="});
#line 598
      testRunner.And("the \"Base\" in Workflow \"WorkflowWithAssignandBase\" debug outputs as", ((string)(null)), table137, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Base Convert(Evaluating Recordset variable inside" +
            " variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndBaseConvertEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Base Convert(Evaluating Recordset variable inside" +
                    " variable)executing against the server", ((string[])(null)));
#line 602
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 603
  testRunner.Given("I have a workflow \"WorkflowWithAssignandBasec\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table138 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table138.AddRow(new string[] {
                        "[[rs().a]]",
                        "rec(1).a"});
            table138.AddRow(new string[] {
                        "[[rec().a]]",
                        "12"});
#line 604
  testRunner.And("\"WorkflowWithAssignandBasec\" contains an Assign \"BaseVar\" as", ((string)(null)), table138, "And ");
#line hidden
            TechTalk.SpecFlow.Table table139 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table139.AddRow(new string[] {
                        "[[[[rs().a]]]]",
                        "Text",
                        "Base 64"});
#line 608
    testRunner.And("\"WorkflowWithAssignandBasec\" contains Base convert \"Base\" as", ((string)(null)), table139, "And ");
#line 611
   testRunner.When("\"WorkflowWithAssignandBasec\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 612
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table140 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table140.AddRow(new string[] {
                        "1",
                        "[[rs().a]] =",
                        "rec(1).a"});
            table140.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "12"});
#line 613
   testRunner.And("the \"BaseVar\" in WorkFlow \"WorkflowWithAssignandBasec\" debug inputs as", ((string)(null)), table140, "And ");
#line hidden
            TechTalk.SpecFlow.Table table141 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table141.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = rec(1).a"});
            table141.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = 12"});
#line 617
   testRunner.And("the \"BaseVar\" in Workflow \"WorkflowWithAssignandBasec\" debug outputs as", ((string)(null)), table141, "And ");
#line hidden
            TechTalk.SpecFlow.Table table142 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table142.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 12",
                        "Text",
                        "Base 64"});
#line 621
    testRunner.And("the \"Base\" in WorkFlow \"WorkflowWithAssignandBasec\" debug inputs as", ((string)(null)), table142, "And ");
#line hidden
            TechTalk.SpecFlow.Table table143 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table143.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = MTI="});
#line 624
      testRunner.And("the \"Base\" in Workflow \"WorkflowWithAssignandBasec\" debug outputs as", ((string)(null)), table143, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Case Convert(Evaluating scalar variable inside va" +
            "riable)executing against the server.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndCaseConvertEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Case Convert(Evaluating scalar variable inside va" +
                    "riable)executing against the server.", ((string[])(null)));
#line 628
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 629
  testRunner.Given("I have a workflow \"WorkflowWithAssignandcCse\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table144 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table144.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table144.AddRow(new string[] {
                        "[[b]]",
                        "warewolf"});
#line 630
  testRunner.And("\"WorkflowWithAssignandcCse\" contains an Assign \"Case Var\" as", ((string)(null)), table144, "And ");
#line hidden
            TechTalk.SpecFlow.Table table145 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table145.AddRow(new string[] {
                        "[[[[a]]]]",
                        "UPPER"});
#line 634
    testRunner.And("\"WorkflowWithAssignandcCse\" contains case convert \"CaseConvert\" as", ((string)(null)), table145, "And ");
#line 637
   testRunner.When("\"WorkflowWithAssignandcCse\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 638
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table146 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table146.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table146.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "warewolf"});
#line 639
   testRunner.And("the \"Case Var\" in WorkFlow \"WorkflowWithAssignandcCse\" debug inputs as", ((string)(null)), table146, "And ");
#line hidden
            TechTalk.SpecFlow.Table table147 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table147.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table147.AddRow(new string[] {
                        "2",
                        "[[b]] = warewolf"});
#line 643
   testRunner.And("the \"Case Var\" in Workflow \"WorkflowWithAssignandcCse\" debug outputs as", ((string)(null)), table147, "And ");
#line hidden
            TechTalk.SpecFlow.Table table148 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table148.AddRow(new string[] {
                        "1",
                        "[[b]] = warewolf",
                        "UPPER"});
#line 647
  testRunner.And("the \"CaseConvert\" in WorkFlow \"WorkflowWithAssignandcCse\" debug inputs as", ((string)(null)), table148, "And ");
#line hidden
            TechTalk.SpecFlow.Table table149 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table149.AddRow(new string[] {
                        "1",
                        "[[b]] = WAREWOLF"});
#line 650
   testRunner.And("the \"CaseConvert\" in Workflow \"WorkflowWithAssignandcCse\" debug outputs as", ((string)(null)), table149, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Case Convert(Evaluating Recordset variable inside" +
            " variable)executing against the server.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndCaseConvertEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Case Convert(Evaluating Recordset variable inside" +
                    " variable)executing against the server.", ((string[])(null)));
#line 654
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 655
  testRunner.Given("I have a workflow \"WorkflowWithAssignandcCase\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table150 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table150.AddRow(new string[] {
                        "[[rs().a]]",
                        "rec(1).a"});
            table150.AddRow(new string[] {
                        "[[rec().a]]",
                        "warewolf"});
#line 656
  testRunner.And("\"WorkflowWithAssignandcCase\" contains an Assign \"Case Var\" as", ((string)(null)), table150, "And ");
#line hidden
            TechTalk.SpecFlow.Table table151 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table151.AddRow(new string[] {
                        "[[[[rs(1).a]]]]",
                        "UPPER"});
#line 660
    testRunner.And("\"WorkflowWithAssignandcCase\" contains case convert \"CaseConvert\" as", ((string)(null)), table151, "And ");
#line 663
   testRunner.When("\"WorkflowWithAssignandcCase\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 664
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table152 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table152.AddRow(new string[] {
                        "1",
                        "[[rs().a]] =",
                        "rec(1).a"});
            table152.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "warewolf"});
#line 665
   testRunner.And("the \"Case Var\" in WorkFlow \"WorkflowWithAssignandcCase\" debug inputs as", ((string)(null)), table152, "And ");
#line hidden
            TechTalk.SpecFlow.Table table153 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table153.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = rec(1).a"});
            table153.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = warewolf"});
#line 669
   testRunner.And("the \"Case Var\" in Workflow \"WorkflowWithAssignandcCase\" debug outputs as", ((string)(null)), table153, "And ");
#line hidden
            TechTalk.SpecFlow.Table table154 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table154.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = warewolf",
                        "UPPER"});
#line 673
  testRunner.And("the \"CaseConvert\" in WorkFlow \"WorkflowWithAssignandcCase\" debug inputs as", ((string)(null)), table154, "And ");
#line hidden
            TechTalk.SpecFlow.Table table155 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table155.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = WAREWOLF"});
#line 676
   testRunner.And("the \"CaseConvert\" in Workflow \"WorkflowWithAssignandcCase\" debug outputs as", ((string)(null)), table155, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Data Merge (Evaluating variables inside variable)" +
            "executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndDataMergeEvaluatingVariablesInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Data Merge (Evaluating variables inside variable)" +
                    "executing against the server", ((string[])(null)));
#line 680
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 681
  testRunner.Given("I have a workflow \"WorkflowWithAssignandData\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table156 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table156.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table156.AddRow(new string[] {
                        "[[b]]",
                        "warewolf"});
            table156.AddRow(new string[] {
                        "[[rs().a]]",
                        "rec(1).a"});
            table156.AddRow(new string[] {
                        "[[rec().a]]",
                        "test"});
#line 682
  testRunner.And("\"WorkflowWithAssignandData\" contains an Assign \"Datam\" as", ((string)(null)), table156, "And ");
#line hidden
            TechTalk.SpecFlow.Table table157 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table157.AddRow(new string[] {
                        "[[[[a]]]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
            table157.AddRow(new string[] {
                        "[[[[rs().a]]]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
#line 688
     testRunner.And("\"WorkflowWithAssignandData\" contains Data Merge \"Datamerge\" into \"[[result]]\" as", ((string)(null)), table157, "And ");
#line 692
  testRunner.When("\"WorkflowWithAssignandData\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 693
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table158 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table158.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table158.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "warewolf"});
            table158.AddRow(new string[] {
                        "3",
                        "[[rs().a]] =",
                        "rec(1).a"});
            table158.AddRow(new string[] {
                        "4",
                        "[[rec().a]] =",
                        "test"});
#line 694
  testRunner.And("the \"Datam\" in WorkFlow \"WorkflowWithAssignandData\" debug inputs as", ((string)(null)), table158, "And ");
#line hidden
            TechTalk.SpecFlow.Table table159 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table159.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table159.AddRow(new string[] {
                        "2",
                        "[[b]] = warewolf"});
            table159.AddRow(new string[] {
                        "3",
                        "[[rs(1).a]] = rec(1).a"});
            table159.AddRow(new string[] {
                        "4",
                        "[[rec(1).a]] = test"});
#line 700
  testRunner.And("the \"Datam\" in Workflow \"WorkflowWithAssignandData\" debug outputs as", ((string)(null)), table159, "And ");
#line hidden
            TechTalk.SpecFlow.Table table160 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table160.AddRow(new string[] {
                        "1",
                        "[[b]] = warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
            table160.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = test",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
#line 706
  testRunner.And("the \"Datamerge\" in WorkFlow \"WorkflowWithAssignandData\" debug inputs as", ((string)(null)), table160, "And ");
#line hidden
            TechTalk.SpecFlow.Table table161 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table161.AddRow(new string[] {
                        "[[result]] = warewolftest"});
#line 710
   testRunner.And("the \"Datamerge\" in Workflow \"WorkflowWithAssignandData\" debug outputs as", ((string)(null)), table161, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Find Index(Evaluating scalar variable inside vari" +
            "able)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFindIndexEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Find Index(Evaluating scalar variable inside vari" +
                    "able)executing against the server", ((string[])(null)));
#line 714
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 715
  testRunner.Given("I have a workflow \"WorkflowWithAssignandFindIndex\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table162 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table162.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table162.AddRow(new string[] {
                        "[[b]]",
                        "test"});
#line 716
  testRunner.And("\"WorkflowWithAssignandFindIndex\" contains an Assign \"IndexVal\" as", ((string)(null)), table162, "And ");
#line hidden
            TechTalk.SpecFlow.Table table163 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Index",
                        "Character",
                        "Direction"});
            table163.AddRow(new string[] {
                        "[[[[a]]]]",
                        "First Occurence",
                        "s",
                        "Left to Right"});
#line 720
     testRunner.And("\"WorkflowWithAssignandFindIndex\" contains Find Index \"Indexchar\" into \"[[indexRes" +
                    "ult]]\" as", ((string)(null)), table163, "And ");
#line 723
   testRunner.When("\"WorkflowWithAssignandFindIndex\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 724
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table164 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table164.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table164.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
#line 725
   testRunner.And("the \"IndexVal\" in WorkFlow \"WorkflowWithAssignandFindIndex\" debug inputs as", ((string)(null)), table164, "And ");
#line hidden
            TechTalk.SpecFlow.Table table165 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table165.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table165.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
#line 729
   testRunner.And("the \"IndexVal\" in Workflow \"WorkflowWithAssignandFindIndex\" debug outputs as", ((string)(null)), table165, "And ");
#line hidden
            TechTalk.SpecFlow.Table table166 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table166.AddRow(new string[] {
                        "[[b]] = test",
                        "First Occurence",
                        "s",
                        "Left to Right"});
#line 733
    testRunner.And("the \"Indexchar\" in WorkFlow \"WorkflowWithAssignandFindIndex\" debug inputs as", ((string)(null)), table166, "And ");
#line hidden
            TechTalk.SpecFlow.Table table167 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table167.AddRow(new string[] {
                        "[[indexResult]] = 3"});
#line 736
   testRunner.And("the \"Indexchar\" in Workflow \"WorkflowWithAssignandFindIndex\" debug outputs as", ((string)(null)), table167, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Find Index(Evaluating recordset variable inside v" +
            "ariable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFindIndexEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Find Index(Evaluating recordset variable inside v" +
                    "ariable)executing against the server", ((string[])(null)));
#line 740
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 741
  testRunner.Given("I have a workflow \"WorkflowWithAssignandFindIndex1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table168 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table168.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table168.AddRow(new string[] {
                        "[[new().a]]",
                        "test"});
#line 742
  testRunner.And("\"WorkflowWithAssignandFindIndex1\" contains an Assign \"Index Val\" as", ((string)(null)), table168, "And ");
#line hidden
            TechTalk.SpecFlow.Table table169 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Index",
                        "Character",
                        "Direction"});
            table169.AddRow(new string[] {
                        "[[[[rec().a]]]]",
                        "First Occurence",
                        "s",
                        "Left to Right"});
#line 746
     testRunner.And("\"WorkflowWithAssignandFindIndex1\" contains Find Index \"Index char\" into \"[[indexR" +
                    "esult]]\" as", ((string)(null)), table169, "And ");
#line 749
   testRunner.When("\"WorkflowWithAssignandFindIndex1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 750
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table170 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table170.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "new().a"});
            table170.AddRow(new string[] {
                        "2",
                        "[[new().a]] =",
                        "test"});
#line 751
   testRunner.And("the \"Index Val\" in WorkFlow \"WorkflowWithAssignandFindIndex1\" debug inputs as", ((string)(null)), table170, "And ");
#line hidden
            TechTalk.SpecFlow.Table table171 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table171.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = new().a"});
            table171.AddRow(new string[] {
                        "2",
                        "[[new(1).a]] = test"});
#line 755
   testRunner.And("the \"Index Val\" in Workflow \"WorkflowWithAssignandFindIndex1\" debug outputs as", ((string)(null)), table171, "And ");
#line hidden
            TechTalk.SpecFlow.Table table172 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table172.AddRow(new string[] {
                        "[[new(1).a]] = test",
                        "First Occurence",
                        "s",
                        "Left to Right"});
#line 759
    testRunner.And("the \"Index char\" in WorkFlow \"WorkflowWithAssignandFindIndex1\" debug inputs as", ((string)(null)), table172, "And ");
#line hidden
            TechTalk.SpecFlow.Table table173 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table173.AddRow(new string[] {
                        "[[indexResult]] = 3"});
#line 762
   testRunner.And("the \"Index char\" in Workflow \"WorkflowWithAssignandFindIndex1\" debug outputs as", ((string)(null)), table173, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Replace(Evaluating scalar variable inside variabl" +
            "e)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndReplaceEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Replace(Evaluating scalar variable inside variabl" +
                    "e)executing against the server", ((string[])(null)));
#line 766
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 767
  testRunner.Given("I have a workflow \"WorkflowWithAssignandReplace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table174 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table174.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table174.AddRow(new string[] {
                        "[[b]]",
                        "test"});
#line 768
  testRunner.And("\"WorkflowWithAssignandReplace\" contains an Assign \"IndexVal\" as", ((string)(null)), table174, "And ");
#line hidden
            TechTalk.SpecFlow.Table table175 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table175.AddRow(new string[] {
                        "[[[[a]]]]",
                        "s",
                        "REPLACE"});
#line 772
      testRunner.And("\"WorkflowWithAssignandReplace\" contains Replace \"Replac\" into \"[[replaceResult]]\"" +
                    " as", ((string)(null)), table175, "And ");
#line 775
   testRunner.When("\"WorkflowWithAssignandReplace\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 776
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table176 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table176.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table176.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
#line 777
   testRunner.And("the \"IndexVal\" in WorkFlow \"WorkflowWithAssignandReplace\" debug inputs as", ((string)(null)), table176, "And ");
#line hidden
            TechTalk.SpecFlow.Table table177 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table177.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table177.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
#line 781
   testRunner.And("the \"IndexVal\" in Workflow \"WorkflowWithAssignandReplace\" debug outputs as", ((string)(null)), table177, "And ");
#line hidden
            TechTalk.SpecFlow.Table table178 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table178.AddRow(new string[] {
                        "[[b]] = test",
                        "s",
                        "REPLACE"});
#line 785
   testRunner.And("the \"Replac\" in WorkFlow \"WorkflowWithAssignandReplace\" debug inputs as", ((string)(null)), table178, "And ");
#line hidden
            TechTalk.SpecFlow.Table table179 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table179.AddRow(new string[] {
                        "[[b]] = teREPLACEt"});
            table179.AddRow(new string[] {
                        "[[replaceResult]] = 1"});
#line 788
     testRunner.And("the \"Replac\" in Workflow \"WorkflowWithAssignandReplace\" debug outputs as", ((string)(null)), table179, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Replace(Evaluating Recordset variable inside vari" +
            "able)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndReplaceEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Replace(Evaluating Recordset variable inside vari" +
                    "able)executing against the server", ((string[])(null)));
#line 793
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 794
  testRunner.Given("I have a workflow \"WorkflowWithAssignandReplacebyrec\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table180 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table180.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table180.AddRow(new string[] {
                        "[[new().a]]",
                        "test"});
#line 795
  testRunner.And("\"WorkflowWithAssignandReplacebyrec\" contains an Assign \"Vals\" as", ((string)(null)), table180, "And ");
#line hidden
            TechTalk.SpecFlow.Table table181 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table181.AddRow(new string[] {
                        "[[[[rec(1).a]]]]",
                        "s",
                        "REPLACE"});
#line 799
      testRunner.And("\"WorkflowWithAssignandReplacebyrec\" contains Replace \"Rep\" into \"[[replaceResult]" +
                    "]\" as", ((string)(null)), table181, "And ");
#line 802
   testRunner.When("\"WorkflowWithAssignandReplacebyrec\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 803
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table182 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table182.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "new().a"});
            table182.AddRow(new string[] {
                        "2",
                        "[[new().a]] =",
                        "test"});
#line 804
   testRunner.And("the \"Vals\" in WorkFlow \"WorkflowWithAssignandReplacebyrec\" debug inputs as", ((string)(null)), table182, "And ");
#line hidden
            TechTalk.SpecFlow.Table table183 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table183.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = new().a"});
            table183.AddRow(new string[] {
                        "2",
                        "[[new(1).a]] = test"});
#line 808
   testRunner.And("the \"Vals\" in Workflow \"WorkflowWithAssignandReplacebyrec\" debug outputs as", ((string)(null)), table183, "And ");
#line hidden
            TechTalk.SpecFlow.Table table184 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table184.AddRow(new string[] {
                        "[[new(1).a]] = test",
                        "s",
                        "REPLACE"});
#line 812
   testRunner.And("the \"Rep\" in WorkFlow \"WorkflowWithAssignandReplacebyrec\" debug inputs as", ((string)(null)), table184, "And ");
#line hidden
            TechTalk.SpecFlow.Table table185 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table185.AddRow(new string[] {
                        "[[new(1).a]] = teREPLACEt"});
            table185.AddRow(new string[] {
                        "[[replaceResult]] = 1"});
#line 815
     testRunner.And("the \"Rep\" in Workflow \"WorkflowWithAssignandReplacebyrec\" debug outputs as", ((string)(null)), table185, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Format Numbers(Evaluating scalar variable inside " +
            "variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFormatNumbersEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Format Numbers(Evaluating scalar variable inside " +
                    "variable)executing against the server", ((string[])(null)));
#line 820
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 821
   testRunner.Given("I have a workflow \"WorkflowWithAssignandFormat\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table186 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table186.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table186.AddRow(new string[] {
                        "[[b]]",
                        "12.3412"});
#line 822
   testRunner.And("\"WorkflowWithAssignandFormat\" contains an Assign \"IndexVal\" as", ((string)(null)), table186, "And ");
#line hidden
            TechTalk.SpecFlow.Table table187 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table187.AddRow(new string[] {
                        "[[[[a]]]]",
                        "Up",
                        "3",
                        "3",
                        "[[fresult]]"});
#line 826
      testRunner.And("\"WorkflowWithAssignandFormat\" contains Format Number \"Fnumber\" as", ((string)(null)), table187, "And ");
#line 829
   testRunner.When("\"WorkflowWithAssignandFormat\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 830
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table188 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table188.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table188.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "12.3412"});
#line 831
   testRunner.And("the \"IndexVal\" in WorkFlow \"WorkflowWithAssignandFormat\" debug inputs as", ((string)(null)), table188, "And ");
#line hidden
            TechTalk.SpecFlow.Table table189 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table189.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table189.AddRow(new string[] {
                        "2",
                        "[[b]] = 12.3412"});
#line 835
   testRunner.And("the \"IndexVal\" in Workflow \"WorkflowWithAssignandFormat\" debug outputs as", ((string)(null)), table189, "And ");
#line hidden
            TechTalk.SpecFlow.Table table190 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table190.AddRow(new string[] {
                        "[[b]] = 12.3412",
                        "Up",
                        "3",
                        "3"});
#line 839
   testRunner.And("the \"Fnumber\" in WorkFlow \"WorkflowWithAssignandFormat\" debug inputs as", ((string)(null)), table190, "And ");
#line hidden
            TechTalk.SpecFlow.Table table191 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table191.AddRow(new string[] {
                        "[[fresult]] = 12.342"});
#line 842
   testRunner.And("the \"Fnumber\" in Workflow \"WorkflowWithAssignandFormat\" debug outputs as", ((string)(null)), table191, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Format Numbers(Evaluating Recordset variable insi" +
            "de variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFormatNumbersEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Format Numbers(Evaluating Recordset variable insi" +
                    "de variable)executing against the server", ((string[])(null)));
#line 846
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 847
   testRunner.Given("I have a workflow \"WorkflowWithAssignandFormatn\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table192 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table192.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table192.AddRow(new string[] {
                        "[[new().a]]",
                        "12.3412"});
#line 848
   testRunner.And("\"WorkflowWithAssignandFormatn\" contains an Assign \"IndVal\" as", ((string)(null)), table192, "And ");
#line hidden
            TechTalk.SpecFlow.Table table193 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table193.AddRow(new string[] {
                        "[[[[rec().a]]]]",
                        "Up",
                        "3",
                        "3",
                        "[[fresult]]"});
#line 852
      testRunner.And("\"WorkflowWithAssignandFormatn\" contains Format Number \"Fnumb\" as", ((string)(null)), table193, "And ");
#line 855
   testRunner.When("\"WorkflowWithAssignandFormatn\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 856
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table194 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table194.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "new().a"});
            table194.AddRow(new string[] {
                        "2",
                        "[[new().a]] =",
                        "12.3412"});
#line 857
   testRunner.And("the \"IndVal\" in WorkFlow \"WorkflowWithAssignandFormatn\" debug inputs as", ((string)(null)), table194, "And ");
#line hidden
            TechTalk.SpecFlow.Table table195 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table195.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = new().a"});
            table195.AddRow(new string[] {
                        "2",
                        "[[new(1).a]] = 12.3412"});
#line 861
   testRunner.And("the \"IndVal\" in Workflow \"WorkflowWithAssignandFormatn\" debug outputs as", ((string)(null)), table195, "And ");
#line hidden
            TechTalk.SpecFlow.Table table196 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table196.AddRow(new string[] {
                        "[[new(1).a]] = 12.3412",
                        "Up",
                        "3",
                        "3"});
#line 865
   testRunner.And("the \"Fnumb\" in WorkFlow \"WorkflowWithAssignandFormatn\" debug inputs as", ((string)(null)), table196, "And ");
#line hidden
            TechTalk.SpecFlow.Table table197 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table197.AddRow(new string[] {
                        "[[fresult]] = 12.342"});
#line 868
   testRunner.And("the \"Fnumb\" in Workflow \"WorkflowWithAssignandFormatn\" debug outputs as", ((string)(null)), table197, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Random(Evaluating recordset variable inside varia" +
            "ble)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndRandomEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Random(Evaluating recordset variable inside varia" +
                    "ble)executing against the server", ((string[])(null)));
#line 872
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 873
  testRunner.Given("I have a workflow \"WorkflowWithAssignandRandom\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table198 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table198.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table198.AddRow(new string[] {
                        "[[b]]",
                        "10"});
            table198.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table198.AddRow(new string[] {
                        "[[new().a]]",
                        "20"});
#line 874
  testRunner.And("\"WorkflowWithAssignandRandom\" contains an Assign \"Valforrandno\" as", ((string)(null)), table198, "And ");
#line hidden
            TechTalk.SpecFlow.Table table199 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table199.AddRow(new string[] {
                        "Numbers",
                        "[[[[a]]]]",
                        "[[[[rec().a]]]]",
                        "[[ranresult]]"});
#line 880
    testRunner.And("\"WorkflowWithAssignandRandom\" contains Random \"Rand\" as", ((string)(null)), table199, "And ");
#line 883
   testRunner.When("\"WorkflowWithAssignandRandom\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 884
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table200 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table200.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table200.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "10"});
            table200.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "new().a"});
            table200.AddRow(new string[] {
                        "4",
                        "[[new().a]] =",
                        "20"});
#line 885
   testRunner.And("the \"Valforrandno\" in WorkFlow \"WorkflowWithAssignandRandom\" debug inputs as", ((string)(null)), table200, "And ");
#line hidden
            TechTalk.SpecFlow.Table table201 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table201.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table201.AddRow(new string[] {
                        "2",
                        "[[b]] = 10"});
            table201.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = new().a"});
            table201.AddRow(new string[] {
                        "4",
                        "[[new(1).a]] = 20"});
#line 891
   testRunner.And("the \"Valforrandno\" in Workflow \"WorkflowWithAssignandRandom\" debug outputs as", ((string)(null)), table201, "And ");
#line hidden
            TechTalk.SpecFlow.Table table202 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table202.AddRow(new string[] {
                        "Numbers",
                        "[[b]] = 10",
                        "[[new(1).a]] = 20"});
#line 897
   testRunner.And("the \"Rand\" in WorkFlow \"WorkflowWithAssignandRandom\" debug inputs as", ((string)(null)), table202, "And ");
#line hidden
            TechTalk.SpecFlow.Table table203 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table203.AddRow(new string[] {
                        "[[ranresult]] = Int32"});
#line 900
   testRunner.And("the \"Rand\" in Workflow \"WorkflowWithAssignandRandom\" debug outputs as", ((string)(null)), table203, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Date and Time(Evaluating recordset variable insid" +
            "e variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndDateAndTimeEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Date and Time(Evaluating recordset variable insid" +
                    "e variable)executing against the server", ((string[])(null)));
#line 904
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 905
  testRunner.Given("I have a workflow \"WorkflowWithAssignandDateTimetool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table204 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table204.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table204.AddRow(new string[] {
                        "[[b]]",
                        "01/02/2014"});
            table204.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table204.AddRow(new string[] {
                        "[[new().a]]",
                        "dd/mm/yyyy"});
#line 906
  testRunner.And("\"WorkflowWithAssignandDateTimetool\" contains an Assign \"Dateandtime\" as", ((string)(null)), table204, "And ");
#line hidden
            TechTalk.SpecFlow.Table table205 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "Output Format",
                        "Result"});
            table205.AddRow(new string[] {
                        "[[[[a]]]]",
                        "[[[[rec(1).a]]]]",
                        "1",
                        "dd/mm/yyyy",
                        "[[res]]"});
#line 912
   testRunner.And("\"WorkflowWithAssignandDateTimetool\" contains Date and Time \"AddDate\" as", ((string)(null)), table205, "And ");
#line 915
   testRunner.When("\"WorkflowWithAssignandDateTimetool\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 916
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table206 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table206.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table206.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "01/02/2014"});
            table206.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "new().a"});
            table206.AddRow(new string[] {
                        "4",
                        "[[new().a]] =",
                        "dd/mm/yyyy"});
#line 917
   testRunner.And("the \"Dateandtime\" in WorkFlow \"WorkflowWithAssignandDateTimetool\" debug inputs as" +
                    "", ((string)(null)), table206, "And ");
#line hidden
            TechTalk.SpecFlow.Table table207 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table207.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table207.AddRow(new string[] {
                        "2",
                        "[[b]] = 01/02/2014"});
            table207.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = new().a"});
            table207.AddRow(new string[] {
                        "4",
                        "[[new(1).a]] =  dd/mm/yyyy"});
#line 923
    testRunner.And("the \"Dateandtime\" in Workflow \"WorkflowWithAssignandDateTimetool\" debug outputs a" +
                    "s", ((string)(null)), table207, "And ");
#line hidden
            TechTalk.SpecFlow.Table table208 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table208.AddRow(new string[] {
                        "[[b]] = 01/02/2014",
                        "[[new(1).a]] = dd/mm/yyyy",
                        "Years",
                        "1",
                        "dd/mm/yyyy"});
#line 929
    testRunner.And("the \"AddDate\" in WorkFlow \"WorkflowWithAssignandDateTimetool\" debug inputs as", ((string)(null)), table208, "And ");
#line hidden
            TechTalk.SpecFlow.Table table209 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table209.AddRow(new string[] {
                        "[[res]] = 01/02/2015"});
#line 932
    testRunner.And("the \"AddDate\" in Workflow \"WorkflowWithAssignandDateTimetool\" debug outputs as", ((string)(null)), table209, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and DateTimeDiff(Evaluating recordset variable inside" +
            " variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndDateTimeDiffEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and DateTimeDiff(Evaluating recordset variable inside" +
                    " variable)executing against the server", ((string[])(null)));
#line 936
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 937
   testRunner.Given("I have a workflow \"WorkflowWithAssignandDateTimeDiff\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table210 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table210.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table210.AddRow(new string[] {
                        "[[b]]",
                        "01/02/2016"});
            table210.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table210.AddRow(new string[] {
                        "[[new().a]]",
                        "01/02/2014"});
#line 938
   testRunner.And("\"WorkflowWithAssignandDateTimeDiff\" contains an Assign \"Dateandtime\" as", ((string)(null)), table210, "And ");
#line hidden
            TechTalk.SpecFlow.Table table211 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table211.AddRow(new string[] {
                        "[[[[rec(1).a]]]]",
                        "[[[[a]]]]",
                        "dd/mm/yyyy",
                        "Years",
                        "[[result]]"});
#line 944
   testRunner.And("\"WorkflowWithAssignandDateTimeDiff\" contains Date and Time Difference \"DateTimedi" +
                    "f\" as", ((string)(null)), table211, "And ");
#line 947
    testRunner.When("\"WorkflowWithAssignandDateTimeDiff\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 948
    testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table212 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table212.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table212.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "01/02/2016"});
            table212.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "new().a"});
            table212.AddRow(new string[] {
                        "4",
                        "[[new().a]] =",
                        "01/02/2014"});
#line 949
    testRunner.And("the \"Dateandtime\" in WorkFlow \"WorkflowWithAssignandDateTimeDiff\" debug inputs as" +
                    "", ((string)(null)), table212, "And ");
#line hidden
            TechTalk.SpecFlow.Table table213 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table213.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table213.AddRow(new string[] {
                        "2",
                        "[[b]] = 01/02/2016"});
            table213.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = new().a"});
            table213.AddRow(new string[] {
                        "4",
                        "[[new(1).a]] = 01/02/2014"});
#line 955
    testRunner.And("the \"Dateandtime\" in Workflow \"WorkflowWithAssignandDateTimeDiff\" debug outputs a" +
                    "s", ((string)(null)), table213, "And ");
#line hidden
            TechTalk.SpecFlow.Table table214 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table214.AddRow(new string[] {
                        "[[new(1).a]] = 01/02/2014",
                        "[[b]] = 01/02/2016",
                        "dd/mm/yyyy",
                        "Years"});
#line 961
    testRunner.And("the \"DateTimedif\" in WorkFlow \"WorkflowWithAssignandDateTimeDiff\" debug inputs as" +
                    "", ((string)(null)), table214, "And ");
#line hidden
            TechTalk.SpecFlow.Table table215 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table215.AddRow(new string[] {
                        "[[result]] = 2"});
#line 964
    testRunner.And("the \"DateTimedif\" in Workflow \"WorkflowWithAssignandDateTimeDiff\" debug outputs a" +
                    "s", ((string)(null)), table215, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Replace(Evaluating variable inside a varable)exec" +
            "uting against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndReplaceEvaluatingVariableInsideAVarableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Replace(Evaluating variable inside a varable)exec" +
                    "uting against the server", ((string[])(null)));
#line 968
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 969
  testRunner.Given("I have a workflow \"WorkflowWithAssignReplace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table216 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table216.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table216.AddRow(new string[] {
                        "[[b]]",
                        "test"});
#line 970
  testRunner.And("\"WorkflowWithAssignReplace\" contains an Assign \"IndexVal\" as", ((string)(null)), table216, "And ");
#line hidden
            TechTalk.SpecFlow.Table table217 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table217.AddRow(new string[] {
                        "[[[[a]]]]",
                        "s",
                        "REPLACE"});
#line 974
      testRunner.And("\"WorkflowWithAssignReplace\" contains Replace \"Replac\" into \"[[replaceResult]]\" as" +
                    "", ((string)(null)), table217, "And ");
#line 977
   testRunner.When("\"WorkflowWithAssignReplace\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 978
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table218 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table218.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table218.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
#line 979
   testRunner.And("the \"IndexVal\" in WorkFlow \"WorkflowWithAssignReplace\" debug inputs as", ((string)(null)), table218, "And ");
#line hidden
            TechTalk.SpecFlow.Table table219 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table219.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table219.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
#line 983
   testRunner.And("the \"IndexVal\" in Workflow \"WorkflowWithAssignReplace\" debug outputs as", ((string)(null)), table219, "And ");
#line hidden
            TechTalk.SpecFlow.Table table220 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table220.AddRow(new string[] {
                        "[[b]] = test",
                        "s",
                        "REPLACE"});
#line 987
   testRunner.And("the \"Replac\" in WorkFlow \"WorkflowWithAssignReplace\" debug inputs as", ((string)(null)), table220, "And ");
#line hidden
            TechTalk.SpecFlow.Table table221 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table221.AddRow(new string[] {
                        "[[b]] = teREPLACEt"});
            table221.AddRow(new string[] {
                        "[[replaceResult]] = 1"});
#line 990
     testRunner.And("the \"Replac\" in Workflow \"WorkflowWithAssignReplace\" debug outputs as", ((string)(null)), table221, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Format Numbers(Evaluating variable inside variabl" +
            "e in format number tool)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFormatNumbersEvaluatingVariableInsideVariableInFormatNumberToolExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Format Numbers(Evaluating variable inside variabl" +
                    "e in format number tool)executing against the server", ((string[])(null)));
#line 995
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 996
      testRunner.Given("I have a workflow \"WorkflowAssignandFormat\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table222 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table222.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table222.AddRow(new string[] {
                        "[[b]]",
                        "12.3412"});
#line 997
   testRunner.And("\"WorkflowAssignandFormat\" contains an Assign \"IndexVal1\" as", ((string)(null)), table222, "And ");
#line hidden
            TechTalk.SpecFlow.Table table223 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table223.AddRow(new string[] {
                        "[[[[a]]]]",
                        "Up",
                        "3",
                        "3",
                        "[[fresult]]"});
#line 1001
      testRunner.And("\"WorkflowAssignandFormat\" contains Format Number \"Fnumber1\" as", ((string)(null)), table223, "And ");
#line 1004
   testRunner.When("\"WorkflowAssignandFormat\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1005
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table224 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table224.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table224.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "12.3412"});
#line 1006
   testRunner.And("the \"IndexVal1\" in WorkFlow \"WorkflowAssignandFormat\" debug inputs as", ((string)(null)), table224, "And ");
#line hidden
            TechTalk.SpecFlow.Table table225 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table225.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table225.AddRow(new string[] {
                        "2",
                        "[[b]] = 12.3412"});
#line 1010
   testRunner.And("the \"IndexVal1\" in Workflow \"WorkflowAssignandFormat\" debug outputs as", ((string)(null)), table225, "And ");
#line hidden
            TechTalk.SpecFlow.Table table226 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table226.AddRow(new string[] {
                        "[[b]] = 12.3412",
                        "Up",
                        "3",
                        "3"});
#line 1014
   testRunner.And("the \"Fnumber1\" in WorkFlow \"WorkflowAssignandFormat\" debug inputs as", ((string)(null)), table226, "And ");
#line hidden
            TechTalk.SpecFlow.Table table227 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table227.AddRow(new string[] {
                        "[[fresult]] = 12.342"});
#line 1017
   testRunner.And("the \"Fnumber1\" in Workflow \"WorkflowAssignandFormat\" debug outputs as", ((string)(null)), table227, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign DataMerge and DataSplit(Evaluating recordset variable" +
            " as index variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignDataMergeAndDataSplitEvaluatingRecordsetVariableAsIndexVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign DataMerge and DataSplit(Evaluating recordset variable" +
                    " as index variable)executing against the server", ((string[])(null)));
#line 1021
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1022
  testRunner.Given("I have a workflow \"WorkflowWithAssignDatamergeandSplit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table228 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table228.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table228.AddRow(new string[] {
                        "[[b]]",
                        "2"});
            table228.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "warewolf"});
            table228.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "test"});
#line 1023
  testRunner.And("\"WorkflowWithAssignDatamergeandSplit\" contains an Assign \"Data\" as", ((string)(null)), table228, "And ");
#line hidden
            TechTalk.SpecFlow.Table table229 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table229.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
            table229.AddRow(new string[] {
                        "[[a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
#line 1029
      testRunner.And("\"WorkflowWithAssignDatamergeandSplit\" contains Data Merge \"Merge\" into \"[[result]" +
                    "]\" as", ((string)(null)), table229, "And ");
#line hidden
            TechTalk.SpecFlow.Table table230 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table230.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "[[d]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table230.AddRow(new string[] {
                        "",
                        "[[c]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
#line 1033
   testRunner.And("\"WorkflowWithAssignDatamergeandSplit\" contains Data Split \"DataSplit\" as", ((string)(null)), table230, "And ");
#line 1037
   testRunner.When("\"WorkflowWithAssignDatamergeandSplit\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1038
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table231 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table231.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table231.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "2"});
            table231.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] =",
                        "warewolf"});
            table231.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]] =",
                        "test"});
#line 1039
   testRunner.And("the \"Data\" in WorkFlow \"WorkflowWithAssignDatamergeandSplit\" debug inputs as", ((string)(null)), table231, "And ");
#line hidden
            TechTalk.SpecFlow.Table table232 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table232.AddRow(new string[] {
                        "1",
                        "[[a]] = 1"});
            table232.AddRow(new string[] {
                        "2",
                        "[[b]] = 2"});
            table232.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = warewolf"});
            table232.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]] = test"});
#line 1045
   testRunner.And("the \"Data\" in Workflow \"WorkflowWithAssignDatamergeandSplit\" debug outputs as", ((string)(null)), table232, "And ");
#line hidden
            TechTalk.SpecFlow.Table table233 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table233.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
            table233.AddRow(new string[] {
                        "2",
                        "[[a]] = 1",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
#line 1051
      testRunner.And("the \"Merge\" in WorkFlow \"WorkflowWithAssignDatamergeandSplit\" debug inputs as", ((string)(null)), table233, "And ");
#line hidden
            TechTalk.SpecFlow.Table table234 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table234.AddRow(new string[] {
                        "[[result]] = warewolf1"});
#line 1055
   testRunner.And("the \"Merge\" in Workflow \"WorkflowWithAssignDatamergeandSplit\" debug outputs as", ((string)(null)), table234, "And ");
#line hidden
            TechTalk.SpecFlow.Table table235 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table235.AddRow(new string[] {
                        "[[rec(1).a]] = warewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[d]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
            table235.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[c]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
#line 1058
   testRunner.And("the \"DataSplit\" in WorkFlow \"WorkflowWithAssignDatamergeandSplit\" debug inputs as" +
                    "", ((string)(null)), table235, "And ");
#line hidden
            TechTalk.SpecFlow.Table table236 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table236.AddRow(new string[] {
                        "1",
                        "[[d]] = ware"});
            table236.AddRow(new string[] {
                        "2",
                        "[[c]] = wolf"});
#line 1062
   testRunner.And("the \"DataSplit\" in Workflow \"WorkflowWithAssignDatamergeandSplit\" debug outputs a" +
                    "s", ((string)(null)), table236, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign DataMerge and DataSplit(Evaluating index recordset va" +
            "riable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignDataMergeAndDataSplitEvaluatingIndexRecordsetVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign DataMerge and DataSplit(Evaluating index recordset va" +
                    "riable)executing against the server", ((string[])(null)));
#line 1069
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1070
 testRunner.Given("I have a workflow \"WorkflowWithAssignMergeandSplit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table237 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table237.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table237.AddRow(new string[] {
                        "[[b]]",
                        "2"});
            table237.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "warewolf"});
            table237.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "test"});
            table237.AddRow(new string[] {
                        "[[index(1).a]]",
                        "1"});
            table237.AddRow(new string[] {
                        "[[index(2).a]]",
                        "3"});
#line 1071
 testRunner.And("\"WorkflowWithAssignMergeandSplit\" contains an Assign \"Data\" as", ((string)(null)), table237, "And ");
#line hidden
            TechTalk.SpecFlow.Table table238 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table238.AddRow(new string[] {
                        "[[rec([[index(1).a]]).a]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
            table238.AddRow(new string[] {
                        "[[a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
#line 1079
  testRunner.And("\"WorkflowWithAssignMergeandSplit\" contains Data Merge \"Merge\" into \"[[result]]\" a" +
                    "s", ((string)(null)), table238, "And ");
#line hidden
            TechTalk.SpecFlow.Table table239 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table239.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "[[d]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table239.AddRow(new string[] {
                        "",
                        "[[rec([[index(2).a]]).a]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
#line 1083
  testRunner.And("\"WorkflowWithAssignMergeandSplit\" contains Data Split \"DataSplit\" as", ((string)(null)), table239, "And ");
#line 1087
  testRunner.When("\"WorkflowWithAssignMergeandSplit\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1088
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table240 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table240.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table240.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "2"});
            table240.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] =",
                        "warewolf"});
            table240.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]] =",
                        "test"});
            table240.AddRow(new string[] {
                        "5",
                        "[[index(1).a]] =",
                        "1"});
            table240.AddRow(new string[] {
                        "6",
                        "[[index(2).a]] =",
                        "3"});
#line 1089
  testRunner.And("the \"Data\" in WorkFlow \"WorkflowWithAssignMergeandSplit\" debug inputs as", ((string)(null)), table240, "And ");
#line hidden
            TechTalk.SpecFlow.Table table241 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table241.AddRow(new string[] {
                        "1",
                        "[[a]] = 1"});
            table241.AddRow(new string[] {
                        "2",
                        "[[b]] = 2"});
            table241.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = warewolf"});
            table241.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]] = test"});
            table241.AddRow(new string[] {
                        "5",
                        "[[index(1).a]] = 1"});
            table241.AddRow(new string[] {
                        "6",
                        "[[index(2).a]] = 3"});
#line 1097
  testRunner.And("the \"Data\" in Workflow \"WorkflowWithAssignMergeandSplit\" debug outputs as", ((string)(null)), table241, "And ");
#line hidden
            TechTalk.SpecFlow.Table table242 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table242.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
            table242.AddRow(new string[] {
                        "2",
                        "[[a]] = 1",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
#line 1105
    testRunner.And("the \"Merge\" in WorkFlow \"WorkflowWithAssignMergeandSplit\" debug inputs as", ((string)(null)), table242, "And ");
#line hidden
            TechTalk.SpecFlow.Table table243 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table243.AddRow(new string[] {
                        "[[result]] = warewolf1"});
#line 1109
  testRunner.And("the \"Merge\" in Workflow \"WorkflowWithAssignMergeandSplit\" debug outputs as", ((string)(null)), table243, "And ");
#line hidden
            TechTalk.SpecFlow.Table table244 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table244.AddRow(new string[] {
                        "[[rec(1).a]] = warewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[d]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
            table244.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[rec(3).a]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
#line 1112
  testRunner.And("the \"DataSplit\" in WorkFlow \"WorkflowWithAssignMergeandSplit\" debug inputs as", ((string)(null)), table244, "And ");
#line hidden
            TechTalk.SpecFlow.Table table245 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table245.AddRow(new string[] {
                        "1",
                        "[[d]] = ware"});
            table245.AddRow(new string[] {
                        "2",
                        "[[rec(3).a]] = wolf"});
#line 1116
   testRunner.And("the \"DataSplit\" in Workflow \"WorkflowWithAssignMergeandSplit\" debug outputs as", ((string)(null)), table245, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with 2 Assign tools evaluating recordset index variables.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWith2AssignToolsEvaluatingRecordsetIndexVariables_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with 2 Assign tools evaluating recordset index variables.", ((string[])(null)));
#line 1121
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1122
  testRunner.Given("I have a workflow \"WorkflowWithAssignandAssign\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table246 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table246.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table246.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "2"});
            table246.AddRow(new string[] {
                        "[[index(1).a]]",
                        "2"});
#line 1123
  testRunner.And("\"WorkflowWithAssignandAssign\" contains an Assign \"Data1\" as", ((string)(null)), table246, "And ");
#line hidden
            TechTalk.SpecFlow.Table table247 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table247.AddRow(new string[] {
                        "[[new([[a]]).a]]",
                        "test"});
            table247.AddRow(new string[] {
                        "[[rec([[index(1).a]]).a]]",
                        "warewolf"});
#line 1128
    testRunner.And("\"WorkflowWithAssignandAssign\" contains an Assign \"Data2\" as", ((string)(null)), table247, "And ");
#line 1132
   testRunner.When("\"WorkflowWithAssignandAssign\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1133
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table248 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table248.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table248.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] =",
                        "2"});
            table248.AddRow(new string[] {
                        "3",
                        "[[index(1).a]] =",
                        "2"});
#line 1134
   testRunner.And("the \"Data1\" in WorkFlow \"WorkflowWithAssignandAssign\" debug inputs as", ((string)(null)), table248, "And ");
#line hidden
            TechTalk.SpecFlow.Table table249 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table249.AddRow(new string[] {
                        "1",
                        "[[a]] = 1"});
            table249.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = 2"});
            table249.AddRow(new string[] {
                        "3",
                        "[[index(1).a]] = 2"});
#line 1139
   testRunner.And("the \"Data1\" in Workflow \"WorkflowWithAssignandAssign\" debug outputs as", ((string)(null)), table249, "And ");
#line hidden
            TechTalk.SpecFlow.Table table250 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table250.AddRow(new string[] {
                        "1",
                        "[[new(1).a]] =",
                        "test"});
            table250.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =",
                        "warewolf"});
#line 1144
    testRunner.And("the \"Data2\" in WorkFlow \"WorkflowWithAssignandAssign\" debug inputs as", ((string)(null)), table250, "And ");
#line hidden
            TechTalk.SpecFlow.Table table251 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table251.AddRow(new string[] {
                        "1",
                        "[[new(1).a]] = test"});
            table251.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = warewolf"});
#line 1148
   testRunner.And("the \"Data2\" in Workflow \"WorkflowWithAssignandAssign\" debug outputs as", ((string)(null)), table251, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign recordset calculate field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignRecordsetCalculateField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign recordset calculate field", ((string[])(null)));
#line 1153
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1154
      testRunner.Given("I have a workflow \"WFWithAssignHasCalculate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table252 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table252.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table252.AddRow(new string[] {
                        "[[b]]",
                        "2"});
            table252.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "[[a]]"});
            table252.AddRow(new string[] {
                        "[[rec(1).b]]",
                        "[[b]]"});
            table252.AddRow(new string[] {
                        "[[rec(1).c]]",
                        "=[[rec(1).a]]+[[rec(1).b]]"});
#line 1155
   testRunner.And("\"WFWithAssignHasCalculate\" contains an Assign \"values1\" as", ((string)(null)), table252, "And ");
#line 1162
   testRunner.When("\"WFWithAssignHasCalculate\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1163
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table253 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table253.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table253.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "2"});
            table253.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] =",
                        "[[a]] = 1"});
            table253.AddRow(new string[] {
                        "4",
                        "[[rec(1).b]] =",
                        "[[b]] = 2"});
            table253.AddRow(new string[] {
                        "5",
                        "[[rec(1).c]] =",
                        "[[rec(1).a]]+[[rec(1).b]] = 1+2"});
#line 1164
   testRunner.And("the \"values1\" in WorkFlow \"WFWithAssignHasCalculate\" debug inputs as", ((string)(null)), table253, "And ");
#line hidden
            TechTalk.SpecFlow.Table table254 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table254.AddRow(new string[] {
                        "1",
                        "[[a]] = 1"});
            table254.AddRow(new string[] {
                        "2",
                        "[[b]] = 2"});
            table254.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = 1"});
            table254.AddRow(new string[] {
                        "4",
                        "[[rec(1).b]] = 2"});
            table254.AddRow(new string[] {
                        "5",
                        "[[rec(1).c]] = 3"});
#line 1171
   testRunner.And("the \"values1\" in Workflow \"WFWithAssignHasCalculate\" debug outputs as", ((string)(null)), table254, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Calculate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignCalculate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Calculate", ((string[])(null)));
#line 1179
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1180
      testRunner.Given("I have a workflow \"WFWithAssignCalculateindexrecordset\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table255 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table255.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table255.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "2"});
            table255.AddRow(new string[] {
                        "[[index(1).a]]",
                        "1"});
            table255.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "6"});
#line 1181
   testRunner.And("\"WFWithAssignCalculateindexrecordset\" contains an Assign \"values1\" as", ((string)(null)), table255, "And ");
#line 1187
   testRunner.And("\"WFWithAssignCalculateindexrecordset\" contains Calculate \"Calculate1\" with formul" +
                    "a \"[[rec([[index(1).a]]).a]]+[[a]]\" into \"[[result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1188
   testRunner.When("\"WFWithAssignCalculateindexrecordset\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1189
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table256 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table256.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table256.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] =",
                        "2"});
            table256.AddRow(new string[] {
                        "3",
                        "[[index(1).a]] =",
                        "1"});
            table256.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]] =",
                        "6"});
#line 1190
   testRunner.And("the \"values1\" in WorkFlow \"WFWithAssignCalculateindexrecordset\" debug inputs as", ((string)(null)), table256, "And ");
#line hidden
            TechTalk.SpecFlow.Table table257 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table257.AddRow(new string[] {
                        "1",
                        "[[a]]         =  1"});
            table257.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]]  =  2"});
            table257.AddRow(new string[] {
                        "3",
                        "[[index(1).a]] = 1"});
            table257.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]]   = 6"});
#line 1196
  testRunner.And("the \"values1\" in Workflow \"WFWithAssignCalculateindexrecordset\" debug outputs as", ((string)(null)), table257, "And ");
#line hidden
            TechTalk.SpecFlow.Table table258 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table258.AddRow(new string[] {
                        "[[rec([[index(1).a]]).a]]+[[a]] = 2+1"});
#line 1202
   testRunner.And("the \"Calculate1\" in WorkFlow \"WFWithAssignCalculateindexrecordset\" debug inputs a" +
                    "s", ((string)(null)), table258, "And ");
#line hidden
            TechTalk.SpecFlow.Table table259 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table259.AddRow(new string[] {
                        "[[result]] = 3"});
#line 1205
      testRunner.And("the \"Calculate1\" in Workflow \"WFWithAssignCalculateindexrecordset\" debug outputs " +
                    "as", ((string)(null)), table259, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Calculate multiple recursion")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignCalculateMultipleRecursion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Calculate multiple recursion", ((string[])(null)));
#line 1209
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1210
      testRunner.Given("I have a workflow \"WFAssignCalculateRecursion\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table260 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table260.AddRow(new string[] {
                        "[[b]]",
                        "rec(1).b"});
            table260.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "b"});
            table260.AddRow(new string[] {
                        "[[rec(1).b]]",
                        "1"});
#line 1211
   testRunner.And("\"WFAssignCalculateRecursion\" contains an Assign \"values1\" as", ((string)(null)), table260, "And ");
#line 1216
   testRunner.And("\"WFAssignCalculateRecursion\" contains Calculate \"Calculate1\" with formula \"[[[[[[" +
                    "rec(1).a]]]]]]+1\" into \"[[result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1217
   testRunner.When("\"WFAssignCalculateRecursion\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1218
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table261 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table261.AddRow(new string[] {
                        "1",
                        "[[b]] =",
                        "rec(1).b"});
            table261.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] =",
                        "b"});
            table261.AddRow(new string[] {
                        "3",
                        "[[rec(1).b]] =",
                        "1"});
#line 1219
   testRunner.And("the \"values1\" in WorkFlow \"WFAssignCalculateRecursion\" debug inputs as", ((string)(null)), table261, "And ");
#line hidden
            TechTalk.SpecFlow.Table table262 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table262.AddRow(new string[] {
                        "1",
                        "[[b]]         =  rec(1).b"});
            table262.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]]  =  b"});
            table262.AddRow(new string[] {
                        "3",
                        "[[rec(1).b]]   = 1"});
#line 1224
  testRunner.And("the \"values1\" in Workflow \"WFAssignCalculateRecursion\" debug outputs as", ((string)(null)), table262, "And ");
#line hidden
            TechTalk.SpecFlow.Table table263 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table263.AddRow(new string[] {
                        "[[rec(1).b]]+1 = 1+1"});
#line 1229
   testRunner.And("the \"Calculate1\" in WorkFlow \"WFAssignCalculateRecursion\" debug inputs as", ((string)(null)), table263, "And ");
#line hidden
            TechTalk.SpecFlow.Table table264 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table264.AddRow(new string[] {
                        "[[result]] = 2"});
#line 1232
      testRunner.And("the \"Calculate1\" in Workflow \"WFAssignCalculateRecursion\" debug outputs as", ((string)(null)), table264, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Calculate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndCalculate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Calculate", ((string[])(null)));
#line 1236
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1237
      testRunner.Given("I have a workflow \"WFAssign&Calculate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table265 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table265.AddRow(new string[] {
                        "[[Honda().a1]]",
                        "1"});
            table265.AddRow(new string[] {
                        "[[Honda().a2]]",
                        "2"});
            table265.AddRow(new string[] {
                        "[[Honda().a3]]",
                        "3"});
            table265.AddRow(new string[] {
                        "[[Benz().a1]]",
                        "10"});
            table265.AddRow(new string[] {
                        "[[Benz().a2]]",
                        "20"});
            table265.AddRow(new string[] {
                        "[[Benz().a3]]",
                        "30"});
#line 1238
   testRunner.And("\"WFAssign&Calculate\" contains an Assign \"values1\" as", ((string)(null)), table265, "And ");
#line 1246
   testRunner.And("\"WFAssign&Calculate\" contains Calculate \"Calculate1\" with formula \"sum([[Benz(*)]" +
                    "])+sum([[Honda(*)]])\" into \"[[result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1247
   testRunner.When("\"WFAssign&Calculate\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1248
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table266 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table266.AddRow(new string[] {
                        "1",
                        "[[Honda().a1]] =",
                        "1"});
            table266.AddRow(new string[] {
                        "2",
                        "[[Honda().a2]] =",
                        "2"});
            table266.AddRow(new string[] {
                        "3",
                        "[[Honda().a3]] =",
                        "3"});
            table266.AddRow(new string[] {
                        "4",
                        "[[Benz().a1]]  =",
                        "10"});
            table266.AddRow(new string[] {
                        "5",
                        "[[Benz().a2]]  =",
                        "20"});
            table266.AddRow(new string[] {
                        "6",
                        "[[Benz().a3]]  =",
                        "30"});
#line 1249
   testRunner.And("the \"values1\" in WorkFlow \"WFAssign&Calculate\" debug inputs as", ((string)(null)), table266, "And ");
#line hidden
            TechTalk.SpecFlow.Table table267 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table267.AddRow(new string[] {
                        "1",
                        "[[Honda(1).a1]] =  1"});
            table267.AddRow(new string[] {
                        "2",
                        "[[Honda(1).a2]] =  2"});
            table267.AddRow(new string[] {
                        "3",
                        "[[Honda(1).a3]] =  3"});
            table267.AddRow(new string[] {
                        "4",
                        "[[Benz(1).a1]]  =  10"});
            table267.AddRow(new string[] {
                        "5",
                        "[[Benz(1).a2]]  =  20"});
            table267.AddRow(new string[] {
                        "6",
                        "[[Benz(1).a3]]  =  30"});
#line 1257
  testRunner.And("the \"values1\" in Workflow \"WFAssign&Calculate\" debug outputs as", ((string)(null)), table267, "And ");
#line hidden
            TechTalk.SpecFlow.Table table268 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table268.AddRow(new string[] {
                        "sum([[Benz(*)]])+sum([[Honda(*)]]) = sum(10)+sum(1)"});
            table268.AddRow(new string[] {
                        "sum([[Benz(*)]])+sum([[Honda(*)]]) = sum(10)+sum(2)"});
            table268.AddRow(new string[] {
                        "sum([[Benz(*)]])+sum([[Honda(*)]]) = sum(10)+sum(3)"});
            table268.AddRow(new string[] {
                        "sum([[Benz(*)]])+sum([[Honda(*)]]) = sum(20)+sum(1)"});
            table268.AddRow(new string[] {
                        "sum([[Benz(*)]])+sum([[Honda(*)]]) = sum(20)+sum(2)"});
            table268.AddRow(new string[] {
                        "sum([[Benz(*)]])+sum([[Honda(*)]]) = sum(20)+sum(3)"});
            table268.AddRow(new string[] {
                        "sum([[Benz(*)]])+sum([[Honda(*)]]) = sum(30)+sum(1)"});
            table268.AddRow(new string[] {
                        "sum([[Benz(*)]])+sum([[Honda(*)]]) = sum(30)+sum(2)"});
            table268.AddRow(new string[] {
                        "sum([[Benz(*)]])+sum([[Honda(*)]]) = sum(30)+sum(3)"});
#line 1265
   testRunner.And("the \"Calculate1\" in WorkFlow \"WFAssign&Calculate\" debug inputs as", ((string)(null)), table268, "And ");
#line hidden
            TechTalk.SpecFlow.Table table269 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table269.AddRow(new string[] {
                        "[[result]] = 33"});
#line 1276
      testRunner.And("the \"Calculate1\" in Workflow \"WFAssign&Calculate\" debug outputs as", ((string)(null)), table269, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and ForEach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndForEach()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and ForEach", ((string[])(null)));
#line 1280
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1281
     testRunner.Given("I have a workflow \"WFWithAssignForEach\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table270 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table270.AddRow(new string[] {
                        "[[Warewolf]]",
                        "bob"});
#line 1282
  testRunner.And("\"WFWithAssignForEach\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table270, "And ");
#line 1285
     testRunner.And("\"WFWithAssignForEach\" contains a Foreach \"ForEachTest\" as \"NumOfExecution\" execut" +
                    "ions \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table271 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table271.AddRow(new string[] {
                        "a",
                        "[[Warewolf]]",
                        "",
                        ""});
#line 1286
  testRunner.And("\"ForEachTest\" contains workflow \"11714Nested\" with mapping as", ((string)(null)), table271, "And ");
#line 1289
  testRunner.When("\"WFWithAssignForEach\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1290
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table272 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table272.AddRow(new string[] {
                        "No. of Executes",
                        "3"});
#line 1291
  testRunner.And("the \"ForEachTest\" in WorkFlow \"WFWithAssignForEach\" debug inputs as", ((string)(null)), table272, "And ");
#line 1294
  testRunner.And("the \"ForEachTest\" in WorkFlow \"WFWithAssignForEach\" has  \"3\" nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table273 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table273.AddRow(new string[] {
                        "[[a]]",
                        "warewolf"});
#line 1295
  testRunner.And("each \"11714Nested\" contains debug outputs for \"Assign (1)\" as", ((string)(null)), table273, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with ForEach InRecordset Not entered")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithForEachInRecordsetNotEntered()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with ForEach InRecordset Not entered", ((string[])(null)));
#line 1299
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1300
testRunner.Given("I have a workflow \"WFWithForEachRecordsetNotentered\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1301
testRunner.And("\"WFWithForEachRecordsetNotentered\" contains a Foreach \"ForEachTest1\" as \"InRecord" +
                    "set\" executions \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1302
testRunner.When("\"WFWithForEachRecordsetNotentered\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1303
testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table274 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table274.AddRow(new string[] {
                        "The Recordset Field is Required"});
            table274.AddRow(new string[] {
                        "Cannot execute a For Each with no content"});
#line 1304
testRunner.And("Workflow \"WFWithForEachRecordsetNotentered\" has errors", ((string)(null)), table274, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with ForEach InRange Not entered")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithForEachInRangeNotEntered()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with ForEach InRange Not entered", ((string[])(null)));
#line 1309
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1310
 testRunner.Given("I have a workflow \"WFWithForEachInRangeNotentered\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1311
 testRunner.And("\"WFWithForEachInRangeNotentered\" contains a Foreach \"ForEachTest1\" as \"InRange\" e" +
                    "xecutions \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1312
 testRunner.When("\"WFWithForEachInRangeNotentered\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1313
 testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table275 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table275.AddRow(new string[] {
                        "The FROM field is Required"});
            table275.AddRow(new string[] {
                        "Cannot execute a For Each with no content"});
#line 1314
 testRunner.And("Workflow \"WFWithForEachInRangeNotentered\" has errors", ((string)(null)), table275, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with ForEach NumberOfExecutes Not entered")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithForEachNumberOfExecutesNotEntered()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with ForEach NumberOfExecutes Not entered", ((string[])(null)));
#line 1319
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1320
 testRunner.Given("I have a workflow \"WFWithForEachNumberOfExecutesNotentered\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1321
 testRunner.And("\"WFWithForEachNumberOfExecutesNotentered\" contains a Foreach \"ForEachTest1\" as \"N" +
                    "umOfExecution\" executions \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1322
 testRunner.When("\"WFWithForEachNumberOfExecutesNotentered\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1323
 testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table276 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table276.AddRow(new string[] {
                        "Number of executes must be a whole number from 1 onwards."});
            table276.AddRow(new string[] {
                        "Cannot execute a For Each with no content"});
#line 1324
 testRunner.And("Workflow \"WFWithForEachNumberOfExecutesNotentered\" has errors", ((string)(null)), table276, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with ForEach InCsv Not entered")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithForEachInCsvNotEntered()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with ForEach InCsv Not entered", ((string[])(null)));
#line 1329
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1330
 testRunner.Given("I have a workflow \"WFWithForEachInCsvNotentered\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1331
 testRunner.And("\"WFWithForEachInCsvNotentered\" contains a Foreach \"ForEachTest1\" as \"InCSV\" execu" +
                    "tions \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1332
 testRunner.When("\"WFWithForEachInCsvNotentered\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1333
 testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table277 = new TechTalk.SpecFlow.Table(new string[] {
                        "Error"});
            table277.AddRow(new string[] {
                        "The CSV Field is Required"});
            table277.AddRow(new string[] {
                        "Cannot execute a For Each with no content"});
#line 1334
 testRunner.And("Workflow \"WFWithForEachInCsvNotentered\" has errors", ((string)(null)), table277, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with ForEach which contains assign")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithForEachWhichContainsAssign()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with ForEach which contains assign", ((string[])(null)));
#line 1339
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1340
      testRunner.Given("I have a workflow \"WFWithForEachContainingAssign\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table278 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table278.AddRow(new string[] {
                        "[[Warewolf]]",
                        "bob"});
#line 1341
   testRunner.And("\"WFWithForEachContainingAssign\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table278, "And ");
#line 1344
   testRunner.And("\"WFWithForEachContainingAssign\" contains a Foreach \"ForEachTest\" as \"NumOfExecuti" +
                    "on\" executions \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table279 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table279.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
#line 1345
   testRunner.And("\"ForEachTest\" contains an Assign \"MyAssign\" as", ((string)(null)), table279, "And ");
#line 1348
      testRunner.When("\"WFWithForEachContainingAssign\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1349
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table280 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table280.AddRow(new string[] {
                        "No. of Executes",
                        "2"});
#line 1350
   testRunner.And("the \"ForEachTest\" in WorkFlow \"WFWithForEachContainingAssign\" debug inputs as", ((string)(null)), table280, "And ");
#line 1353
      testRunner.And("the \"ForEachTest\" in WorkFlow \"WFWithForEachContainingAssign\" has  \"2\" nested chi" +
                    "ldren", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table281 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table281.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Test"});
#line 1354
   testRunner.And("the \"MyAssign\" in step 1 for \"ForEachTest\" debug inputs as", ((string)(null)), table281, "And ");
#line hidden
            TechTalk.SpecFlow.Table table282 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table282.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Test"});
#line 1357
   testRunner.And("the \"MyAssign\" in step 1 for \"ForEachTest\" debug outputs as", ((string)(null)), table282, "And ");
#line hidden
            TechTalk.SpecFlow.Table table283 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table283.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Test"});
#line 1360
   testRunner.And("the \"MyAssign\" in step 2 for \"ForEachTest\" debug inputs as", ((string)(null)), table283, "And ");
#line hidden
            TechTalk.SpecFlow.Table table284 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table284.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = Test"});
#line 1363
   testRunner.And("the \"MyAssign\" in step 2 for \"ForEachTest\" debug outputs as", ((string)(null)), table284, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Gather System Info returns values")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void GatherSystemInfoReturnsValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Gather System Info returns values", ((string[])(null)));
#line 1369
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1370
 testRunner.Given("I have a workflow \"WorkflowWithGatherSystemInfo\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table285 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table285.AddRow(new string[] {
                        "[[ComputerName]]",
                        "Computer Name"});
            table285.AddRow(new string[] {
                        "[[OperatingSystemVersion]]",
                        "Operating System Version"});
            table285.AddRow(new string[] {
                        "[[VirtualMemoryAvailable]]",
                        "Virtual Memory Available (MB)"});
            table285.AddRow(new string[] {
                        "[[VirtualMemoryTotal]]",
                        "Virtual Memory Total (MB)"});
            table285.AddRow(new string[] {
                        "[[MacAddress]]",
                        "MAC Addresses"});
            table285.AddRow(new string[] {
                        "[[GateWayAddress]]",
                        "Defaut Gateway Addresses"});
            table285.AddRow(new string[] {
                        "[[DNSAddress]]",
                        "DNS Server Addresses"});
            table285.AddRow(new string[] {
                        "[[IPv4Address]]",
                        "IPv4 Addresses"});
            table285.AddRow(new string[] {
                        "[[IPv6Address]]",
                        "IPv6 Addresses"});
            table285.AddRow(new string[] {
                        "[[WarewolfMemory]]",
                        "Warewolf Memory Usage"});
            table285.AddRow(new string[] {
                        "[[WarewolfCPU]]",
                        "Warewolf Total CPU Usage (All Cores)"});
            table285.AddRow(new string[] {
                        "[[WarewolfServerVersion]]",
                        "Warewolf Server Version"});
#line 1371
 testRunner.And("\"WorkflowWithGatherSystemInfo\" contains Gather System Info \"System info\" as", ((string)(null)), table285, "And ");
#line 1385
  testRunner.When("\"WorkflowWithGatherSystemInfo\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1386
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table286 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table286.AddRow(new string[] {
                        "1",
                        "[[ComputerName]] =",
                        "Computer Name"});
            table286.AddRow(new string[] {
                        "2",
                        "[[OperatingSystemVersion]] =",
                        "Operating System Version"});
            table286.AddRow(new string[] {
                        "3",
                        "[[VirtualMemoryAvailable]] =",
                        "Virtual Memory Available (MB)"});
            table286.AddRow(new string[] {
                        "4",
                        "[[VirtualMemoryTotal]] =",
                        "Virtual Memory Total (MB)"});
            table286.AddRow(new string[] {
                        "5",
                        "[[MacAddress]] =",
                        "MAC Addresses"});
            table286.AddRow(new string[] {
                        "6",
                        "[[GateWayAddress]] =",
                        "Defaut Gateway Addresses"});
            table286.AddRow(new string[] {
                        "7",
                        "[[DNSAddress]] =",
                        "DNS Server Addresses"});
            table286.AddRow(new string[] {
                        "8",
                        "[[IPv4Address]] =",
                        "IPv4 Addresses"});
            table286.AddRow(new string[] {
                        "9",
                        "[[IPv6Address]] =",
                        "IPv6 Addresses"});
            table286.AddRow(new string[] {
                        "10",
                        "[[WarewolfMemory]] =",
                        "Warewolf Memory Usage"});
            table286.AddRow(new string[] {
                        "11",
                        "[[WarewolfCPU]] =",
                        "Warewolf Total CPU Usage (All Cores)"});
            table286.AddRow(new string[] {
                        "12",
                        "[[WarewolfServerVersion]] =",
                        "Warewolf Server Version"});
#line 1387
   testRunner.And("the \"System info\" in WorkFlow \"WorkflowWithGatherSystemInfo\" debug inputs as", ((string)(null)), table286, "And ");
#line hidden
            TechTalk.SpecFlow.Table table287 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table287.AddRow(new string[] {
                        "1",
                        "[[ComputerName]] = String"});
            table287.AddRow(new string[] {
                        "2",
                        "[[OperatingSystemVersion]] = String"});
            table287.AddRow(new string[] {
                        "3",
                        "[[VirtualMemoryAvailable]] = String"});
            table287.AddRow(new string[] {
                        "4",
                        "[[VirtualMemoryTotal]] = String"});
            table287.AddRow(new string[] {
                        "5",
                        "[[MacAddress]] = String"});
            table287.AddRow(new string[] {
                        "6",
                        "[[GateWayAddress]] = String"});
            table287.AddRow(new string[] {
                        "7",
                        "[[DNSAddress]] = String"});
            table287.AddRow(new string[] {
                        "8",
                        "[[IPv4Address]] = String"});
            table287.AddRow(new string[] {
                        "9",
                        "[[IPv6Address]] = String"});
            table287.AddRow(new string[] {
                        "10",
                        "[[WarewolfMemory]] = String"});
            table287.AddRow(new string[] {
                        "11",
                        "[[WarewolfCPU]] = String"});
            table287.AddRow(new string[] {
                        "12",
                        "[[WarewolfServerVersion]] = String"});
#line 1401
   testRunner.And("the \"System info\" in Workflow \"WorkflowWithGatherSystemInfo\" debug outputs as", ((string)(null)), table287, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with ForEach which contains Sequence")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithForEachWhichContainsSequence()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with ForEach which contains Sequence", ((string[])(null)));
#line 1417
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1418
      testRunner.Given("I have a workflow \"WorkflowWithForEachContainingSeq\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table288 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table288.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "123"});
            table288.AddRow(new string[] {
                        "[[rec(1).b]]",
                        "456"});
#line 1419
   testRunner.And("\"WorkflowWithForEachContainingSeq\" contains an Assign \"RecVal\" as", ((string)(null)), table288, "And ");
#line 1423
   testRunner.And("\"WorkflowWithForEachContainingSeq\" contains a Foreach \"ForEachTest1\" as \"NumOfExe" +
                    "cution\" executions \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1424
   testRunner.And("\"ForEachTest1\" contains a Sequence \"Seq1\" as", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table289 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table289.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "None",
                        "",
                        "",
                        "Left"});
            table289.AddRow(new string[] {
                        "[[rec(1).b]]",
                        "None",
                        "",
                        "",
                        "Left"});
#line 1425
   testRunner.And("\'Seq1\' in \"ForEachTest1\" contains Data Merge \"Data Merge\" into \"[[rec(1).c]]\" as", ((string)(null)), table289, "And ");
#line hidden
            TechTalk.SpecFlow.Table table290 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table290.AddRow(new string[] {
                        "[[rec(1).d]]",
                        "Date & Time"});
#line 1429
    testRunner.And("\'Seq1\' in \"ForEachTest1\" contains Gather System Info \"System info\" as", ((string)(null)), table290, "And ");
#line 1432
   testRunner.When("\"WorkflowWithForEachContainingSeq\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1433
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table291 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table291.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "123"});
            table291.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] =",
                        "456"});
#line 1434
   testRunner.And("the \"RecVal\" in WorkFlow \"WorkflowWithForEachContainingSeq\" debug inputs as", ((string)(null)), table291, "And ");
#line hidden
            TechTalk.SpecFlow.Table table292 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table292.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]]  =  123"});
            table292.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]]  =  456"});
#line 1438
   testRunner.And("the \"RecVal\" in Workflow \"WorkflowWithForEachContainingSeq\" debug outputs as", ((string)(null)), table292, "And ");
#line hidden
            TechTalk.SpecFlow.Table table293 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table293.AddRow(new string[] {
                        "No. of Executes",
                        "2"});
#line 1442
    testRunner.And("the \"ForEachTest1\" in WorkFlow \"WorkflowWithForEachContainingSeq\" debug inputs as" +
                    "", ((string)(null)), table293, "And ");
#line 1445
      testRunner.And("the \"ForEachTest1\" in WorkFlow \"WorkflowWithForEachContainingSeq\" has  \"2\" nested" +
                    " children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table294 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table294.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 123",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
            table294.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = 456",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
#line 1446
   testRunner.And("the \"Data Merge\" in \'Seq1\' in step 1 for \"ForEachTest1\" debug inputs as", ((string)(null)), table294, "And ");
#line hidden
            TechTalk.SpecFlow.Table table295 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table295.AddRow(new string[] {
                        "[[rec(1).c]] = 123456"});
#line 1450
    testRunner.And("the \"Data Merge\" in \'Seq1\' in step 1 for \"ForEachTest1\" debug outputs as", ((string)(null)), table295, "And ");
#line hidden
            TechTalk.SpecFlow.Table table296 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table296.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] =",
                        "Date & Time"});
#line 1453
   testRunner.And("the \"System info\" in \'Seq1\' in step 1 for \"ForEachTest1\" debug inputs as", ((string)(null)), table296, "And ");
#line hidden
            TechTalk.SpecFlow.Table table297 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table297.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] = String"});
#line 1456
   testRunner.And("the \"System info\" in \'Seq1\' in step 1 for \"ForEachTest1\" debug outputs as", ((string)(null)), table297, "And ");
#line hidden
            TechTalk.SpecFlow.Table table298 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table298.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 123",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
            table298.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = 456",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
#line 1459
   testRunner.And("the \"Data Merge\" in \'Seq1\' in step 2 for \"ForEachTest1\" debug inputs as", ((string)(null)), table298, "And ");
#line hidden
            TechTalk.SpecFlow.Table table299 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table299.AddRow(new string[] {
                        "[[rec(1).c]] = 123456"});
#line 1463
    testRunner.And("the \"Data Merge\" in \'Seq1\' in step 2 for \"ForEachTest1\" debug outputs as", ((string)(null)), table299, "And ");
#line hidden
            TechTalk.SpecFlow.Table table300 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table300.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] =",
                        "Date & Time"});
#line 1466
   testRunner.And("the \"System info\" in \'Seq1\' in step 2 for \"ForEachTest1\" debug inputs as", ((string)(null)), table300, "And ");
#line hidden
            TechTalk.SpecFlow.Table table301 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table301.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] = String"});
#line 1469
   testRunner.And("the \"System info\" in \'Seq1\' in step 2 for \"ForEachTest1\" debug outputs as", ((string)(null)), table301, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing ForEach in Rec with star which contains Sequence")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingForEachInRecWithStarWhichContainsSequence()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing ForEach in Rec with star which contains Sequence", ((string[])(null)));
#line 1474
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1475
      testRunner.Given("I have a workflow \"WorkFWithForEachwithRecContainingSequence\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table302 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table302.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "123"});
            table302.AddRow(new string[] {
                        "[[rec(1).b]]",
                        "456"});
            table302.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "Test"});
            table302.AddRow(new string[] {
                        "[[rec(2).b]]",
                        "Warewolf"});
#line 1476
   testRunner.And("\"WorkFWithForEachwithRecContainingSequence\" contains an Assign \"RecVal\" as", ((string)(null)), table302, "And ");
#line 1482
   testRunner.And("\"WorkFWithForEachwithRecContainingSequence\" contains a Foreach \"ForEachTest1\" as " +
                    "\"InRecordset\" executions \"[[rec(*)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1483
   testRunner.And("\"ForEachTest1\" contains a Sequence \"Seq1\" as", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table303 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table303.AddRow(new string[] {
                        "[[rec(*).a]]",
                        "None",
                        "",
                        "",
                        "Left"});
            table303.AddRow(new string[] {
                        "[[rec(*).b]]",
                        "None",
                        "",
                        "",
                        "Left"});
#line 1484
   testRunner.And("\'Seq1\' in \"ForEachTest1\" contains Data Merge \"Data Merge\" into \"[[rec(*).c]]\" as", ((string)(null)), table303, "And ");
#line hidden
            TechTalk.SpecFlow.Table table304 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table304.AddRow(new string[] {
                        "[[rec(*).d]]",
                        "Date & Time"});
#line 1488
   testRunner.And("\'Seq1\' in \"ForEachTest1\" contains Gather System Info \"System info\" as", ((string)(null)), table304, "And ");
#line 1491
   testRunner.When("\"WorkFWithForEachwithRecContainingSequence\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1492
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table305 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table305.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "123"});
            table305.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] =",
                        "456"});
            table305.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]] =",
                        "Test"});
            table305.AddRow(new string[] {
                        "4",
                        "[[rec(2).b]] =",
                        "Warewolf"});
#line 1493
   testRunner.And("the \"RecVal\" in WorkFlow \"WorkFWithForEachwithRecContainingSequence\" debug inputs" +
                    " as", ((string)(null)), table305, "And ");
#line hidden
            TechTalk.SpecFlow.Table table306 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table306.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]]  =  123"});
            table306.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]]  =  456"});
            table306.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]] =  Test"});
            table306.AddRow(new string[] {
                        "4",
                        "[[rec(2).b]] =  Warewolf"});
#line 1499
   testRunner.And("the \"RecVal\" in Workflow \"WorkFWithForEachwithRecContainingSequence\" debug output" +
                    "s as", ((string)(null)), table306, "And ");
#line hidden
            TechTalk.SpecFlow.Table table307 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Recordset"});
            table307.AddRow(new string[] {
                        "* in Recordset",
                        ""});
            table307.AddRow(new string[] {
                        "",
                        "[[rec(1)]] ="});
            table307.AddRow(new string[] {
                        "",
                        "[[rec(2)]] ="});
#line 1505
   testRunner.And("the \"ForEachTest1\" in WorkFlow \"WorkFWithForEachwithRecContainingSequence\" debug " +
                    "inputs as", ((string)(null)), table307, "And ");
#line 1510
      testRunner.And("the \"ForEachTest1\" in WorkFlow \"WorkFWithForEachwithRecContainingSequence\" has  \"" +
                    "2\" nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table308 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table308.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 123",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
            table308.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = 456",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
#line 1511
   testRunner.And("the \"Data Merge\" in \'Seq1\' in step 1 for \"ForEachTest1\" debug inputs as", ((string)(null)), table308, "And ");
#line hidden
            TechTalk.SpecFlow.Table table309 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table309.AddRow(new string[] {
                        "[[rec(1).c]] = 123456"});
#line 1515
   testRunner.And("the \"Data Merge\" in \'Seq1\' in step 1 for \"ForEachTest1\" debug outputs as", ((string)(null)), table309, "And ");
#line hidden
            TechTalk.SpecFlow.Table table310 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table310.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] =",
                        "Date & Time"});
#line 1518
       testRunner.And("the \"System info\" in \'Seq1\' in step 1 for \"ForEachTest1\" debug inputs as", ((string)(null)), table310, "And ");
#line hidden
            TechTalk.SpecFlow.Table table311 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table311.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] = String"});
#line 1521
    testRunner.And("the \"System info\" in \'Seq1\' in step 1 for \"ForEachTest1\" debug outputs as", ((string)(null)), table311, "And ");
#line hidden
            TechTalk.SpecFlow.Table table312 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table312.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = Test",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
            table312.AddRow(new string[] {
                        "2",
                        "[[rec(2).b]] = Warewolf",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
#line 1524
   testRunner.And("the \"Data Merge\" in \'Seq1\' in step 2 for \"ForEachTest1\" debug inputs as", ((string)(null)), table312, "And ");
#line hidden
            TechTalk.SpecFlow.Table table313 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table313.AddRow(new string[] {
                        "[[rec(2).c]] = TestWarewolf"});
#line 1528
   testRunner.And("the \"Data Merge\" in \'Seq1\' in step 2 for \"ForEachTest1\" debug outputs as", ((string)(null)), table313, "And ");
#line hidden
            TechTalk.SpecFlow.Table table314 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table314.AddRow(new string[] {
                        "1",
                        "[[rec(2).d]] =",
                        "Date & Time"});
#line 1531
      testRunner.And("the \"System info\" in \'Seq1\' in step 2 for \"ForEachTest1\" debug inputs as", ((string)(null)), table314, "And ");
#line hidden
            TechTalk.SpecFlow.Table table315 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table315.AddRow(new string[] {
                        "1",
                        "[[rec(2).d]] = String"});
#line 1534
    testRunner.And("the \"System info\" in \'Seq1\' in step 2 for \"ForEachTest1\" debug outputs as", ((string)(null)), table315, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with ForEach in Rec with star which contains Dot Net DLL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithForEachInRecWithStarWhichContainsDotNetDLL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with ForEach in Rec with star which contains Dot Net DLL", ((string[])(null)));
#line 1540
 this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1541
      testRunner.Given("I have a workflow \"WFWithForEachContainingDotNetDLL\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table316 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table316.AddRow(new string[] {
                        "[[rec().number]]",
                        "1"});
            table316.AddRow(new string[] {
                        "[[rec().number]]",
                        "2"});
            table316.AddRow(new string[] {
                        "[[rec().number]]",
                        "3"});
            table316.AddRow(new string[] {
                        "[[rec().number]]",
                        "4"});
#line 1542
    testRunner.And("\"WFWithForEachContainingDotNetDLL\" contains an Assign \"RecVal\" as", ((string)(null)), table316, "And ");
#line 1548
   testRunner.And("\"WFWithForEachContainingDotNetDLL\" contains a Foreach \"ForEachTest\" as \"InRecords" +
                    "et\" executions \"[[rec(*)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table317 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source",
                        "ClassName",
                        "ObjectName",
                        "Action",
                        "ActionOutputVaribale"});
            table317.AddRow(new string[] {
                        "New DotNet Plugin Source",
                        "TestingDotnetDllCascading.Human",
                        "[[@human]]",
                        "BuildInts",
                        "[[rec1().num]]"});
#line 1549
   testRunner.And("\"ForEachTest\" contains an DotNet DLL \"DotNetService\" as", ((string)(null)), table317, "And ");
#line hidden
            TechTalk.SpecFlow.Table table318 = new TechTalk.SpecFlow.Table(new string[] {
                        "parameterName",
                        "value",
                        "type"});
#line 1552
   testRunner.And("\"DotNetService\" constructorinputs 0 with inputs as", ((string)(null)), table318, "And ");
#line 1555
      testRunner.When("\"WFWithForEachContainingDotNetDLL\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1556
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table319 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table319.AddRow(new string[] {
                        "1",
                        "[[rec().number]] =",
                        "1"});
            table319.AddRow(new string[] {
                        "2",
                        "[[rec().number]] =",
                        "2"});
            table319.AddRow(new string[] {
                        "3",
                        "[[rec().number]] =",
                        "3"});
            table319.AddRow(new string[] {
                        "4",
                        "[[rec().number]] =",
                        "4"});
#line 1557
    testRunner.And("the \"RecVal\" in WorkFlow \"WFWithForEachContainingDotNetDLL\" debug inputs as", ((string)(null)), table319, "And ");
#line 1563
      testRunner.And("the \"ForEachTest\" in WorkFlow \"WFWithForEachContainingDotNetDLL\" has  \"4\" nested " +
                    "children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table320 = new TechTalk.SpecFlow.Table(new string[] {
                        "label",
                        "Variable",
                        "value",
                        "operater"});
            table320.AddRow(new string[] {
                        "a",
                        "[[rec(1).number]]",
                        "1",
                        "="});
            table320.AddRow(new string[] {
                        "b",
                        "[[rec(1).number]]",
                        "1",
                        "="});
            table320.AddRow(new string[] {
                        "c",
                        "[[rec(1).number]]",
                        "1",
                        "="});
            table320.AddRow(new string[] {
                        "d",
                        "[[rec(1).number]]",
                        "1",
                        "="});
#line 1564
   testRunner.And("the dotnetdll \"BuildInts\" in \'DotNet DLL\' in step 1 for \"ForEachTest\" debug input" +
                    "s as", ((string)(null)), table320, "And ");
#line hidden
            TechTalk.SpecFlow.Table table321 = new TechTalk.SpecFlow.Table(new string[] {
                        "label",
                        "Variable",
                        "value",
                        "operater"});
            table321.AddRow(new string[] {
                        "a",
                        "[[rec(2).number]]",
                        "2",
                        "="});
            table321.AddRow(new string[] {
                        "b",
                        "[[rec(2).number]]",
                        "2",
                        "="});
            table321.AddRow(new string[] {
                        "c",
                        "[[rec(2).number]]",
                        "2",
                        "="});
            table321.AddRow(new string[] {
                        "d",
                        "[[rec(2).number]]",
                        "2",
                        "="});
#line 1570
   testRunner.And("the dotnetdll \"BuildInts\" in \'DotNet DLL\' in step 2 for \"ForEachTest\" debug input" +
                    "s as", ((string)(null)), table321, "And ");
#line hidden
            TechTalk.SpecFlow.Table table322 = new TechTalk.SpecFlow.Table(new string[] {
                        "label",
                        "Variable",
                        "value",
                        "operater"});
            table322.AddRow(new string[] {
                        "a",
                        "[[rec(3).number]]",
                        "3",
                        "="});
            table322.AddRow(new string[] {
                        "b",
                        "[[rec(3).number]]",
                        "3",
                        "="});
            table322.AddRow(new string[] {
                        "c",
                        "[[rec(3).number]]",
                        "3",
                        "="});
            table322.AddRow(new string[] {
                        "d",
                        "[[rec(3).number]]",
                        "3",
                        "="});
#line 1576
  testRunner.And("the dotnetdll \"BuildInts\" in \'DotNet DLL\' in step 3 for \"ForEachTest\" debug input" +
                    "s as", ((string)(null)), table322, "And ");
#line hidden
            TechTalk.SpecFlow.Table table323 = new TechTalk.SpecFlow.Table(new string[] {
                        "label",
                        "Variable",
                        "value",
                        "operater"});
            table323.AddRow(new string[] {
                        "a",
                        "[[rec(4).number]]",
                        "4",
                        "="});
            table323.AddRow(new string[] {
                        "b",
                        "[[rec(4).number]]",
                        "4",
                        "="});
            table323.AddRow(new string[] {
                        "c",
                        "[[rec(4).number]]",
                        "4",
                        "="});
            table323.AddRow(new string[] {
                        "d",
                        "[[rec(4).number]]",
                        "4",
                        "="});
#line 1582
  testRunner.And("the dotnetdll \"BuildInts\" in \'DotNet DLL\' in step 4 for \"ForEachTest\" debug input" +
                    "s as", ((string)(null)), table323, "And ");
#line hidden
            TechTalk.SpecFlow.Table table324 = new TechTalk.SpecFlow.Table(new string[] {
                        "label",
                        "Variable",
                        "value",
                        "operater"});
            table324.AddRow(new string[] {
                        "",
                        "[[rec1(4).num]]",
                        "1",
                        "="});
#line 1588
 testRunner.And("the dotnetdll \"BuildInts\" in \"DotNet DLL\" in step 1 for \"ForEachTest\" debug outpu" +
                    "t as", ((string)(null)), table324, "And ");
#line hidden
            TechTalk.SpecFlow.Table table325 = new TechTalk.SpecFlow.Table(new string[] {
                        "label",
                        "Variable",
                        "value",
                        "operater"});
            table325.AddRow(new string[] {
                        "",
                        "[[rec1(8).num]]",
                        "2",
                        "="});
#line 1591
    testRunner.And("the dotnetdll \"BuildInts\" in \"DotNet DLL\" in step 2 for \"ForEachTest\" debug outpu" +
                    "t as", ((string)(null)), table325, "And ");
#line hidden
            TechTalk.SpecFlow.Table table326 = new TechTalk.SpecFlow.Table(new string[] {
                        "label",
                        "Variable",
                        "value",
                        "operater"});
            table326.AddRow(new string[] {
                        "",
                        "[[rec1(12).num]]",
                        "3",
                        "="});
#line 1594
    testRunner.And("the dotnetdll \"BuildInts\" in \"DotNet DLL\" in step 3 for \"ForEachTest\" debug outpu" +
                    "t as", ((string)(null)), table326, "And ");
#line hidden
            TechTalk.SpecFlow.Table table327 = new TechTalk.SpecFlow.Table(new string[] {
                        "label",
                        "Variable",
                        "value",
                        "operater"});
            table327.AddRow(new string[] {
                        "",
                        "[[rec1(16).num]]",
                        "4",
                        "="});
#line 1597
    testRunner.And("the dotnetdll \"BuildInts\" in \"DotNet DLL\" in step 4 for \"ForEachTest\" debug outpu" +
                    "t as", ((string)(null)), table327, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing 2 ForEach\"s inside a ForEach which contains Assign only")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void Executing2ForEachSInsideAForEachWhichContainsAssignOnly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing 2 ForEach\"s inside a ForEach which contains Assign only", ((string[])(null)));
#line 1604
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1605
      testRunner.Given("I have a workflow \"WFContainsForEachInsideforEach\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1606
   testRunner.And("\"WFContainsForEachInsideforEach\" contains a Foreach \"ForEachTest1\" as \"NumOfExecu" +
                    "tion\" executions \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1607
   testRunner.And("\"ForEachTest1\" contains a Foreach \"ForEachTest2\" as \"NumOfExecution\" executions \"" +
                    "2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1608
   testRunner.And("\"ForEachTest2\" contains a Foreach \"ForEachTest3\" as \"NumOfExecution\" executions \"" +
                    "2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table328 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table328.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "123"});
#line 1609
   testRunner.And("\"ForEachTest3\" contains an Assign \"Testingoutput\" as", ((string)(null)), table328, "And ");
#line 1612
   testRunner.When("\"WFContainsForEachInsideforEach\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1613
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table329 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table329.AddRow(new string[] {
                        "No. of Executes",
                        "2"});
#line 1614
   testRunner.And("the \"ForEachTest1\" in WorkFlow \"WFContainsForEachInsideforEach\" debug inputs as", ((string)(null)), table329, "And ");
#line 1617
   testRunner.And("the \"ForEachTest1\" in WorkFlow \"WFContainsForEachInsideforEach\" has  \"2\" nested c" +
                    "hildren", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table330 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table330.AddRow(new string[] {
                        "No. of Executes",
                        "2"});
#line 1618
      testRunner.And("the \"ForEachTest2\" in step 1 for \"ForEachTest1\" debug inputs as", ((string)(null)), table330, "And ");
#line 1621
      testRunner.And("the \"ForEachTest2\" in WorkFlow \"ForEachTest1\" has  \"2\" nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table331 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table331.AddRow(new string[] {
                        "No. of Executes",
                        "2"});
#line 1622
   testRunner.And("the \"ForEachTest3\" in step 1 for \"ForEachTest2\" debug inputs as", ((string)(null)), table331, "And ");
#line 1625
   testRunner.And("the \"ForEachTest3\" in WorkFlow \"ForEachTest2\" has  \"2\" nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table332 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table332.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "123"});
#line 1626
   testRunner.And("the \"Testingoutput\" in step 1 for \"ForEachTest3\" debug inputs as", ((string)(null)), table332, "And ");
#line hidden
            TechTalk.SpecFlow.Table table333 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table333.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]]  =  123"});
#line 1629
   testRunner.And("the \"Testingoutput\" in step 1 for \"ForEachTest3\" debug outputs as", ((string)(null)), table333, "And ");
#line hidden
            TechTalk.SpecFlow.Table table334 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table334.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 123",
                        "123"});
#line 1632
   testRunner.And("the \"Testingoutput\" in step 2 for \"ForEachTest3\" debug inputs as", ((string)(null)), table334, "And ");
#line hidden
            TechTalk.SpecFlow.Table table335 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table335.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 123"});
#line 1635
   testRunner.And("the \"Testingoutput\" in step 2 for \"ForEachTest3\" debug outputs as", ((string)(null)), table335, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing 2 ForEach\"s inside a ForEach which contains Assign only Large Execution" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void Executing2ForEachSInsideAForEachWhichContainsAssignOnlyLargeExecution()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing 2 ForEach\"s inside a ForEach which contains Assign only Large Execution" +
                    "", ((string[])(null)));
#line 1639
  this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1640
      testRunner.Given("I have a workflow \"WFForEachInsideforEachLargeTenFifty\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1641
   testRunner.And("\"WFForEachInsideforEachLargeTenFifty\" contains a Foreach \"ForEachTest1\" as \"NumOf" +
                    "Execution\" executions \"10\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1642
   testRunner.And("\"ForEachTest1\" contains a Foreach \"ForEachTest2\" as \"NumOfExecution\" executions \"" +
                    "50\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table336 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table336.AddRow(new string[] {
                        "[[rec().a]]",
                        "123asda"});
            table336.AddRow(new string[] {
                        "[[rec().b]]",
                        "aaaaa"});
            table336.AddRow(new string[] {
                        "[[rec().c]]",
                        "rrrrrrr"});
            table336.AddRow(new string[] {
                        "[[rec().d]]",
                        "123asda"});
            table336.AddRow(new string[] {
                        "[[rec().e]]",
                        "sdfsdrf45456"});
            table336.AddRow(new string[] {
                        "[[rec().f]]",
                        "cvbcb1123"});
            table336.AddRow(new string[] {
                        "[[rec().g]]",
                        "aasdww2323"});
            table336.AddRow(new string[] {
                        "[[rec().h]]",
                        "oooooo9999"});
            table336.AddRow(new string[] {
                        "[[rec().i]]",
                        "sdfsdf3434"});
            table336.AddRow(new string[] {
                        "[[rec().j]]",
                        "asda123123"});
            table336.AddRow(new string[] {
                        "[[rec().k]]",
                        "sssdff444"});
            table336.AddRow(new string[] {
                        "[[rec().l]]",
                        "asdvvvbbg3333"});
            table336.AddRow(new string[] {
                        "[[rec().m]]",
                        "aasdasd"});
            table336.AddRow(new string[] {
                        "[[rec().n]]",
                        "aasdd222"});
            table336.AddRow(new string[] {
                        "[[rec().o]]",
                        "22323asda"});
#line 1643
   testRunner.And("\"ForEachTest2\" contains an Assign \"Testingoutput\" as", ((string)(null)), table336, "And ");
#line 1660
   testRunner.And("I get the server memory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1661
   testRunner.When("\"WFForEachInsideforEachLargeTenFifty\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1662
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1663
   testRunner.And("the server CPU usage is less than 15%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1664
   testRunner.And("the server memory difference is less than 200 mb", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table337 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table337.AddRow(new string[] {
                        "No. of Executes",
                        "10"});
#line 1665
   testRunner.And("the \"ForEachTest1\" in WorkFlow \"WFForEachInsideforEachLargeTenFifty\" debug inputs" +
                    " as", ((string)(null)), table337, "And ");
#line 1668
   testRunner.And("the \"ForEachTest1\" in WorkFlow \"WFForEachInsideforEachLargeTenFifty\" has  \"10\" ne" +
                    "sted children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table338 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table338.AddRow(new string[] {
                        "No. of Executes",
                        "50"});
#line 1669
      testRunner.And("the \"ForEachTest2\" in step 1 for \"ForEachTest1\" debug inputs as", ((string)(null)), table338, "And ");
#line 1672
      testRunner.And("the \"ForEachTest2\" in WorkFlow \"ForEachTest1\" has  \"50\" nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table339 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table339.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "123asda"});
            table339.AddRow(new string[] {
                        "2",
                        "[[rec().b]] =",
                        "aaaaa"});
            table339.AddRow(new string[] {
                        "3",
                        "[[rec().c]] =",
                        "rrrrrrr"});
            table339.AddRow(new string[] {
                        "4",
                        "[[rec().d]] =",
                        "123asda"});
            table339.AddRow(new string[] {
                        "5",
                        "[[rec().e]] =",
                        "sdfsdrf45456"});
            table339.AddRow(new string[] {
                        "6",
                        "[[rec().f]] =",
                        "cvbcb1123"});
            table339.AddRow(new string[] {
                        "7",
                        "[[rec().g]] =",
                        "aasdww2323"});
            table339.AddRow(new string[] {
                        "8",
                        "[[rec().h]] =",
                        "oooooo9999"});
            table339.AddRow(new string[] {
                        "9",
                        "[[rec().i]] =",
                        "sdfsdf3434"});
            table339.AddRow(new string[] {
                        "10",
                        "[[rec().j]] =",
                        "asda123123"});
            table339.AddRow(new string[] {
                        "11",
                        "[[rec().k]] =",
                        "sssdff444"});
            table339.AddRow(new string[] {
                        "12",
                        "[[rec().l]] =",
                        "asdvvvbbg3333"});
            table339.AddRow(new string[] {
                        "13",
                        "[[rec().m]] =",
                        "aasdasd"});
            table339.AddRow(new string[] {
                        "14",
                        "[[rec().n]] =",
                        "aasdd222"});
            table339.AddRow(new string[] {
                        "15",
                        "[[rec().o]] =",
                        "22323asda"});
#line 1673
   testRunner.And("the \"Testingoutput\" in step 50 for \"ForEachTest2\" debug inputs as", ((string)(null)), table339, "And ");
#line hidden
            TechTalk.SpecFlow.Table table340 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table340.AddRow(new string[] {
                        "1",
                        "[[rec(50).a]] = 123asda"});
            table340.AddRow(new string[] {
                        "2",
                        "[[rec(50).b]] = aaaaa"});
            table340.AddRow(new string[] {
                        "3",
                        "[[rec(50).c]] = rrrrrrr"});
            table340.AddRow(new string[] {
                        "4",
                        "[[rec(50).d]] = 123asda"});
            table340.AddRow(new string[] {
                        "5",
                        "[[rec(50).e]] = sdfsdrf45456"});
            table340.AddRow(new string[] {
                        "6",
                        "[[rec(50).f]] = cvbcb1123"});
            table340.AddRow(new string[] {
                        "7",
                        "[[rec(50).g]] = aasdww2323"});
            table340.AddRow(new string[] {
                        "8",
                        "[[rec(50).h]] = oooooo9999"});
            table340.AddRow(new string[] {
                        "9",
                        "[[rec(50).i]] = sdfsdf3434"});
            table340.AddRow(new string[] {
                        "10",
                        "[[rec(50).j]] = asda123123"});
            table340.AddRow(new string[] {
                        "11",
                        "[[rec(50).k]] = sssdff444"});
            table340.AddRow(new string[] {
                        "12",
                        "[[rec(50).l]] = asdvvvbbg3333"});
            table340.AddRow(new string[] {
                        "13",
                        "[[rec(50).m]] = aasdasd"});
            table340.AddRow(new string[] {
                        "14",
                        "[[rec(50).n]] = aasdd222"});
            table340.AddRow(new string[] {
                        "15",
                        "[[rec(50).o]] = 22323asda"});
#line 1690
   testRunner.And("the \"Testingoutput\" in step 50 for \"ForEachTest2\" debug outputs as", ((string)(null)), table340, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow Assign and Find Record index tool with two variables in reult field expe" +
            "ct error")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowAssignAndFindRecordIndexToolWithTwoVariablesInReultFieldExpectError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow Assign and Find Record index tool with two variables in reult field expe" +
                    "ct error", ((string[])(null)));
#line 1708
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1709
      testRunner.Given("I have a workflow \"WFWithAssignandFindRecordindexy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table341 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "variable",
                        "value"});
            table341.AddRow(new string[] {
                        "#",
                        "[[rec(1).a]]",
                        "Warewolf"});
#line 1710
   testRunner.And("\"WFWithAssignandFindRecordindexy\" contains an Assign \"Record\" as", ((string)(null)), table341, "And ");
#line hidden
            TechTalk.SpecFlow.Table table342 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "In Field",
                        "#",
                        "Match Type",
                        "Match",
                        "Require All Matches To Be True",
                        "Require All Fields To Match"});
            table342.AddRow(new string[] {
                        "#",
                        "[[rec().a]]",
                        "1",
                        "=",
                        "Warewolf",
                        "YES",
                        "NO"});
#line 1713
   testRunner.And("\"WFWithAssignandFindRecordindexy\" contains Find Record Index \"FindRecord0\" into r" +
                    "esult as \"[[a]][[b]]\"", ((string)(null)), table342, "And ");
#line 1716
   testRunner.When("\"WFWithAssignandFindRecordindexy\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1717
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table343 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table343.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "Warewolf"});
#line 1718
   testRunner.And("the \"Record\" in WorkFlow \"WFWithAssignandFindRecordindexy\" debug inputs as", ((string)(null)), table343, "And ");
#line hidden
            TechTalk.SpecFlow.Table table344 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table344.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]]         =  Warewolf"});
#line 1721
   testRunner.And("the \"Record\" in Workflow \"WFWithAssignandFindRecordindexy\" debug outputs as", ((string)(null)), table344, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow Assign and Find Record index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowAssignAndFindRecordIndex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow Assign and Find Record index", ((string[])(null)));
#line 1726
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1727
      testRunner.Given("I have a workflow \"WFWithAssignandFindRecordindexTool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table345 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "variable",
                        "value"});
            table345.AddRow(new string[] {
                        "#",
                        "[[rec(1).a]]",
                        "Warewolf"});
#line 1728
   testRunner.And("\"WFWithAssignandFindRecordindexTool\" contains an Assign \"Record\" as", ((string)(null)), table345, "And ");
#line hidden
            TechTalk.SpecFlow.Table table346 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "In Field",
                        "#",
                        "Match Type",
                        "Match",
                        "Require All Matches To Be True",
                        "Require All Fields To Match"});
            table346.AddRow(new string[] {
                        "#",
                        "[[rec().a]]",
                        "1",
                        "=",
                        "Warewolf",
                        "YES",
                        "NO"});
#line 1731
   testRunner.And("\"WFWithAssignandFindRecordindexTool\" contains Find Record Index \"FindRecord0\" int" +
                    "o result as \"[[a]]*]]\"", ((string)(null)), table346, "And ");
#line 1734
   testRunner.When("\"WFWithAssignandFindRecordindexTool\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1735
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table347 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table347.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "Warewolf"});
#line 1736
   testRunner.And("the \"Record\" in WorkFlow \"WFWithAssignandFindRecordindexTool\" debug inputs as", ((string)(null)), table347, "And ");
#line hidden
            TechTalk.SpecFlow.Table table348 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table348.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]]         =  Warewolf"});
#line 1739
   testRunner.And("the \"Record\" in Workflow \"WFWithAssignandFindRecordindexTool\" debug outputs as", ((string)(null)), table348, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void TestingLengthWithTwoVariablesInResultField(string no, string variable, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Length with two variables in Result field", exampleTags);
#line 1743
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1744
      testRunner.Given("I have a workflow \"WorkflowforLength\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table349 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table349.AddRow(new string[] {
                        "[[rec().a]]",
                        "1213"});
            table349.AddRow(new string[] {
                        "[[rec().a]]",
                        "4561"});
#line 1745
      testRunner.And("\"WorkflowforLength\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table349, "And ");
#line 1749
   testRunner.And(string.Format("\"WorkflowforLength\" contains Length \"Len\" on \"[[rec(*)]]\" into \"{0}\"", variable), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1750
   testRunner.When("\"WorkflowforLength\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1751
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table350 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table350.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "1213"});
            table350.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "4561"});
#line 1752
      testRunner.And("the \"Rec To Convert\" in WorkFlow \"WorkflowforLength\" debug inputs as", ((string)(null)), table350, "And ");
#line hidden
            TechTalk.SpecFlow.Table table351 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table351.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 1213"});
            table351.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 4561"});
#line 1756
   testRunner.And("the \"Rec To Convert\" in Workflow \"WorkflowforLength\" debug outputs as", ((string)(null)), table351, "And ");
#line hidden
            TechTalk.SpecFlow.Table table352 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table352.AddRow(new string[] {
                        "[[rec(1).a]] = 1213"});
            table352.AddRow(new string[] {
                        "[[rec(2).a]] = 4561"});
#line 1760
   testRunner.And("the \"Len\" in WorkFlow \"WorkflowforLength\" debug inputs as", ((string)(null)), table352, "And ");
#line hidden
            TechTalk.SpecFlow.Table table353 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table353.AddRow(new string[] {
                        ""});
#line 1764
   testRunner.And("the \"Len\" in Workflow \"WorkflowforLength\" debug outputs as", ((string)(null)), table353, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[length]][[a]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_1()
        {
            this.TestingLengthWithTwoVariablesInResultField("1", "[[length]][[a]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[a]]*]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_2()
        {
            this.TestingLengthWithTwoVariablesInResultField("2", "[[a]]*]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[var@]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_3()
        {
            this.TestingLengthWithTwoVariablesInResultField("3", "[[var@]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[var]]00]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_4()
        {
            this.TestingLengthWithTwoVariablesInResultField("4", "[[var]]00]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[(1var)]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_5()
        {
            this.TestingLengthWithTwoVariablesInResultField("5", "[[(1var)]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "6")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[var[[a]]]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_6()
        {
            this.TestingLengthWithTwoVariablesInResultField("6", "[[var[[a]]]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "7")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[var.a]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_7()
        {
            this.TestingLengthWithTwoVariablesInResultField("7", "[[var.a]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "8")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[@var]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_8()
        {
            this.TestingLengthWithTwoVariablesInResultField("8", "[[@var]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "9")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[var 1]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_9()
        {
            this.TestingLengthWithTwoVariablesInResultField("9", "[[var 1]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[rec(1).[[rec().1]]]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_10()
        {
            this.TestingLengthWithTwoVariablesInResultField("10", "[[rec(1).[[rec().1]]]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 11")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "11")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "11")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[rec(@).a]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_11()
        {
            this.TestingLengthWithTwoVariablesInResultField("11", "[[rec(@).a]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 12")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "12")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "12")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[rec\"()\".a]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_12()
        {
            this.TestingLengthWithTwoVariablesInResultField("12", "[[rec\"()\".a]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Length with two variables in Result field: 13")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "13")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "13")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[rec([[[[b]]]]).a]]")]
        public virtual void TestingLengthWithTwoVariablesInResultField_13()
        {
            this.TestingLengthWithTwoVariablesInResultField("13", "[[rec([[[[b]]]]).a]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Data Split with two variables in Result field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void TestingDataSplitWithTwoVariablesInResultField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Data Split with two variables in Result field", ((string[])(null)));
#line 1784
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1785
      testRunner.Given("I have a workflow \"WorkflowforDatasplit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table354 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table354.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
            table354.AddRow(new string[] {
                        "[[rec().a]]",
                        "Warewolf"});
#line 1786
      testRunner.And("\"WorkflowforDatasplit\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table354, "And ");
#line hidden
            TechTalk.SpecFlow.Table table355 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table355.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "[[fr().a]][[a]]",
                        "Index",
                        "2",
                        "Unselected",
                        ""});
            table355.AddRow(new string[] {
                        "",
                        "[[fr().b]][[b]]",
                        "Index",
                        "2",
                        "Unselected",
                        ""});
#line 1790
   testRunner.And("\"WorkflowforDatasplit\" contains Data Split \"Data Split\" as", ((string)(null)), table355, "And ");
#line 1794
   testRunner.When("\"WorkflowforDatasplit\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1795
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table356 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table356.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Test"});
            table356.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "Warewolf"});
#line 1796
      testRunner.And("the \"Rec To Convert\" in WorkFlow \"WorkflowforDatasplit\" debug inputs as", ((string)(null)), table356, "And ");
#line hidden
            TechTalk.SpecFlow.Table table357 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table357.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Test"});
            table357.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = Warewolf"});
#line 1800
   testRunner.And("the \"Rec To Convert\" in Workflow \"WorkflowforDatasplit\" debug outputs as", ((string)(null)), table357, "And ");
#line hidden
            TechTalk.SpecFlow.Table table358 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table358.AddRow(new string[] {
                        "[[rec(1).a]] = Test",
                        "Forward",
                        "No",
                        "1",
                        "[[fr().a]][[a]] =",
                        "Index",
                        "2",
                        "No",
                        ""});
            table358.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[fr().b]][[b]] =",
                        "Index",
                        "2",
                        "No",
                        ""});
#line 1804
  testRunner.And("the \"Data Split\" in WorkFlow \"WorkflowforDatasplit\" debug inputs as", ((string)(null)), table358, "And ");
#line hidden
            TechTalk.SpecFlow.Table table359 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 1808
   testRunner.And("the \"Data Split\" in Workflow \"WorkflowforDatasplit\" debug outputs as", ((string)(null)), table359, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void TestingFormatNumbersWithTwoVariablesInResult(string no, string variable, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Format Numbers with two variables in Result", exampleTags);
#line 1811
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1812
     testRunner.Given("I have a workflow \"Workflowforfn\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table360 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table360.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table360.AddRow(new string[] {
                        "[[b]]",
                        "2"});
#line 1813
   testRunner.And("\"Workflowforfn\" contains an Assign \"Values\" as", ((string)(null)), table360, "And ");
#line hidden
            TechTalk.SpecFlow.Table table361 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table361.AddRow(new string[] {
                        "123.568",
                        "Up",
                        "2",
                        "2",
                        string.Format("\"{0}\"", variable)});
#line 1817
   testRunner.And("\"Workflowforfn\" contains Format Number \"Fnumber\" as", ((string)(null)), table361, "And ");
#line 1820
   testRunner.When("\"Workflowforfn\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1821
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table362 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table362.AddRow(new string[] {
                        "123.568",
                        "Up",
                        "2",
                        "2"});
#line 1822
   testRunner.And("the \"Fnumber\" in WorkFlow \"Workflowforfn\" debug inputs as", ((string)(null)), table362, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Format Numbers with two variables in Result: 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[a]][[Result]]")]
        public virtual void TestingFormatNumbersWithTwoVariablesInResult_1()
        {
            this.TestingFormatNumbersWithTwoVariablesInResult("1", "[[a]][[Result]]", ((string[])(null)));
#line hidden
        }
        
        public virtual void TestingRandomNumbersWithTwoVariablesInResult(string no, string variable, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Random Numbers with two variables in Result", exampleTags);
#line 1829
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1830
      testRunner.Given("I have a workflow \"Workflowforrandom123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table363 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table363.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table363.AddRow(new string[] {
                        "[[b]]",
                        "10"});
#line 1831
   testRunner.And("\"Workflowforrandom123\" contains an Assign \"Values\" as", ((string)(null)), table363, "And ");
#line hidden
            TechTalk.SpecFlow.Table table364 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table364.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "10",
                        string.Format("\"{0}\"", variable)});
#line 1835
   testRunner.And("\"Workflowforrandom123\" contains Random \"Randoms\" as", ((string)(null)), table364, "And ");
#line 1838
   testRunner.When("\"Workflowforrandom123\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1839
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table365 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table365.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table365.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "10"});
#line 1840
    testRunner.And("the \"Values\" in WorkFlow \"Workflowforrandom123\" debug inputs as", ((string)(null)), table365, "And ");
#line hidden
            TechTalk.SpecFlow.Table table366 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table366.AddRow(new string[] {
                        "1",
                        "[[a]] =  1"});
            table366.AddRow(new string[] {
                        "2",
                        "[[b]] =  10"});
#line 1844
   testRunner.And("the \"Values\" in Workflow \"Workflowforrandom123\" debug outputs as", ((string)(null)), table366, "And ");
#line hidden
            TechTalk.SpecFlow.Table table367 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table367.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "10"});
#line 1848
   testRunner.And("the \"Randoms\" in WorkFlow \"Workflowforrandom123\" debug inputs as", ((string)(null)), table367, "And ");
#line hidden
            TechTalk.SpecFlow.Table table368 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table368.AddRow(new string[] {
                        string.Format("\"{0}\" =", variable)});
#line 1851
      testRunner.And("the \"Randoms\" in Workflow \"Workflowforrandom123\" debug outputs as", ((string)(null)), table368, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Random Numbers with two variables in Result: 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[a]][[Result]]")]
        public virtual void TestingRandomNumbersWithTwoVariablesInResult_1()
        {
            this.TestingRandomNumbersWithTwoVariablesInResult("1", "[[a]][[Result]]", ((string[])(null)));
#line hidden
        }
        
        public virtual void TestingDateAndTimeWithTwoVariablesInResultField(string no, string variable, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Date and Time with two variables in Result field", exampleTags);
#line 1858
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1859
      testRunner.Given("I have a workflow \"WorkflowforDT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table369 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table369.AddRow(new string[] {
                        "[[rec().a]]",
                        "12/01/2001"});
#line 1860
      testRunner.And("\"WorkflowforDT\" contains an Assign \"Convert2\" as", ((string)(null)), table369, "And ");
#line hidden
            TechTalk.SpecFlow.Table table370 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "Output Format",
                        "Result"});
            table370.AddRow(new string[] {
                        "[[rec().a]]",
                        "dd/mm/yyyy",
                        "1",
                        "dd/mm/yyyy",
                        string.Format("\"{0}\"", variable)});
#line 1863
   testRunner.And("\"WorkflowforDT\" contains Date and Time \"AddDates\" as", ((string)(null)), table370, "And ");
#line 1866
   testRunner.When("\"WorkflowforDT\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1867
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table371 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table371.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "12/01/2001"});
#line 1868
      testRunner.And("the \"Convert2\" in WorkFlow \"WorkflowforDT\" debug inputs as", ((string)(null)), table371, "And ");
#line hidden
            TechTalk.SpecFlow.Table table372 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table372.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 12/01/2001"});
#line 1871
   testRunner.And("the \"Convert2\" in Workflow \"WorkflowforDT\" debug outputs as", ((string)(null)), table372, "And ");
#line hidden
            TechTalk.SpecFlow.Table table373 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table373.AddRow(new string[] {
                        "[[rec(1).a]] = 12/01/2001",
                        "dd/mm/yyyy",
                        "Years",
                        "1",
                        "dd/mm/yyyy"});
#line 1874
   testRunner.And("the \"AddDates\" in WorkFlow \"WorkflowforDT\" debug inputs as", ((string)(null)), table373, "And ");
#line hidden
            TechTalk.SpecFlow.Table table374 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table374.AddRow(new string[] {
                        string.Format("\"{0}\" =", variable)});
#line 1877
   testRunner.And("the \"AddDates\" in Workflow \"WorkflowforDT\" debug outputs as", ((string)(null)), table374, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Date and Time with two variables in Result field: 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[a]][[Result]]")]
        public virtual void TestingDateAndTimeWithTwoVariablesInResultField_1()
        {
            this.TestingDateAndTimeWithTwoVariablesInResultField("1", "[[a]][[Result]]", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Unique Tool, finding unique data from multiple rows")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndUniqueToolFindingUniqueDataFromMultipleRows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Unique Tool, finding unique data from multiple rows", ((string[])(null)));
#line 1885
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1886
      testRunner.Given("I have a workflow \"workflowithAssignandUnique\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table375 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table375.AddRow(new string[] {
                        "[[rs().row]]",
                        "10"});
            table375.AddRow(new string[] {
                        "[[rs().data]]",
                        "10"});
            table375.AddRow(new string[] {
                        "[[rs().row]]",
                        "40"});
            table375.AddRow(new string[] {
                        "[[rs().data]]",
                        "20"});
            table375.AddRow(new string[] {
                        "[[rs().row]]",
                        "20"});
            table375.AddRow(new string[] {
                        "[[rs().data]]",
                        "20"});
            table375.AddRow(new string[] {
                        "[[rs().row]]",
                        "30"});
            table375.AddRow(new string[] {
                        "[[rs().data]]",
                        "40"});
#line 1887
      testRunner.And("\"workflowithAssignandUnique\" contains an Assign \"Records\" as", ((string)(null)), table375, "And ");
#line hidden
            TechTalk.SpecFlow.Table table376 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table376.AddRow(new string[] {
                        "[[rs(*).row]],[[rs(*).data]]",
                        "[[rs().row]]",
                        "[[rec().unique]]"});
#line 1897
   testRunner.And("\"workflowithAssignandUnique\" contains an Unique \"Unique rec\" as", ((string)(null)), table376, "And ");
#line 1900
   testRunner.When("\"workflowithAssignandUnique\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1901
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table377 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table377.AddRow(new string[] {
                        "1",
                        "[[rs().row]] =",
                        "10"});
            table377.AddRow(new string[] {
                        "2",
                        "[[rs().data]] =",
                        "10"});
            table377.AddRow(new string[] {
                        "3",
                        "[[rs().row]] =",
                        "40"});
            table377.AddRow(new string[] {
                        "4",
                        "[[rs().data]] =",
                        "20"});
            table377.AddRow(new string[] {
                        "5",
                        "[[rs().row]] =",
                        "20"});
            table377.AddRow(new string[] {
                        "6",
                        "[[rs().data]] =",
                        "20"});
            table377.AddRow(new string[] {
                        "7",
                        "[[rs().row]] =",
                        "30"});
            table377.AddRow(new string[] {
                        "8",
                        "[[rs().data]] =",
                        "40"});
#line 1902
   testRunner.And("the \"Records\" in WorkFlow \"workflowithAssignandUnique\" debug inputs as", ((string)(null)), table377, "And ");
#line hidden
            TechTalk.SpecFlow.Table table378 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table378.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =  10"});
            table378.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =  10"});
            table378.AddRow(new string[] {
                        "3",
                        "[[rs(2).row]] =  40"});
            table378.AddRow(new string[] {
                        "4",
                        "[[rs(2).data]] =  20"});
            table378.AddRow(new string[] {
                        "5",
                        "[[rs(3).row]] =  20"});
            table378.AddRow(new string[] {
                        "6",
                        "[[rs(3).data]] =  20"});
            table378.AddRow(new string[] {
                        "7",
                        "[[rs(4).row]] =  30"});
            table378.AddRow(new string[] {
                        "8",
                        "[[rs(4).data]] =  40"});
#line 1912
   testRunner.And("the \"Records\" in Workflow \"workflowithAssignandUnique\" debug outputs as", ((string)(null)), table378, "And ");
#line hidden
            TechTalk.SpecFlow.Table table379 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table379.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).row]] = 10",
                        ""});
            table379.AddRow(new string[] {
                        "",
                        "[[rs(2).row]] = 40",
                        ""});
            table379.AddRow(new string[] {
                        "",
                        "[[rs(3).row]] = 20",
                        ""});
            table379.AddRow(new string[] {
                        "",
                        "[[rs(4).row]] = 30",
                        ""});
            table379.AddRow(new string[] {
                        "",
                        "[[rs(1).data]] = 10",
                        ""});
            table379.AddRow(new string[] {
                        "",
                        "[[rs(2).data]] = 20",
                        ""});
            table379.AddRow(new string[] {
                        "",
                        "[[rs(3).data]] = 20",
                        ""});
            table379.AddRow(new string[] {
                        "",
                        "[[rs(4).data]] = 40",
                        ""});
            table379.AddRow(new string[] {
                        "",
                        "",
                        "[[rs().row]] ="});
#line 1922
   testRunner.And("the \"Unique rec\" in WorkFlow \"workflowithAssignandUnique\" debug inputs as", ((string)(null)), table379, "And ");
#line hidden
            TechTalk.SpecFlow.Table table380 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table380.AddRow(new string[] {
                        "1",
                        "[[rec(1).unique]] = 10"});
            table380.AddRow(new string[] {
                        "",
                        "[[rec(2).unique]] = 40"});
            table380.AddRow(new string[] {
                        "",
                        "[[rec(3).unique]] = 20"});
            table380.AddRow(new string[] {
                        "",
                        "[[rec(4).unique]] = 30"});
#line 1933
      testRunner.And("the \"Unique rec\" in Workflow \"workflowithAssignandUnique\" debug outputs as", ((string)(null)), table380, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Unique Tool, Infields rec without star")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndUniqueToolInfieldsRecWithoutStar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Unique Tool, Infields rec without star", ((string[])(null)));
#line 1940
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1941
      testRunner.Given("I have a workflow \"workflowithAssignandUniqueToolc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table381 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table381.AddRow(new string[] {
                        "[[rs(1).row]]",
                        "10"});
            table381.AddRow(new string[] {
                        "[[rs(1).data]]",
                        "10"});
            table381.AddRow(new string[] {
                        "[[rs(2).row]]",
                        "40"});
            table381.AddRow(new string[] {
                        "[[rs(2).data]]",
                        "20"});
            table381.AddRow(new string[] {
                        "[[rs(3).row]]",
                        "20"});
            table381.AddRow(new string[] {
                        "[[rs(3).data]]",
                        "20"});
            table381.AddRow(new string[] {
                        "[[rs(4).row]]",
                        "30"});
            table381.AddRow(new string[] {
                        "[[rs(4).data]]",
                        "40"});
#line 1942
      testRunner.And("\"workflowithAssignandUniqueToolc\" contains an Assign \"Records\" as", ((string)(null)), table381, "And ");
#line hidden
            TechTalk.SpecFlow.Table table382 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table382.AddRow(new string[] {
                        "[[rs().row]],[[rs().data]]",
                        "[[rs().row]]",
                        "[[rec().unique]]"});
#line 1952
   testRunner.And("\"workflowithAssignandUniqueToolc\" contains an Unique \"Unique rec\" as", ((string)(null)), table382, "And ");
#line 1955
   testRunner.When("\"workflowithAssignandUniqueToolc\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1956
   testRunner.Then("the workflow execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table383 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table383.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =",
                        "10"});
            table383.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =",
                        "10"});
            table383.AddRow(new string[] {
                        "3",
                        "[[rs(2).row]] =",
                        "40"});
            table383.AddRow(new string[] {
                        "4",
                        "[[rs(2).data]] =",
                        "20"});
            table383.AddRow(new string[] {
                        "5",
                        "[[rs(3).row]] =",
                        "20"});
            table383.AddRow(new string[] {
                        "6",
                        "[[rs(3).data]] =",
                        "20"});
            table383.AddRow(new string[] {
                        "7",
                        "[[rs(4).row]] =",
                        "30"});
            table383.AddRow(new string[] {
                        "8",
                        "[[rs(4).data]] =",
                        "40"});
#line 1957
   testRunner.And("the \"Records\" in WorkFlow \"workflowithAssignandUniqueToolc\" debug inputs as", ((string)(null)), table383, "And ");
#line hidden
            TechTalk.SpecFlow.Table table384 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table384.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =  10"});
            table384.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =  10"});
            table384.AddRow(new string[] {
                        "3",
                        "[[rs(2).row]] =  40"});
            table384.AddRow(new string[] {
                        "4",
                        "[[rs(2).data]] =  20"});
            table384.AddRow(new string[] {
                        "5",
                        "[[rs(3).row]] =  20"});
            table384.AddRow(new string[] {
                        "6",
                        "[[rs(3).data]] =  20"});
            table384.AddRow(new string[] {
                        "7",
                        "[[rs(4).row]] =  30"});
            table384.AddRow(new string[] {
                        "8",
                        "[[rs(4).data]] =  40"});
#line 1967
   testRunner.And("the \"Records\" in Workflow \"workflowithAssignandUniqueToolc\" debug outputs as", ((string)(null)), table384, "And ");
#line hidden
            TechTalk.SpecFlow.Table table385 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table385.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(4).row]] = 30",
                        ""});
            table385.AddRow(new string[] {
                        "",
                        "[[rs(4).data]] = 40",
                        "[[rs().row]] ="});
#line 1977
   testRunner.And("the \"Unique rec\" in WorkFlow \"workflowithAssignandUniqueToolc\" debug inputs as", ((string)(null)), table385, "And ");
#line hidden
            TechTalk.SpecFlow.Table table386 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table386.AddRow(new string[] {
                        "1",
                        "[[rec(1).unique]] = 10"});
            table386.AddRow(new string[] {
                        "",
                        "[[rec(2).unique]] = 40"});
            table386.AddRow(new string[] {
                        "",
                        "[[rec(3).unique]] = 20"});
            table386.AddRow(new string[] {
                        "",
                        "[[rec(4).unique]] = 30"});
#line 1981
      testRunner.And("the \"Unique rec\" in Workflow \"workflowithAssignandUniqueToolc\" debug outputs as", ((string)(null)), table386, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Unique Tool, Result rec with star")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndUniqueToolResultRecWithStar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Unique Tool, Result rec with star", ((string[])(null)));
#line 1988
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1989
      testRunner.Given("I have a workflow \"workflowithAssignandUniqueTools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table387 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table387.AddRow(new string[] {
                        "[[rs(1).row]]",
                        "10"});
            table387.AddRow(new string[] {
                        "[[rs(1).data]]",
                        "10"});
            table387.AddRow(new string[] {
                        "[[rs(2).row]]",
                        "40"});
            table387.AddRow(new string[] {
                        "[[rs(2).data]]",
                        "20"});
            table387.AddRow(new string[] {
                        "[[rs(3).row]]",
                        "20"});
            table387.AddRow(new string[] {
                        "[[rs(3).data]]",
                        "20"});
            table387.AddRow(new string[] {
                        "[[rs(4).row]]",
                        "30"});
            table387.AddRow(new string[] {
                        "[[rs(4).data]]",
                        "40"});
#line 1990
      testRunner.And("\"workflowithAssignandUniqueTools\" contains an Assign \"Records\" as", ((string)(null)), table387, "And ");
#line hidden
            TechTalk.SpecFlow.Table table388 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table388.AddRow(new string[] {
                        "[[rs().row]],[[rs().data]]",
                        "[[rs().row]]",
                        "[[rec(*).unique]]"});
#line 2000
   testRunner.And("\"workflowithAssignandUniqueTools\" contains an Unique \"Unique rec\" as", ((string)(null)), table388, "And ");
#line 2003
   testRunner.When("\"workflowithAssignandUniqueTools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2004
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table389 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table389.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =",
                        "10"});
            table389.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =",
                        "10"});
            table389.AddRow(new string[] {
                        "3",
                        "[[rs(2).row]] =",
                        "40"});
            table389.AddRow(new string[] {
                        "4",
                        "[[rs(2).data]] =",
                        "20"});
            table389.AddRow(new string[] {
                        "5",
                        "[[rs(3).row]] =",
                        "20"});
            table389.AddRow(new string[] {
                        "6",
                        "[[rs(3).data]] =",
                        "20"});
            table389.AddRow(new string[] {
                        "7",
                        "[[rs(4).row]] =",
                        "30"});
            table389.AddRow(new string[] {
                        "8",
                        "[[rs(4).data]] =",
                        "40"});
#line 2005
   testRunner.And("the \"Records\" in WorkFlow \"workflowithAssignandUniqueTools\" debug inputs as", ((string)(null)), table389, "And ");
#line hidden
            TechTalk.SpecFlow.Table table390 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table390.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =  10"});
            table390.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =  10"});
            table390.AddRow(new string[] {
                        "3",
                        "[[rs(2).row]] =  40"});
            table390.AddRow(new string[] {
                        "4",
                        "[[rs(2).data]] =  20"});
            table390.AddRow(new string[] {
                        "5",
                        "[[rs(3).row]] =  20"});
            table390.AddRow(new string[] {
                        "6",
                        "[[rs(3).data]] =  20"});
            table390.AddRow(new string[] {
                        "7",
                        "[[rs(4).row]] =  30"});
            table390.AddRow(new string[] {
                        "8",
                        "[[rs(4).data]] =  40"});
#line 2015
   testRunner.And("the \"Records\" in Workflow \"workflowithAssignandUniqueTools\" debug outputs as", ((string)(null)), table390, "And ");
#line hidden
            TechTalk.SpecFlow.Table table391 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table391.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(4).row]] = 30",
                        ""});
            table391.AddRow(new string[] {
                        "",
                        "[[rs(4).data]] = 40",
                        "[[rs().row]] ="});
#line 2025
   testRunner.And("the \"Unique rec\" in WorkFlow \"workflowithAssignandUniqueTools\" debug inputs as", ((string)(null)), table391, "And ");
#line hidden
            TechTalk.SpecFlow.Table table392 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table392.AddRow(new string[] {
                        "1",
                        "[[rec(1).unique]] = 10"});
            table392.AddRow(new string[] {
                        "",
                        "[[rec(2).unique]] = 40"});
            table392.AddRow(new string[] {
                        "",
                        "[[rec(3).unique]] = 20"});
            table392.AddRow(new string[] {
                        "",
                        "[[rec(4).unique]] = 30"});
#line 2029
      testRunner.And("the \"Unique rec\" in Workflow \"workflowithAssignandUniqueTools\" debug outputs as", ((string)(null)), table392, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Convert an recordset to Upper by using index as scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ConvertAnRecordsetToUpperByUsingIndexAsScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert an recordset to Upper by using index as scalar", ((string[])(null)));
#line 2036
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2037
 testRunner.Given("I have a workflow \"ConvertUsingScalarWithRecursiveEvalution\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table393 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table393.AddRow(new string[] {
                        "[[rs().row]]",
                        "warewolf"});
            table393.AddRow(new string[] {
                        "[[a]]",
                        "1"});
#line 2038
 testRunner.And("\"ConvertUsingScalarWithRecursiveEvalution\" contains an Assign \"Records\" as", ((string)(null)), table393, "And ");
#line hidden
            TechTalk.SpecFlow.Table table394 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table394.AddRow(new string[] {
                        "[[rs([[a]]).row]]",
                        "UPPER"});
#line 2042
 testRunner.And("\"ConvertUsingScalarWithRecursiveEvalution\" contains case convert \"Case to Convert" +
                    "\" as", ((string)(null)), table394, "And ");
#line 2045
 testRunner.When("\"ConvertUsingScalarWithRecursiveEvalution\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2046
 testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table395 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table395.AddRow(new string[] {
                        "1",
                        "[[rs().row]] =",
                        "warewolf"});
            table395.AddRow(new string[] {
                        "2",
                        "[[a]] =",
                        "1"});
#line 2047
 testRunner.And("the \"Records\" in WorkFlow \"ConvertUsingScalarWithRecursiveEvalution\" debug inputs" +
                    " as", ((string)(null)), table395, "And ");
#line hidden
            TechTalk.SpecFlow.Table table396 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table396.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =  warewolf"});
            table396.AddRow(new string[] {
                        "2",
                        "[[a]] =  1"});
#line 2051
 testRunner.And("the \"Records\" in Workflow \"ConvertUsingScalarWithRecursiveEvalution\" debug output" +
                    "s as", ((string)(null)), table396, "And ");
#line hidden
            TechTalk.SpecFlow.Table table397 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table397.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] = warewolf",
                        "UPPER"});
#line 2055
 testRunner.And("the \"Case to Convert\" in WorkFlow \"ConvertUsingScalarWithRecursiveEvalution\" debu" +
                    "g inputs as", ((string)(null)), table397, "And ");
#line hidden
            TechTalk.SpecFlow.Table table398 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table398.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] = WAREWOLF"});
#line 2058
 testRunner.And("the \"Case to Convert\" in Workflow \"ConvertUsingScalarWithRecursiveEvalution\" debu" +
                    "g outputs as", ((string)(null)), table398, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Convert an recordset to Upper by using index as recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ConvertAnRecordsetToUpperByUsingIndexAsRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert an recordset to Upper by using index as recordset", ((string[])(null)));
#line 2062
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2063
 testRunner.Given("I have a workflow \"ConvertUsingRecSetInRecursiveEvalution\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table399 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table399.AddRow(new string[] {
                        "[[rs().row]]",
                        "warewolf"});
            table399.AddRow(new string[] {
                        "[[rs().index]]",
                        "1"});
#line 2064
 testRunner.And("\"ConvertUsingRecSetInRecursiveEvalution\" contains an Assign \"Records\" as", ((string)(null)), table399, "And ");
#line hidden
            TechTalk.SpecFlow.Table table400 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table400.AddRow(new string[] {
                        "[[rs([[rs(1).index]]).row]]",
                        "UPPER"});
#line 2068
 testRunner.And("\"ConvertUsingRecSetInRecursiveEvalution\" contains case convert \"Case to Convert\" " +
                    "as", ((string)(null)), table400, "And ");
#line 2071
 testRunner.When("\"ConvertUsingRecSetInRecursiveEvalution\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2072
 testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table401 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table401.AddRow(new string[] {
                        "1",
                        "[[rs().row]] =",
                        "warewolf"});
            table401.AddRow(new string[] {
                        "2",
                        "[[rs().index]] =",
                        "1"});
#line 2073
 testRunner.And("the \"Records\" in WorkFlow \"ConvertUsingRecSetInRecursiveEvalution\" debug inputs a" +
                    "s", ((string)(null)), table401, "And ");
#line hidden
            TechTalk.SpecFlow.Table table402 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table402.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] = warewolf"});
            table402.AddRow(new string[] {
                        "2",
                        "[[rs(1).index]] = 1"});
#line 2077
 testRunner.And("the \"Records\" in Workflow \"ConvertUsingRecSetInRecursiveEvalution\" debug outputs " +
                    "as", ((string)(null)), table402, "And ");
#line hidden
            TechTalk.SpecFlow.Table table403 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table403.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] = warewolf",
                        "UPPER"});
#line 2081
 testRunner.And("the \"Case to Convert\" in WorkFlow \"ConvertUsingRecSetInRecursiveEvalution\" debug " +
                    "inputs as", ((string)(null)), table403, "And ");
#line hidden
            TechTalk.SpecFlow.Table table404 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table404.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] = WAREWOLF"});
#line 2084
 testRunner.And("the \"Case to Convert\" in Workflow \"ConvertUsingRecSetInRecursiveEvalution\" debug " +
                    "outputs as", ((string)(null)), table404, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Base Convert two varibles on one row")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void BaseConvertTwoVariblesOnOneRow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Base Convert two varibles on one row", ((string[])(null)));
#line 2088
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2089
 testRunner.Given("I have a workflow \"BaseConvertUsingRecSetInRecursiveEvalution\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table405 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table405.AddRow(new string[] {
                        "[[rs().a]]",
                        "1"});
            table405.AddRow(new string[] {
                        "[[rec().a]]",
                        "2"});
#line 2090
 testRunner.And("\"BaseConvertUsingRecSetInRecursiveEvalution\" contains an Assign \"Records\" as", ((string)(null)), table405, "And ");
#line hidden
            TechTalk.SpecFlow.Table table406 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table406.AddRow(new string[] {
                        "[[rec([[rs(1).a]]).a]]",
                        "Text",
                        "Base 64"});
#line 2094
 testRunner.And("\"BaseConvertUsingRecSetInRecursiveEvalution\" contains Base convert \"Base to Conve" +
                    "rt\" as", ((string)(null)), table406, "And ");
#line 2097
 testRunner.When("\"BaseConvertUsingRecSetInRecursiveEvalution\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2098
 testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table407 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table407.AddRow(new string[] {
                        "1",
                        "[[rs().a]] =",
                        "1"});
            table407.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "2"});
#line 2099
 testRunner.And("the \"Records\" in WorkFlow \"BaseConvertUsingRecSetInRecursiveEvalution\" debug inpu" +
                    "ts as", ((string)(null)), table407, "And ");
#line hidden
            TechTalk.SpecFlow.Table table408 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table408.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = 1"});
            table408.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = 2"});
#line 2103
 testRunner.And("the \"Records\" in Workflow \"BaseConvertUsingRecSetInRecursiveEvalution\" debug outp" +
                    "uts as", ((string)(null)), table408, "And ");
#line hidden
            TechTalk.SpecFlow.Table table409 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table409.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 2",
                        "Text",
                        "Base 64"});
#line 2107
 testRunner.And("the \"Base to Convert\" in WorkFlow \"BaseConvertUsingRecSetInRecursiveEvalution\" de" +
                    "bug inputs as", ((string)(null)), table409, "And ");
#line hidden
            TechTalk.SpecFlow.Table table410 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table410.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Mg=="});
#line 2110
    testRunner.And("the \"Base to Convert\" in Workflow \"BaseConvertUsingRecSetInRecursiveEvalution\" de" +
                    "bug outputs as", ((string)(null)), table410, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow by using For Each with Raandom in it")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowByUsingForEachWithRaandomInIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow by using For Each with Raandom in it", ((string[])(null)));
#line 2114
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2115
      testRunner.Given("I have a workflow \"WFWithForEachContainsRandom\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 2116
   testRunner.And("\"WFWithForEachContainsRandom\" contains a Foreach \"ForEachTest123\" as \"NumOfExecut" +
                    "ion\" executions \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table411 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table411.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5",
                        "[[rec(*).a]]"});
#line 2117
   testRunner.And("\"ForEachTest123\" contains Random \"Random\" as", ((string)(null)), table411, "And ");
#line 2120
      testRunner.When("\"WFWithForEachContainsRandom\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2121
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table412 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table412.AddRow(new string[] {
                        "No. of Executes",
                        "5"});
#line 2122
   testRunner.And("the \"ForEachTest123\" in WorkFlow \"WFWithForEachContainsRandom\" debug inputs as", ((string)(null)), table412, "And ");
#line 2125
      testRunner.And("the \"ForEachTest123\" in WorkFlow \"WFWithForEachContainsRandom\" has  \"5\" nested ch" +
                    "ildren", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table413 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table413.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5"});
#line 2126
    testRunner.And("the \"Random\" in step 1 for \"ForEachTest123\" debug inputs as", ((string)(null)), table413, "And ");
#line hidden
            TechTalk.SpecFlow.Table table414 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table414.AddRow(new string[] {
                        "[[rec(1).a]] = Int32"});
#line 2129
   testRunner.And("the \"Random\" in step 1 for \"ForEachTest123\" debug outputs as", ((string)(null)), table414, "And ");
#line hidden
            TechTalk.SpecFlow.Table table415 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table415.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5"});
#line 2132
   testRunner.And("the \"Random\" in step 2 for \"ForEachTest123\" debug inputs as", ((string)(null)), table415, "And ");
#line hidden
            TechTalk.SpecFlow.Table table416 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table416.AddRow(new string[] {
                        "[[rec(1).a]] = Int32"});
#line 2135
   testRunner.And("the \"Random\" in step 2 for \"ForEachTest123\" debug outputs as", ((string)(null)), table416, "And ");
#line hidden
            TechTalk.SpecFlow.Table table417 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table417.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5"});
#line 2138
       testRunner.And("the \"Random\" in step 3 for \"ForEachTest123\" debug inputs as", ((string)(null)), table417, "And ");
#line hidden
            TechTalk.SpecFlow.Table table418 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table418.AddRow(new string[] {
                        "[[rec(1).a]] = Int32"});
#line 2141
   testRunner.And("the \"Random\" in step 3 for \"ForEachTest123\" debug outputs as", ((string)(null)), table418, "And ");
#line hidden
            TechTalk.SpecFlow.Table table419 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table419.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5"});
#line 2144
      testRunner.And("the \"Random\" in step 4 for \"ForEachTest123\" debug inputs as", ((string)(null)), table419, "And ");
#line hidden
            TechTalk.SpecFlow.Table table420 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table420.AddRow(new string[] {
                        "[[rec(1).a]] = Int32"});
#line 2147
   testRunner.And("the \"Random\" in step 4 for \"ForEachTest123\" debug outputs as", ((string)(null)), table420, "And ");
#line hidden
            TechTalk.SpecFlow.Table table421 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table421.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5"});
#line 2150
       testRunner.And("the \"Random\" in step 5 for \"ForEachTest123\" debug inputs as", ((string)(null)), table421, "And ");
#line hidden
            TechTalk.SpecFlow.Table table422 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table422.AddRow(new string[] {
                        "[[rec(1).a]] = Int32"});
#line 2153
 testRunner.And("the \"Random\" in step 5 for \"ForEachTest123\" debug outputs as", ((string)(null)), table422, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns DataSplit executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignsDataSplitExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns DataSplit executing against the server", ((string[])(null)));
#line 2157
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2158
      testRunner.Given("I have a workflow \"WorkflowDataSplit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table423 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table423.AddRow(new string[] {
                        "[[a]]",
                        "rec().a"});
#line 2159
   testRunner.And("\"WorkflowDataSplit\" contains an Assign \"Assignval\" as", ((string)(null)), table423, "And ");
#line hidden
            TechTalk.SpecFlow.Table table424 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table424.AddRow(new string[] {
                        "abcd",
                        "[[[[a]]]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
#line 2162
     testRunner.And("\"WorkflowDataSplit\" contains Data Split \"DataSplit\" as", ((string)(null)), table424, "And ");
#line 2165
   testRunner.When("\"WorkflowDataSplit\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2166
   testRunner.Then("the workflow execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table425 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table425.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "rec().a"});
#line 2167
   testRunner.And("the \"Assignval\" in WorkFlow \"WorkflowDataSplit\" debug inputs as", ((string)(null)), table425, "And ");
#line hidden
            TechTalk.SpecFlow.Table table426 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table426.AddRow(new string[] {
                        "1",
                        "[[a]] =  rec().a"});
#line 2170
   testRunner.And("the \"Assignval\" in Workflow \"WorkflowDataSplit\" debug outputs as", ((string)(null)), table426, "And ");
#line hidden
            TechTalk.SpecFlow.Table table427 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table427.AddRow(new string[] {
                        "abcd",
                        "Forward",
                        "No",
                        "1",
                        "[[rec().a]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
#line 2173
   testRunner.And("the \"DataSplit\" in WorkFlow \"WorkflowDataSplit\" debug inputs as", ((string)(null)), table427, "And ");
#line hidden
            TechTalk.SpecFlow.Table table428 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table428.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = abcd"});
#line 2176
   testRunner.And("the \"DataSplit\" in Workflow \"WorkflowDataSplit\" debug outputs as", ((string)(null)), table428, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and foreach contains calculate.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndForeachContainsCalculate_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and foreach contains calculate.", ((string[])(null)));
#line 2180
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2181
      testRunner.Given("I have a workflow \"Workflowwithforeachcontainscalculates\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table429 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table429.AddRow(new string[] {
                        "[[rs().a]]",
                        "1"});
            table429.AddRow(new string[] {
                        "[[rs().a]]",
                        "2"});
            table429.AddRow(new string[] {
                        "[[rs().a]]",
                        "3"});
#line 2182
   testRunner.And("\"Workflowwithforeachcontainscalculates\" contains an Assign \"Assignval1\" as", ((string)(null)), table429, "And ");
#line 2187
   testRunner.And("\"Workflowwithforeachcontainscalculates\" contains a Foreach \"ForEachTesting\" as \"I" +
                    "nRecordset\" executions \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2188
   testRunner.And("\"ForEachTesting\" contains Calculate \"Cal\" with formula \"[[rs(*).a]]+1\" into \"[[re" +
                    "sult]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2189
   testRunner.When("\"Workflowwithforeachcontainscalculates\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2190
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table430 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table430.AddRow(new string[] {
                        "1",
                        "[[rs().a]] =",
                        "1"});
            table430.AddRow(new string[] {
                        "2",
                        "[[rs().a]] =",
                        "2"});
            table430.AddRow(new string[] {
                        "3",
                        "[[rs().a]] =",
                        "3"});
#line 2191
      testRunner.And("the \"Assignval1\" in WorkFlow \"Workflowwithforeachcontainscalculates\" debug inputs" +
                    " as", ((string)(null)), table430, "And ");
#line hidden
            TechTalk.SpecFlow.Table table431 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table431.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = 1"});
            table431.AddRow(new string[] {
                        "2",
                        "[[rs(2).a]] = 2"});
            table431.AddRow(new string[] {
                        "3",
                        "[[rs(3).a]] = 3"});
#line 2196
      testRunner.And("the \"Assignval1\" in Workflow \"Workflowwithforeachcontainscalculates\" debug output" +
                    "s as", ((string)(null)), table431, "And ");
#line 2201
      testRunner.And("the \"ForEachTesting\" in WorkFlow \"Workflowwithforeachcontainscalculates\" has  \"3\"" +
                    " nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table432 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table432.AddRow(new string[] {
                        "[[rs(1).a]]+1 = 1+1"});
#line 2202
   testRunner.And("the \"Cal\" in step 1 for \"ForEachTesting\" debug inputs as", ((string)(null)), table432, "And ");
#line hidden
            TechTalk.SpecFlow.Table table433 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table433.AddRow(new string[] {
                        "[[result]] = 2"});
#line 2205
      testRunner.And("the \"Cal\" in step 1 for \"ForEachTesting\" debug outputs as", ((string)(null)), table433, "And ");
#line hidden
            TechTalk.SpecFlow.Table table434 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table434.AddRow(new string[] {
                        "[[rs(2).a]]+1 = 2+1"});
#line 2208
  testRunner.And("the \"Cal\" in step 2 for \"ForEachTesting\" debug inputs as", ((string)(null)), table434, "And ");
#line hidden
            TechTalk.SpecFlow.Table table435 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table435.AddRow(new string[] {
                        "[[result]] = 3"});
#line 2211
       testRunner.And("the \"Cal\" in step 2 for \"ForEachTesting\" debug outputs as", ((string)(null)), table435, "And ");
#line hidden
            TechTalk.SpecFlow.Table table436 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table436.AddRow(new string[] {
                        "[[rs(3).a]]+1 = 3+1"});
#line 2214
    testRunner.And("the \"Cal\" in step 3 for \"ForEachTesting\" debug inputs as", ((string)(null)), table436, "And ");
#line hidden
            TechTalk.SpecFlow.Table table437 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table437.AddRow(new string[] {
                        "[[result]] = 4"});
#line 2217
       testRunner.And("the \"Cal\" in step 3 for \"ForEachTesting\" debug outputs as", ((string)(null)), table437, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and foreach with invalid rec and it contains calculate in it" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndForeachWithInvalidRecAndItContainsCalculateInIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and foreach with invalid rec and it contains calculate in it" +
                    "", ((string[])(null)));
#line 2221
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2222
      testRunner.Given("I have a workflow \"WorkflowDwithforeachcontainscalinvalid\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table438 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table438.AddRow(new string[] {
                        "[[rs().a]]",
                        "1"});
            table438.AddRow(new string[] {
                        "[[rs().a]]",
                        "2"});
            table438.AddRow(new string[] {
                        "[[rs().a]]",
                        "3"});
#line 2223
   testRunner.And("\"WorkflowDwithforeachcontainscalinvalid\" contains an Assign \"Assigl\" as", ((string)(null)), table438, "And ");
#line 2228
   testRunner.And("\"WorkflowDwithforeachcontainscalinvalid\" contains a Foreach \"ForEachTes\" as \"InRe" +
                    "cordset\" executions \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2229
   testRunner.And("\"ForEachTes\" contains Calculate \"Cal\" with formula \"[[rs(*).a]]+1\" into \"[[result" +
                    "]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2230
   testRunner.When("\"WorkflowDwithforeachcontainscalinvalid\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2231
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table439 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table439.AddRow(new string[] {
                        "1",
                        "[[rs().a]] =",
                        "1"});
            table439.AddRow(new string[] {
                        "2",
                        "[[rs().a]] =",
                        "2"});
            table439.AddRow(new string[] {
                        "3",
                        "[[rs().a]] =",
                        "3"});
#line 2232
      testRunner.And("the \"Assigl\" in WorkFlow \"WorkflowDwithforeachcontainscalinvalid\" debug inputs as" +
                    "", ((string)(null)), table439, "And ");
#line hidden
            TechTalk.SpecFlow.Table table440 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table440.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = 1"});
            table440.AddRow(new string[] {
                        "2",
                        "[[rs(2).a]] = 2"});
            table440.AddRow(new string[] {
                        "3",
                        "[[rs(3).a]] = 3"});
#line 2237
      testRunner.And("the \"Assigl\" in Workflow \"WorkflowDwithforeachcontainscalinvalid\" debug outputs a" +
                    "s", ((string)(null)), table440, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns DataSplit executing against the server 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignsDataSplitExecutingAgainstTheServer2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns DataSplit executing against the server 2", ((string[])(null)));
#line 2244
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2245
      testRunner.Given("I have a workflow \"WorkflowDataSplit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table441 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table441.AddRow(new string[] {
                        "[[a]]",
                        "rec().a"});
#line 2246
   testRunner.And("\"WorkflowDataSplit\" contains an Assign \"Assignval\" as", ((string)(null)), table441, "And ");
#line hidden
            TechTalk.SpecFlow.Table table442 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table442.AddRow(new string[] {
                        "abcd",
                        "[[[[a]]]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
#line 2249
     testRunner.And("\"WorkflowDataSplit\" contains Data Split \"DataSplit\" as", ((string)(null)), table442, "And ");
#line 2252
   testRunner.When("\"WorkflowDataSplit\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2253
   testRunner.Then("the workflow execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table443 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table443.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "rec().a"});
#line 2254
   testRunner.And("the \"Assignval\" in WorkFlow \"WorkflowDataSplit\" debug inputs as", ((string)(null)), table443, "And ");
#line hidden
            TechTalk.SpecFlow.Table table444 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table444.AddRow(new string[] {
                        "1",
                        "[[a]] =  rec().a"});
#line 2257
   testRunner.And("the \"Assignval\" in Workflow \"WorkflowDataSplit\" debug outputs as", ((string)(null)), table444, "And ");
#line hidden
            TechTalk.SpecFlow.Table table445 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table445.AddRow(new string[] {
                        "abcd",
                        "Forward",
                        "No",
                        "1",
                        "[[rec().a]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
#line 2260
   testRunner.And("the \"DataSplit\" in WorkFlow \"WorkflowDataSplit\" debug inputs as", ((string)(null)), table445, "And ");
#line hidden
            TechTalk.SpecFlow.Table table446 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table446.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = abcd"});
#line 2263
   testRunner.And("the \"DataSplit\" in Workflow \"WorkflowDataSplit\" debug outputs as", ((string)(null)), table446, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Unique Tool to find unique names in diff rows")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndUniqueToolToFindUniqueNamesInDiffRows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Unique Tool to find unique names in diff rows", ((string[])(null)));
#line 2267
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2268
      testRunner.Given("I have a workflow \"WorkflowUniqueWithNames\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table447 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table447.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Smith"});
            table447.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Gordan"});
            table447.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Nicholas"});
            table447.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Cage"});
            table447.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Cage"});
            table447.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Nicholas"});
#line 2269
      testRunner.And("\"WorkflowUniqueWithNames\" contains an Assign \"Records1\" as", ((string)(null)), table447, "And ");
#line hidden
            TechTalk.SpecFlow.Table table448 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table448.AddRow(new string[] {
                        "[[emp(*).firstname]],[[emp(*).lastname]]",
                        "[[emp().firstname]]",
                        "[[emp(*).uni]]"});
#line 2277
   testRunner.And("\"WorkflowUniqueWithNames\" contains an Unique \"Unique\" as", ((string)(null)), table448, "And ");
#line 2280
   testRunner.When("\"WorkflowUniqueWithNames\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2281
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table449 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table449.AddRow(new string[] {
                        "1",
                        "[[emp().firstname]] =",
                        "Smith"});
            table449.AddRow(new string[] {
                        "2",
                        "[[emp().lastname]] =",
                        "Gordan"});
            table449.AddRow(new string[] {
                        "3",
                        "[[emp().firstname]] =",
                        "Nicholas"});
            table449.AddRow(new string[] {
                        "4",
                        "[[emp().lastname]] =",
                        "Cage"});
            table449.AddRow(new string[] {
                        "5",
                        "[[emp().firstname]] =",
                        "Cage"});
            table449.AddRow(new string[] {
                        "6",
                        "[[emp().lastname]] =",
                        "Nicholas"});
#line 2282
   testRunner.And("the \"Records1\" in WorkFlow \"WorkflowUniqueWithNames\" debug inputs as", ((string)(null)), table449, "And ");
#line hidden
            TechTalk.SpecFlow.Table table450 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table450.AddRow(new string[] {
                        "1",
                        "[[emp(1).firstname]] =  Smith"});
            table450.AddRow(new string[] {
                        "2",
                        "[[emp(1).lastname]] =  Gordan"});
            table450.AddRow(new string[] {
                        "3",
                        "[[emp(2).firstname]] =  Nicholas"});
            table450.AddRow(new string[] {
                        "4",
                        "[[emp(2).lastname]] =  Cage"});
            table450.AddRow(new string[] {
                        "5",
                        "[[emp(3).firstname]] =  Cage"});
            table450.AddRow(new string[] {
                        "6",
                        "[[emp(3).lastname]] =  Nicholas"});
#line 2290
   testRunner.And("the \"Records1\" in Workflow \"WorkflowUniqueWithNames\" debug outputs as", ((string)(null)), table450, "And ");
#line hidden
            TechTalk.SpecFlow.Table table451 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table451.AddRow(new string[] {
                        "In Field(s)",
                        "[[emp(1).firstname]] = Smith",
                        ""});
            table451.AddRow(new string[] {
                        "",
                        "[[emp(2).firstname]] = Nicholas",
                        ""});
            table451.AddRow(new string[] {
                        "",
                        "[[emp(3).firstname]] = Cage",
                        ""});
            table451.AddRow(new string[] {
                        "",
                        "[[emp(1).lastname]] = Gordan",
                        ""});
            table451.AddRow(new string[] {
                        "",
                        "[[emp(2).lastname]] = Cage",
                        ""});
            table451.AddRow(new string[] {
                        "",
                        "[[emp(3).lastname]] = Nicholas",
                        ""});
            table451.AddRow(new string[] {
                        "",
                        "",
                        "[[emp().firstname]] ="});
#line 2298
   testRunner.And("the \"Unique\" in WorkFlow \"WorkflowUniqueWithNames\" debug inputs as", ((string)(null)), table451, "And ");
#line hidden
            TechTalk.SpecFlow.Table table452 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table452.AddRow(new string[] {
                        "1",
                        "[[emp(1).uni]]  = Smith"});
            table452.AddRow(new string[] {
                        "",
                        "[[emp(2).uni]]  = Nicholas"});
            table452.AddRow(new string[] {
                        "",
                        "[[emp(3).uni]]  = Cage"});
#line 2307
      testRunner.And("the \"Unique\" in Workflow \"WorkflowUniqueWithNames\" debug outputs as", ((string)(null)), table452, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Unique to return unique data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndUniqueToReturnUniqueData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Unique to return unique data", ((string[])(null)));
#line 2313
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2314
      testRunner.Given("I have a workflow \"UniqueNamesTest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table453 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table453.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Smith"});
            table453.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Gordan"});
            table453.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Nicholas"});
            table453.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Cage"});
            table453.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Cage"});
            table453.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Nicholas"});
            table453.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Cage"});
            table453.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Nicholas"});
#line 2315
      testRunner.And("\"UniqueNamesTest\" contains an Assign \"Records1\" as", ((string)(null)), table453, "And ");
#line hidden
            TechTalk.SpecFlow.Table table454 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table454.AddRow(new string[] {
                        "[[emp(*).firstname]],[[emp(*).lastname]]",
                        "[[emp().lastname]]",
                        "[[emp(*).uni]]"});
#line 2325
   testRunner.And("\"UniqueNamesTest\" contains an Unique \"Unique\" as", ((string)(null)), table454, "And ");
#line 2328
   testRunner.When("\"UniqueNamesTest\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2329
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table455 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table455.AddRow(new string[] {
                        "1",
                        "[[emp().firstname]] =",
                        "Smith"});
            table455.AddRow(new string[] {
                        "2",
                        "[[emp().lastname]] =",
                        "Gordan"});
            table455.AddRow(new string[] {
                        "3",
                        "[[emp().firstname]] =",
                        "Nicholas"});
            table455.AddRow(new string[] {
                        "4",
                        "[[emp().lastname]] =",
                        "Cage"});
            table455.AddRow(new string[] {
                        "5",
                        "[[emp().firstname]] =",
                        "Cage"});
            table455.AddRow(new string[] {
                        "6",
                        "[[emp().lastname]] =",
                        "Nicholas"});
            table455.AddRow(new string[] {
                        "7",
                        "[[emp().firstname]] =",
                        "Cage"});
            table455.AddRow(new string[] {
                        "8",
                        "[[emp().lastname]] =",
                        "Nicholas"});
#line 2330
   testRunner.And("the \"Records1\" in WorkFlow \"UniqueNamesTest\" debug inputs as", ((string)(null)), table455, "And ");
#line hidden
            TechTalk.SpecFlow.Table table456 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table456.AddRow(new string[] {
                        "1",
                        "[[emp(1).firstname]] =  Smith"});
            table456.AddRow(new string[] {
                        "2",
                        "[[emp(1).lastname]] =  Gordan"});
            table456.AddRow(new string[] {
                        "3",
                        "[[emp(2).firstname]] =  Nicholas"});
            table456.AddRow(new string[] {
                        "4",
                        "[[emp(2).lastname]] =  Cage"});
            table456.AddRow(new string[] {
                        "5",
                        "[[emp(3).firstname]] =  Cage"});
            table456.AddRow(new string[] {
                        "6",
                        "[[emp(3).lastname]] =  Nicholas"});
            table456.AddRow(new string[] {
                        "7",
                        "[[emp(4).firstname]] =  Cage"});
            table456.AddRow(new string[] {
                        "8",
                        "[[emp(4).lastname]] =  Nicholas"});
#line 2340
   testRunner.And("the \"Records1\" in Workflow \"UniqueNamesTest\" debug outputs as", ((string)(null)), table456, "And ");
#line hidden
            TechTalk.SpecFlow.Table table457 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table457.AddRow(new string[] {
                        "In Field(s)",
                        "[[emp(1).firstname]] = Smith",
                        ""});
            table457.AddRow(new string[] {
                        "",
                        "[[emp(2).firstname]] = Nicholas",
                        ""});
            table457.AddRow(new string[] {
                        "",
                        "[[emp(3).firstname]] = Cage",
                        ""});
            table457.AddRow(new string[] {
                        "",
                        "[[emp(4).firstname]] = Cage",
                        ""});
            table457.AddRow(new string[] {
                        "",
                        "[[emp(1).lastname]] = Gordan",
                        ""});
            table457.AddRow(new string[] {
                        "",
                        "[[emp(2).lastname]] = Cage",
                        ""});
            table457.AddRow(new string[] {
                        "",
                        "[[emp(3).lastname]] = Nicholas",
                        ""});
            table457.AddRow(new string[] {
                        "",
                        "[[emp(4).lastname]] = Nicholas",
                        ""});
            table457.AddRow(new string[] {
                        "",
                        "",
                        "[[emp().lastname]] ="});
#line 2350
   testRunner.And("the \"Unique\" in WorkFlow \"UniqueNamesTest\" debug inputs as", ((string)(null)), table457, "And ");
#line hidden
            TechTalk.SpecFlow.Table table458 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table458.AddRow(new string[] {
                        "1",
                        "[[emp(1).uni]]  = Gordan"});
            table458.AddRow(new string[] {
                        "",
                        "[[emp(2).uni]]  = Cage"});
            table458.AddRow(new string[] {
                        "",
                        "[[emp(3).uni]]  = Nicholas"});
            table458.AddRow(new string[] {
                        "",
                        "[[emp(4).uni]]  ="});
#line 2361
      testRunner.And("the \"Unique\" in Workflow \"UniqueNamesTest\" debug outputs as", ((string)(null)), table458, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Unique Tool")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndUniqueTool()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Unique Tool", ((string[])(null)));
#line 2368
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2369
      testRunner.Given("I have a workflow \"WorkflowAssingUnique\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table459 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table459.AddRow(new string[] {
                        "[[rs(1).a]]",
                        "19"});
            table459.AddRow(new string[] {
                        "[[rs(2).a]]",
                        "20"});
            table459.AddRow(new string[] {
                        "[[rs(3).a]]",
                        "40"});
            table459.AddRow(new string[] {
                        "[[rs(4).a]]",
                        "50"});
            table459.AddRow(new string[] {
                        "[[rs(1).b]]",
                        "19"});
            table459.AddRow(new string[] {
                        "[[rs(2).b]]",
                        "20"});
            table459.AddRow(new string[] {
                        "[[rs(3).b]]",
                        "30"});
            table459.AddRow(new string[] {
                        "[[rs(4).b]]",
                        "80"});
#line 2370
      testRunner.And("\"WorkflowAssingUnique\" contains an Assign \"Records\" as", ((string)(null)), table459, "And ");
#line hidden
            TechTalk.SpecFlow.Table table460 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table460.AddRow(new string[] {
                        "[[rs(*).a]],[[rs(*).b]]",
                        "[[rs().a]]",
                        "[[rec().unique]]"});
#line 2380
   testRunner.And("\"WorkflowAssingUnique\" contains an Unique \"Unique rec\" as", ((string)(null)), table460, "And ");
#line 2383
   testRunner.When("\"WorkflowAssingUnique\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2384
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table461 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table461.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =",
                        "19"});
            table461.AddRow(new string[] {
                        "2",
                        "[[rs(2).a]] =",
                        "20"});
            table461.AddRow(new string[] {
                        "3",
                        "[[rs(3).a]] =",
                        "40"});
            table461.AddRow(new string[] {
                        "4",
                        "[[rs(4).a]] =",
                        "50"});
            table461.AddRow(new string[] {
                        "5",
                        "[[rs(1).b]] =",
                        "19"});
            table461.AddRow(new string[] {
                        "6",
                        "[[rs(2).b]] =",
                        "20"});
            table461.AddRow(new string[] {
                        "7",
                        "[[rs(3).b]] =",
                        "30"});
            table461.AddRow(new string[] {
                        "8",
                        "[[rs(4).b]] =",
                        "80"});
#line 2385
   testRunner.And("the \"Records\" in WorkFlow \"WorkflowAssingUnique\" debug inputs as", ((string)(null)), table461, "And ");
#line hidden
            TechTalk.SpecFlow.Table table462 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table462.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =  19"});
            table462.AddRow(new string[] {
                        "2",
                        "[[rs(2).a]] =  20"});
            table462.AddRow(new string[] {
                        "3",
                        "[[rs(3).a]] =  40"});
            table462.AddRow(new string[] {
                        "4",
                        "[[rs(4).a]] =  50"});
            table462.AddRow(new string[] {
                        "5",
                        "[[rs(1).b]] =  19"});
            table462.AddRow(new string[] {
                        "6",
                        "[[rs(2).b]] =  20"});
            table462.AddRow(new string[] {
                        "7",
                        "[[rs(3).b]] =  30"});
            table462.AddRow(new string[] {
                        "8",
                        "[[rs(4).b]] =  80"});
#line 2395
   testRunner.And("the \"Records\" in Workflow \"WorkflowAssingUnique\" debug outputs as", ((string)(null)), table462, "And ");
#line hidden
            TechTalk.SpecFlow.Table table463 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table463.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).a]] = 19",
                        ""});
            table463.AddRow(new string[] {
                        "",
                        "[[rs(2).a]] = 20",
                        ""});
            table463.AddRow(new string[] {
                        "",
                        "[[rs(3).a]] = 40",
                        ""});
            table463.AddRow(new string[] {
                        "",
                        "[[rs(4).a]] = 50",
                        ""});
            table463.AddRow(new string[] {
                        "",
                        "[[rs(1).b]] = 19",
                        ""});
            table463.AddRow(new string[] {
                        "",
                        "[[rs(2).b]] = 20",
                        ""});
            table463.AddRow(new string[] {
                        "",
                        "[[rs(3).b]] = 30",
                        ""});
            table463.AddRow(new string[] {
                        "",
                        "[[rs(4).b]] = 80",
                        ""});
            table463.AddRow(new string[] {
                        "",
                        "",
                        "[[rs().a]] ="});
#line 2405
   testRunner.And("the \"Unique rec\" in WorkFlow \"WorkflowAssingUnique\" debug inputs as", ((string)(null)), table463, "And ");
#line hidden
            TechTalk.SpecFlow.Table table464 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table464.AddRow(new string[] {
                        "1",
                        "[[rec(1).unique]] = 19"});
            table464.AddRow(new string[] {
                        "",
                        "[[rec(2).unique]] = 20"});
            table464.AddRow(new string[] {
                        "",
                        "[[rec(3).unique]] = 40"});
            table464.AddRow(new string[] {
                        "",
                        "[[rec(4).unique]] = 50"});
#line 2416
      testRunner.And("the \"Unique rec\" in Workflow \"WorkflowAssingUnique\" debug outputs as", ((string)(null)), table464, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Calculation using Star notation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithCalculationUsingStarNotation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Calculation using Star notation", ((string[])(null)));
#line 2423
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2424
      testRunner.Given("I have a workflow \"WorkflowWithAssignCalculationUsingStar\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table465 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table465.AddRow(new string[] {
                        "[[rs(1).a]]",
                        "19"});
            table465.AddRow(new string[] {
                        "[[rs(2).a]]",
                        "20"});
            table465.AddRow(new string[] {
                        "[[rs(3).a]]",
                        "40"});
#line 2425
      testRunner.And("\"WorkflowWithAssignCalculationUsingStar\" contains an Assign \"Records\" as", ((string)(null)), table465, "And ");
#line hidden
            TechTalk.SpecFlow.Table table466 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table466.AddRow(new string[] {
                        "[[rec().sum]]",
                        "=[[rs(*).a]]+1"});
#line 2430
   testRunner.And("\"WorkflowWithAssignCalculationUsingStar\" contains an Assign \"Calculation\" as", ((string)(null)), table466, "And ");
#line 2433
   testRunner.When("\"WorkflowWithAssignCalculationUsingStar\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2434
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table467 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table467.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =",
                        "19"});
            table467.AddRow(new string[] {
                        "2",
                        "[[rs(2).a]] =",
                        "20"});
            table467.AddRow(new string[] {
                        "3",
                        "[[rs(3).a]] =",
                        "40"});
#line 2435
   testRunner.And("the \"Records\" in WorkFlow \"WorkflowWithAssignCalculationUsingStar\" debug inputs a" +
                    "s", ((string)(null)), table467, "And ");
#line hidden
            TechTalk.SpecFlow.Table table468 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table468.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =  19"});
            table468.AddRow(new string[] {
                        "2",
                        "[[rs(2).a]] =  20"});
            table468.AddRow(new string[] {
                        "3",
                        "[[rs(3).a]] =  40"});
#line 2440
   testRunner.And("the \"Records\" in Workflow \"WorkflowWithAssignCalculationUsingStar\" debug outputs " +
                    "as", ((string)(null)), table468, "And ");
#line hidden
            TechTalk.SpecFlow.Table table469 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table469.AddRow(new string[] {
                        "1",
                        "[[rec().sum]] =",
                        "[[rs(1).a]]+1 = 19+1"});
            table469.AddRow(new string[] {
                        "",
                        "",
                        "[[rs(2).a]]+1 = 20+1"});
            table469.AddRow(new string[] {
                        "",
                        "",
                        "[[rs(3).a]]+1 = 40+1"});
#line 2445
    testRunner.And("the \"Calculation\" in WorkFlow \"WorkflowWithAssignCalculationUsingStar\" debug inpu" +
                    "ts as", ((string)(null)), table469, "And ");
#line hidden
            TechTalk.SpecFlow.Table table470 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table470.AddRow(new string[] {
                        "1",
                        "[[rec(3).sum]] = 41"});
#line 2450
   testRunner.And("the \"Calculation\" in Workflow \"WorkflowWithAssignCalculationUsingStar\" debug outp" +
                    "uts as", ((string)(null)), table470, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Unique to check debug outputs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignUniqueToCheckDebugOutputs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Unique to check debug outputs", ((string[])(null)));
#line 2454
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2455
      testRunner.Given("I have a workflow \"workflowithAssignUniquedebugoutputs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table471 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table471.AddRow(new string[] {
                        "[[team(1).Names]]",
                        "test"});
            table471.AddRow(new string[] {
                        "[[team(1).Id]]",
                        "23"});
            table471.AddRow(new string[] {
                        "[[team(2).Names]]",
                        "test"});
            table471.AddRow(new string[] {
                        "[[team(2).Id]]",
                        "23"});
#line 2456
      testRunner.And("\"workflowithAssignUniquedebugoutputs\" contains an Assign \"Recordset\" as", ((string)(null)), table471, "And ");
#line hidden
            TechTalk.SpecFlow.Table table472 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table472.AddRow(new string[] {
                        "[[team(*).Names]]",
                        "[[team().Names]]",
                        "[[List(*).Name]]"});
#line 2462
   testRunner.And("\"workflowithAssignUniquedebugoutputs\" contains an Unique \"Uni\" as", ((string)(null)), table472, "And ");
#line 2465
   testRunner.When("\"workflowithAssignUniquedebugoutputs\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2466
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table473 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table473.AddRow(new string[] {
                        "1",
                        "[[team(1).Names]]  =",
                        "test"});
            table473.AddRow(new string[] {
                        "2",
                        "[[team(1).Id]]     =",
                        "23"});
            table473.AddRow(new string[] {
                        "3",
                        "[[team(2).Names]]  =",
                        "test"});
            table473.AddRow(new string[] {
                        "4",
                        "[[team(2).Id]]     =",
                        "23"});
#line 2467
   testRunner.And("the \"Recordset\" in WorkFlow \"workflowithAssignUniquedebugoutputs\" debug inputs as" +
                    "", ((string)(null)), table473, "And ");
#line hidden
            TechTalk.SpecFlow.Table table474 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table474.AddRow(new string[] {
                        "1",
                        "[[team(1).Names]] =   test"});
            table474.AddRow(new string[] {
                        "2",
                        "[[team(1).Id]]    =  23"});
            table474.AddRow(new string[] {
                        "3",
                        "[[team(2).Names]] =  test"});
            table474.AddRow(new string[] {
                        "4",
                        "[[team(2).Id]]    =  23"});
#line 2473
   testRunner.And("the \"Recordset\" in Workflow \"workflowithAssignUniquedebugoutputs\" debug outputs a" +
                    "s", ((string)(null)), table474, "And ");
#line hidden
            TechTalk.SpecFlow.Table table475 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table475.AddRow(new string[] {
                        "In Field(s)",
                        "[[team(1).Names]] = test",
                        ""});
            table475.AddRow(new string[] {
                        "",
                        "[[team(2).Names]] = test",
                        "[[team().Names]] ="});
#line 2479
   testRunner.And("the \"Uni\" in WorkFlow \"workflowithAssignUniquedebugoutputs\" debug inputs as", ((string)(null)), table475, "And ");
#line hidden
            TechTalk.SpecFlow.Table table476 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table476.AddRow(new string[] {
                        "1",
                        "[[List(1).Name]] = test"});
#line 2483
      testRunner.And("the \"Uni\" in Workflow \"workflowithAssignUniquedebugoutputs\" debug outputs as", ((string)(null)), table476, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow Saving with Different Versions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowSavingWithDifferentVersions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow Saving with Different Versions", ((string[])(null)));
#line 2487
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2488
  testRunner.Given("I have a workflow \"WorkflowWithVersionAssignTest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table477 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table477.AddRow(new string[] {
                        "[[rec().a]]",
                        "New"});
            table477.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
#line 2489
  testRunner.And("\"WorkflowWithVersionAssignTest\" contains an Assign \"VarsAssign\" as", ((string)(null)), table477, "And ");
#line 2493
   testRunner.When("workflow \"WorkflowWithVersionAssignTest\" is saved \"1\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2494
   testRunner.Then("workflow \"WorkflowWithVersionAssignTest\" has \"0\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2495
   testRunner.When("workflow \"WorkflowWithVersionAssignTest\" is saved \"2\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2496
   testRunner.Then("workflow \"WorkflowWithVersionAssignTest\" has \"2\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table478 = new TechTalk.SpecFlow.Table(new string[] {
                        "Explorer"});
            table478.AddRow(new string[] {
                        "WorkflowWithAssign"});
            table478.AddRow(new string[] {
                        "v.2 DateTime"});
            table478.AddRow(new string[] {
                        "v.1 DateTime"});
#line 2497
   testRunner.And("explorer as", ((string)(null)), table478, "And ");
#line 2502
   testRunner.When("workflow \"WorkflowWithVersionAssignTest\" is saved \"3\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2503
   testRunner.Then("workflow \"WorkflowWithVersionAssignTest\" has \"5\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table479 = new TechTalk.SpecFlow.Table(new string[] {
                        "Explorer"});
            table479.AddRow(new string[] {
                        "WorkflowWithAssign"});
            table479.AddRow(new string[] {
                        "v.5 DateTime Save"});
            table479.AddRow(new string[] {
                        "v.4 DateTime Save"});
            table479.AddRow(new string[] {
                        "v.3 DateTime Save"});
            table479.AddRow(new string[] {
                        "v.2 DateTime Save"});
            table479.AddRow(new string[] {
                        "v.1 DateTime Save"});
#line 2504
   testRunner.And("explorer as", ((string)(null)), table479, "And ");
#line 2512
   testRunner.And("workflow \"WorkflowWithVersionAssignTest\" is deleted as cleanup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing workflow of different versions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingWorkflowOfDifferentVersions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing workflow of different versions", ((string[])(null)));
#line 2514
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2515
  testRunner.Given("I have a workflow \"WorkflowWithVersionAssignExecuted2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table480 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table480.AddRow(new string[] {
                        "[[rec().a]]",
                        "New"});
            table480.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
#line 2516
  testRunner.And("\"WorkflowWithVersionAssignExecuted2\" contains an Assign \"VarsAssign\" as", ((string)(null)), table480, "And ");
#line 2520
   testRunner.When("workflow \"WorkflowWithVersionAssignExecuted2\" is saved \"1\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2521
   testRunner.Then("workflow \"WorkflowWithVersionAssignExecuted2\" has \"0\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 2522
   testRunner.When("\"WorkflowWithVersionAssignExecuted2\" is executed without saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2523
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table481 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table481.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "New"});
            table481.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "Test"});
#line 2524
   testRunner.And("the \"VarsAssign\" in WorkFlow \"WorkflowWithVersionAssignExecuted2\" debug inputs as" +
                    "", ((string)(null)), table481, "And ");
#line hidden
            TechTalk.SpecFlow.Table table482 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table482.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = New"});
            table482.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = Test"});
#line 2528
   testRunner.And("the \"VarsAssign\" in Workflow \"WorkflowWithVersionAssignExecuted2\" debug outputs a" +
                    "s", ((string)(null)), table482, "And ");
#line 2532
   testRunner.When("workflow \"WorkflowWithVersionAssignExecuted2\" is saved \"2\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2533
   testRunner.Then("workflow \"WorkflowWithVersionAssignExecuted2\" has \"2\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table483 = new TechTalk.SpecFlow.Table(new string[] {
                        "Explorer"});
            table483.AddRow(new string[] {
                        "WorkflowWithAssign"});
            table483.AddRow(new string[] {
                        "v.2 DateTime"});
            table483.AddRow(new string[] {
                        "v.1 DateTime"});
#line 2534
   testRunner.And("explorer as", ((string)(null)), table483, "And ");
#line hidden
            TechTalk.SpecFlow.Table table484 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table484.AddRow(new string[] {
                        "[[rec().a]]",
                        "New"});
            table484.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
            table484.AddRow(new string[] {
                        "[[rec().a]]",
                        "V1"});
#line 2539
  testRunner.And("\"WorkflowWithVersionAssignExecuted2\" contains an Assign \"VarsAssign2\" as", ((string)(null)), table484, "And ");
#line 2544
  testRunner.When("workflow \"WorkflowWithVersionAssignExecuted2\" is saved \"1\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2545
  testRunner.When("\"WorkflowWithVersionAssignExecuted2\" is executed without saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2546
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table485 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table485.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "New"});
            table485.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "Test"});
            table485.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "V1"});
#line 2547
  testRunner.And("the \"VarsAssign2\" in WorkFlow \"WorkflowWithVersionAssignExecuted2\" debug inputs a" +
                    "s", ((string)(null)), table485, "And ");
#line 2552
  testRunner.When("workflow \"WorkflowWithVersionAssignExecuted2\" is saved \"1\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2553
   testRunner.Then("workflow \"WorkflowWithVersionAssignExecuted2\" has \"4\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table486 = new TechTalk.SpecFlow.Table(new string[] {
                        "Explorer"});
            table486.AddRow(new string[] {
                        "WorkflowWithAssign"});
            table486.AddRow(new string[] {
                        "v.4 DateTime"});
            table486.AddRow(new string[] {
                        "v.3 DateTime"});
            table486.AddRow(new string[] {
                        "v.2 DateTime"});
            table486.AddRow(new string[] {
                        "v.1 DateTime"});
#line 2554
   testRunner.And("explorer as", ((string)(null)), table486, "And ");
#line 2561
   testRunner.When("I rollback \"WorkflowWithVersionAssignExecuted2\" to version \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2562
   testRunner.When("\"WorkflowWithVersionAssignExecuted2\" is executed without saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2563
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table487 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table487.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = New"});
            table487.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = Test"});
#line 2564
   testRunner.And("the \"VarsAssign\" in Workflow \"WorkflowWithVersionAssignExecuted2\" debug outputs a" +
                    "s", ((string)(null)), table487, "And ");
#line 2568
   testRunner.And("workflow \"WorkflowWithVersionAssignExecuted2\" is deleted as cleanup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Base Convert and Case Convert testing variable that hasn\"t b" +
            "een assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignBaseConvertAndCaseConvertTestingVariableThatHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Base Convert and Case Convert testing variable that hasn\"t b" +
                    "een assigned", ((string[])(null)));
#line 2570
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2571
   testRunner.Given("I have a workflow \"WorkflowBaseConvertandCaseconvertTestingUnassignedVariablevalu" +
                    "es\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table488 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table488.AddRow(new string[] {
                        "[[res]]",
                        "1"});
#line 2572
   testRunner.And("\"WorkflowBaseConvertandCaseconvertTestingUnassignedVariablevalues\" contains an As" +
                    "sign \"Assign1\" as", ((string)(null)), table488, "And ");
#line hidden
            TechTalk.SpecFlow.Table table489 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table489.AddRow(new string[] {
                        "[[res12]]",
                        "UPPER"});
#line 2575
   testRunner.And("\"WorkflowBaseConvertandCaseconvertTestingUnassignedVariablevalues\" contains case " +
                    "convert \"Case to Convert\" as", ((string)(null)), table489, "And ");
#line hidden
            TechTalk.SpecFlow.Table table490 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table490.AddRow(new string[] {
                        "[[res12]]",
                        "Text",
                        "Base 64"});
#line 2578
   testRunner.And("\"WorkflowBaseConvertandCaseconvertTestingUnassignedVariablevalues\" contains Base " +
                    "convert \"Base to Convert\" as", ((string)(null)), table490, "And ");
#line 2581
   testRunner.When("\"WorkflowBaseConvertandCaseconvertTestingUnassignedVariablevalues\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2582
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table491 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table491.AddRow(new string[] {
                        "1",
                        "[[res]] =",
                        "1"});
#line 2583
   testRunner.And("the \"Assign1\" in WorkFlow \"WorkflowBaseConvertandCaseconvertTestingUnassignedVari" +
                    "ablevalues\" debug inputs as", ((string)(null)), table491, "And ");
#line hidden
            TechTalk.SpecFlow.Table table492 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table492.AddRow(new string[] {
                        "1",
                        "[[res]] =  1"});
#line 2586
    testRunner.And("the \"Assign1\" in Workflow \"WorkflowBaseConvertandCaseconvertTestingUnassignedVari" +
                    "ablevalues\" debug outputs as", ((string)(null)), table492, "And ");
#line hidden
            TechTalk.SpecFlow.Table table493 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table493.AddRow(new string[] {
                        "1",
                        "[[res12]] =",
                        "UPPER"});
#line 2589
   testRunner.And("the \"Case to Convert\" in WorkFlow \"WorkflowBaseConvertandCaseconvertTestingUnassi" +
                    "gnedVariablevalues\" debug inputs as", ((string)(null)), table493, "And ");
#line hidden
            TechTalk.SpecFlow.Table table494 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 2592
   testRunner.And("the \"Case to Convert\" in Workflow \"WorkflowBaseConvertandCaseconvertTestingUnassi" +
                    "gnedVariablevalues\" debug outputs as", ((string)(null)), table494, "And ");
#line hidden
            TechTalk.SpecFlow.Table table495 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table495.AddRow(new string[] {
                        "1",
                        "[[res12]] =",
                        "Text",
                        "Base 64"});
#line 2594
   testRunner.And("the \"Base to Convert\" in WorkFlow \"WorkflowBaseConvertandCaseconvertTestingUnassi" +
                    "gnedVariablevalues\" debug inputs as", ((string)(null)), table495, "And ");
#line hidden
            TechTalk.SpecFlow.Table table496 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 2597
      testRunner.And("the \"Base to Convert\" in Workflow \"WorkflowBaseConvertandCaseconvertTestingUnassi" +
                    "gnedVariablevalues\" debug outputs as", ((string)(null)), table496, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns DataMerge and DataSplit and testing variables that hasn\"t b" +
            "een assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignsDataMergeAndDataSplitAndTestingVariablesThatHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns DataMerge and DataSplit and testing variables that hasn\"t b" +
                    "een assigned", ((string[])(null)));
#line 2600
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2601
      testRunner.Given("I have a workflow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table497 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table497.AddRow(new string[] {
                        "[[res]]",
                        "Test"});
#line 2602
   testRunner.And("\"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues\" contains an Assign \"Assi" +
                    "gn To merge\" as", ((string)(null)), table497, "And ");
#line hidden
            TechTalk.SpecFlow.Table table498 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table498.AddRow(new string[] {
                        "[[Value]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
#line 2605
   testRunner.And("\"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues\" contains Data Merge \"Dat" +
                    "a Merge\" into \"[[result]]\" as", ((string)(null)), table498, "And ");
#line hidden
            TechTalk.SpecFlow.Table table499 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table499.AddRow(new string[] {
                        "[[Value12]]",
                        "[[rec().b]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
#line 2608
   testRunner.And("\"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues\" contains Data Split \"Dat" +
                    "a Split\" as", ((string)(null)), table499, "And ");
#line 2611
   testRunner.When("\"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2612
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table500 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table500.AddRow(new string[] {
                        "1",
                        "[[res]] =",
                        "Test"});
#line 2613
   testRunner.And("the \"Assign To merge\" in WorkFlow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraib" +
                    "levalues\" debug inputs as", ((string)(null)), table500, "And ");
#line hidden
            TechTalk.SpecFlow.Table table501 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table501.AddRow(new string[] {
                        "1",
                        "[[res]]          =  Test"});
#line 2616
  testRunner.And("the \"Assign To merge\" in Workflow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraib" +
                    "levalues\" debug outputs as", ((string)(null)), table501, "And ");
#line hidden
            TechTalk.SpecFlow.Table table502 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table502.AddRow(new string[] {
                        "1",
                        "[[Value]] =",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
#line 2619
   testRunner.And("the \"Data Merge\" in WorkFlow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraibleval" +
                    "ues\" debug inputs as", ((string)(null)), table502, "And ");
#line hidden
            TechTalk.SpecFlow.Table table503 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table503.AddRow(new string[] {
                        "[[result]] ="});
#line 2622
   testRunner.And("the \"Data Merge\" in Workflow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraibleval" +
                    "ues\" debug outputs as", ((string)(null)), table503, "And ");
#line hidden
            TechTalk.SpecFlow.Table table504 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table504.AddRow(new string[] {
                        "[[Value12]]  =",
                        "Forward",
                        "No",
                        "1",
                        "[[rec().b]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
#line 2625
   testRunner.And("the \"Data Split\" in WorkFlow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraibleval" +
                    "ues\" debug inputs as", ((string)(null)), table504, "And ");
#line hidden
            TechTalk.SpecFlow.Table table505 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 2628
   testRunner.And("the \"Data Split\" in Workflow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraibleval" +
                    "ues\" debug outputs as", ((string)(null)), table505, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns DataMerge and DataSplit and testing variables that hasn\"t b" +
            "een assigned2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignsDataMergeAndDataSplitAndTestingVariablesThatHasnTBeenAssigned2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns DataMerge and DataSplit and testing variables that hasn\"t b" +
                    "een assigned2", ((string[])(null)));
#line 2631
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2632
      testRunner.Given("I have a workflow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table506 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table506.AddRow(new string[] {
                        "[[res]]",
                        "Test"});
#line 2633
   testRunner.And("\"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues2\" contains an Assign \"Ass" +
                    "ign To merge\" as", ((string)(null)), table506, "And ");
#line hidden
            TechTalk.SpecFlow.Table table507 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table507.AddRow(new string[] {
                        "[[Value]]Test",
                        "Index",
                        "4",
                        "",
                        "Left"});
#line 2636
   testRunner.And("\"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues2\" contains Data Merge \"Da" +
                    "ta Merge\" into \"[[result]]\" as", ((string)(null)), table507, "And ");
#line hidden
            TechTalk.SpecFlow.Table table508 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table508.AddRow(new string[] {
                        "[[Value12]]Test",
                        "[[rec().b]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
#line 2639
   testRunner.And("\"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues2\" contains Data Split \"Da" +
                    "ta Split\" as", ((string)(null)), table508, "And ");
#line 2642
   testRunner.When("\"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues2\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2643
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table509 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table509.AddRow(new string[] {
                        "1",
                        "[[res]] =",
                        "Test"});
#line 2644
   testRunner.And("the \"Assign To merge\" in WorkFlow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraib" +
                    "levalues2\" debug inputs as", ((string)(null)), table509, "And ");
#line hidden
            TechTalk.SpecFlow.Table table510 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table510.AddRow(new string[] {
                        "1",
                        "[[res]] =  Test"});
#line 2647
  testRunner.And("the \"Assign To merge\" in Workflow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraib" +
                    "levalues2\" debug outputs as", ((string)(null)), table510, "And ");
#line hidden
            TechTalk.SpecFlow.Table table511 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table511.AddRow(new string[] {
                        "1",
                        "[[Value]]Test =",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
#line 2650
   testRunner.And("the \"Data Merge\" in WorkFlow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraibleval" +
                    "ues2\" debug inputs as", ((string)(null)), table511, "And ");
#line hidden
            TechTalk.SpecFlow.Table table512 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table512.AddRow(new string[] {
                        "[[result]] ="});
#line 2653
   testRunner.And("the \"Data Merge\" in Workflow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraibleval" +
                    "ues2\" debug outputs as", ((string)(null)), table512, "And ");
#line hidden
            TechTalk.SpecFlow.Table table513 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table513.AddRow(new string[] {
                        "[[Value12]]Test =",
                        "Forward",
                        "No",
                        "1",
                        "[[rec().b]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
#line 2656
   testRunner.And("the \"Data Split\" in WorkFlow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraibleval" +
                    "ues2\" debug inputs as", ((string)(null)), table513, "And ");
#line hidden
            TechTalk.SpecFlow.Table table514 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 2659
   testRunner.And("the \"Data Split\" in Workflow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraibleval" +
                    "ues2\" debug outputs as", ((string)(null)), table514, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns Replace and testing variables that hasn\"t been assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignsReplaceAndTestingVariablesThatHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns Replace and testing variables that hasn\"t been assigned", ((string[])(null)));
#line 2662
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2663
      testRunner.Given("I have a workflow \"workflowithAssignandReplaceTestingUnassignedvariablevalues\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table515 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table515.AddRow(new string[] {
                        "[[Val]]",
                        "test"});
#line 2664
       testRunner.And("\"workflowithAssignandReplaceTestingUnassignedvariablevalues\" contains an Assign \"" +
                    "Assign34\" as", ((string)(null)), table515, "And ");
#line hidden
            TechTalk.SpecFlow.Table table516 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table516.AddRow(new string[] {
                        "[[rec()]]",
                        "[[Val1]]",
                        "[[Val2]]"});
#line 2667
   testRunner.And("\"workflowithAssignandReplaceTestingUnassignedvariablevalues\" contains Replace \"Re" +
                    "placing\" into \"[[replac]]\" as", ((string)(null)), table516, "And ");
#line 2670
   testRunner.When("\"workflowithAssignandReplaceTestingUnassignedvariablevalues\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2671
   testRunner.Then("the workflow execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table517 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table517.AddRow(new string[] {
                        "1",
                        "[[Val]] =",
                        "test"});
#line 2672
   testRunner.And("the \"Assign34\" in WorkFlow \"workflowithAssignandReplaceTestingUnassignedvariablev" +
                    "alues\" debug inputs as", ((string)(null)), table517, "And ");
#line hidden
            TechTalk.SpecFlow.Table table518 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table518.AddRow(new string[] {
                        "1",
                        "[[Val]] = test"});
#line 2675
    testRunner.And("the \"Assign34\" in Workflow \"workflowithAssignandReplaceTestingUnassignedvariablev" +
                    "alues\" debug outputs as", ((string)(null)), table518, "And ");
#line hidden
            TechTalk.SpecFlow.Table table519 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table519.AddRow(new string[] {
                        "[[rec()]] =",
                        "[[Val1]] =",
                        "[[Val2]] ="});
#line 2678
   testRunner.And("the \"Replacing\" in WorkFlow \"workflowithAssignandReplaceTestingUnassignedvariable" +
                    "values\" debug inputs as", ((string)(null)), table519, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns Replace and testing variables that hasn\"t been assigned2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignsReplaceAndTestingVariablesThatHasnTBeenAssigned2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns Replace and testing variables that hasn\"t been assigned2", ((string[])(null)));
#line 2685
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2686
      testRunner.Given("I have a workflow \"workflowithAssignandReplaceTestingUnassignedvariablevalues2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table520 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table520.AddRow(new string[] {
                        "[[Val]]",
                        "test"});
            table520.AddRow(new string[] {
                        "[[rec().a]]",
                        "Warewolf"});
#line 2687
      testRunner.And("\"workflowithAssignandReplaceTestingUnassignedvariablevalues2\" contains an Assign " +
                    "\"Assign34\" as", ((string)(null)), table520, "And ");
#line hidden
            TechTalk.SpecFlow.Table table521 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table521.AddRow(new string[] {
                        "[[rec()]]",
                        "[[Val1]]Test",
                        "[[Val]]"});
#line 2691
   testRunner.And("\"workflowithAssignandReplaceTestingUnassignedvariablevalues2\" contains Replace \"R" +
                    "eplacing\" into \"[[replac]]\" as", ((string)(null)), table521, "And ");
#line 2694
   testRunner.When("\"workflowithAssignandReplaceTestingUnassignedvariablevalues2\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2695
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table522 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table522.AddRow(new string[] {
                        "1",
                        "[[Val]] =",
                        "test"});
            table522.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "Warewolf"});
#line 2696
   testRunner.And("the \"Assign34\" in WorkFlow \"workflowithAssignandReplaceTestingUnassignedvariablev" +
                    "alues2\" debug inputs as", ((string)(null)), table522, "And ");
#line hidden
            TechTalk.SpecFlow.Table table523 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table523.AddRow(new string[] {
                        "1",
                        "[[Val]] = test"});
            table523.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = Warewolf"});
#line 2700
    testRunner.And("the \"Assign34\" in Workflow \"workflowithAssignandReplaceTestingUnassignedvariablev" +
                    "alues2\" debug outputs as", ((string)(null)), table523, "And ");
#line hidden
            TechTalk.SpecFlow.Table table524 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table524.AddRow(new string[] {
                        "[[rec(1).a]] = Warewolf",
                        "[[Val1]]Test =",
                        "[[Val]] = test"});
#line 2704
   testRunner.And("the \"Replacing\" in WorkFlow \"workflowithAssignandReplaceTestingUnassignedvariable" +
                    "values2\" debug inputs as", ((string)(null)), table524, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Format Numbers and testing variables that hasn\"t been assign" +
            "ed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignFormatNumbersAndTestingVariablesThatHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Format Numbers and testing variables that hasn\"t been assign" +
                    "ed", ((string[])(null)));
#line 2711
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2712
   testRunner.Given("I have a workflow \"WorkflowWithAssignandFormatTestingUnassignedvariablevalues\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table525 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table525.AddRow(new string[] {
                        "[[val]]",
                        "1"});
#line 2713
   testRunner.And("\"WorkflowWithAssignandFormatTestingUnassignedvariablevalues\" contains an Assign \"" +
                    "IndexVal\" as", ((string)(null)), table525, "And ");
#line hidden
            TechTalk.SpecFlow.Table table526 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table526.AddRow(new string[] {
                        "[[val1]]",
                        "Up",
                        "[[val1]]",
                        "[[val1]]",
                        "[[fresult]]"});
#line 2716
      testRunner.And("\"WorkflowWithAssignandFormatTestingUnassignedvariablevalues\" contains Format Numb" +
                    "er \"Fnumber\" as", ((string)(null)), table526, "And ");
#line 2719
   testRunner.When("\"WorkflowWithAssignandFormatTestingUnassignedvariablevalues\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2720
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table527 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table527.AddRow(new string[] {
                        "1",
                        "[[val]]  =",
                        "1"});
#line 2721
   testRunner.And("the \"IndexVal\" in WorkFlow \"WorkflowWithAssignandFormatTestingUnassignedvariablev" +
                    "alues\" debug inputs as", ((string)(null)), table527, "And ");
#line hidden
            TechTalk.SpecFlow.Table table528 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table528.AddRow(new string[] {
                        "1",
                        "[[val]]  = 1"});
#line 2724
   testRunner.And("the \"IndexVal\" in Workflow \"WorkflowWithAssignandFormatTestingUnassignedvariablev" +
                    "alues\" debug outputs as", ((string)(null)), table528, "And ");
#line hidden
            TechTalk.SpecFlow.Table table529 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table529.AddRow(new string[] {
                        "[[val1]] =",
                        "Up",
                        "[[val1]] =",
                        "[[val1]]  ="});
#line 2727
   testRunner.And("the \"Fnumber\" in WorkFlow \"WorkflowWithAssignandFormatTestingUnassignedvariableva" +
                    "lues\" debug inputs as", ((string)(null)), table529, "And ");
#line hidden
            TechTalk.SpecFlow.Table table530 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table530.AddRow(new string[] {
                        "[[fresult]]  ="});
#line 2730
   testRunner.And("the \"Fnumber\" in Workflow \"WorkflowWithAssignandFormatTestingUnassignedvariableva" +
                    "lues\" debug outputs as", ((string)(null)), table530, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Format Numbers and testing variables that hasn\"t been assign" +
            "ed2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignFormatNumbersAndTestingVariablesThatHasnTBeenAssigned2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Format Numbers and testing variables that hasn\"t been assign" +
                    "ed2", ((string[])(null)));
#line 2734
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2735
   testRunner.Given("I have a workflow \"WorkflowWithAssignandFormatTestingUnassignedvariablevalues2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table531 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table531.AddRow(new string[] {
                        "[[val]]",
                        "1"});
#line 2736
   testRunner.And("\"WorkflowWithAssignandFormatTestingUnassignedvariablevalues2\" contains an Assign " +
                    "\"IndexVal\" as", ((string)(null)), table531, "And ");
#line hidden
            TechTalk.SpecFlow.Table table532 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table532.AddRow(new string[] {
                        "[[val1]]234",
                        "Up",
                        "[[val]]",
                        "[[val]]",
                        "[[fresult]]"});
#line 2739
     testRunner.And("\"WorkflowWithAssignandFormatTestingUnassignedvariablevalues2\" contains Format Num" +
                    "ber \"Fnumber\" as", ((string)(null)), table532, "And ");
#line 2742
   testRunner.When("\"WorkflowWithAssignandFormatTestingUnassignedvariablevalues2\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2743
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table533 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table533.AddRow(new string[] {
                        "1",
                        "[[val]]  =",
                        "1"});
#line 2744
   testRunner.And("the \"IndexVal\" in WorkFlow \"WorkflowWithAssignandFormatTestingUnassignedvariablev" +
                    "alues2\" debug inputs as", ((string)(null)), table533, "And ");
#line hidden
            TechTalk.SpecFlow.Table table534 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table534.AddRow(new string[] {
                        "1",
                        "[[val]]  = 1"});
#line 2747
   testRunner.And("the \"IndexVal\" in Workflow \"WorkflowWithAssignandFormatTestingUnassignedvariablev" +
                    "alues2\" debug outputs as", ((string)(null)), table534, "And ");
#line hidden
            TechTalk.SpecFlow.Table table535 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table535.AddRow(new string[] {
                        "[[val1]]234 =",
                        "Up",
                        "[[val]] = 1",
                        "[[val]]  = 1"});
#line 2750
   testRunner.And("the \"Fnumber\" in WorkFlow \"WorkflowWithAssignandFormatTestingUnassignedvariableva" +
                    "lues2\" debug inputs as", ((string)(null)), table535, "And ");
#line hidden
            TechTalk.SpecFlow.Table table536 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table536.AddRow(new string[] {
                        "[[fresult]]  ="});
#line 2753
   testRunner.And("the \"Fnumber\" in Workflow \"WorkflowWithAssignandFormatTestingUnassignedvariableva" +
                    "lues2\" debug outputs as", ((string)(null)), table536, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Create Delete folder and testing variable values that hasn\"t" +
            " been assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignCreateDeleteFolderAndTestingVariableValuesThatHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Create Delete folder and testing variable values that hasn\"t" +
                    " been assigned", ((string[])(null)));
#line 2757
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2758
   testRunner.Given("I have a workflow \"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariab" +
                    "levalues\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table537 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table537.AddRow(new string[] {
                        "[[rec().a]]",
                        "C:\\copied00.txt"});
#line 2759
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariablevalues\" contains" +
                    " an Assign \"AssignT\" as", ((string)(null)), table537, "And ");
#line hidden
            TechTalk.SpecFlow.Table table538 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "If it exits",
                        "Username",
                        "Password",
                        "Result"});
            table538.AddRow(new string[] {
                        "[[NoValue]]",
                        "True",
                        "",
                        "",
                        "[[res1]]"});
#line 2762
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariablevalues\" contains" +
                    " an Create \"Create12\" as", ((string)(null)), table538, "And ");
#line hidden
            TechTalk.SpecFlow.Table table539 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset",
                        "Result"});
            table539.AddRow(new string[] {
                        "[[NoValue]]",
                        "[[res2]]"});
#line 2765
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariablevalues\" contains" +
                    " an Delete Folder \"DeleteFolder1\" as", ((string)(null)), table539, "And ");
#line 2768
   testRunner.When("\"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariablevalues\" is execu" +
                    "ted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2769
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table540 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table540.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "C:\\copied00.txt"});
#line 2770
   testRunner.And("the \"AssignT\" in WorkFlow \"WorkflowWithAssignCreateandDeleteRecordTestingUnassign" +
                    "edvariablevalues\" debug inputs as", ((string)(null)), table540, "And ");
#line hidden
            TechTalk.SpecFlow.Table table541 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table541.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = C:\\copied00.txt"});
#line 2773
   testRunner.And("the \"AssignT\" in Workflow \"WorkflowWithAssignCreateandDeleteRecordTestingUnassign" +
                    "edvariablevalues\" debug outputs as", ((string)(null)), table541, "And ");
#line hidden
            TechTalk.SpecFlow.Table table542 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "Overwrite",
                        "Username",
                        "Password"});
            table542.AddRow(new string[] {
                        "[[NoValue]] =",
                        "True",
                        "\"\"",
                        "\"\""});
#line 2776
  testRunner.And("the \"Create12\" in WorkFlow \"WorkflowWithAssignCreateandDeleteRecordTestingUnassig" +
                    "nedvariablevalues\" debug inputs as", ((string)(null)), table542, "And ");
#line hidden
            TechTalk.SpecFlow.Table table543 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table543.AddRow(new string[] {
                        "[[res1]] = Failure"});
#line 2779
    testRunner.And("the \"Create12\" in Workflow \"WorkflowWithAssignCreateandDeleteRecordTestingUnassig" +
                    "nedvariablevalues\" debug outputs as", ((string)(null)), table543, "And ");
#line hidden
            TechTalk.SpecFlow.Table table544 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input Path",
                        "Username",
                        "Password"});
            table544.AddRow(new string[] {
                        "[[NoValue]] =",
                        "\"\"",
                        "\"\""});
#line 2782
   testRunner.And("the \"DeleteFolder1\" in WorkFlow \"WorkflowWithAssignCreateandDeleteRecordTestingUn" +
                    "assignedvariablevalues\" debug inputs as", ((string)(null)), table544, "And ");
#line hidden
            TechTalk.SpecFlow.Table table545 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table545.AddRow(new string[] {
                        "[[res2]] = Failure"});
#line 2785
   testRunner.And("the \"DeleteFolder1\" in Workflow \"WorkflowWithAssignCreateandDeleteRecordTestingUn" +
                    "assignedvariablevalues\" debug outputs as", ((string)(null)), table545, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Create Delete folder and testing variable values that hasn\"t" +
            " been assigned2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignCreateDeleteFolderAndTestingVariableValuesThatHasnTBeenAssigned2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Create Delete folder and testing variable values that hasn\"t" +
                    " been assigned2", ((string[])(null)));
#line 2789
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2790
   testRunner.Given("I have a workflow \"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariab" +
                    "levalues2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table546 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table546.AddRow(new string[] {
                        "[[rec().a]]",
                        "C:\\copied00.txt"});
#line 2791
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariablevalues2\" contain" +
                    "s an Assign \"AssignT\" as", ((string)(null)), table546, "And ");
#line hidden
            TechTalk.SpecFlow.Table table547 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "If it exits",
                        "Username",
                        "Password",
                        "Result"});
            table547.AddRow(new string[] {
                        "[[NoValue]]\\copied00.txt",
                        "True",
                        "",
                        "",
                        "[[res1]]"});
#line 2794
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariablevalues2\" contain" +
                    "s an Create \"Create12\" as", ((string)(null)), table547, "And ");
#line hidden
            TechTalk.SpecFlow.Table table548 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset",
                        "Result"});
            table548.AddRow(new string[] {
                        "[[NoValue]]\\copied00.txt",
                        "[[res2]]"});
#line 2797
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariablevalues2\" contain" +
                    "s an Delete Folder \"DeleteFolder1\" as", ((string)(null)), table548, "And ");
#line 2800
   testRunner.When("\"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariablevalues2\" is exec" +
                    "uted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2801
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table549 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table549.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "C:\\copied00.txt"});
#line 2802
   testRunner.And("the \"AssignT\" in WorkFlow \"WorkflowWithAssignCreateandDeleteRecordTestingUnassign" +
                    "edvariablevalues2\" debug inputs as", ((string)(null)), table549, "And ");
#line hidden
            TechTalk.SpecFlow.Table table550 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table550.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = C:\\copied00.txt"});
#line 2805
   testRunner.And("the \"AssignT\" in Workflow \"WorkflowWithAssignCreateandDeleteRecordTestingUnassign" +
                    "edvariablevalues2\" debug outputs as", ((string)(null)), table550, "And ");
#line hidden
            TechTalk.SpecFlow.Table table551 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "Overwrite",
                        "Username",
                        "Password"});
            table551.AddRow(new string[] {
                        "[[NoValue]]\\copied00.txt =",
                        "True",
                        "\"\"",
                        "\"\""});
#line 2808
  testRunner.And("the \"Create12\" in WorkFlow \"WorkflowWithAssignCreateandDeleteRecordTestingUnassig" +
                    "nedvariablevalues2\" debug inputs as", ((string)(null)), table551, "And ");
#line hidden
            TechTalk.SpecFlow.Table table552 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table552.AddRow(new string[] {
                        "[[res1]] = Failure"});
#line 2811
    testRunner.And("the \"Create12\" in Workflow \"WorkflowWithAssignCreateandDeleteRecordTestingUnassig" +
                    "nedvariablevalues2\" debug outputs as", ((string)(null)), table552, "And ");
#line hidden
            TechTalk.SpecFlow.Table table553 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input Path",
                        "Username",
                        "Password"});
            table553.AddRow(new string[] {
                        "[[NoValue]]\\copied00.txt =",
                        "\"\"",
                        "\"\""});
#line 2814
   testRunner.And("the \"DeleteFolder1\" in WorkFlow \"WorkflowWithAssignCreateandDeleteRecordTestingUn" +
                    "assignedvariablevalues2\" debug inputs as", ((string)(null)), table553, "And ");
#line hidden
            TechTalk.SpecFlow.Table table554 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table554.AddRow(new string[] {
                        "[[res2]] = Failure"});
#line 2817
   testRunner.And("the \"DeleteFolder1\" in Workflow \"WorkflowWithAssignCreateandDeleteRecordTestingUn" +
                    "assignedvariablevalues2\" debug outputs as", ((string)(null)), table554, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Calculate testing variable values that hasn\"t been assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void CalculateTestingVariableValuesThatHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate testing variable values that hasn\"t been assigned", ((string[])(null)));
#line 2822
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2823
      testRunner.Given("I have a workflow \"WorkflowforCalTestingUnassignedvariablevalue\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table555 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table555.AddRow(new string[] {
                        "[[Val]]",
                        "1"});
#line 2824
      testRunner.And("\"WorkflowforCalTestingUnassignedvariablevalue\" contains an Assign \"Values34\" as", ((string)(null)), table555, "And ");
#line 2827
  testRunner.And("\"WorkflowforCalTestingUnassignedvariablevalue\" contains Calculate \"Calculate1\" wi" +
                    "th formula \"[[Val1]]+1\" into \"[[res]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2828
   testRunner.When("\"WorkflowforCalTestingUnassignedvariablevalue\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2829
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table556 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table556.AddRow(new string[] {
                        "1",
                        "[[Val]] =",
                        "1"});
#line 2830
      testRunner.And("the \"Values34\" in WorkFlow \"WorkflowforCalTestingUnassignedvariablevalue\" debug i" +
                    "nputs as", ((string)(null)), table556, "And ");
#line hidden
            TechTalk.SpecFlow.Table table557 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table557.AddRow(new string[] {
                        "1",
                        "[[Val]] = 1"});
#line 2833
   testRunner.And("the \"Values34\" in Workflow \"WorkflowforCalTestingUnassignedvariablevalue\" debug o" +
                    "utputs as", ((string)(null)), table557, "And ");
#line hidden
            TechTalk.SpecFlow.Table table558 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table558.AddRow(new string[] {
                        "[[Val1]]+1 ="});
#line 2836
   testRunner.And("the \"Calculate1\" in WorkFlow \"WorkflowforCalTestingUnassignedvariablevalue\" debug" +
                    " inputs as", ((string)(null)), table558, "And ");
#line hidden
            TechTalk.SpecFlow.Table table559 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table559.AddRow(new string[] {
                        "[[res]] ="});
#line 2839
      testRunner.And("the \"Calculate1\" in Workflow \"WorkflowforCalTestingUnassignedvariablevalue\" debug" +
                    " outputs as", ((string)(null)), table559, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Calculate testing variable values that hasn\"t been assigned2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void CalculateTestingVariableValuesThatHasnTBeenAssigned2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate testing variable values that hasn\"t been assigned2", ((string[])(null)));
#line 2844
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2845
      testRunner.Given("I have a workflow \"WorkflowforCalTestingUnassignedvariablevalue2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table560 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table560.AddRow(new string[] {
                        "[[Val]]",
                        "1"});
#line 2846
      testRunner.And("\"WorkflowforCalTestingUnassignedvariablevalue2\" contains an Assign \"Values34\" as", ((string)(null)), table560, "And ");
#line 2849
  testRunner.And("\"WorkflowforCalTestingUnassignedvariablevalue2\" contains Calculate \"Calculate1\" w" +
                    "ith formula \"[[Val1]]23+1\" into \"[[res]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2850
   testRunner.When("\"WorkflowforCalTestingUnassignedvariablevalue2\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2851
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table561 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table561.AddRow(new string[] {
                        "1",
                        "[[Val]] =",
                        "1"});
#line 2852
      testRunner.And("the \"Values34\" in WorkFlow \"WorkflowforCalTestingUnassignedvariablevalue2\" debug " +
                    "inputs as", ((string)(null)), table561, "And ");
#line hidden
            TechTalk.SpecFlow.Table table562 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table562.AddRow(new string[] {
                        "1",
                        "[[Val]] = 1"});
#line 2855
   testRunner.And("the \"Values34\" in Workflow \"WorkflowforCalTestingUnassignedvariablevalue2\" debug " +
                    "outputs as", ((string)(null)), table562, "And ");
#line hidden
            TechTalk.SpecFlow.Table table563 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table563.AddRow(new string[] {
                        "[[Val1]]23+1 ="});
#line 2858
   testRunner.And("the \"Calculate1\" in WorkFlow \"WorkflowforCalTestingUnassignedvariablevalue2\" debu" +
                    "g inputs as", ((string)(null)), table563, "And ");
#line hidden
            TechTalk.SpecFlow.Table table564 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table564.AddRow(new string[] {
                        "[[res]] ="});
#line 2861
      testRunner.And("the \"Calculate1\" in Workflow \"WorkflowforCalTestingUnassignedvariablevalue2\" debu" +
                    "g outputs as", ((string)(null)), table564, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Random and testing variable values that hasn\"t been assi" +
            "gned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndRandomAndTestingVariableValuesThatHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Random and testing variable values that hasn\"t been assi" +
                    "gned", ((string[])(null)));
#line 2865
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2866
  testRunner.Given("I have a workflow \"WorkflowWithAssignandRandomTestingUnassignedvariablevalue\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table565 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table565.AddRow(new string[] {
                        "[[a]]",
                        "1"});
#line 2867
  testRunner.And("\"WorkflowWithAssignandRandomTestingUnassignedvariablevalue\" contains an Assign \"V" +
                    "alforrandno\" as", ((string)(null)), table565, "And ");
#line hidden
            TechTalk.SpecFlow.Table table566 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table566.AddRow(new string[] {
                        "Numbers",
                        "[[val1]]",
                        "[[val2]]",
                        "[[ranresult]]"});
#line 2870
    testRunner.And("\"WorkflowWithAssignandRandomTestingUnassignedvariablevalue\" contains Random \"Rand" +
                    "\" as", ((string)(null)), table566, "And ");
#line 2873
   testRunner.When("\"WorkflowWithAssignandRandomTestingUnassignedvariablevalue\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2874
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table567 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table567.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
#line 2875
   testRunner.And("the \"Valforrandno\" in WorkFlow \"WorkflowWithAssignandRandomTestingUnassignedvaria" +
                    "blevalue\" debug inputs as", ((string)(null)), table567, "And ");
#line hidden
            TechTalk.SpecFlow.Table table568 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table568.AddRow(new string[] {
                        "1",
                        "[[a]] = 1"});
#line 2878
   testRunner.And("the \"Valforrandno\" in Workflow \"WorkflowWithAssignandRandomTestingUnassignedvaria" +
                    "blevalue\" debug outputs as", ((string)(null)), table568, "And ");
#line hidden
            TechTalk.SpecFlow.Table table569 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table569.AddRow(new string[] {
                        "Numbers",
                        "[[val1]]  =",
                        "[[val2]] ="});
#line 2881
   testRunner.And("the \"Rand\" in WorkFlow \"WorkflowWithAssignandRandomTestingUnassignedvariablevalue" +
                    "\" debug inputs as", ((string)(null)), table569, "And ");
#line hidden
            TechTalk.SpecFlow.Table table570 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table570.AddRow(new string[] {
                        "[[ranresult]] ="});
#line 2884
   testRunner.And("the \"Rand\" in Workflow \"WorkflowWithAssignandRandomTestingUnassignedvariablevalue" +
                    "\" debug outputs as", ((string)(null)), table570, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign, Date Time Difference tools and testing variable values that" +
            " hasn\"t been assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignDateTimeDifferenceToolsAndTestingVariableValuesThatHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign, Date Time Difference tools and testing variable values that" +
                    " hasn\"t been assigned", ((string[])(null)));
#line 2889
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2890
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndDateTimeDifferencetoolsTestingUnassignedv" +
                    "ariablevalue\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table571 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table571.AddRow(new string[] {
                        "[[val]]",
                        "2014"});
#line 2891
   testRunner.And("\"WorkflowWithAssignAndDateTimeDifferencetoolsTestingUnassignedvariablevalue\" cont" +
                    "ains an Assign \"InputDates\" as", ((string)(null)), table571, "And ");
#line hidden
            TechTalk.SpecFlow.Table table572 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table572.AddRow(new string[] {
                        "[[val1]]",
                        "[[val2]]",
                        "[[val3]]",
                        "Years",
                        "[[result]]"});
#line 2894
   testRunner.And("\"WorkflowWithAssignAndDateTimeDifferencetoolsTestingUnassignedvariablevalue\" cont" +
                    "ains Date and Time Difference \"DateAndTime\" as", ((string)(null)), table572, "And ");
#line 2897
   testRunner.When("\"WorkflowWithAssignAndDateTimeDifferencetoolsTestingUnassignedvariablevalue\" is e" +
                    "xecuted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2898
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table573 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table573.AddRow(new string[] {
                        "1",
                        "[[val]]  =",
                        "2014"});
#line 2899
   testRunner.And("the \"InputDates\" in WorkFlow \"WorkflowWithAssignAndDateTimeDifferencetoolsTesting" +
                    "Unassignedvariablevalue\" debug inputs as", ((string)(null)), table573, "And ");
#line hidden
            TechTalk.SpecFlow.Table table574 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table574.AddRow(new string[] {
                        "1",
                        "[[val]]  = 2014"});
#line 2902
   testRunner.And("the \"InputDates\" in Workflow \"WorkflowWithAssignAndDateTimeDifferencetoolsTesting" +
                    "Unassignedvariablevalue\" debug outputs as", ((string)(null)), table574, "And ");
#line hidden
            TechTalk.SpecFlow.Table table575 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table575.AddRow(new string[] {
                        "[[val1]] =",
                        "[[val2]] =",
                        "[[val3]]  =",
                        "Years"});
#line 2905
   testRunner.And("the \"DateAndTime\" in WorkFlow \"WorkflowWithAssignAndDateTimeDifferencetoolsTestin" +
                    "gUnassignedvariablevalue\" debug inputs as", ((string)(null)), table575, "And ");
#line hidden
            TechTalk.SpecFlow.Table table576 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
#line 2908
   testRunner.And("the \"DateAndTime\" in Workflow \"WorkflowWithAssignAndDateTimeDifferencetoolsTestin" +
                    "gUnassignedvariablevalue\" debug outputs as", ((string)(null)), table576, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign, Date Time Difference tools and testing variable values that" +
            " hasn\"t been assigned2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignDateTimeDifferenceToolsAndTestingVariableValuesThatHasnTBeenAssigned2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign, Date Time Difference tools and testing variable values that" +
                    " hasn\"t been assigned2", ((string[])(null)));
#line 2911
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2912
   testRunner.Given("I have a workflow \"WorkflowContainsDateTimeDifferencetoolsTestingUnassignedvariab" +
                    "levalue2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table577 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table577.AddRow(new string[] {
                        "[[val]]",
                        "2014"});
#line 2913
   testRunner.And("\"WorkflowContainsDateTimeDifferencetoolsTestingUnassignedvariablevalue2\" contains" +
                    " an Assign \"InputDates2\" as", ((string)(null)), table577, "And ");
#line hidden
            TechTalk.SpecFlow.Table table578 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table578.AddRow(new string[] {
                        "10/01/1991  [[val1]]/[[val1]]/[[val1]]",
                        "10/01/1991",
                        "dd/mm/yyyy",
                        "Years",
                        "[[result]]"});
#line 2916
   testRunner.And("\"WorkflowContainsDateTimeDifferencetoolsTestingUnassignedvariablevalue2\" contains" +
                    " Date and Time Difference \"DateTime4\" as", ((string)(null)), table578, "And ");
#line 2919
   testRunner.When("\"WorkflowContainsDateTimeDifferencetoolsTestingUnassignedvariablevalue2\" is execu" +
                    "ted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2920
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table579 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table579.AddRow(new string[] {
                        "1",
                        "[[val]]  =",
                        "2014"});
#line 2921
   testRunner.And("the \"InputDates2\" in WorkFlow \"WorkflowContainsDateTimeDifferencetoolsTestingUnas" +
                    "signedvariablevalue2\" debug inputs as", ((string)(null)), table579, "And ");
#line hidden
            TechTalk.SpecFlow.Table table580 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table580.AddRow(new string[] {
                        "1",
                        "[[val]]  = 2014"});
#line 2924
   testRunner.And("the \"InputDates2\" in Workflow \"WorkflowContainsDateTimeDifferencetoolsTestingUnas" +
                    "signedvariablevalue2\" debug outputs as", ((string)(null)), table580, "And ");
#line hidden
            TechTalk.SpecFlow.Table table581 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table581.AddRow(new string[] {
                        "10/01/1991  [[val1]]/[[val1]]/[[val1]] =",
                        "10/01/1991",
                        "dd/mm/yyyy",
                        "Years"});
#line 2927
   testRunner.And("the \"DateTime4\" in WorkFlow \"WorkflowContainsDateTimeDifferencetoolsTestingUnassi" +
                    "gnedvariablevalue2\" debug inputs as", ((string)(null)), table581, "And ");
#line hidden
            TechTalk.SpecFlow.Table table582 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table582.AddRow(new string[] {
                        ""});
#line 2930
   testRunner.And("the \"DateTime4\" in Workflow \"WorkflowContainsDateTimeDifferencetoolsTestingUnassi" +
                    "gnedvariablevalue2\" debug outputs as", ((string)(null)), table582, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign  Delete and testing variables that hasn\"t been assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignDeleteAndTestingVariablesThatHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign  Delete and testing variables that hasn\"t been assigned", ((string[])(null)));
#line 2934
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2935
   testRunner.Given("I have a workflow \"WorkflowWithAssignDelete12\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table583 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table583.AddRow(new string[] {
                        "[[rec().a]]",
                        "50"});
#line 2936
   testRunner.And("\"WorkflowWithAssignDelete12\" contains an Assign \"DelRec\" as", ((string)(null)), table583, "And ");
#line hidden
            TechTalk.SpecFlow.Table table584 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "result"});
            table584.AddRow(new string[] {
                        "[[Del(1)]]",
                        "[[result1]]"});
#line 2939
   testRunner.And("\"WorkflowWithAssignDelete12\" contains Delete \"Delet12\" as", ((string)(null)), table584, "And ");
#line 2942
   testRunner.When("\"WorkflowWithAssignDelete12\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2943
      testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table585 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table585.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "50"});
#line 2944
   testRunner.And("the \"DelRec\" in WorkFlow \"WorkflowWithAssignDelete12\" debug inputs as", ((string)(null)), table585, "And ");
#line hidden
            TechTalk.SpecFlow.Table table586 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table586.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 50"});
#line 2947
   testRunner.And("the \"DelRec\" in Workflow \"WorkflowWithAssignDelete12\" debug outputs as", ((string)(null)), table586, "And ");
#line hidden
            TechTalk.SpecFlow.Table table587 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table587.AddRow(new string[] {
                        "[[Del(1)]] ="});
#line 2950
   testRunner.And("the \"Delet12\" in WorkFlow \"WorkflowWithAssignDelete12\" debug inputs as", ((string)(null)), table587, "And ");
#line hidden
            TechTalk.SpecFlow.Table table588 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table588.AddRow(new string[] {
                        "[[result1]] = Failure"});
#line 2953
   testRunner.And("the \"Delet12\" in Workflow \"WorkflowWithAssignDelete12\" debug outputs as", ((string)(null)), table588, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign  DeleteNullHandler and testing variables that hasn\"t been as" +
            "signed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignDeleteNullHandlerAndTestingVariablesThatHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign  DeleteNullHandler and testing variables that hasn\"t been as" +
                    "signed", ((string[])(null)));
#line 2957
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2958
   testRunner.Given("I have a workflow \"WorkflowWithAssignDelete12\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table589 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table589.AddRow(new string[] {
                        "[[rec().a]]",
                        "50"});
#line 2959
   testRunner.And("\"WorkflowWithAssignDelete12\" contains an Assign \"DelRec\" as", ((string)(null)), table589, "And ");
#line hidden
            TechTalk.SpecFlow.Table table590 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "result"});
            table590.AddRow(new string[] {
                        "[[Del(1)]]",
                        "[[result1]]"});
#line 2962
   testRunner.And("\"WorkflowWithAssignDelete12\" contains NullHandlerDelete \"Delet12\" as", ((string)(null)), table590, "And ");
#line 2965
   testRunner.When("\"WorkflowWithAssignDelete12\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2966
      testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table591 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table591.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "50"});
#line 2967
   testRunner.And("the \"DelRec\" in WorkFlow \"WorkflowWithAssignDelete12\" debug inputs as", ((string)(null)), table591, "And ");
#line hidden
            TechTalk.SpecFlow.Table table592 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table592.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 50"});
#line 2970
   testRunner.And("the \"DelRec\" in Workflow \"WorkflowWithAssignDelete12\" debug outputs as", ((string)(null)), table592, "And ");
#line hidden
            TechTalk.SpecFlow.Table table593 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table593.AddRow(new string[] {
                        "[[result1]] = Success"});
#line 2973
   testRunner.And("the \"Delet12\" in Workflow \"WorkflowWithAssignDelete12\" debug outputs as", ((string)(null)), table593, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Sort and testing variables that hasn\"t been assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignSortAndTestingVariablesThatHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Sort and testing variables that hasn\"t been assigned", ((string[])(null)));
#line 2978
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2979
      testRunner.Given("I have a workflow \"workflowithAssignandsortingrec12\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table594 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table594.AddRow(new string[] {
                        "[[rs(1).a]]",
                        "10"});
            table594.AddRow(new string[] {
                        "[[rs(5).a]]",
                        "20"});
            table594.AddRow(new string[] {
                        "[[rs(7).a]]",
                        "30"});
            table594.AddRow(new string[] {
                        "[[rs(2).b]]",
                        "6"});
            table594.AddRow(new string[] {
                        "[[rs(4).b]]",
                        "4"});
            table594.AddRow(new string[] {
                        "[[rs(6).b]]",
                        "2"});
#line 2980
      testRunner.And("\"workflowithAssignandsortingrec12\" contains an Assign \"sortval5\" as", ((string)(null)), table594, "And ");
#line hidden
            TechTalk.SpecFlow.Table table595 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table595.AddRow(new string[] {
                        "[[xs(*).a]]",
                        "Backwards"});
#line 2988
   testRunner.And("\"workflowithAssignandsortingrec12\" contains an Sort \"sortRec1\" as", ((string)(null)), table595, "And ");
#line 2991
   testRunner.When("\"workflowithAssignandsortingrec12\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2992
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table596 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table596.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =",
                        "10"});
            table596.AddRow(new string[] {
                        "2",
                        "[[rs(5).a]] =",
                        "20"});
            table596.AddRow(new string[] {
                        "3",
                        "[[rs(7).a]] =",
                        "30"});
            table596.AddRow(new string[] {
                        "4",
                        "[[rs(2).b]] =",
                        "6"});
            table596.AddRow(new string[] {
                        "5",
                        "[[rs(4).b]] =",
                        "4"});
            table596.AddRow(new string[] {
                        "6",
                        "[[rs(6).b]] =",
                        "2"});
#line 2993
   testRunner.And("the \"sortval5\" in WorkFlow \"workflowithAssignandsortingrec12\" debug inputs as", ((string)(null)), table596, "And ");
#line hidden
            TechTalk.SpecFlow.Table table597 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table597.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = 10"});
            table597.AddRow(new string[] {
                        "2",
                        "[[rs(5).a]] = 20"});
            table597.AddRow(new string[] {
                        "3",
                        "[[rs(7).a]] = 30"});
            table597.AddRow(new string[] {
                        "4",
                        "[[rs(2).b]] = 6"});
            table597.AddRow(new string[] {
                        "5",
                        "[[rs(4).b]] = 4"});
            table597.AddRow(new string[] {
                        "6",
                        "[[rs(6).b]] = 2"});
#line 3001
   testRunner.And("the \"sortval5\" in Workflow \"workflowithAssignandsortingrec12\" debug outputs as", ((string)(null)), table597, "And ");
#line hidden
            TechTalk.SpecFlow.Table table598 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table598.AddRow(new string[] {
                        "[[xs(*).a]] =",
                        "Backwards"});
#line 3009
   testRunner.And("the \"sortRec1\" in WorkFlow \"workflowithAssignandsortingrec12\" debug inputs as", ((string)(null)), table598, "And ");
#line hidden
            TechTalk.SpecFlow.Table table599 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table599.AddRow(new string[] {
                        "[[xs(*).a]] ="});
#line 3012
   testRunner.And("the \"sortRec1\" in Workflow \"workflowithAssignandsortingrec12\" debug outputs as", ((string)(null)), table599, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Unique Tool and testing variables in Returnfield hasn\"t been" +
            " assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignUniqueToolAndTestingVariablesInReturnfieldHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Unique Tool and testing variables in Returnfield hasn\"t been" +
                    " assigned", ((string[])(null)));
#line 3016
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3017
      testRunner.Given("I have a workflow \"workflowithAssignUni\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table600 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table600.AddRow(new string[] {
                        "[[rs(1).row]]",
                        "10"});
            table600.AddRow(new string[] {
                        "[[rs(1).data]]",
                        "10"});
#line 3018
      testRunner.And("\"workflowithAssignUni\" contains an Assign \"Records1\" as", ((string)(null)), table600, "And ");
#line hidden
            TechTalk.SpecFlow.Table table601 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table601.AddRow(new string[] {
                        "[[rs(1).row]]",
                        "[[new().row]]",
                        "[[rec().unique]]"});
#line 3022
   testRunner.And("\"workflowithAssignUni\" contains an Unique \"Unrec\" as", ((string)(null)), table601, "And ");
#line 3025
   testRunner.When("\"workflowithAssignUni\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3026
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table602 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table602.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =",
                        "10"});
            table602.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =",
                        "10"});
#line 3027
   testRunner.And("the \"Records1\" in WorkFlow \"workflowithAssignUni\" debug inputs as", ((string)(null)), table602, "And ");
#line hidden
            TechTalk.SpecFlow.Table table603 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table603.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =  10"});
            table603.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =  10"});
#line 3031
   testRunner.And("the \"Records1\" in Workflow \"workflowithAssignUni\" debug outputs as", ((string)(null)), table603, "And ");
#line hidden
            TechTalk.SpecFlow.Table table604 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table604.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).row]] = 10",
                        ""});
            table604.AddRow(new string[] {
                        "",
                        "",
                        "[[new().row]] ="});
#line 3035
   testRunner.And("the \"Unrec\" in WorkFlow \"workflowithAssignUni\" debug inputs as", ((string)(null)), table604, "And ");
#line hidden
            TechTalk.SpecFlow.Table table605 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table605.AddRow(new string[] {
                        "[[rec(*).unique]] ="});
#line 3039
      testRunner.And("the \"Unrec\" in Workflow \"workflowithAssignUni\" debug outputs as", ((string)(null)), table605, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Gather System tool throws error when debug with 2 variables in one row")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void GatherSystemToolThrowsErrorWhenDebugWith2VariablesInOneRow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Gather System tool throws error when debug with 2 variables in one row", ((string[])(null)));
#line 3043
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3044
   testRunner.Given("I have a workflow \"WorkflowW\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table606 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table606.AddRow(new string[] {
                        "[[a]]",
                        "b"});
#line 3045
   testRunner.And("\"WorkflowW\" contains an Assign \"IndexVal\" as", ((string)(null)), table606, "And ");
#line hidden
            TechTalk.SpecFlow.Table table607 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table607.AddRow(new string[] {
                        "[[a]][[b]]",
                        "Date & Time"});
#line 3048
    testRunner.And("\"WorkflowW\" contains Gather System Info \"System info\" as", ((string)(null)), table607, "And ");
#line 3051
   testRunner.When("\"WorkflowW\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3052
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table608 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table608.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
#line 3053
    testRunner.And("the \"IndexVal\" in WorkFlow \"WorkflowW\" debug inputs as", ((string)(null)), table608, "And ");
#line hidden
            TechTalk.SpecFlow.Table table609 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table609.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
#line 3056
   testRunner.And("the \"IndexVal\" in Workflow \"WorkflowW\" debug outputs as", ((string)(null)), table609, "And ");
#line hidden
            TechTalk.SpecFlow.Table table610 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
#line 3059
   testRunner.And("the \"System info\" in WorkFlow \"WorkflowW\" debug inputs as", ((string)(null)), table610, "And ");
#line hidden
            TechTalk.SpecFlow.Table table611 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table611.AddRow(new string[] {
                        "1",
                        "[[a]][[b]] ="});
#line 3061
  testRunner.And("the \"System info\" in Workflow \"WorkflowW\" debug outputs as", ((string)(null)), table611, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Gather System tool throws error when debug with invalid variableb")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void GatherSystemToolThrowsErrorWhenDebugWithInvalidVariableb()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Gather System tool throws error when debug with invalid variableb", ((string[])(null)));
#line 3068
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3069
   testRunner.Given("I have a workflow \"WorkflowW1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table612 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table612.AddRow(new string[] {
                        "[[a]]",
                        "b"});
#line 3070
   testRunner.And("\"WorkflowW1\" contains an Assign \"IndexVal\" as", ((string)(null)), table612, "And ");
#line hidden
            TechTalk.SpecFlow.Table table613 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table613.AddRow(new string[] {
                        "[[a]][[rec().a]]",
                        "Date & Time"});
#line 3073
    testRunner.And("\"WorkflowW1\" contains Gather System Info \"System info\" as", ((string)(null)), table613, "And ");
#line 3076
   testRunner.When("\"WorkflowW1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3077
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table614 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table614.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
#line 3078
    testRunner.And("the \"IndexVal\" in WorkFlow \"WorkflowW1\" debug inputs as", ((string)(null)), table614, "And ");
#line hidden
            TechTalk.SpecFlow.Table table615 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table615.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
#line 3081
   testRunner.And("the \"IndexVal\" in Workflow \"WorkflowW1\" debug outputs as", ((string)(null)), table615, "And ");
#line hidden
            TechTalk.SpecFlow.Table table616 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
#line 3084
   testRunner.And("the \"System info\" in WorkFlow \"WorkflowW1\" debug inputs as", ((string)(null)), table616, "And ");
#line hidden
            TechTalk.SpecFlow.Table table617 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table617.AddRow(new string[] {
                        "1",
                        "[[a]][[rec().a]] ="});
#line 3086
  testRunner.And("the \"System info\" in Workflow \"WorkflowW1\" debug outputs as", ((string)(null)), table617, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow Base Convert and Case Convert passing invalid variable through execution" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowBaseConvertAndCaseConvertPassingInvalidVariableThroughExecution()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow Base Convert and Case Convert passing invalid variable through execution" +
                    "", ((string[])(null)));
#line 3090
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3091
   testRunner.Given("I have a workflow \"WorkflowWithBaseCase1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table618 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table618.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table618.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Warewolf"});
            table618.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "Test"});
            table618.AddRow(new string[] {
                        "[[index(1).a]]",
                        "a$*"});
#line 3092
   testRunner.And("\"WorkflowWithBaseCase1\" contains an Assign \"Assign1\" as", ((string)(null)), table618, "And ");
#line hidden
            TechTalk.SpecFlow.Table table619 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table619.AddRow(new string[] {
                        "[[rec([[index(1).a]]).a]]",
                        "UPPER"});
#line 3098
   testRunner.And("\"WorkflowWithBaseCase1\" contains case convert \"Case1\" as", ((string)(null)), table619, "And ");
#line hidden
            TechTalk.SpecFlow.Table table620 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table620.AddRow(new string[] {
                        "[[rec([[index(1).a]]).a]]",
                        "Text",
                        "Base 64"});
#line 3101
   testRunner.And("\"WorkflowWithBaseCase1\" contains Base convert \"Base1\" as", ((string)(null)), table620, "And ");
#line 3104
   testRunner.When("\"WorkflowWithBaseCase1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3105
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table621 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table621.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table621.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] =",
                        "Warewolf"});
            table621.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]] =",
                        "Test"});
            table621.AddRow(new string[] {
                        "4",
                        "[[index(1).a]] =",
                        "a$*"});
#line 3106
   testRunner.And("the \"Assign1\" in WorkFlow \"WorkflowWithBaseCase1\" debug inputs as", ((string)(null)), table621, "And ");
#line hidden
            TechTalk.SpecFlow.Table table622 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table622.AddRow(new string[] {
                        "1",
                        "[[a]]         =  1"});
            table622.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]]   =  Warewolf"});
            table622.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]]  =  Test"});
            table622.AddRow(new string[] {
                        "4",
                        "[[index(1).a]] =  a$*"});
#line 3112
    testRunner.And("the \"Assign1\" in Workflow \"WorkflowWithBaseCase1\" debug outputs as", ((string)(null)), table622, "And ");
#line hidden
            TechTalk.SpecFlow.Table table623 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table623.AddRow(new string[] {
                        "1",
                        "[[rec(a$*).a]] =",
                        "UPPER"});
#line 3118
   testRunner.And("the \"Case1\" in WorkFlow \"WorkflowWithBaseCase1\" debug inputs as", ((string)(null)), table623, "And ");
#line hidden
            TechTalk.SpecFlow.Table table624 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 3121
   testRunner.And("the \"Case1\" in Workflow \"WorkflowWithBaseCase1\" debug outputs as", ((string)(null)), table624, "And ");
#line hidden
            TechTalk.SpecFlow.Table table625 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table625.AddRow(new string[] {
                        "1",
                        "[[rec(a$*).a]] =",
                        "Text",
                        "Base 64"});
#line 3123
   testRunner.And("the \"Base1\" in WorkFlow \"WorkflowWithBaseCase1\" debug inputs as", ((string)(null)), table625, "And ");
#line hidden
            TechTalk.SpecFlow.Table table626 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 3126
      testRunner.And("the \"Base1\" in Workflow \"WorkflowWithBaseCase1\" debug outputs as", ((string)(null)), table626, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow Base Convert coverting same variable multiple times")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowBaseConvertCovertingSameVariableMultipleTimes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow Base Convert coverting same variable multiple times", ((string[])(null)));
#line 3129
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3130
  testRunner.Given("I have a workflow \"WorkflowWithBaseConvertUsingSameVariable\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table627 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table627.AddRow(new string[] {
                        "[[test]]",
                        "data"});
#line 3131
  testRunner.And("\"WorkflowWithBaseConvertUsingSameVariable\" contains an Assign \"Assign1\" as", ((string)(null)), table627, "And ");
#line hidden
            TechTalk.SpecFlow.Table table628 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table628.AddRow(new string[] {
                        "[[test]]",
                        "Text",
                        "Base 64"});
            table628.AddRow(new string[] {
                        "[[test]]",
                        "Base 64",
                        "Text"});
#line 3134
  testRunner.And("\"WorkflowWithBaseConvertUsingSameVariable\" contains Base convert \"Base12\" as", ((string)(null)), table628, "And ");
#line 3138
  testRunner.When("\"WorkflowWithBaseConvertUsingSameVariable\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3139
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table629 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table629.AddRow(new string[] {
                        "1",
                        "[[test]] =",
                        "data"});
#line 3140
  testRunner.And("the \"Assign1\" in WorkFlow \"WorkflowWithBaseConvertUsingSameVariable\" debug inputs" +
                    " as", ((string)(null)), table629, "And ");
#line hidden
            TechTalk.SpecFlow.Table table630 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table630.AddRow(new string[] {
                        "1",
                        "[[test]] =  data"});
#line 3143
   testRunner.And("the \"Assign1\" in Workflow \"WorkflowWithBaseConvertUsingSameVariable\" debug output" +
                    "s as", ((string)(null)), table630, "And ");
#line hidden
            TechTalk.SpecFlow.Table table631 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table631.AddRow(new string[] {
                        "1",
                        "[[test]] = data",
                        "Text",
                        "Base 64"});
            table631.AddRow(new string[] {
                        "2",
                        "[[test]] = ZGF0YQ==",
                        "Base 64",
                        "Text"});
#line 3146
  testRunner.And("the \"Base12\" in WorkFlow \"WorkflowWithBaseConvertUsingSameVariable\" debug inputs " +
                    "as", ((string)(null)), table631, "And ");
#line hidden
            TechTalk.SpecFlow.Table table632 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table632.AddRow(new string[] {
                        "1",
                        "[[test]] = ZGF0YQ=="});
            table632.AddRow(new string[] {
                        "2",
                        "[[test]] = data"});
#line 3150
    testRunner.And("the \"Base12\" in Workflow \"WorkflowWithBaseConvertUsingSameVariable\" debug outputs" +
                    " as", ((string)(null)), table632, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow Assign and Find Record Index executing with incorrect format of Inputs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowAssignAndFindRecordIndexExecutingWithIncorrectFormatOfInputs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow Assign and Find Record Index executing with incorrect format of Inputs", ((string[])(null)));
#line 3155
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3156
      testRunner.Given("I have a workflow \"WFWithAssignandFindRecordindexs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table633 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table633.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "23"});
            table633.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "34"});
            table633.AddRow(new string[] {
                        "[[xr(1).a]]",
                        "10"});
#line 3157
   testRunner.And("\"WFWithAssignandFindRecordindex\" contains an Assign \"Record\" as", ((string)(null)), table633, "And ");
#line hidden
            TechTalk.SpecFlow.Table table634 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "In Field",
                        "#",
                        "Match Type",
                        "Match",
                        "Require All Matches To Be True",
                        "Require All Fields To Match"});
            table634.AddRow(new string[] {
                        "#",
                        "[[rec().a]][[xr().a]]",
                        "1",
                        "=",
                        "Warewolf",
                        "YES",
                        "NO"});
#line 3162
   testRunner.And("\"WFWithAssignandFindRecordindexs\" contains Find Record Index \"FindRecord0\" into r" +
                    "esult as \"[[a]][[b]]\"", ((string)(null)), table634, "And ");
#line 3165
   testRunner.When("\"WFWithAssignandFindRecordindexs\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3166
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow executing against the server", ((string[])(null)));
#line 3168
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3169
  testRunner.Given("I have a workflow \"WorkflowWithAssign\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table635 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table635.AddRow(new string[] {
                        "[[rec().a]]",
                        "yes"});
            table635.AddRow(new string[] {
                        "[[rec().a]]",
                        "no"});
#line 3170
  testRunner.And("\"WorkflowWithAssign\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table635, "And ");
#line 3174
   testRunner.When("\"WorkflowWithAssign\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3175
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 3176
   testRunner.And("the \"WorkflowWithAssign\" has a start and end duration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table636 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table636.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "yes"});
            table636.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "no"});
#line 3177
   testRunner.And("the \"Rec To Convert\" in WorkFlow \"WorkflowWithAssign\" debug inputs as", ((string)(null)), table636, "And ");
#line hidden
            TechTalk.SpecFlow.Table table637 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table637.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = yes"});
            table637.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = no"});
#line 3181
   testRunner.And("the \"Rec To Convert\" in Workflow \"WorkflowWithAssign\" debug outputs as", ((string)(null)), table637, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with AsyncLogging and ForEach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAsyncLoggingAndForEach()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with AsyncLogging and ForEach", ((string[])(null)));
#line 3186
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3187
     testRunner.Given("I have a workflow \"WFWithAsyncLoggingForEach\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 3188
     testRunner.And("\"WFWithAsyncLoggingForEach\" contains a Foreach \"ForEachTest\" as \"NumOfExecution\" " +
                    "executions \"2000\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table638 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table638.AddRow(new string[] {
                        "[[Warewolf]]",
                        "bob"});
#line 3189
  testRunner.And("\"ForEachTest\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table638, "And ");
#line 3192
  testRunner.When("\"WFWithAsyncLoggingForEach\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3193
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 3194
  testRunner.And("I set logging to \"Debug\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3195
  testRunner.When("\"WFWithAsyncLoggingForEach\" is executed \"first time\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3196
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 3197
  testRunner.And("I set logging to \"OFF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3198
    testRunner.When("\"WFWithAsyncLoggingForEach\" is executed \"second time\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3199
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 3200
  testRunner.And("the delta between \"first time\" and \"second time\" is less than \"2500\" milliseconds" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void DatabasePostgreSqlDatabaseServiceInputsAndOutputs(string workflowName, string serviceName, string nameVariable, string emailVariable, string errorOccured, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Database PostgreSql Database service inputs and outputs", exampleTags);
#line 3203
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3204
     testRunner.Given(string.Format("I have a workflow \"{0}\"", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table639 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table639.AddRow(new string[] {
                        "Prefix",
                        "s",
                        "Id",
                        string.Format("{0}", nameVariable)});
            table639.AddRow(new string[] {
                        "",
                        "",
                        "Name",
                        string.Format("{0}", emailVariable)});
#line 3205
  testRunner.And(string.Format("\"{0}\" contains a postgre tool using \"{1}\" with mappings as", workflowName, serviceName), ((string)(null)), table639, "And ");
#line 3209
      testRunner.When(string.Format("\"{0}\" is executed", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3210
     testRunner.Then(string.Format("the workflow execution has \"{0}\" error", errorOccured), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table640 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table640.AddRow(new string[] {
                        "[[countries(1).Id]] = 1"});
            table640.AddRow(new string[] {
                        "[[countries(2).Id]] = 3"});
            table640.AddRow(new string[] {
                        "[[countries(1).Name]] = United States"});
            table640.AddRow(new string[] {
                        "[[countries(2).Name]] = South Africa"});
#line 3211
  testRunner.And(string.Format("the \"{0}\" in Workflow \"{1}\" debug outputs as", serviceName, workflowName), ((string)(null)), table640, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Database PostgreSql Database service inputs and outputs: PostgreSqlGetCountries")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "PostgreSqlGetCountries")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:WorkflowName", "PostgreSqlGetCountries")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ServiceName", "get_countries")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:nameVariable", "[[countries(*).Id]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emailVariable", "[[countries(*).Name]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorOccured", "NO")]
        public virtual void DatabasePostgreSqlDatabaseServiceInputsAndOutputs_PostgreSqlGetCountries()
        {
            this.DatabasePostgreSqlDatabaseServiceInputsAndOutputs("PostgreSqlGetCountries", "get_countries", "[[countries(*).Id]]", "[[countries(*).Name]]", "NO", ((string[])(null)));
#line hidden
        }
        
        public virtual void DatabaseMySqlDBDatabaseServiceUsingIndexes(string workflowName, string serviceName, string nameVariable, string emailVariable, string errorOccured, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Database MySqlDB Database service using * indexes", exampleTags);
#line 3221
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3222
     testRunner.Given(string.Format("I have a workflow \"{0}\"", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table641 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table641.AddRow(new string[] {
                        "",
                        "",
                        "name",
                        string.Format("{0}", nameVariable)});
            table641.AddRow(new string[] {
                        "",
                        "",
                        "email",
                        string.Format("{0}", emailVariable)});
#line 3223
  testRunner.And(string.Format("\"{0}\" contains a mysql database service \"{1}\" with mappings as", workflowName, serviceName), ((string)(null)), table641, "And ");
#line 3227
      testRunner.When(string.Format("\"{0}\" is executed", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3228
     testRunner.Then(string.Format("the workflow execution has \"{0}\" error", errorOccured), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table642 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table642.AddRow(new string[] {
                        "[[rec(1).name]] = Monk"});
            table642.AddRow(new string[] {
                        "[[rec(1).email]] = dora@explorers.com"});
#line 3229
  testRunner.And(string.Format("the \"{0}\" in Workflow \"{1}\" debug outputs as", serviceName, workflowName), ((string)(null)), table642, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Database MySqlDB Database service using * indexes: TestMySqlWFWithMySqlStarIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TestMySqlWFWithMySqlStarIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:WorkflowName", "TestMySqlWFWithMySqlStarIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ServiceName", "MySqlEmail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:nameVariable", "[[rec(*).name]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emailVariable", "[[rec(*).email]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorOccured", "NO")]
        public virtual void DatabaseMySqlDBDatabaseServiceUsingIndexes_TestMySqlWFWithMySqlStarIndex()
        {
            this.DatabaseMySqlDBDatabaseServiceUsingIndexes("TestMySqlWFWithMySqlStarIndex", "MySqlEmail", "[[rec(*).name]]", "[[rec(*).email]]", "NO", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Database MySqlDB Database service using char in param name")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void DatabaseMySqlDBDatabaseServiceUsingCharInParamName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Database MySqlDB Database service using char in param name", ((string[])(null)));
#line 3237
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3238
     testRunner.Given("I have a workflow \"TestMySqlWFWithMySqlCharParamName\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table643 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table643.AddRow(new string[] {
                        "id",
                        "445",
                        "",
                        ""});
            table643.AddRow(new string[] {
                        "val",
                        "bart01",
                        "",
                        ""});
#line 3239
  testRunner.And("\"TestMySqlWFWithMySqlCharParamName\" contains a mysql database service \"procWithCh" +
                    "arNoOutput\" with mappings as", ((string)(null)), table643, "And ");
#line 3243
      testRunner.When("\"TestMySqlWFWithMySqlCharParamName\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3244
     testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void DatabaseMySqlDBDatabaseServiceUsingIntIndexes(string workflowName, string serviceName, string nameVariable, string emailVariable, string errorOccured, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Database MySqlDB Database service using int indexes", exampleTags);
#line 3247
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3248
     testRunner.Given(string.Format("I have a workflow \"{0}\"", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table644 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table644.AddRow(new string[] {
                        "",
                        "",
                        "name",
                        string.Format("{0}", nameVariable)});
            table644.AddRow(new string[] {
                        "",
                        "",
                        "email",
                        string.Format("{0}", emailVariable)});
#line 3249
  testRunner.And(string.Format("\"{0}\" contains a mysql database service \"{1}\" with mappings as", workflowName, serviceName), ((string)(null)), table644, "And ");
#line 3253
      testRunner.When(string.Format("\"{0}\" is executed", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3254
     testRunner.Then(string.Format("the workflow execution has \"{0}\" error", errorOccured), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table645 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table645.AddRow(new string[] {
                        "[[rec(1).name]] = Monk"});
            table645.AddRow(new string[] {
                        "[[rec(1).email]] = dora@explorers.com"});
#line 3255
  testRunner.And(string.Format("the \"{0}\" in Workflow \"{1}\" debug outputs is", serviceName, workflowName), ((string)(null)), table645, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Database MySqlDB Database service using int indexes: TestMySqlWFWithMySqlIntIndex" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TestMySqlWFWithMySqlIntIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:WorkflowName", "TestMySqlWFWithMySqlIntIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ServiceName", "MySqlEmail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:nameVariable", "[[rec(1).name]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emailVariable", "[[rec(1).email]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorOccured", "NO")]
        public virtual void DatabaseMySqlDBDatabaseServiceUsingIntIndexes_TestMySqlWFWithMySqlIntIndex()
        {
            this.DatabaseMySqlDBDatabaseServiceUsingIntIndexes("TestMySqlWFWithMySqlIntIndex", "MySqlEmail", "[[rec(1).name]]", "[[rec(1).email]]", "NO", ((string[])(null)));
#line hidden
        }
        
        public virtual void DatabaseMySqlDBDatabaseServiceLastIndexes(string workflowName, string serviceName, string nameVariable, string emailVariable, string errorOccured, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Database MySqlDB Database service last  indexes", exampleTags);
#line 3263
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3264
     testRunner.Given(string.Format("I have a workflow \"{0}\"", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table646 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table646.AddRow(new string[] {
                        "",
                        "",
                        "name",
                        string.Format("{0}", nameVariable)});
            table646.AddRow(new string[] {
                        "",
                        "",
                        "email",
                        string.Format("{0}", emailVariable)});
#line 3265
  testRunner.And(string.Format("\"{0}\" contains a mysql database service \"{1}\" with mappings as", workflowName, serviceName), ((string)(null)), table646, "And ");
#line 3269
      testRunner.When(string.Format("\"{0}\" is executed", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3270
     testRunner.Then(string.Format("the workflow execution has \"{0}\" error", errorOccured), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table647 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table647.AddRow(new string[] {
                        "[[rec(1).name]] = Monk"});
            table647.AddRow(new string[] {
                        "[[rec(1).email]] = dora@explorers.com"});
#line 3271
  testRunner.And(string.Format("the \"{0}\" in Workflow \"{1}\" debug outputs is", serviceName, workflowName), ((string)(null)), table647, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Database MySqlDB Database service last  indexes: TestMySqlWFWithMySqlLastIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TestMySqlWFWithMySqlLastIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:WorkflowName", "TestMySqlWFWithMySqlLastIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ServiceName", "MySqlEmail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:nameVariable", "[[rec().name]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emailVariable", "[[rec().email]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorOccured", "NO")]
        public virtual void DatabaseMySqlDBDatabaseServiceLastIndexes_TestMySqlWFWithMySqlLastIndex()
        {
            this.DatabaseMySqlDBDatabaseServiceLastIndexes("TestMySqlWFWithMySqlLastIndex", "MySqlEmail", "[[rec().name]]", "[[rec().email]]", "NO", ((string[])(null)));
#line hidden
        }
        
        public virtual void DatabaseMySqlDBDatabaseServiceScalarOutputs(string workflowName, string serviceName, string nameVariable, string emailVariable, string errorOccured, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Database MySqlDB Database service scalar outputs", exampleTags);
#line 3279
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3280
     testRunner.Given(string.Format("I have a workflow \"{0}\"", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table648 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table648.AddRow(new string[] {
                        "",
                        "",
                        "name",
                        string.Format("{0}", nameVariable)});
            table648.AddRow(new string[] {
                        "",
                        "",
                        "email",
                        string.Format("{0}", emailVariable)});
#line 3281
  testRunner.And(string.Format("\"{0}\" contains a mysql database service \"{1}\" with mappings as", workflowName, serviceName), ((string)(null)), table648, "And ");
#line 3285
      testRunner.When(string.Format("\"{0}\" is executed", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3286
     testRunner.Then(string.Format("the workflow execution has \"{0}\" error", errorOccured), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table649 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table649.AddRow(new string[] {
                        "[[name]] = Monk"});
            table649.AddRow(new string[] {
                        "[[email]] = dora@explorers.com"});
#line 3287
  testRunner.And(string.Format("the \"{0}\" in Workflow \"{1}\" debug outputs as", serviceName, workflowName), ((string)(null)), table649, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Database MySqlDB Database service scalar outputs: TestMySqlWFWithMySqlScalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TestMySqlWFWithMySqlScalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:WorkflowName", "TestMySqlWFWithMySqlScalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ServiceName", "MySqlEmail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:nameVariable", "[[name]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emailVariable", "[[email]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorOccured", "NO")]
        public virtual void DatabaseMySqlDBDatabaseServiceScalarOutputs_TestMySqlWFWithMySqlScalar()
        {
            this.DatabaseMySqlDBDatabaseServiceScalarOutputs("TestMySqlWFWithMySqlScalar", "MySqlEmail", "[[name]]", "[[email]]", "NO", ((string[])(null)));
#line hidden
        }
        
        public virtual void DatabaseMySqlDBDatabaseServiceErrorOutputs(string workflowName, string serviceName, string nameVariable, string emailVariable, string errorOccured, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Database MySqlDB Database service Error outputs", exampleTags);
#line 3295
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3296
     testRunner.Given(string.Format("I have a workflow \"{0}\"", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table650 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table650.AddRow(new string[] {
                        "",
                        "",
                        "name",
                        string.Format("{0}", nameVariable)});
            table650.AddRow(new string[] {
                        "",
                        "",
                        "email",
                        string.Format("{0}", emailVariable)});
#line 3297
  testRunner.And(string.Format("\"{0}\" contains a mysql database service \"{1}\" with mappings as", workflowName, serviceName), ((string)(null)), table650, "And ");
#line 3301
      testRunner.When(string.Format("\"{0}\" is executed", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3302
     testRunner.Then(string.Format("the workflow execution has \"{0}\" error", errorOccured), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Database MySqlDB Database service Error outputs: TestMySqlWFWithMySqlMailsInvalid" +
            "Index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TestMySqlWFWithMySqlMailsInvalidIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:WorkflowName", "TestMySqlWFWithMySqlMailsInvalidIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ServiceName", "MySqlEmail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:nameVariable", "[[rec(-1).name]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emailVariable", "[[email]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorOccured", "YES")]
        public virtual void DatabaseMySqlDBDatabaseServiceErrorOutputs_TestMySqlWFWithMySqlMailsInvalidIndex()
        {
            this.DatabaseMySqlDBDatabaseServiceErrorOutputs("TestMySqlWFWithMySqlMailsInvalidIndex", "MySqlEmail", "[[rec(-1).name]]", "[[email]]", "YES", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Database MySqlDB Database service Error outputs: TestMySqlWFWithMySqlMailsInvalid" +
            "Var")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TestMySqlWFWithMySqlMailsInvalidVar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:WorkflowName", "TestMySqlWFWithMySqlMailsInvalidVar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ServiceName", "MySqlEmail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:nameVariable", "[[123]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emailVariable", "[[email]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorOccured", "YES")]
        public virtual void DatabaseMySqlDBDatabaseServiceErrorOutputs_TestMySqlWFWithMySqlMailsInvalidVar()
        {
            this.DatabaseMySqlDBDatabaseServiceErrorOutputs("TestMySqlWFWithMySqlMailsInvalidVar", "MySqlEmail", "[[123]]", "[[email]]", "YES", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Database MySqlDB Database service Error outputs: TestMySqlWFWithMySqlMailsInvalid" +
            "VarWithIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TestMySqlWFWithMySqlMailsInvalidVarWithIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:WorkflowName", "TestMySqlWFWithMySqlMailsInvalidVarWithIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ServiceName", "MySqlEmail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:nameVariable", "[[rec(-1).name.bob]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emailVariable", "[[email]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorOccured", "YES")]
        public virtual void DatabaseMySqlDBDatabaseServiceErrorOutputs_TestMySqlWFWithMySqlMailsInvalidVarWithIndex()
        {
            this.DatabaseMySqlDBDatabaseServiceErrorOutputs("TestMySqlWFWithMySqlMailsInvalidVarWithIndex", "MySqlEmail", "[[rec(-1).name.bob]]", "[[email]]", "YES", ((string[])(null)));
#line hidden
        }
        
        public virtual void DatabaseMySqlDBDatabaseServiceInputsAndOutputs(string workflowName, string serviceName, string nameVariable, string emailVariable, string errorOccured, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Database MySqlDB Database service inputs and outputs", exampleTags);
#line 3309
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3310
     testRunner.Given(string.Format("I have a workflow \"{0}\"", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table651 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table651.AddRow(new string[] {
                        "name",
                        "afg%",
                        "countryid",
                        string.Format("{0}", nameVariable)});
            table651.AddRow(new string[] {
                        "",
                        "",
                        "description",
                        string.Format("{0}", emailVariable)});
#line 3311
  testRunner.And(string.Format("\"{0}\" contains a mysql database service \"{1}\" with mappings as", workflowName, serviceName), ((string)(null)), table651, "And ");
#line 3315
      testRunner.When(string.Format("\"{0}\" is executed", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3316
     testRunner.Then(string.Format("the workflow execution has \"{0}\" error", errorOccured), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table652 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table652.AddRow(new string[] {
                        "[[countries(1).id]] = 1"});
            table652.AddRow(new string[] {
                        "[[countries(2).id]] = 1"});
            table652.AddRow(new string[] {
                        "[[countries(1).description]] = Afghanistan"});
            table652.AddRow(new string[] {
                        "[[countries(2).description]] = Afghanistan"});
#line 3317
  testRunner.And(string.Format("the \"{0}\" in Workflow \"{1}\" debug outputs as", serviceName, workflowName), ((string)(null)), table652, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Database MySqlDB Database service inputs and outputs: TestMySqlWFWithMySqlCountri" +
            "es")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TestMySqlWFWithMySqlCountries")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:WorkflowName", "TestMySqlWFWithMySqlCountries")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ServiceName", "Pr_CitiesGetCountries")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:nameVariable", "[[countries(*).id]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emailVariable", "[[countries(*).description]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorOccured", "NO")]
        public virtual void DatabaseMySqlDBDatabaseServiceInputsAndOutputs_TestMySqlWFWithMySqlCountries()
        {
            this.DatabaseMySqlDBDatabaseServiceInputsAndOutputs("TestMySqlWFWithMySqlCountries", "Pr_CitiesGetCountries", "[[countries(*).id]]", "[[countries(*).description]]", "NO", ((string[])(null)));
#line hidden
        }
        
        public virtual void DatabaseSqlDBDatabaseServiceInputsAndOutputs(string workflowName, string serviceName, string nameVariable, string emailVariable, string errorOccured, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Database SqlDB Database service inputs and outputs", exampleTags);
#line 3327
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3328
     testRunner.Given(string.Format("I have a workflow \"{0}\"", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table653 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table653.AddRow(new string[] {
                        "Prefix",
                        "afg",
                        "countryid",
                        string.Format("{0}", nameVariable)});
            table653.AddRow(new string[] {
                        "",
                        "",
                        "description",
                        string.Format("{0}", emailVariable)});
#line 3329
  testRunner.And(string.Format("\"{0}\" contains a sqlserver database service \"{1}\" with mappings as", workflowName, serviceName), ((string)(null)), table653, "And ");
#line 3333
      testRunner.When(string.Format("\"{0}\" is executed", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3334
     testRunner.Then(string.Format("the workflow execution has \"{0}\" error", errorOccured), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table654 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table654.AddRow(new string[] {
                        "[[countries(1).id]] = 1"});
            table654.AddRow(new string[] {
                        "[[countries(1).description]] = Afghanistan"});
#line 3335
  testRunner.And(string.Format("the \"{0}\" in Workflow \"{1}\" debug outputs as", serviceName, workflowName), ((string)(null)), table654, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Database SqlDB Database service inputs and outputs: TestSqlWFWithSqlServerCountri" +
            "es")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TestSqlWFWithSqlServerCountries")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:WorkflowName", "TestSqlWFWithSqlServerCountries")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ServiceName", "dbo.Pr_CitiesGetCountries")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:nameVariable", "[[countries(*).id]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emailVariable", "[[countries(*).description]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorOccured", "NO")]
        public virtual void DatabaseSqlDBDatabaseServiceInputsAndOutputs_TestSqlWFWithSqlServerCountries()
        {
            this.DatabaseSqlDBDatabaseServiceInputsAndOutputs("TestSqlWFWithSqlServerCountries", "dbo.Pr_CitiesGetCountries", "[[countries(*).id]]", "[[countries(*).description]]", "NO", ((string[])(null)));
#line hidden
        }
        
        public virtual void DatabaseSqlDBServiceDBErrors(string workflowName, string serviceName, string nameVariable, string emailVariable, string errorOccured, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Database SqlDB  service DBErrors", exampleTags);
#line 3343
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3344
     testRunner.Given(string.Format("I have a workflow \"{0}\"", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table655 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 3345
  testRunner.And(string.Format("\"{0}\" contains a sqlserver database service \"{1}\" with mappings as", workflowName, serviceName), ((string)(null)), table655, "And ");
#line 3347
      testRunner.When(string.Format("\"{0}\" is executed", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3348
     testRunner.Then(string.Format("the workflow execution has \"{0}\" error", errorOccured), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Database SqlDB  service DBErrors: TestWFWithDBSqlServerErrorProcSql")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TestWFWithDBSqlServerErrorProcSql")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:WorkflowName", "TestWFWithDBSqlServerErrorProcSql")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ServiceName", "dbo.willalwayserror")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:nameVariable", "[[name]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emailVariable", "[[email]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorOccured", "YES")]
        public virtual void DatabaseSqlDBServiceDBErrors_TestWFWithDBSqlServerErrorProcSql()
        {
            this.DatabaseSqlDBServiceDBErrors("TestWFWithDBSqlServerErrorProcSql", "dbo.willalwayserror", "[[name]]", "[[email]]", "YES", ((string[])(null)));
#line hidden
        }
        
        public virtual void DatabaseSqlDBServiceUsingIntIndexes(string workflowName, string serviceName, string nameVariable, string emailVariable, string errorOccured, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Database SqlDB  service using int indexes", exampleTags);
#line 3353
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3354
     testRunner.Given(string.Format("I have a workflow \"{0}\"", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table656 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table656.AddRow(new string[] {
                        "",
                        "",
                        "name",
                        string.Format("{0}", nameVariable)});
            table656.AddRow(new string[] {
                        "",
                        "",
                        "email",
                        string.Format("{0}", emailVariable)});
#line 3355
  testRunner.And(string.Format("\"{0}\" contains a sqlserver database service \"{1}\" with mappings as", workflowName, serviceName), ((string)(null)), table656, "And ");
#line 3359
      testRunner.When(string.Format("\"{0}\" is executed", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3360
     testRunner.Then(string.Format("the workflow execution has \"{0}\" error", errorOccured), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table657 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table657.AddRow(new string[] {
                        "[[rec(1).name]] = dora"});
            table657.AddRow(new string[] {
                        "[[rec(1).email]] = dora@explorers.co.za"});
#line 3361
  testRunner.And(string.Format("the \"{0}\" in Workflow \"{1}\" debug outputs as", serviceName, workflowName), ((string)(null)), table657, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Database SqlDB  service using int indexes: TestWFWithDBSqlServerIntIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TestWFWithDBSqlServerIntIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:WorkflowName", "TestWFWithDBSqlServerIntIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ServiceName", "dbo.SQLEmail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:nameVariable", "[[rec(1).name]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emailVariable", "[[rec(1).email]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorOccured", "NO")]
        public virtual void DatabaseSqlDBServiceUsingIntIndexes_TestWFWithDBSqlServerIntIndex()
        {
            this.DatabaseSqlDBServiceUsingIntIndexes("TestWFWithDBSqlServerIntIndex", "dbo.SQLEmail", "[[rec(1).name]]", "[[rec(1).email]]", "NO", ((string[])(null)));
#line hidden
        }
        
        public virtual void DatabaseSqlDBServiceUsingLastIndexes(string workflowName, string serviceName, string nameVariable, string emailVariable, string errorOccured, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Database SqlDB  service using last indexes", exampleTags);
#line 3369
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3370
     testRunner.Given(string.Format("I have a workflow \"{0}\"", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table658 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table658.AddRow(new string[] {
                        "",
                        "",
                        "name",
                        string.Format("{0}", nameVariable)});
            table658.AddRow(new string[] {
                        "",
                        "",
                        "email",
                        string.Format("{0}", emailVariable)});
#line 3371
  testRunner.And(string.Format("\"{0}\" contains a sqlserver database service \"{1}\" with mappings as", workflowName, serviceName), ((string)(null)), table658, "And ");
#line 3375
      testRunner.When(string.Format("\"{0}\" is executed", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3376
     testRunner.Then(string.Format("the workflow execution has \"{0}\" error", errorOccured), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table659 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table659.AddRow(new string[] {
                        "[[rec(1).name]] = dora"});
            table659.AddRow(new string[] {
                        "[[rec(1).email]] = dora@explorers.co.za"});
#line 3377
  testRunner.And(string.Format("the \"{0}\" in Workflow \"{1}\" debug outputs as", serviceName, workflowName), ((string)(null)), table659, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Database SqlDB  service using last indexes: TestWFWithDBSqlServerLastIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TestWFWithDBSqlServerLastIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:WorkflowName", "TestWFWithDBSqlServerLastIndex")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ServiceName", "dbo.SQLEmail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:nameVariable", "[[rec().name]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emailVariable", "[[rec().email]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorOccured", "NO")]
        public virtual void DatabaseSqlDBServiceUsingLastIndexes_TestWFWithDBSqlServerLastIndex()
        {
            this.DatabaseSqlDBServiceUsingLastIndexes("TestWFWithDBSqlServerLastIndex", "dbo.SQLEmail", "[[rec().name]]", "[[rec().email]]", "NO", ((string[])(null)));
#line hidden
        }
        
        public virtual void DatabaseSqlDBServiceUsingScalarOutputs(string workflowName, string serviceName, string nameVariable, string emailVariable, string errorOccured, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Database SqlDB  service using scalar outputs", exampleTags);
#line 3385
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3386
     testRunner.Given(string.Format("I have a workflow \"{0}\"", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table660 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table660.AddRow(new string[] {
                        "",
                        "",
                        "name",
                        string.Format("{0}", nameVariable)});
            table660.AddRow(new string[] {
                        "",
                        "",
                        "email",
                        string.Format("{0}", emailVariable)});
#line 3387
  testRunner.And(string.Format("\"{0}\" contains a sqlserver database service \"{1}\" with mappings as", workflowName, serviceName), ((string)(null)), table660, "And ");
#line 3391
      testRunner.When(string.Format("\"{0}\" is executed", workflowName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3392
     testRunner.Then(string.Format("the workflow execution has \"{0}\" error", errorOccured), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table661 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table661.AddRow(new string[] {
                        "[[name]] = dora"});
            table661.AddRow(new string[] {
                        "[[email]] = dora@explorers.co.za"});
#line 3393
  testRunner.And(string.Format("the \"{0}\" in Workflow \"{1}\" debug outputs as", serviceName, workflowName), ((string)(null)), table661, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Database SqlDB  service using scalar outputs: TestWFWithDBSqlServerScalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TestWFWithDBSqlServerScalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:WorkflowName", "TestWFWithDBSqlServerScalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ServiceName", "dbo.SQLEmail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:nameVariable", "[[name]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:emailVariable", "[[email]]")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorOccured", "NO")]
        public virtual void DatabaseSqlDBServiceUsingScalarOutputs_TestWFWithDBSqlServerScalar()
        {
            this.DatabaseSqlDBServiceUsingScalarOutputs("TestWFWithDBSqlServerScalar", "dbo.SQLEmail", "[[name]]", "[[email]]", "NO", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing unsaved workflow should execute by ID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingUnsavedWorkflowShouldExecuteByID()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing unsaved workflow should execute by ID", ((string[])(null)));
#line 3401
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3402
 testRunner.Given("I create a new unsaved workflow with name \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table662 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table662.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "yes"});
            table662.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "no"});
#line 3403
 testRunner.And("\"Unsaved 1\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table662, "And ");
#line 3407
   testRunner.When("\'1\' unsaved WF \"Unsaved 1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3408
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table663 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table663.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = yes"});
            table663.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = no"});
#line 3409
   testRunner.And("the \"Rec To Convert\" in Workflow \"Unsaved 1\" debug outputs as", ((string)(null)), table663, "And ");
#line 3413
   testRunner.Then("I create a new unsaved workflow with name \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table664 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table664.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "1"});
            table664.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "2"});
#line 3414
   testRunner.And("\"Unsaved 1\" contains an Assign \"Assign 1\" as", ((string)(null)), table664, "And ");
#line 3418
   testRunner.When("\'2\' unsaved WF \"Unsaved 1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table665 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table665.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 1"});
            table665.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 2"});
#line 3419
   testRunner.And("the \"Assign 1\" in Workflow \"Unsaved 1\" debug outputs as", ((string)(null)), table665, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("WF with RabbitMq Consume timeout 5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WFWithRabbitMqConsumeTimeout5()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WF with RabbitMq Consume timeout 5", ((string[])(null)));
#line 3424
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3425
 testRunner.Given("I have a workflow \"RabbitMqConsume5mintimeout\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 3426
 testRunner.And("\"RabbitMqConsume5mintimeout\" contains RabbitMQPublish and Queue1 \"DsfPublishRabbi" +
                    "tMQActivity\" into \"[[result1]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3427
 testRunner.And("\"RabbitMqConsume5mintimeout\" contains RabbitMQConsume \"DsfConsumeRabbitMQActivity" +
                    "\" with timeout 5 seconds into \"[[result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3428
 testRunner.When("\"RabbitMqConsume5mintimeout\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3429
    testRunner.Then("the workflow execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 3430
 testRunner.And("the \"RabbitMqConsume5mintimeout\" has a start and end duration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3431
 testRunner.And("\"RabbitMqConsume5mintimeout\" Duration is greater or equal to 5 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("WF with RabbitMq Consume with no timeout")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WFWithRabbitMqConsumeWithNoTimeout()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WF with RabbitMq Consume with no timeout", ((string[])(null)));
#line 3433
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3434
 testRunner.Given("I have a workflow \"RabbitMqConsumeNotimeout\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 3435
 testRunner.And("\"RabbitMqConsumeNotimeout\" contains RabbitMQConsume \"DsfConsumeRabbitMQActivity\" " +
                    "with timeout -1 seconds into \"[[result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3436
 testRunner.When("\"RabbitMqConsumeNotimeout\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3437
    testRunner.Then("the workflow execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 3438
 testRunner.And("the \"RabbitMqConsumeNotimeout\" has a start and end duration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3439
 testRunner.And("\"RabbitMqConsumeNotimeout\" Duration is less or equal to 2 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
