/*
*  Warewolf - Once bitten, there's no going back
*  Copyright 2018 by Warewolf Ltd <alpha@warewolf.io>
*  Licensed under GNU Affero General Public License 3.0 or later.
*  Some rights reserved.
*  Visit our website for more information <http://warewolf.io/>
*  AUTHORS <http://warewolf.io/authors.php> , CONTRIBUTORS <http://warewolf.io/contributors.php>
*  @license GNU Affero General Public License <http://www.gnu.org/licenses/agpl-3.0.html>
*/
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Warewolf.Resource.Errors;

namespace Warewolf.Resource.Tests
{
    [TestClass]
    public class ErrorResourceTests
    {
        [TestMethod]
        [Owner("Candice Daniel")]
        [TestCategory(nameof(ErrorResource))]
        public void ErrorResource_Exceptions()
        {
            Assert.AreEqual("The following arguments are not allowed to be null: {0}", ErrorResource.ArgumentsNotAllowedToBeNull);
            Assert.AreEqual("Compilation Error Creating Assembly", ErrorResource.AssemblyCreationError);
            Assert.AreEqual("Attachments is not in the valid format: {0}", ErrorResource.AttachmentInvalidFormat);
            Assert.AreEqual("A \\'\\\\\\' character must be followed by a \\' or preceded by a \\\\.", ErrorResource.BackSlashFormatError);
            Assert.AreEqual("Bad format for SFTP. Path {0}. Please correct path.", ErrorResource.BadFormatForSFTP);
            Assert.AreEqual("Bad Resource. Cannot determine its type.", ErrorResource.BadResource);
            Assert.AreEqual("'FromExpression' - Result - Invalid expression: opening and closing brackets don't match", ErrorResource.BaseConvertInputInvalidExpressionErrorTest);
            Assert.AreEqual("BCC address is not in the valid format: {0}", ErrorResource.BCCAddressInvalidFormat);
            Assert.AreEqual("Blank result variable", ErrorResource.BlankResultVariable);
            Assert.AreEqual("The 'Using' value cannot be blank.", ErrorResource.BlankUSINGValue);
            Assert.AreEqual("Body must have Member", ErrorResource.BodyMustHaveMember);
            Assert.AreEqual("Base Conversion Broker was expecting [{0}] but the data was not in this format", ErrorResource.BrokerConversionInvalid);
            Assert.AreEqual("Calculation Manager is currently null", ErrorResource.CalculationManagerIsNull);
            Assert.AreEqual("Could not parse input datetime with given input format (if you left the input format blank then even after trying default datetime formats from other cultures)", ErrorResource.CannorParseInputDateTimeWithGivenFormat);
            Assert.AreEqual("{0} cannot be empty", ErrorResource.CanNotBeEmpty);
            Assert.AreEqual("Cannot be null", ErrorResource.CannotBeNull);
            Assert.AreEqual("Cannot be a variable", ErrorResource.CannotBeVariable);
            Assert.AreEqual("Cannot specify a Recordset as part of a comma separated list of expressions", ErrorResource.CannotCommaSeperateRecordset);
            Assert.AreEqual("Can't delete a file if no directory is passed.", ErrorResource.CannotDeleteFileWithoughtDirectory);
            Assert.AreEqual("Can't delete a file if no filename is passed.", ErrorResource.CannotDeleteFileWithoutFilename);
            Assert.AreEqual("You may not delete the root path", ErrorResource.CannotDeleteRootPath);
            Assert.AreEqual("Not allowed to delete system files/directories. {0}", ErrorResource.CannotDeleteSystemFiles);
            Assert.AreEqual("Cannot do switch on null type argument if no default implementation provided", ErrorResource.CannotDoSwitchOnNullType);
            Assert.AreEqual("Cannot execute CMD from tool.", ErrorResource.CannotExecuteCMDFromTool);
            Assert.AreEqual("Cannot execute explorer from tool.", ErrorResource.CannotExecuteExplorerFromTool);
            Assert.AreEqual("Cannot find group", ErrorResource.CannotFindGroup);
            Assert.AreEqual("Cannot have duplicate fields to search", ErrorResource.CannotHaveDuplicateFields);
            Assert.AreEqual("Cannot have index's for recordsets in this field", ErrorResource.CannotHaveIndexsForRecordsets);
            Assert.AreEqual("Cannot have any scalars in this field", ErrorResource.CannotHaveScalars);
            Assert.AreEqual("Fatal Error : Cannot locate Root DataList for resumption!", ErrorResource.CannotLocateRootDataList);
            Assert.AreEqual("Cannot remove null List of functions", ErrorResource.CannotRemoveNullListOfFunctions);
            Assert.AreEqual("Cannot Save a Null list of functions", ErrorResource.CannotSaveNullListOfFunctions);
            Assert.AreEqual("Cannot update a workspace item from another workspace", ErrorResource.CannotUpdateAWorkspaceItemFromAnotherWorkspace);
            Assert.AreEqual("Can only execute workflows from web browser", ErrorResource.CanOnlyExecuteWorkflowsFromWebBrowser);
            Assert.AreEqual("'StringToConvert' - Result - Invalid expression: opening and closing brackets don't match", ErrorResource.CaseConvertInputInvalidExpressionErrorTest);
            Assert.AreEqual("CC address is not in the valid format: {0}", ErrorResource.CCAddressInvalidFormat);
            Assert.AreEqual("CharEnumerator is not supported for this operation type!", ErrorResource.CharEnumeratorNotSupported);
            Assert.AreEqual("The column {0} does not allow NULL. Please check your mappings to ensure you have mapped data into it.", ErrorResource.ColumnDoesNotAlloNull);
            Assert.AreEqual("The column {0} is an IDENTITY and you have the Keep Identity option disabled. Either enable it or remove the mapping.", ErrorResource.ColumnSetAsIdentityKeepIdentityIsFalse);
            Assert.AreEqual("The column {0} is an IDENTITY and you have the Keep Identity option enabled. Either disable this option or map data.", ErrorResource.ColumnSetAsIdentityKeepIdentityIsTrue);
            Assert.AreEqual("Result - Invalid expression: opening and closing brackets don't match", ErrorResource.CommandLineInvalidExpressionErrorTest);
            Assert.AreEqual("Connection timed out.", ErrorResource.ConnectionTimedOut);
            Assert.AreEqual("'Name' contains invalid characters", ErrorResource.ContainsInvalidCharecters);
            Assert.AreEqual("'Name' contains leading or trailing whitespace characters.", ErrorResource.ContainsLeadingOrTrailingWhitespace);
            Assert.AreEqual("Convert option does not exist", ErrorResource.ConvertOptionDoesNotExist);
            Assert.AreEqual("CopyTo() failed:  supplied array was too small", ErrorResource.CopyToFailedArrayTooSmall);
            Assert.AreEqual("Could not delete {0}. Please check the path exists.", ErrorResource.CouldNotDelete);
            Assert.AreEqual("Could not evaluate decision data - No decision function found for [{0}]", ErrorResource.CouldNotEvaluateDecisionData);
            Assert.AreEqual("Could not locate Assembly [{0}]", ErrorResource.CouldNotLocateAssembly);
            Assert.AreEqual("Could not locate management service [{0}]", ErrorResource.CouldNotLocateManagementService);
            Assert.AreEqual("Could not locate service with ID [{0}]", ErrorResource.CouldNotLocateService);
            Assert.AreEqual("Could not retrieve list of strings from expression {0}", ErrorResource.CouldNotRetrieveStringsFromExpression);
            Assert.AreEqual("Couldn't create a mapper for '{0}'.", ErrorResource.CouldntCreateMapper);
            Assert.AreEqual("Couldn't create a navigator for the path '\", path.ToString(), \"", ErrorResource.CouldntCreateNavigator);
            Assert.AreEqual("Password Cannot be null", ErrorResource.CredentialsPasswordNotNullErrorTest);
            Assert.AreEqual("Username - Result - Invalid expression: opening and closing brackets don't match", ErrorResource.CredentialsUsernameInvalidExpressionErrorTest);
            Assert.AreEqual("Username Cannot be null", ErrorResource.CredentialsUsernameNotNullErrorTest);
            Assert.AreEqual("Invalid characters have been entered in the CSV Numbers", ErrorResource.CSVInvalidCharecters);
            Assert.AreEqual("Could not populate decision model - DataList Errors!", ErrorResource.DataListErrors);
            Assert.AreEqual("'Input' - Result - Invalid expression: opening and closing brackets don't match", ErrorResource.DataMergeInvalidExpressionErrorTest);
            Assert.AreEqual("'Using' Cannot be null", ErrorResource.DataMergeUsingNullErrorTest);
            Assert.AreEqual("DataSource cannot be empty", ErrorResource.DataSourceEmpty);
            Assert.AreEqual("'Results' - Result - Invalid expression: opening and closing brackets don't match", ErrorResource.DataSplitInvalidExpressionErrorTest);
            Assert.AreEqual("'String to Split' Cannot be null", ErrorResource.DataSplitStringToSplitErrorTest);
            Assert.AreEqual("'Using' must be a real number", ErrorResource.DataSplitUsingNullErrorTest);
            Assert.AreEqual("Data of type '{0}' expected, data of type '{1}' received.", ErrorResource.DataTypeMismatch);
            Assert.AreEqual("Decimals to show is not valid", ErrorResource.DecimalsNotValid);
            Assert.AreEqual("'DisplayText' Cannot be null", ErrorResource.DecisionDisplayTextNotNullErrorTest);
            Assert.AreEqual("'FalseArmText' Cannot be null", ErrorResource.DecisionFalseArmTextNotNullErrorTest);
            Assert.AreEqual("'TrueArmText' Cannot be null", ErrorResource.DecisionTrueArmTextNotNullErrorTest);
            Assert.AreEqual("Dependency information is malformed", ErrorResource.DependencyInormationMalformed);
            Assert.AreEqual("Dependency information could not be retrieved", ErrorResource.DependencyMissing);
            Assert.AreEqual("Destination directory cannot be a child of the source directory", ErrorResource.DestinationDirectoryCannotBeAChild);
            Assert.AreEqual("Destination directory already exists and overwrite is set to false", ErrorResource.DestinationDirectoryExist);
            Assert.AreEqual("Destination file already exists and overwrite is set to false", ErrorResource.DestinationFileAlreadyExists);
            Assert.AreEqual("Destination must be a directory", ErrorResource.DestinationMustBeADirectory);
            Assert.AreEqual("Directory -  {0} does not exist in your variable list", ErrorResource.DirectoryDoesNotExist);
            Assert.AreEqual("Directory is required and not provided", ErrorResource.DirectoryIsRequired);
            Assert.AreEqual("Directory not found {0}", ErrorResource.DirectoryNotFound);
            Assert.AreEqual("Domain or Username or Password is missing", ErrorResource.DomainOrUsernameOrPasswordMissing);
            Assert.AreEqual("The caller does not have the required permissions", ErrorResource.DropBoxCallerHasNoPermission);
            Assert.AreEqual("Cannot locate the file/s specified. Please confirm that the correct file location has been entered.", ErrorResource.DropBoxCannotLocateSpecifiedFiles);
            Assert.AreEqual("Please confirm that the correct file destination has been entered", ErrorResource.DropBoxConfirmCorrectFileDestination);
            Assert.AreEqual("Please confirm that the correct file location has been entered", ErrorResource.DropBoxConfirmCorrectFileLocation);
            Assert.AreEqual("Please specify a correct Dropbox file name", ErrorResource.DropboxCorrectFileName);
            Assert.AreEqual("Destination File already exists and overwrite is set to false", ErrorResource.DropBoxDestinationFileAlreadyExist);
            Assert.AreEqual("Please specify the path of file in Dropbox", ErrorResource.DropBoxFilePathMissing);
            Assert.AreEqual("Path contains a colon (\\\":\\\") that is not part of a volume identifier (for example, \\\"c:\\\")", ErrorResource.DropBoxPathContainsColon);
            Assert.AreEqual("The specified path, file name, or both exceed the system-defined maximum length", ErrorResource.DropBoxSpecifiedPathExceedMaxLength);
            Assert.AreEqual("'Attachments' - Result - Invalid expression: opening and closing brackets don't match", ErrorResource.EmailAttachmentsInvalidExpressionErrorTest);
            Assert.AreEqual("'Bcc' - Result - Invalid expression: opening and closing brackets don't match", ErrorResource.EmailBccInvalidExpressionErrorTest);
            Assert.AreEqual("'Cc' - Result - Invalid expression: opening and closing brackets don't match", ErrorResource.EmailCcInvalidExpressionErrorTest);
            Assert.AreEqual("'From Account' - Result - Invalid expression: opening and closing brackets don't match", ErrorResource.EmailFromAccountInvalidExpressionErrorTest);
            Assert.AreEqual("'Password' Cannot be null", ErrorResource.EmailPasswordNotNullErrorTest);
            Assert.AreEqual("'Email Source' Cannot be null", ErrorResource.EmailSourceNotNullErrorTest);
            Assert.AreEqual("'To' - Result - Invalid expression: opening and closing brackets don't match", ErrorResource.EmailToInvalidExpressionErrorTest);
            Assert.AreEqual("Empty Logging Settings passed.", ErrorResource.EmptyLoggingSettingsPassed);
            Assert.AreEqual("Empty script to execute", ErrorResource.EmptyScript);
            Assert.AreEqual("Empty Security Settings passed.", ErrorResource.EmptySecuritySettingsPassed);
            Assert.AreEqual("Empty values passed.", ErrorResource.EmptyValuesPassed);
            Assert.AreEqual("Please ensure that your server is still running and your network connection is working.", ErrorResource.EnsureConnectionToServerWorking);
            Assert.AreEqual("Please ensure that the {0} is an integer value.", ErrorResource.EnsureValueIsInteger);
            Assert.AreEqual("The enumerator has not been started.", ErrorResource.EnumeratorNotStarted);
            Assert.AreEqual("The enumerator has reached the end of the collection.", ErrorResource.EnumeratorReachedTheEnd);
            Assert.AreEqual("Error building settings graph from '{0}'.", ErrorResource.ErrorBuildingSettingsGraph);
            Assert.AreEqual("Error casting base Object to {0}", ErrorResource.ErrorCastingBaseObject);
            Assert.AreEqual("Error connecting to server. Please check your network connection.", ErrorResource.ErrorConnectingToServer);
            Assert.AreEqual("Error connecting to SFTP location {0}.", ErrorResource.ErrorConnectingToSFTP);
            Assert.AreEqual("The following error occurred while executing the cancel callback '{0}'.", ErrorResource.ErrorDuringCancelCallback);
            Assert.AreEqual("The following error occurred while executing the save callback '{0}'.", ErrorResource.ErrorDuringSaveCallback);
            Assert.AreEqual("Error enumerating directory.", ErrorResource.ErrorEnumeratingDirectory);
            Assert.AreEqual("Error getting resource definition for: {0}", ErrorResource.ErrorGettingResourceDefinition);
            Assert.AreEqual("Error getting resources", ErrorResource.ErrorGettingResources);
            Assert.AreEqual("Error In Dev2IndexFinder", ErrorResource.ErrorInDev2IndexFinder);
            Assert.AreEqual("Error In Dev2MergeOperations", ErrorResource.ErrorInDev2MergeOperations);
            Assert.AreEqual("Error loading resource with ID:{0}\"", ErrorResource.ErrorLoadingResource);
            Assert.AreEqual("Error loading types.", ErrorResource.ErrorLoadingTypes);
            Assert.AreEqual("Error parsing '{0}' input.", ErrorResource.ErrorParsingInput);
            Assert.AreEqual("Error reading settings configuration :", ErrorResource.ErrorReadingSettingsConfiguration);
            Assert.AreEqual("Error retrieving DBSource for resource ID:{0} and Name:{1}", ErrorResource.ErrorRetrievingDBSourceForResource);
            Assert.AreEqual("Error retrieving shape from service output.", ErrorResource.ErrorRetrievingShapeFromServiceOutput);
            Assert.AreEqual("An error occurred while formatting a number, an invalid value of '{0}' was returned from the rounding function.", ErrorResource.ErrorWhileFormattingANumber);
            Assert.AreEqual("Error writing logging configuration.", ErrorResource.ErrorWritingLoggingConfiguration);
            Assert.AreEqual("Error writing settings.", ErrorResource.ErrorWritingSettings);
            Assert.AreEqual("Error writing settings configuration.", ErrorResource.ErrorWritingSettingsConfiguration);
            Assert.AreEqual("Generic parameter T must be an enumeration type.", ErrorResource.ExpectedEnumerationTypeParameter);
            Assert.AreEqual("Value must be a lambda expression", ErrorResource.ExpectedLambdaExpresion);
            Assert.AreEqual("Expression cannot be null", ErrorResource.ExpressionCannotBeNull);
            Assert.AreEqual("Problem with input: expressions must be comma separated", ErrorResource.ExpressionMustBeCommaSeperated);
            Assert.AreEqual("Failed to authenticate with user [ {0} ] for resource [ {1} ] ", ErrorResource.FailedToAuthenticateUser);
            Assert.AreEqual("Failed to build future receipt for [{0} ] Value [ {1} ]", ErrorResource.FailedToBuildFutureReceipt);
            Assert.AreEqual("Failed to connect with the following connection string: '{0}'", ErrorResource.FailedToConnectWithConnectionString);
            Assert.AreEqual("Failed to delete child items", ErrorResource.FailedToDeleteChildItems);
            Assert.AreEqual("Failed to fetch resource list as JSON model", ErrorResource.FailedToFetchResoureListAsJSONModel);
            Assert.AreEqual("Failed to Find Resource", ErrorResource.FailedToFindResource);
            Assert.AreEqual("Failed to load management service [{0}]", ErrorResource.FailedToLoadManagementService);
            Assert.AreEqual("Failed to Rename Resource", ErrorResource.FailedToRenameResource);
            Assert.AreEqual("Label - Result - Invalid expression: opening and closing brackets don't match", ErrorResource.FileActivityLabelInvalidExpressionErrorTest);
            Assert.AreEqual("Label Cannot be null", ErrorResource.FileActivityLabelNotNullErrorTest);
            Assert.AreEqual("Please supply a valid Label", ErrorResource.FileActivityLabelNotValidErrorTest);
            Assert.AreEqual("No such file exists on the server.", ErrorResource.FileDoesNotExist);
            Assert.AreEqual("The following file(s) exist in the destination folder and overwrite is set to false:- {0}", ErrorResource.FileExistInDestinationFolder);
            Assert.AreEqual("File was not created", ErrorResource.FileNotCreated);
            Assert.AreEqual("File {0} not found ", ErrorResource.FileNotFound);
            Assert.AreEqual("FilePath or Username or Password is missing", ErrorResource.FilePathOrUsernameOrPasswordMissing);
            Assert.AreEqual("A file with the same name exists on the destination and overwrite is set to false", ErrorResource.FileWithSameNameExist);
            Assert.AreEqual("'From' Cannot be null", ErrorResource.FindRecordsFromNotNullErrorTest);
            Assert.AreEqual("'In Field(s)' Cannot be null", ErrorResource.FindRecordsInFieldsNotNullErrorTest);
            Assert.AreEqual("'Result' Cannot be null", ErrorResource.FindRecordsInFieldsResultNotNullErrorTest);
            Assert.AreEqual("'In Field(s)' Cannot have any scalars in this field", ErrorResource.FindRecordsInFieldsScalarNotAllowedErrorTest);
            Assert.AreEqual("'To' Cannot be null", ErrorResource.FindRecordsToNotNullErrorTest);
            Assert.AreEqual("Folder was not found after adding", ErrorResource.FolderWasNotFound);
            Assert.AreEqual("Cannot execute a For Each with no content", ErrorResource.ForEachWithNoContentError);
            Assert.AreEqual("FormatName cannot be null or empty string.", ErrorResource.FormatNameCannotBeNull);
            Assert.AreEqual("FROM address is not in the valid format: {0}", ErrorResource.FROMAddressInvalidFormat);
            Assert.AreEqual("From and to Must be populated", ErrorResource.FROMAndTORequired);
            Assert.AreEqual("Function cannot be null", ErrorResource.FunctionCannotBeNull);
            Assert.AreEqual("Function evaluation Error", ErrorResource.FunctionEvaluationError);
            Assert.AreEqual("Result - Invalid expression: opening and closing brackets don't match", ErrorResource.GatherSystemInfoInputInvalidExpressionErrorTest);
            Assert.AreEqual("Gridsplitter only works in grid", ErrorResource.GridsplitterOnlyWorksInGrids);
            Assert.AreEqual("Headers Are Null", ErrorResource.HeadersAreNull);
            Assert.AreEqual("Incorrect type of argument or operand.", ErrorResource.IncorrectOperandType);
            Assert.AreEqual("Incorrect user name and password for {0}", ErrorResource.IncorrectUsernameAndPassword);
            Assert.AreEqual("Please ensure that you have entered an integer or decimal number for End", ErrorResource.IntegerOrDecimaExpectedForEnd);
            Assert.AreEqual("Please ensure that you have entered an integer or decimal number for Start", ErrorResource.IntegerOrDecimaExpectedForStart);
            Assert.AreEqual("Invalid {0}", ErrorResource.Invalid);
            Assert.AreEqual("Invalid activity", ErrorResource.InvalidActivity);
            Assert.AreEqual("Invalid archive password", ErrorResource.InvalidArchivePassword);
            Assert.AreEqual("Invalid arguments passed in.", ErrorResource.InvalidArguments);
            Assert.AreEqual("Invalid Calculate", ErrorResource.InvalidCalculate);
            Assert.AreEqual("Invalid region detected: An open [[ without a related close ]]", ErrorResource.InvalidCloseRegion);
            Assert.AreEqual("Invalid {0} expected", ErrorResource.InvalidCommand);
            Assert.AreEqual("Invalid Email Source", ErrorResource.InvalidEmailSource);
            Assert.AreEqual("The enumerator is not valid because the dictionary changed.", ErrorResource.InvalidEnumerator);
            Assert.AreEqual("is not a valid expression", ErrorResource.InvalidExpression);
            Assert.AreEqual("Length must be greater than or equal to zero if the type is Letters or LettersAndNumbers", ErrorResource.InvalidLength);
            Assert.AreEqual("Could not evaluate decision data - Invalid model data sent!", ErrorResource.InvalidModelDataSent);
            Assert.AreEqual("You do not have permission to move this item. Contribute permission is required to move an item.", ErrorResource.InvalidMovePermissionErrorMessage);
            Assert.AreEqual("Invalid region detected: A close ]] without a related open [[", ErrorResource.InvalidOpenRegion);
            Assert.AreEqual("Output format in service action {0} is invalid.", ErrorResource.InvalidOutputFormat);
            Assert.AreEqual("Output path is invalid.", ErrorResource.InvalidOutputPath);
            Assert.AreEqual("Invalid PartID", ErrorResource.InvalidPartID);
            Assert.AreEqual("Invalid Path. Please ensure that the path provided is an absolute path, if you intended to access the local file system.", ErrorResource.InvalidPath);
            Assert.AreEqual("Invalid recordset:", ErrorResource.InvalidRecordset);
            Assert.AreEqual("Invalid RequestID", ErrorResource.InvalidRequestID);
            Assert.AreEqual("Invalid result type was encountered from warewolfstorage", ErrorResource.InvalidResultTypeFromWarewolfStorage);
            Assert.AreEqual("Invalid scripting context", ErrorResource.InvalidScriptingContext);
            Assert.AreEqual("The security settings are not valid.", ErrorResource.InvalidSecuritySettings);
            Assert.AreEqual("Invalid SharePoint server sent {0}.", ErrorResource.InvalidSharepointServerSent);
            Assert.AreEqual("Invalid SharePoint server source", ErrorResource.InvalidSharepointServerSource);
            Assert.AreEqual("Sort field is invalid. You may only sort on a single RecordSet columns", ErrorResource.InvalidSortField);
            Assert.AreEqual("Please select valid source", ErrorResource.InvalidSource);
            Assert.AreEqual("Invalid {0} Connection", ErrorResource.InvalidSqlConnection);
            Assert.AreEqual("Invalid syntax - You need to close ( ]] ) your variable list reference", ErrorResource.InvalidSyntaxCreatingVariable);
            Assert.AreEqual("Invalid time out. The timeout must be a valid variable or positive integer number.", ErrorResource.InvalidTimeOut);
            Assert.AreEqual("Value {0} for TimeoutSecondsText could not be interpreted as a numeric value.", ErrorResource.InvalidTimeOutSecondsText);
            Assert.AreEqual("Invalid URL to execute for logging", ErrorResource.InvalidUrl);
            Assert.AreEqual("Invalid User", ErrorResource.InvalidUser);
            Assert.AreEqual("Value is invalid.", ErrorResource.InvalidValue);
            Assert.AreEqual("Invalid variable list. Please ensure that your variable list has valid entries", ErrorResource.InvalidVariableList);
            Assert.AreEqual("Invalid Version found", ErrorResource.InvalidVersion);
            Assert.AreEqual("Invalid workflow selected", ErrorResource.InvalidWorkflow);
            Assert.AreEqual("Invalid workspace item definition", ErrorResource.InvalidWorkspaceItemDefinition);
            Assert.AreEqual("IsBetween Numeric and DateTime mis-match", ErrorResource.IsBetweenDataTypeMismatch);
            Assert.AreEqual("{0} is blank", ErrorResource.IsBlank);
            Assert.AreEqual("{0} is Required", ErrorResource.IsRequired);
            Assert.AreEqual("Sort field is invalid. You may only sort on a single RecordSet columns", ErrorResource.IsSingeRecordSortFieldInvalidErrorTest);
            Assert.AreEqual("The result field only allows a single result", ErrorResource.IsSingeValueResultFieldInvalidErrorTest);
            Assert.AreEqual("Result - Invalid expression: opening and closing brackets don't match", ErrorResource.IsValidExpressionRuleErrorTest);
            Assert.AreEqual("MyRecSet - Recordset index -1 is not greater than zero", ErrorResource.IsValidExpressionRuleIndexZeroErrorTest);
            Assert.AreEqual("Variable name [[res#]] contains invalid character(s)", ErrorResource.IsValidExpressionRuleInvalidCharactersErrorTest);
            Assert.AreEqual("There is an item that exists with the same name and path", ErrorResource.ItemAlreadyExistInPath);
            Assert.AreEqual("ItemsSource property is not empty. This control is being associated with a region, but the control is already bound to something else. If you did not explicitly set the control's ItemSource property, this exception may be caused by a change in the value of the inherited RegionManager attached property.", ErrorResource.ItemsSourcepropertyIsNotEmpty);
            Assert.AreEqual("Item to add was null", ErrorResource.ItemToAddIsNull);
            Assert.AreEqual("Item to delete was null", ErrorResource.ItemToDeleteWasNull);
            Assert.AreEqual("Item to rename was null", ErrorResource.ItemToRenameIsNull);
            Assert.AreEqual("An item with this name already exists in this folder.", ErrorResource.ItemWithNameAlreadyExists);
            Assert.AreEqual("Cannot convert given JSON to target type", ErrorResource.JSONIncompatibleConversionError);
            Assert.AreEqual("Local input path is not set", ErrorResource.LocalInputPathEmpty);
            Assert.AreEqual("Please enter local path", ErrorResource.LocalPathRequired);
            Assert.AreEqual("An error occurred while parsing '{0}' It appears to be malformed", ErrorResource.MalformedExpression);
            Assert.AreEqual("Malformed Service [{0}] it contains multiple actions", ErrorResource.MalformedService);
            Assert.AreEqual("Converter only accepts doubles", ErrorResource.MathConverterAcceptsDoubles);
            Assert.AreEqual("The method or operation is not implemented.", ErrorResource.MethodNotImplemented);
            Assert.AreEqual("Multiple Resources found for Resource ID: {0}", ErrorResource.MultipleResourcesFound);
            Assert.AreEqual("Multiple variables in result field.", ErrorResource.MultipleVariablesInResultField);
            Assert.AreEqual("must be a real number", ErrorResource.MustBeRealNumber);
            Assert.AreEqual("Must be a single character", ErrorResource.MustBeSingleCharacter);
            Assert.AreEqual("Must be a whole number", ErrorResource.MustBeWholeNumber);
            Assert.AreEqual("Must have body", ErrorResource.MustHaveBody);
            Assert.AreEqual("The selected database does not contain actions to perform", ErrorResource.NoActionsInSelectedDB);
            Assert.AreEqual("No contract found for end point", ErrorResource.NoContractFound);
            Assert.AreEqual("Could not evaluate decision data - no DataList ID sent!", ErrorResource.NoDataListIDsent);
            Assert.AreEqual("No Method Selected", ErrorResource.NoMethodSelected);
            Assert.AreEqual("Could not evaluate decision data - No model data sent!", ErrorResource.NoModelDataSent);
            Assert.AreEqual("No Namespace Selected.", ErrorResource.NoNamespaceSelected);
            Assert.AreEqual("Please enter an 'Object Name' as 'Is Object' has been selected.", ErrorResource.NoObjectName);
            Assert.AreEqual("There are no outputs", ErrorResource.NoOutPuts);
            Assert.AreEqual("No parameter values provided.", ErrorResource.NoParameter);
            Assert.AreEqual("You do not have permissions to View or Execute this resource.", ErrorResource.NoPermissionToExecuteTool);
            Assert.AreEqual("No process found matching the search criteria", ErrorResource.NoProcessFound);
            Assert.AreEqual("No recordset given", ErrorResource.NoRecordSet);
            Assert.AreEqual("No resourceId was found in the incoming data", ErrorResource.NoResourceIdInTheIncomingData);
            Assert.AreEqual("No resourceId sent to server", ErrorResource.NoResourceIdSentToServer);
            Assert.AreEqual("No resource name given", ErrorResource.NoResourceName);
            Assert.AreEqual("No Resource Selected", ErrorResource.NoResourceSelected);
            Assert.AreEqual("No Resources found for Resource ID: {0}", ErrorResource.NoResourcesFound);
            Assert.AreEqual("No SharePoint list name set", ErrorResource.NoSharepointListNameSet);
            Assert.AreEqual("No SharePoint server set", ErrorResource.NoSharepointServerSet);
            Assert.AreEqual("Administrator rights required to perfom this action.", ErrorResource.NotAuthorizedToAdministratorException);
            Assert.AreEqual("Contribute rights required to perfom this action.", ErrorResource.NotAuthorizedToContributeException);
            Assert.AreEqual("Create rights required to perfom this action.", ErrorResource.NotAuthorizedToCreateException);
            Assert.AreEqual("DeployFrom  rights required to perfom this action.", ErrorResource.NotAuthorizedToDeployFromException);
            Assert.AreEqual("DeployTo rights required to perfom this action.", ErrorResource.NotAuthorizedToDeployToException);
            Assert.AreEqual("Execute rights required to perfom this action.", ErrorResource.NotAuthorizedToExecuteException);
            Assert.AreEqual("View rights required to perfom this action.", ErrorResource.NotAuthorizedToViewException);
            Assert.AreEqual("There is no text for object '{0}'.", ErrorResource.NoTextForObject);
            Assert.AreEqual("{0} not found", ErrorResource.NotFound);
            Assert.AreEqual("Nothing to Evaluate", ErrorResource.NothingToEvaluate);
            Assert.AreEqual("Cannot find anything to split on!", ErrorResource.NothingToSplit);
            Assert.AreEqual("Invalid command sent to ExecuteXmlReader.  The command must return an Xml result.", ErrorResource.NotXmlResults);
            Assert.AreEqual("No username and password provided,", ErrorResource.NoUserNameAndPassword);
            Assert.AreEqual("Novalue Provided for: {0}", ErrorResource.NoValueProvided);
            Assert.AreEqual("No value provided for {0} parameter.", ErrorResource.NoValueProvidedForParameter);
            Assert.AreEqual("No versionNumber sent to server", ErrorResource.NoVersionNumberSentToServer);
            Assert.AreEqual("No Web Response received", ErrorResource.NoWebResponse);
            Assert.AreEqual("The argument must not be null or empty and must contain non-whitespace characters must", ErrorResource.NullArgument);
            Assert.AreEqual("FATAL ERROR : Null ESB channel!!", ErrorResource.NullESBChannel);
            Assert.AreEqual("Null Executing User", ErrorResource.NullExecutingUser);
            Assert.AreEqual("Null Popup Controller", ErrorResource.NullPopupController);
            Assert.AreEqual("Recordset is null {0}", ErrorResource.NullRecordSet);
            Assert.AreEqual("Scalar value {{{0}}} is NULL", ErrorResource.NullScalarValue);
            Assert.AreEqual("Null or empty ServiceID or WorkspaceID", ErrorResource.NullServiceIDOrWorkspaceID);
            Assert.AreEqual("Null Service Manager", ErrorResource.NullServiceManager);
            Assert.AreEqual("Null or empty tokenize string!", ErrorResource.NullTokenzeString);
            Assert.AreEqual("The number of results for the paths representing the {0}  expression didn't match.", ErrorResource.NumberOfResultsMismatch);
            Assert.AreEqual("Can only accept one variable", ErrorResource.OneVariableAccepted);
            Assert.AreEqual("Can only have a scalar, a RecordSet or a RecordSet with column qualification as input", ErrorResource.OnlyScalarRecordsetCommaSeperated);
            Assert.AreEqual("Only user resources can be added from this repository", ErrorResource.OnlyUserResourcesCanBeAdded);
            Assert.AreEqual("Invalid expression: opening and closing brackets don't match.", ErrorResource.OpeningClosingBracketMismatch);
            Assert.AreEqual("Operator need to be specified", ErrorResource.OperatorNeedToBeSpecified);
            Assert.AreEqual("Invalid output description {0}.", ErrorResource.OutputDecriptionInvalid);
            Assert.AreEqual("'Padding' must be a single character", ErrorResource.PADDINGMustBeSingleCharecter);
            Assert.AreEqual("The parent cannot be null.", ErrorResource.ParentCannotBeNull);
            Assert.AreEqual("The path is in the incorrect format.", ErrorResource.PathIsInIncorrectFormat);
            Assert.AreEqual("Path of type '{0}' expected, path of type '{1}' received.", ErrorResource.PathMismatch);
            Assert.AreEqual("The permissions passed is not a valid list of permissions. Error: {0}", ErrorResource.PermissionsPassedNotValid);
            Assert.AreEqual("Please connect first.", ErrorResource.PleaseConnectFirst);
            Assert.AreEqual("Please enter a positive integer for the {0}", ErrorResource.PositiveIntegerRequired);
            Assert.AreEqual("The value must be non-negative.", ErrorResource.PositiveNumberRequired);
            Assert.AreEqual("Problems with Iterators for: {0}", ErrorResource.ProblemsWithIterators);
            Assert.AreEqual("{0} must have a value", ErrorResource.PropertyMusHaveAValue);
            Assert.AreEqual("Query is Null", ErrorResource.QueryIsNull);
            Assert.AreEqual("Variable List String cannot be blank/empty", ErrorResource.QuickVariableInputListStringNotNullErrorTest);
            Assert.AreEqual("'Message' Cannot be null", ErrorResource.RabbitMqMessageNotNullErrorTest);
            Assert.AreEqual("'Prefetch' Cannot be null", ErrorResource.RabbitMqPrefetchNotNullErrorTest);
            Assert.AreEqual("'Queue Name' Cannot be null", ErrorResource.RabbitMqQueueNameNotNullErrorTest);
            Assert.AreEqual("'RabbitMQ Source' Cannot be null", ErrorResource.RabbitMqSourceNotNullErrorTest);
            Assert.AreEqual("Failure: Queue Name and Message are required.", ErrorResource.RabbitQueueNameAndMessageRequired);
            Assert.AreEqual("Failure: Queue Name is required.", ErrorResource.RabbitQueueNameRequired);
            Assert.AreEqual("Queue {0} not found", ErrorResource.RabbitQueueNotFound);
            Assert.AreEqual("Failure: Source has been deleted.", ErrorResource.RabbitSourceHasBeenDeleted);
            Assert.AreEqual("Please ensure that you have entered an integer or decimal number for End from {0} to {1}.", ErrorResource.RandomIntegerForEndErrorTest);
            Assert.AreEqual("Please ensure that you have entered an integer or decimal number for Start from {0} to {1}.", ErrorResource.RandomIntegerForStartErrorTest);
            Assert.AreEqual("Please enter a positive integer for the Length.", ErrorResource.RandomPositiveIntegerErrorTest);
            Assert.AreEqual("Please ensure that you have entered an integer or decimal number for End", ErrorResource.RandomPositiveIntegerForEndErrorTest);
            Assert.AreEqual("Please ensure that you have entered an integer or decimal number for Start", ErrorResource.RandomPositiveIntegerForStartErrorTest);
            Assert.AreEqual("{0} must be a whole number from 1 onwards.", ErrorResource.RangeFromOne);
            Assert.AreEqual("Recordset does not have the row", ErrorResource.RecordsetDoesNotHaveRow);
            Assert.AreEqual("Recordset index ({0}) contains invalid character(s)", ErrorResource.RecordsetIndexContainsInvalidCharecters);
            Assert.AreEqual("Recordset index {0} is not greater than zero", ErrorResource.RecordsetIndexNotGreaterThanZero);
            Assert.AreEqual("You appear to have recordsets of different sizes", ErrorResource.RecordsetsHaveDifferntSizes);
            Assert.AreEqual("Recursive Directory Create Failed For [ {0} ]", ErrorResource.RecursiveDirectoryCreateFailed);
            Assert.AreEqual("Remote Server ID Empty", ErrorResource.RemoteServerIDNull);
            Assert.AreEqual("This repository does not require loading. It is intended to be added to at runtime", ErrorResource.RepositoryDoesNotRequireLoading);
            Assert.AreEqual("Requested folder already exists on server.", ErrorResource.RequestedFolderAlreadyExists);
            Assert.AreEqual("Requested folder does not exist on server. Folder: {0}", ErrorResource.RequestedFolderDoesNotExistOnServer);
            Assert.AreEqual("Value must be a recordset name", ErrorResource.RequiredRecordSetName);
            Assert.AreEqual("Must only be a recordset name", ErrorResource.RequiredRecordSetNameONLY);
            Assert.AreEqual("Please insert only variables into Fields To Search", ErrorResource.RequiredVaraibleNameONLY);
            Assert.AreEqual("Resource '{0}' from file '{1}' wasn't loaded because a resource with the same name has already been loaded from file '{2}'.", ErrorResource.ResourceAlreadyLoaded);
            Assert.AreEqual("Resource has unrecognized formatting, this Warewolf Server may be to outdated to read this resource.", ErrorResource.ResourceHasUnrecognizedFormatting);
            Assert.AreEqual("ResourceId is empty or null", ErrorResource.ResourceIdIsNull);
            Assert.AreEqual("ResourceId is not a GUID", ErrorResource.ResourceIdNotAGUID);
            Assert.AreEqual("ResourceName and Type are missing from the request", ErrorResource.ResourceNameAndTypeMissing);
            Assert.AreEqual("Resource {0} not found", ErrorResource.ResourceNotFound);
            Assert.AreEqual("Result - Invalid expression: opening and closing brackets don't match", ErrorResource.ResultOpeningClosingBracketMismatch);
            Assert.AreEqual("Rounding decimal places must be between {0} and {1}.", ErrorResource.RoundingDecimalPlaceBetween);
            Assert.AreEqual("Rounding decimal places is not valid", ErrorResource.RoundingNotValid);
            Assert.AreEqual("Parent and Child DataList IDs are the same, aborting resumption!", ErrorResource.SameParentAndChildDataListId);
            Assert.AreEqual("Can only save to folders or root", ErrorResource.SaveToFolderOrRootOnly);
            Assert.AreEqual("Scalars are not allowed. Please check the following: {0}", ErrorResource.ScalarsNotAllowed);
            Assert.AreEqual("This Workflow requires that you have Execute permission on the 'bob' Workflow. \r\nPlease contact your Warewolf System Administrator.", ErrorResource.ScheduledResourceInvalidUserPermissionErrorTest);
            Assert.AreEqual("This task requires that the user account specified has 'Log On As Batch' job rights. \r\nPlease contact your Windows System Administrator.", ErrorResource.ScheduledResourceLogOnAsBatchErrorTest);
            Assert.AreEqual("Scheduler Error Enumerating Groups:{0}", ErrorResource.SchedulerErrorEnumeratingGroups);
            Assert.AreEqual("There was an error when returning a value from your script, remember to use the 'Return' keyword when returning the result", ErrorResource.ScriptingErrorReturningValue);
            Assert.AreEqual("{0} is currently busy. Please try again later.", ErrorResource.ServerBusyError);
            Assert.AreEqual("Server is currently busy", ErrorResource.ServerBusyHeader);
            Assert.AreEqual("Server connection has dropped during execution of command.", ErrorResource.ServerconnectionDropped);
            Assert.AreEqual("Server: {0} has disconnected.", ErrorResource.ServerDisconnected);
            Assert.AreEqual("Disconnected Server", ErrorResource.ServerDisconnectedHeader);
            Assert.AreEqual("Server dropped", ErrorResource.ServerDroppedErrorHeading);
            Assert.AreEqual("Server input path {0} is not set", ErrorResource.ServerInputPathEmpty);
            Assert.AreEqual("Please reconnect before performing any actions", ErrorResource.ServerReconnectForActions);
            Assert.AreEqual("Server source not found. This service will not execute.", ErrorResource.ServerSourceNotFound);
            Assert.AreEqual("Server version {0} is incompatible with version {1}", ErrorResource.ServerVersionsIncompatiable);
            Assert.AreEqual("Service does not exist", ErrorResource.ServiceDoesNotExist);
            Assert.AreEqual("Service Execution Error: {0}", ErrorResource.ServiceExecutionError);
            Assert.AreEqual("Empty or null service passed in", ErrorResource.ServiceIsNull);
            Assert.AreEqual("Not Authorized", ErrorResource.ServiceNotAuthorizedExceptionHeader);
            Assert.AreEqual("Service not found", ErrorResource.ServiceNotFound);
            Assert.AreEqual("Please enter SharePoint Server path From", ErrorResource.SharepointServerPathRequired);
            Assert.AreEqual("Please enter SharePoint Server path To", ErrorResource.SharepointServerPathToRequired);
            Assert.AreEqual("Please Select a SharePoint Server", ErrorResource.SharepointServerRequired);
            Assert.AreEqual("The result field only allows a single result", ErrorResource.SingleResultAllowed);
            Assert.AreEqual("Source and destination need to be both files or directories", ErrorResource.SourceAndDestinationNOTFilesOrDirectory);
            Assert.AreEqual("Source cannot be an empty string", ErrorResource.SourceCannotBeAnEmptyString);
            Assert.AreEqual("Source directory does not exist or could not be found: {0}", ErrorResource.SourceDirectoryDoesNotExist);
            Assert.AreEqual("Source must be a file", ErrorResource.SourceMustBeAFile);
            Assert.AreEqual("The Star notation is not accepted in the {0}.", ErrorResource.StarNotationNotAllowed);
            Assert.AreEqual("The start index specified was not a number.", ErrorResource.StartIndexNotANumber);
            Assert.AreEqual("String too long", ErrorResource.StringTooLong);
            Assert.AreEqual("Please supply at least one of the following: {0}", ErrorResource.SupplyAtLeastOne);
            Assert.AreEqual("Must supply a Destination Name", ErrorResource.SupplyDestinationName);
            Assert.AreEqual("Must supply a Source Name", ErrorResource.SupplySourceName);
            Assert.AreEqual("Failed: Switch must have a Default arm connected.", ErrorResource.SwitchNoDefaultError);
            Assert.AreEqual("Add Time amount must be numeric", ErrorResource.TimeMustBeNumeric);
            Assert.AreEqual("TO address is not in the valid format: {0}", ErrorResource.ToAddressInvalidFormat);
            Assert.AreEqual("Please supply a To address in order to Test.", ErrorResource.ToAddressRequired);
            Assert.AreEqual("ToServiceDefinition doesn't support resources of type source. Sources are meant to be managed through the Web API.", ErrorResource.ToServiceDefinitionDoesNotRupportResourcesOfTypeSource);
            Assert.AreEqual("Compilation Error: There is a {0} with the same name.", ErrorResource.TypeConflict);
            Assert.AreEqual("Unable to contact Server", ErrorResource.UnableToContactServer);
            Assert.AreEqual("Unable to create the defined function", ErrorResource.UnableToCreateDefinedFunction);
            Assert.AreEqual("Unable to parse the Source Name", ErrorResource.UnableToParseSourceName);
            Assert.AreEqual("Unexpected character at index {0} of format", ErrorResource.UnexpectedCharacterAtIndex);
            Assert.AreEqual("Unexpected property name encountered", ErrorResource.UnexpectedPropertyName);
            Assert.AreEqual("Unexpected Resource Type", ErrorResource.UnexpectedResourceType);
            Assert.AreEqual("Unexpected value at index {0}.", ErrorResource.UnexpectedValueAtIndex);
            Assert.AreEqual("Scalars are not allowed. Please check the following: 'Result'", ErrorResource.UniqueResultCannotBeScalarErrorTest);
            Assert.AreEqual("Unrecognised format part {0}.", ErrorResource.UnrecognisedFormatPart);
            Assert.AreEqual("User {0} does not exist on the machine.", ErrorResource.UserDoesNotExistOnTheMachine);
            Assert.AreEqual("The process required user input.", ErrorResource.UserInputRequired);
            Assert.AreEqual("User: {0} does not have Execute Permission to resource {1}.", ErrorResource.UserNotAuthorizedToExecuteException);
            Assert.AreEqual("User: {0} requires View and Execute permissions to Execute resource {1}.", ErrorResource.UserNotAuthorizedToExecuteOuterWorkflowException);
            Assert.AreEqual("The 'Using' value must be a real number.", ErrorResource.USINGMustBeARealNumber);
            Assert.AreEqual("{0} must be validated before minimising", ErrorResource.ValidateBeforeMinimising);
            Assert.AreEqual("The value cannot be null.", ErrorResource.ValueCannotBeNull);
            Assert.AreEqual("{0} value not supplied.", ErrorResource.ValueNotSupplied);
            Assert.AreEqual("Values are missing", ErrorResource.valuesAreMissing);
            Assert.AreEqual("Value of TimeoutSecondsText out of range: please specify a value between 0 and {0}.", ErrorResource.ValueTimeOutOutOfRange);
            Assert.AreEqual("Error with variables in input.", ErrorResource.VariableInputError);
            Assert.AreEqual("Variable [[]] is missing a name", ErrorResource.VariableIsMissing);
            Assert.AreEqual("Variable is null", ErrorResource.VariableIsNull);
            Assert.AreEqual("Variable List String cannot be blank/empty", ErrorResource.VariableListStringRequired);
            Assert.AreEqual("ViewModel type must contain a parameter less constructor.", ErrorResource.ViewModelTypeMustContainAParameterlessContructor);
            Assert.AreEqual("ViewModel type must inherit from SettingsViewModelBase.", ErrorResource.ViewModelTypeMustInheritFromSettingsViewModelBase);
            Assert.AreEqual("View type must contain a parameter less constructor.", ErrorResource.ViewTypeMustContainAParameterlessContructor);
            Assert.AreEqual("View type must inherit from UserControl.", ErrorResource.ViewTypeMustInheritFromUserControl);
            Assert.AreEqual("Error getting web request", ErrorResource.WebRequestError);
            Assert.AreEqual("Invalid Web Service Description", ErrorResource.WebServiceDescriptionInvalid);
            Assert.AreEqual("Web Service Not Found", ErrorResource.WebServiceNotFound);
            Assert.AreEqual("'XPath' is not a valid expression", ErrorResource.XPathInvalidExpressionErrorTest);
            Assert.AreEqual("The XPath expression provided is not valid", ErrorResource.XPathProvidedNotValid);
            Assert.AreEqual("'Results' Cannot be null", ErrorResource.XPathResultsNotNullErrorTest);
            Assert.AreEqual("'XML' is not a valid expression", ErrorResource.XPathXmlInvalidExpressionErrorTest);
            Assert.AreEqual("'XML' Cannot be null", ErrorResource.XPathXmlNotNullErrorTest);
            Assert.AreEqual("'XML' - Recordset index -1 is not greater than zero", ErrorResource.XPathXmlRecordsetIndexErrorTest);

        }
    }
}
