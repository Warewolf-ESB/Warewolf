//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Warewolf.Studio.Resources.Languages {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Core {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Core() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Warewolf.Studio.Resources.Languages.Core", typeof(Core).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Studio: Version {0}
        ///Server: Version {1}
        ///
        ///Software development by: www.dev2.co.za
        ///.
        /// </summary>
        public static string About_Content {
            get {
                return ResourceManager.GetString("About_Content", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to About Server and Studio.
        /// </summary>
        public static string About_Description_Header {
            get {
                return ResourceManager.GetString("About_Description_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to About.
        /// </summary>
        public static string About_Header_Text {
            get {
                return ResourceManager.GetString("About_Header_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connect using anonymous security credentials.
        /// </summary>
        public static string AnonymousAuthenticationToolTip {
            get {
                return ResourceManager.GetString("AnonymousAuthenticationToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warewolf.
        /// </summary>
        public static string App_Data_Directory {
            get {
                return ResourceManager.GetString("App_Data_Directory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///To assign a value to a variable, put the value in here.&lt;br /&gt;
        ///If you put an = as the first character, it will turn into a calculation e.g. =[[qty]]*[[price]]&lt;br /&gt;
        ///&lt;br /&gt;
        ///Allowed:&lt;br /&gt;
        ///Data   
        ///&lt;ol&gt;
        ///    &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///    &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///    &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///    &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///    &lt;li&gt;= fx&lt;/li&gt;
        ///&lt;/ol&gt;.
        /// </summary>
        public static string AssignHelpNewValue {
            get {
                return ResourceManager.GetString("AssignHelpNewValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///To assign a value to a variable, put the variable here.&lt;br /&gt;
        ///You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br /&gt;
        ///Using recordset () will add a new record and (*) will assign every record.&lt;br /&gt;
        ///&lt;br /&gt;
        ///Allowed:
        ///&lt;ol&gt;
        ///    &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///    &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///    &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///    &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///&lt;/ol&gt;.
        /// </summary>
        public static string AssignHelpVariable {
            get {
                return ResourceManager.GetString("AssignHelpVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Authentication Type:.
        /// </summary>
        public static string AuthenticationTypeLabel {
            get {
                return ResourceManager.GetString("AuthenticationTypeLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AutoDiscover Url.
        /// </summary>
        public static string AutoDiscoverLabel {
            get {
                return ResourceManager.GetString("AutoDiscoverLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and data goes in here.&lt;br /&gt;
        ///        To convert Text, Hex, Binary and Base64, put the data to be converted in here.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string BaseConversionHelpBaseInput {
            get {
                return ResourceManager.GetString("BaseConversionHelpBaseInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        To perform a calculation, put the calculation in here in BODMAS format.&lt;br /&gt;
        ///        There are many supporting functions like average() and sum() that can be used with recordsets e.g. Sum([[staff(*).salaries]]) will sum all the salaries fields of the staff recordset.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/ [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CalculateHelpFx {
            get {
                return ResourceManager.GetString("CalculateHelpFx", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns the formatted number.&lt;br /&gt;
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br /&gt;
        ///        Using recordset () will add a new record and (*) will assign every record.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        
        ///        &lt;ul&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ul&gt;.
        /// </summary>
        public static string CalculateHelpResult {
            get {
                return ResourceManager.GetString("CalculateHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel Test.
        /// </summary>
        public static string CancelTest {
            get {
                return ResourceManager.GetString("CancelTest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the type of conversion you would like to make.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        na.
        /// </summary>
        public static string CaseConversionHelpConvertToCaseType {
            get {
                return ResourceManager.GetString("CaseConversionHelpConvertToCaseType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        To convert the case of some text, put the variable containing the text here.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string CaseConversionHelpTextInput {
            get {
                return ResourceManager.GetString("CaseConversionHelpTextInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File picker to help you locate the location of the items you want to attach.
        /// </summary>
        public static string ChooseAttachmentsHelp {
            get {
                return ResourceManager.GetString("ChooseAttachmentsHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        To execute a command line action or actions, enter them in here. Acts like a batch file. Any user driven task will simply be ignored.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string CMDLineHelpCMD {
            get {
                return ResourceManager.GetString("CMDLineHelpCMD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The process priority for execution. Very helpful for long running processes that need/don’t need to be resource intensive.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        na.
        /// </summary>
        public static string CMDLineHelpPrioritytype {
            get {
                return ResourceManager.GetString("CMDLineHelpPrioritytype", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Returns the output of the execution if any. Varies depending on what was executed.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string CMDLineHelpResult {
            get {
                return ResourceManager.GetString("CMDLineHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comments do not execute and are place holders for future services or tools or simply to leave commentary inside the workflow.&lt;br /&gt;
        ///        You can connect comments into the process flow and they will simply be skipped during execution. However, they will appear in the debug output.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Notes and comments will not be executed at run time but will show up in the debug output..
        /// </summary>
        public static string CommentHelpComment {
            get {
                return ResourceManager.GetString("CommentHelpComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to http://community.warewolf.io/.
        /// </summary>
        public static string CommunityUrl {
            get {
                return ResourceManager.GetString("CommunityUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0.0.0.6.
        /// </summary>
        public static string CompareCurrentServerVersion {
            get {
                return ResourceManager.GetString("CompareCurrentServerVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the Warewolf server you want to use or click New Remote Server....
        /// </summary>
        public static string ConnectControlConnectionsToolTip {
            get {
                return ResourceManager.GetString("ConnectControlConnectionsToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit the selected server.
        /// </summary>
        public static string ConnectControlEditConnectionToolTip {
            get {
                return ResourceManager.GetString("ConnectControlEditConnectionToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connect / disconnect the selected server.
        /// </summary>
        public static string ConnectControlToggleConnectionToolTip {
            get {
                return ResourceManager.GetString("ConnectControlToggleConnectionToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the connection properties of the selected Warewolf Server.&lt;br&gt;
        ///&lt;br/&gt;
        ///Allows you to change remote server URL, Port and Authentication.&lt;br&gt;
        ///&lt;br/&gt;
        ///&lt;b&gt;localhost&lt;/b&gt; cannot be edited in this way..
        /// </summary>
        public static string ConnectControlViewEditHelp {
            get {
                return ResourceManager.GetString("ConnectControlViewEditHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the Warewolf Server from the drop down list that you want to use. &lt;br/&gt;
        ///&lt;br/&gt;
        ///If you want to connect to a Warewolf Server that is not in the drop down list, then select  &lt;b&gt;New Remote Server…&lt;/b&gt;&lt;br/&gt;
        ///&lt;br/&gt;
        ///Servers with an active connection will show &lt;b&gt;(Connected)&lt;/b&gt; next to them..
        /// </summary>
        public static string ConnectControlViewSelectHelp {
            get {
                return ResourceManager.GetString("ConnectControlViewSelectHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disconnects or Connects to the selected remote Warewolf Server. &lt;br/&gt;
        ///&lt;br/&gt;
        ///Connected Servers will be Disconnected and vice versa. &lt;br/&gt;
        ///&lt;br/&gt;
        ///&lt;b&gt;localhost&lt;/b&gt; cannot be disconnected and should always be connected. If it is not connected, try restarting the Warewolf Server service in Task Manager..
        /// </summary>
        public static string ConnectControlViewToggleConnectionHelp {
            get {
                return ResourceManager.GetString("ConnectControlViewToggleConnectionHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  (Connected).
        /// </summary>
        public static string ConnectedLabel {
            get {
                return ResourceManager.GetString("ConnectedLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to http://warewolf.io/contributors.php.
        /// </summary>
        public static string ContributorsUrl {
            get {
                return ResourceManager.GetString("ContributorsUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        Put the full path of the destination you are copying to here.&lt;br /&gt;
        ///        You can use File System, URI, SFTP, FTP or FTPS format.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string CopyHelpDestination {
            get {
                return ResourceManager.GetString("CopyHelpDestination", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        To copy a file or folder, put the full path and file or folder name here.&lt;br /&gt;
        ///        You can use File System, URI, SFTP, FTP or FTPS format.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string CopyHelpFileFolder {
            get {
                return ResourceManager.GetString("CopyHelpFileFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the file or folder already exists, you can force a new one to overwrite the old one.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        If it exists already, force an overwrite.
        /// </summary>
        public static string CopyHelpForceoverwrite {
            get {
                return ResourceManager.GetString("CopyHelpForceoverwrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Password of an account with permission to access the destination. By default the account running Warewolf Server.exe service will be used.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string CopyHelpPassword {
            get {
                return ResourceManager.GetString("CopyHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns Success or will be blank depending on the success of the Copy action.&lt;br /&gt;
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br /&gt;
        ///        Using recordset () will add a new record and (*) will assign every record.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string CopyHelpResult {
            get {
                return ResourceManager.GetString("CopyHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Username of an account with permission to access the source. By default the account running Warewolf Server.exe service will be used.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string CopyHelpUsername {
            get {
                return ResourceManager.GetString("CopyHelpUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To Count the number of records/indexes in a recordset, put the recordset name in here. E.g. [[Customer()]]&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        [[Recordset()]].
        /// </summary>
        public static string CountHelpRecordset {
            get {
                return ResourceManager.GetString("CountHelpRecordset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns a number specifying how many records/indexes are in the recordset.&lt;br /&gt;
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br /&gt;
        ///        Using recordset() will add a new record and (*) will assign every record.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string CountHelpResult {
            get {
                return ResourceManager.GetString("CountHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        To create a file or folder, put the full path and file or folder name here.&lt;br /&gt;
        ///        You can use File System, URI, SFTP, FTP or FTPS format.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string CreateHelpFileFolder {
            get {
                return ResourceManager.GetString("CreateHelpFileFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the file or folder already exists, you can force a new one to overwrite the old one.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        If it exists already, force an overwrite.
        /// </summary>
        public static string CreateHelpForceOverWrite {
            get {
                return ResourceManager.GetString("CreateHelpForceOverWrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Password of an account with permission to perform this action. By default the account running Warewolf Server.exe service will be used.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string CreateHelpPassword {
            get {
                return ResourceManager.GetString("CreateHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns Success or will be blank depending on the success of the Create action.&lt;br /&gt;
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br /&gt;
        ///        Using recordset() will add a new record and (*) will assign every record.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string CreateHelpResult {
            get {
                return ResourceManager.GetString("CreateHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Username of an account with permission to perform this action. By default the account running Warewolf Server.exe service will be used.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string CreateHelpUsername {
            get {
                return ResourceManager.GetString("CreateHelpUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To create JSON data, enter the Name and Data of the JSON variables.&lt;br /&gt;
        ///        To create JSON Arrays use a single recordset field with a star for every record e.g.&lt;br /&gt;
        ///        [[rec(*).name]]&lt;br /&gt;
        ///        To create JSON Objects, use a comma separated list of recordset fields, or, just the recordset name to use the whole recordset. e.g.&lt;br /&gt;
        ///        [[rec(*).surname]], [[rec(*).name]], [[rec(*).middle]]&lt;br /&gt;
        ///        or simply&lt;br /&gt;
        ///        [[rec(*)]]&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///      [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CreateJSONHelpInput {
            get {
                return ResourceManager.GetString("CreateJSONHelpInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The JSON variable name will default to the Warewolf variable name in the Data column.&lt;br /&gt;
        ///        Array and Object names will default to the recordset name used.&lt;br/&gt;
        ///        Object data names will be the field names of the recordset.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data.
        /// </summary>
        public static string CreateJSONHelpName {
            get {
                return ResourceManager.GetString("CreateJSONHelpName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns the inputs in JSON format.&lt;br /&gt;
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br /&gt;
        ///        Using recordset() will add a new record and (*) will assign every record.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string CreateJSONHelpResult {
            get {
                return ResourceManager.GetString("CreateJSONHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Critical Error.
        /// </summary>
        public static string CritErrorTitle {
            get {
                return ResourceManager.GetString("CritErrorTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Critical : Warewolf Must Restart. All open tabs will be saved. Please take the time to report this error to the community..
        /// </summary>
        public static string CriticalExceptionMessage {
            get {
                return ResourceManager.GetString("CriticalExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select an Action.
        /// </summary>
        public static string DatabaseServiceActionHeader {
            get {
                return ResourceManager.GetString("DatabaseServiceActionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit .
        /// </summary>
        public static string DatabaseServiceDBSourceEditTabHeader {
            get {
                return ResourceManager.GetString("DatabaseServiceDBSourceEditTabHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data Source.
        /// </summary>
        public static string DatabaseServiceDBSourceHeader {
            get {
                return ResourceManager.GetString("DatabaseServiceDBSourceHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New DB Connector.
        /// </summary>
        public static string DatabaseServiceDBSourceTabHeader {
            get {
                return ResourceManager.GetString("DatabaseServiceDBSourceTabHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the connection string properties of the selected Database.&lt;br&gt;
        ///&lt;br/&gt;
        ///Change the connection string from, say, a development database to a live database.&lt;br/&gt;
        ///&lt;br/&gt;
        ///&lt;a href=&quot;http://warewolf.io/knowledge-base/data-connectors&quot; target=&quot;_blank&quot;&gt;Read more in the Knowledge Base.&lt;/a&gt;.
        /// </summary>
        public static string DatabaseServiceEditSourceHelp {
            get {
                return ResourceManager.GetString("DatabaseServiceEditSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This service will only execute when the login permissions issues have been resolved..
        /// </summary>
        public static string DatabaseServiceExecuteLoginPermission {
            get {
                return ResourceManager.GetString("DatabaseServiceExecuteLoginPermission", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This service will only execute when the server is online..
        /// </summary>
        public static string DatabaseServiceExecuteOnline {
            get {
                return ResourceManager.GetString("DatabaseServiceExecuteOnline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You do not have permissions to View or Execute this resource..
        /// </summary>
        public static string DatabaseServiceExecuteViewPermission {
            get {
                return ResourceManager.GetString("DatabaseServiceExecuteViewPermission", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incorrect Version. The remote workflow has changed.Please refresh.
        /// </summary>
        public static string DatabaseServiceIncorrectVersion {
            get {
                return ResourceManager.GetString("DatabaseServiceIncorrectVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Input some test data to execute the procedure.&lt;br/&gt;
        ///&lt;br/&gt;
        ///This data will not be stored and the execution will be rolled back if supported by the database..
        /// </summary>
        public static string DatabaseServiceInputsHelp {
            get {
                return ResourceManager.GetString("DatabaseServiceInputsHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inspect Data Connector.
        /// </summary>
        public static string DatabaseServiceInspectHeader {
            get {
                return ResourceManager.GetString("DatabaseServiceInspectHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Defaults and Mapping.
        /// </summary>
        public static string DatabaseServiceMappingsHeader {
            get {
                return ResourceManager.GetString("DatabaseServiceMappingsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a connection to a new database server..
        /// </summary>
        public static string DatabaseServiceNewSourceHelp {
            get {
                return ResourceManager.GetString("DatabaseServiceNewSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Procedure not selected. This service will not execute..
        /// </summary>
        public static string DatabaseServiceProcedureNotSelected {
            get {
                return ResourceManager.GetString("DatabaseServiceProcedureNotSelected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refreshes the list of available actions on the database..
        /// </summary>
        public static string DatabaseServiceRefreshHelp {
            get {
                return ResourceManager.GetString("DatabaseServiceRefreshHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The available database actions you can perform such as stored procedures or function calls..
        /// </summary>
        public static string DatabaseServiceSelectActionHelp {
            get {
                return ResourceManager.GetString("DatabaseServiceSelectActionHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source was not found. This service will not execute..
        /// </summary>
        public static string DatabaseServiceSourceNotFound {
            get {
                return ResourceManager.GetString("DatabaseServiceSourceNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source not selected. This service will not execute..
        /// </summary>
        public static string DatabaseServiceSourceNotSelected {
            get {
                return ResourceManager.GetString("DatabaseServiceSourceNotSelected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The available database connections. To create a new connection, click New..
        /// </summary>
        public static string DatabaseServiceSourceTypesHelp {
            get {
                return ResourceManager.GetString("DatabaseServiceSourceTypesHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the execution of this resource..
        /// </summary>
        public static string DatabaseServiceTestHelp {
            get {
                return ResourceManager.GetString("DatabaseServiceTestHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancels the setup of this database source..
        /// </summary>
        public static string DatabaseSourceCancelHelp {
            get {
                return ResourceManager.GetString("DatabaseSourceCancelHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Database:.
        /// </summary>
        public static string DatabaseSourceDatabaseLabel {
            get {
                return ResourceManager.GetString("DatabaseSourceDatabaseLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The available databases on the Server..
        /// </summary>
        public static string DatabaseSourceDatabasesHelp {
            get {
                return ResourceManager.GetString("DatabaseSourceDatabasesHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the database this source will use.
        /// </summary>
        public static string DatabaseSourceDatabaseToolTip {
            get {
                return ResourceManager.GetString("DatabaseSourceDatabaseToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit .
        /// </summary>
        public static string DatabaseSourceServerEditHeaderLabel {
            get {
                return ResourceManager.GetString("DatabaseSourceServerEditHeaderLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Server/Computer Name on your network with the Database Engine.&lt;br/&gt;
        ///&lt;br/&gt;
        ///Alternatively, the URL for your online Server, such as Azure SQL..
        /// </summary>
        public static string DatabaseSourceServerHelp {
            get {
                return ResourceManager.GetString("DatabaseSourceServerHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server:.
        /// </summary>
        public static string DatabaseSourceServerLabel {
            get {
                return ResourceManager.GetString("DatabaseSourceServerLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Database Source.
        /// </summary>
        public static string DatabaseSourceServerNewHeaderLabel {
            get {
                return ResourceManager.GetString("DatabaseSourceServerNewHeaderLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to These are the currently supported database engines..
        /// </summary>
        public static string DatabaseSourceServerTypesHelp {
            get {
                return ResourceManager.GetString("DatabaseSourceServerTypesHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the connection to the Database. .
        /// </summary>
        public static string DatabaseSourceTestConnectionHelp {
            get {
                return ResourceManager.GetString("DatabaseSourceTestConnectionHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type:.
        /// </summary>
        public static string DatabaseSourceTypeLabel {
            get {
                return ResourceManager.GetString("DatabaseSourceTypeLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the type of database you want to connect to.
        /// </summary>
        public static string DatabaseSourceTypeToolTip {
            get {
                return ResourceManager.GetString("DatabaseSourceTypeToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Address:.
        /// </summary>
        public static string DatabaseWebserviceLabel {
            get {
                return ResourceManager.GetString("DatabaseWebserviceLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When the variable is not used in the service at all, you can select Marks the variable as an input to the service. To pass this variable into the workflow, make this checkbox selected.&lt;br/&gt;
        ///&lt;br/&gt;
        ///This variable is not being used in the service and can safely be deleted..
        /// </summary>
        public static string DataListDeleteButtonHelp {
            get {
                return ResourceManager.GetString("DataListDeleteButtonHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Marks the variable as an input to the service. To pass this variable into the workflow, make this checkbox selected.&lt;br/&gt;
        ///&lt;br/&gt;
        ///&lt;a href=&quot;http://warewolf.io/knowledge-base/the-variable-list/&quot;  target=&quot;_blank&quot;&gt;Read more in the Knowledge Base.&lt;/a&gt;.
        /// </summary>
        public static string DataListInputCheckBoxHelp {
            get {
                return ResourceManager.GetString("DataListInputCheckBoxHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DataListInputCheckBoxTooltip.
        /// </summary>
        public static string DataListInputCheckBoxTooltip {
            get {
                return ResourceManager.GetString("DataListInputCheckBoxTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Marks the variable as an output of the service. To return this variable from the workflow service, make this checkbox selected.&lt;br/&gt;
        ///&lt;br/&gt;
        ///&lt;a href=&quot;http://warewolf.io/knowledge-base/warewolf-language/&quot;  target=&quot;_blank&quot;&gt;Read more in the Knowledge Base.&lt;/a&gt;.
        /// </summary>
        public static string DataListOutputCheckBoxHelp {
            get {
                return ResourceManager.GetString("DataListOutputCheckBoxHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DataListOutputCheckBoxTooltip.
        /// </summary>
        public static string DataListOutputCheckBoxTooltip {
            get {
                return ResourceManager.GetString("DataListOutputCheckBoxTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sort the variable list alphabetically..
        /// </summary>
        public static string DataListSortButtonHelp {
            get {
                return ResourceManager.GetString("DataListSortButtonHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Input the variable you want to use in your service.&lt;br/&gt;
        ///&lt;br/&gt;
        ///If you use a variable on the design surface it will automatically appear here.&lt;br/&gt;
        ///&lt;br/&gt;
        ///&lt;a href=&quot;http://warewolf.io/knowledge-base/the-variable-list/&quot;  target=&quot;_blank&quot;&gt;Read more in the Knowledge Base.&lt;/a&gt;.
        /// </summary>
        public static string DataListVariableInputHelp {
            get {
                return ResourceManager.GetString("DataListVariableInputHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DataListVariableInputTooltip.
        /// </summary>
        public static string DataListVariableInputTooltip {
            get {
                return ResourceManager.GetString("DataListVariableInputTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For Index you can specify if your data is aligned to the right or left.&lt;br/&gt;
        ///        E.g. Text is normally left and numbers normally right.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        na.
        /// </summary>
        public static string DataMergeHelpAlignType {
            get {
                return ResourceManager.GetString("DataMergeHelpAlignType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        To join two or more pieces of data together list them in the order you would like them joined. If you use recordset (*) notation, the list will be repeated for every record.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string DataMergeHelpInput {
            get {
                return ResourceManager.GetString("DataMergeHelpInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If Index is being used and there is extra space between the data supplied and the number of index characters, you can specify what makes up the padding e.g.&lt;br/&gt;
        ///        0 for numbers or blank space for text.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string DataMergeHelpPadding {
            get {
                return ResourceManager.GetString("DataMergeHelpPadding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns the merged string.&lt;br /&gt;
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br /&gt;
        ///        Using recordset() will add a new record and (*) will assign every record.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string DataMergeHelpResult {
            get {
                return ResourceManager.GetString("DataMergeHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For Index use the number of characters that this merge will use. It will either trim if too little, or pad if too much.&lt;br /&gt;
        ///        For Char put any characters or combination of characters you would like.&lt;br/&gt;
        ///        Not applicable to New Line or Tab&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string DataMergeHelpUsing {
            get {
                return ResourceManager.GetString("DataMergeHelpUsing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the type of merge you would like between each piece of merged data, if any.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        na.
        /// </summary>
        public static string DataMergeHelpWithType {
            get {
                return ResourceManager.GetString("DataMergeHelpWithType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If there is an occurrence or an item being split on, that should not be split on, it will be preceded with this character. e.g.&lt;br/&gt; 
        ///        A comma separated file might have a comma in a name, so don’t split on it if it is preceded by / or some other characters.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DataSplitHelpEscape {
            get {
                return ResourceManager.GetString("DataSplitHelpEscape", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you would like the data or item you are splitting on to be included in the result data, select this checkbox.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Include the information you are splitting on?.
        /// </summary>
        public static string DataSplitHelpInclude {
            get {
                return ResourceManager.GetString("DataSplitHelpInclude", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default direction to process is forward or left to right (reading direction).&lt;br/&gt; 
        ///        Selecting Backwards will process from the end of the data (right) to the beginning (left).&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Which direction would you like to process in?.
        /// </summary>
        public static string DataSplitHelpProcessDirection {
            get {
                return ResourceManager.GetString("DataSplitHelpProcessDirection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns the split data in the pattern as described by the results.&lt;br /&gt;
        ///        The variable pattern will be repeated until the end of the input data.&lt;br /&gt;
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br /&gt;
        ///        Using recordset() will add a new record and (*) will assign every record.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*). [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DataSplitHelpResult {
            get {
                return ResourceManager.GetString("DataSplitHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For file processing you can skip rows in the file that are blank. This saves you having to remove them afterwards.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Blank rows will be ignored.
        /// </summary>
        public static string DataSplitHelpSkipBlankRows {
            get {
                return ResourceManager.GetString("DataSplitHelpSkipBlankRows", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        To split a value into one or more variables, put the value in here.&lt;br /&gt;
        ///        You can process entire file content or just trim the white space from a variable.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string DataSplitHelpString {
            get {
                return ResourceManager.GetString("DataSplitHelpString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For Index use the number of characters that this split will use.&lt;br /&gt;
        ///        For Char put any characters or combination of characters you would like.&lt;br /&gt;
        ///        Not applicable to New Line, Tab or End&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string DataSplitHelpUsing {
            get {
                return ResourceManager.GetString("DataSplitHelpUsing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select where you would like to split the data.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        na.
        /// </summary>
        public static string DataSplitHelpWithType {
            get {
                return ResourceManager.GetString("DataSplitHelpWithType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        To find the difference in time between two date times, put the first date time in here.&lt;br/&gt;
        ///        The format needs to be the same for the two.&lt;br/&gt;
        ///        Leaving this field blank will give you the system date time.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DateTimeDifferenceHelpDatetime1 {
            get {
                return ResourceManager.GetString("DateTimeDifferenceHelpDatetime1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        To find the difference in time between two date times, put the second date time in here.&lt;br/&gt;
        ///        The format needs to be the same for the two.&lt;br/&gt;
        ///        Leaving this field blank will give you the system date time.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DateTimeDifferenceHelpDatetime2 {
            get {
                return ResourceManager.GetString("DateTimeDifferenceHelpDatetime2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Describe the format of the date times you are entering. e.g.&lt;br/&gt;
        ///        23-July 1978 would be described as dd-MM yyyy.&lt;br/&gt;
        ///        Leaving this field blank will assume the system date time format.&lt;br/&gt;
        ///        To escape text or non-date information use &apos;around the text you want to escape&apos;. e.g.&lt;br/&gt;
        ///        Time is now 15 hours and 33 minutes. Would have an input format of &apos;Time is now&apos; 24hr &apos;hours and&apos; min &apos;minutes.&apos;&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DateTimeDifferenceHelpInputFormat {
            get {
                return ResourceManager.GetString("DateTimeDifferenceHelpInputFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the unit of time to output the difference in.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        na.
        /// </summary>
        public static string DateTimeDifferenceHelpOutputType {
            get {
                return ResourceManager.GetString("DateTimeDifferenceHelpOutputType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns the difference in time between the two date times.&lt;br /&gt;
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br /&gt;
        ///        Using recordset() will add a new record and (*) will assign every record.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string DateTimeDifferenceHelpResult {
            get {
                return ResourceManager.GetString("DateTimeDifferenceHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Put a positive or negative number here to add or subtract from the input date time.&lt;br/&gt; 
        ///        Leave this field blank if you do not want to change the date time.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string DateTimeHelpAddtime {
            get {
                return ResourceManager.GetString("DateTimeHelpAddtime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        To format a date time, or to add/subtract from a date time, put it in here.&lt;br/&gt; 
        ///        Leaving this field blank will give you the system date time.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string DateTimeHelpDatetime {
            get {
                return ResourceManager.GetString("DateTimeHelpDatetime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Describe the format of the date time you are entering. e.g. &lt;br/&gt; 
        ///        23-July 1978 would be described as dd-MM yyyy.&lt;br/&gt;
        ///        Leaving this field blank will assume the system date time format.&lt;br/&gt;
        ///        To escape text or non-date information use &apos;around the text you want to escape&apos;. e.g. &lt;br/&gt; 
        ///        Time is now 15 hours and 33 minutes. Would have an input format of &apos;Time is now&apos; 24hr &apos;hours and&apos; min &apos;minutes.&apos;&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///           [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DateTimeHelpInputformat {
            get {
                return ResourceManager.GetString("DateTimeHelpInputformat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Describe the format you would like the date time to be returned in.&lt;br/&gt;
        ///        Leaving this field blank will assume the same as the Input Format.&lt;br/&gt;
        ///        To include text or non-date information use &apos;around the text you want to escape&apos;. e.g.&lt;br/&gt; 
        ///        Time is now 15 hours and 33 minutes. Would have an output format of &apos;Time is now&apos; 24hr &apos;hours and&apos; min &apos;minutes.&apos;&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n) [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DateTimeHelpOutputformat {
            get {
                return ResourceManager.GetString("DateTimeHelpOutputformat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns the formatted and/or added/subtracted date time.&lt;br /&gt;
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br /&gt;
        ///        Using recordset() will add a new record and (*) will assign every record.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string DateTimeHelpResult {
            get {
                return ResourceManager.GetString("DateTimeHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the unit of time to add or subtract. This is ignored if the unit is blank or 0.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        na.
        /// </summary>
        public static string DateTimeHelpTimeType {
            get {
                return ResourceManager.GetString("DateTimeHelpTimeType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Put your test data in here then click Test. If possible this execution will automatically roll back..
        /// </summary>
        public static string DbInputDefaultValueHelp {
            get {
                return ResourceManager.GetString("DbInputDefaultValueHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This data is used for testing and not at run time..
        /// </summary>
        public static string DbInsertToolTipColumn {
            get {
                return ResourceManager.GetString("DbInsertToolTipColumn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clear the filter box.
        /// </summary>
        public static string DebugOutputClearSearchTooltip {
            get {
                return ResourceManager.GetString("DebugOutputClearSearchTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adjust the debug output.
        /// </summary>
        public static string DebugOutputOptionsToolTip {
            get {
                return ResourceManager.GetString("DebugOutputOptionsToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filter the debug output information.
        /// </summary>
        public static string DebugOutputSearchToolTip {
            get {
                return ResourceManager.GetString("DebugOutputSearchToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expand/Collapse all.
        /// </summary>
        public static string DebugOutputViewExpandAllHelp {
            get {
                return ResourceManager.GetString("DebugOutputViewExpandAllHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filter the debug response information.
        /// </summary>
        public static string DebugOutputViewFilterSearchHelp {
            get {
                return ResourceManager.GetString("DebugOutputViewFilterSearchHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the debug items that reflect in the debug output..
        /// </summary>
        public static string DebugOutputViewOptionsHelp {
            get {
                return ResourceManager.GetString("DebugOutputViewOptionsHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Run and debug your workflow service.
        /// </summary>
        public static string DebugToolTip {
            get {
                return ResourceManager.GetString("DebugToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to localhost.
        /// </summary>
        public static string DefaultEnvironmentName {
            get {
                return ResourceManager.GetString("DefaultEnvironmentName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Defaults and Mapping.
        /// </summary>
        public static string DefaultMappings {
            get {
                return ResourceManager.GetString("DefaultMappings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default Query:.
        /// </summary>
        public static string DefaultQueryLabel {
            get {
                return ResourceManager.GetString("DefaultQueryLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Are you sure you want to delete {0}?.
        /// </summary>
        public static string DeleteConfirmation {
            get {
                return ResourceManager.GetString("DeleteConfirmation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        To Delete a file or folder, put the full path and file or folder name to delete in here.&lt;br/&gt;
        ///        You can use File System, URI, SFTP, FTP or FTPS format.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string DeleteHelpFileFolder {
            get {
                return ResourceManager.GetString("DeleteHelpFileFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Password of an account with permission to perform this action.&lt;br/&gt;
        ///        By default the account running Warewolf Server.exe service will be used.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string DeleteHelpPassword {
            get {
                return ResourceManager.GetString("DeleteHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to * in Recordset will execute every index in the given recordset.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Recordset(n)]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*)]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset()]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string DeleteHelpRecords {
            get {
                return ResourceManager.GetString("DeleteHelpRecords", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns Success or Failure depending on the success of the Delete action.&lt;br /&gt;
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br /&gt;
        ///        Using recordset() will add a new record and (*) will assign every record.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string DeleteHelpResult {
            get {
                return ResourceManager.GetString("DeleteHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Username of an account with permission to perform this action.&lt;br/&gt;
        ///        By default the account running Warewolf Server.exe service will be used.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string DeleteHelpUsername {
            get {
                return ResourceManager.GetString("DeleteHelpUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;Are you sure you want to delete {0}?&quot;.
        /// </summary>
        public static string DeleteVersionMessage {
            get {
                return ResourceManager.GetString("DeleteVersionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delete Version.
        /// </summary>
        public static string DeleteVersionMessageHeader {
            get {
                return ResourceManager.GetString("DeleteVersionMessageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deploy the selected Source files to the Destination Server..
        /// </summary>
        public static string DeployCommandHelp {
            get {
                return ResourceManager.GetString("DeployCommandHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Click to Deploy to source server resources to the destination server..
        /// </summary>
        public static string DeployCommandTooltip {
            get {
                return ResourceManager.GetString("DeployCommandTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to These are the new resources that will be found on the remote server after deploy..
        /// </summary>
        public static string DeployNewResourcesViewHelp {
            get {
                return ResourceManager.GetString("DeployNewResourcesViewHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to These resources will be overwritten on the destination server.&lt;br/&gt;
        ///&lt;br/&gt;
        ///If the names are different, it is because the resource has been renamed. It will still be overwritten and then Source name will be used at the Destination..
        /// </summary>
        public static string DeployOverridesCountViewHelp {
            get {
                return ResourceManager.GetString("DeployOverridesCountViewHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically include everything that this resource would need to execute at the destination.&lt;br/&gt;
        ///&lt;br/&gt;
        ///&lt;b&gt;Warning: &lt;b/&gt;Deploying Sources that are already on the destination Server, will overwrite their connection strings. .
        /// </summary>
        public static string DeploySelectDependenciesHelp {
            get {
                return ResourceManager.GetString("DeploySelectDependenciesHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically select dependent resources. WARNING: Overwriting Sources on the destination is not recommended..
        /// </summary>
        public static string DeploySelectDependenciesTooltip {
            get {
                return ResourceManager.GetString("DeploySelectDependenciesTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to http://dev2.co.za/.
        /// </summary>
        public static string DevUrl {
            get {
                return ResourceManager.GetString("DevUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Are you sure you wish to delete the {0} {1}?
        ///
        ///Version History will also be deleted..
        /// </summary>
        public static string DialogBody_ConfirmDelete {
            get {
                return ResourceManager.GetString("DialogBody_ConfirmDelete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Are you sure you wish to delete {0} folder and all its contents?.
        /// </summary>
        public static string DialogBody_ConfirmFolderDelete {
            get {
                return ResourceManager.GetString("DialogBody_ConfirmFolderDelete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This folder cannot be deleted because it contains resources with dependants..
        /// </summary>
        public static string DialogBody_FolderContentsHaveDependencies {
            get {
                return ResourceManager.GetString("DialogBody_FolderContentsHaveDependencies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} {1} cannot be deleted because something depends on it..
        /// </summary>
        public static string DialogBody_HasDependencies {
            get {
                return ResourceManager.GetString("DialogBody_HasDependencies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} {1} cannot be renamed because a resource with that name already exists on the same server..
        /// </summary>
        public static string DialogBody_HasDuplicateName {
            get {
                return ResourceManager.GetString("DialogBody_HasDuplicateName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The workflow &apos;{0}&apos; that you are closing is not saved.
        ///Would you like to save the workflow?
        ///-------------------------------------------------------------------
        ///Yes - Save the workflow.
        ///No - Discard your changes.
        ///Cancel - Returns you to the workflow..
        /// </summary>
        public static string DialogBody_NotSaved {
            get {
                return ResourceManager.GetString("DialogBody_NotSaved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Confirm delete..
        /// </summary>
        public static string DialogTitle_ConfirmDelete {
            get {
                return ResourceManager.GetString("DialogTitle_ConfirmDelete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Folder has dependants.
        /// </summary>
        public static string DialogTitle_FolderHasDependencies {
            get {
                return ResourceManager.GetString("DialogTitle_FolderHasDependencies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} has dependants.
        /// </summary>
        public static string DialogTitle_HasDependencies {
            get {
                return ResourceManager.GetString("DialogTitle_HasDependencies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} exists.
        /// </summary>
        public static string DialogTitle_HasDuplicateName {
            get {
                return ResourceManager.GetString("DialogTitle_HasDuplicateName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Workflow not saved....
        /// </summary>
        public static string DialogTitle_NotSaved {
            get {
                return ResourceManager.GetString("DialogTitle_NotSaved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Did you know?.
        /// </summary>
        public static string DidYouKnow {
            get {
                return ResourceManager.GetString("DidYouKnow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DotNet DLL Test Connector and Calculate Outputs.
        /// </summary>
        public static string DotNetDllTestHeader {
            get {
                return ResourceManager.GetString("DotNetDllTestHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data or variable that will be passed into the action at run time..
        /// </summary>
        public static string DotNetInputDefaultValueHelp {
            get {
                return ResourceManager.GetString("DotNetInputDefaultValueHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hard coded values or variables..
        /// </summary>
        public static string DotNetInsertToolTipColumn {
            get {
                return ResourceManager.GetString("DotNetInsertToolTipColumn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        To download the file, put the full destination path and file name in here.&lt;br/&gt;
        ///        You can use File System, URI, SFTP, FTP or FTPS format.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string DownloadFileHelpFilename {
            get {
                return ResourceManager.GetString("DownloadFileHelpFilename", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You are not allowed to drag remote workflows onto a remote service designer..
        /// </summary>
        public static string DragRemoteNotSupported {
            get {
                return ResourceManager.GetString("DragRemoteNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid Designer Operation.
        /// </summary>
        public static string DragRemoteNotSupportedHeader {
            get {
                return ResourceManager.GetString("DragRemoteNotSupportedHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Dropbox Source.
        /// </summary>
        public static string DropboxSourceNewHeaderLabel {
            get {
                return ResourceManager.GetString("DropboxSourceNewHeaderLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit the email source that is selected..
        /// </summary>
        public static string EditEmailSourceHelp {
            get {
                return ResourceManager.GetString("EditEmailSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter the path to the attachments you want to send separated by a semicolon ;&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string EmailHelpAttachments {
            get {
                return ResourceManager.GetString("EmailHelpAttachments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List the email addresses you want to blind carbon copy on the email you are sending separated by a semicolon ;&lt;br /&gt;
        ///        If you are on a domain, you still need to provide the email address of the account you are sending to.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string EmailHelpBcc {
            get {
                return ResourceManager.GetString("EmailHelpBcc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The main body of the email goes in here.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string EmailHelpBody {
            get {
                return ResourceManager.GetString("EmailHelpBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the email is HTML, select this checkbox. If it is plain text, uncheck the box..
        /// </summary>
        public static string EmailHelpBodyCheckbox {
            get {
                return ResourceManager.GetString("EmailHelpBodyCheckbox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List the email addresses you want to carbon copy on the email you are sending separated by a semicolon ;&lt;br /&gt;
        ///        If you are on a domain, you still need to provide the email address of the account you are sending to.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string EmailHelpCc {
            get {
                return ResourceManager.GetString("EmailHelpCc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any data or variable can go in here.&lt;br/&gt;
        ///        To send an email, enter the email address of the account you want to send from.&lt;br /&gt;
        ///        If you are on a domain, you still need to provide the email address of the account you are sending from.&lt;br /&gt;
        ///        If you leave it blank, the account used to setup the Email Source will be used.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[R [rest of string was truncated]&quot;;.
        /// </summary>
        public static string EmailHelpFromAddress {
            get {
                return ResourceManager.GetString("EmailHelpFromAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select a preconfigured email source or &quot;New Email Source...&quot; to add a new one.&lt;br /&gt;
        ///.
        /// </summary>
        public static string EmailHelpMailSource {
            get {
                return ResourceManager.GetString("EmailHelpMailSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter the password, if there is one, for the account you are sending from.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string EmailHelpPassword {
            get {
                return ResourceManager.GetString("EmailHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the message priority.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        na.
        /// </summary>
        public static string EmailHelpPriorityType {
            get {
                return ResourceManager.GetString("EmailHelpPriorityType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns Success or Failure depending on the success of the send action.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string EmailHelpResult {
            get {
                return ResourceManager.GetString("EmailHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter the subject for your email.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string EmailHelpSubject {
            get {
                return ResourceManager.GetString("EmailHelpSubject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List the email addresses you want to send to separated by a semicolon ;&lt;br/&gt;
        ///        If you are on a domain, you still need to provide the email address of the account you are sending to.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string EmailHelpTo {
            get {
                return ResourceManager.GetString("EmailHelpTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit .
        /// </summary>
        public static string EmailSourceEditHeaderLabel {
            get {
                return ResourceManager.GetString("EmailSourceEditHeaderLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The email address that will be used to send the email from.&lt;br/&gt;
        ///&lt;br/&gt;
        ///This account needs to be a valid email address/account for the Host server..
        /// </summary>
        public static string EmailSourceEmailFromHelp {
            get {
                return ResourceManager.GetString("EmailSourceEmailFromHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to From.
        /// </summary>
        public static string EmailSourceEmailFromLabel {
            get {
                return ResourceManager.GetString("EmailSourceEmailFromLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The email address you want to send the test message to..
        /// </summary>
        public static string EmailSourceEmailToHelp {
            get {
                return ResourceManager.GetString("EmailSourceEmailToHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To.
        /// </summary>
        public static string EmailSourceEmailToLabel {
            get {
                return ResourceManager.GetString("EmailSourceEmailToLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Does the Host require a secure connection?
        ///&lt;style type=&quot;text/css&quot;&gt;#smtptable td{text-align:center;border:0px;}&lt;/style&gt;&lt;br/&gt;
        ///e.g.&lt;br/&gt;
        ///&lt;table border=&quot;1&quot; id=&quot;smtptable&quot;&gt;
        ///&lt;tr align=&quot;center&quot;&gt;&lt;th&gt;Host&lt;/th&gt;&lt;th&gt;Require SSL&lt;/th&gt;&lt;th&gt;Port&lt;/th&gt;&lt;/tr&gt;
        ///&lt;tr&gt;&lt;td&gt;smtp.&lt;b&gt;gmail&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;587&lt;/td&gt;&lt;/tr&gt;
        ///&lt;tr&gt;&lt;td&gt;smtp.&lt;b&gt;yahoo&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt;
        ///&lt;tr&gt;&lt;td&gt;smtp.&lt;b&gt;zoho&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;465&lt;/td&gt;&lt;/tr&gt;
        ///&lt;tr&gt;&lt;td&gt;smtp-mail.&lt;b&gt;outlook&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;587&lt;/td&gt;&lt;/tr&gt;
        ///&lt;tr&gt;&lt;td&gt;smtp. [rest of string was truncated]&quot;;.
        /// </summary>
        public static string EmailSourceEnableSslHelp {
            get {
                return ResourceManager.GetString("EmailSourceEnableSslHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable SSL.
        /// </summary>
        public static string EmailSourceEnableSslLabel {
            get {
                return ResourceManager.GetString("EmailSourceEnableSslLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Host name of the server you want to use for sending emails.
        ///&lt;style type=&quot;text/css&quot;&gt;#smtptable td{text-align:center;border:0px;}&lt;/style&gt;&lt;br/&gt;
        ///e.g.&lt;br/&gt;
        ///&lt;table border=&quot;1&quot; id=&quot;smtptable&quot;&gt;
        ///&lt;tr align=&quot;center&quot;&gt;&lt;th&gt;Host&lt;/th&gt;&lt;th&gt;Require SSL&lt;/th&gt;&lt;th&gt;Port&lt;/th&gt;&lt;/tr&gt;
        ///&lt;tr&gt;&lt;td&gt;smtp.&lt;b&gt;gmail&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;587&lt;/td&gt;&lt;/tr&gt;
        ///&lt;tr&gt;&lt;td&gt;smtp.&lt;b&gt;yahoo&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt;
        ///&lt;tr&gt;&lt;td&gt;smtp.&lt;b&gt;zoho&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;465&lt;/td&gt;&lt;/tr&gt;
        ///&lt;tr&gt;&lt;td&gt;smtp-mail.&lt;b&gt;outlook&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;587&lt;/t [rest of string was truncated]&quot;;.
        /// </summary>
        public static string EmailSourceHostNameHelp {
            get {
                return ResourceManager.GetString("EmailSourceHostNameHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Email Source.
        /// </summary>
        public static string EmailSourceNewHeaderLabel {
            get {
                return ResourceManager.GetString("EmailSourceNewHeaderLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;style type=&quot;text/css&quot;&gt;
        ///#smtptable td
        ///{
        ///text-align:center;
        ///border:0px;
        ///}
        ///&lt;/style&gt;
        ///The Port of the email server.
        ///&lt;br/&gt;
        ///e.g.&lt;br/&gt;
        ///&lt;table border=&quot;1&quot; id=&quot;smtptable&quot;&gt;
        ///&lt;tr align=&quot;center&quot;&gt;&lt;th&gt;Host&lt;/th&gt;&lt;th&gt;Require SSL&lt;/th&gt;&lt;th&gt;Port&lt;/th&gt;&lt;/tr&gt;
        ///&lt;tr&gt;&lt;td&gt;smtp.&lt;b&gt;gmail&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;587&lt;/td&gt;&lt;/tr&gt;
        ///&lt;tr&gt;&lt;td&gt;smtp.&lt;b&gt;yahoo&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt;
        ///&lt;tr&gt;&lt;td&gt;smtp.&lt;b&gt;zoho&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;465&lt;/td&gt;&lt;/tr&gt;
        ///&lt;tr&gt;&lt;td&gt;smtp-mail.&lt;b&gt;outlook&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;587&lt;/td&gt;&lt;/tr&gt;
        ///&lt;tr&gt;&lt;td&gt;smtp.&lt;b&gt;liv [rest of string was truncated]&quot;;.
        /// </summary>
        public static string EmailSourcePortHelp {
            get {
                return ResourceManager.GetString("EmailSourcePortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the settings you have entered by sending a test email..
        /// </summary>
        public static string EmailSourceTestHelp {
            get {
                return ResourceManager.GetString("EmailSourceTestHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The time allowed for the operation to connect before throwing an error..
        /// </summary>
        public static string EmailSourceTimeoutHelp {
            get {
                return ResourceManager.GetString("EmailSourceTimeoutHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Timeout.
        /// </summary>
        public static string EmailSourceTimeoutLabel {
            get {
                return ResourceManager.GetString("EmailSourceTimeoutLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets the body type to HTML (Checked) or plain text (Unchecked).
        /// </summary>
        public static string EmailTooltipBodyCheckbox {
            get {
                return ResourceManager.GetString("EmailTooltipBodyCheckbox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Environments.
        /// </summary>
        public static string Environments_Directory {
            get {
                return ResourceManager.GetString("Environments_Directory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connection Failed.
        /// </summary>
        public static string Error_Connect_Failed {
            get {
                return ResourceManager.GetString("Error_Connect_Failed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name not provided.
        /// </summary>
        public static string Error_DSF_Name_Not_Provided {
            get {
                return ResourceManager.GetString("Error_DSF_Name_Not_Provided", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The recordset name is a duplicate of an existing recordset. Recordset names must be unique..
        /// </summary>
        public static string ErrorMessageDuplicateRecordset {
            get {
                return ResourceManager.GetString("ErrorMessageDuplicateRecordset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable names must be unique..
        /// </summary>
        public static string ErrorMessageDuplicateValue {
            get {
                return ResourceManager.GetString("ErrorMessageDuplicateValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This variable name is a duplicate of an existing variable. Variable names must be unique..
        /// </summary>
        public static string ErrorMessageDuplicateVariable {
            get {
                return ResourceManager.GetString("ErrorMessageDuplicateVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recordset must contain one or more field(s)..
        /// </summary>
        public static string ErrorMessageEmptyRecordSet {
            get {
                return ResourceManager.GetString("ErrorMessageEmptyRecordSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable name contains invalid character(s)..
        /// </summary>
        public static string ErrorMessageInvalidChar {
            get {
                return ResourceManager.GetString("ErrorMessageInvalidChar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error : .
        /// </summary>
        public static string ErrorPrefix {
            get {
                return ResourceManager.GetString("ErrorPrefix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error.
        /// </summary>
        public static string ErrorTitle {
            get {
                return ResourceManager.GetString("ErrorTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to http://warewolf.io/eula/.
        /// </summary>
        public static string EULA_Link {
            get {
                return ResourceManager.GetString("EULA_Link", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warewolf EULA.
        /// </summary>
        public static string EULA_Text {
            get {
                return ResourceManager.GetString("EULA_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} example cannot be found. 
        /// Please re-install or upgrade to the latest version to resolve this issue.
        /// </summary>
        public static string ExampleWorkflowNotFound {
            get {
                return ResourceManager.GetString("ExampleWorkflowNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the connection string properties of the selected connection.&lt;br&gt;
        ///&lt;br/&gt;
        ///Change the connection string from, say, a development database to a live database.&lt;br/&gt;
        ///&lt;br/&gt;
        ///&lt;a href=&quot;http://warewolf.io/knowledge-base/data-connectors&quot; target=&quot;_blank&quot;&gt;Read more in the Knowledge Base.&lt;/a&gt;.
        /// </summary>
        public static string ExchangeServiceEditSourceHelp {
            get {
                return ResourceManager.GetString("ExchangeServiceEditSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a connection to a new exchange server..
        /// </summary>
        public static string ExchangeServiceNewSourceHelp {
            get {
                return ResourceManager.GetString("ExchangeServiceNewSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The available exchange connections. To create a new connection, click New..
        /// </summary>
        public static string ExchangeServiceSourceTypesHelp {
            get {
                return ResourceManager.GetString("ExchangeServiceSourceTypesHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Exchange Source.
        /// </summary>
        public static string ExchangeSourceNewHeaderLabel {
            get {
                return ResourceManager.GetString("ExchangeSourceNewHeaderLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expand or collapse all execution nodes..
        /// </summary>
        public static string ExpandCollapseAllToolTip {
            get {
                return ResourceManager.GetString("ExpandCollapseAllToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to http://warewolf.io/knowledge-base/.
        /// </summary>
        public static string ExpertHelpUrl {
            get {
                return ResourceManager.GetString("ExpertHelpUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clear the filter on connected resources.
        /// </summary>
        public static string ExplorerClearSearchTooltip {
            get {
                return ResourceManager.GetString("ExplorerClearSearchTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have view permission on this item. Click to open.
        /// </summary>
        public static string ExplorerItemEditToolTip {
            get {
                return ResourceManager.GetString("ExplorerItemEditToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have execute permission on this item. Click to execute.
        /// </summary>
        public static string ExplorerItemExecuteToolTip {
            get {
                return ResourceManager.GetString("ExplorerItemExecuteToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refresh the connected resources.
        /// </summary>
        public static string ExplorerRefreshToolTip {
            get {
                return ResourceManager.GetString("ExplorerRefreshToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filter the connected resources.
        /// </summary>
        public static string ExplorerSearchToolTip {
            get {
                return ResourceManager.GetString("ExplorerSearchToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Search the connected servers by filtering based on this input..
        /// </summary>
        public static string ExplorerViewFilterSearchHelp {
            get {
                return ResourceManager.GetString("ExplorerViewFilterSearchHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refresh the connected server(s) content..
        /// </summary>
        public static string ExplorerViewRefreshHelp {
            get {
                return ResourceManager.GetString("ExplorerViewRefreshHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feedback.
        /// </summary>
        public static string Feedback_Recordings_Directory {
            get {
                return ResourceManager.GetString("Feedback_Recordings_Directory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to feedback@warewolf.io.
        /// </summary>
        public static string FeedbackEmail {
            get {
                return ResourceManager.GetString("FeedbackEmail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value that the search will start at, this must be a number, date or time and must be the same type as the &quot;To&quot; type.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string FindHelpFrom {
            get {
                return ResourceManager.GetString("FindHelpFrom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To find the indexes/rows that match certain criteria, put the comma separated list of fields to search in here.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string FindHelpInFields {
            get {
                return ResourceManager.GetString("FindHelpInFields", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the type of information you want to match on.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        na.
        /// </summary>
        public static string FindHelpLookForMatchType {
            get {
                return ResourceManager.GetString("FindHelpLookForMatchType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to See in tool&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string FindHelpMatch {
            get {
                return ResourceManager.GetString("FindHelpMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Will only return rows where each field specified meets the match criteria if selected.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Should all the fields match?.
        /// </summary>
        public static string FindHelpRequireAllFieldsToMatch {
            get {
                return ResourceManager.GetString("FindHelpRequireAllFieldsToMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Will only return rows that match all of the criteria if selected.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Should each criteria be met?.
        /// </summary>
        public static string FindHelpRequireAllMatchesToBeTrue {
            get {
                return ResourceManager.GetString("FindHelpRequireAllMatchesToBeTrue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns the indexes of the successful matches.&lt;br /&gt;
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br /&gt;
        ///        Using recordset() will add a new record and (*) will assign every record.&lt;br /&gt;
        ///        If there are multiple results and a scalar is used, then each result will be separated with a comma.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Rec [rest of string was truncated]&quot;;.
        /// </summary>
        public static string FindHelpResult {
            get {
                return ResourceManager.GetString("FindHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value that the search will end at, this must be a number, date or time and must be the same type as the &quot;From&quot; type.&lt;br /&gt;&lt;br /&gt;
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string FindHelpTo {
            get {
                return ResourceManager.GetString("FindHelpTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        Put the index of the string you are looking for in here.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string FindIndexHelpCharacters {
            get {
                return ResourceManager.GetString("FindIndexHelpCharacters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the direction to search in.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        na.
        /// </summary>
        public static string FindIndexHelpDirectiontype {
            get {
                return ResourceManager.GetString("FindIndexHelpDirectiontype", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select which index(es) you would like found.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        na.
        /// </summary>
        public static string FindIndexHelpIndexType {
            get {
                return ResourceManager.GetString("FindIndexHelpIndexType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        To find the character index(es) of a string inside another string, put the string to be searched here.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string FindIndexHelpInField {
            get {
                return ResourceManager.GetString("FindIndexHelpInField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns the index(es) of the found string.&lt;br /&gt;
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br /&gt;
        ///        Using recordset () will add a new record and (*) will assign every record.&lt;br/&gt; 
        ///        If you are finding All Occurrences and using a scalar, the results will be comma separated.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Fi [rest of string was truncated]&quot;;.
        /// </summary>
        public static string FindIndexHelpResult {
            get {
                return ResourceManager.GetString("FindIndexHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value that the search will start at, this must be a number, date or time and must be the same type as the &quot;To&quot; type..
        /// </summary>
        public static string FindRecordsFromHelpText {
            get {
                return ResourceManager.GetString("FindRecordsFromHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value that the search will end at, this must be a number, date or time and must be the same type as the &quot;From&quot; type..
        /// </summary>
        public static string FindRecordsToHelpText {
            get {
                return ResourceManager.GetString("FindRecordsToHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generally Replaces the * in the activity with the relevant index. e.g.&lt;br/&gt;
        ///        If 1-3 is provided then [[Customer(*).ID]] will execute as [[Customer(1).ID]], [[Customer(2).ID]], [[Customer(3).ID]].&lt;br /&gt;
        ///        * in Range allows you to input a range of indexes.&lt;br/&gt;
        ///        * in CSV allows a specific set of indexes to be specified e.g. 1,5,7,9.&lt;br/&gt;
        ///        * in Recordset will execute every index in the given recordset.&lt;br/&gt;
        ///        * in Executes will execute the activity a given number of times and r [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ForEachHelpForEachType {
            get {
                return ResourceManager.GetString("ForEachHelpForEachType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How many decimals should be returned as a factor of 10? e.g.&lt;br/&gt;
        ///        3 will show 0.000 and negative 3 (-3) will show 15000 as 15.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string FormatNumberHelpDecimalsToShow {
            get {
                return ResourceManager.GetString("FormatNumberHelpDecimalsToShow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        To format a number, put the number in here.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string FormatNumberHelpNumber {
            get {
                return ResourceManager.GetString("FormatNumberHelpNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns the formatted number.&lt;br /&gt;
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br /&gt;
        ///        Using recordset () will add a new record and (*) will assign every record.&lt;br/&gt; 
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string FormatNumberHelpResult {
            get {
                return ResourceManager.GetString("FormatNumberHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How would you like to round the number?&lt;br/&gt;
        ///        None: No rounding is done&lt;br /&gt;
        ///        Normal: 5,6,7,8,9 round up 1,2,3,4 round down&lt;br/&gt;
        ///        Up: 1-9 all round up&lt;br/&gt;
        ///        Down: 1-9 all round down&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        na.
        /// </summary>
        public static string FormatNumberHelpRoundType {
            get {
                return ResourceManager.GetString("FormatNumberHelpRoundType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At what point in the number should the rounding be done as a factor of 10? e.g.&lt;br/&gt;
        ///        3 will round to 3 decimal places and negative 3 (-3) will round to the nearest thousand.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string FormatNumberHelpRoundValue {
            get {
                return ResourceManager.GetString("FormatNumberHelpRoundValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Are you sure?.
        /// </summary>
        public static string GenericConfirmation {
            get {
                return ResourceManager.GetString("GenericConfirmation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Host.
        /// </summary>
        public static string HostNameLabel {
            get {
                return ResourceManager.GetString("HostNameLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The variable or the value that you want passed into this action..
        /// </summary>
        public static string InputDefaultValueHelp {
            get {
                return ResourceManager.GetString("InputDefaultValueHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the variable coming in has not value assigned to it, this will allow you to pass it in as NULL..
        /// </summary>
        public static string InputEmptyIsNullDefaultValueHelp {
            get {
                return ResourceManager.GetString("InputEmptyIsNullDefaultValueHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To get the response data of this action, put some test data in. The transaction will be rolled back if possible..
        /// </summary>
        public static string InputGenerateOutputsDefaultHelp {
            get {
                return ResourceManager.GetString("InputGenerateOutputsDefaultHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inputs.
        /// </summary>
        public static string InputsHeader {
            get {
                return ResourceManager.GetString("InputsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can pass variables into your workflow{0}by selecting the Input checkbox{0}in the Variables window..
        /// </summary>
        public static string InputVariablesTip {
            get {
                return ResourceManager.GetString("InputVariablesTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid expression: Opening and closing brackets don&apos;t match..
        /// </summary>
        public static string IntellisenseErrorMisMacthingBrackets {
            get {
                return ResourceManager.GetString("IntellisenseErrorMisMacthingBrackets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;Invalid text&quot;.
        /// </summary>
        public static string InvalidPermissionHeader {
            get {
                return ResourceManager.GetString("InvalidPermissionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{0} is invalid. Warewolf only supports Latin characters&quot;.
        /// </summary>
        public static string InvalidPermissionMessage {
            get {
                return ResourceManager.GetString("InvalidPermissionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;Invalid text&quot;.
        /// </summary>
        public static string InvalidTextHeader {
            get {
                return ResourceManager.GetString("InvalidTextHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{0} is invalid. Warewolf only supports Latin characters&quot;.
        /// </summary>
        public static string InvalidTextMessage {
            get {
                return ResourceManager.GetString("InvalidTextMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To get the length or max index in a recordset, put the recordset name in here. E.g.&lt;br/&gt;
        ///        [[Customer()]]&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        [[Recordset()]].
        /// </summary>
        public static string LengthHelpRecordset {
            get {
                return ResourceManager.GetString("LengthHelpRecordset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here. Returns a number specifying the highest index / max index in the recordset.&lt;br/&gt; 
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string LengthHelpResult {
            get {
                return ResourceManager.GetString("LengthHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to less than 0.4.19.1.
        /// </summary>
        public static string LessThanServerVersion {
            get {
                return ResourceManager.GetString("LessThanServerVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to localhost.
        /// </summary>
        public static string LocalhostLabel {
            get {
                return ResourceManager.GetString("LocalhostLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to Windows Event Log: Details up to System Activity:&lt;br /&gt;
        ///    Server Fatal Events&lt;br /&gt;
        ///  Server Error Events&lt;br /&gt;
        ///Server Warning Events&lt;br /&gt;
        ///Server Pulse Data&lt;br /&gt;
        ///Server System Activity.
        /// </summary>
        public static string LoggingViewServerEventLogDebugHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerEventLogDebugHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Debug, Info, Warning, Error and Fatal events..
        /// </summary>
        public static string LoggingViewServerEventLogDebugTooltip {
            get {
                return ResourceManager.GetString("LoggingViewServerEventLogDebugTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to Windows Event Log: Events up to error details:&lt;br /&gt;
        ///    Server Fatal Events&lt;br /&gt;
        ///  Server Error Events.
        /// </summary>
        public static string LoggingViewServerEventLogErrorHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerEventLogErrorHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Error and Fatal events..
        /// </summary>
        public static string LoggingViewServerEventLogErrorTooltip {
            get {
                return ResourceManager.GetString("LoggingViewServerEventLogErrorTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to Windows Event Log: Only Server fatal events are logged..
        /// </summary>
        public static string LoggingViewServerEventLogFatalHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerEventLogFatalHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Fatal events.
        /// </summary>
        public static string LoggingViewServerEventLogFatalTooltip {
            get {
                return ResourceManager.GetString("LoggingViewServerEventLogFatalTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to Windows Event Log: Up to infromation detail:&lt;br /&gt;
        ///    Server Fatal Events&lt;br /&gt;
        ///  Server Error Events&lt;br /&gt;
        ///Server Warning Events&lt;br /&gt;
        ///Server Pulse Data.
        /// </summary>
        public static string LoggingViewServerEventLogInfoHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerEventLogInfoHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Info, Warning, Error and Fatal events..
        /// </summary>
        public static string LoggingViewServerEventLogInfoTooltip {
            get {
                return ResourceManager.GetString("LoggingViewServerEventLogInfoTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Server logging is done to the Windows Event Log. Logging is highly efficient and will not have a noticeable impact on execution. It is recommended that you turn on logging..
        /// </summary>
        public static string LoggingViewServerEventLogOffHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerEventLogOffHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No logging.
        /// </summary>
        public static string LoggingViewServerEventLogOffTooltip {
            get {
                return ResourceManager.GetString("LoggingViewServerEventLogOffTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs everything to the Windows Event Log:&lt;br /&gt;
        ///    Server Fatal Events&lt;br /&gt;
        ///  Server Error Events&lt;br /&gt;
        ///Server Warning Events&lt;br /&gt;
        ///Server Pulse Data&lt;br /&gt;
        ///Server System Activity&lt;br /&gt;
        ///Server Detailed System information.
        /// </summary>
        public static string LoggingViewServerEventLogTraceHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerEventLogTraceHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Trace, Debug, Info, Warning, Error and Fatal events..
        /// </summary>
        public static string LoggingViewServerEventLogTraceTooltip {
            get {
                return ResourceManager.GetString("LoggingViewServerEventLogTraceTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to Windows Event Log: Events up to warning severity:&lt;br /&gt;
        ///    Server Fatal Events&lt;br /&gt;
        ///  Server Error Events&lt;br /&gt;
        ///Server Warning Events.
        /// </summary>
        public static string LoggingViewServerEventLogWarnHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerEventLogWarnHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Warning, Error and Fatal events..
        /// </summary>
        public static string LoggingViewServerEventLogWarnTooltip {
            get {
                return ResourceManager.GetString("LoggingViewServerEventLogWarnTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to file: Details up to System Activity:&lt;br /&gt;
        ///    Server Fatal Events&lt;br /&gt;
        ///  Server Error Events&lt;br /&gt;
        ///Server Warning Events&lt;br /&gt;
        ///Server Pulse Data&lt;br /&gt;
        ///Server System Activity.
        /// </summary>
        public static string LoggingViewServerFileLogDebugHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerFileLogDebugHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Debug, Info, Warning, Error and Fatal events..
        /// </summary>
        public static string LoggingViewServerFileLogDebugTooltip {
            get {
                return ResourceManager.GetString("LoggingViewServerFileLogDebugTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to file: Events up to error details:&lt;br /&gt;
        ///    Server Fatal Events&lt;br /&gt;
        ///  Server Error Events.
        /// </summary>
        public static string LoggingViewServerFileLogErrorHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerFileLogErrorHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Error and Fatal events..
        /// </summary>
        public static string LoggingViewServerFileLogErrorTooltip {
            get {
                return ResourceManager.GetString("LoggingViewServerFileLogErrorTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to file: Only Server fatal events are logged..
        /// </summary>
        public static string LoggingViewServerFileLogFatalHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerFileLogFatalHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Fatal events..
        /// </summary>
        public static string LoggingViewServerFileLogFatalTooltip {
            get {
                return ResourceManager.GetString("LoggingViewServerFileLogFatalTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to file: Up to infromation detail:&lt;br /&gt;
        ///    Server Fatal Events&lt;br /&gt;
        ///  Server Error Events&lt;br /&gt;
        ///Server Warning Events&lt;br /&gt;
        ///Server Pulse Data.
        /// </summary>
        public static string LoggingViewServerFileLogInfoHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerFileLogInfoHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Info, Warning, Error and Fatal events..
        /// </summary>
        public static string LoggingViewServerFileLogInfoTooltip {
            get {
                return ResourceManager.GetString("LoggingViewServerFileLogInfoTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Server logging is done to file. Logging is highly efficient and will not have a noticeable impact on execution. It is recommended that you turn on logging..
        /// </summary>
        public static string LoggingViewServerFileLogOffHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerFileLogOffHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No logging..
        /// </summary>
        public static string LoggingViewServerFileLogOffTooltip {
            get {
                return ResourceManager.GetString("LoggingViewServerFileLogOffTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs everything to file:&lt;br /&gt;
        ///    Server Fatal Events&lt;br /&gt;
        ///  Server Error Events&lt;br /&gt;
        ///Server Warning Events&lt;br /&gt;
        ///Server Pulse Data&lt;br /&gt;
        ///Server System Activity&lt;br /&gt;
        ///Server Detailed System information.
        /// </summary>
        public static string LoggingViewServerFileLogTraceHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerFileLogTraceHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Trace, Debug, Info, Warning, Error and Fatal events..
        /// </summary>
        public static string LoggingViewServerFileLogTraceTooltip {
            get {
                return ResourceManager.GetString("LoggingViewServerFileLogTraceTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to file: Events up to warning severity:&lt;br /&gt;
        ///    Server Fatal Events&lt;br /&gt;
        ///  Server Error Events&lt;br /&gt;
        ///Server Warning Events.
        /// </summary>
        public static string LoggingViewServerFileLogWarnHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerFileLogWarnHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Warning, Error and Fatal events..
        /// </summary>
        public static string LoggingViewServerFileLogWarnTooltip {
            get {
                return ResourceManager.GetString("LoggingViewServerFileLogWarnTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to Windows Event Log: Details up to System Activity:&lt;br /&gt;
        ///    Studio Fatal Events&lt;br /&gt;
        ///  Studio Error Events&lt;br /&gt;
        ///Studio Warning Events&lt;br /&gt;
        ///Studio Pulse Data&lt;br /&gt;
        ///Studio System Activity.
        /// </summary>
        public static string LoggingViewStudioEventLogDebugHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioEventLogDebugHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Debug, Info, Warning, Error and Fatal events..
        /// </summary>
        public static string LoggingViewStudioEventLogDebugTooltip {
            get {
                return ResourceManager.GetString("LoggingViewStudioEventLogDebugTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to Windows Event Log: Events up to error details:&lt;br /&gt;
        ///    Studio Fatal Events&lt;br /&gt;
        ///  Studio Error Events.
        /// </summary>
        public static string LoggingViewStudioEventLogErrorHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioEventLogErrorHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Studio Error and Studio Fatal events..
        /// </summary>
        public static string LoggingViewStudioEventLogErrorTooltip {
            get {
                return ResourceManager.GetString("LoggingViewStudioEventLogErrorTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to Windows Event Log: Only Studio fatal events are logged..
        /// </summary>
        public static string LoggingViewStudioEventLogFatalHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioEventLogFatalHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Fatal events.
        /// </summary>
        public static string LoggingViewStudioEventLogFatalTooltip {
            get {
                return ResourceManager.GetString("LoggingViewStudioEventLogFatalTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to Windows Event Log: Up to infromation detail:&lt;br /&gt;
        ///    Studio Fatal Events&lt;br /&gt;
        ///  Studio Error Events&lt;br /&gt;
        ///Studio Warning Events&lt;br /&gt;
        ///Studio Pulse Data.
        /// </summary>
        public static string LoggingViewStudioEventLogInfoHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioEventLogInfoHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Info, Warning, Error and Fatal events..
        /// </summary>
        public static string LoggingViewStudioEventLogInfoTooltip {
            get {
                return ResourceManager.GetString("LoggingViewStudioEventLogInfoTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Studio logging is done to Windows Event Logger. Logging is highly efficient and will not have a noticeable impact on execution. It is recommended that you turn on logging..
        /// </summary>
        public static string LoggingViewStudioEventLogOffHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioEventLogOffHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No logging.
        /// </summary>
        public static string LoggingViewStudioEventLogOffTooltip {
            get {
                return ResourceManager.GetString("LoggingViewStudioEventLogOffTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs everything to the Windows Event Log:&lt;br /&gt;
        ///    Studio Fatal Events&lt;br /&gt;
        ///  Studio Error Events&lt;br /&gt;
        ///Studio Warning Events&lt;br /&gt;
        ///Studio Pulse Data&lt;br /&gt;
        ///Studio System Activity&lt;br /&gt;
        ///Studio Detailed System information.
        /// </summary>
        public static string LoggingViewStudioEventLogTraceHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioEventLogTraceHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Trace, Debug, Info, Warning, Error and Fatal events..
        /// </summary>
        public static string LoggingViewStudioEventLogTraceTooltip {
            get {
                return ResourceManager.GetString("LoggingViewStudioEventLogTraceTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to Windows Event Log: Events up to warning severity:&lt;br /&gt;
        ///    Studio Fatal Events&lt;br /&gt;
        ///  Studio Error Events&lt;br /&gt;
        ///Studio Warning Events.
        /// </summary>
        public static string LoggingViewStudioEventLogWarnHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioEventLogWarnHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Warning, Error and Fatal events..
        /// </summary>
        public static string LoggingViewStudioEventLogWarnTooltip {
            get {
                return ResourceManager.GetString("LoggingViewStudioEventLogWarnTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to file: Details up to System Activity:&lt;br /&gt;
        ///    Studio Fatal Events&lt;br /&gt;
        ///  Studio Error Events&lt;br /&gt;
        ///Studio Warning Events&lt;br /&gt;
        ///Studio Pulse Data&lt;br /&gt;
        ///Studio System Activity.
        /// </summary>
        public static string LoggingViewStudioFileLogDebugHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioFileLogDebugHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Debug, Info, Warning, Error and Fatal events..
        /// </summary>
        public static string LoggingViewStudioFileLogDebugTooltip {
            get {
                return ResourceManager.GetString("LoggingViewStudioFileLogDebugTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to file: Events up to error details:&lt;br /&gt;
        ///    Studio Fatal Events&lt;br /&gt;
        ///  Studio Error Events.
        /// </summary>
        public static string LoggingViewStudioFileLogErrorHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioFileLogErrorHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Studio Error and Studio Fatal events..
        /// </summary>
        public static string LoggingViewStudioFileLogErrorTooltip {
            get {
                return ResourceManager.GetString("LoggingViewStudioFileLogErrorTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to file: Only Studio fatal events are logged..
        /// </summary>
        public static string LoggingViewStudioFileLogFatalHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioFileLogFatalHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Studio Fatal events..
        /// </summary>
        public static string LoggingViewStudioFileLogFatalTooltip {
            get {
                return ResourceManager.GetString("LoggingViewStudioFileLogFatalTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to file: Up to infromation detail:&lt;br /&gt;
        ///    Studio Fatal Events&lt;br /&gt;
        ///  Studio Error Events&lt;br /&gt;
        ///Studio Warning Events&lt;br /&gt;
        ///Studio Pulse Data.
        /// </summary>
        public static string LoggingViewStudioFileLogInfoHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioFileLogInfoHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Info, Warning, Error and Fatal events..
        /// </summary>
        public static string LoggingViewStudioFileLogInfoTooltip {
            get {
                return ResourceManager.GetString("LoggingViewStudioFileLogInfoTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Studio logging is done to file. Logging is highly efficient and will not have a noticeable impact on execution. It is recommended that you turn on logging..
        /// </summary>
        public static string LoggingViewStudioFileLogOffHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioFileLogOffHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Studio logging..
        /// </summary>
        public static string LoggingViewStudioFileLogOffTooltip {
            get {
                return ResourceManager.GetString("LoggingViewStudioFileLogOffTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs everything to file:&lt;br /&gt;
        ///    Studio Fatal Events&lt;br /&gt;
        ///  Studio Error Events&lt;br /&gt;
        ///Studio Warning Events&lt;br /&gt;
        ///Studio Pulse Data&lt;br /&gt;
        ///Studio System Activity&lt;br /&gt;
        ///Studio Detailed System information.
        /// </summary>
        public static string LoggingViewStudioFileLogTraceHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioFileLogTraceHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Trace, Debug, Info, Warning, Error and Fatal events..
        /// </summary>
        public static string LoggingViewStudioFileLogTraceTooltip {
            get {
                return ResourceManager.GetString("LoggingViewStudioFileLogTraceTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to file: Events up to warning severity:&lt;br /&gt;
        ///    Studio Fatal Events&lt;br /&gt;
        ///  Studio Error Events&lt;br /&gt;
        ///Studio Warning Events.
        /// </summary>
        public static string LoggingViewStudioFileLogWarnHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioFileLogWarnHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Warning, Error and Fatal events..
        /// </summary>
        public static string LoggingViewStudioFileLogWarnTooltip {
            get {
                return ResourceManager.GetString("LoggingViewStudioFileLogWarnTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the procedure or function you want to perform on the database.
        /// </summary>
        public static string ManageDbServiceActionsTooltip {
            get {
                return ResourceManager.GetString("ManageDbServiceActionsTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edits the selected database source.
        /// </summary>
        public static string ManageDbServiceEditSourceTooltip {
            get {
                return ResourceManager.GetString("ManageDbServiceEditSourceTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test data.
        /// </summary>
        public static string ManageDbServiceInputValueTooltip {
            get {
                return ResourceManager.GetString("ManageDbServiceInputValueTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a new connection to a database.
        /// </summary>
        public static string ManageDbServiceNewSourceTooltip {
            get {
                return ResourceManager.GetString("ManageDbServiceNewSourceTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refresh the available actions on the selected server.
        /// </summary>
        public static string ManageDbServiceRefreshTooltip {
            get {
                return ResourceManager.GetString("ManageDbServiceRefreshTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the database you want to use.
        /// </summary>
        public static string ManageDbServiceSourcesTooltip {
            get {
                return ResourceManager.GetString("ManageDbServiceSourcesTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the procedure or function.
        /// </summary>
        public static string ManageDbServiceTestActionTooltip {
            get {
                return ResourceManager.GetString("ManageDbServiceTestActionTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel the execution of the test.
        /// </summary>
        public static string ManageDbSourceCancelTestTooltip {
            get {
                return ResourceManager.GetString("ManageDbSourceCancelTestTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the database you want to use.
        /// </summary>
        public static string ManageDbSourceDatabaseTooltip {
            get {
                return ResourceManager.GetString("ManageDbSourceDatabaseTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password for the account.
        /// </summary>
        public static string ManageDbSourcePasswordTooltip {
            get {
                return ResourceManager.GetString("ManageDbSourcePasswordTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name or URL of the server that hosts the database.
        /// </summary>
        public static string ManageDbSourceServerNameTooltip {
            get {
                return ResourceManager.GetString("ManageDbSourceServerNameTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the type of database you want to connect to.
        /// </summary>
        public static string ManageDbSourceServerTypeTooltip {
            get {
                return ResourceManager.GetString("ManageDbSourceServerTypeTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the connection to the database server.
        /// </summary>
        public static string ManageDbSourceTestTooltip {
            get {
                return ResourceManager.GetString("ManageDbSourceTestTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Account Name.
        /// </summary>
        public static string ManageDbSourceUserNameTooltip {
            get {
                return ResourceManager.GetString("ManageDbSourceUserNameTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the files you want to attach.
        /// </summary>
        public static string ManageEmailAttachmentAddDriveTooltip {
            get {
                return ResourceManager.GetString("ManageEmailAttachmentAddDriveTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attach the selected files to the email.
        /// </summary>
        public static string ManageEmailAttachmentAttachTooltip {
            get {
                return ResourceManager.GetString("ManageEmailAttachmentAttachTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel changes and close window.
        /// </summary>
        public static string ManageEmailAttachmentCancelTooltip {
            get {
                return ResourceManager.GetString("ManageEmailAttachmentCancelTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The full path of the files you would like to attach.
        /// </summary>
        public static string ManageEmailAttachmentDriveNameTooltip {
            get {
                return ResourceManager.GetString("ManageEmailAttachmentDriveNameTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Does the server require SSL?.
        /// </summary>
        public static string ManageEmailEnableSslNoTooltip {
            get {
                return ResourceManager.GetString("ManageEmailEnableSslNoTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Does the server require SSL?.
        /// </summary>
        public static string ManageEmailEnableSslYesTooltip {
            get {
                return ResourceManager.GetString("ManageEmailEnableSslYesTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Email address of the sending account.
        /// </summary>
        public static string ManageEmailFromTooltip {
            get {
                return ResourceManager.GetString("ManageEmailFromTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Email Server Name.
        /// </summary>
        public static string ManageEmailHostNameTooltip {
            get {
                return ResourceManager.GetString("ManageEmailHostNameTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password of the account.
        /// </summary>
        public static string ManageEmailPasswordTooltip {
            get {
                return ResourceManager.GetString("ManageEmailPasswordTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Port used by the mail server.
        /// </summary>
        public static string ManageEmailPortTooltip {
            get {
                return ResourceManager.GetString("ManageEmailPortTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Send the test email.
        /// </summary>
        public static string ManageEmailSendTooltip {
            get {
                return ResourceManager.GetString("ManageEmailSendTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Timeout in seconds when trying to send email.
        /// </summary>
        public static string ManageEmailTimeoutTooltip {
            get {
                return ResourceManager.GetString("ManageEmailTimeoutTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Email address to send the test email to.
        /// </summary>
        public static string ManageEmailToTooltip {
            get {
                return ResourceManager.GetString("ManageEmailToTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Email account name of the sender.
        /// </summary>
        public static string ManageEmailUserNameTooltip {
            get {
                return ResourceManager.GetString("ManageEmailUserNameTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edits the selected connection source.
        /// </summary>
        public static string ManageExchangeServiceEditSourceTooltip {
            get {
                return ResourceManager.GetString("ManageExchangeServiceEditSourceTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a new connection to a exchange server.
        /// </summary>
        public static string ManageExchangeServiceNewSourceTooltip {
            get {
                return ResourceManager.GetString("ManageExchangeServiceNewSourceTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the connection you want to use.
        /// </summary>
        public static string ManageExchangeServiceSourcesTooltip {
            get {
                return ResourceManager.GetString("ManageExchangeServiceSourcesTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the action you want this service to represent.
        /// </summary>
        public static string ManagePluginServiceActionsTooltip {
            get {
                return ResourceManager.GetString("ManagePluginServiceActionsTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edits the selected plugin source connection.
        /// </summary>
        public static string ManagePluginServiceEditSourceTooltip {
            get {
                return ResourceManager.GetString("ManagePluginServiceEditSourceTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the namespace in the dll.
        /// </summary>
        public static string ManagePluginServiceNamespaceTooltip {
            get {
                return ResourceManager.GetString("ManagePluginServiceNamespaceTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a new connection to a plugin.
        /// </summary>
        public static string ManagePluginServiceNewSourceTooltip {
            get {
                return ResourceManager.GetString("ManagePluginServiceNewSourceTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refresh the available actions on the selected dll.
        /// </summary>
        public static string ManagePluginServiceRefreshTooltip {
            get {
                return ResourceManager.GetString("ManagePluginServiceRefreshTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reload the plugin source list.
        /// </summary>
        public static string ManagePluginServiceReloadSourcesTooltip {
            get {
                return ResourceManager.GetString("ManagePluginServiceReloadSourcesTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the plugin you want to use.
        /// </summary>
        public static string ManagePluginServiceSourcesTooltip {
            get {
                return ResourceManager.GetString("ManagePluginServiceSourcesTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the execution of this action.
        /// </summary>
        public static string ManagePluginServiceTestTooltip {
            get {
                return ResourceManager.GetString("ManagePluginServiceTestTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The full path or GAC name of the dll you want to use.
        /// </summary>
        public static string ManagePluginSourceAssemblyNameTooltip {
            get {
                return ResourceManager.GetString("ManagePluginSourceAssemblyNameTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clear the filter criteria.
        /// </summary>
        public static string ManagePluginSourceClearSearchTooltip {
            get {
                return ResourceManager.GetString("ManagePluginSourceClearSearchTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filter for the file you want or GAC entry.
        /// </summary>
        public static string ManagePluginSourceFilterTooltip {
            get {
                return ResourceManager.GetString("ManagePluginSourceFilterTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refresh the available files and GAC entries.
        /// </summary>
        public static string ManagePluginSourceRefreshTooltip {
            get {
                return ResourceManager.GetString("ManagePluginSourceRefreshTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel this action.
        /// </summary>
        public static string ManageWebPasteCancelTooltip {
            get {
                return ResourceManager.GetString("ManageWebPasteCancelTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Paste the full response in here.
        /// </summary>
        public static string ManageWebPasteResponseTooltip {
            get {
                return ResourceManager.GetString("ManageWebPasteResponseTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save this response definition.
        /// </summary>
        public static string ManageWebPasteSaveTooltip {
            get {
                return ResourceManager.GetString("ManageWebPasteSaveTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edits the selected webservice host connection.
        /// </summary>
        public static string ManageWebServiceEditSourceTooltip {
            get {
                return ResourceManager.GetString("ManageWebServiceEditSourceTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a new connection to a webservice.
        /// </summary>
        public static string ManageWebServiceNewSourceTooltip {
            get {
                return ResourceManager.GetString("ManageWebServiceNewSourceTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Paste a customised response instead.
        /// </summary>
        public static string ManageWebServicePasteTooltip {
            get {
                return ResourceManager.GetString("ManageWebServicePasteTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The body of the request.
        /// </summary>
        public static string ManageWebServiceRequestBodyTooltip {
            get {
                return ResourceManager.GetString("ManageWebServiceRequestBodyTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request type of the webservice.
        /// </summary>
        public static string ManageWebServiceRequestTypesTooltip {
            get {
                return ResourceManager.GetString("ManageWebServiceRequestTypesTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remainder of the webservice URL.
        /// </summary>
        public static string ManageWebServiceRequestUrlTooltip {
            get {
                return ResourceManager.GetString("ManageWebServiceRequestUrlTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the webservice host you want to use.
        /// </summary>
        public static string ManageWebServiceSourcesTooltip {
            get {
                return ResourceManager.GetString("ManageWebServiceSourcesTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the execution of this webservice.
        /// </summary>
        public static string ManageWebServiceTestTooltip {
            get {
                return ResourceManager.GetString("ManageWebServiceTestTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel the test execution.
        /// </summary>
        public static string ManageWebSourceCancelTestTooltip {
            get {
                return ResourceManager.GetString("ManageWebSourceCancelTestTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Optional default query.
        /// </summary>
        public static string ManageWebSourceDefaultQueryTooltip {
            get {
                return ResourceManager.GetString("ManageWebSourceDefaultQueryTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The base URL of the webservice.
        /// </summary>
        public static string ManageWebSourceHostNameTooltip {
            get {
                return ResourceManager.GetString("ManageWebSourceHostNameTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The account password.
        /// </summary>
        public static string ManageWebSourcePasswordTooltip {
            get {
                return ResourceManager.GetString("ManageWebSourcePasswordTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the webservice source connection.
        /// </summary>
        public static string ManageWebSourceTestTooltip {
            get {
                return ResourceManager.GetString("ManageWebSourceTestTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the account.
        /// </summary>
        public static string ManageWebSourceUserNameTooltip {
            get {
                return ResourceManager.GetString("ManageWebSourceUserNameTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open this URL in your default browser.
        /// </summary>
        public static string ManageWebSourceViewInBrowserTooltip {
            get {
                return ResourceManager.GetString("ManageWebSourceViewInBrowserTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The default value to be used when mapping this field..
        /// </summary>
        public static string MappingsDefaultValueHelp {
            get {
                return ResourceManager.GetString("MappingsDefaultValueHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the input variable is blank, or there is no data passed in, then use &lt;i&gt;NULL&lt;/i&gt;..
        /// </summary>
        public static string MappingsEmptyIsNullHelp {
            get {
                return ResourceManager.GetString("MappingsEmptyIsNullHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you would like the default variables in a recordset, put the recordset name in here..
        /// </summary>
        public static string MappingsRecordsetNameHelp {
            get {
                return ResourceManager.GetString("MappingsRecordsetNameHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mark this field as required for Input..
        /// </summary>
        public static string MappingsRequiredFieldHelp {
            get {
                return ResourceManager.GetString("MappingsRequiredFieldHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a new database source.
        /// </summary>
        public static string MenuDatabaseToolTip {
            get {
                return ResourceManager.GetString("MenuDatabaseToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug your Service in either the Studio or the Browser.&lt;br/&gt;
        ///&lt;br/&gt;
        ///&lt;a href=&quot;http://warewolf.io/knowledge-base/debugging/&quot;  target=&quot;_blank&quot;&gt;Read more in the Knowledge Base.&lt;/a&gt;.
        /// </summary>
        public static string MenuDebugHelp {
            get {
                return ResourceManager.GetString("MenuDebugHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Move resources between multiple Warewolf Servers.&lt;br/&gt;
        ///&lt;br/&gt;
        ///Deploy is the safest and recommended way of moving resources between Warewolf Servers..
        /// </summary>
        public static string MenuDeployHelp {
            get {
                return ResourceManager.GetString("MenuDeployHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Move resources between Warewolf servers.
        /// </summary>
        public static string MenuDeployToolTip {
            get {
                return ResourceManager.GetString("MenuDeployToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Database.
        /// </summary>
        public static string MenuDialogDatabaseLabel {
            get {
                return ResourceManager.GetString("MenuDialogDatabaseLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug.
        /// </summary>
        public static string MenuDialogDebugLabel {
            get {
                return ResourceManager.GetString("MenuDialogDebugLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deploy.
        /// </summary>
        public static string MenuDialogDeployLabel {
            get {
                return ResourceManager.GetString("MenuDialogDeployLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DLL.
        /// </summary>
        public static string MenuDialogDLLLabel {
            get {
                return ResourceManager.GetString("MenuDialogDLLLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Forums.
        /// </summary>
        public static string MenuDialogForumsLabel {
            get {
                return ResourceManager.GetString("MenuDialogForumsLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lock Menu.
        /// </summary>
        public static string MenuDialogLockLabel {
            get {
                return ResourceManager.GetString("MenuDialogLockLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New.
        /// </summary>
        public static string MenuDialogNewLabel {
            get {
                return ResourceManager.GetString("MenuDialogNewLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Version.
        /// </summary>
        public static string MenuDialogNewVersionLabel {
            get {
                return ResourceManager.GetString("MenuDialogNewVersionLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save.
        /// </summary>
        public static string MenuDialogSaveLabel {
            get {
                return ResourceManager.GetString("MenuDialogSaveLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings.
        /// </summary>
        public static string MenuDialogSettingsLabel {
            get {
                return ResourceManager.GetString("MenuDialogSettingsLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stop.
        /// </summary>
        public static string MenuDialogStopDebugLabel {
            get {
                return ResourceManager.GetString("MenuDialogStopDebugLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Help.
        /// </summary>
        public static string MenuDialogSupportLabel {
            get {
                return ResourceManager.GetString("MenuDialogSupportLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Task.
        /// </summary>
        public static string MenuDialogTaskLabel {
            get {
                return ResourceManager.GetString("MenuDialogTaskLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tours.
        /// </summary>
        public static string MenuDialogToursLabel {
            get {
                return ResourceManager.GetString("MenuDialogToursLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unlock Menu.
        /// </summary>
        public static string MenuDialogUnLockLabel {
            get {
                return ResourceManager.GetString("MenuDialogUnLockLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Web.
        /// </summary>
        public static string MenuDialogWebLabel {
            get {
                return ResourceManager.GetString("MenuDialogWebLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new version of Warewolf is available for download.
        /// </summary>
        public static string MenuDownloadToolTip {
            get {
                return ResourceManager.GetString("MenuDownloadToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A quick link to the Knowledge Base and other helpful resources..
        /// </summary>
        public static string MenuHelp {
            get {
                return ResourceManager.GetString("MenuHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Knowledge Base.
        /// </summary>
        public static string MenuHelpToolTip {
            get {
                return ResourceManager.GetString("MenuHelpToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lock the Menu bar either open or closed, or Unlock to allow dynamic menu opening on mouse over..
        /// </summary>
        public static string MenuLockMenuHelp {
            get {
                return ResourceManager.GetString("MenuLockMenuHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lock / unlock the menu.
        /// </summary>
        public static string MenuLockToolTip {
            get {
                return ResourceManager.GetString("MenuLockToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connect to a database to execute stored procedures, functions and TSQL..
        /// </summary>
        public static string MenuNewDatabaseConnectorHelp {
            get {
                return ResourceManager.GetString("MenuNewDatabaseConnectorHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connect to dll&apos;s to execute any custom code..
        /// </summary>
        public static string MenuNewPluginConnectorHelp {
            get {
                return ResourceManager.GetString("MenuNewPluginConnectorHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a new Warewolf Hosted Service. This flow based service is that start of all orchestration in Warewolf.&lt;br/&gt;
        ///&lt;br/&gt;
        ///&lt;a href=&quot;http://warewolf.io/knowledge-base/getting-started/&quot; target=&quot;_blank&quot;&gt;Read more in the Knowledge Base.&lt;/a&gt;.
        /// </summary>
        public static string MenuNewServiceHelp {
            get {
                return ResourceManager.GetString("MenuNewServiceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a new service.
        /// </summary>
        public static string MenuNewServiceToolTip {
            get {
                return ResourceManager.GetString("MenuNewServiceToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new version of Warewolf is available for download..
        /// </summary>
        public static string MenuNewVersionHelp {
            get {
                return ResourceManager.GetString("MenuNewVersionHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connect to any webservice using REST or SOAP..
        /// </summary>
        public static string MenuNewWebConnectorHelp {
            get {
                return ResourceManager.GetString("MenuNewWebConnectorHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a new plugin source.
        /// </summary>
        public static string MenuPluginToolTip {
            get {
                return ResourceManager.GetString("MenuPluginToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Saves the active tab in the studio.
        /// </summary>
        public static string MenuSaveTabHelp {
            get {
                return ResourceManager.GetString("MenuSaveTabHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save this tab.
        /// </summary>
        public static string MenuSaveToolTip {
            get {
                return ResourceManager.GetString("MenuSaveToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Schedule workflow executions.
        /// </summary>
        public static string MenuSchedulerHelp {
            get {
                return ResourceManager.GetString("MenuSchedulerHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Schedule a service to run.
        /// </summary>
        public static string MenuSchedulerToolTip {
            get {
                return ResourceManager.GetString("MenuSchedulerToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit or View system settings such as Security and Logging..
        /// </summary>
        public static string MenuSettingsHelp {
            get {
                return ResourceManager.GetString("MenuSettingsHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configure settings.
        /// </summary>
        public static string MenuSettingsToolTip {
            get {
                return ResourceManager.GetString("MenuSettingsToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a new web source.
        /// </summary>
        public static string MenuWebServiceToolTip {
            get {
                return ResourceManager.GetString("MenuWebServiceToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        Put the full path of the destination you are moving to here.&lt;br/&gt;
        ///        You can use File System, URI, SFTP, FTP or FTPS format.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string MoveHelpDestination {
            get {
                return ResourceManager.GetString("MoveHelpDestination", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        To Move a file or folder, put the full path and file or folder name to move in here.&lt;br/&gt;
        ///        You can use File System, URI, SFTP, FTP or FTPS format.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string MoveHelpFileFolder {
            get {
                return ResourceManager.GetString("MoveHelpFileFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the file or folder already exists, you can force a new one to overwrite the old one.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        If it exists already, force an overwrite.
        /// </summary>
        public static string MoveHelpForceoverwrite {
            get {
                return ResourceManager.GetString("MoveHelpForceoverwrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Password of an account with permission to access the source.&lt;br/&gt;
        ///        By default the account running Warewolf Server.exe service will be used.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string MoveHelpPassword {
            get {
                return ResourceManager.GetString("MoveHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns Success or will be blank depending on the success of the Move action.&lt;br /&gt;
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br /&gt;
        ///        Using recordset () will add a new record and (*) will assign every record.&lt;br/&gt; 
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string MoveHelpResult {
            get {
                return ResourceManager.GetString("MoveHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Username of an account with permission to access the source.&lt;br/&gt;
        ///        By default the account running Warewolf Server.exe service will be used.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string MoveHelpUsername {
            get {
                return ResourceManager.GetString("MoveHelpUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MySQL Database Test Connector and Calculate Outputs.
        /// </summary>
        public static string MySqlTestHeader {
            get {
                return ResourceManager.GetString("MySqlTestHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If an error occurs you can execute a web service / Warewolf workflow to log the error that occurred. E.g.&lt;br /&gt;
        ///        http://ServerName:3142/Services/LogErrors?Severity=1&amp;amp;Error=[[ErrorMsg]]&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string NativeActivityHelpCallthiswebservice {
            get {
                return ResourceManager.GetString("NativeActivityHelpCallthiswebservice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To end the workflow if an error has occurred at this point, make sure the checkbox is selected. &lt;br/&gt;
        ///        If you have also called a web service / Warewolf workflow, that will finish executing first.&lt;br/&gt;
        ///        If the workflow is nested, the calling workflow will resume.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Ends the executing workflow at this point.
        /// </summary>
        public static string NativeActivityHelpEndtheworkflow {
            get {
                return ResourceManager.GetString("NativeActivityHelpEndtheworkflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If an error occurs the error message will be placed into this variable as well the result variable.&lt;br/&gt;
        ///        If left empty the result will still be placed in the result variable.&lt;br/&gt; 
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string NativeActivityHelpPuterrorinthisvariable {
            get {
                return ResourceManager.GetString("NativeActivityHelpPuterrorinthisvariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unassigned.
        /// </summary>
        public static string Navigation_Category_Unassigned {
            get {
                return ResourceManager.GetString("Navigation_Category_Unassigned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New.
        /// </summary>
        public static string New {
            get {
                return ResourceManager.GetString("New", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Remote Server....
        /// </summary>
        public static string NewServerLabel {
            get {
                return ResourceManager.GetString("NewServerLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsaved.
        /// </summary>
        public static string NewWorkflowBaseName {
            get {
                return ResourceManager.GetString("NewWorkflowBaseName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Outputs.
        /// </summary>
        public static string OutputsLabel {
            get {
                return ResourceManager.GetString("OutputsLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to pack://application:,,,/Warewolf Studio;component/images/HelpCommunity-32.png.
        /// </summary>
        public static string Pack_Uri_Application_Image_Community {
            get {
                return ResourceManager.GetString("Pack_Uri_Application_Image_Community", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to pack://application:,,,/Warewolf Studio;component/images/StartPage-16.png.
        /// </summary>
        public static string Pack_Uri_Application_Image_Home {
            get {
                return ResourceManager.GetString("Pack_Uri_Application_Image_Home", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to pack://application:,,,/Warewolf Studio;component/images/DatabaseService-32.png.
        /// </summary>
        public static string Pack_Uri_DatabaseService_Image {
            get {
                return ResourceManager.GetString("Pack_Uri_DatabaseService_Image", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to pack://application:,,,/Warewolf Studio;component/images/ToolSendEmail-32.png.
        /// </summary>
        public static string Pack_Uri_EmailSource_Image {
            get {
                return ResourceManager.GetString("Pack_Uri_EmailSource_Image", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to pack://application:,,,/Warewolf Studio;component/images/PluginService-32.png.
        /// </summary>
        public static string Pack_Uri_PluginService_Image {
            get {
                return ResourceManager.GetString("Pack_Uri_PluginService_Image", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to pack://application:,,,/Warewolf Studio;component/images/ExplorerWarewolfConnection-32.png.
        /// </summary>
        public static string Pack_Uri_Server_Image {
            get {
                return ResourceManager.GetString("Pack_Uri_Server_Image", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to pack://application:,,,/Warewolf Studio;component/images/WebService-32.png.
        /// </summary>
        public static string Pack_Uri_WebService_Image {
            get {
                return ResourceManager.GetString("Pack_Uri_WebService_Image", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to pack://application:,,,/Warewolf Studio;component/images/Workflow-32.png.
        /// </summary>
        public static string Pack_Uri_WorkflowService_Image {
            get {
                return ResourceManager.GetString("Pack_Uri_WorkflowService_Image", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter the password for the account you want to use for authenticating..
        /// </summary>
        public static string PasswordAuthenticationHelp {
            get {
                return ResourceManager.GetString("PasswordAuthenticationHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password:.
        /// </summary>
        public static string PasswordLabel {
            get {
                return ResourceManager.GetString("PasswordLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter the corresponding password.
        /// </summary>
        public static string PasswordToolTip {
            get {
                return ResourceManager.GetString("PasswordToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit .
        /// </summary>
        public static string PluginServiceEditHeaderLabel {
            get {
                return ResourceManager.GetString("PluginServiceEditHeaderLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the connection string properties of the selected dll.&lt;br&gt;
        ///&lt;br/&gt;
        ///Change the connection string from, say, a development dll to a live dll.&lt;br/&gt;
        ///&lt;br/&gt;
        ///&lt;a href=&quot;http://warewolf.io/knowledge-base/data-connectors&quot; target=&quot;_blank&quot;&gt;Read more in the Knowledgebase.&lt;/a&gt;.
        /// </summary>
        public static string PluginServiceEditSourceHelp {
            get {
                return ResourceManager.GetString("PluginServiceEditSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Procedure not selected. This service will not execute..
        /// </summary>
        public static string PluginServiceMethodNotSelected {
            get {
                return ResourceManager.GetString("PluginServiceMethodNotSelected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the Namespace from the DLL that has the method you want to execute..
        /// </summary>
        public static string PluginServiceNamespaceHelp {
            get {
                return ResourceManager.GetString("PluginServiceNamespaceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Procedure not selected. This service will not execute..
        /// </summary>
        public static string PluginServiceNamespaceNotSelected {
            get {
                return ResourceManager.GetString("PluginServiceNamespaceNotSelected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Plugin Connector.
        /// </summary>
        public static string PluginServiceNewHeaderLabel {
            get {
                return ResourceManager.GetString("PluginServiceNewHeaderLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To create a reference to a new dll, click New..
        /// </summary>
        public static string PluginServiceNewSourceHelp {
            get {
                return ResourceManager.GetString("PluginServiceNewSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refresh the available actions..
        /// </summary>
        public static string PluginServiceRefreshHelp {
            get {
                return ResourceManager.GetString("PluginServiceRefreshHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reload the list of dll&apos;s you want to use from previously setup sources..
        /// </summary>
        public static string PluginServiceReloadSourcesHelp {
            get {
                return ResourceManager.GetString("PluginServiceReloadSourcesHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the method in the dll you want to execute..
        /// </summary>
        public static string PluginServiceSelectActionHelp {
            get {
                return ResourceManager.GetString("PluginServiceSelectActionHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the dll you want to use from previously setup sources..
        /// </summary>
        public static string PluginServiceSourcesHelp {
            get {
                return ResourceManager.GetString("PluginServiceSourcesHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the dll so that we have a response object that can be used to map data back into the system..
        /// </summary>
        public static string PluginServiceTestHelp {
            get {
                return ResourceManager.GetString("PluginServiceTestHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Put the information you want to test with into the variables and execute the Test..
        /// </summary>
        public static string PluginServiceTestInputHelp {
            get {
                return ResourceManager.GetString("PluginServiceTestInputHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The results from the dll execution test based on your inputs..
        /// </summary>
        public static string PluginServiceTestResultsHelp {
            get {
                return ResourceManager.GetString("PluginServiceTestResultsHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clears the Search Filter.
        /// </summary>
        public static string PluginSourceClearSearchHelp {
            get {
                return ResourceManager.GetString("PluginSourceClearSearchHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The full path to the dll. e.g. &lt;b&gt;D:\My Project\Core.dll&lt;/b&gt;&lt;br/&gt;
        ///or
        ///The full GAC address e.g. &lt;b&gt;GAC:TaskScheduler, Version=6.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&lt;/b&gt;
        ///.
        /// </summary>
        public static string PluginSourceDllFullNameHelp {
            get {
                return ResourceManager.GetString("PluginSourceDllFullNameHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit.
        /// </summary>
        public static string PluginSourceEditHeaderLabel {
            get {
                return ResourceManager.GetString("PluginSourceEditHeaderLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Plugin Source.
        /// </summary>
        public static string PluginSourceNewHeaderLabel {
            get {
                return ResourceManager.GetString("PluginSourceNewHeaderLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refresh the view based on the filter.&lt;br/&gt;
        ///&lt;br/&gt;
        ///Newly added resources should show after a refresh..
        /// </summary>
        public static string PluginSourceRefreshCommandHelp {
            get {
                return ResourceManager.GetString("PluginSourceRefreshCommandHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Port.
        /// </summary>
        public static string PortLabel {
            get {
                return ResourceManager.GetString("PortLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines the character length to generate.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string RandomHelpLength {
            get {
                return ResourceManager.GetString("RandomHelpLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To generate a random number put the lowest/smallest number you would like in here.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string RandomHelpRangeFrom {
            get {
                return ResourceManager.GetString("RandomHelpRangeFrom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To generate a random number put the highest/largest number you would like in here.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string RandomHelpRangeTo {
            get {
                return ResourceManager.GetString("RandomHelpRangeTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns the randomly generated result.&lt;br /&gt;
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br /&gt;
        ///        Using recordset () will add a new record and (*) will assign every record.&lt;br/&gt; 
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string RandomHelpResult {
            get {
                return ResourceManager.GetString("RandomHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of random information to generate.&lt;br/&gt;
        ///        Letters: Alphabetical letters only.&lt;br /&gt;
        ///        Numbers: Numbers only.&lt;br/&gt;
        ///        Letters and Numbers: A random combination of letters and numbers.&lt;br/&gt;
        ///        GUID: A randomly generated Globally Unique Identifier.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        na.
        /// </summary>
        public static string RandomHelpType {
            get {
                return ResourceManager.GetString("RandomHelpType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        To read the content of a file, put the full path and file name in here.&lt;br/&gt;
        ///        You can use File System, URI, SFTP, FTP or FTPS format.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string ReadFileHelpFilename {
            get {
                return ResourceManager.GetString("ReadFileHelpFilename", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Password of an account with permission to perform this action.&lt;br/&gt;
        ///        By default the account running Warewolf Server.exe service will be used.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string ReadFileHelpPassword {
            get {
                return ResourceManager.GetString("ReadFileHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns the content of the file.&lt;br /&gt;
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br /&gt;
        ///        Using recordset () will add a new record and (*) will assign every record.&lt;br/&gt; 
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string ReadFileHelpResult {
            get {
                return ResourceManager.GetString("ReadFileHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Username of an account with permission to perform this action.&lt;br/&gt;
        ///        By default the account running Warewolf Server.exe service will be used.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string ReadFileHelpUsername {
            get {
                return ResourceManager.GetString("ReadFileHelpUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        To read the content of a folder, put the full path in here.&lt;br/&gt;
        ///        You can use File System, URI, SFTP, FTP or FTPS format.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string ReadFolderHelpFolder {
            get {
                return ResourceManager.GetString("ReadFolderHelpFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Password of an account with permission to perform this action.&lt;br/&gt;
        ///        By default the account running Warewolf Server.exe service will be used.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string ReadFolderHelpPassword {
            get {
                return ResourceManager.GetString("ReadFolderHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Files will only return files.&lt;br/&gt;
        ///        Folders will only return folders.&lt;br/&gt;
        ///        Files and Folders will return everything.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        What do you want to read?.
        /// </summary>
        public static string ReadFolderHelpRead {
            get {
                return ResourceManager.GetString("ReadFolderHelpRead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns the content of the folder specified. Each item found will be returned as a separate result so this tool is best used with a recordset.&lt;br /&gt;
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br /&gt;
        ///        Using recordset() will add a new record and (*) will assign every record.&lt;br/&gt; 
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/ [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ReadFolderHelpResult {
            get {
                return ResourceManager.GetString("ReadFolderHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Username of an account with permission to perform this action.&lt;br/&gt;
        ///        By default the account running Warewolf Server.exe service will be used.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string ReadFolderHelpUsername {
            get {
                return ResourceManager.GetString("ReadFolderHelpUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following task has been renamed {0} -&gt; {1}. You will lose the history for the old task.{2} Would you like to save the new name?{2}-------------------------------------------------------------------&quot; + &quot;Yes - Save with the new name.{2}No - Save with the old name.{2}Cancel - Returns you to Scheduler..
        /// </summary>
        public static string RenameConflictDescription {
            get {
                return ResourceManager.GetString("RenameConflictDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename conflict.
        /// </summary>
        public static string RenameConflictHeader {
            get {
                return ResourceManager.GetString("RenameConflictHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        To rename a file or folder, put the full path and file or folder name in here.&lt;br/&gt;
        ///        You can use File System, URI, SFTP, FTP or FTPS format.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string RenameHelpFileFolder {
            get {
                return ResourceManager.GetString("RenameHelpFileFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the file or folder already exists, you can force a new one to overwrite the old one.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        If it exists already, force an overwrite.
        /// </summary>
        public static string RenameHelpForceoverwrite {
            get {
                return ResourceManager.GetString("RenameHelpForceoverwrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Put the full path and new name of the resource here.&lt;br/&gt;
        ///        You can use File System, URI, SFTP, FTP or FTPS format.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string RenameHelpNewName {
            get {
                return ResourceManager.GetString("RenameHelpNewName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Password of an account with permission to access the source.&lt;br/&gt;
        ///        By default the account running Warewolf Server.exe service will be used.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string RenameHelpPassword {
            get {
                return ResourceManager.GetString("RenameHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns Success or will be blank depending on the success of the Rename action.&lt;br /&gt;
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br /&gt;
        ///        Using recordset () will add a new record and (*) will assign every record.&lt;br/&gt; 
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string RenameHelpResult {
            get {
                return ResourceManager.GetString("RenameHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Username of an account with permission to access the source.&lt;br/&gt;
        ///        By default the account running Warewolf Server.exe service will be used.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string RenameHelpUsername {
            get {
                return ResourceManager.GetString("RenameHelpUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Put the information you are looking for in here.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string ReplaceHelpFind {
            get {
                return ResourceManager.GetString("ReplaceHelpFind", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        To search and replace a string, put the variable containing the string to search in here.&lt;br/&gt; 
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string ReplaceHelpInFields {
            get {
                return ResourceManager.GetString("ReplaceHelpInFields", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Put the replacement information in here.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string ReplaceHelpReplaceWith {
            get {
                return ResourceManager.GetString("ReplaceHelpReplaceWith", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns the count of the number of replacements.&lt;br /&gt;
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br /&gt;
        ///        Using recordset () will add a new record and (*) will assign every record.&lt;br/&gt; 
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string ReplaceHelpResult {
            get {
                return ResourceManager.GetString("ReplaceHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resource ID must be a Guid.
        /// </summary>
        public static string Resource_ID_must_be_a_Guid {
            get {
                return ResourceManager.GetString("Resource_ID_must_be_a_Guid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug.
        /// </summary>
        public static string Ribbon_Debug {
            get {
                return ResourceManager.GetString("Ribbon_Debug", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stop.
        /// </summary>
        public static string Ribbon_StopExecution {
            get {
                return ResourceManager.GetString("Ribbon_StopExecution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make current version.
        /// </summary>
        public static string RollbackHeader {
            get {
                return ResourceManager.GetString("RollbackHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;{0} will become the current version.{1}Do you want to proceed ?&quot;.
        /// </summary>
        public static string RollbackMessage {
            get {
                return ResourceManager.GetString("RollbackMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Saving Error.
        /// </summary>
        public static string SaveErrorHeader {
            get {
                return ResourceManager.GetString("SaveErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following error occurred on save:.
        /// </summary>
        public static string SaveErrorMessage {
            get {
                return ResourceManager.GetString("SaveErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while saving.
        /// </summary>
        public static string SaveSettingErrorPrefix {
            get {
                return ResourceManager.GetString("SaveSettingErrorPrefix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are duplicate permissions for a resource, 
        ///    i.e. one resource has permissions set twice with the same group. 
        ///    Please clear the duplicates before saving..
        /// </summary>
        public static string SaveSettingsDuplicateResourcePermissions {
            get {
                return ResourceManager.GetString("SaveSettingsDuplicateResourcePermissions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are duplicate server permissions, 
        ///    i.e. Server permissions have been setup up with the same group twice. 
        ///    Please clear the duplicates before saving..
        /// </summary>
        public static string SaveSettingsDuplicateServerPermissions {
            get {
                return ResourceManager.GetString("SaveSettingsDuplicateServerPermissions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while saving: Server unreachable..
        /// </summary>
        public static string SaveSettingsNotReachableErrorMsg {
            get {
                return ResourceManager.GetString("SaveSettingsNotReachableErrorMsg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while saving: You don&apos;t have permission to change settings on this server.
        ///You need Administrator permission..
        /// </summary>
        public static string SaveSettingsPermissionsErrorMsg {
            get {
                return ResourceManager.GetString("SaveSettingsPermissionsErrorMsg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scheduler Task has not been saved.{0}Would you like to save the Task? {0}-------------------------------------------------------------------Yes - Save the Task.{0}No - Discard your changes.{0}Cancel - Returns you to Scheduler..
        /// </summary>
        public static string SchedulerChangesDescription {
            get {
                return ResourceManager.GetString("SchedulerChangesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scheduler Task has changes.
        /// </summary>
        public static string SchedulerChangesHeader {
            get {
                return ResourceManager.GetString("SchedulerChangesHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to What type of scripting language do you want to use?&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        na.
        /// </summary>
        public static string ScriptingHelpLanguageType {
            get {
                return ResourceManager.GetString("ScriptingHelpLanguageType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns the output of the script, if any.&lt;br/&gt; 
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string ScriptingHelpResult {
            get {
                return ResourceManager.GetString("ScriptingHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        To run a programming script, put the script you want to execute in here.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string ScriptingHelpScript {
            get {
                return ResourceManager.GetString("ScriptingHelpScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To execute a set of Activities in sequence put them in the order you want them executed.&lt;br/&gt;
        ///        To execute more than one item in a loop construct etc. put the activities in a sequence first and then put the sequence into the loop construct.&lt;br /&gt;
        ///        Error handling operates as a catch all for all items in the sequence.&lt;br/&gt;.
        /// </summary>
        public static string SequenceHelpSequence {
            get {
                return ResourceManager.GetString("SequenceHelpSequence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For network computers, type in the name of the computer on the network and select it from the drop down list.&lt;br/&gt;
        ///&lt;br/&gt;
        ///For remote servers, such as Hybrid cloud environments, Azure hosted servers etc., put the server URL in here..
        /// </summary>
        public static string ServerAddressHelp {
            get {
                return ResourceManager.GetString("ServerAddressHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server Name:.
        /// </summary>
        public static string ServerNameLabel {
            get {
                return ResourceManager.GetString("ServerNameLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By default, you can connect to other Warewolf Servers over HTTP or HTTPS.&lt;br/&gt;.
        /// </summary>
        public static string ServerProtocolHelp {
            get {
                return ResourceManager.GetString("ServerProtocolHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By default this port will be 3143 for HTTPS connections and 3142 for HTTP connections.&lt;br/&gt;
        ///&lt;br/&gt;
        ///Do not change this unless you know the ports on the remote machine have been altered..
        /// </summary>
        public static string ServerSelectPortHelp {
            get {
                return ResourceManager.GetString("ServerSelectPortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the public account to authenticate on the remote server.&lt;br/&gt;
        ///&lt;br/&gt;
        ///If there are no resources on the remote server, there will be no Public authentication..
        /// </summary>
        public static string ServerSelectPublicHelp {
            get {
                return ResourceManager.GetString("ServerSelectPublicHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a specific windows account to authenticate on the remote server.&lt;br/&gt;
        ///&lt;br/&gt;
        ///Use the domain if relevant e.g. DOMAIN\Username.
        /// </summary>
        public static string ServerSelectUserHelp {
            get {
                return ResourceManager.GetString("ServerSelectUserHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uses the logged on windows account to authenticate on the remote server..
        /// </summary>
        public static string ServerSelectWindowsHelp {
            get {
                return ResourceManager.GetString("ServerSelectWindowsHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Address:.
        /// </summary>
        public static string ServerSourceDialogAddressLabel {
            get {
                return ResourceManager.GetString("ServerSourceDialogAddressLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter the port on the server.
        /// </summary>
        public static string ServerSourceDialogAddressPortTip {
            get {
                return ResourceManager.GetString("ServerSourceDialogAddressPortTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter the IP address, domain name or computer name of the server you want to connect to.
        /// </summary>
        public static string ServerSourceDialogAddressToolTip {
            get {
                return ResourceManager.GetString("ServerSourceDialogAddressToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server address cannot be empty.
        /// </summary>
        public static string ServerSourceDialogNoAddressErrorMessage {
            get {
                return ResourceManager.GetString("ServerSourceDialogNoAddressErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server connection must be tested with a valid address before you can save.
        /// </summary>
        public static string ServerSourceDialogNoTestMessage {
            get {
                return ResourceManager.GetString("ServerSourceDialogNoTestMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the protocol you want to connect on.
        /// </summary>
        public static string ServerSourceDialogProtocolToolTip {
            get {
                return ResourceManager.GetString("ServerSourceDialogProtocolToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connect using Public credentials only.
        /// </summary>
        public static string ServerSourceDialogPublicToolTip {
            get {
                return ResourceManager.GetString("ServerSourceDialogPublicToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel the connection attempt.
        /// </summary>
        public static string ServerSourceDialogsCancelTestToolTip {
            get {
                return ResourceManager.GetString("ServerSourceDialogsCancelTestToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the connection to the server using these credentials.
        /// </summary>
        public static string ServerSourceDialogsTestToolTip {
            get {
                return ResourceManager.GetString("ServerSourceDialogsTestToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Server Source.
        /// </summary>
        public static string ServerSourceNewHeaderLabel {
            get {
                return ResourceManager.GetString("ServerSourceNewHeaderLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server is not connected.
        /// </summary>
        public static string ServerSourceNotConnected {
            get {
                return ResourceManager.GetString("ServerSourceNotConnected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot change the settings for a server that is offline..
        /// </summary>
        public static string ServerSourceNotConnectedSettingsDescription {
            get {
                return ResourceManager.GetString("ServerSourceNotConnectedSettingsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server is unreachable.
        /// </summary>
        public static string ServerSourceUnreachableErrorHeader {
            get {
                return ResourceManager.GetString("ServerSourceUnreachableErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to reach {0}: Connection timed out.{1} Make sure the remote computer is powered on.{1}{1} Would you like to re-try? {1}.
        /// </summary>
        public static string ServerSourceUnreachableHeaderMessage {
            get {
                return ResourceManager.GetString("ServerSourceUnreachableHeaderMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the connection to the remote Warewolf Server.
        ///Make sure the relevant ports (3142, 3143 by default) are open on any firewalls between this server and the remote server..
        /// </summary>
        public static string ServerTestConnectionHelp {
            get {
                return ResourceManager.GetString("ServerTestConnectionHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insert the input data for this service.&lt;br /&gt;
        ///        It will be mapped to the input field listed in the To Service column.&lt;br /&gt;
        ///        If the input is a Recordset field then you can use (*) to pass all the recordset fields into the workflow service. e.g.&lt;br /&gt;
        ///        [[my(*).recs]] - input().records&lt;br/&gt;
        ///        You can also put multiple fields into one field with other text much like the assign tool.&lt;br/&gt;
        ///        By default similar matches from the variable list are used where possible.&lt;br /&gt;
        ///        &lt; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ServiceHelpInput {
            get {
                return ResourceManager.GetString("ServiceHelpInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Insert the variable that you want the output of the workflow to be mapped into.&lt;br/&gt; 
        ///        By default similar matches from the variable list are used where possible.&lt;br/&gt;
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br/&gt;
        ///        Using recordset () will add a new record and (*) will assign every record.&lt;br/&gt; 
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ServiceHelpOutput {
            get {
                return ResourceManager.GetString("ServiceHelpOutput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Selecting this checkbox will cause the workflow to execute as &quot;Fire and Forget&quot;.&lt;br/&gt;
        ///        This will free up the parent workflow to continue without waiting for a response from the nested workflow.&lt;br/&gt;
        ///        Warning: Any data returned from this workflow will not be mapped back and will therefore not be available for use.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:.
        /// </summary>
        public static string ServiceHelpRunWorkflowAsync {
            get {
                return ResourceManager.GetString("ServiceHelpRunWorkflowAsync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Input some test data to execute the procedure.&lt;br/&gt;
        ///&lt;br/&gt;
        ///This data will not be stored and the execution will be rolled back if supported by the database..
        /// </summary>
        public static string ServiceInputsHelp {
            get {
                return ResourceManager.GetString("ServiceInputsHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the procedure or function.
        /// </summary>
        public static string ServiceTestActionTooltip {
            get {
                return ResourceManager.GetString("ServiceTestActionTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel the test response results. Cancelling will not use the results from the test execution to determine the actions outputs..
        /// </summary>
        public static string ServiceTestCancelButtonHelp {
            get {
                return ResourceManager.GetString("ServiceTestCancelButtonHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ServiceTestCancelButtonTooltip.
        /// </summary>
        public static string ServiceTestCancelButtonTooltip {
            get {
                return ResourceManager.GetString("ServiceTestCancelButtonTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Accept the test response results. This will use the results from the test execution to determine the actions outputs..
        /// </summary>
        public static string ServiceTestDoneButtonHelp {
            get {
                return ResourceManager.GetString("ServiceTestDoneButtonHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ServiceTestDoneButtonTooltip.
        /// </summary>
        public static string ServiceTestDoneButtonTooltip {
            get {
                return ResourceManager.GetString("ServiceTestDoneButtonTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the execution of this resource..
        /// </summary>
        public static string ServiceTestHelp {
            get {
                return ResourceManager.GetString("ServiceTestHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;Settings have not been saved.{0}Would you like to save the settings? {0}-------------------------------------------------------------------Yes - Save the settings.{0}No - Discard your changes.{0}Cancel - Returns you to settings..
        /// </summary>
        public static string SettingsChangedDescription {
            get {
                return ResourceManager.GetString("SettingsChangedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings have changed.
        /// </summary>
        public static string SettingsChangedHeader {
            get {
                return ResourceManager.GetString("SettingsChangedHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns the number of records deleted.&lt;br/&gt; 
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br/&gt;
        ///        Using recordset () will add a new record and (*) will assign every record.&lt;br/&gt; 
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string SharepointDeleteHelpResult {
            get {
                return ResourceManager.GetString("SharepointDeleteHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit the connection properties of the selected Sharepoint Server..
        /// </summary>
        public static string SharepointEditServerHelp {
            get {
                return ResourceManager.GetString("SharepointEditServerHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the field you want to match on.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        na.
        /// </summary>
        public static string SharepointHelpFieldToMatchOn {
            get {
                return ResourceManager.GetString("SharepointHelpFieldToMatchOn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select a list to read data from.&lt;br/&gt;
        ///        If the list changed, click the refresh button.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Select a list to read data from..
        /// </summary>
        public static string SharepointHelpList {
            get {
                return ResourceManager.GetString("SharepointHelpList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select a preconfigured SharePoint server source or &quot;New SharePoint Server Source...&quot; to add a new one..
        /// </summary>
        public static string SharepointHelpServer {
            get {
                return ResourceManager.GetString("SharepointHelpServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns Success or Failure.&lt;br/&gt; 
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br/&gt;
        ///        Using recordset () will add a new record and (*) will assign every record.&lt;br/&gt; 
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string SharepointInsertHelpResult {
            get {
                return ResourceManager.GetString("SharepointInsertHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refreshes the information from the server..
        /// </summary>
        public static string SharepointRefreshListHelp {
            get {
                return ResourceManager.GetString("SharepointRefreshListHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit.
        /// </summary>
        public static string SharePointServiceEditHeaderLabel {
            get {
                return ResourceManager.GetString("SharePointServiceEditHeaderLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New SharePoint Service Source.
        /// </summary>
        public static string SharePointServiceNewHeaderLabel {
            get {
                return ResourceManager.GetString("SharePointServiceNewHeaderLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The full URL of the Sharepoint server.
        /// </summary>
        public static string SharepointServiceSourceServerHelp {
            get {
                return ResourceManager.GetString("SharepointServiceSourceServerHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the connection to the Sharepoint server.
        /// </summary>
        public static string SharepointServiceSourceTestHelp {
            get {
                return ResourceManager.GetString("SharepointServiceSourceTestHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel the test connection to the Sharepoint server.
        /// </summary>
        public static string SharepointSourceCancelTestTooltip {
            get {
                return ResourceManager.GetString("SharepointSourceCancelTestTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password for the username used to connect to Sharepoint.
        /// </summary>
        public static string SharepointSourcePasswordTooltip {
            get {
                return ResourceManager.GetString("SharepointSourcePasswordTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sharepoint URL.
        /// </summary>
        public static string SharepointSourceServerNameTooltip {
            get {
                return ResourceManager.GetString("SharepointSourceServerNameTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the connection to the Sharepoint server.
        /// </summary>
        public static string SharepointSourceTestTooltip {
            get {
                return ResourceManager.GetString("SharepointSourceTestTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The usename used to connect to Sharepoint.
        /// </summary>
        public static string SharepointSourceUserNameTooltip {
            get {
                return ResourceManager.GetString("SharepointSourceUserNameTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To read list item data into a variable, put the variable here..
        /// </summary>
        public static string SharepointToolTipToVariable {
            get {
                return ResourceManager.GetString("SharepointToolTipToVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To Sort a recordset enter the field in the recordset you would like to sort on.&lt;br/&gt;
        ///        To sort on more than one field, perform the sort action for each field you would like to sort on, ending with the priority sort.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        [[Recordset().Field]].
        /// </summary>
        public static string SortHelpSortField {
            get {
                return ResourceManager.GetString("SortHelpSortField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the order of the sorting.&lt;br/&gt;
        ///        Forward will go 1-9 then a-Z.&lt;br/&gt;
        ///        Backward will go Z-a then 9-1.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        na.
        /// </summary>
        public static string SortHelpSortOrderType {
            get {
                return ResourceManager.GetString("SortHelpSortOrderType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Images\SplashImage_New_2014.jpg.
        /// </summary>
        public static string SplashImage {
            get {
                return ResourceManager.GetString("SplashImage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit the selected database connection properties.
        /// </summary>
        public static string SQLBulkInsertEditDatabaseHelp {
            get {
                return ResourceManager.GetString("SQLBulkInsertEditDatabaseHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of rows you would like to insert at a time.&lt;br/&gt;
        ///        The default is 0 which will do everything in 1 batch.&lt;br/&gt;
        ///        If you specify 50, then 50 rows will be bulk inserted at a time.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Number   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string SQLBulkInsertHelpBatchSize {
            get {
                return ResourceManager.GetString("SQLBulkInsertHelpBatchSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check constraints while data is being inserted. By default, constraints are not checked.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Check constraints while data is being inserted..
        /// </summary>
        public static string SQLBulkInsertHelpCheckConstraints {
            get {
                return ResourceManager.GetString("SQLBulkInsertHelpCheckConstraints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select a preconfigured database source or &quot;New Database Source...&quot; to add a new one.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Select a preconfigured database source or &quot;New Database Source...&quot; to add a new one..
        /// </summary>
        public static string SQLBulkInsertHelpDatabase {
            get {
                return ResourceManager.GetString("SQLBulkInsertHelpDatabase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When specified, cause the server to fire the insert triggers for the rows being inserted into the database.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        When specified, cause the server to fire the insert triggers for the rows being inserted into the database..
        /// </summary>
        public static string SQLBulkInsertHelpFiretriggers {
            get {
                return ResourceManager.GetString("SQLBulkInsertHelpFiretriggers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To bulk insert data into a table, put the data to insert in here.&lt;br /&gt;
        ///        Using recordset (*) notation will put the entire recordset in and is the normal usage scenario for large data inserts to SQL.&lt;br/&gt;
        ///        A single Recordset will yield the best performance. Do not mix, scalars and/or different recordsets for optimum performance.&lt;br/&gt;
        ///        To quickly change the input data, press the Quick Variable Input button and amend the mappings as necessary.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SQLBulkInsertHelpInputData {
            get {
                return ResourceManager.GetString("SQLBulkInsertHelpInputData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Preserve source identity values. When not specified, identity values are assigned by the destination.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Preserve source identity values..
        /// </summary>
        public static string SQLBulkInsertHelpKeepidentity {
            get {
                return ResourceManager.GetString("SQLBulkInsertHelpKeepidentity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns Success or the record numbers with errors.&lt;br/&gt; 
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br/&gt;
        ///        Using recordset () will add a new record and (*) will assign every record.&lt;br/&gt; 
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string SQLBulkInsertHelpResult {
            get {
                return ResourceManager.GetString("SQLBulkInsertHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Blank records will not be added to the SQL table.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Blank rows will be ignored.
        /// </summary>
        public static string SQLBulkInsertHelpSkipblankrows {
            get {
                return ResourceManager.GetString("SQLBulkInsertHelpSkipblankrows", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select a table to perform the bulk insert into.&lt;br/&gt;
        ///        If the table schema has changed or recently added to the source, click the refresh button.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Select a table to perform the bulk insert into..
        /// </summary>
        public static string SQLBulkInsertHelpTable {
            get {
                return ResourceManager.GetString("SQLBulkInsertHelpTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Obtain a bulk update lock for the duration of the bulk copy operation. When not specified, row locks are used.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Obtain a bulk update lock for the duration of the bulk copy operation..
        /// </summary>
        public static string SQLBulkInsertHelpTablelock {
            get {
                return ResourceManager.GetString("SQLBulkInsertHelpTablelock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of seconds you would like the operation to complete in.&lt;br /&gt;
        ///        All batches in total must complete within this time period.&lt;br /&gt;
        ///        The default is 0 which will be no time constraint.&lt;br/&gt;
        ///        If you specify 30, then 30 seconds will be allowed for the entire operation to complete before timing out.&lt;br/&gt;
        ///        Note, the timeout is purely for the actual SQL connection and not the preparation of the data to be inserted.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Number   
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SqlBulkInsertHelpTimeout {
            get {
                return ResourceManager.GetString("SqlBulkInsertHelpTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When specified, each batch of the bulk-copy operation will occur within a transaction.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        When specified, each batch of the bulk-copy operation will occur within a transaction..
        /// </summary>
        public static string SqlBulkInsertHelpUseInternalTransaction {
            get {
                return ResourceManager.GetString("SqlBulkInsertHelpUseInternalTransaction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refresh the information from the server.
        /// </summary>
        public static string SQLBulkInsertRefreshListHelp {
            get {
                return ResourceManager.GetString("SQLBulkInsertRefreshListHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To bulk insert data into a table, put the data to insert in here.&lt;br/&gt;
        ///        Using recordset (*) notation will put the entire recordset in and is the normal usage scenario for large data inserts to SQL.&lt;br /&gt;
        ///        A single Recordset will yield the best performance.&lt;br/&gt;
        ///        Do not mix, scalars and/or different recordsets for optimum performance.&lt;br/&gt;
        ///        To quickly change the input data, press the Quick Variable Input button and amend the mappings as necessary..
        /// </summary>
        public static string SQLBulkInsertToolTipInputData {
            get {
                return ResourceManager.GetString("SQLBulkInsertToolTipInputData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SQL Server Database Test Connector and Calculate Outputs.
        /// </summary>
        public static string SqlServerDbTestHeader {
            get {
                return ResourceManager.GetString("SqlServerDbTestHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;/div&gt;
        ///&lt;/body&gt;
        ///&lt;/html&gt;.
        /// </summary>
        public static string StandardBodyParagraphClosing {
            get {
                return ResourceManager.GetString("StandardBodyParagraphClosing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
        ///
        ///&lt;head runat=&quot;server&quot;&gt;
        ///    &lt;style&gt;
        ///        div {
        ///            clear: both;
        ///            margin: 0;
        ///            font-size: 12px;
        ///            font-family: &apos;Source Sans Pro&apos;;
        ///        }
        ///
        ///        h1 {
        ///            font-size: 17px;
        ///            font-family: &apos;Source Sans Pro&apos;;
        ///            text-decoration: underline;
        ///            align-content: center;
        ///        }
        ///
        ///        h2 {
        ///            font-size: 16px;
        ///            font-family: &apos;Source Sans Pro&apos;;
        ///            text-decoration:  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string StandardStyling {
            get {
                return ResourceManager.GetString("StandardStyling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns the type of system information selected.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string SystemInformationHelpResult {
            get {
                return ResourceManager.GetString("SystemInformationHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the type of system information you would like to use.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        na.
        /// </summary>
        public static string SystemInformationHelpSysInfoType {
            get {
                return ResourceManager.GetString("SystemInformationHelpSysInfoType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test Connection.
        /// </summary>
        public static string TestConnectionLabel {
            get {
                return ResourceManager.GetString("TestConnectionLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test/Default:.
        /// </summary>
        public static string TestDefaultLabel {
            get {
                return ResourceManager.GetString("TestDefaultLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the email account is working.
        /// </summary>
        public static string TestEmailAccountHelp {
            get {
                return ResourceManager.GetString("TestEmailAccountHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test Connector and Calculate Outputs.
        /// </summary>
        public static string TestHeader {
            get {
                return ResourceManager.GetString("TestHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clear the filter box.
        /// </summary>
        public static string ToolboxClearSearchTooltip {
            get {
                return ResourceManager.GetString("ToolboxClearSearchTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refresh the toolbox.
        /// </summary>
        public static string ToolboxRefreshToolTip {
            get {
                return ResourceManager.GetString("ToolboxRefreshToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Search filter for your tools.
        /// </summary>
        public static string ToolboxSearchToolTip {
            get {
                return ResourceManager.GetString("ToolboxSearchToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filters the content of the toolbox..
        /// </summary>
        public static string ToolboxViewFilterSearchHelp {
            get {
                return ResourceManager.GetString("ToolboxViewFilterSearchHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refreshes the content of the toolbox..
        /// </summary>
        public static string ToolboxViewRefreshHelp {
            get {
                return ResourceManager.GetString("ToolboxViewRefreshHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tool guids are not allowed to be the empty guid.
        /// </summary>
        public static string ToolDescriptor_ToolDescriptor_Tool_guids_are_not_allowed_to_be_the_empty_guid {
            get {
                return ResourceManager.GetString("ToolDescriptor_ToolDescriptor_Tool_guids_are_not_allowed_to_be_the_empty_guid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To identify unique information in a recordset, put the comma separated fields that need to be unique in here. &lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        [[Recordset().Field]].
        /// </summary>
        public static string UniqueHelpInFields {
            get {
                return ResourceManager.GetString("UniqueHelpInFields", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Returns the unique combinations into the variables specified.&lt;br/&gt;
        ///        If there are multiple fields being returned, there should be multiple Results fields specified. Use a comma to separate the variables.&lt;br/&gt; 
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string UniqueHelpResults {
            get {
                return ResourceManager.GetString("UniqueHelpResults", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Which fields from the recordset would you like returned when a Unique combination is found?&lt;br/&gt;
        ///        Use a comma separated list of the fields.&lt;br/&gt;
        ///        Where multiple rows are the same, the first one will be deemed Unique.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        [[Recordset().Field]].
        /// </summary>
        public static string UniqueHelpReturnFields {
            get {
                return ResourceManager.GetString("UniqueHelpReturnFields", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the password needed to open the zip file here.&lt;br /&gt;
        ///        Leaving the Archive Password blank will result in no archive password being used to open the file.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string UnzipHelpArchivePassword {
            get {
                return ResourceManager.GetString("UnzipHelpArchivePassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        Put the full path of the destination you are unzipping to here.&lt;br /&gt;
        ///        You can use File System, URI, SFTP, FTP or FTPS format.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string UnzipHelpDestination {
            get {
                return ResourceManager.GetString("UnzipHelpDestination", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a file or folder already exists, you can force a new one to overwrite the old one.&lt;br/&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        If it exists already, force an overwrite.
        /// </summary>
        public static string UnzipHelpForceoverwrite {
            get {
                return ResourceManager.GetString("UnzipHelpForceoverwrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Password of an account with permission to access the source.&lt;br/&gt;
        ///        By default the account running Warewolf Server.exe service will be used.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string UnzipHelpPassword {
            get {
                return ResourceManager.GetString("UnzipHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns Success or will be blank depending on the success of the Unzip action.&lt;br/&gt; 
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br/&gt;
        ///        Using recordset() will add a new record and (*) will assign every record.&lt;br/&gt; 
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string UnzipHelpResult {
            get {
                return ResourceManager.GetString("UnzipHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Username of an account with permission to access the source.&lt;br/&gt;
        ///        By default the account running Warewolf Server.exe service will be used.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string UnzipHelpUsername {
            get {
                return ResourceManager.GetString("UnzipHelpUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br/&gt;
        ///        To unzip a file, put the full path and zip file name in here.&lt;br/&gt;
        ///        You can use File System, URI, SFTP, FTP or FTPS format..
        /// </summary>
        public static string UnzipToolTipZipname {
            get {
                return ResourceManager.GetString("UnzipToolTipZipname", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to http://community.warewolf.io/.
        /// </summary>
        public static string Uri_Community_HomePage {
            get {
                return ResourceManager.GetString("Uri_Community_HomePage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Help\Warewolf Language.htm.
        /// </summary>
        public static string Uri_Studio_Language_Reference_Document {
            get {
                return ResourceManager.GetString("Uri_Studio_Language_Reference_Document", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Help\PageMissing.htm.
        /// </summary>
        public static string Uri_Studio_PageMissing {
            get {
                return ResourceManager.GetString("Uri_Studio_PageMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Help\PageNotAvailable.htm.
        /// </summary>
        public static string Uri_Studio_PageNotAvailable {
            get {
                return ResourceManager.GetString("Uri_Studio_PageNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Help\PageRestrictedAccess.htm.
        /// </summary>
        public static string Uri_Studio_PageRestrictedAccess {
            get {
                return ResourceManager.GetString("Uri_Studio_PageRestrictedAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connect with a specific user account..
        /// </summary>
        public static string UserAuthenticationHelp {
            get {
                return ResourceManager.GetString("UserAuthenticationHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connect using a specific account.
        /// </summary>
        public static string UserAuthenticationToolTip {
            get {
                return ResourceManager.GetString("UserAuthenticationToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The full username of the account you want to use to connect to this resource..
        /// </summary>
        public static string UserNameAuthenticationHelp {
            get {
                return ResourceManager.GetString("UserNameAuthenticationHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User Name:.
        /// </summary>
        public static string UserNameLabel {
            get {
                return ResourceManager.GetString("UserNameLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter the user name you want to connect with.
        /// </summary>
        public static string UserNameToolTip {
            get {
                return ResourceManager.GetString("UserNameToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to View Results In Browser.
        /// </summary>
        public static string ViewInBrowserLabel {
            get {
                return ResourceManager.GetString("ViewInBrowserLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to http://warewolf.io/start.html.
        /// </summary>
        public static string Warewolf_Homepage_Start {
            get {
                return ResourceManager.GetString("Warewolf_Homepage_Start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to pack://application:,,,/Warewolf Studio;component/images/WarewolfLogoMedRes.png.
        /// </summary>
        public static string Warewolf_Logo {
            get {
                return ResourceManager.GetString("Warewolf_Logo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copyright © 2015 Warewolf, All rights reserved..
        /// </summary>
        public static string WarewolfCopyright {
            get {
                return ResourceManager.GetString("WarewolfCopyright", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt; Warewolf Help &lt;/h2&gt; 
        ///    For more information, follow the link below.
        ///    &lt;br/&gt;&lt;br/&gt;
        ///    &lt;a href=&quot;http://warewolf.io/knowledge-base/&quot; target=&quot;_blank&quot;&gt;Read more in the Knowledge Base.&lt;/a&gt;.
        /// </summary>
        public static string WarewolfDefaultHelpDescription {
            get {
                return ResourceManager.GetString("WarewolfDefaultHelpDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to http://warewolf.io/knowledge-base/.
        /// </summary>
        public static string WarewolfHelpURL {
            get {
                return ResourceManager.GetString("WarewolfHelpURL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to http://warewolf.io/.
        /// </summary>
        public static string WarewolfUrl {
            get {
                return ResourceManager.GetString("WarewolfUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Web Get Request Test Connector and Calculate Outputs.
        /// </summary>
        public static string WebGetTestHeader {
            get {
                return ResourceManager.GetString("WebGetTestHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The test data you want to use to execute this action with..
        /// </summary>
        public static string WebInputDefaultValueHelp {
            get {
                return ResourceManager.GetString("WebInputDefaultValueHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test data for the execution.
        /// </summary>
        public static string WebInsertToolTipColumn {
            get {
                return ResourceManager.GetString("WebInsertToolTipColumn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To supply additional header information in your get request, put the header info in here.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string WebRequestHelpHeader {
            get {
                return ResourceManager.GetString("WebRequestHelpHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only a single variable goes in here.&lt;br/&gt;
        ///        Returns the response text of the web get request.&lt;br/&gt; 
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string WebRequestHelpResult {
            get {
                return ResourceManager.GetString("WebRequestHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        To traverse and retrieve the raw response from a webpage, enter it in here.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string WebRequestHelpURL {
            get {
                return ResourceManager.GetString("WebRequestHelpURL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit .
        /// </summary>
        public static string WebserviceEditHeaderLabel {
            get {
                return ResourceManager.GetString("WebserviceEditHeaderLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select Request Method and Source.
        /// </summary>
        public static string WebserviceHeader {
            get {
                return ResourceManager.GetString("WebserviceHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Header.
        /// </summary>
        public static string WebserviceHeadersHeader {
            get {
                return ResourceManager.GetString("WebserviceHeadersHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Web Service Source.
        /// </summary>
        public static string WebserviceNewHeaderLabel {
            get {
                return ResourceManager.GetString("WebserviceNewHeaderLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a reusable connection to a web service.&lt;br/&gt;
        ///&lt;br/&gt;
        ///This allows you to create a general connection string and the create the actual web service from there so you do not need to update the core address in every service from this provider / source..
        /// </summary>
        public static string WebServiceNewWebSourceHelp {
            get {
                return ResourceManager.GetString("WebServiceNewWebSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel your changes to the response body..
        /// </summary>
        public static string WebServicePasteCancelCommandHelp {
            get {
                return ResourceManager.GetString("WebServicePasteCancelCommandHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can manually add the response body here..
        /// </summary>
        public static string WebServicePasteHelp {
            get {
                return ResourceManager.GetString("WebServicePasteHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Paste the XML, JSON or plain text response of the web service call here.&lt;br/&gt;
        ///&lt;br/&gt;
        ///If you do not know the response body exactly, rather execute the Test execution..
        /// </summary>
        public static string WebServicePasteInputHelp {
            get {
                return ResourceManager.GetString("WebServicePasteInputHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Saves this as the mapping that will be used by Warewolf when executing..
        /// </summary>
        public static string WebServicePasteSaveCommandHelp {
            get {
                return ResourceManager.GetString("WebServicePasteSaveCommandHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Body.
        /// </summary>
        public static string WebserviceRequestBodyHeader {
            get {
                return ResourceManager.GetString("WebserviceRequestBodyHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request body.&lt;br/&gt;
        ///&lt;br/&gt;
        ///This is typically directly after the header text in the Request..
        /// </summary>
        public static string WebServiceRequestBodyHelp {
            get {
                return ResourceManager.GetString("WebServiceRequestBodyHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Request.
        /// </summary>
        public static string WebserviceRequestHeader {
            get {
                return ResourceManager.GetString("WebserviceRequestHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Web Service Request Headers.&lt;br/&gt;
        ///&lt;br/&gt;
        ///You can use variables here in the value field like [[Header_ResponseType]]. These variable values will be requested when you drop the service on the workflow designer..
        /// </summary>
        public static string WebServiceRequestHeadersTableHelp {
            get {
                return ResourceManager.GetString("WebServiceRequestHeadersTableHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to URL.
        /// </summary>
        public static string WebserviceRequestURLHeader {
            get {
                return ResourceManager.GetString("WebserviceRequestURLHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Web Service Request URL to execute.&lt;br/&gt;
        ///&lt;br/&gt;
        ///The un-editable part is determined by the Source you are using, so it&apos;s easy to change when moving environments, for example, going from development to testing, or live..
        /// </summary>
        public static string WebServiceRequestUrlHelp {
            get {
                return ResourceManager.GetString("WebServiceRequestUrlHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Response.
        /// </summary>
        public static string WebserviceResponseHeader {
            get {
                return ResourceManager.GetString("WebserviceResponseHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the connection string properties of the selected Webservice.&lt;br&gt;
        ///&lt;br/&gt;
        ///Change the connection string from, say, a development service to a live service.&lt;br/&gt;
        ///&lt;br/&gt;
        ///&lt;a href=&quot;http://warewolf.io/knowledge-base/data-connectors&quot; target=&quot;_blank&quot;&gt;Read more in the Knowledgebase.&lt;/a&gt;.
        /// </summary>
        public static string WebServiceSelectedSourceHelp {
            get {
                return ResourceManager.GetString("WebServiceSelectedSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The base URL of the Webservice.&lt;br/&gt;
        ///&lt;br/&gt;
        ///This should be up to the part of the URL that contains the difference between your live and demo environments. e.g. https://myservices.mycompany.com/demo&lt;br/&gt;
        ///&lt;br/&gt;
        ///This will allow you to ship webservice connectors to live without having to change the base URL every time you do..
        /// </summary>
        public static string WebServiceSourceServerHelp {
            get {
                return ResourceManager.GetString("WebServiceSourceServerHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provides a list of available saved web sources.&lt;br/&gt;
        ///&lt;br/&gt;
        ///If a Web Source does not exist under this list, then click the &apos;New&apos; button to create a new Web Source..
        /// </summary>
        public static string WebServiceSourcesHelp {
            get {
                return ResourceManager.GetString("WebServiceSourcesHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Web Service Connector.
        /// </summary>
        public static string WebserviceTabHeader {
            get {
                return ResourceManager.GetString("WebserviceTabHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the Webservice to get response payload. &lt;br/&gt;
        ///&lt;br/&gt;
        ///This allows us to map response data back into the system for you..
        /// </summary>
        public static string WebServiceTestCommandHelp {
            get {
                return ResourceManager.GetString("WebServiceTestCommandHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variables.
        /// </summary>
        public static string WebserviceVariablesHeader {
            get {
                return ResourceManager.GetString("WebserviceVariablesHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates the method to be performed on the object identified by the URL&lt;br/&gt;
        ///&lt;br/&gt;
        ///These should be set by the webservice creator and found in the webservice documentation.&lt;br/&gt;
        ///&lt;br/&gt;
        ///Note that the GET method, does not have a request Body..
        /// </summary>
        public static string WebServiceWebRequestHelp {
            get {
                return ResourceManager.GetString("WebServiceWebRequestHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uses the Windows Authentication protocols to authenticate the executing account. .
        /// </summary>
        public static string WindowsAuthenticationHelp {
            get {
                return ResourceManager.GetString("WindowsAuthenticationHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connect using the logged on users credentials.
        /// </summary>
        public static string WindowsAuthenticationToolTip {
            get {
                return ResourceManager.GetString("WindowsAuthenticationToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        Put the contents you want written to the file in here.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string WriteFileHelpContents {
            get {
                return ResourceManager.GetString("WriteFileHelpContents", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.&lt;br /&gt;
        ///        To write content to a file, put the full path and file name in here.&lt;br /&gt;
        ///        You can use File System, URI, SFTP, FTP or FTPS format.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string WriteFileHelpFilename {
            get {
                return ResourceManager.GetString("WriteFileHelpFilename", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overwrite will replace the file contents with the new content.&lt;br/&gt;
        ///        Append Top puts the new content at the beginning of the file.&lt;br/&gt;
        ///        Append Bottom will add the new content to the end of the file..
        /// </summary>
        public static string WriteFileHelpMethod {
            get {
                return ResourceManager.GetString("WriteFileHelpMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Password of an account with permission to perform this action.&lt;br /&gt;
        ///        By default the account running Warewolf Server.exe service will be used.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string WriteFileHelpPassword {
            get {
                return ResourceManager.GetString("WriteFileHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.&lt;br /&gt;
        ///        Returns Success or will be blank depending on the success of the Write action.&lt;br/&gt; 
        ///        You can use [[Scalar]] as well as [[Recordset().Fields]].&lt;br/&gt;
        ///        Using recordset() will add a new record and (*) will assign every record.&lt;br/&gt; 
        ///        &lt;br /&gt;
        ///
        ///        Allowed:
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string WriteFileHelpResult {
            get {
                return ResourceManager.GetString("WriteFileHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Username of an account with permission to perform this action.&lt;br /&gt;
        ///        By default the account running Warewolf Server.exe service will be used.&lt;br /&gt;
        ///        &lt;br /&gt;
        ///
        ///        Allowed:&lt;br /&gt;
        ///        Data   
        ///        &lt;ol&gt;
        ///            &lt;li&gt;[[Scalar]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;
        ///            &lt;li&gt;[[Recordset().Field]]&lt;/li&gt;
        ///        &lt;/ol&gt;.
        /// </summary>
        public static string WriteFileHelpUsername {
            get {
                return ResourceManager.GetString("WriteFileHelpUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;Service Name=&quot;GetCars&quot;&gt;
        ///  &lt;Actions&gt;
        ///	&lt;Action Name=&quot;GetCarsByReg&quot; Type=&quot;InvokeStoredProc&quot; SourceName=&quot;CarsDatabase&quot;&gt;
        ///		&lt;Inputs&gt;
        ///			&lt;Input Name=&quot;reg&quot; Source=&quot;&quot; DefaultValue=&quot;NUD2347&quot;&gt;
        ///				&lt;Validator Type=&quot;Required&quot; /&gt;				
        ///			&lt;/Input&gt;
        ///			&lt;Input Name=&quot;asdfsad&quot; Source=&quot;registration223&quot; DefaultValue=&quot;w3rt24324&quot;&gt;
        ///				&lt;Validator Type=&quot;Required&quot; /&gt;				
        ///			&lt;/Input&gt;			
        ///			&lt;Input Name=&quot;number&quot; Source=&quot;&quot; DefaultValue=&quot;&quot;/&gt;
        ///		&lt;/Inputs&gt;
        ///		&lt;Outputs&gt;
        ///			&lt;Output Name=&quot;vehicleVin&quot; MapsTo=&quot;VIN&quot; Value=&quot;&quot;/&gt;
        ///			&lt;Output Name=&quot;vehi [rest of string was truncated]&quot;;.
        /// </summary>
        public static string xmlNullSourceMethodServiceDef {
            get {
                return ResourceManager.GetString("xmlNullSourceMethodServiceDef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;xamDockManager version=&quot;12.1.20121.2107&quot;&gt;
        ///  &lt;contentPanes&gt;
        ///    &lt;contentPane name=&quot;OutputPane&quot; location=&quot;DockedRight&quot; lastFloatingSize=&quot;1000,200&quot; lastFloatingWindowRect=&quot;625,541,1016,234&quot; lastFloatingLocation=&quot;625,541&quot; lastActivatedTime=&quot;2013-06-10T07:30:08.998685Z&quot; /&gt;
        ///    &lt;contentPane name=&quot;Variables&quot; location=&quot;DockedRight&quot; lastFloatingSize=&quot;300,706&quot; lastFloatingWindowRect=&quot;1475,482,316,740&quot; lastFloatingLocation=&quot;1475,482&quot; lastActivatedTime=&quot;2013-06-10T07:30:02.882685 [rest of string was truncated]&quot;;.
        /// </summary>
        public static string XmlOriginalLayout {
            get {
                return ResourceManager.GetString("XmlOriginalLayout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;Service Name=&quot;GetCars&quot;&gt;
        ///  &lt;Actions&gt;
        ///	&lt;Action Name=&quot;GetCarsByReg&quot; Type=&quot;InvokeStoredProc&quot; SourceName=&quot;CarsDatabase&quot; SourceMethod=&quot;proc_GetCarsByReg&quot;&gt;
        ///		&lt;Inputs&gt;
        ///			&lt;Input Name=&quot;reg&quot; Source=&quot;&quot; DefaultValue=&quot;NUD2347&quot;&gt;
        ///				&lt;Validator Type=&quot;Required&quot; /&gt;				
        ///			&lt;/Input&gt;
        ///			&lt;Input Name=&quot;asdfsad&quot; Source=&quot;registration223&quot; DefaultValue=&quot;w3rt24324&quot;&gt;
        ///				&lt;Validator Type=&quot;Required&quot; /&gt;				
        ///			&lt;/Input&gt;			
        ///			&lt;Input Name=&quot;number&quot; Source=&quot;&quot; DefaultValue=&quot;&quot;/&gt;
        ///		&lt;/Inputs&gt;
        ///		&lt;Outputs&gt;
        ///			&lt;Output Name=&quot;vehicleVin&quot; MapsTo=&quot;VIN&quot; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string xmlServiceDefinition {
            get {
                return ResourceManager.GetString("xmlServiceDefinition", resourceCulture);
            }
        }
    }
}
