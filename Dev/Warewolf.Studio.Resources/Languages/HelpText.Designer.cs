//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Warewolf.Studio.Resources.Languages {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class HelpText {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal HelpText() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Warewolf.Studio.Resources.Languages.HelpText", typeof(HelpText).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	To assign a value to a variable, put the value in here.	If you put an = as the first character, it will turn into a calculation e.g. =[[qty]]*[[price]]	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;	= fx.
        /// </summary>
        public static string AssignHelpNewValue {
            get {
                return ResourceManager.GetString("AssignHelpNewValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	To assign a value to a variable, put the variable here.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string AssignHelpVariable {
            get {
                return ResourceManager.GetString("AssignHelpVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any object and/or data goes in here.	To assign a value to a object, put the value in here.	If you put an = as the first character, it will turn into a calculation e.g. =[[qty]]*[[price]]	&lt;br /&gt;	Allowed: &lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;li&gt;[[@Object(*).Field]]&lt;/li&gt;	&lt;li&gt;[[@Object().Field]]&lt;/li&gt;	&lt;li&gt;[[@Object.InnerCollection().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string AssignObjectHelpNewValue {
            get {
                return ResourceManager.GetString("AssignObjectHelpNewValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only objects go in here.	To assign a value to an object, put the object path in here.	&lt;br /&gt;	Allowed: &lt;br /&gt;	[[@Object.Property]]&lt;br /&gt;	[[@Object.Object(n).Property]].
        /// </summary>
        public static string AssignObjectHelpVariable {
            get {
                return ResourceManager.GetString("AssignObjectHelpVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and data goes in here.	To convert Text, Hex, Binary and Base64, put the data to be converted in here.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string BaseConversionHelpBaseInput {
            get {
                return ResourceManager.GetString("BaseConversionHelpBaseInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the type of data you are converting from.	e.g. If the data is Binary and you would like Text, then select Binary here.	Allowed:	na.
        /// </summary>
        public static string BaseConversionHelpFromType {
            get {
                return ResourceManager.GetString("BaseConversionHelpFromType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the type of data you are converting to.	e.g. If the data is Binary and you would like Text, then select Text here.	Allowed:	na.
        /// </summary>
        public static string BaseConversionHelpToType {
            get {
                return ResourceManager.GetString("BaseConversionHelpToType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	To perform a calculation, put the calculation in here in BODMAS format.	To use the aggregate functions, use the recordset (*) notation e.g. SUM([[Staff(*).Salaries]]) will perform one calculation and give one result that is the total of all the Salaries fields in the Staff() recordset.	Aggregate functions are:	&lt;table&gt;	&lt;tr&gt;	&lt;td&gt;sum()&lt;/td&gt;	&lt;td&gt;average()&lt;/td&gt;	&lt;td&gt;product()&lt;/td&gt;	&lt;td&gt;count()&lt;/td&gt;	&lt;/tr&gt;	&lt;tr&gt;	&lt;td&gt;max()&lt;/td&gt;	&lt;td&gt;median()&lt;/td&gt;	&lt;td&gt;min()&lt;/td&gt;	&lt;td&gt;var()&lt;/td&gt;	&lt;/tr [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CalculateForAggregatesHelpFx {
            get {
                return ResourceManager.GetString("CalculateForAggregatesHelpFx", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns the formatted number.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string CalculateForAggregatesHelpResult {
            get {
                return ResourceManager.GetString("CalculateForAggregatesHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	To perform a calculation, put the calculation in here in BODMAS format.	Using (*) notation for recordsets, will perform the calculation and give a result, for each record.	To use aggregate functions on the whole recordset e.g. to Sum all the [[Product(*).Price]] fields in a recordset, use the Aggregate Calculate tool.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/l [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CalculateHelpFx {
            get {
                return ResourceManager.GetString("CalculateHelpFx", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns the formatted number.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string CalculateHelpResult {
            get {
                return ResourceManager.GetString("CalculateHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the type of conversion you would like to make..
        /// </summary>
        public static string CaseConversionHelpConvertToCaseType {
            get {
                return ResourceManager.GetString("CaseConversionHelpConvertToCaseType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	To convert the case of some text, put the variable containing the text here.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string CaseConversionHelpTextInput {
            get {
                return ResourceManager.GetString("CaseConversionHelpTextInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File picker to help you locate the location of the items you want to attach.
        /// </summary>
        public static string ChooseAttachmentsHelp {
            get {
                return ResourceManager.GetString("ChooseAttachmentsHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	To execute a command line action or actions, enter them in here. Acts like a batch file. Any user driven task will simply be ignored.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string CMDLineHelpCMD {
            get {
                return ResourceManager.GetString("CMDLineHelpCMD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The process priority for execution. Very helpful for long running processes that need/don’t need to be resource intensive.	Allowed:	na.
        /// </summary>
        public static string CMDLineHelpPrioritytype {
            get {
                return ResourceManager.GetString("CMDLineHelpPrioritytype", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Returns the output of the execution if any. Varies depending on what was executed.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string CMDLineHelpResult {
            get {
                return ResourceManager.GetString("CMDLineHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comments do not execute and are place holders for future services or tools or simply to leave commentary inside the workflow.	You can connect comments into the process flow and they will simply be skipped during execution. However, they will appear in the debug output.	Allowed:	Notes and comments will not be executed at run time but will show up in the debug output..
        /// </summary>
        public static string CommentHelpComment {
            get {
                return ResourceManager.GetString("CommentHelpComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edits the selected COM plugin source connection..
        /// </summary>
        public static string ComPluginServiceEditSourceHelp {
            get {
                return ResourceManager.GetString("ComPluginServiceEditSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To create a reference to a new COM object, click New..
        /// </summary>
        public static string ComPluginServiceNewSourceHelp {
            get {
                return ResourceManager.GetString("ComPluginServiceNewSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the COM DLL you want to use from previously setup sources..
        /// </summary>
        public static string ComPluginServiceSourcesHelp {
            get {
                return ResourceManager.GetString("ComPluginServiceSourcesHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clears the Search Filter.
        /// </summary>
        public static string ComPluginSourceClearSearchHelp {
            get {
                return ResourceManager.GetString("ComPluginSourceClearSearchHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PROGrammatic IDentifier of the COM DLL.
        /// </summary>
        public static string ComPluginSourceDllFullNameHelp {
            get {
                return ResourceManager.GetString("ComPluginSourceDllFullNameHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refresh the view based on the filter.&lt;br/&gt;	&lt;br/&gt;	Newly added resources should show after a refresh..
        /// </summary>
        public static string ComPluginSourceRefreshCommandHelp {
            get {
                return ResourceManager.GetString("ComPluginSourceRefreshCommandHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the connection properties of the selected Warewolf Server.&lt;br&gt;	&lt;br/&gt;	Allows you to change remote server URL, Port and Authentication.&lt;br&gt;	&lt;br/&gt;	&lt;b&gt;localhost&lt;/b&gt; cannot be edited in this way..
        /// </summary>
        public static string ConnectControlViewEditHelp {
            get {
                return ResourceManager.GetString("ConnectControlViewEditHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the Warewolf Server from the drop down list that you want to use. &lt;br/&gt;	&lt;br/&gt;	If you want to connect to a Warewolf Server that is not in the drop down list, then select  &lt;b&gt;New Remote Server…&lt;/b&gt;&lt;br/&gt;	&lt;br/&gt;	Servers with an active connection will show &lt;b&gt;(Connected)&lt;/b&gt; next to them..
        /// </summary>
        public static string ConnectControlViewSelectHelp {
            get {
                return ResourceManager.GetString("ConnectControlViewSelectHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disconnects or Connects to the selected remote Warewolf Server. &lt;br/&gt;	&lt;br/&gt;	Connected Servers will be Disconnected and vice versa. &lt;br/&gt;	&lt;br/&gt;	&lt;b&gt;localhost&lt;/b&gt; cannot be disconnected and should always be connected. If it is not connected, try restarting the Warewolf Server service in Task Manager..
        /// </summary>
        public static string ConnectControlViewToggleConnectionHelp {
            get {
                return ResourceManager.GetString("ConnectControlViewToggleConnectionHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	Put the full path of the destination you are copying to here.	You can use File System, URI, SFTP, FTP or FTPS format.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string CopyHelpDestination {
            get {
                return ResourceManager.GetString("CopyHelpDestination", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	To copy a file or folder, put the full path and file or folder name here.	You can use File System, URI, SFTP, FTP or FTPS format.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string CopyHelpFileFolder {
            get {
                return ResourceManager.GetString("CopyHelpFileFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the file or folder already exists, you can force a new one to overwrite the old one.	Allowed:	If it exists already, force an overwrite.
        /// </summary>
        public static string CopyHelpForceoverwrite {
            get {
                return ResourceManager.GetString("CopyHelpForceoverwrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Password of an account with permission to access the destination. By default the account running Warewolf Server.exe service will be used.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string CopyHelpPassword {
            get {
                return ResourceManager.GetString("CopyHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns Success or will be blank depending on the success of the Copy action.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string CopyHelpResult {
            get {
                return ResourceManager.GetString("CopyHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Username of an account with permission to access the source. By default the account running Warewolf Server.exe service will be used.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string CopyHelpUsername {
            get {
                return ResourceManager.GetString("CopyHelpUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To Count the number of records/indexes in a recordset, put the recordset name in here. E.g. [[Customer()]]	&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Recordset()]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string CountHelpRecordset {
            get {
                return ResourceManager.GetString("CountHelpRecordset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns a number specifying how many records/indexes are in the recordset.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset() will add a new record and (*) will assign every record.	&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string CountHelpResult {
            get {
                return ResourceManager.GetString("CountHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	To create a file or folder, put the full path and file or folder name here.	You can use File System, URI, SFTP, FTP or FTPS format.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string CreateHelpFileFolder {
            get {
                return ResourceManager.GetString("CreateHelpFileFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the file or folder already exists, you can force a new one to overwrite the old one.	Allowed:	If it exists already, force an overwrite.
        /// </summary>
        public static string CreateHelpForceOverWrite {
            get {
                return ResourceManager.GetString("CreateHelpForceOverWrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Password of an account with permission to perform this action. By default the account running Warewolf Server.exe service will be used.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string CreateHelpPassword {
            get {
                return ResourceManager.GetString("CreateHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns Success or will be blank depending on the success of the Create action.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string CreateHelpResult {
            get {
                return ResourceManager.GetString("CreateHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Username of an account with permission to perform this action. By default the account running Warewolf Server.exe service will be used.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string CreateHelpUsername {
            get {
                return ResourceManager.GetString("CreateHelpUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To create JSON data, enter the Name and Data of the JSON variables. 	To create JSON Arrays use a single recordset field with a star for every record e.g. 	[[rec(*).name]] 	To create JSON Objects, use a comma separated list of recordset fields, or, just the recordset name to use the whole recordset. e.g. 	[[rec(*).surname]], [[rec(*).name]], [[rec(*).middle]] 	or simply 	[[rec(*)]]	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Rec [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CreateJSONHelpInput {
            get {
                return ResourceManager.GetString("CreateJSONHelpInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The JSON variable name will default to the Warewolf variable name in the Data column. 	Array and Object names will default to the recordset name used. 	Object data names will be the field names of the recordset.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string CreateJSONHelpName {
            get {
                return ResourceManager.GetString("CreateJSONHelpName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns the inputs in JSON format.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string CreateJSONHelpResult {
            get {
                return ResourceManager.GetString("CreateJSONHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.
        ///To create a SFTP Key, put the full path and file or folder name here..
        /// </summary>
        public static string CreateSftpPrivateKeyHelp {
            get {
                return ResourceManager.GetString("CreateSftpPrivateKeyHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the connection string properties of the selected Database.&lt;br&gt;	&lt;br/&gt;	Change the connection string from, say, a development database to a live database.&lt;br/&gt;	&lt;br/&gt;	&lt;a href=&quot;http://warewolf.io/knowledge-base/data-connectors&quot; target=&quot;_blank&quot;&gt;Read more in the Knowledge Base.&lt;/a&gt;.
        /// </summary>
        public static string DatabaseServiceEditSourceHelp {
            get {
                return ResourceManager.GetString("DatabaseServiceEditSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a connection to a new database server..
        /// </summary>
        public static string DatabaseServiceNewSourceHelp {
            get {
                return ResourceManager.GetString("DatabaseServiceNewSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refreshes the list of available actions on the database..
        /// </summary>
        public static string DatabaseServiceRefreshHelp {
            get {
                return ResourceManager.GetString("DatabaseServiceRefreshHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The available database actions you can perform such as stored procedures or function calls..
        /// </summary>
        public static string DatabaseServiceSelectActionHelp {
            get {
                return ResourceManager.GetString("DatabaseServiceSelectActionHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The available database connections. To create a new connection, click New..
        /// </summary>
        public static string DatabaseServiceSourceTypesHelp {
            get {
                return ResourceManager.GetString("DatabaseServiceSourceTypesHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancels the setup of this database source..
        /// </summary>
        public static string DatabaseSourceCancelHelp {
            get {
                return ResourceManager.GetString("DatabaseSourceCancelHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The available databases on the Server..
        /// </summary>
        public static string DatabaseSourceDatabasesHelp {
            get {
                return ResourceManager.GetString("DatabaseSourceDatabasesHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Server/Computer Name on your network with the Database Engine.&lt;br/&gt;	&lt;br/&gt;	Alternatively, the URL for your online Server, such as Azure SQL..
        /// </summary>
        public static string DatabaseSourceServerHelp {
            get {
                return ResourceManager.GetString("DatabaseSourceServerHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to These are the currently supported database engines..
        /// </summary>
        public static string DatabaseSourceServerTypesHelp {
            get {
                return ResourceManager.GetString("DatabaseSourceServerTypesHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the connection to the Database. .
        /// </summary>
        public static string DatabaseSourceTestConnectionHelp {
            get {
                return ResourceManager.GetString("DatabaseSourceTestConnectionHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When the variable is not used in the service at all, you can select Marks the variable as an input to the service. To pass this variable into the workflow, make this checkbox selected.&lt;br/&gt;	&lt;br/&gt;	This variable is not being used in the service and can safely be deleted..
        /// </summary>
        public static string DataListDeleteButtonHelp {
            get {
                return ResourceManager.GetString("DataListDeleteButtonHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Marks the variable as an input to the service. To pass this variable into the workflow, make this checkbox selected.&lt;br/&gt;	&lt;br/&gt;	&lt;a href=&quot;http://warewolf.io/knowledge-base/the-variable-list/&quot;  target=&quot;_blank&quot;&gt;Read more in the Knowledge Base.&lt;/a&gt;.
        /// </summary>
        public static string DataListInputCheckBoxHelp {
            get {
                return ResourceManager.GetString("DataListInputCheckBoxHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Marks the variable as an output of the service. To return this variable from the workflow service, make this checkbox selected.&lt;br/&gt;	&lt;br/&gt;	&lt;a href=&quot;http://warewolf.io/knowledge-base/warewolf-language/&quot;  target=&quot;_blank&quot;&gt;Read more in the Knowledge Base.&lt;/a&gt;.
        /// </summary>
        public static string DataListOutputCheckBoxHelp {
            get {
                return ResourceManager.GetString("DataListOutputCheckBoxHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sort the variable list alphabetically..
        /// </summary>
        public static string DataListSortButtonHelp {
            get {
                return ResourceManager.GetString("DataListSortButtonHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Input the variable you want to use in your service.&lt;br/&gt;	&lt;br/&gt;	If you use a variable on the design surface it will automatically appear here.&lt;br/&gt;	&lt;br/&gt;	&lt;a href=&quot;http://warewolf.io/knowledge-base/the-variable-list/&quot;  target=&quot;_blank&quot;&gt;Read more in the Knowledge Base.&lt;/a&gt;.
        /// </summary>
        public static string DataListVariableInputHelp {
            get {
                return ResourceManager.GetString("DataListVariableInputHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For Index you can specify if your data is aligned to the right or left.	E.g. Text is normally left and numbers normally right.	Allowed:	na.
        /// </summary>
        public static string DataMergeHelpAlignType {
            get {
                return ResourceManager.GetString("DataMergeHelpAlignType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	To join two or more pieces of data together list them in the order you would like them joined. If you use recordset (*) notation, the list will be repeated for every record.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string DataMergeHelpInput {
            get {
                return ResourceManager.GetString("DataMergeHelpInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If Index is being used and there is extra space between the data supplied and the number of index characters, you can specify what makes up the padding e.g. 0 for numbers or blank space for text.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string DataMergeHelpPadding {
            get {
                return ResourceManager.GetString("DataMergeHelpPadding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns the merged string.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string DataMergeHelpResult {
            get {
                return ResourceManager.GetString("DataMergeHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For Index use the number of characters that this merge will use. It will either trim if too little, or pad if too much.	For Char put any characters or combination of characters you would like.	Not applicable to New Line or Tab	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string DataMergeHelpUsing {
            get {
                return ResourceManager.GetString("DataMergeHelpUsing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the type of merge you would like between each piece of merged data, if any..
        /// </summary>
        public static string DataMergeHelpWithType {
            get {
                return ResourceManager.GetString("DataMergeHelpWithType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If there is an occurrence or an item being split on, that should not be split on, it will be preceded with this character. e.g., a comma separated file might have a comma in a name, so don’t split on it if it is preceded by \ or some other characters.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;&lt;br/&gt;
        ///&lt;table border=&apos;1px solid black&apos;&gt;
        ///&lt;tr&gt;&lt;th border=&apos;1px solid black&apos;&gt;Escape Sequence&lt;/th&gt;&lt;th border= [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DataSplitHelpEscape {
            get {
                return ResourceManager.GetString("DataSplitHelpEscape", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you would like the data or item you are splitting on to be included in the result data, select this checkbox.	Allowed:	Include the information you are splitting on?.
        /// </summary>
        public static string DataSplitHelpInclude {
            get {
                return ResourceManager.GetString("DataSplitHelpInclude", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default direction to process is forward or left to right (reading direction). Selecting Backwards will process from the end of the data (right) to the beginning (left).	Allowed:	Which direction would you like to process in?.
        /// </summary>
        public static string DataSplitHelpProcessDirection {
            get {
                return ResourceManager.GetString("DataSplitHelpProcessDirection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns the split data in the pattern as described by the results.	The variable pattern will be repeated until the end of the input data.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string DataSplitHelpResult {
            get {
                return ResourceManager.GetString("DataSplitHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For file processing you can skip rows in the file that are blank. This saves you having to remove them afterwards.	Allowed:	Blank rows will be ignored.
        /// </summary>
        public static string DataSplitHelpSkipBlankRows {
            get {
                return ResourceManager.GetString("DataSplitHelpSkipBlankRows", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	To split a value into one or more variables, put the value in here.	You can process entire file content or just trim the white space from a variable.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string DataSplitHelpString {
            get {
                return ResourceManager.GetString("DataSplitHelpString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For Index use the number of characters that this split will use. 	For Char put any characters or combination of characters you would like.	Not applicable to New Line, Tab or End	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string DataSplitHelpUsing {
            get {
                return ResourceManager.GetString("DataSplitHelpUsing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select where you would like to split the data.	Allowed:	na.
        /// </summary>
        public static string DataSplitHelpWithType {
            get {
                return ResourceManager.GetString("DataSplitHelpWithType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	To find the difference in time between two date times, put the first date time in here. The format needs to be the same for the two.	Leaving this field blank will give you the system date time.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string DateTimeDifferenceHelpDatetime1 {
            get {
                return ResourceManager.GetString("DateTimeDifferenceHelpDatetime1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	To find the difference in time between two date times, put the second date time in here. The format needs to be the same for the two.	Leaving this field blank will give you the system date time.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string DateTimeDifferenceHelpDatetime2 {
            get {
                return ResourceManager.GetString("DateTimeDifferenceHelpDatetime2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Describe the format of the date times you are entering. e.g. 23-July 1978 would be described as dd-MM yyyy.	Leaving this field blank will assume the system date time format.	To escape text or non-date information use &apos;around the text you want to escape&apos;. e.g. Time is now 15 hours and 33 minutes. Would have an input format of &apos;Time is now&apos; 24hr &apos;hours and&apos; min &apos;minutes.&apos; 	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().F [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DateTimeDifferenceHelpInputFormat {
            get {
                return ResourceManager.GetString("DateTimeDifferenceHelpInputFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the unit of time to output the difference in..
        /// </summary>
        public static string DateTimeDifferenceHelpOutputType {
            get {
                return ResourceManager.GetString("DateTimeDifferenceHelpOutputType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns the difference in time between the two date times.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string DateTimeDifferenceHelpResult {
            get {
                return ResourceManager.GetString("DateTimeDifferenceHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Put a positive or negative number here to add or subtract from the input date time.	Leave this field blank if you do not want to change the date time.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string DateTimeHelpAddtime {
            get {
                return ResourceManager.GetString("DateTimeHelpAddtime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	To format a date time, or to add/subtract from a date time, put it in here.	Leaving this field blank will give you the system date time.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string DateTimeHelpDatetime {
            get {
                return ResourceManager.GetString("DateTimeHelpDatetime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Describe the format of the date time you are entering. e.g. 23-July 1978 would be described as dd-MM yyyy.	Leaving this field blank will assume the system date time format.	To escape text or non-date information use &apos;around the text you want to escape&apos;. e.g. Time is now 15 hours and 33 minutes. Would have an input format of &apos;Time is now&apos; 24hr &apos;hours and&apos; min &apos;minutes.&apos; 	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Fi [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DateTimeHelpInputformat {
            get {
                return ResourceManager.GetString("DateTimeHelpInputformat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Describe the format you would like the date time to be returned in.	Leaving this field blank will assume the same as the Input Format.	To include text or non-date information use &apos;around the text you want to escape&apos;. e.g. Time is now 15 hours and 33 minutes. Would have an output format of &apos;Time is now&apos; 24hr &apos;hours and&apos; min &apos;minutes.&apos; 	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string DateTimeHelpOutputformat {
            get {
                return ResourceManager.GetString("DateTimeHelpOutputformat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns the formatted and/or added/subtracted date time.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string DateTimeHelpResult {
            get {
                return ResourceManager.GetString("DateTimeHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the unit of time to add or subtract. This is ignored if the unit is blank or 0..
        /// </summary>
        public static string DateTimeHelpTimeType {
            get {
                return ResourceManager.GetString("DateTimeHelpTimeType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Put your test data in here then click Test. If possible this execution will automatically roll back..
        /// </summary>
        public static string DbInputDefaultValueHelp {
            get {
                return ResourceManager.GetString("DbInputDefaultValueHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a test for the current workflow.
        /// </summary>
        public static string DebugOutputViewAddNewTestHelp {
            get {
                return ResourceManager.GetString("DebugOutputViewAddNewTestHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expand/Collapse all.
        /// </summary>
        public static string DebugOutputViewExpandAllHelp {
            get {
                return ResourceManager.GetString("DebugOutputViewExpandAllHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filter the debug response information.
        /// </summary>
        public static string DebugOutputViewFilterSearchHelp {
            get {
                return ResourceManager.GetString("DebugOutputViewFilterSearchHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the debug items that reflect in the debug output..
        /// </summary>
        public static string DebugOutputViewOptionsHelp {
            get {
                return ResourceManager.GetString("DebugOutputViewOptionsHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	To Delete a file or folder, put the full path and file or folder name to delete in here.	You can use File System, URI, SFTP, FTP or FTPS format.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string DeleteHelpFileFolder {
            get {
                return ResourceManager.GetString("DeleteHelpFileFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Password of an account with permission to perform this action. By default the account running Warewolf Server.exe service will be used.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string DeleteHelpPassword {
            get {
                return ResourceManager.GetString("DeleteHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to * in Recordset will execute every index in the given recordset.	&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string DeleteHelpRecords {
            get {
                return ResourceManager.GetString("DeleteHelpRecords", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns Success or Failure depending on the success of the Delete action.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string DeleteHelpResult {
            get {
                return ResourceManager.GetString("DeleteHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Username of an account with permission to perform this action. By default the account running Warewolf Server.exe service will be used.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string DeleteHelpUsername {
            get {
                return ResourceManager.GetString("DeleteHelpUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deploy the selected Source files to the Destination Server..
        /// </summary>
        public static string DeployCommandHelp {
            get {
                return ResourceManager.GetString("DeployCommandHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to These are the new resources that will be found on the remote server after deploy..
        /// </summary>
        public static string DeployNewResourcesViewHelp {
            get {
                return ResourceManager.GetString("DeployNewResourcesViewHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to These resources will be overwritten on the destination server.
        /// </summary>
        public static string DeployOverridesCountViewHelp {
            get {
                return ResourceManager.GetString("DeployOverridesCountViewHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Automatically include everything that this resource would need to execute at the destination.&lt;br/&gt;	&lt;br/&gt;	&lt;b&gt;Warning: &lt;b/&gt;Deploying Sources that are already on the destination Server, will overwrite their connection strings. .
        /// </summary>
        public static string DeploySelectDependenciesHelp {
            get {
                return ResourceManager.GetString("DeploySelectDependenciesHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data or variable that will be passed into the action at run time..
        /// </summary>
        public static string DotNetInputDefaultValueHelp {
            get {
                return ResourceManager.GetString("DotNetInputDefaultValueHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select a ClassName or a fully qualified ClassName(Namespace+ClassName) if it exists to filter the actions you can perform..
        /// </summary>
        public static string DotNetPluginServiceSelectNamespaceHelp {
            get {
                return ResourceManager.GetString("DotNetPluginServiceSelectNamespaceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the Dropbox file or folder you would like to delete. This is the path from the root of the Dropbox account..
        /// </summary>
        public static string DropBoxDeleteFileNameHelpText {
            get {
                return ResourceManager.GetString("DropBoxDeleteFileNameHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	This is the name of the file that will be downloaded from Dropbox.	NOTE: The file path must use &quot;/&quot; to identify folders and not &quot;\&quot;..
        /// </summary>
        public static string DropBoxDownloadFileNameHelp {
            get {
                return ResourceManager.GetString("DropBoxDownloadFileNameHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Returns the contents of the Dropbox folder you specify here.	This is the folder structure you want to list on Dropbox.	You can specify the type of information returned by selecting either Files (returns only files), Folders (Returns only folders) or Files and Folders for everything..
        /// </summary>
        public static string DropBoxFileListFileNameHelp {
            get {
                return ResourceManager.GetString("DropBoxFileListFileNameHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When selected, will recursively look up everything from the given path onwards - to a maximum of 2000 items. 	NOTE: Dropbox has a max return count of 2000..
        /// </summary>
        public static string DropBoxFileListRecursiveHelp {
            get {
                return ResourceManager.GetString("DropBoxFileListRecursiveHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Returns a list of everything in the Dropbox folder provided or everything including sub folders if Recursive is selected..
        /// </summary>
        public static string DropboxReadFilesFoldersHelp {
            get {
                return ResourceManager.GetString("DropboxReadFilesFoldersHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Returns the files that are in the given folder, or all the files in the folder and all the files in the sub folders if Recursive is selected..
        /// </summary>
        public static string DropboxReadFilesHelp {
            get {
                return ResourceManager.GetString("DropboxReadFilesHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Returns the folders that are in the given Dropbox folder, or all the folders in the folder and all the folders in the sub folders if Recursive is selected..
        /// </summary>
        public static string DropboxReadFoldersHelp {
            get {
                return ResourceManager.GetString("DropboxReadFoldersHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The result of the drop box operation will be assigned to this value.
        /// </summary>
        public static string DropboxResultHelpText {
            get {
                return ResourceManager.GetString("DropboxResultHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit the email source that is selected..
        /// </summary>
        public static string EditEmailSourceHelp {
            get {
                return ResourceManager.GetString("EditEmailSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit RabbitMQ Source.
        /// </summary>
        public static string EditRabbitMQSourceHelp {
            get {
                return ResourceManager.GetString("EditRabbitMQSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter the path to the attachments you want to send, separated by a semicolon ;.
        /// </summary>
        public static string EmailHelpAttachments {
            get {
                return ResourceManager.GetString("EmailHelpAttachments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List the email addresses you want to blind carbon copy on the email you are sending, separated by a semicolon ;	If you are on a domain, you still need to provide the email address of the account you are sending to.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string EmailHelpBcc {
            get {
                return ResourceManager.GetString("EmailHelpBcc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The main body of the email goes in here.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string EmailHelpBody {
            get {
                return ResourceManager.GetString("EmailHelpBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the email is HTML, select this checkbox. If it is plain text, uncheck the box..
        /// </summary>
        public static string EmailHelpBodyCheckbox {
            get {
                return ResourceManager.GetString("EmailHelpBodyCheckbox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List the email addresses you want to carbon copy on the email you are sending, separated by a semicolon ;	If you are on a domain, you still need to provide the email address of the account you are sending to.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string EmailHelpCc {
            get {
                return ResourceManager.GetString("EmailHelpCc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any data or variable can go in here.	To send an email, enter the email address of the account you want to send from.	If you are on a domain, you still need to provide the email address of the account you are sending from.	If you leave it blank, the account used to setup the Email Source will be used.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string EmailHelpFromAddress {
            get {
                return ResourceManager.GetString("EmailHelpFromAddress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select a preconfigured email source or &quot;New Email Source...&quot; to add a new one..
        /// </summary>
        public static string EmailHelpMailSource {
            get {
                return ResourceManager.GetString("EmailHelpMailSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter the password, if there is one, for the account you are sending from.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string EmailHelpPassword {
            get {
                return ResourceManager.GetString("EmailHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the message priority..
        /// </summary>
        public static string EmailHelpPriorityType {
            get {
                return ResourceManager.GetString("EmailHelpPriorityType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns Success or Failure depending on the success of the send action.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string EmailHelpResult {
            get {
                return ResourceManager.GetString("EmailHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter the subject for your email.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string EmailHelpSubject {
            get {
                return ResourceManager.GetString("EmailHelpSubject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List the email addresses you want to send to, separated by a semicolon ;	If you are on a domain, you still need to provide the email address of the account you are sending to.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string EmailHelpTo {
            get {
                return ResourceManager.GetString("EmailHelpTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The email address that will be used to send the email from.&lt;br/&gt;	&lt;br/&gt;	This account needs to be a valid email address/account for the Host server..
        /// </summary>
        public static string EmailSourceEmailFromHelp {
            get {
                return ResourceManager.GetString("EmailSourceEmailFromHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The email address you want to send the test message to..
        /// </summary>
        public static string EmailSourceEmailToHelp {
            get {
                return ResourceManager.GetString("EmailSourceEmailToHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Does the Host require a secure connection?	&lt;style type=&quot;text/css&quot;&gt;#smtptable td{text-align:center;border:0px;}&lt;/style&gt;&lt;br/&gt;	e.g.&lt;br/&gt;	&lt;table border=&quot;1&quot; id=&quot;smtptable&quot;&gt;	&lt;tr align=&quot;center&quot;&gt;&lt;th&gt;Host&lt;/th&gt;&lt;th&gt;Require SSL&lt;/th&gt;&lt;th&gt;Port&lt;/th&gt;&lt;/tr&gt;	&lt;tr&gt;&lt;td&gt;smtp.&lt;b&gt;gmail&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;587&lt;/td&gt;&lt;/tr&gt;	&lt;tr&gt;&lt;td&gt;smtp.&lt;b&gt;yahoo&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt;	&lt;tr&gt;&lt;td&gt;smtp.&lt;b&gt;zoho&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;465&lt;/td&gt;&lt;/tr&gt;	&lt;tr&gt;&lt;td&gt;smtp-mail.&lt;b&gt;outlook&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;587&lt;/td&gt;&lt;/tr&gt;	&lt;tr&gt;&lt;td&gt;smtp. [rest of string was truncated]&quot;;.
        /// </summary>
        public static string EmailSourceEnableSslHelp {
            get {
                return ResourceManager.GetString("EmailSourceEnableSslHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Host name of the server you want to use for sending emails.	&lt;style type=&quot;text/css&quot;&gt;#smtptable td{text-align:center;border:0px;}&lt;/style&gt;&lt;br/&gt;	e.g.&lt;br/&gt;	&lt;table border=&quot;1&quot; id=&quot;smtptable&quot;&gt;	&lt;tr align=&quot;center&quot;&gt;&lt;th&gt;Host&lt;/th&gt;&lt;th&gt;Require SSL&lt;/th&gt;&lt;th&gt;Port&lt;/th&gt;&lt;/tr&gt;	&lt;tr&gt;&lt;td&gt;smtp.&lt;b&gt;gmail&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;587&lt;/td&gt;&lt;/tr&gt;	&lt;tr&gt;&lt;td&gt;smtp.&lt;b&gt;yahoo&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt;	&lt;tr&gt;&lt;td&gt;smtp.&lt;b&gt;zoho&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;465&lt;/td&gt;&lt;/tr&gt;	&lt;tr&gt;&lt;td&gt;smtp-mail.&lt;b&gt;outlook&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;587&lt;/t [rest of string was truncated]&quot;;.
        /// </summary>
        public static string EmailSourceHostNameHelp {
            get {
                return ResourceManager.GetString("EmailSourceHostNameHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;style type=&quot;text/css&quot;&gt;	#smtptable td	{	text-align:center;	border:0px;	}	&lt;/style&gt;	The Port of the email server.	&lt;br/&gt;	e.g.&lt;br/&gt;	&lt;table border=&quot;1&quot; id=&quot;smtptable&quot;&gt;	&lt;tr align=&quot;center&quot;&gt;&lt;th&gt;Host&lt;/th&gt;&lt;th&gt;Require SSL&lt;/th&gt;&lt;th&gt;Port&lt;/th&gt;&lt;/tr&gt;	&lt;tr&gt;&lt;td&gt;smtp.&lt;b&gt;gmail&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;587&lt;/td&gt;&lt;/tr&gt;	&lt;tr&gt;&lt;td&gt;smtp.&lt;b&gt;yahoo&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;25&lt;/td&gt;&lt;/tr&gt;	&lt;tr&gt;&lt;td&gt;smtp.&lt;b&gt;zoho&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;465&lt;/td&gt;&lt;/tr&gt;	&lt;tr&gt;&lt;td&gt;smtp-mail.&lt;b&gt;outlook&lt;/b&gt;.com&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;587&lt;/td&gt;&lt;/tr&gt;	&lt;tr&gt;&lt;td&gt;smtp.&lt;b&gt;liv [rest of string was truncated]&quot;;.
        /// </summary>
        public static string EmailSourcePortHelp {
            get {
                return ResourceManager.GetString("EmailSourcePortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sends a test email from this account so you can confirm its working..
        /// </summary>
        public static string EmailSourceTestHelp {
            get {
                return ResourceManager.GetString("EmailSourceTestHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The time allowed for the operation to connect before throwing an error..
        /// </summary>
        public static string EmailSourceTimeoutHelp {
            get {
                return ResourceManager.GetString("EmailSourceTimeoutHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Exchange web service endpoint url to connect to your Exchange enviroment.	&lt;style type=&quot;text/css&quot;&gt;#smtptable td{text-align:center;border:0px;}&lt;/style&gt;&lt;br/&gt;	e.g.&lt;br/&gt;	&lt;table border=&quot;1&quot; id=&quot;smtptable&quot;&gt;	&lt;tr align=&quot;center&quot;&gt;&lt;th&gt;Auto Dicover Url&lt;&gt;&lt;th/tr&gt;	&lt;tr&gt;&lt;td&gt;https://outlook.office365.com/EWS/Exchange.asmx&lt;/td&gt;&lt;/tr&gt;	&lt;/table&gt;&lt;br/&gt;If the Autodiscover url is left empty, the Exchange service endpoint will be auto dicovered based on the user name.
        /// </summary>
        public static string ExchangeEmailSourceHostNameHelp {
            get {
                return ResourceManager.GetString("ExchangeEmailSourceHostNameHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the connection string properties of the selected connection.&lt;br&gt;	&lt;br/&gt;	Change the connection string from, say, a development database to a live database.&lt;br/&gt;	&lt;br/&gt;	&lt;a href=&quot;http://warewolf.io/knowledge-base/data-connectors&quot; target=&quot;_blank&quot;&gt;Read more in the Knowledge Base.&lt;/a&gt;.
        /// </summary>
        public static string ExchangeServiceEditSourceHelp {
            get {
                return ResourceManager.GetString("ExchangeServiceEditSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a connection to a new exchange server..
        /// </summary>
        public static string ExchangeServiceNewSourceHelp {
            get {
                return ResourceManager.GetString("ExchangeServiceNewSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The available exchange connections. To create a new connection, click New..
        /// </summary>
        public static string ExchangeServiceSourceTypesHelp {
            get {
                return ResourceManager.GetString("ExchangeServiceSourceTypesHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user name to authenticate against the exhange server.
        /// </summary>
        public static string ExchangeUserNameAuthenticationHelp {
            get {
                return ResourceManager.GetString("ExchangeUserNameAuthenticationHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to http://warewolf.io/knowledge-base/.
        /// </summary>
        public static string ExpertHelpUrl {
            get {
                return ResourceManager.GetString("ExpertHelpUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Search the connected servers by filtering based on this input..
        /// </summary>
        public static string ExplorerViewFilterSearchHelp {
            get {
                return ResourceManager.GetString("ExplorerViewFilterSearchHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refresh the connected server(s) content..
        /// </summary>
        public static string ExplorerViewRefreshHelp {
            get {
                return ResourceManager.GetString("ExplorerViewRefreshHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value that the search will start at, this must be a number, date or time and must be the same type as the &quot;To&quot; type.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string FindHelpFrom {
            get {
                return ResourceManager.GetString("FindHelpFrom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To find the indexes/rows that match certain criteria, put the comma separated list of fields to search in here.	&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string FindHelpInFields {
            get {
                return ResourceManager.GetString("FindHelpInFields", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the type of information you want to match on..
        /// </summary>
        public static string FindHelpLookForMatchType {
            get {
                return ResourceManager.GetString("FindHelpLookForMatchType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The criteria to match on	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string FindHelpMatch {
            get {
                return ResourceManager.GetString("FindHelpMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Will only return rows where each field specified meets the match criteria if selected..
        /// </summary>
        public static string FindHelpRequireAllFieldsToMatch {
            get {
                return ResourceManager.GetString("FindHelpRequireAllFieldsToMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Will only return rows that match all of the criteria if selected..
        /// </summary>
        public static string FindHelpRequireAllMatchesToBeTrue {
            get {
                return ResourceManager.GetString("FindHelpRequireAllMatchesToBeTrue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns the indexes of the successful matches.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	If there are multiple results and a scalar is used, then each result will be separated with a comma.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string FindHelpResult {
            get {
                return ResourceManager.GetString("FindHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value that the search will end at, this must be a number, date or time and must be the same type as the &quot;From&quot; type.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string FindHelpTo {
            get {
                return ResourceManager.GetString("FindHelpTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	Put  the index of the string you are looking for in here.	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string FindIndexHelpCharacters {
            get {
                return ResourceManager.GetString("FindIndexHelpCharacters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the direction to search in..
        /// </summary>
        public static string FindIndexHelpDirectiontype {
            get {
                return ResourceManager.GetString("FindIndexHelpDirectiontype", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select which index(s) you would like found..
        /// </summary>
        public static string FindIndexHelpIndexType {
            get {
                return ResourceManager.GetString("FindIndexHelpIndexType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	To find the character index(s) of a string inside another string, put the string to be searched here.	&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string FindIndexHelpInField {
            get {
                return ResourceManager.GetString("FindIndexHelpInField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns the index(s) of the found string.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record. If you are finding All Occurrences and using a scalar, the results will be comma separated.	&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string FindIndexHelpResult {
            get {
                return ResourceManager.GetString("FindIndexHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value that the search will start at, this must be a number, date or time and must be the same type as the &quot;To&quot; type..
        /// </summary>
        public static string FindRecordsFromHelpText {
            get {
                return ResourceManager.GetString("FindRecordsFromHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value that the search will end at, this must be a number, date or time and must be the same type as the &quot;From&quot; type..
        /// </summary>
        public static string FindRecordsToHelpText {
            get {
                return ResourceManager.GetString("FindRecordsToHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generally Replaces the * in the activity with the relevant index. e.g. If 1-3 is provided then [[Customer(*).ID]] will execute as [[Customer(1).ID]],	[[Customer(2).ID]],	[[Customer(3).ID]].	* in Range allows you to input a range of indexes.	* in CSV allows a specific set of indexes to be specified e.g. 1,5,7,9.	* in Recordset will execute every index in the given recordset.	* in Executes will execute the activity a given number of times and replace the * with the number of times it has executed e.g. 1,2,3.. [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ForEachHelpForEachType {
            get {
                return ResourceManager.GetString("ForEachHelpForEachType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How many decimals should be returned as a factor of 10? e.g. 3 will show 0.000 and negative 3 (-3) will show 15000 as 15.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string FormatNumberHelpDecimalsToShow {
            get {
                return ResourceManager.GetString("FormatNumberHelpDecimalsToShow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	To format a number, put the number in here.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string FormatNumberHelpNumber {
            get {
                return ResourceManager.GetString("FormatNumberHelpNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns the formatted number.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string FormatNumberHelpResult {
            get {
                return ResourceManager.GetString("FormatNumberHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How would you like to round the number?	None: No rounding is done	Normal: 5,6,7,8,9 round up &amp; 1,2,3,4 round down	Up: 1-9 all round up	Down: 1-9 all round down	Allowed:	na.
        /// </summary>
        public static string FormatNumberHelpRoundType {
            get {
                return ResourceManager.GetString("FormatNumberHelpRoundType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At what point in the number should the rounding be done as a factor of 10? e.g. 3 will round to 3 decimal places and negative 3 (-3) will round to the nearest thousand.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string FormatNumberHelpRoundValue {
            get {
                return ResourceManager.GetString("FormatNumberHelpRoundValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The variable or the value that you want passed into this action..
        /// </summary>
        public static string InputDefaultValueHelp {
            get {
                return ResourceManager.GetString("InputDefaultValueHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the variable coming in has no value assigned to it, this will allow you to pass it in as NULL..
        /// </summary>
        public static string InputEmptyIsNullDefaultValueHelp {
            get {
                return ResourceManager.GetString("InputEmptyIsNullDefaultValueHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To get the response data of this action, put some test data in. The transaction will be rolled back if possible..
        /// </summary>
        public static string InputGenerateOutputsDefaultHelp {
            get {
                return ResourceManager.GetString("InputGenerateOutputsDefaultHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To get the length or max index in a recordset, put the recordset name in here. E.g. [[Customer()]]	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Recordset()]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string LengthHelpRecordset {
            get {
                return ResourceManager.GetString("LengthHelpRecordset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here. Returns a number specifying the highest index / max index in the recordset.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string LengthHelpResult {
            get {
                return ResourceManager.GetString("LengthHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to Windows Event Log: Details up to System Activity:&lt;br /&gt;	Server Fatal Events&lt;br /&gt;	Server Error Events&lt;br /&gt;	Server Warning Events&lt;br /&gt;	Server Pulse Data&lt;br /&gt;	Server System Activity.
        /// </summary>
        public static string LoggingViewServerEventLogDebugHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerEventLogDebugHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to Windows Event Log: Events up to error details:&lt;br /&gt;	Server Fatal Events&lt;br /&gt;	Server Error Events.
        /// </summary>
        public static string LoggingViewServerEventLogErrorHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerEventLogErrorHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to Windows Event Log: Only Server fatal events are logged..
        /// </summary>
        public static string LoggingViewServerEventLogFatalHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerEventLogFatalHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to Windows Event Log: Up to information detail:&lt;br /&gt;	Server Fatal Events&lt;br /&gt;	Server Error Events&lt;br /&gt;	Server Warning Events&lt;br /&gt;	Server Pulse Data.
        /// </summary>
        public static string LoggingViewServerEventLogInfoHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerEventLogInfoHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Server logging is done to the Windows Event Log. Logging is highly efficient and will not have a noticeable impact on execution. It is recommended that you turn on logging..
        /// </summary>
        public static string LoggingViewServerEventLogOffHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerEventLogOffHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs everything to the Windows Event Log:&lt;br /&gt;	Server Fatal Events&lt;br /&gt;	Server Error Events&lt;br /&gt;	Server Warning Events&lt;br /&gt;	Server Pulse Data&lt;br /&gt;	Server System Activity&lt;br /&gt;	Server Detailed System information.
        /// </summary>
        public static string LoggingViewServerEventLogTraceHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerEventLogTraceHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to Windows Event Log: Events up to warning severity:&lt;br /&gt;	Server Fatal Events&lt;br /&gt;	Server Error Events&lt;br /&gt;	Server Warning Events.
        /// </summary>
        public static string LoggingViewServerEventLogWarnHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerEventLogWarnHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to file: Details up to System Activity:&lt;br /&gt;	Server Fatal Events&lt;br /&gt;	Server Error Events&lt;br /&gt;	Server Warning Events&lt;br /&gt;	Server Pulse Data&lt;br /&gt;	Server System Activity.
        /// </summary>
        public static string LoggingViewServerFileLogDebugHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerFileLogDebugHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to file: Events up to error details:&lt;br /&gt;	Server Fatal Events&lt;br /&gt;	Server Error Events.
        /// </summary>
        public static string LoggingViewServerFileLogErrorHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerFileLogErrorHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to file: Only Server fatal events are logged..
        /// </summary>
        public static string LoggingViewServerFileLogFatalHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerFileLogFatalHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to file: Up to information detail:&lt;br /&gt;	Server Fatal Events&lt;br /&gt;	Server Error Events&lt;br /&gt;	Server Warning Events&lt;br /&gt;	Server Pulse Data.
        /// </summary>
        public static string LoggingViewServerFileLogInfoHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerFileLogInfoHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Server logging is done to file. Logging is highly efficient and will not have a noticeable impact on execution. It is recommended that you turn on logging..
        /// </summary>
        public static string LoggingViewServerFileLogOffHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerFileLogOffHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs everything to file:&lt;br /&gt;	Server Fatal Events&lt;br /&gt;	Server Error Events&lt;br /&gt;	Server Warning Events&lt;br /&gt;	Server Pulse Data&lt;br /&gt;	Server System Activity&lt;br /&gt;	Server Detailed System information.
        /// </summary>
        public static string LoggingViewServerFileLogTraceHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerFileLogTraceHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to file: Events up to warning severity:&lt;br /&gt;	Server Fatal Events&lt;br /&gt;	Server Error Events&lt;br /&gt;	Server Warning Events.
        /// </summary>
        public static string LoggingViewServerFileLogWarnHelpText {
            get {
                return ResourceManager.GetString("LoggingViewServerFileLogWarnHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to Windows Event Log: Details up to System Activity:&lt;br /&gt;	Studio Fatal Events&lt;br /&gt;	Studio Error Events&lt;br /&gt;	Studio Warning Events&lt;br /&gt;	Studio Pulse Data&lt;br /&gt;	Studio System Activity.
        /// </summary>
        public static string LoggingViewStudioEventLogDebugHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioEventLogDebugHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to Windows Event Log: Events up to error details:&lt;br /&gt;	Studio Fatal Events&lt;br /&gt;	Studio Error Events.
        /// </summary>
        public static string LoggingViewStudioEventLogErrorHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioEventLogErrorHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to Windows Event Log: Only Studio fatal events are logged..
        /// </summary>
        public static string LoggingViewStudioEventLogFatalHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioEventLogFatalHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to Windows Event Log: Up to information detail:&lt;br /&gt;	Studio Fatal Events&lt;br /&gt;	Studio Error Events&lt;br /&gt;	Studio Warning Events&lt;br /&gt;	Studio Pulse Data.
        /// </summary>
        public static string LoggingViewStudioEventLogInfoHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioEventLogInfoHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Studio logging is done to Windows Event Logger. Logging is highly efficient and will not have a noticeable impact on execution. It is recommended that you turn on logging..
        /// </summary>
        public static string LoggingViewStudioEventLogOffHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioEventLogOffHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs everything to the Windows Event Log:&lt;br /&gt;	Studio Fatal Events&lt;br /&gt;	Studio Error Events&lt;br /&gt;	Studio Warning Events&lt;br /&gt;	Studio Pulse Data&lt;br /&gt;	Studio System Activity&lt;br /&gt;	Studio Detailed System information.
        /// </summary>
        public static string LoggingViewStudioEventLogTraceHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioEventLogTraceHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to Windows Event Log: Events up to warning severity:&lt;br /&gt;	Studio Fatal Events&lt;br /&gt;	Studio Error Events&lt;br /&gt;	Studio Warning Events.
        /// </summary>
        public static string LoggingViewStudioEventLogWarnHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioEventLogWarnHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to file: Details up to System Activity:&lt;br /&gt;	Studio Fatal Events&lt;br /&gt;	Studio Error Events&lt;br /&gt;	Studio Warning Events&lt;br /&gt;	Studio Pulse Data&lt;br /&gt;	Studio System Activity.
        /// </summary>
        public static string LoggingViewStudioFileLogDebugHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioFileLogDebugHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to file: Events up to error details:&lt;br /&gt;	Studio Fatal Events&lt;br /&gt;	Studio Error Events.
        /// </summary>
        public static string LoggingViewStudioFileLogErrorHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioFileLogErrorHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to file: Only Studio fatal events are logged..
        /// </summary>
        public static string LoggingViewStudioFileLogFatalHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioFileLogFatalHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to file: Up to information detail:&lt;br /&gt;	Studio Fatal Events&lt;br /&gt;	Studio Error Events&lt;br /&gt;	Studio Warning Events&lt;br /&gt;	Studio Pulse Data.
        /// </summary>
        public static string LoggingViewStudioFileLogInfoHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioFileLogInfoHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Studio logging is done to file. Logging is highly efficient and will not have a noticeable impact on execution. It is recommended that you turn on logging..
        /// </summary>
        public static string LoggingViewStudioFileLogOffHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioFileLogOffHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs everything to file:&lt;br /&gt;	Studio Fatal Events&lt;br /&gt;	Studio Error Events&lt;br /&gt;	Studio Warning Events&lt;br /&gt;	Studio Pulse Data&lt;br /&gt;	Studio System Activity&lt;br /&gt;	Studio Detailed System information.
        /// </summary>
        public static string LoggingViewStudioFileLogTraceHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioFileLogTraceHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs to file: Events up to warning severity:&lt;br /&gt;	Studio Fatal Events&lt;br /&gt;	Studio Error Events&lt;br /&gt;	Studio Warning Events.
        /// </summary>
        public static string LoggingViewStudioFileLogWarnHelpText {
            get {
                return ResourceManager.GetString("LoggingViewStudioFileLogWarnHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warewolf needs to get Authorization from the external application to connect using your key and credentials. Make sure your application is setup correctly on the remote system before continuing with this step.&lt;br/&gt;	&lt;br/&gt;	Dropbox: &lt;a href=&quot;https://www.dropbox.com/developers/apps/create&quot;&gt;Create your app in Dropbox here.&lt;/a&gt;&lt;br/&gt;	Make sure you have set the &lt;b&gt;Redirect URIs&lt;/b&gt; in your app to:	https://www.dropbox.com/1/oauth2/redirect_receiver/.
        /// </summary>
        public static string ManageOAuthAuthoriseHelp {
            get {
                return ResourceManager.GetString("ManageOAuthAuthoriseHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The app key provided by the application that is doing the authentication. You will need to log into that application and follow their instructions to generate this key.&lt;br/&gt;	&lt;br/&gt;	Dropbox: &lt;a href=&quot;https://www.dropbox.com/developers/apps/create&quot;&gt;Create your app in Dropbox here.&lt;/a&gt;&lt;br/&gt;	Make sure you have set the &lt;b&gt;Redirect URIs&lt;/b&gt; in your app to:	https://www.dropbox.com/1/oauth2/redirect_receiver/.
        /// </summary>
        public static string ManageOAuthKeyHelp {
            get {
                return ResourceManager.GetString("ManageOAuthKeyHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the provider you want to use for Authentication. The provider must be compatible with the tool you are using. Make sure you have setup the account on the external application correctly..
        /// </summary>
        public static string ManageOAuthTypesHelp {
            get {
                return ResourceManager.GetString("ManageOAuthTypesHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Structured Query Language (SQL) of the action you want to perform on the ODBC source..
        /// </summary>
        public static string ManageOdbcServiceActionsHelpText {
            get {
                return ResourceManager.GetString("ManageOdbcServiceActionsHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The default value to be used when mapping this field..
        /// </summary>
        public static string MappingsDefaultValueHelp {
            get {
                return ResourceManager.GetString("MappingsDefaultValueHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the [[@Object]] you would like the output to go into.
        ///    After the object is added to the variable list, you can click on the { } next to the objects name to see the full shape..
        /// </summary>
        public static string MappingsObjectNameHelp {
            get {
                return ResourceManager.GetString("MappingsObjectNameHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allows you to output the full response into an object (JSON representation)..
        /// </summary>
        public static string MappingsObjectOutputHelp {
            get {
                return ResourceManager.GetString("MappingsObjectOutputHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you would like the default variables in a recordset, put the recordset name in here..
        /// </summary>
        public static string MappingsRecordsetNameHelp {
            get {
                return ResourceManager.GetString("MappingsRecordsetNameHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug your Service in either the Studio or the Browser.&lt;br/&gt;	&lt;br/&gt;	&lt;a href=&quot;http://warewolf.io/knowledge-base/debugging/&quot;  target=&quot;_blank&quot;&gt;Read more in the Knowledge Base.&lt;/a&gt;.
        /// </summary>
        public static string MenuDebugHelp {
            get {
                return ResourceManager.GetString("MenuDebugHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Move resources between multiple Warewolf Servers.&lt;br/&gt;	&lt;br/&gt;	Deploy is the safest and recommended way of moving resources between Warewolf Servers..
        /// </summary>
        public static string MenuDeployHelp {
            get {
                return ResourceManager.GetString("MenuDeployHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A quick link to the Knowledge Base and other helpful resources..
        /// </summary>
        public static string MenuHelp {
            get {
                return ResourceManager.GetString("MenuHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lock the Menu bar either open or closed, or Unlock to allow dynamic menu opening on mouse over..
        /// </summary>
        public static string MenuLockMenuHelp {
            get {
                return ResourceManager.GetString("MenuLockMenuHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connect to a database to execute stored procedures, functions and TSQL..
        /// </summary>
        public static string MenuNewDatabaseConnectorHelp {
            get {
                return ResourceManager.GetString("MenuNewDatabaseConnectorHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connect to dll&apos;s to execute any custom code..
        /// </summary>
        public static string MenuNewPluginConnectorHelp {
            get {
                return ResourceManager.GetString("MenuNewPluginConnectorHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a new Warewolf Hosted Web Service. This flow based service is the start of all orchestration in Warewolf.&lt;br/&gt;	&lt;br/&gt;	&lt;a href=&quot;http://warewolf.io/knowledge-base/getting-started/&quot; target=&quot;_blank&quot;&gt;Read more in the Knowledge Base.&lt;/a&gt;.
        /// </summary>
        public static string MenuNewServiceHelp {
            get {
                return ResourceManager.GetString("MenuNewServiceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new version of Warewolf is available for download..
        /// </summary>
        public static string MenuNewVersionHelp {
            get {
                return ResourceManager.GetString("MenuNewVersionHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connect to any webservice using REST or SOAP..
        /// </summary>
        public static string MenuNewWebConnectorHelp {
            get {
                return ResourceManager.GetString("MenuNewWebConnectorHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Saves the active tab in the studio.
        /// </summary>
        public static string MenuSaveTabHelp {
            get {
                return ResourceManager.GetString("MenuSaveTabHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Schedule workflow executions.
        /// </summary>
        public static string MenuSchedulerHelp {
            get {
                return ResourceManager.GetString("MenuSchedulerHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit or View system settings such as Security and Logging..
        /// </summary>
        public static string MenuSettingsHelp {
            get {
                return ResourceManager.GetString("MenuSettingsHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	Put the full path of the destination you are moving to here.	You can use File System, URI, SFTP, FTP or FTPS format.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string MoveHelpDestination {
            get {
                return ResourceManager.GetString("MoveHelpDestination", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	To Move a file or folder, put the full path and file or folder name to move in here.	You can use File System, URI, SFTP, FTP or FTPS format.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string MoveHelpFileFolder {
            get {
                return ResourceManager.GetString("MoveHelpFileFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the file or folder already exists, you can force a new one to overwrite the old one.	Allowed:	If it exists already, force an overwrite.
        /// </summary>
        public static string MoveHelpForceoverwrite {
            get {
                return ResourceManager.GetString("MoveHelpForceoverwrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Password of an account with permission to access the destination. By default the account running Warewolf Server.exe service will be used.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string MoveHelpPassword {
            get {
                return ResourceManager.GetString("MoveHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns Success or will be blank depending on the success of the Move action.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string MoveHelpResult {
            get {
                return ResourceManager.GetString("MoveHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Username of an account with permission to access the source. By default the account running Warewolf Server.exe service will be used.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string MoveHelpUsername {
            get {
                return ResourceManager.GetString("MoveHelpUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If an error occurs you can execute a web service / Warewolf workflow to log the error that occurred.	E.g. http://ServerName:3142/Services/LogErrors?Severity=1&amp;Error=[[ErrorMsg]]	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string NativeActivityHelpCallthiswebservice {
            get {
                return ResourceManager.GetString("NativeActivityHelpCallthiswebservice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To end the workflow if an error has occurred at this point, make sure the checkbox is selected. 	If you have also called a web service / Warewolf workflow, that will finish executing first.	If the workflow is nested, the calling workflow will resume..
        /// </summary>
        public static string NativeActivityHelpEndtheworkflow {
            get {
                return ResourceManager.GetString("NativeActivityHelpEndtheworkflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If an error occurs the error message will be placed into this variable as well the result variable.	If left empty the result will still be placed in the result variable.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string NativeActivityHelpPuterrorinthisvariable {
            get {
                return ResourceManager.GetString("NativeActivityHelpPuterrorinthisvariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New RabbitMQ Source.
        /// </summary>
        public static string NewRabbitMQSourceHelp {
            get {
                return ResourceManager.GetString("NewRabbitMQSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter the password for the account you want to use for authenticating..
        /// </summary>
        public static string PasswordAuthenticationHelp {
            get {
                return ResourceManager.GetString("PasswordAuthenticationHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the connection string properties of the selected DLL.&lt;br&gt;	&lt;br/&gt;	Change the connection string from, say, a development DLL to a live DLL.&lt;br/&gt;	&lt;br/&gt;	&lt;a href=&quot;http://warewolf.io/knowledge-base/data-connectors&quot; target=&quot;_blank&quot;&gt;Read more in the Knowledgebase.&lt;/a&gt;.
        /// </summary>
        public static string PluginServiceEditSourceHelp {
            get {
                return ResourceManager.GetString("PluginServiceEditSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To create a reference to a new dll, click New..
        /// </summary>
        public static string PluginServiceNewSourceHelp {
            get {
                return ResourceManager.GetString("PluginServiceNewSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refresh the available constructors..
        /// </summary>
        public static string PluginServiceRefreshConstructorHelp {
            get {
                return ResourceManager.GetString("PluginServiceRefreshConstructorHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refresh the available actions..
        /// </summary>
        public static string PluginServiceRefreshHelp {
            get {
                return ResourceManager.GetString("PluginServiceRefreshHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the method in the DLL you want to execute. You can provide a namespace filter above if you want..
        /// </summary>
        public static string PluginServiceSelectActionHelp {
            get {
                return ResourceManager.GetString("PluginServiceSelectActionHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the constructor in the DLL you want to execute. You can provide a namespace filter above if you want..
        /// </summary>
        public static string PluginServiceSelectConstructorHelp {
            get {
                return ResourceManager.GetString("PluginServiceSelectConstructorHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select a namespace if it exists to filter the actions you can perform..
        /// </summary>
        public static string PluginServiceSelectNamespaceHelp {
            get {
                return ResourceManager.GetString("PluginServiceSelectNamespaceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the DLL you want to use from previously setup sources..
        /// </summary>
        public static string PluginServiceSourcesHelp {
            get {
                return ResourceManager.GetString("PluginServiceSourcesHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clears the Search Filter.
        /// </summary>
        public static string PluginSourceClearSearchHelp {
            get {
                return ResourceManager.GetString("PluginSourceClearSearchHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select to get the full path to the Config file..
        /// </summary>
        public static string PluginSourceConfigFileButtonHelp {
            get {
                return ResourceManager.GetString("PluginSourceConfigFileButtonHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The full path to the Config file..
        /// </summary>
        public static string PluginSourceConfigFileHelp {
            get {
                return ResourceManager.GetString("PluginSourceConfigFileHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select to get the full path to the DLL. e.g. &lt;b&gt;D:\My Project\Core.dll&lt;/b&gt;&lt;br/&gt;.
        /// </summary>
        public static string PluginSourceDllFullNameButtonHelp {
            get {
                return ResourceManager.GetString("PluginSourceDllFullNameButtonHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The full path to the DLL. e.g. &lt;b&gt;D:\My Project\Core.dll&lt;/b&gt;&lt;br/&gt;.
        /// </summary>
        public static string PluginSourceDllFullNameHelp {
            get {
                return ResourceManager.GetString("PluginSourceDllFullNameHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select to get the full GAC address e.g. &lt;b&gt;GAC:TaskScheduler, Version=6.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&lt;/b&gt;.
        /// </summary>
        public static string PluginSourceGacAssemblyNameButtonHelp {
            get {
                return ResourceManager.GetString("PluginSourceGacAssemblyNameButtonHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refresh the view based on the filter.&lt;br/&gt;	&lt;br/&gt;	Newly added resources should show after a refresh..
        /// </summary>
        public static string PluginSourceRefreshCommandHelp {
            get {
                return ResourceManager.GetString("PluginSourceRefreshCommandHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Preview (recordset field)	This is a variable from an input field. Use comma-separated values for each index e.g. [[Trip(*).Distance]] = 45, 32, 12, 5	Preview (scalar field - including indexed recordsets and ())	This is a variable from an input field. Put some test info in and click the Preview button to test your result..
        /// </summary>
        public static string PreviewInputHelpText {
            get {
                return ResourceManager.GetString("PreviewInputHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Append will add the variables onto the list of variables already in the input grid. The values of the last row will be repeated for all of these additional values..
        /// </summary>
        public static string QuickVariableAppendHelpText {
            get {
                return ResourceManager.GetString("QuickVariableAppendHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To append something onto the front of the variables in your list, type it in here.	For recordsets, type  recordsetname(). Don&apos;t forget the &quot;.&quot; after the &quot;()&quot;	You do not need to put the &quot;[[&quot; in..
        /// </summary>
        public static string QuickVariablePrefixWithHelpText {
            get {
                return ResourceManager.GetString("QuickVariablePrefixWithHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace will replace the current list of variables with this list. The values of the first row will be repeated for all of these new values..
        /// </summary>
        public static string QuickVariableReplaceHelpText {
            get {
                return ResourceManager.GetString("QuickVariableReplaceHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the criteria to split the variables in the list. This will be the pattern used to repeat against the Variable List box.	Char will split on the characters you specify, like comma or | &lt;/.	Index will split on the numeric index from the previous split.	New Line will split on carriage return.	Space will split on blank space.	Tab splits on a tab character..
        /// </summary>
        public static string QuickVariableSplitAndAtHelpText {
            get {
                return ResourceManager.GetString("QuickVariableSplitAndAtHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To append something onto the end of the variables in your list, type it in here.	You do not need to put the &quot;]]&quot; in..
        /// </summary>
        public static string QuickVariableSuffixWithHelpText {
            get {
                return ResourceManager.GetString("QuickVariableSuffixWithHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type or paste all the variables you want to use in here. You can paste in any format. If you are adding variables into a grid with a drop down or other input, the values from the last row will be repeated, so set them before adding these variables..
        /// </summary>
        public static string QuickVariableVariableListHelpText {
            get {
                return ResourceManager.GetString("QuickVariableVariableListHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Aknowledge will send back result from the consumer to tell 	RabbitMQ that a particular message has been received, 	processed and that RabbitMQ is free to delete it.&lt;br/&gt;.
        /// </summary>
        public static string RabbitMQHelpAcknowledge {
            get {
                return ResourceManager.GetString("RabbitMQHelpAcknowledge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If set, the queue is deleted when all consumers have 	finished using it. The last consumer can be cancelled either 	explicitly or because its channel is closed. If there was no 	consumer ever on the queue, it won&apos;t be deleted. Applications 	can explicitly delete auto-delete queues using the Delete method as normal.&lt;br/&gt;.
        /// </summary>
        public static string RabbitMQHelpIsAutoDelete {
            get {
                return ResourceManager.GetString("RabbitMQHelpIsAutoDelete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When RabbitMQ source quits or crashes it will forget the queues.	Durable will prevent queues getting lost after the source is up again.&lt;br/&gt;.
        /// </summary>
        public static string RabbitMQHelpIsDurable {
            get {
                return ResourceManager.GetString("RabbitMQHelpIsDurable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exclusive queues may only be accessed by the current connection, 	and are deleted when that connection closes. Passive declaration of an exclusive 	queue by other connections are not allowed.&lt;br/&gt;.
        /// </summary>
        public static string RabbitMQHelpIsExclusive {
            get {
                return ResourceManager.GetString("RabbitMQHelpIsExclusive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is the actual content you want to add in the Queue	When the Consumer consumes the message, this content will	be returned as the response.&lt;br /&gt;	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string RabbitMQHelpMessage {
            get {
                return ResourceManager.GetString("RabbitMQHelpMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide number of messages that can be consumed concurrently.    	This will pre-fetch the given number of messages and block further traffic until you 	acknowledge something. This ensures that a maximum of the given number of unacknowledged messages 	are pre-fetched at one time.&lt;br /&gt;	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;Integer Value&lt;/li&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string RabbitMQHelpPrefetch {
            get {
                return ResourceManager.GetString("RabbitMQHelpPrefetch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provide a name of the Queue you want to consume from. 	The Queue should already be in the RabbitMQ Source in your server.	Note: The Queue name is case sensitive.&lt;br /&gt;	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string RabbitMQHelpQueueName {
            get {
                return ResourceManager.GetString("RabbitMQHelpQueueName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Marking this as True will leave the	message you consumed in the queue.	Leaving it UnChecked will remove it from the Queue after it has bee consumed.&lt;br/&gt;.
        /// </summary>
        public static string RabbitMQHelpRequeue {
            get {
                return ResourceManager.GetString("RabbitMQHelpRequeue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	This will be the response of what you have Consumed from your Queue&lt;br /&gt;	&lt;br /&gt;	Allowed:&lt;br /&gt;          	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;          	&lt;/ol&gt;.
        /// </summary>
        public static string RabbitMQHelpResponse {
            get {
                return ResourceManager.GetString("RabbitMQHelpResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Returns Success or Failure depending on the success of the message publish.&lt;br /&gt;	&lt;br /&gt;	Allowed:	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string RabbitMQHelpResult {
            get {
                return ResourceManager.GetString("RabbitMQHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  The Queue might be empty when the 	Consumer makes the initial attempt to Consume the message.	Put the number of seconds you want the consumer to delay when attempting to 	consume messages from the queue.	After the specified time (in seconds) has elapsed, the  consumer will retire.&lt;br /&gt;	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;Interger Value&lt;/li&gt;            	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string RabbitMQHelpTimeOut {
            get {
                return ResourceManager.GetString("RabbitMQHelpTimeOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select a preconfigured RabbitMQ source or add a new one.&lt;br /&gt;.
        /// </summary>
        public static string RabbitMQSourceHelp {
            get {
                return ResourceManager.GetString("RabbitMQSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Host name of the server you want to use for publishing messages..
        /// </summary>
        public static string RabbitMQSourceHostHelp {
            get {
                return ResourceManager.GetString("RabbitMQSourceHostHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Password for the RabbitMQ server..
        /// </summary>
        public static string RabbitMQSourcePasswordHelp {
            get {
                return ResourceManager.GetString("RabbitMQSourcePasswordHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Port of the RabbitMQ server. Default value is 5672..
        /// </summary>
        public static string RabbitMQSourcePortHelp {
            get {
                return ResourceManager.GetString("RabbitMQSourcePortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The User Name for the RabbitMQ server..
        /// </summary>
        public static string RabbitMQSourceUserNameHelp {
            get {
                return ResourceManager.GetString("RabbitMQSourceUserNameHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Virtual Host of the RabbitMQ server. Default value is /..
        /// </summary>
        public static string RabbitMQSourceVirtualHostHelp {
            get {
                return ResourceManager.GetString("RabbitMQSourceVirtualHostHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines the character length to generate.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string RandomHelpLength {
            get {
                return ResourceManager.GetString("RandomHelpLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To generate a random number put the lowest/smallest number you would like in here.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string RandomHelpRangeFrom {
            get {
                return ResourceManager.GetString("RandomHelpRangeFrom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To generate a random number put the highest/largest number you would like in here.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string RandomHelpRangeTo {
            get {
                return ResourceManager.GetString("RandomHelpRangeTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns the randomly generated result.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string RandomHelpResult {
            get {
                return ResourceManager.GetString("RandomHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of random information to generate.	Letters: Alphabetical letters only.	Numbers: Numbers only.	Letters and Numbers: A random combination of letters and numbers.	GUID: A randomly generated Globally Unique Identifier..
        /// </summary>
        public static string RandomHelpType {
            get {
                return ResourceManager.GetString("RandomHelpType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	To read the content of a file, put the full path and file name in here.	You can use File System, URI, SFTP, FTP or FTPS format.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string ReadFileHelpFilename {
            get {
                return ResourceManager.GetString("ReadFileHelpFilename", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Password of an account with permission to perform this action. By default the account running Warewolf Server.exe service will be used.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string ReadFileHelpPassword {
            get {
                return ResourceManager.GetString("ReadFileHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns the content of the file.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string ReadFileHelpResult {
            get {
                return ResourceManager.GetString("ReadFileHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Username of an account with permission to perform this action. By default the account running Warewolf Server.exe service will be used.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string ReadFileHelpUsername {
            get {
                return ResourceManager.GetString("ReadFileHelpUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	To read the content of a folder, put the full path in here.	You can use File System, URI, SFTP, FTP or FTPS format.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string ReadFolderHelpFolder {
            get {
                return ResourceManager.GetString("ReadFolderHelpFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Password of an account with permission to perform this action. By default the account running Warewolf Server.exe service will be used.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string ReadFolderHelpPassword {
            get {
                return ResourceManager.GetString("ReadFolderHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Files will only return files.	Folders will only return folders.	Files and Folders will return everything.	Allowed:	What do you want to read?.
        /// </summary>
        public static string ReadFolderHelpRead {
            get {
                return ResourceManager.GetString("ReadFolderHelpRead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns the content of the folder specified. Each item found will be returned as a separate result so this tool is best used with a recordset.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string ReadFolderHelpResult {
            get {
                return ResourceManager.GetString("ReadFolderHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Username of an account with permission to perform this action. By default the account running Warewolf Server.exe service will be used.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string ReadFolderHelpUsername {
            get {
                return ResourceManager.GetString("ReadFolderHelpUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter local file or folder path in here.&lt;br/&gt;	Download to local Example: C:\MyFolder\Help.&lt;br/&gt;	Upload file to SharePoint Example: C:\MyFolder\Help\help.txt.&lt;br/&gt;	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string ReadLocalHelpFolder {
            get {
                return ResourceManager.GetString("ReadLocalHelpFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	To rename a file or folder, put the full path and file or folder name in here.	You can use File System, URI, SFTP, FTP or FTPS format.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string RenameHelpFileFolder {
            get {
                return ResourceManager.GetString("RenameHelpFileFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the file or folder already exists, you can force a new one to overwrite the old one.	Allowed:	If it exists already, force an overwrite.
        /// </summary>
        public static string RenameHelpForceoverwrite {
            get {
                return ResourceManager.GetString("RenameHelpForceoverwrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	Put the full path and new name of the resource here.	You can use File System, URI, SFTP, FTP or FTPS format.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string RenameHelpNewName {
            get {
                return ResourceManager.GetString("RenameHelpNewName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Password of an account with permission to access the destination. By default the account running Warewolf Server.exe service will be used.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string RenameHelpPassword {
            get {
                return ResourceManager.GetString("RenameHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns Success or will be blank depending on the success of the Rename action.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string RenameHelpResult {
            get {
                return ResourceManager.GetString("RenameHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Username of an account with permission to access the source. By default the account running Warewolf Server.exe service will be used.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string RenameHelpUsername {
            get {
                return ResourceManager.GetString("RenameHelpUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Put the information you are looking for in here.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string ReplaceHelpFind {
            get {
                return ResourceManager.GetString("ReplaceHelpFind", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	To search and replace a string, put the variable containing the string to search in here.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string ReplaceHelpInFields {
            get {
                return ResourceManager.GetString("ReplaceHelpInFields", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Put the replacement information in here.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string ReplaceHelpReplaceWith {
            get {
                return ResourceManager.GetString("ReplaceHelpReplaceWith", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns the count of the number of replacements.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string ReplaceHelpResult {
            get {
                return ResourceManager.GetString("ReplaceHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delete this scheduled task.
        /// </summary>
        public static string SchedulerDeleteHelpTextTrigger {
            get {
                return ResourceManager.GetString("SchedulerDeleteHelpTextTrigger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disable this scheduled task.
        /// </summary>
        public static string SchedulerSettingsDisabledHelpTextStatus {
            get {
                return ResourceManager.GetString("SchedulerSettingsDisabledHelpTextStatus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable this scheduled task.
        /// </summary>
        public static string SchedulerSettingsEnabledHelpTextStatus {
            get {
                return ResourceManager.GetString("SchedulerSettingsEnabledHelpTextStatus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To prevent redundant data being kept the system will clean up old schedule results. To specify how many results to keep, put a whole number in here..
        /// </summary>
        public static string SchedulerSettingsHelpTextHistoryRecords {
            get {
                return ResourceManager.GetString("SchedulerSettingsHelpTextHistoryRecords", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the schedule that will appear in the list of Schedules in the left hand column.	Renaming a Schedule will lose its History..
        /// </summary>
        public static string SchedulerSettingsHelpTextName {
            get {
                return ResourceManager.GetString("SchedulerSettingsHelpTextName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Each workflow must be executed with the correct security context. The account details entered here will be passed to the server and execute the workflow as that user..
        /// </summary>
        public static string SchedulerSettingsHelpTextPassword {
            get {
                return ResourceManager.GetString("SchedulerSettingsHelpTextPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check this box if you would like a missed trigger to execute as soon as possible..
        /// </summary>
        public static string SchedulerSettingsHelpTextRun {
            get {
                return ResourceManager.GetString("SchedulerSettingsHelpTextRun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To schedule a workflow execution, setup the trigger you want to use  and the workflow you want to execute.	Warewolf leverages Windows Task Scheduler and the schedules can be viewed there as well..
        /// </summary>
        public static string SchedulerSettingsHelpTextSettingsView {
            get {
                return ResourceManager.GetString("SchedulerSettingsHelpTextSettingsView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To change if the trigger is active or not, select Enabled or Disabled..
        /// </summary>
        public static string SchedulerSettingsHelpTextStatus {
            get {
                return ResourceManager.GetString("SchedulerSettingsHelpTextStatus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To run a workflow on a schedule select the Edit Trigger button..
        /// </summary>
        public static string SchedulerSettingsHelpTextTrigger {
            get {
                return ResourceManager.GetString("SchedulerSettingsHelpTextTrigger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Each workflow must be executed with the correct security context. The account details entered here will be passed to the server and execute the workflow as that user..
        /// </summary>
        public static string SchedulerSettingsHelpTextUsername {
            get {
                return ResourceManager.GetString("SchedulerSettingsHelpTextUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To run a workflow on a schedule select the Trigger above and then click … to choose the workflow you want to execute..
        /// </summary>
        public static string SchedulerSettingsHelpTextWorkFlow {
            get {
                return ResourceManager.GetString("SchedulerSettingsHelpTextWorkFlow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables or Disables the scheduled task. Disabled schedules will not execute when their trigger is valid..
        /// </summary>
        public static string SchedulerStatusAltHelpTextTrigger {
            get {
                return ResourceManager.GetString("SchedulerStatusAltHelpTextTrigger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your variables might contain values like &apos;\t&apos; or &apos;\n&apos; etc which are Escape Sequences. Tick this Box if you want to ignore this or leave it unticked if you want to use them as Escape Sequences..
        /// </summary>
        public static string ScriptingHelpEscapeScript {
            get {
                return ResourceManager.GetString("ScriptingHelpEscapeScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you want to Point to an external file with code you want to run several times. Instead of writing the same script over and over again, create it and save it with a relevent extension (.js for JavaScript)..
        /// </summary>
        public static string ScriptingHelpIncludeFile {
            get {
                return ResourceManager.GetString("ScriptingHelpIncludeFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to What type of scripting language do you want to use?	Allowed:	na.
        /// </summary>
        public static string ScriptingHelpLanguageType {
            get {
                return ResourceManager.GetString("ScriptingHelpLanguageType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns the output of the script, if any.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string ScriptingHelpResult {
            get {
                return ResourceManager.GetString("ScriptingHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	To run a programming script, put the script you want to execute in here.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string ScriptingHelpScript {
            get {
                return ResourceManager.GetString("ScriptingHelpScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify an alias for the selected data.&lt;br/&gt;	This needs to conform to variable notation.&lt;br/&gt;	This will be the value that will be acted upon in the activity inserted below.&lt;br/&gt;	To ensure that the original values are updated ensure that the result of the activity is set to this value.&lt;br/&gt;	Allowed:	&lt;ol&gt;	&lt;li&gt;[[alias]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string SelectAndApplyAliasHelpText {
            get {
                return ResourceManager.GetString("SelectAndApplyAliasHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only collections go in here.&lt;br/&gt;	You can use the (*) or () notation for record sets or object arrays.&lt;br/&gt;	This is the collection of items that will be iterated over.&lt;br /&gt;	&lt;br /&gt;	For example to iterate over all ages in the person recordset this field will contain [[person(*).age]].&lt;br/&gt;	Allowed:	&lt;ol&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;li&gt;[[@Object(*).Field]]&lt;/li&gt;	&lt;li&gt;[[@Object().Field]]&lt;/li&gt;	&lt;li&gt;[[@Object.InnerCollection().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string SelectAndApplyDataSourceHelpText {
            get {
                return ResourceManager.GetString("SelectAndApplyDataSourceHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To execute a set of Activities in sequence put them in the order you want them executed.	To execute more than one item in a loop construct etc. put the activities in a sequence first and then put the sequence into the loop construct.	Error handling operates as a catch all for all items in the sequence..
        /// </summary>
        public static string SequenceHelpSequence {
            get {
                return ResourceManager.GetString("SequenceHelpSequence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For network computers, type in the name of the computer on the network and select it from the drop down list.&lt;br/&gt;	&lt;br/&gt;	For remote servers, such as Hybrid cloud environments, Azure hosted servers etc., put the server URL in here..
        /// </summary>
        public static string ServerAddressHelp {
            get {
                return ResourceManager.GetString("ServerAddressHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By default, you can connect to other Warewolf Servers over HTTP or HTTPS.&lt;br/&gt;.
        /// </summary>
        public static string ServerProtocolHelp {
            get {
                return ResourceManager.GetString("ServerProtocolHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By default this port will be 3143 for HTTPS connections and 3142 for HTTP connections.&lt;br/&gt;	&lt;br/&gt;	Do not change this unless you know the ports on the remote machine have been altered..
        /// </summary>
        public static string ServerSelectPortHelp {
            get {
                return ResourceManager.GetString("ServerSelectPortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the public account to authenticate on the remote server.&lt;br/&gt;	&lt;br/&gt;	If there are no resources on the remote server, there will be no Public authentication..
        /// </summary>
        public static string ServerSelectPublicHelp {
            get {
                return ResourceManager.GetString("ServerSelectPublicHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a specific windows account to authenticate on the remote server.&lt;br/&gt;	&lt;br/&gt;	Use the domain if relevant e.g. DOMAIN\Username.
        /// </summary>
        public static string ServerSelectUserHelp {
            get {
                return ResourceManager.GetString("ServerSelectUserHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uses the logged on windows account to authenticate on the remote server..
        /// </summary>
        public static string ServerSelectWindowsHelp {
            get {
                return ResourceManager.GetString("ServerSelectWindowsHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the connection to the remote Warewolf Server.	Make sure the relevant ports (3142, 3143 by default) are open on any firewalls between this server and the remote server..
        /// </summary>
        public static string ServerTestConnectionHelp {
            get {
                return ResourceManager.GetString("ServerTestConnectionHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insert the input data for this service. It will be mapped to the input field listed in the To Service column. If the input is a Recordset field then you can use (*) to pass all the recordset fields into the workflow service. e.g. [[my(*).recs]] -&gt; input().records	You can also put multiple fields into one field with other text much like the assign tool.	By default similar matches from the variable list are used where possible.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Fi [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ServiceHelpInput {
            get {
                return ResourceManager.GetString("ServiceHelpInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Insert the variable that you want the output of the workflow to be mapped into. By default similar matches from the variable list are used where possible.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string ServiceHelpOutput {
            get {
                return ResourceManager.GetString("ServiceHelpOutput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Selecting this checkbox will cause the workflow to execute as &quot;Fire and Forget&quot;. This will free up the parent workflow to continue without waiting for a response from the nested workflow.	Warning: Any data returned from this workflow will not be mapped back and will therefore not be available for use..
        /// </summary>
        public static string ServiceHelpRunWorkflowAsync {
            get {
                return ResourceManager.GetString("ServiceHelpRunWorkflowAsync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel the test response results. Cancelling will not use the results from the test execution to determine the actions outputs..
        /// </summary>
        public static string ServiceTestCancelButtonHelp {
            get {
                return ResourceManager.GetString("ServiceTestCancelButtonHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Accept the test response results. This will use the results from the test execution to determine the actions outputs..
        /// </summary>
        public static string ServiceTestDoneButtonHelp {
            get {
                return ResourceManager.GetString("ServiceTestDoneButtonHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicates this test so you can quickly make similar tests. All fields will be copied as is..
        /// </summary>
        public static string ServiceTestDuplicateSelectedTestHelpText {
            get {
                return ResourceManager.GetString("ServiceTestDuplicateSelectedTestHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables or disables the test. A disabled test will be ignored when requested to run.
        ///A test must be ignored/disabled before it can be deleted..
        /// </summary>
        public static string ServiceTestEnableRunSelectedTestHelpText {
            get {
                return ResourceManager.GetString("ServiceTestEnableRunSelectedTestHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assert that the error contains some particular text.
        ///    This allows you to make sure the error you receive, with certain inputs to your service, is the correct error and not due to something else..
        /// </summary>
        public static string ServiceTestErrorContainsTextHelpText {
            get {
                return ResourceManager.GetString("ServiceTestErrorContainsTextHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The test expects an error. If this option is selected, ALL other asserts will be ignored..
        /// </summary>
        public static string ServiceTestErrorExpectedHelpText {
            get {
                return ResourceManager.GetString("ServiceTestErrorExpectedHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Tests editor to setup tests that verify your service is working correctly..
        /// </summary>
        public static string ServiceTestGenericHelpText {
            get {
                return ResourceManager.GetString("ServiceTestGenericHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the execution of this resource..
        /// </summary>
        public static string ServiceTestHelp {
            get {
                return ResourceManager.GetString("ServiceTestHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The input value for the service. This is the input to the service for the test you want to run..
        /// </summary>
        public static string ServiceTestInputsValueHelpText {
            get {
                return ResourceManager.GetString("ServiceTestInputsValueHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of this test. Test names should be unique and indicate what is being tested. 
        ///    The test is always associated with the service running it..
        /// </summary>
        public static string ServiceTestNameHelpText {
            get {
                return ResourceManager.GetString("ServiceTestNameHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates a new test for this resource. You can create as many tests for this resource as you like..
        /// </summary>
        public static string ServiceTestNewTestHelpText {
            get {
                return ResourceManager.GetString("ServiceTestNewTestHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The test expects no error. If this option is selected, it will be aAsserted with all other asserts..
        /// </summary>
        public static string ServiceTestNoErrorExpectedHelpText {
            get {
                return ResourceManager.GetString("ServiceTestNoErrorExpectedHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Value of the item you want to assert from..
        /// </summary>
        public static string ServiceTestOutputFromHelpText {
            get {
                return ResourceManager.GetString("ServiceTestOutputFromHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Value of the item you want to assert to..
        /// </summary>
        public static string ServiceTestOutputToHelpText {
            get {
                return ResourceManager.GetString("ServiceTestOutputToHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is the final output of the service that will be asserted..
        /// </summary>
        public static string ServiceTestOutputValueHelpText {
            get {
                return ResourceManager.GetString("ServiceTestOutputValueHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The final service output you want to make the assert on..
        /// </summary>
        public static string ServiceTestOutputVariableHelpText {
            get {
                return ResourceManager.GetString("ServiceTestOutputVariableHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter the password for the account you want to use for authenticating..
        /// </summary>
        public static string ServiceTestPasswordHelpText {
            get {
                return ResourceManager.GetString("ServiceTestPasswordHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the public account to authenticate on the remote server.&lt;br/&gt;	&lt;br/&gt;	If there are no resources on the remote server, there will be no Public authentication..
        /// </summary>
        public static string ServiceTestPublicHelpText {
            get {
                return ResourceManager.GetString("ServiceTestPublicHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Runs all tests that are marked as enabled.
        /// </summary>
        public static string ServiceTestRunAllTestHelpText {
            get {
                return ResourceManager.GetString("ServiceTestRunAllTestHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Run this test [F5].
        /// </summary>
        public static string ServiceTestRunSelectedTestHelpText {
            get {
                return ResourceManager.GetString("ServiceTestRunSelectedTestHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Setup and edit this test..
        /// </summary>
        public static string ServiceTestSelectedTestHelpText {
            get {
                return ResourceManager.GetString("ServiceTestSelectedTestHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Value of the item you want to assert from..
        /// </summary>
        public static string ServiceTestStepAssertFromHelpText {
            get {
                return ResourceManager.GetString("ServiceTestStepAssertFromHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of Assert you want to make..
        /// </summary>
        public static string ServiceTestStepAssertOpsHelpText {
            get {
                return ResourceManager.GetString("ServiceTestStepAssertOpsHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Asserts the Result has a type of value at this step..
        /// </summary>
        public static string ServiceTestStepAssertRadioButtonHelpText {
            get {
                return ResourceManager.GetString("ServiceTestStepAssertRadioButtonHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Value of the item you want to assert..
        /// </summary>
        public static string ServiceTestStepAssertToHelpText {
            get {
                return ResourceManager.GetString("ServiceTestStepAssertToHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Value of the item you want to assert..
        /// </summary>
        public static string ServiceTestStepAssertValueHelpText {
            get {
                return ResourceManager.GetString("ServiceTestStepAssertValueHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The item you want to make the assert on..
        /// </summary>
        public static string ServiceTestStepAssertVariableHelpText {
            get {
                return ResourceManager.GetString("ServiceTestStepAssertVariableHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove this step from the assert list. This step will not be asserted. To add it back, simply click on it in the workflow designer..
        /// </summary>
        public static string ServiceTestStepDeleteStepHelpText {
            get {
                return ResourceManager.GetString("ServiceTestStepDeleteStepHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mocked values will not execute and will set the value of a result at this step. 
        ///    Use this when you do not want to execute a service such as a database call or another workflow..
        /// </summary>
        public static string ServiceTestStepMockRadioButtonHelpText {
            get {
                return ResourceManager.GetString("ServiceTestStepMockRadioButtonHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Value of the item you want to assert..
        /// </summary>
        public static string ServiceTestStepOptionsForValueHelpText {
            get {
                return ResourceManager.GetString("ServiceTestStepOptionsForValueHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stop this test.
        /// </summary>
        public static string ServiceTestStopSelectedTestHelpText {
            get {
                return ResourceManager.GetString("ServiceTestStopSelectedTestHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a specific windows account to authenticate on the remote server.&lt;br/&gt;	&lt;br/&gt;	Use the domain if relevant e.g. DOMAIN\Username.
        /// </summary>
        public static string ServiceTestUserHelpText {
            get {
                return ResourceManager.GetString("ServiceTestUserHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The full username of the account you want to use to run this test..
        /// </summary>
        public static string ServiceTestUserNameHelpText {
            get {
                return ResourceManager.GetString("ServiceTestUserNameHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uses the logged on windows account to authenticate on the remote server..
        /// </summary>
        public static string ServiceTestWindowsHelpText {
            get {
                return ResourceManager.GetString("ServiceTestWindowsHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removes the performance counters for this specific resource.
        /// </summary>
        public static string SettingsPerfCounterRemoveResourceHelpText {
            get {
                return ResourceManager.GetString("SettingsPerfCounterRemoveResourceHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select a resource from the active server to set specific counters for..
        /// </summary>
        public static string SettingsPerfCounterResourceBrowseHelpResource {
            get {
                return ResourceManager.GetString("SettingsPerfCounterResourceBrowseHelpResource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A counter for the average execution time of this specific resource..
        /// </summary>
        public static string SettingsPerfCounterResourceHelpAvgExecTime {
            get {
                return ResourceManager.GetString("SettingsPerfCounterResourceHelpAvgExecTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A counter for the number of concurrent requests of this specific resource..
        /// </summary>
        public static string SettingsPerfCounterResourceHelpConReq {
            get {
                return ResourceManager.GetString("SettingsPerfCounterResourceHelpConReq", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A counter for the number of requests per second of this resource..
        /// </summary>
        public static string SettingsPerfCounterResourceHelpReqPerSec {
            get {
                return ResourceManager.GetString("SettingsPerfCounterResourceHelpReqPerSec", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A counter for the total number of errors of this resource..
        /// </summary>
        public static string SettingsPerfCounterResourceHelpTotErrors {
            get {
                return ResourceManager.GetString("SettingsPerfCounterResourceHelpTotErrors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A counter for the average execution time of all the resources on the server..
        /// </summary>
        public static string SettingsPerfCounterServerHelpAvgExecTime {
            get {
                return ResourceManager.GetString("SettingsPerfCounterServerHelpAvgExecTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A counter for the number of concurrent requests on the server..
        /// </summary>
        public static string SettingsPerfCounterServerHelpConcurrentReq {
            get {
                return ResourceManager.GetString("SettingsPerfCounterServerHelpConcurrentReq", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A counter for the authorization failures on this server..
        /// </summary>
        public static string SettingsPerfCounterServerHelpNotAuthErrors {
            get {
                return ResourceManager.GetString("SettingsPerfCounterServerHelpNotAuthErrors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A counter for the number of requests per second on this server..
        /// </summary>
        public static string SettingsPerfCounterServerHelpReqPerSec {
            get {
                return ResourceManager.GetString("SettingsPerfCounterServerHelpReqPerSec", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A counter for the total number of errors on this server..
        /// </summary>
        public static string SettingsPerfCounterServerHelpTotalErrors {
            get {
                return ResourceManager.GetString("SettingsPerfCounterServerHelpTotalErrors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A counter for the number of times a workflow was requested but did not exist on this server..
        /// </summary>
        public static string SettingsPerfCounterServerHelpWfNotFound {
            get {
                return ResourceManager.GetString("SettingsPerfCounterServerHelpWfNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resource picker.
        /// </summary>
        public static string SettingsSecurityResourceBrowseHelpResources {
            get {
                return ResourceManager.GetString("SettingsSecurityResourceBrowseHelpResources", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resource picker.
        /// </summary>
        public static string SettingsSecurityResourceBrowseHelpWindowsGroup {
            get {
                return ResourceManager.GetString("SettingsSecurityResourceBrowseHelpWindowsGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By Default this group will be able to Edit or Delete this resource. 	To do this they can also View and Execute..
        /// </summary>
        public static string SettingsSecurityResourceHelpContribute {
            get {
                return ResourceManager.GetString("SettingsSecurityResourceHelpContribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By Default this group will be able to call or execute this workflow..
        /// </summary>
        public static string SettingsSecurityResourceHelpExecute {
            get {
                return ResourceManager.GetString("SettingsSecurityResourceHelpExecute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To set specific permissions for a resource on this server, select the resource here.	Any permissions applied to this resource will OVERWRITE the server settings above.	By specifying a resource here, it will not inherit permissions from the server (above)..
        /// </summary>
        public static string SettingsSecurityResourceHelpResource {
            get {
                return ResourceManager.GetString("SettingsSecurityResourceHelpResource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By Default this group will be able to open and view this resource.	Typically this is used by Business Analysts to sign off work and participate in the development process..
        /// </summary>
        public static string SettingsSecurityResourceHelpView {
            get {
                return ResourceManager.GetString("SettingsSecurityResourceHelpView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To set resource specific permissions, enter the Windows Group name or &quot;Public&quot; here followed by the system access for that group. 	Permissions are cumulative in nature e.g. If someone is a member of two groups and only one of those groups has Contribute permission, then that member WILL have Contribute permission.	Public is an internal Warewolf group that applies to everyone..
        /// </summary>
        public static string SettingsSecurityResourceHelpWindowsGroup {
            get {
                return ResourceManager.GetString("SettingsSecurityResourceHelpWindowsGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Opens the windows group picker for this computer. If this server is on another domain, you will need to either manually type the Group name in, or launch a studio from a PC that is on that domain to get access to the group picker.	Warewolf has a built in group for and called Public..
        /// </summary>
        public static string SettingsSecurityServerBrowseHelpWindowsGroup {
            get {
                return ResourceManager.GetString("SettingsSecurityServerBrowseHelpWindowsGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Administrators can amend security permissions and change server settings. 	The local machine Administrators are automatically given this permission.	Giving Public access to this permission is akin to turning security off and is not recommended..
        /// </summary>
        public static string SettingsSecurityServerHelpAdministrator {
            get {
                return ResourceManager.GetString("SettingsSecurityServerHelpAdministrator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By Default this group will be able to add new resources, edit resources and delete existing resources on this server. 	To do this they can also View and Execute..
        /// </summary>
        public static string SettingsSecurityServerHelpContribute {
            get {
                return ResourceManager.GetString("SettingsSecurityServerHelpContribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By Default this group will be able to deploy resources off this server..
        /// </summary>
        public static string SettingsSecurityServerHelpDeployFrom {
            get {
                return ResourceManager.GetString("SettingsSecurityServerHelpDeployFrom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By Default this group will be able to deploy resources onto this server.	Deploy may mean overwriting existing work and can be done without Contribute privileges..
        /// </summary>
        public static string SettingsSecurityServerHelpDeployTo {
            get {
                return ResourceManager.GetString("SettingsSecurityServerHelpDeployTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By Default this group will be able to call or execute resources on this server..
        /// </summary>
        public static string SettingsSecurityServerHelpExecute {
            get {
                return ResourceManager.GetString("SettingsSecurityServerHelpExecute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By Default this group will be able to open and view resources on the server. 	Typically this is used by Business Analysts to sign off work and participate in the development process..
        /// </summary>
        public static string SettingsSecurityServerHelpView {
            get {
                return ResourceManager.GetString("SettingsSecurityServerHelpView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To set server wide permissions for security, enter the Windows Group name or &quot;Public&quot; here followed by the system access for that group. You can click on the ellipsis for help with identifying the correct windows group.	By Default these permissions will permeate all resources on the server, unless specified below in Resource Permissions.	Permissions are cumulative in nature e.g. If someone is a member of two groups and only one of those groups has Contribute permission, then that member WILL have Contribute [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SettingsSecurityServerHelpWindowsGroup {
            get {
                return ResourceManager.GetString("SettingsSecurityServerHelpWindowsGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns the number of records deleted.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string SharepointDeleteHelpResult {
            get {
                return ResourceManager.GetString("SharepointDeleteHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter SharePoint file download path &lt;br /&gt;	Example:&lt;br /&gt; 	SharedFolder/Help.txt&lt;br /&gt;	SharedFolder/HelpFolder/[[Scalar]].&lt;br /&gt;	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string SharePointDownloadHelpFolder {
            get {
                return ResourceManager.GetString("SharePointDownloadHelpFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit the connection properties of the selected SharePoint Server..
        /// </summary>
        public static string SharepointEditServerHelp {
            get {
                return ResourceManager.GetString("SharepointEditServerHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter SharePoint file From path &lt;br /&gt;	Example:&lt;br /&gt; 	SharedFolder/Help.txt&lt;br /&gt;	SharedFolder/HelpFolder/[[Scalar]].&lt;br /&gt;	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string SharePointHelpCopyFrom {
            get {
                return ResourceManager.GetString("SharePointHelpCopyFrom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter SharePoint file To path &lt;br /&gt;	Example:&lt;br /&gt; 	SharedFolder/Help.txt&lt;br /&gt;	SharedFolder/HelpFolder/[[Scalar]].&lt;br /&gt;	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string SharePointHelpCopyTo {
            get {
                return ResourceManager.GetString("SharePointHelpCopyTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter SharePoint file path &lt;br /&gt;	Example:&lt;br /&gt; 	SharedFolder/Help.txt&lt;br /&gt;	SharedFolder/HelpFolder/[[Scalar]].&lt;br /&gt;	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string SharePointHelpDelete {
            get {
                return ResourceManager.GetString("SharePointHelpDelete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the field you want to match on..
        /// </summary>
        public static string SharepointHelpFieldToMatchOn {
            get {
                return ResourceManager.GetString("SharepointHelpFieldToMatchOn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select a list to read data from.	If the list changed, click the refresh button.	Allowed:	Select a list to read data from..
        /// </summary>
        public static string SharepointHelpList {
            get {
                return ResourceManager.GetString("SharepointHelpList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select a preconfigured SharePoint server source or &quot;New SharePoint Server Source...&quot; to add a new one..
        /// </summary>
        public static string SharepointHelpServer {
            get {
                return ResourceManager.GetString("SharepointHelpServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns Success or Failure.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string SharepointInsertHelpResult {
            get {
                return ResourceManager.GetString("SharepointInsertHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Read SharePoint folders and files. Enter SharePoint folder or file path &lt;br /&gt;	Example:&lt;br /&gt; 	SharedFolder/HelpFolder/Help.&lt;br /&gt;	SharedFolder/HelpFolder/MyFile.txt&lt;br /&gt;	SharedFolder/HelpFolder/[[Scalar]]&lt;br /&gt;	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string SharePointReadFolderHelpFolder {
            get {
                return ResourceManager.GetString("SharePointReadFolderHelpFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refreshes the information from the server..
        /// </summary>
        public static string SharepointRefreshListHelp {
            get {
                return ResourceManager.GetString("SharepointRefreshListHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The full URL of the SharePoint server.
        /// </summary>
        public static string SharepointServiceSourceServerHelp {
            get {
                return ResourceManager.GetString("SharepointServiceSourceServerHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the connection to the SharePoint server.
        /// </summary>
        public static string SharepointServiceSourceTestHelp {
            get {
                return ResourceManager.GetString("SharepointServiceSourceTestHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter SharePoint folder upload location path &lt;br /&gt;	Example:&lt;br /&gt; 	SharedFolder/HelpFolder/Help&lt;br /&gt;	SharedFolder/HelpFolder/[[Scalar]]&lt;br /&gt;	&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string SharePointUploadHelpFolder {
            get {
                return ResourceManager.GetString("SharePointUploadHelpFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To Sort a recordset enter the field in the recordset you would like to sort on.	To sort on more than one field, perform the sort action for each field you would like to sort on, ending with the priority sort.	&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string SortHelpSortField {
            get {
                return ResourceManager.GetString("SortHelpSortField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the order of the sorting.	Forward will go 1-9 then a-Z.	Backward will go Z-a then 9-1..
        /// </summary>
        public static string SortHelpSortOrderType {
            get {
                return ResourceManager.GetString("SortHelpSortOrderType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit the selected database connection properties.
        /// </summary>
        public static string SQLBulkInsertEditDatabaseHelp {
            get {
                return ResourceManager.GetString("SQLBulkInsertEditDatabaseHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of rows you would like to insert at a time.	The default is 0 which will do everything in 1 batch.	If you specify 50, then 50 rows will be bulk inserted at a time.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Number   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string SQLBulkInsertHelpBatchSize {
            get {
                return ResourceManager.GetString("SQLBulkInsertHelpBatchSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check constraints while data is being inserted. By default, constraints are not checked..
        /// </summary>
        public static string SQLBulkInsertHelpCheckConstraints {
            get {
                return ResourceManager.GetString("SQLBulkInsertHelpCheckConstraints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select a preconfigured database source or &quot;New Database Source...&quot; to add a new one..
        /// </summary>
        public static string SQLBulkInsertHelpDatabase {
            get {
                return ResourceManager.GetString("SQLBulkInsertHelpDatabase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When specified, cause the server to fire the insert triggers for the rows being inserted into the database..
        /// </summary>
        public static string SQLBulkInsertHelpFiretriggers {
            get {
                return ResourceManager.GetString("SQLBulkInsertHelpFiretriggers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To bulk insert data into a table, put the data to insert in here.	Using recordset (*) notation will put the entire recordset in and is the normal usage scenario for large data inserts to SQL.	A single Recordset will yield the best performance. Do not mix, scalars and/or different recordsets for optimum performance.	To quickly change the input data, press the Quick Variable Input button and amend the mappings as necessary.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field] [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SQLBulkInsertHelpInputData {
            get {
                return ResourceManager.GetString("SQLBulkInsertHelpInputData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Preserve source identity values. When not specified, identity values are assigned by the destination..
        /// </summary>
        public static string SQLBulkInsertHelpKeepidentity {
            get {
                return ResourceManager.GetString("SQLBulkInsertHelpKeepidentity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns Success or the record numbers with errors.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string SQLBulkInsertHelpResult {
            get {
                return ResourceManager.GetString("SQLBulkInsertHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Blank records will not be added to the SQL table..
        /// </summary>
        public static string SQLBulkInsertHelpSkipblankrows {
            get {
                return ResourceManager.GetString("SQLBulkInsertHelpSkipblankrows", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select a table to perform the bulk insert into.	If the table schema has changed or recently added to the source, click the refresh button..
        /// </summary>
        public static string SQLBulkInsertHelpTable {
            get {
                return ResourceManager.GetString("SQLBulkInsertHelpTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Obtain a bulk update lock for the duration of the bulk copy operation. When not specified, row locks are used..
        /// </summary>
        public static string SQLBulkInsertHelpTablelock {
            get {
                return ResourceManager.GetString("SQLBulkInsertHelpTablelock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of seconds you would like the operation to complete in.	All batches in total must complete within this time period.	The default is 0 which will be no time constraint.	If you specify 30, then 30 seconds will be allowed for the entire operation to complete before timing out.	Note, the timeout is purely for the actual SQL connection and not the preparation of the data to be inserted.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field] [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SqlBulkInsertHelpTimeout {
            get {
                return ResourceManager.GetString("SqlBulkInsertHelpTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When specified, each batch of the bulk-copy operation will occur within a transaction.	Allowed:	When specified, each batch of the bulk-copy operation will occur within a transaction..
        /// </summary>
        public static string SqlBulkInsertHelpUseInternalTransaction {
            get {
                return ResourceManager.GetString("SqlBulkInsertHelpUseInternalTransaction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refresh the information from the server.
        /// </summary>
        public static string SQLBulkInsertRefreshListHelp {
            get {
                return ResourceManager.GetString("SQLBulkInsertRefreshListHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns the type of system information selected.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string SystemInformationHelpResult {
            get {
                return ResourceManager.GetString("SystemInformationHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the type of system information you would like to use..
        /// </summary>
        public static string SystemInformationHelpSysInfoType {
            get {
                return ResourceManager.GetString("SystemInformationHelpSysInfoType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the email account is working.
        /// </summary>
        public static string TestEmailAccountHelp {
            get {
                return ResourceManager.GetString("TestEmailAccountHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delete this test.
        /// </summary>
        public static string TestsDeleteSelectedTestHelpText {
            get {
                return ResourceManager.GetString("TestsDeleteSelectedTestHelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Assign tool to set the value of a variable..
        /// </summary>
        public static string Tool_Data_Assign {
            get {
                return ResourceManager.GetString("Tool_Data_Assign", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Assign Object tool to manipulate Object data. You can use the Assign Object tool inside a Select &amp; Apply tool for more fine-grained control of the manipulation..
        /// </summary>
        public static string Tool_Data_Assign_Object {
            get {
                return ResourceManager.GetString("Tool_Data_Assign_Object", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Base Conversion tool to convert data From Text, Base64, Hex and Binary to Text, Base64, Hex and Binary..
        /// </summary>
        public static string Tool_Data_Base_Convert {
            get {
                return ResourceManager.GetString("Tool_Data_Base_Convert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Case Conversion tool to convert or change the case of text..
        /// </summary>
        public static string Tool_Data_Case_Convert {
            get {
                return ResourceManager.GetString("Tool_Data_Case_Convert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Data Merge to join recordset data together. Very handy for making flat files..
        /// </summary>
        public static string Tool_Data_Data_Merge {
            get {
                return ResourceManager.GetString("Tool_Data_Data_Merge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Data Split to break up a variable into multiple variables based on some character or index, a new line or a tab etc..
        /// </summary>
        public static string Tool_Data_Data_Split {
            get {
                return ResourceManager.GetString("Tool_Data_Data_Split", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Find Index tool to find the numeric index of one or more occurrences of something in that variable..
        /// </summary>
        public static string Tool_Data_Find_Index {
            get {
                return ResourceManager.GetString("Tool_Data_Find_Index", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Replace tool to find and replace information in a variable / recordset. And return the count of how many were replaced..
        /// </summary>
        public static string Tool_Data_Replace {
            get {
                return ResourceManager.GetString("Tool_Data_Replace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the MySQL tool to execute against any MySQL Database. This tool will expose the stored procedures etc. that are already set up on the database. It allows you to map Warewolf data into, execute and then map the Warewolf data out of them..
        /// </summary>
        public static string Tool_Database_MySQL {
            get {
                return ResourceManager.GetString("Tool_Database_MySQL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the ODBC tool to execute against any ODBC Data Source. This tool will execute your commands against the ODBC on your computer. It allows you to map Warewolf data into, execute then map Warewolf data out of them..
        /// </summary>
        public static string Tool_Database_ODBC {
            get {
                return ResourceManager.GetString("Tool_Database_ODBC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Oracle tool to execute against any Oracle database. This tool will expose the stored procedures etc. that are already setup on the database and allow you to map Warewolf data into, execute and then map Warewolf data out of them..
        /// </summary>
        public static string Tool_Database_Oracle {
            get {
                return ResourceManager.GetString("Tool_Database_Oracle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the PostgreSQL tool to execute against any PostgreSQL database. This tool will expose the stored procedures etc. that are already setup on the database and allow you to map Warewolf data into, execute and then map Warewolf data out of them..
        /// </summary>
        public static string Tool_Database_PostgreSQL {
            get {
                return ResourceManager.GetString("Tool_Database_PostgreSQL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Bulk Insert tool to move more than one record at a time into Microsoft SQL Server. This tool exposes the built-in functionality options and is highly performant when used exclusively with the Recordset data going in..
        /// </summary>
        public static string Tool_Database_SQL_Bulk_Insert {
            get {
                return ResourceManager.GetString("Tool_Database_SQL_Bulk_Insert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the SQL tool to execute against any SQL Database. This tool will expose the stored procedures etc. that are already setup on the database. It allows you to map Warewolf data into, execute then map Warewolf data out of them..
        /// </summary>
        public static string Tool_Database_SQL_Server {
            get {
                return ResourceManager.GetString("Tool_Database_SQL_Server", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Dropbox Delete tool to remove files or folders from your Dropbox online account..
        /// </summary>
        public static string Tool_Dropbox_Delete {
            get {
                return ResourceManager.GetString("Tool_Dropbox_Delete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Dropbox Download tool to pull files and folders down from your Dropbox online account onto your system..
        /// </summary>
        public static string Tool_Dropbox_Download {
            get {
                return ResourceManager.GetString("Tool_Dropbox_Download", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Dropbox List Contents tool to read the file, folder or file and folder information of a folder and or subfolders in your Dropbox online account..
        /// </summary>
        public static string Tool_Dropbox_List_Contents {
            get {
                return ResourceManager.GetString("Tool_Dropbox_List_Contents", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Dropbox Upload tool to upload from your system to your Dropbox online account..
        /// </summary>
        public static string Tool_Dropbox_Upload {
            get {
                return ResourceManager.GetString("Tool_Dropbox_Upload", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the exchange send tool to email from an Exchange email account..
        /// </summary>
        public static string Tool_Email_Exchange_Send {
            get {
                return ResourceManager.GetString("Tool_Email_Exchange_Send", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the SMTP send tool to send an email from a SMTP server e.g. Gmail.
        /// </summary>
        public static string Tool_Email_SMTP_Send {
            get {
                return ResourceManager.GetString("Tool_Email_SMTP_Send", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Copy tool to make a copy of a file or folder. (File System, UNC, FTP, FTPS, SFTP).
        /// </summary>
        public static string Tool_File_Copy {
            get {
                return ResourceManager.GetString("Tool_File_Copy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Create tool to create folders or files. (File System, UNC, FTP, FTPS, SFTP).
        /// </summary>
        public static string Tool_File_Create {
            get {
                return ResourceManager.GetString("Tool_File_Create", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Delete tool to delete a file or a folder. (File System, UNC, FTP, FTPS, SFTP).
        /// </summary>
        public static string Tool_File_Delete {
            get {
                return ResourceManager.GetString("Tool_File_Delete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Move tool to move folders or files from one location to another. (File System, UNC, FTP, FTPS, SFTP).
        /// </summary>
        public static string Tool_File_Move {
            get {
                return ResourceManager.GetString("Tool_File_Move", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Read File tool to put the contents of a file into a variable. (File System, UNC, FTP, FTPS, SFTP).
        /// </summary>
        public static string Tool_File_Read_File {
            get {
                return ResourceManager.GetString("Tool_File_Read_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Read Folder tool to read the list of files in a folder into a variable. (File System, UNC, FTP, FTPS, SFTP).
        /// </summary>
        public static string Tool_File_Read_Folder {
            get {
                return ResourceManager.GetString("Tool_File_Read_Folder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Rename tool to rename a file or folder. (File System, UNC, FTP, FTPS, SFTP).
        /// </summary>
        public static string Tool_File_Rename {
            get {
                return ResourceManager.GetString("Tool_File_Rename", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Unzip tool to decompress a Zip file into a folder. (File System, UNC, FTP, FTPS, SFTP).
        /// </summary>
        public static string Tool_File_Unzip {
            get {
                return ResourceManager.GetString("Tool_File_Unzip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Write File tool to put the contents of a variable into a physical file on a disk. (File System, UNC, FTP, FTPS, SFTP).
        /// </summary>
        public static string Tool_File_Write_File {
            get {
                return ResourceManager.GetString("Tool_File_Write_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Zip tool to compress a folder or a file into a Zip archive. (File System, UNC, FTP, FTPS, SFTP).
        /// </summary>
        public static string Tool_File_Zip {
            get {
                return ResourceManager.GetString("Tool_File_Zip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Decision flow tool to check if something is True or False and execute different branches based on that decision..
        /// </summary>
        public static string Tool_Flow_Decision {
            get {
                return ResourceManager.GetString("Tool_Flow_Decision", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the sequence tool to group steps into a single step in a workflow..
        /// </summary>
        public static string Tool_Flow_Sequence {
            get {
                return ResourceManager.GetString("Tool_Flow_Sequence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Switch tool when you need to take a different action depending on the value of a variable. Just drag another flow arm to add another possibility..
        /// </summary>
        public static string Tool_Flow_Switch {
            get {
                return ResourceManager.GetString("Tool_Flow_Switch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Script tool to execute JavaScript code..
        /// </summary>
        public static string Tool_Javascript {
            get {
                return ResourceManager.GetString("Tool_Javascript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the For Each tool to run something a few times. Very handy for processing recordset or specific records..
        /// </summary>
        public static string Tool_LoopConstruct_For_Each {
            get {
                return ResourceManager.GetString("Tool_LoopConstruct_For_Each", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Select &amp; Apply tool to update Recordset and Object data without having to map the data out first. You can perform any number of updates or combinations of updates by using it in conjunction with the sequence tool..
        /// </summary>
        public static string Tool_LoopConstruct_Select_and_Apply {
            get {
                return ResourceManager.GetString("Tool_LoopConstruct_Select_and_Apply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Script tool to execute Python code..
        /// </summary>
        public static string Tool_Python {
            get {
                return ResourceManager.GetString("Tool_Python", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Count Records tool to return the number of records in a recordset..
        /// </summary>
        public static string Tool_Recordset_Count {
            get {
                return ResourceManager.GetString("Tool_Recordset_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Delete Records tool to remove records from a recordset..
        /// </summary>
        public static string Tool_Recordset_Delete {
            get {
                return ResourceManager.GetString("Tool_Recordset_Delete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Find Records tool to return indexes of records that match a given criteria..
        /// </summary>
        public static string Tool_Recordset_Find_Records {
            get {
                return ResourceManager.GetString("Tool_Recordset_Find_Records", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Records Length tool to get the length of the recordset..
        /// </summary>
        public static string Tool_Recordset_Length {
            get {
                return ResourceManager.GetString("Tool_Recordset_Length", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Sort Records tool to order records either forwards or backwards..
        /// </summary>
        public static string Tool_Recordset_Sort {
            get {
                return ResourceManager.GetString("Tool_Recordset_Sort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Unique Records tool to return all unique records in a recordset..
        /// </summary>
        public static string Tool_Recordset_Unique_Records {
            get {
                return ResourceManager.GetString("Tool_Recordset_Unique_Records", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the COM tool to connect to, and execute any, COM DLL from inside your flow-based service..
        /// </summary>
        public static string Tool_Resources_Com_DLL {
            get {
                return ResourceManager.GetString("Tool_Resources_Com_DLL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the DotNet DLL tool to connect to, and execute any, DotNet DLL from inside your flow-based service..
        /// </summary>
        public static string Tool_Resources_Dot_net_DLL {
            get {
                return ResourceManager.GetString("Tool_Resources_Dot_net_DLL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Service tool to execute another Warewolf service. Or, drag and drop directly from the Explorer..
        /// </summary>
        public static string Tool_Resources_Service {
            get {
                return ResourceManager.GetString("Tool_Resources_Service", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the WCF tool, to execute any pre-existing WCF services you may have access to. If your service returns any data you will be able to map this data into Warewolf variables, to use later in your flow..
        /// </summary>
        public static string Tool_Resources_WCF {
            get {
                return ResourceManager.GetString("Tool_Resources_WCF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Script tool to execute Ruby code..
        /// </summary>
        public static string Tool_Ruby {
            get {
                return ResourceManager.GetString("Tool_Ruby", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the CMD tool to execute command line commands like a batch file..
        /// </summary>
        public static string Tool_Scripting_CMD_Script {
            get {
                return ResourceManager.GetString("Tool_Scripting_CMD_Script", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Script tool to execute JavaScript, Ruby or Python code..
        /// </summary>
        public static string Tool_Scripting_Script {
            get {
                return ResourceManager.GetString("Tool_Scripting_Script", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the SharePoint Copy File tool to copy a file from a  SharePoint server. Also works with SharePoint Online..
        /// </summary>
        public static string Tool_SharePoint_Copy_File {
            get {
                return ResourceManager.GetString("Tool_SharePoint_Copy_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the SharePoint Create List Item tool to add an entry to a SharePoint list. Also works with SharePoint Online..
        /// </summary>
        public static string Tool_SharePoint_Create_List_Item {
            get {
                return ResourceManager.GetString("Tool_SharePoint_Create_List_Item", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the SharePoint Delete File tool to remove a file from a SharePoint server. Also works with SharePoint Online..
        /// </summary>
        public static string Tool_SharePoint_Delete_File {
            get {
                return ResourceManager.GetString("Tool_SharePoint_Delete_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the SharePoint Delete List Item tool to delete an entry from a SharePoint list. Also works with SharePoint Online..
        /// </summary>
        public static string Tool_SharePoint_Delete_List_Item {
            get {
                return ResourceManager.GetString("Tool_SharePoint_Delete_List_Item", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the SharePoint Download File tool to retreive a file from a SharePoint server. Also works with SharePoint Online..
        /// </summary>
        public static string Tool_SharePoint_Download_File {
            get {
                return ResourceManager.GetString("Tool_SharePoint_Download_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the SharePoint Move File tool to move files on a SharePoint server. Also works with SharePoint Online..
        /// </summary>
        public static string Tool_SharePoint_Move_File {
            get {
                return ResourceManager.GetString("Tool_SharePoint_Move_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the SharePoint Read Folder tool to list the files in a SharePoint directory. Also works with SharePoint Online..
        /// </summary>
        public static string Tool_SharePoint_Read_Folder {
            get {
                return ResourceManager.GetString("Tool_SharePoint_Read_Folder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the SharePoint Read List Item tool to Read the values off a SharePoint list. Also works with SharePoint online..
        /// </summary>
        public static string Tool_SharePoint_Read_List_Item {
            get {
                return ResourceManager.GetString("Tool_SharePoint_Read_List_Item", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the SharePoint Update List Item tool to update an entry on a SharePoint list. Also works with SharePoint Online..
        /// </summary>
        public static string Tool_SharePoint_Update_List_Item {
            get {
                return ResourceManager.GetString("Tool_SharePoint_Update_List_Item", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the SharePoint Upload File tool to send files to your SharePoint server. Also works with SharePoint Online..
        /// </summary>
        public static string Tool_SharePoint_Upload_File {
            get {
                return ResourceManager.GetString("Tool_SharePoint_Upload_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To perform a calculation, put the calculation in here in BODMAS format. To use the aggregate functions, use the recordset (*) notation e.g. SUM([[Staff(*).Salaries]]) will perform one calculation and give one result that is the total of all the Salaries fields in the Staff() recordset..
        /// </summary>
        public static string Tool_Utility_Aggregate_Calculate {
            get {
                return ResourceManager.GetString("Tool_Utility_Aggregate_Calculate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Calculate tool to apply Excel like functions and mathematical procedures..
        /// </summary>
        public static string Tool_Utility_Calculate {
            get {
                return ResourceManager.GetString("Tool_Utility_Calculate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Comment tool to leave notes and information within your workflow..
        /// </summary>
        public static string Tool_Utility_Comment {
            get {
                return ResourceManager.GetString("Tool_Utility_Comment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Create JSON tool to create JSON data..
        /// </summary>
        public static string Tool_Utility_Create_JSON {
            get {
                return ResourceManager.GetString("Tool_Utility_Create_JSON", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Date and Time tool to change a date’s format and add or subtract a piece of time..
        /// </summary>
        public static string Tool_Utility_Date_Time {
            get {
                return ResourceManager.GetString("Tool_Utility_Date_Time", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Date and Time Difference tool to calculate the difference in time of two date times..
        /// </summary>
        public static string Tool_Utility_Date_Time_Diff {
            get {
                return ResourceManager.GetString("Tool_Utility_Date_Time_Diff", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the format number tool for rounding and showing decimals..
        /// </summary>
        public static string Tool_Utility_Format_Number {
            get {
                return ResourceManager.GetString("Tool_Utility_Format_Number", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Rabbit MQ Consume tool to read messages off a Rabbit MQ server’s queue..
        /// </summary>
        public static string Tool_Utility_Rabbit_MQ_Consume {
            get {
                return ResourceManager.GetString("Tool_Utility_Rabbit_MQ_Consume", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Rabbit MQ Publish tool to publish messages to a Rabbit MQ queue. The queue will be created if it does not exist..
        /// </summary>
        public static string Tool_Utility_Rabbit_MQ_Publish {
            get {
                return ResourceManager.GetString("Tool_Utility_Rabbit_MQ_Publish", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Random tool to generate random numbers, letters, both or GUIDs..
        /// </summary>
        public static string Tool_Utility_Random {
            get {
                return ResourceManager.GetString("Tool_Utility_Random", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the System Information tool to get local information specific to the machine that is running the workflow..
        /// </summary>
        public static string Tool_Utility_Sys_Info {
            get {
                return ResourceManager.GetString("Tool_Utility_Sys_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Web Request tool to execute a URL and return the server response..
        /// </summary>
        public static string Tool_Utility_Web_Request {
            get {
                return ResourceManager.GetString("Tool_Utility_Web_Request", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Query XML data using XPath 2.0 syntax and then use the results in other parts of your workflow..
        /// </summary>
        public static string Tool_Utility_Xpath {
            get {
                return ResourceManager.GetString("Tool_Utility_Xpath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the HTTP Web DELETE tool to execute a web DELETE request. You can specify headers and other relevant data..
        /// </summary>
        public static string Tool_WebMethod_Delete {
            get {
                return ResourceManager.GetString("Tool_WebMethod_Delete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the HTTP Web GET tool to execute a web GET request. You can specify headers and other relevant data..
        /// </summary>
        public static string Tool_WebMethod_Get {
            get {
                return ResourceManager.GetString("Tool_WebMethod_Get", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the HTTP Web POST tool to execute a web POST request. You can specify headers and other relevant data..
        /// </summary>
        public static string Tool_WebMethod_Post {
            get {
                return ResourceManager.GetString("Tool_WebMethod_Post", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the HTTP Web PUT tool to execute a web PUT request. You can specify headers and other relevant data..
        /// </summary>
        public static string Tool_WebMethod_Put {
            get {
                return ResourceManager.GetString("Tool_WebMethod_Put", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filters the content of the toolbox..
        /// </summary>
        public static string ToolboxViewFilterSearchHelp {
            get {
                return ResourceManager.GetString("ToolboxViewFilterSearchHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If no records exist (NULL), use 0 (Zero) instead.
        ///    No recordset exists will be treated as a recordset with no records..
        /// </summary>
        public static string TreatNullAsZeroHelp {
            get {
                return ResourceManager.GetString("TreatNullAsZeroHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To identify unique information in a recordset, put the comma separated fields that need to be unique in here. 	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string UniqueHelpInFields {
            get {
                return ResourceManager.GetString("UniqueHelpInFields", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Returns the unique combinations into the variables specified. If there are multiple fields being returned, there should be multiple Results fields specified. Use a comma to separate the variables.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string UniqueHelpResults {
            get {
                return ResourceManager.GetString("UniqueHelpResults", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Which fields from the recordset would you like returned when a Unique combination is found? Use a comma separated list of the fields.	Where multiple rows are the same, the first one will be deemed Unique.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string UniqueHelpReturnFields {
            get {
                return ResourceManager.GetString("UniqueHelpReturnFields", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the password needed to open the zip file here.	Leaving the Archive Password blank will result in no archive password being used to open the file.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string UnzipHelpArchivePassword {
            get {
                return ResourceManager.GetString("UnzipHelpArchivePassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	Put the full path of the destination you are unzipping to here.	You can use File System, URI, SFTP, FTP or FTPS format.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string UnzipHelpDestination {
            get {
                return ResourceManager.GetString("UnzipHelpDestination", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a file or folder already exists, you can force a new one to overwrite the old one..
        /// </summary>
        public static string UnzipHelpForceoverwrite {
            get {
                return ResourceManager.GetString("UnzipHelpForceoverwrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Password of an account with permission to access the source. By default the account running Warewolf Server.exe service will be used.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string UnzipHelpPassword {
            get {
                return ResourceManager.GetString("UnzipHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns Success or will be blank depending on the success of the Unzip action.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string UnzipHelpResult {
            get {
                return ResourceManager.GetString("UnzipHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Username of an account with permission to access the source. By default the account running Warewolf Server.exe service will be used.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string UnzipHelpUsername {
            get {
                return ResourceManager.GetString("UnzipHelpUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connect with a specific user account..
        /// </summary>
        public static string UserAuthenticationHelp {
            get {
                return ResourceManager.GetString("UserAuthenticationHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The full username of the account you want to use to connect to this resource..
        /// </summary>
        public static string UserNameAuthenticationHelp {
            get {
                return ResourceManager.GetString("UserNameAuthenticationHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt; Warewolf Help &lt;/h2&gt; 	For more information, follow the link below.	&lt;br/&gt;&lt;br/&gt;	&lt;a href=&quot;http://warewolf.io/knowledge-base/&quot; target=&quot;_blank&quot;&gt;Read more in the Knowledge Base.&lt;/a&gt;.
        /// </summary>
        public static string WarewolfDefaultHelpDescription {
            get {
                return ResourceManager.GetString("WarewolfDefaultHelpDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to http://warewolf.io/knowledge-base/.
        /// </summary>
        public static string WarewolfHelpURL {
            get {
                return ResourceManager.GetString("WarewolfHelpURL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the connection Endpoint properties of the selected Wcf Source&lt;br&gt;	&lt;br/&gt;	Change the Endpoint Url from, say, a development to a live environment.&lt;br/&gt;	&lt;br/&gt;	&lt;a href=&quot;http://warewolf.io/knowledge-base/data-connectors&quot; target=&quot;_blank&quot;&gt;Read more in the Knowledgebase.&lt;/a&gt;.
        /// </summary>
        public static string WcfServiceEditSourceHelp {
            get {
                return ResourceManager.GetString("WcfServiceEditSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To create a new WCF source, click New..
        /// </summary>
        public static string WcfServiceNewSourceHelp {
            get {
                return ResourceManager.GetString("WcfServiceNewSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the Wcf Source you want to use from previously setup sources..
        /// </summary>
        public static string WcfServiceSourcesHelp {
            get {
                return ResourceManager.GetString("WcfServiceSourcesHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Wcf service endpoint url to connect to your web service.	&lt;style type=&quot;text/css&quot;&gt;#smtptable td{text-align:center;border:0px;}&lt;/style&gt;&lt;br/&gt;	e.g.&lt;br/&gt;	&lt;table border=&quot;1&quot; id=&quot;smtptable&quot;&gt;	&lt;tr align=&quot;center&quot;&gt;&lt;th&gt;Auto Discover Url&lt;&gt;&lt;th/tr&gt;	&lt;tr&gt;&lt;td&gt;https://localhost:8085/LiveService/Method.svc&lt;/td&gt;&lt;/tr&gt; .
        /// </summary>
        public static string WcfSourceHostNameHelp {
            get {
                return ResourceManager.GetString("WcfSourceHostNameHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The test data you want to use to execute this action with..
        /// </summary>
        public static string WebInputDefaultValueHelp {
            get {
                return ResourceManager.GetString("WebInputDefaultValueHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To supply additional header information in your get request, put the header info in here.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string WebRequestHelpHeader {
            get {
                return ResourceManager.GetString("WebRequestHelpHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only a single variable goes in here.	Returns the response text of the web get request.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string WebRequestHelpResult {
            get {
                return ResourceManager.GetString("WebRequestHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any data or variable can go in here.	To traverse and retrieve the raw response from a webpage, enter it in here.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string WebRequestHelpURL {
            get {
                return ResourceManager.GetString("WebRequestHelpURL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a reusable connection to a web service.&lt;br/&gt;	&lt;br/&gt;	This allows you to create a general connection string and the create the actual web service from there so you do not need to update the core address in every service from this provider / source..
        /// </summary>
        public static string WebServiceNewWebSourceHelp {
            get {
                return ResourceManager.GetString("WebServiceNewWebSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can manually add the response body here..
        /// </summary>
        public static string WebServicePasteHelp {
            get {
                return ResourceManager.GetString("WebServicePasteHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Paste the XML, JSON or plain text response of the web service call here.&lt;br/&gt;	&lt;br/&gt;	If you do not know the response body exactly, rather execute the Test execution..
        /// </summary>
        public static string WebServicePasteInputHelp {
            get {
                return ResourceManager.GetString("WebServicePasteInputHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request body.&lt;br/&gt;	&lt;br/&gt;	This is typically directly after the header text in the Request..
        /// </summary>
        public static string WebServiceRequestBodyHelp {
            get {
                return ResourceManager.GetString("WebServiceRequestBodyHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Web Service Request Headers.&lt;br/&gt;	&lt;br/&gt;	You can use variables here in the value field like [[Header_ResponseType]]. These variable values will be requested when you drop the service on the workflow designer..
        /// </summary>
        public static string WebServiceRequestHeadersTableHelp {
            get {
                return ResourceManager.GetString("WebServiceRequestHeadersTableHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Web Service Request URL to execute.&lt;br/&gt;	&lt;br/&gt;	The un-editable part is determined by the Source you are using, so it&apos;s easy to change when moving environments, for example, going from development to testing, or live..
        /// </summary>
        public static string WebServiceRequestUrlHelp {
            get {
                return ResourceManager.GetString("WebServiceRequestUrlHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change the connection string properties of the selected Webservice.&lt;br&gt;	&lt;br/&gt;	Change the connection string from, say, a development service to a live service.&lt;br/&gt;	&lt;br/&gt;	&lt;a href=&quot;http://warewolf.io/knowledge-base/data-connectors&quot; target=&quot;_blank&quot;&gt;Read more in the Knowledgebase.&lt;/a&gt;.
        /// </summary>
        public static string WebServiceSelectedSourceHelp {
            get {
                return ResourceManager.GetString("WebServiceSelectedSourceHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The base URL of the Webservice.&lt;br/&gt;	&lt;br/&gt;	This should be up to the part of the URL that contains the difference between your live and demo environments. e.g. https://myservices.mycompany.com/demo&lt;br/&gt;	&lt;br/&gt;	This will allow you to ship webservice connectors to live without having to change the base URL every time you do..
        /// </summary>
        public static string WebServiceSourceServerHelp {
            get {
                return ResourceManager.GetString("WebServiceSourceServerHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provides a list of available saved web sources.&lt;br/&gt;	&lt;br/&gt;	If a Web Source does not exist under this list, then click the &apos;New&apos; button to create a new Web Source..
        /// </summary>
        public static string WebServiceSourcesHelp {
            get {
                return ResourceManager.GetString("WebServiceSourcesHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test the Webservice to get response payload. &lt;br/&gt;	&lt;br/&gt;	This allows us to map response data back into the system for you..
        /// </summary>
        public static string WebServiceTestCommandHelp {
            get {
                return ResourceManager.GetString("WebServiceTestCommandHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uses the Windows Authentication protocols to authenticate the executing account. .
        /// </summary>
        public static string WindowsAuthenticationHelp {
            get {
                return ResourceManager.GetString("WindowsAuthenticationHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	Put the contents you want written to the file in here.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string WriteFileHelpContents {
            get {
                return ResourceManager.GetString("WriteFileHelpContents", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	To write content to a file, put the full path and file name in here.	You can use File System, URI, SFTP, FTP or FTPS format.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string WriteFileHelpFilename {
            get {
                return ResourceManager.GetString("WriteFileHelpFilename", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overwrite will replace the file contents with the new content.	Append Top puts the new content at the beginning of the file.	Append Bottom will add the new content to the end of the file..
        /// </summary>
        public static string WriteFileHelpMethod {
            get {
                return ResourceManager.GetString("WriteFileHelpMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Password of an account with permission to perform this action. By default the account running Warewolf Server.exe service will be used.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string WriteFileHelpPassword {
            get {
                return ResourceManager.GetString("WriteFileHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns Success or will be blank depending on the success of the Write action.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string WriteFileHelpResult {
            get {
                return ResourceManager.GetString("WriteFileHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Username of an account with permission to perform this action. By default the account running Warewolf Server.exe service will be used.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string WriteFileHelpUsername {
            get {
                return ResourceManager.GetString("WriteFileHelpUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns the result of the Xpath expression.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	Each Xpath expression returned will be added to the result recordset in a new record or comma separated list if a scalar variable is defined.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string XpathHelpResults {
            get {
                return ResourceManager.GetString("XpathHelpResults", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any data or variable can go in here.	To traverse an XML document and return information from it, enter the raw XML in here.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string XPathHelpXML {
            get {
                return ResourceManager.GetString("XPathHelpXML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Xpath notation describing the route to the data in the XML input.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string XPathHelpXPath {
            get {
                return ResourceManager.GetString("XPathHelpXPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the password needed to open the zip file here.	Leaving the Archive Password blank will result in no password being required to open the file.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string ZipHelpArchivePassword {
            get {
                return ResourceManager.GetString("ZipHelpArchivePassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The system will try and match your zipping requirements as far as possible.	None creates the new file with the content and adds no compression - fastest.	Partial attempts some compression.	Normal will apply standard compression.	Max will compress the zipped file as much as possible - slowest.	Allowed:	na.
        /// </summary>
        public static string ZipHelpCompressionType {
            get {
                return ResourceManager.GetString("ZipHelpCompressionType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	Put the full path of the destination you are zipping to here.	You can use File System, URI, SFTP, FTP or FTPS format.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string ZipHelpDestination {
            get {
                return ResourceManager.GetString("ZipHelpDestination", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any variable and/or data goes in here.	To zip a file or folder, put the full path of what you want zipped in here.	You can use File System, URI, SFTP, FTP or FTPS format.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string ZipHelpFileFolder {
            get {
                return ResourceManager.GetString("ZipHelpFileFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a file already exists, you can force a new one to overwrite the old one.	Allowed:	If it exists already, force an overwrite.
        /// </summary>
        public static string ZipHelpForceoverwrite {
            get {
                return ResourceManager.GetString("ZipHelpForceoverwrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Password of an account with permission to access the destination. By default the account running Warewolf Server.exe service will be used.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string ZipHelpPassword {
            get {
                return ResourceManager.GetString("ZipHelpPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only variables go in here.	Returns Success or will be blank depending on the success of the Zip action.	You can use [[Scalar]] as well as [[Recordset().Fields]].	Using recordset () will add a new record and (*) will assign every record.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string ZipHelpResult {
            get {
                return ResourceManager.GetString("ZipHelpResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For protected resources, specify the Username of an account with permission to access the source. By default the account running Warewolf Server.exe service will be used.	&lt;br /&gt;&lt;br /&gt;	Allowed:&lt;br /&gt;	Data   	&lt;ol&gt;	&lt;li&gt;[[Scalar]]&lt;/li&gt;	&lt;li&gt;[[Recordset(n).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset(*).Field]]&lt;/li&gt;	&lt;li&gt;[[Recordset().Field]]&lt;/li&gt;	&lt;/ol&gt;.
        /// </summary>
        public static string ZipHelpUsername {
            get {
                return ResourceManager.GetString("ZipHelpUsername", resourceCulture);
            }
        }
    }
}
